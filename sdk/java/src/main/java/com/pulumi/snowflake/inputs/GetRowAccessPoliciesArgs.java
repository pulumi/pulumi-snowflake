// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.snowflake.inputs.GetRowAccessPoliciesInArgs;
import com.pulumi.snowflake.inputs.GetRowAccessPoliciesLimitArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRowAccessPoliciesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRowAccessPoliciesArgs Empty = new GetRowAccessPoliciesArgs();

    /**
     * IN clause to filter the list of row access policies
     * 
     */
    @Import(name="in")
    private @Nullable Output<GetRowAccessPoliciesInArgs> in;

    /**
     * @return IN clause to filter the list of row access policies
     * 
     */
    public Optional<Output<GetRowAccessPoliciesInArgs>> in() {
        return Optional.ofNullable(this.in);
    }

    /**
     * Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
     * 
     */
    @Import(name="like")
    private @Nullable Output<String> like;

    /**
     * @return Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
     * 
     */
    public Optional<Output<String>> like() {
        return Optional.ofNullable(this.like);
    }

    /**
     * Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `startsWith` or `like`.
     * 
     */
    @Import(name="limit")
    private @Nullable Output<GetRowAccessPoliciesLimitArgs> limit;

    /**
     * @return Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `startsWith` or `like`.
     * 
     */
    public Optional<Output<GetRowAccessPoliciesLimitArgs>> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * (Default: `true`) Runs DESC ROW ACCESS POLICY for each row access policy returned by SHOW ROW ACCESS POLICIES. The output of describe is saved to the description field. By default this value is set to true.
     * 
     */
    @Import(name="withDescribe")
    private @Nullable Output<Boolean> withDescribe;

    /**
     * @return (Default: `true`) Runs DESC ROW ACCESS POLICY for each row access policy returned by SHOW ROW ACCESS POLICIES. The output of describe is saved to the description field. By default this value is set to true.
     * 
     */
    public Optional<Output<Boolean>> withDescribe() {
        return Optional.ofNullable(this.withDescribe);
    }

    private GetRowAccessPoliciesArgs() {}

    private GetRowAccessPoliciesArgs(GetRowAccessPoliciesArgs $) {
        this.in = $.in;
        this.like = $.like;
        this.limit = $.limit;
        this.withDescribe = $.withDescribe;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRowAccessPoliciesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRowAccessPoliciesArgs $;

        public Builder() {
            $ = new GetRowAccessPoliciesArgs();
        }

        public Builder(GetRowAccessPoliciesArgs defaults) {
            $ = new GetRowAccessPoliciesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param in IN clause to filter the list of row access policies
         * 
         * @return builder
         * 
         */
        public Builder in(@Nullable Output<GetRowAccessPoliciesInArgs> in) {
            $.in = in;
            return this;
        }

        /**
         * @param in IN clause to filter the list of row access policies
         * 
         * @return builder
         * 
         */
        public Builder in(GetRowAccessPoliciesInArgs in) {
            return in(Output.of(in));
        }

        /**
         * @param like Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
         * 
         * @return builder
         * 
         */
        public Builder like(@Nullable Output<String> like) {
            $.like = like;
            return this;
        }

        /**
         * @param like Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
         * 
         * @return builder
         * 
         */
        public Builder like(String like) {
            return like(Output.of(like));
        }

        /**
         * @param limit Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `startsWith` or `like`.
         * 
         * @return builder
         * 
         */
        public Builder limit(@Nullable Output<GetRowAccessPoliciesLimitArgs> limit) {
            $.limit = limit;
            return this;
        }

        /**
         * @param limit Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `startsWith` or `like`.
         * 
         * @return builder
         * 
         */
        public Builder limit(GetRowAccessPoliciesLimitArgs limit) {
            return limit(Output.of(limit));
        }

        /**
         * @param withDescribe (Default: `true`) Runs DESC ROW ACCESS POLICY for each row access policy returned by SHOW ROW ACCESS POLICIES. The output of describe is saved to the description field. By default this value is set to true.
         * 
         * @return builder
         * 
         */
        public Builder withDescribe(@Nullable Output<Boolean> withDescribe) {
            $.withDescribe = withDescribe;
            return this;
        }

        /**
         * @param withDescribe (Default: `true`) Runs DESC ROW ACCESS POLICY for each row access policy returned by SHOW ROW ACCESS POLICIES. The output of describe is saved to the description field. By default this value is set to true.
         * 
         * @return builder
         * 
         */
        public Builder withDescribe(Boolean withDescribe) {
            return withDescribe(Output.of(withDescribe));
        }

        public GetRowAccessPoliciesArgs build() {
            return $;
        }
    }

}
