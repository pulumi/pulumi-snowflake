// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.snowflake.inputs.DynamicTableTargetLagArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DynamicTableState extends com.pulumi.resources.ResourceArgs {

    public static final DynamicTableState Empty = new DynamicTableState();

    /**
     * Whether auto-clustering is enabled on the dynamic table. Not currently supported for dynamic tables.
     * 
     */
    @Import(name="automaticClustering")
    private @Nullable Output<Boolean> automaticClustering;

    /**
     * @return Whether auto-clustering is enabled on the dynamic table. Not currently supported for dynamic tables.
     * 
     */
    public Optional<Output<Boolean>> automaticClustering() {
        return Optional.ofNullable(this.automaticClustering);
    }

    /**
     * Number of bytes that will be scanned if the entire dynamic table is scanned in a query.
     * 
     */
    @Import(name="bytes")
    private @Nullable Output<Integer> bytes;

    /**
     * @return Number of bytes that will be scanned if the entire dynamic table is scanned in a query.
     * 
     */
    public Optional<Output<Integer>> bytes() {
        return Optional.ofNullable(this.bytes);
    }

    /**
     * The clustering key for the dynamic table.
     * 
     */
    @Import(name="clusterBy")
    private @Nullable Output<String> clusterBy;

    /**
     * @return The clustering key for the dynamic table.
     * 
     */
    public Optional<Output<String>> clusterBy() {
        return Optional.ofNullable(this.clusterBy);
    }

    /**
     * Specifies a comment for the dynamic table.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Specifies a comment for the dynamic table.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * Time when this dynamic table was created.
     * 
     */
    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    /**
     * @return Time when this dynamic table was created.
     * 
     */
    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    /**
     * Timestamp of the data in the base object(s) that is included in the dynamic table.
     * 
     */
    @Import(name="dataTimestamp")
    private @Nullable Output<String> dataTimestamp;

    /**
     * @return Timestamp of the data in the base object(s) that is included in the dynamic table.
     * 
     */
    public Optional<Output<String>> dataTimestamp() {
        return Optional.ofNullable(this.dataTimestamp);
    }

    /**
     * The database in which to create the dynamic table.
     * 
     */
    @Import(name="database")
    private @Nullable Output<String> database;

    /**
     * @return The database in which to create the dynamic table.
     * 
     */
    public Optional<Output<String>> database() {
        return Optional.ofNullable(this.database);
    }

    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    @Import(name="fullyQualifiedName")
    private @Nullable Output<String> fullyQualifiedName;

    /**
     * @return Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    public Optional<Output<String>> fullyQualifiedName() {
        return Optional.ofNullable(this.fullyQualifiedName);
    }

    /**
     * (Default: `ON_CREATE`) Initialize trigger for the dynamic table. Can only be set on creation. Available options are ON*CREATE and ON*SCHEDULE.
     * 
     */
    @Import(name="initialize")
    private @Nullable Output<String> initialize;

    /**
     * @return (Default: `ON_CREATE`) Initialize trigger for the dynamic table. Can only be set on creation. Available options are ON*CREATE and ON*SCHEDULE.
     * 
     */
    public Optional<Output<String>> initialize() {
        return Optional.ofNullable(this.initialize);
    }

    /**
     * TRUE if the dynamic table has been cloned, else FALSE.
     * 
     */
    @Import(name="isClone")
    private @Nullable Output<Boolean> isClone;

    /**
     * @return TRUE if the dynamic table has been cloned, else FALSE.
     * 
     */
    public Optional<Output<Boolean>> isClone() {
        return Optional.ofNullable(this.isClone);
    }

    /**
     * TRUE if the dynamic table is a replica. else FALSE.
     * 
     */
    @Import(name="isReplica")
    private @Nullable Output<Boolean> isReplica;

    /**
     * @return TRUE if the dynamic table is a replica. else FALSE.
     * 
     */
    public Optional<Output<Boolean>> isReplica() {
        return Optional.ofNullable(this.isReplica);
    }

    /**
     * Timestamp of last suspension.
     * 
     */
    @Import(name="lastSuspendedOn")
    private @Nullable Output<String> lastSuspendedOn;

    /**
     * @return Timestamp of last suspension.
     * 
     */
    public Optional<Output<String>> lastSuspendedOn() {
        return Optional.ofNullable(this.lastSuspendedOn);
    }

    /**
     * Specifies the identifier (i.e. name) for the dynamic table; must be unique for the schema in which the dynamic table is created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the identifier (i.e. name) for the dynamic table; must be unique for the schema in which the dynamic table is created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Default: `false`) Specifies whether to replace the dynamic table if it already exists.
     * 
     */
    @Import(name="orReplace")
    private @Nullable Output<Boolean> orReplace;

    /**
     * @return (Default: `false`) Specifies whether to replace the dynamic table if it already exists.
     * 
     */
    public Optional<Output<Boolean>> orReplace() {
        return Optional.ofNullable(this.orReplace);
    }

    /**
     * Role that owns the dynamic table.
     * 
     */
    @Import(name="owner")
    private @Nullable Output<String> owner;

    /**
     * @return Role that owns the dynamic table.
     * 
     */
    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    /**
     * Specifies the query to use to populate the dynamic table.
     * 
     */
    @Import(name="query")
    private @Nullable Output<String> query;

    /**
     * @return Specifies the query to use to populate the dynamic table.
     * 
     */
    public Optional<Output<String>> query() {
        return Optional.ofNullable(this.query);
    }

    /**
     * (Default: `AUTO`) INCREMENTAL to use incremental refreshes, FULL to recompute the whole table on every refresh, or AUTO to let Snowflake decide.
     * 
     */
    @Import(name="refreshMode")
    private @Nullable Output<String> refreshMode;

    /**
     * @return (Default: `AUTO`) INCREMENTAL to use incremental refreshes, FULL to recompute the whole table on every refresh, or AUTO to let Snowflake decide.
     * 
     */
    public Optional<Output<String>> refreshMode() {
        return Optional.ofNullable(this.refreshMode);
    }

    /**
     * Explanation for why FULL refresh mode was chosen. NULL if refresh mode is not FULL.
     * 
     */
    @Import(name="refreshModeReason")
    private @Nullable Output<String> refreshModeReason;

    /**
     * @return Explanation for why FULL refresh mode was chosen. NULL if refresh mode is not FULL.
     * 
     */
    public Optional<Output<String>> refreshModeReason() {
        return Optional.ofNullable(this.refreshModeReason);
    }

    /**
     * Number of rows in the table.
     * 
     */
    @Import(name="rows")
    private @Nullable Output<Integer> rows;

    /**
     * @return Number of rows in the table.
     * 
     */
    public Optional<Output<Integer>> rows() {
        return Optional.ofNullable(this.rows);
    }

    /**
     * Displays ACTIVE for dynamic tables that are actively scheduling refreshes and SUSPENDED for suspended dynamic tables.
     * 
     */
    @Import(name="schedulingState")
    private @Nullable Output<String> schedulingState;

    /**
     * @return Displays ACTIVE for dynamic tables that are actively scheduling refreshes and SUSPENDED for suspended dynamic tables.
     * 
     */
    public Optional<Output<String>> schedulingState() {
        return Optional.ofNullable(this.schedulingState);
    }

    /**
     * The schema in which to create the dynamic table.
     * 
     */
    @Import(name="schema")
    private @Nullable Output<String> schema;

    /**
     * @return The schema in which to create the dynamic table.
     * 
     */
    public Optional<Output<String>> schema() {
        return Optional.ofNullable(this.schema);
    }

    /**
     * Specifies the target lag time for the dynamic table.
     * 
     */
    @Import(name="targetLag")
    private @Nullable Output<DynamicTableTargetLagArgs> targetLag;

    /**
     * @return Specifies the target lag time for the dynamic table.
     * 
     */
    public Optional<Output<DynamicTableTargetLagArgs>> targetLag() {
        return Optional.ofNullable(this.targetLag);
    }

    /**
     * The warehouse in which to create the dynamic table.
     * 
     */
    @Import(name="warehouse")
    private @Nullable Output<String> warehouse;

    /**
     * @return The warehouse in which to create the dynamic table.
     * 
     */
    public Optional<Output<String>> warehouse() {
        return Optional.ofNullable(this.warehouse);
    }

    private DynamicTableState() {}

    private DynamicTableState(DynamicTableState $) {
        this.automaticClustering = $.automaticClustering;
        this.bytes = $.bytes;
        this.clusterBy = $.clusterBy;
        this.comment = $.comment;
        this.createdOn = $.createdOn;
        this.dataTimestamp = $.dataTimestamp;
        this.database = $.database;
        this.fullyQualifiedName = $.fullyQualifiedName;
        this.initialize = $.initialize;
        this.isClone = $.isClone;
        this.isReplica = $.isReplica;
        this.lastSuspendedOn = $.lastSuspendedOn;
        this.name = $.name;
        this.orReplace = $.orReplace;
        this.owner = $.owner;
        this.query = $.query;
        this.refreshMode = $.refreshMode;
        this.refreshModeReason = $.refreshModeReason;
        this.rows = $.rows;
        this.schedulingState = $.schedulingState;
        this.schema = $.schema;
        this.targetLag = $.targetLag;
        this.warehouse = $.warehouse;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DynamicTableState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DynamicTableState $;

        public Builder() {
            $ = new DynamicTableState();
        }

        public Builder(DynamicTableState defaults) {
            $ = new DynamicTableState(Objects.requireNonNull(defaults));
        }

        /**
         * @param automaticClustering Whether auto-clustering is enabled on the dynamic table. Not currently supported for dynamic tables.
         * 
         * @return builder
         * 
         */
        public Builder automaticClustering(@Nullable Output<Boolean> automaticClustering) {
            $.automaticClustering = automaticClustering;
            return this;
        }

        /**
         * @param automaticClustering Whether auto-clustering is enabled on the dynamic table. Not currently supported for dynamic tables.
         * 
         * @return builder
         * 
         */
        public Builder automaticClustering(Boolean automaticClustering) {
            return automaticClustering(Output.of(automaticClustering));
        }

        /**
         * @param bytes Number of bytes that will be scanned if the entire dynamic table is scanned in a query.
         * 
         * @return builder
         * 
         */
        public Builder bytes(@Nullable Output<Integer> bytes) {
            $.bytes = bytes;
            return this;
        }

        /**
         * @param bytes Number of bytes that will be scanned if the entire dynamic table is scanned in a query.
         * 
         * @return builder
         * 
         */
        public Builder bytes(Integer bytes) {
            return bytes(Output.of(bytes));
        }

        /**
         * @param clusterBy The clustering key for the dynamic table.
         * 
         * @return builder
         * 
         */
        public Builder clusterBy(@Nullable Output<String> clusterBy) {
            $.clusterBy = clusterBy;
            return this;
        }

        /**
         * @param clusterBy The clustering key for the dynamic table.
         * 
         * @return builder
         * 
         */
        public Builder clusterBy(String clusterBy) {
            return clusterBy(Output.of(clusterBy));
        }

        /**
         * @param comment Specifies a comment for the dynamic table.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Specifies a comment for the dynamic table.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param createdOn Time when this dynamic table was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        /**
         * @param createdOn Time when this dynamic table was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        /**
         * @param dataTimestamp Timestamp of the data in the base object(s) that is included in the dynamic table.
         * 
         * @return builder
         * 
         */
        public Builder dataTimestamp(@Nullable Output<String> dataTimestamp) {
            $.dataTimestamp = dataTimestamp;
            return this;
        }

        /**
         * @param dataTimestamp Timestamp of the data in the base object(s) that is included in the dynamic table.
         * 
         * @return builder
         * 
         */
        public Builder dataTimestamp(String dataTimestamp) {
            return dataTimestamp(Output.of(dataTimestamp));
        }

        /**
         * @param database The database in which to create the dynamic table.
         * 
         * @return builder
         * 
         */
        public Builder database(@Nullable Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The database in which to create the dynamic table.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param fullyQualifiedName Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
         * 
         * @return builder
         * 
         */
        public Builder fullyQualifiedName(@Nullable Output<String> fullyQualifiedName) {
            $.fullyQualifiedName = fullyQualifiedName;
            return this;
        }

        /**
         * @param fullyQualifiedName Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
         * 
         * @return builder
         * 
         */
        public Builder fullyQualifiedName(String fullyQualifiedName) {
            return fullyQualifiedName(Output.of(fullyQualifiedName));
        }

        /**
         * @param initialize (Default: `ON_CREATE`) Initialize trigger for the dynamic table. Can only be set on creation. Available options are ON*CREATE and ON*SCHEDULE.
         * 
         * @return builder
         * 
         */
        public Builder initialize(@Nullable Output<String> initialize) {
            $.initialize = initialize;
            return this;
        }

        /**
         * @param initialize (Default: `ON_CREATE`) Initialize trigger for the dynamic table. Can only be set on creation. Available options are ON*CREATE and ON*SCHEDULE.
         * 
         * @return builder
         * 
         */
        public Builder initialize(String initialize) {
            return initialize(Output.of(initialize));
        }

        /**
         * @param isClone TRUE if the dynamic table has been cloned, else FALSE.
         * 
         * @return builder
         * 
         */
        public Builder isClone(@Nullable Output<Boolean> isClone) {
            $.isClone = isClone;
            return this;
        }

        /**
         * @param isClone TRUE if the dynamic table has been cloned, else FALSE.
         * 
         * @return builder
         * 
         */
        public Builder isClone(Boolean isClone) {
            return isClone(Output.of(isClone));
        }

        /**
         * @param isReplica TRUE if the dynamic table is a replica. else FALSE.
         * 
         * @return builder
         * 
         */
        public Builder isReplica(@Nullable Output<Boolean> isReplica) {
            $.isReplica = isReplica;
            return this;
        }

        /**
         * @param isReplica TRUE if the dynamic table is a replica. else FALSE.
         * 
         * @return builder
         * 
         */
        public Builder isReplica(Boolean isReplica) {
            return isReplica(Output.of(isReplica));
        }

        /**
         * @param lastSuspendedOn Timestamp of last suspension.
         * 
         * @return builder
         * 
         */
        public Builder lastSuspendedOn(@Nullable Output<String> lastSuspendedOn) {
            $.lastSuspendedOn = lastSuspendedOn;
            return this;
        }

        /**
         * @param lastSuspendedOn Timestamp of last suspension.
         * 
         * @return builder
         * 
         */
        public Builder lastSuspendedOn(String lastSuspendedOn) {
            return lastSuspendedOn(Output.of(lastSuspendedOn));
        }

        /**
         * @param name Specifies the identifier (i.e. name) for the dynamic table; must be unique for the schema in which the dynamic table is created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the identifier (i.e. name) for the dynamic table; must be unique for the schema in which the dynamic table is created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orReplace (Default: `false`) Specifies whether to replace the dynamic table if it already exists.
         * 
         * @return builder
         * 
         */
        public Builder orReplace(@Nullable Output<Boolean> orReplace) {
            $.orReplace = orReplace;
            return this;
        }

        /**
         * @param orReplace (Default: `false`) Specifies whether to replace the dynamic table if it already exists.
         * 
         * @return builder
         * 
         */
        public Builder orReplace(Boolean orReplace) {
            return orReplace(Output.of(orReplace));
        }

        /**
         * @param owner Role that owns the dynamic table.
         * 
         * @return builder
         * 
         */
        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param owner Role that owns the dynamic table.
         * 
         * @return builder
         * 
         */
        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        /**
         * @param query Specifies the query to use to populate the dynamic table.
         * 
         * @return builder
         * 
         */
        public Builder query(@Nullable Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query Specifies the query to use to populate the dynamic table.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param refreshMode (Default: `AUTO`) INCREMENTAL to use incremental refreshes, FULL to recompute the whole table on every refresh, or AUTO to let Snowflake decide.
         * 
         * @return builder
         * 
         */
        public Builder refreshMode(@Nullable Output<String> refreshMode) {
            $.refreshMode = refreshMode;
            return this;
        }

        /**
         * @param refreshMode (Default: `AUTO`) INCREMENTAL to use incremental refreshes, FULL to recompute the whole table on every refresh, or AUTO to let Snowflake decide.
         * 
         * @return builder
         * 
         */
        public Builder refreshMode(String refreshMode) {
            return refreshMode(Output.of(refreshMode));
        }

        /**
         * @param refreshModeReason Explanation for why FULL refresh mode was chosen. NULL if refresh mode is not FULL.
         * 
         * @return builder
         * 
         */
        public Builder refreshModeReason(@Nullable Output<String> refreshModeReason) {
            $.refreshModeReason = refreshModeReason;
            return this;
        }

        /**
         * @param refreshModeReason Explanation for why FULL refresh mode was chosen. NULL if refresh mode is not FULL.
         * 
         * @return builder
         * 
         */
        public Builder refreshModeReason(String refreshModeReason) {
            return refreshModeReason(Output.of(refreshModeReason));
        }

        /**
         * @param rows Number of rows in the table.
         * 
         * @return builder
         * 
         */
        public Builder rows(@Nullable Output<Integer> rows) {
            $.rows = rows;
            return this;
        }

        /**
         * @param rows Number of rows in the table.
         * 
         * @return builder
         * 
         */
        public Builder rows(Integer rows) {
            return rows(Output.of(rows));
        }

        /**
         * @param schedulingState Displays ACTIVE for dynamic tables that are actively scheduling refreshes and SUSPENDED for suspended dynamic tables.
         * 
         * @return builder
         * 
         */
        public Builder schedulingState(@Nullable Output<String> schedulingState) {
            $.schedulingState = schedulingState;
            return this;
        }

        /**
         * @param schedulingState Displays ACTIVE for dynamic tables that are actively scheduling refreshes and SUSPENDED for suspended dynamic tables.
         * 
         * @return builder
         * 
         */
        public Builder schedulingState(String schedulingState) {
            return schedulingState(Output.of(schedulingState));
        }

        /**
         * @param schema The schema in which to create the dynamic table.
         * 
         * @return builder
         * 
         */
        public Builder schema(@Nullable Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The schema in which to create the dynamic table.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param targetLag Specifies the target lag time for the dynamic table.
         * 
         * @return builder
         * 
         */
        public Builder targetLag(@Nullable Output<DynamicTableTargetLagArgs> targetLag) {
            $.targetLag = targetLag;
            return this;
        }

        /**
         * @param targetLag Specifies the target lag time for the dynamic table.
         * 
         * @return builder
         * 
         */
        public Builder targetLag(DynamicTableTargetLagArgs targetLag) {
            return targetLag(Output.of(targetLag));
        }

        /**
         * @param warehouse The warehouse in which to create the dynamic table.
         * 
         * @return builder
         * 
         */
        public Builder warehouse(@Nullable Output<String> warehouse) {
            $.warehouse = warehouse;
            return this;
        }

        /**
         * @param warehouse The warehouse in which to create the dynamic table.
         * 
         * @return builder
         * 
         */
        public Builder warehouse(String warehouse) {
            return warehouse(Output.of(warehouse));
        }

        public DynamicTableState build() {
            return $;
        }
    }

}
