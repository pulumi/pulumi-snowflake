// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ShareState extends com.pulumi.resources.ResourceArgs {

    public static final ShareState Empty = new ShareState();

    /**
     * A list of accounts to be added to the share. Values should not be the account locator, but in the form of &#39;organization*name.account*name
     * 
     */
    @Import(name="accounts")
    private @Nullable Output<List<String>> accounts;

    /**
     * @return A list of accounts to be added to the share. Values should not be the account locator, but in the form of &#39;organization*name.account*name
     * 
     */
    public Optional<Output<List<String>>> accounts() {
        return Optional.ofNullable(this.accounts);
    }

    /**
     * Specifies a comment for the managed account.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Specifies a comment for the managed account.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * Specifies the identifier for the share; must be unique for the account in which the share is created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the identifier for the share; must be unique for the account in which the share is created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private ShareState() {}

    private ShareState(ShareState $) {
        this.accounts = $.accounts;
        this.comment = $.comment;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ShareState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ShareState $;

        public Builder() {
            $ = new ShareState();
        }

        public Builder(ShareState defaults) {
            $ = new ShareState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accounts A list of accounts to be added to the share. Values should not be the account locator, but in the form of &#39;organization*name.account*name
         * 
         * @return builder
         * 
         */
        public Builder accounts(@Nullable Output<List<String>> accounts) {
            $.accounts = accounts;
            return this;
        }

        /**
         * @param accounts A list of accounts to be added to the share. Values should not be the account locator, but in the form of &#39;organization*name.account*name
         * 
         * @return builder
         * 
         */
        public Builder accounts(List<String> accounts) {
            return accounts(Output.of(accounts));
        }

        /**
         * @param accounts A list of accounts to be added to the share. Values should not be the account locator, but in the form of &#39;organization*name.account*name
         * 
         * @return builder
         * 
         */
        public Builder accounts(String... accounts) {
            return accounts(List.of(accounts));
        }

        /**
         * @param comment Specifies a comment for the managed account.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Specifies a comment for the managed account.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param name Specifies the identifier for the share; must be unique for the account in which the share is created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the identifier for the share; must be unique for the account in which the share is created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ShareState build() {
            return $;
        }
    }

}
