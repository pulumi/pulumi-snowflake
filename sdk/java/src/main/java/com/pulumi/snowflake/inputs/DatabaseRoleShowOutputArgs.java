// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseRoleShowOutputArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseRoleShowOutputArgs Empty = new DatabaseRoleShowOutputArgs();

    @Import(name="comment")
    private @Nullable Output<String> comment;

    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    @Import(name="grantedDatabaseRoles")
    private @Nullable Output<Integer> grantedDatabaseRoles;

    public Optional<Output<Integer>> grantedDatabaseRoles() {
        return Optional.ofNullable(this.grantedDatabaseRoles);
    }

    @Import(name="grantedToDatabaseRoles")
    private @Nullable Output<Integer> grantedToDatabaseRoles;

    public Optional<Output<Integer>> grantedToDatabaseRoles() {
        return Optional.ofNullable(this.grantedToDatabaseRoles);
    }

    @Import(name="grantedToRoles")
    private @Nullable Output<Integer> grantedToRoles;

    public Optional<Output<Integer>> grantedToRoles() {
        return Optional.ofNullable(this.grantedToRoles);
    }

    @Import(name="isCurrent")
    private @Nullable Output<Boolean> isCurrent;

    public Optional<Output<Boolean>> isCurrent() {
        return Optional.ofNullable(this.isCurrent);
    }

    @Import(name="isDefault")
    private @Nullable Output<Boolean> isDefault;

    public Optional<Output<Boolean>> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }

    @Import(name="isInherited")
    private @Nullable Output<Boolean> isInherited;

    public Optional<Output<Boolean>> isInherited() {
        return Optional.ofNullable(this.isInherited);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="owner")
    private @Nullable Output<String> owner;

    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    @Import(name="ownerRoleType")
    private @Nullable Output<String> ownerRoleType;

    public Optional<Output<String>> ownerRoleType() {
        return Optional.ofNullable(this.ownerRoleType);
    }

    private DatabaseRoleShowOutputArgs() {}

    private DatabaseRoleShowOutputArgs(DatabaseRoleShowOutputArgs $) {
        this.comment = $.comment;
        this.createdOn = $.createdOn;
        this.databaseName = $.databaseName;
        this.grantedDatabaseRoles = $.grantedDatabaseRoles;
        this.grantedToDatabaseRoles = $.grantedToDatabaseRoles;
        this.grantedToRoles = $.grantedToRoles;
        this.isCurrent = $.isCurrent;
        this.isDefault = $.isDefault;
        this.isInherited = $.isInherited;
        this.name = $.name;
        this.owner = $.owner;
        this.ownerRoleType = $.ownerRoleType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseRoleShowOutputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseRoleShowOutputArgs $;

        public Builder() {
            $ = new DatabaseRoleShowOutputArgs();
        }

        public Builder(DatabaseRoleShowOutputArgs defaults) {
            $ = new DatabaseRoleShowOutputArgs(Objects.requireNonNull(defaults));
        }

        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        public Builder grantedDatabaseRoles(@Nullable Output<Integer> grantedDatabaseRoles) {
            $.grantedDatabaseRoles = grantedDatabaseRoles;
            return this;
        }

        public Builder grantedDatabaseRoles(Integer grantedDatabaseRoles) {
            return grantedDatabaseRoles(Output.of(grantedDatabaseRoles));
        }

        public Builder grantedToDatabaseRoles(@Nullable Output<Integer> grantedToDatabaseRoles) {
            $.grantedToDatabaseRoles = grantedToDatabaseRoles;
            return this;
        }

        public Builder grantedToDatabaseRoles(Integer grantedToDatabaseRoles) {
            return grantedToDatabaseRoles(Output.of(grantedToDatabaseRoles));
        }

        public Builder grantedToRoles(@Nullable Output<Integer> grantedToRoles) {
            $.grantedToRoles = grantedToRoles;
            return this;
        }

        public Builder grantedToRoles(Integer grantedToRoles) {
            return grantedToRoles(Output.of(grantedToRoles));
        }

        public Builder isCurrent(@Nullable Output<Boolean> isCurrent) {
            $.isCurrent = isCurrent;
            return this;
        }

        public Builder isCurrent(Boolean isCurrent) {
            return isCurrent(Output.of(isCurrent));
        }

        public Builder isDefault(@Nullable Output<Boolean> isDefault) {
            $.isDefault = isDefault;
            return this;
        }

        public Builder isDefault(Boolean isDefault) {
            return isDefault(Output.of(isDefault));
        }

        public Builder isInherited(@Nullable Output<Boolean> isInherited) {
            $.isInherited = isInherited;
            return this;
        }

        public Builder isInherited(Boolean isInherited) {
            return isInherited(Output.of(isInherited));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        public Builder ownerRoleType(@Nullable Output<String> ownerRoleType) {
            $.ownerRoleType = ownerRoleType;
            return this;
        }

        public Builder ownerRoleType(String ownerRoleType) {
            return ownerRoleType(Output.of(ownerRoleType));
        }

        public DatabaseRoleShowOutputArgs build() {
            return $;
        }
    }

}
