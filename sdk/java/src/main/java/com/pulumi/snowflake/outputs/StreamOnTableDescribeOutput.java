// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class StreamOnTableDescribeOutput {
    private @Nullable List<String> baseTables;
    private @Nullable String comment;
    private @Nullable String createdOn;
    private @Nullable String databaseName;
    private @Nullable String invalidReason;
    private @Nullable String mode;
    private @Nullable String name;
    private @Nullable String owner;
    private @Nullable String ownerRoleType;
    private @Nullable String schemaName;
    private @Nullable String sourceType;
    private @Nullable Boolean stale;
    private @Nullable String staleAfter;
    private @Nullable String tableName;
    private @Nullable String type;

    private StreamOnTableDescribeOutput() {}
    public List<String> baseTables() {
        return this.baseTables == null ? List.of() : this.baseTables;
    }
    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }
    public Optional<String> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }
    public Optional<String> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }
    public Optional<String> invalidReason() {
        return Optional.ofNullable(this.invalidReason);
    }
    public Optional<String> mode() {
        return Optional.ofNullable(this.mode);
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<String> owner() {
        return Optional.ofNullable(this.owner);
    }
    public Optional<String> ownerRoleType() {
        return Optional.ofNullable(this.ownerRoleType);
    }
    public Optional<String> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }
    public Optional<String> sourceType() {
        return Optional.ofNullable(this.sourceType);
    }
    public Optional<Boolean> stale() {
        return Optional.ofNullable(this.stale);
    }
    public Optional<String> staleAfter() {
        return Optional.ofNullable(this.staleAfter);
    }
    public Optional<String> tableName() {
        return Optional.ofNullable(this.tableName);
    }
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StreamOnTableDescribeOutput defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> baseTables;
        private @Nullable String comment;
        private @Nullable String createdOn;
        private @Nullable String databaseName;
        private @Nullable String invalidReason;
        private @Nullable String mode;
        private @Nullable String name;
        private @Nullable String owner;
        private @Nullable String ownerRoleType;
        private @Nullable String schemaName;
        private @Nullable String sourceType;
        private @Nullable Boolean stale;
        private @Nullable String staleAfter;
        private @Nullable String tableName;
        private @Nullable String type;
        public Builder() {}
        public Builder(StreamOnTableDescribeOutput defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseTables = defaults.baseTables;
    	      this.comment = defaults.comment;
    	      this.createdOn = defaults.createdOn;
    	      this.databaseName = defaults.databaseName;
    	      this.invalidReason = defaults.invalidReason;
    	      this.mode = defaults.mode;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.ownerRoleType = defaults.ownerRoleType;
    	      this.schemaName = defaults.schemaName;
    	      this.sourceType = defaults.sourceType;
    	      this.stale = defaults.stale;
    	      this.staleAfter = defaults.staleAfter;
    	      this.tableName = defaults.tableName;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder baseTables(@Nullable List<String> baseTables) {

            this.baseTables = baseTables;
            return this;
        }
        public Builder baseTables(String... baseTables) {
            return baseTables(List.of(baseTables));
        }
        @CustomType.Setter
        public Builder comment(@Nullable String comment) {

            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(@Nullable String createdOn) {

            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder databaseName(@Nullable String databaseName) {

            this.databaseName = databaseName;
            return this;
        }
        @CustomType.Setter
        public Builder invalidReason(@Nullable String invalidReason) {

            this.invalidReason = invalidReason;
            return this;
        }
        @CustomType.Setter
        public Builder mode(@Nullable String mode) {

            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder owner(@Nullable String owner) {

            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder ownerRoleType(@Nullable String ownerRoleType) {

            this.ownerRoleType = ownerRoleType;
            return this;
        }
        @CustomType.Setter
        public Builder schemaName(@Nullable String schemaName) {

            this.schemaName = schemaName;
            return this;
        }
        @CustomType.Setter
        public Builder sourceType(@Nullable String sourceType) {

            this.sourceType = sourceType;
            return this;
        }
        @CustomType.Setter
        public Builder stale(@Nullable Boolean stale) {

            this.stale = stale;
            return this;
        }
        @CustomType.Setter
        public Builder staleAfter(@Nullable String staleAfter) {

            this.staleAfter = staleAfter;
            return this;
        }
        @CustomType.Setter
        public Builder tableName(@Nullable String tableName) {

            this.tableName = tableName;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        public StreamOnTableDescribeOutput build() {
            final var _resultValue = new StreamOnTableDescribeOutput();
            _resultValue.baseTables = baseTables;
            _resultValue.comment = comment;
            _resultValue.createdOn = createdOn;
            _resultValue.databaseName = databaseName;
            _resultValue.invalidReason = invalidReason;
            _resultValue.mode = mode;
            _resultValue.name = name;
            _resultValue.owner = owner;
            _resultValue.ownerRoleType = ownerRoleType;
            _resultValue.schemaName = schemaName;
            _resultValue.sourceType = sourceType;
            _resultValue.stale = stale;
            _resultValue.staleAfter = staleAfter;
            _resultValue.tableName = tableName;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
