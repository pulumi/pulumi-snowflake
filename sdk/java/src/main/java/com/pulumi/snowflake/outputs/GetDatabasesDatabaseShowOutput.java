// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDatabasesDatabaseShowOutput {
    private String comment;
    private String createdOn;
    private String droppedOn;
    private Boolean isCurrent;
    private Boolean isDefault;
    private String kind;
    private String name;
    private String options;
    private String origin;
    private String owner;
    private String ownerRoleType;
    private String resourceGroup;
    private Integer retentionTime;
    private Boolean transient_;

    private GetDatabasesDatabaseShowOutput() {}
    public String comment() {
        return this.comment;
    }
    public String createdOn() {
        return this.createdOn;
    }
    public String droppedOn() {
        return this.droppedOn;
    }
    public Boolean isCurrent() {
        return this.isCurrent;
    }
    public Boolean isDefault() {
        return this.isDefault;
    }
    public String kind() {
        return this.kind;
    }
    public String name() {
        return this.name;
    }
    public String options() {
        return this.options;
    }
    public String origin() {
        return this.origin;
    }
    public String owner() {
        return this.owner;
    }
    public String ownerRoleType() {
        return this.ownerRoleType;
    }
    public String resourceGroup() {
        return this.resourceGroup;
    }
    public Integer retentionTime() {
        return this.retentionTime;
    }
    public Boolean transient_() {
        return this.transient_;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabasesDatabaseShowOutput defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String comment;
        private String createdOn;
        private String droppedOn;
        private Boolean isCurrent;
        private Boolean isDefault;
        private String kind;
        private String name;
        private String options;
        private String origin;
        private String owner;
        private String ownerRoleType;
        private String resourceGroup;
        private Integer retentionTime;
        private Boolean transient_;
        public Builder() {}
        public Builder(GetDatabasesDatabaseShowOutput defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comment = defaults.comment;
    	      this.createdOn = defaults.createdOn;
    	      this.droppedOn = defaults.droppedOn;
    	      this.isCurrent = defaults.isCurrent;
    	      this.isDefault = defaults.isDefault;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.options = defaults.options;
    	      this.origin = defaults.origin;
    	      this.owner = defaults.owner;
    	      this.ownerRoleType = defaults.ownerRoleType;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.retentionTime = defaults.retentionTime;
    	      this.transient_ = defaults.transient_;
        }

        @CustomType.Setter
        public Builder comment(String comment) {
            if (comment == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseShowOutput", "comment");
            }
            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseShowOutput", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder droppedOn(String droppedOn) {
            if (droppedOn == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseShowOutput", "droppedOn");
            }
            this.droppedOn = droppedOn;
            return this;
        }
        @CustomType.Setter
        public Builder isCurrent(Boolean isCurrent) {
            if (isCurrent == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseShowOutput", "isCurrent");
            }
            this.isCurrent = isCurrent;
            return this;
        }
        @CustomType.Setter
        public Builder isDefault(Boolean isDefault) {
            if (isDefault == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseShowOutput", "isDefault");
            }
            this.isDefault = isDefault;
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            if (kind == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseShowOutput", "kind");
            }
            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseShowOutput", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder options(String options) {
            if (options == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseShowOutput", "options");
            }
            this.options = options;
            return this;
        }
        @CustomType.Setter
        public Builder origin(String origin) {
            if (origin == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseShowOutput", "origin");
            }
            this.origin = origin;
            return this;
        }
        @CustomType.Setter
        public Builder owner(String owner) {
            if (owner == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseShowOutput", "owner");
            }
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder ownerRoleType(String ownerRoleType) {
            if (ownerRoleType == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseShowOutput", "ownerRoleType");
            }
            this.ownerRoleType = ownerRoleType;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroup(String resourceGroup) {
            if (resourceGroup == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseShowOutput", "resourceGroup");
            }
            this.resourceGroup = resourceGroup;
            return this;
        }
        @CustomType.Setter
        public Builder retentionTime(Integer retentionTime) {
            if (retentionTime == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseShowOutput", "retentionTime");
            }
            this.retentionTime = retentionTime;
            return this;
        }
        @CustomType.Setter("transient")
        public Builder transient_(Boolean transient_) {
            if (transient_ == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseShowOutput", "transient_");
            }
            this.transient_ = transient_;
            return this;
        }
        public GetDatabasesDatabaseShowOutput build() {
            final var _resultValue = new GetDatabasesDatabaseShowOutput();
            _resultValue.comment = comment;
            _resultValue.createdOn = createdOn;
            _resultValue.droppedOn = droppedOn;
            _resultValue.isCurrent = isCurrent;
            _resultValue.isDefault = isDefault;
            _resultValue.kind = kind;
            _resultValue.name = name;
            _resultValue.options = options;
            _resultValue.origin = origin;
            _resultValue.owner = owner;
            _resultValue.ownerRoleType = ownerRoleType;
            _resultValue.resourceGroup = resourceGroup;
            _resultValue.retentionTime = retentionTime;
            _resultValue.transient_ = transient_;
            return _resultValue;
        }
    }
}
