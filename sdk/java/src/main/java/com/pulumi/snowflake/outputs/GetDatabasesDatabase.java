// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.snowflake.outputs.GetDatabasesDatabaseReplicationConfiguration;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDatabasesDatabase {
    private String comment;
    private String createdOn;
    private Boolean isCurrent;
    private Boolean isDefault;
    private String name;
    private String options;
    private String origin;
    private String owner;
    private List<GetDatabasesDatabaseReplicationConfiguration> replicationConfigurations;
    private Integer retentionTime;

    private GetDatabasesDatabase() {}
    public String comment() {
        return this.comment;
    }
    public String createdOn() {
        return this.createdOn;
    }
    public Boolean isCurrent() {
        return this.isCurrent;
    }
    public Boolean isDefault() {
        return this.isDefault;
    }
    public String name() {
        return this.name;
    }
    public String options() {
        return this.options;
    }
    public String origin() {
        return this.origin;
    }
    public String owner() {
        return this.owner;
    }
    public List<GetDatabasesDatabaseReplicationConfiguration> replicationConfigurations() {
        return this.replicationConfigurations;
    }
    public Integer retentionTime() {
        return this.retentionTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabasesDatabase defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String comment;
        private String createdOn;
        private Boolean isCurrent;
        private Boolean isDefault;
        private String name;
        private String options;
        private String origin;
        private String owner;
        private List<GetDatabasesDatabaseReplicationConfiguration> replicationConfigurations;
        private Integer retentionTime;
        public Builder() {}
        public Builder(GetDatabasesDatabase defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comment = defaults.comment;
    	      this.createdOn = defaults.createdOn;
    	      this.isCurrent = defaults.isCurrent;
    	      this.isDefault = defaults.isDefault;
    	      this.name = defaults.name;
    	      this.options = defaults.options;
    	      this.origin = defaults.origin;
    	      this.owner = defaults.owner;
    	      this.replicationConfigurations = defaults.replicationConfigurations;
    	      this.retentionTime = defaults.retentionTime;
        }

        @CustomType.Setter
        public Builder comment(String comment) {
            if (comment == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabase", "comment");
            }
            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabase", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder isCurrent(Boolean isCurrent) {
            if (isCurrent == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabase", "isCurrent");
            }
            this.isCurrent = isCurrent;
            return this;
        }
        @CustomType.Setter
        public Builder isDefault(Boolean isDefault) {
            if (isDefault == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabase", "isDefault");
            }
            this.isDefault = isDefault;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabase", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder options(String options) {
            if (options == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabase", "options");
            }
            this.options = options;
            return this;
        }
        @CustomType.Setter
        public Builder origin(String origin) {
            if (origin == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabase", "origin");
            }
            this.origin = origin;
            return this;
        }
        @CustomType.Setter
        public Builder owner(String owner) {
            if (owner == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabase", "owner");
            }
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder replicationConfigurations(List<GetDatabasesDatabaseReplicationConfiguration> replicationConfigurations) {
            if (replicationConfigurations == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabase", "replicationConfigurations");
            }
            this.replicationConfigurations = replicationConfigurations;
            return this;
        }
        public Builder replicationConfigurations(GetDatabasesDatabaseReplicationConfiguration... replicationConfigurations) {
            return replicationConfigurations(List.of(replicationConfigurations));
        }
        @CustomType.Setter
        public Builder retentionTime(Integer retentionTime) {
            if (retentionTime == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabase", "retentionTime");
            }
            this.retentionTime = retentionTime;
            return this;
        }
        public GetDatabasesDatabase build() {
            final var _resultValue = new GetDatabasesDatabase();
            _resultValue.comment = comment;
            _resultValue.createdOn = createdOn;
            _resultValue.isCurrent = isCurrent;
            _resultValue.isDefault = isDefault;
            _resultValue.name = name;
            _resultValue.options = options;
            _resultValue.origin = origin;
            _resultValue.owner = owner;
            _resultValue.replicationConfigurations = replicationConfigurations;
            _resultValue.retentionTime = retentionTime;
            return _resultValue;
        }
    }
}
