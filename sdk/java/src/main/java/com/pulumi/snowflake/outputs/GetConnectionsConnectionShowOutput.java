// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetConnectionsConnectionShowOutput {
    private String accountLocator;
    private String accountName;
    private String comment;
    private String connectionUrl;
    private String createdOn;
    private List<String> failoverAllowedToAccounts;
    private Boolean isPrimary;
    private String name;
    private String organizationName;
    private String primary;
    private String regionGroup;
    private String snowflakeRegion;

    private GetConnectionsConnectionShowOutput() {}
    public String accountLocator() {
        return this.accountLocator;
    }
    public String accountName() {
        return this.accountName;
    }
    public String comment() {
        return this.comment;
    }
    public String connectionUrl() {
        return this.connectionUrl;
    }
    public String createdOn() {
        return this.createdOn;
    }
    public List<String> failoverAllowedToAccounts() {
        return this.failoverAllowedToAccounts;
    }
    public Boolean isPrimary() {
        return this.isPrimary;
    }
    public String name() {
        return this.name;
    }
    public String organizationName() {
        return this.organizationName;
    }
    public String primary() {
        return this.primary;
    }
    public String regionGroup() {
        return this.regionGroup;
    }
    public String snowflakeRegion() {
        return this.snowflakeRegion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionsConnectionShowOutput defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountLocator;
        private String accountName;
        private String comment;
        private String connectionUrl;
        private String createdOn;
        private List<String> failoverAllowedToAccounts;
        private Boolean isPrimary;
        private String name;
        private String organizationName;
        private String primary;
        private String regionGroup;
        private String snowflakeRegion;
        public Builder() {}
        public Builder(GetConnectionsConnectionShowOutput defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountLocator = defaults.accountLocator;
    	      this.accountName = defaults.accountName;
    	      this.comment = defaults.comment;
    	      this.connectionUrl = defaults.connectionUrl;
    	      this.createdOn = defaults.createdOn;
    	      this.failoverAllowedToAccounts = defaults.failoverAllowedToAccounts;
    	      this.isPrimary = defaults.isPrimary;
    	      this.name = defaults.name;
    	      this.organizationName = defaults.organizationName;
    	      this.primary = defaults.primary;
    	      this.regionGroup = defaults.regionGroup;
    	      this.snowflakeRegion = defaults.snowflakeRegion;
        }

        @CustomType.Setter
        public Builder accountLocator(String accountLocator) {
            if (accountLocator == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionShowOutput", "accountLocator");
            }
            this.accountLocator = accountLocator;
            return this;
        }
        @CustomType.Setter
        public Builder accountName(String accountName) {
            if (accountName == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionShowOutput", "accountName");
            }
            this.accountName = accountName;
            return this;
        }
        @CustomType.Setter
        public Builder comment(String comment) {
            if (comment == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionShowOutput", "comment");
            }
            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder connectionUrl(String connectionUrl) {
            if (connectionUrl == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionShowOutput", "connectionUrl");
            }
            this.connectionUrl = connectionUrl;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionShowOutput", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder failoverAllowedToAccounts(List<String> failoverAllowedToAccounts) {
            if (failoverAllowedToAccounts == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionShowOutput", "failoverAllowedToAccounts");
            }
            this.failoverAllowedToAccounts = failoverAllowedToAccounts;
            return this;
        }
        public Builder failoverAllowedToAccounts(String... failoverAllowedToAccounts) {
            return failoverAllowedToAccounts(List.of(failoverAllowedToAccounts));
        }
        @CustomType.Setter
        public Builder isPrimary(Boolean isPrimary) {
            if (isPrimary == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionShowOutput", "isPrimary");
            }
            this.isPrimary = isPrimary;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionShowOutput", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder organizationName(String organizationName) {
            if (organizationName == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionShowOutput", "organizationName");
            }
            this.organizationName = organizationName;
            return this;
        }
        @CustomType.Setter
        public Builder primary(String primary) {
            if (primary == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionShowOutput", "primary");
            }
            this.primary = primary;
            return this;
        }
        @CustomType.Setter
        public Builder regionGroup(String regionGroup) {
            if (regionGroup == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionShowOutput", "regionGroup");
            }
            this.regionGroup = regionGroup;
            return this;
        }
        @CustomType.Setter
        public Builder snowflakeRegion(String snowflakeRegion) {
            if (snowflakeRegion == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionShowOutput", "snowflakeRegion");
            }
            this.snowflakeRegion = snowflakeRegion;
            return this;
        }
        public GetConnectionsConnectionShowOutput build() {
            final var _resultValue = new GetConnectionsConnectionShowOutput();
            _resultValue.accountLocator = accountLocator;
            _resultValue.accountName = accountName;
            _resultValue.comment = comment;
            _resultValue.connectionUrl = connectionUrl;
            _resultValue.createdOn = createdOn;
            _resultValue.failoverAllowedToAccounts = failoverAllowedToAccounts;
            _resultValue.isPrimary = isPrimary;
            _resultValue.name = name;
            _resultValue.organizationName = organizationName;
            _resultValue.primary = primary;
            _resultValue.regionGroup = regionGroup;
            _resultValue.snowflakeRegion = snowflakeRegion;
            return _resultValue;
        }
    }
}
