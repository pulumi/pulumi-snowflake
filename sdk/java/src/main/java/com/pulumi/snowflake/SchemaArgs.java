// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.snowflake.inputs.SchemaTagArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SchemaArgs extends com.pulumi.resources.ResourceArgs {

    public static final SchemaArgs Empty = new SchemaArgs();

    /**
     * Specifies a comment for the schema.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Specifies a comment for the schema.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the schema, as well as specifying the default Time Travel retention time for all tables created in the schema.
     * 
     */
    @Import(name="dataRetentionDays")
    private @Nullable Output<Integer> dataRetentionDays;

    /**
     * @return Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the schema, as well as specifying the default Time Travel retention time for all tables created in the schema.
     * 
     */
    public Optional<Output<Integer>> dataRetentionDays() {
        return Optional.ofNullable(this.dataRetentionDays);
    }

    /**
     * The database in which to create the schema.
     * 
     */
    @Import(name="database", required=true)
    private Output<String> database;

    /**
     * @return The database in which to create the schema.
     * 
     */
    public Output<String> database() {
        return this.database;
    }

    /**
     * Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner.
     * 
     */
    @Import(name="isManaged")
    private @Nullable Output<Boolean> isManaged;

    /**
     * @return Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner.
     * 
     */
    public Optional<Output<Boolean>> isManaged() {
        return Optional.ofNullable(this.isManaged);
    }

    /**
     * Specifies a schema as transient. Transient schemas do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
     * 
     */
    @Import(name="isTransient")
    private @Nullable Output<Boolean> isTransient;

    /**
     * @return Specifies a schema as transient. Transient schemas do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
     * 
     */
    public Optional<Output<Boolean>> isTransient() {
        return Optional.ofNullable(this.isTransient);
    }

    /**
     * Specifies the identifier for the schema; must be unique for the database in which the schema is created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the identifier for the schema; must be unique for the database in which the schema is created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Definitions of a tag to associate with the resource.
     * 
     * @deprecated
     * Use the &#39;snowflake_tag_association&#39; resource instead.
     * 
     */
    @Deprecated /* Use the 'snowflake_tag_association' resource instead. */
    @Import(name="tags")
    private @Nullable Output<List<SchemaTagArgs>> tags;

    /**
     * @return Definitions of a tag to associate with the resource.
     * 
     * @deprecated
     * Use the &#39;snowflake_tag_association&#39; resource instead.
     * 
     */
    @Deprecated /* Use the 'snowflake_tag_association' resource instead. */
    public Optional<Output<List<SchemaTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private SchemaArgs() {}

    private SchemaArgs(SchemaArgs $) {
        this.comment = $.comment;
        this.dataRetentionDays = $.dataRetentionDays;
        this.database = $.database;
        this.isManaged = $.isManaged;
        this.isTransient = $.isTransient;
        this.name = $.name;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchemaArgs $;

        public Builder() {
            $ = new SchemaArgs();
        }

        public Builder(SchemaArgs defaults) {
            $ = new SchemaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment Specifies a comment for the schema.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Specifies a comment for the schema.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param dataRetentionDays Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the schema, as well as specifying the default Time Travel retention time for all tables created in the schema.
         * 
         * @return builder
         * 
         */
        public Builder dataRetentionDays(@Nullable Output<Integer> dataRetentionDays) {
            $.dataRetentionDays = dataRetentionDays;
            return this;
        }

        /**
         * @param dataRetentionDays Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the schema, as well as specifying the default Time Travel retention time for all tables created in the schema.
         * 
         * @return builder
         * 
         */
        public Builder dataRetentionDays(Integer dataRetentionDays) {
            return dataRetentionDays(Output.of(dataRetentionDays));
        }

        /**
         * @param database The database in which to create the schema.
         * 
         * @return builder
         * 
         */
        public Builder database(Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The database in which to create the schema.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param isManaged Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner.
         * 
         * @return builder
         * 
         */
        public Builder isManaged(@Nullable Output<Boolean> isManaged) {
            $.isManaged = isManaged;
            return this;
        }

        /**
         * @param isManaged Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner.
         * 
         * @return builder
         * 
         */
        public Builder isManaged(Boolean isManaged) {
            return isManaged(Output.of(isManaged));
        }

        /**
         * @param isTransient Specifies a schema as transient. Transient schemas do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
         * 
         * @return builder
         * 
         */
        public Builder isTransient(@Nullable Output<Boolean> isTransient) {
            $.isTransient = isTransient;
            return this;
        }

        /**
         * @param isTransient Specifies a schema as transient. Transient schemas do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
         * 
         * @return builder
         * 
         */
        public Builder isTransient(Boolean isTransient) {
            return isTransient(Output.of(isTransient));
        }

        /**
         * @param name Specifies the identifier for the schema; must be unique for the database in which the schema is created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the identifier for the schema; must be unique for the database in which the schema is created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tags Definitions of a tag to associate with the resource.
         * 
         * @return builder
         * 
         * @deprecated
         * Use the &#39;snowflake_tag_association&#39; resource instead.
         * 
         */
        @Deprecated /* Use the 'snowflake_tag_association' resource instead. */
        public Builder tags(@Nullable Output<List<SchemaTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Definitions of a tag to associate with the resource.
         * 
         * @return builder
         * 
         * @deprecated
         * Use the &#39;snowflake_tag_association&#39; resource instead.
         * 
         */
        @Deprecated /* Use the 'snowflake_tag_association' resource instead. */
        public Builder tags(List<SchemaTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Definitions of a tag to associate with the resource.
         * 
         * @return builder
         * 
         * @deprecated
         * Use the &#39;snowflake_tag_association&#39; resource instead.
         * 
         */
        @Deprecated /* Use the 'snowflake_tag_association' resource instead. */
        public Builder tags(SchemaTagArgs... tags) {
            return tags(List.of(tags));
        }

        public SchemaArgs build() {
            $.database = Objects.requireNonNull($.database, "expected parameter 'database' to be non-null");
            return $;
        }
    }

}
