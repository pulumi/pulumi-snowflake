// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.resources.InvokeArgs;
import com.pulumi.snowflake.Utilities;
import com.pulumi.snowflake.inputs.GetAccountRolesArgs;
import com.pulumi.snowflake.inputs.GetAccountRolesPlainArgs;
import com.pulumi.snowflake.inputs.GetAccountsArgs;
import com.pulumi.snowflake.inputs.GetAccountsPlainArgs;
import com.pulumi.snowflake.inputs.GetAlertsArgs;
import com.pulumi.snowflake.inputs.GetAlertsPlainArgs;
import com.pulumi.snowflake.inputs.GetConnectionsArgs;
import com.pulumi.snowflake.inputs.GetConnectionsPlainArgs;
import com.pulumi.snowflake.inputs.GetCortexSearchServicesArgs;
import com.pulumi.snowflake.inputs.GetCortexSearchServicesPlainArgs;
import com.pulumi.snowflake.inputs.GetDatabaseArgs;
import com.pulumi.snowflake.inputs.GetDatabasePlainArgs;
import com.pulumi.snowflake.inputs.GetDatabaseRoleArgs;
import com.pulumi.snowflake.inputs.GetDatabaseRolePlainArgs;
import com.pulumi.snowflake.inputs.GetDatabaseRolesArgs;
import com.pulumi.snowflake.inputs.GetDatabaseRolesPlainArgs;
import com.pulumi.snowflake.inputs.GetDatabasesArgs;
import com.pulumi.snowflake.inputs.GetDatabasesPlainArgs;
import com.pulumi.snowflake.inputs.GetDynamicTablesArgs;
import com.pulumi.snowflake.inputs.GetDynamicTablesPlainArgs;
import com.pulumi.snowflake.inputs.GetExternalFunctionsArgs;
import com.pulumi.snowflake.inputs.GetExternalFunctionsPlainArgs;
import com.pulumi.snowflake.inputs.GetExternalTablesArgs;
import com.pulumi.snowflake.inputs.GetExternalTablesPlainArgs;
import com.pulumi.snowflake.inputs.GetFailoverGroupsArgs;
import com.pulumi.snowflake.inputs.GetFailoverGroupsPlainArgs;
import com.pulumi.snowflake.inputs.GetFileFormatsArgs;
import com.pulumi.snowflake.inputs.GetFileFormatsPlainArgs;
import com.pulumi.snowflake.inputs.GetFunctionsArgs;
import com.pulumi.snowflake.inputs.GetFunctionsPlainArgs;
import com.pulumi.snowflake.inputs.GetGrantsArgs;
import com.pulumi.snowflake.inputs.GetGrantsPlainArgs;
import com.pulumi.snowflake.inputs.GetMaskingPoliciesArgs;
import com.pulumi.snowflake.inputs.GetMaskingPoliciesPlainArgs;
import com.pulumi.snowflake.inputs.GetMaterializedViewsArgs;
import com.pulumi.snowflake.inputs.GetMaterializedViewsPlainArgs;
import com.pulumi.snowflake.inputs.GetNetworkPoliciesArgs;
import com.pulumi.snowflake.inputs.GetNetworkPoliciesPlainArgs;
import com.pulumi.snowflake.inputs.GetParametersArgs;
import com.pulumi.snowflake.inputs.GetParametersPlainArgs;
import com.pulumi.snowflake.inputs.GetPipesArgs;
import com.pulumi.snowflake.inputs.GetPipesPlainArgs;
import com.pulumi.snowflake.inputs.GetProceduresArgs;
import com.pulumi.snowflake.inputs.GetProceduresPlainArgs;
import com.pulumi.snowflake.inputs.GetResourceMonitorsArgs;
import com.pulumi.snowflake.inputs.GetResourceMonitorsPlainArgs;
import com.pulumi.snowflake.inputs.GetRowAccessPoliciesArgs;
import com.pulumi.snowflake.inputs.GetRowAccessPoliciesPlainArgs;
import com.pulumi.snowflake.inputs.GetSchemasArgs;
import com.pulumi.snowflake.inputs.GetSchemasPlainArgs;
import com.pulumi.snowflake.inputs.GetSecretsArgs;
import com.pulumi.snowflake.inputs.GetSecretsPlainArgs;
import com.pulumi.snowflake.inputs.GetSecurityIntegrationsArgs;
import com.pulumi.snowflake.inputs.GetSecurityIntegrationsPlainArgs;
import com.pulumi.snowflake.inputs.GetSequencesArgs;
import com.pulumi.snowflake.inputs.GetSequencesPlainArgs;
import com.pulumi.snowflake.inputs.GetSharesArgs;
import com.pulumi.snowflake.inputs.GetSharesPlainArgs;
import com.pulumi.snowflake.inputs.GetStagesArgs;
import com.pulumi.snowflake.inputs.GetStagesPlainArgs;
import com.pulumi.snowflake.inputs.GetStreamlitsArgs;
import com.pulumi.snowflake.inputs.GetStreamlitsPlainArgs;
import com.pulumi.snowflake.inputs.GetStreamsArgs;
import com.pulumi.snowflake.inputs.GetStreamsPlainArgs;
import com.pulumi.snowflake.inputs.GetSystemGenerateScimAccessTokenArgs;
import com.pulumi.snowflake.inputs.GetSystemGenerateScimAccessTokenPlainArgs;
import com.pulumi.snowflake.inputs.GetSystemGetAwsSnsIamPolicyArgs;
import com.pulumi.snowflake.inputs.GetSystemGetAwsSnsIamPolicyPlainArgs;
import com.pulumi.snowflake.inputs.GetTablesArgs;
import com.pulumi.snowflake.inputs.GetTablesPlainArgs;
import com.pulumi.snowflake.inputs.GetTagsArgs;
import com.pulumi.snowflake.inputs.GetTagsPlainArgs;
import com.pulumi.snowflake.inputs.GetTasksArgs;
import com.pulumi.snowflake.inputs.GetTasksPlainArgs;
import com.pulumi.snowflake.inputs.GetUsersArgs;
import com.pulumi.snowflake.inputs.GetUsersPlainArgs;
import com.pulumi.snowflake.inputs.GetViewsArgs;
import com.pulumi.snowflake.inputs.GetViewsPlainArgs;
import com.pulumi.snowflake.inputs.GetWarehousesArgs;
import com.pulumi.snowflake.inputs.GetWarehousesPlainArgs;
import com.pulumi.snowflake.outputs.GetAccountRolesResult;
import com.pulumi.snowflake.outputs.GetAccountsResult;
import com.pulumi.snowflake.outputs.GetAlertsResult;
import com.pulumi.snowflake.outputs.GetConnectionsResult;
import com.pulumi.snowflake.outputs.GetCortexSearchServicesResult;
import com.pulumi.snowflake.outputs.GetCurrentAccountResult;
import com.pulumi.snowflake.outputs.GetCurrentRoleResult;
import com.pulumi.snowflake.outputs.GetDatabaseResult;
import com.pulumi.snowflake.outputs.GetDatabaseRoleResult;
import com.pulumi.snowflake.outputs.GetDatabaseRolesResult;
import com.pulumi.snowflake.outputs.GetDatabasesResult;
import com.pulumi.snowflake.outputs.GetDynamicTablesResult;
import com.pulumi.snowflake.outputs.GetExternalFunctionsResult;
import com.pulumi.snowflake.outputs.GetExternalTablesResult;
import com.pulumi.snowflake.outputs.GetFailoverGroupsResult;
import com.pulumi.snowflake.outputs.GetFileFormatsResult;
import com.pulumi.snowflake.outputs.GetFunctionsResult;
import com.pulumi.snowflake.outputs.GetGrantsResult;
import com.pulumi.snowflake.outputs.GetMaskingPoliciesResult;
import com.pulumi.snowflake.outputs.GetMaterializedViewsResult;
import com.pulumi.snowflake.outputs.GetNetworkPoliciesResult;
import com.pulumi.snowflake.outputs.GetParametersResult;
import com.pulumi.snowflake.outputs.GetPipesResult;
import com.pulumi.snowflake.outputs.GetProceduresResult;
import com.pulumi.snowflake.outputs.GetResourceMonitorsResult;
import com.pulumi.snowflake.outputs.GetRowAccessPoliciesResult;
import com.pulumi.snowflake.outputs.GetSchemasResult;
import com.pulumi.snowflake.outputs.GetSecretsResult;
import com.pulumi.snowflake.outputs.GetSecurityIntegrationsResult;
import com.pulumi.snowflake.outputs.GetSequencesResult;
import com.pulumi.snowflake.outputs.GetSharesResult;
import com.pulumi.snowflake.outputs.GetStagesResult;
import com.pulumi.snowflake.outputs.GetStorageIntegrationsResult;
import com.pulumi.snowflake.outputs.GetStreamlitsResult;
import com.pulumi.snowflake.outputs.GetStreamsResult;
import com.pulumi.snowflake.outputs.GetSystemGenerateScimAccessTokenResult;
import com.pulumi.snowflake.outputs.GetSystemGetAwsSnsIamPolicyResult;
import com.pulumi.snowflake.outputs.GetSystemGetPrivateLinkConfigResult;
import com.pulumi.snowflake.outputs.GetSystemGetSnowflakePlatformInfoResult;
import com.pulumi.snowflake.outputs.GetTablesResult;
import com.pulumi.snowflake.outputs.GetTagsResult;
import com.pulumi.snowflake.outputs.GetTasksResult;
import com.pulumi.snowflake.outputs.GetUsersResult;
import com.pulumi.snowflake.outputs.GetViewsResult;
import com.pulumi.snowflake.outputs.GetWarehousesResult;
import java.util.concurrent.CompletableFuture;

public final class SnowflakeFunctions {
    /**
     * Data source used to get details of filtered account roles. Filtering is aligned with the current possibilities for [SHOW ROLES](https://docs.snowflake.com/en/sql-reference/sql/show-roles) query (`like` and `in_class` are all supported). The results of SHOW are encapsulated in one output collection.
     * 
     */
    public static Output<GetAccountRolesResult> getAccountRoles() {
        return getAccountRoles(GetAccountRolesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered account roles. Filtering is aligned with the current possibilities for [SHOW ROLES](https://docs.snowflake.com/en/sql-reference/sql/show-roles) query (`like` and `in_class` are all supported). The results of SHOW are encapsulated in one output collection.
     * 
     */
    public static CompletableFuture<GetAccountRolesResult> getAccountRolesPlain() {
        return getAccountRolesPlain(GetAccountRolesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered account roles. Filtering is aligned with the current possibilities for [SHOW ROLES](https://docs.snowflake.com/en/sql-reference/sql/show-roles) query (`like` and `in_class` are all supported). The results of SHOW are encapsulated in one output collection.
     * 
     */
    public static Output<GetAccountRolesResult> getAccountRoles(GetAccountRolesArgs args) {
        return getAccountRoles(args, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered account roles. Filtering is aligned with the current possibilities for [SHOW ROLES](https://docs.snowflake.com/en/sql-reference/sql/show-roles) query (`like` and `in_class` are all supported). The results of SHOW are encapsulated in one output collection.
     * 
     */
    public static CompletableFuture<GetAccountRolesResult> getAccountRolesPlain(GetAccountRolesPlainArgs args) {
        return getAccountRolesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered account roles. Filtering is aligned with the current possibilities for [SHOW ROLES](https://docs.snowflake.com/en/sql-reference/sql/show-roles) query (`like` and `in_class` are all supported). The results of SHOW are encapsulated in one output collection.
     * 
     */
    public static Output<GetAccountRolesResult> getAccountRoles(GetAccountRolesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getAccountRoles:getAccountRoles", TypeShape.of(GetAccountRolesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered account roles. Filtering is aligned with the current possibilities for [SHOW ROLES](https://docs.snowflake.com/en/sql-reference/sql/show-roles) query (`like` and `in_class` are all supported). The results of SHOW are encapsulated in one output collection.
     * 
     */
    public static Output<GetAccountRolesResult> getAccountRoles(GetAccountRolesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getAccountRoles:getAccountRoles", TypeShape.of(GetAccountRolesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered account roles. Filtering is aligned with the current possibilities for [SHOW ROLES](https://docs.snowflake.com/en/sql-reference/sql/show-roles) query (`like` and `in_class` are all supported). The results of SHOW are encapsulated in one output collection.
     * 
     */
    public static CompletableFuture<GetAccountRolesResult> getAccountRolesPlain(GetAccountRolesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getAccountRoles:getAccountRoles", TypeShape.of(GetAccountRolesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered accounts. Filtering is aligned with the current possibilities for [SHOW ACCOUNTS](https://docs.snowflake.com/en/sql-reference/sql/show-accounts) query. The results of SHOW are encapsulated in one output collection `accounts`.
     * 
     */
    public static Output<GetAccountsResult> getAccounts() {
        return getAccounts(GetAccountsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered accounts. Filtering is aligned with the current possibilities for [SHOW ACCOUNTS](https://docs.snowflake.com/en/sql-reference/sql/show-accounts) query. The results of SHOW are encapsulated in one output collection `accounts`.
     * 
     */
    public static CompletableFuture<GetAccountsResult> getAccountsPlain() {
        return getAccountsPlain(GetAccountsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered accounts. Filtering is aligned with the current possibilities for [SHOW ACCOUNTS](https://docs.snowflake.com/en/sql-reference/sql/show-accounts) query. The results of SHOW are encapsulated in one output collection `accounts`.
     * 
     */
    public static Output<GetAccountsResult> getAccounts(GetAccountsArgs args) {
        return getAccounts(args, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered accounts. Filtering is aligned with the current possibilities for [SHOW ACCOUNTS](https://docs.snowflake.com/en/sql-reference/sql/show-accounts) query. The results of SHOW are encapsulated in one output collection `accounts`.
     * 
     */
    public static CompletableFuture<GetAccountsResult> getAccountsPlain(GetAccountsPlainArgs args) {
        return getAccountsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered accounts. Filtering is aligned with the current possibilities for [SHOW ACCOUNTS](https://docs.snowflake.com/en/sql-reference/sql/show-accounts) query. The results of SHOW are encapsulated in one output collection `accounts`.
     * 
     */
    public static Output<GetAccountsResult> getAccounts(GetAccountsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getAccounts:getAccounts", TypeShape.of(GetAccountsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered accounts. Filtering is aligned with the current possibilities for [SHOW ACCOUNTS](https://docs.snowflake.com/en/sql-reference/sql/show-accounts) query. The results of SHOW are encapsulated in one output collection `accounts`.
     * 
     */
    public static Output<GetAccountsResult> getAccounts(GetAccountsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getAccounts:getAccounts", TypeShape.of(GetAccountsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered accounts. Filtering is aligned with the current possibilities for [SHOW ACCOUNTS](https://docs.snowflake.com/en/sql-reference/sql/show-accounts) query. The results of SHOW are encapsulated in one output collection `accounts`.
     * 
     */
    public static CompletableFuture<GetAccountsResult> getAccountsPlain(GetAccountsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getAccounts:getAccounts", TypeShape.of(GetAccountsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetAlertsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getAlerts(GetAlertsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetAlertsResult> getAlerts() {
        return getAlerts(GetAlertsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetAlertsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getAlerts(GetAlertsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetAlertsResult> getAlertsPlain() {
        return getAlertsPlain(GetAlertsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetAlertsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getAlerts(GetAlertsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetAlertsResult> getAlerts(GetAlertsArgs args) {
        return getAlerts(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetAlertsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getAlerts(GetAlertsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetAlertsResult> getAlertsPlain(GetAlertsPlainArgs args) {
        return getAlertsPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetAlertsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getAlerts(GetAlertsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetAlertsResult> getAlerts(GetAlertsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getAlerts:getAlerts", TypeShape.of(GetAlertsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetAlertsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getAlerts(GetAlertsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetAlertsResult> getAlerts(GetAlertsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getAlerts:getAlerts", TypeShape.of(GetAlertsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetAlertsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getAlerts(GetAlertsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetAlertsResult> getAlertsPlain(GetAlertsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getAlerts:getAlerts", TypeShape.of(GetAlertsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered connections. Filtering is aligned with the current possibilities for [SHOW CONNECTIONS](https://docs.snowflake.com/en/sql-reference/sql/show-connections) query. The results of SHOW is encapsulated in one output collection `connections`.
     * 
     */
    public static Output<GetConnectionsResult> getConnections() {
        return getConnections(GetConnectionsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered connections. Filtering is aligned with the current possibilities for [SHOW CONNECTIONS](https://docs.snowflake.com/en/sql-reference/sql/show-connections) query. The results of SHOW is encapsulated in one output collection `connections`.
     * 
     */
    public static CompletableFuture<GetConnectionsResult> getConnectionsPlain() {
        return getConnectionsPlain(GetConnectionsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered connections. Filtering is aligned with the current possibilities for [SHOW CONNECTIONS](https://docs.snowflake.com/en/sql-reference/sql/show-connections) query. The results of SHOW is encapsulated in one output collection `connections`.
     * 
     */
    public static Output<GetConnectionsResult> getConnections(GetConnectionsArgs args) {
        return getConnections(args, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered connections. Filtering is aligned with the current possibilities for [SHOW CONNECTIONS](https://docs.snowflake.com/en/sql-reference/sql/show-connections) query. The results of SHOW is encapsulated in one output collection `connections`.
     * 
     */
    public static CompletableFuture<GetConnectionsResult> getConnectionsPlain(GetConnectionsPlainArgs args) {
        return getConnectionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered connections. Filtering is aligned with the current possibilities for [SHOW CONNECTIONS](https://docs.snowflake.com/en/sql-reference/sql/show-connections) query. The results of SHOW is encapsulated in one output collection `connections`.
     * 
     */
    public static Output<GetConnectionsResult> getConnections(GetConnectionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getConnections:getConnections", TypeShape.of(GetConnectionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered connections. Filtering is aligned with the current possibilities for [SHOW CONNECTIONS](https://docs.snowflake.com/en/sql-reference/sql/show-connections) query. The results of SHOW is encapsulated in one output collection `connections`.
     * 
     */
    public static Output<GetConnectionsResult> getConnections(GetConnectionsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getConnections:getConnections", TypeShape.of(GetConnectionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered connections. Filtering is aligned with the current possibilities for [SHOW CONNECTIONS](https://docs.snowflake.com/en/sql-reference/sql/show-connections) query. The results of SHOW is encapsulated in one output collection `connections`.
     * 
     */
    public static CompletableFuture<GetConnectionsResult> getConnectionsPlain(GetConnectionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getConnections:getConnections", TypeShape.of(GetConnectionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetCortexSearchServicesArgs;
     * import com.pulumi.snowflake.inputs.GetCortexSearchServicesLimitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Simple usage
     *         final var simple = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .build());
     * 
     *         ctx.export("simpleOutput", simple.cortexSearchServices());
     *         // Filtering (like)
     *         final var like = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .like("some-name")
     *             .build());
     * 
     *         ctx.export("likeOutput", like.cortexSearchServices());
     *         // Filtering (starts_with)
     *         final var startsWith = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .startsWith("prefix-")
     *             .build());
     * 
     *         ctx.export("startsWithOutput", startsWith.cortexSearchServices());
     *         // Filtering (limit)
     *         final var limit = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .limit(GetCortexSearchServicesLimitArgs.builder()
     *                 .rows(10)
     *                 .from("prefix-")
     *                 .build())
     *             .build());
     * 
     *         ctx.export("limitOutput", limit.cortexSearchServices());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetCortexSearchServicesResult> getCortexSearchServices() {
        return getCortexSearchServices(GetCortexSearchServicesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetCortexSearchServicesArgs;
     * import com.pulumi.snowflake.inputs.GetCortexSearchServicesLimitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Simple usage
     *         final var simple = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .build());
     * 
     *         ctx.export("simpleOutput", simple.cortexSearchServices());
     *         // Filtering (like)
     *         final var like = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .like("some-name")
     *             .build());
     * 
     *         ctx.export("likeOutput", like.cortexSearchServices());
     *         // Filtering (starts_with)
     *         final var startsWith = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .startsWith("prefix-")
     *             .build());
     * 
     *         ctx.export("startsWithOutput", startsWith.cortexSearchServices());
     *         // Filtering (limit)
     *         final var limit = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .limit(GetCortexSearchServicesLimitArgs.builder()
     *                 .rows(10)
     *                 .from("prefix-")
     *                 .build())
     *             .build());
     * 
     *         ctx.export("limitOutput", limit.cortexSearchServices());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetCortexSearchServicesResult> getCortexSearchServicesPlain() {
        return getCortexSearchServicesPlain(GetCortexSearchServicesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetCortexSearchServicesArgs;
     * import com.pulumi.snowflake.inputs.GetCortexSearchServicesLimitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Simple usage
     *         final var simple = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .build());
     * 
     *         ctx.export("simpleOutput", simple.cortexSearchServices());
     *         // Filtering (like)
     *         final var like = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .like("some-name")
     *             .build());
     * 
     *         ctx.export("likeOutput", like.cortexSearchServices());
     *         // Filtering (starts_with)
     *         final var startsWith = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .startsWith("prefix-")
     *             .build());
     * 
     *         ctx.export("startsWithOutput", startsWith.cortexSearchServices());
     *         // Filtering (limit)
     *         final var limit = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .limit(GetCortexSearchServicesLimitArgs.builder()
     *                 .rows(10)
     *                 .from("prefix-")
     *                 .build())
     *             .build());
     * 
     *         ctx.export("limitOutput", limit.cortexSearchServices());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetCortexSearchServicesResult> getCortexSearchServices(GetCortexSearchServicesArgs args) {
        return getCortexSearchServices(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetCortexSearchServicesArgs;
     * import com.pulumi.snowflake.inputs.GetCortexSearchServicesLimitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Simple usage
     *         final var simple = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .build());
     * 
     *         ctx.export("simpleOutput", simple.cortexSearchServices());
     *         // Filtering (like)
     *         final var like = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .like("some-name")
     *             .build());
     * 
     *         ctx.export("likeOutput", like.cortexSearchServices());
     *         // Filtering (starts_with)
     *         final var startsWith = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .startsWith("prefix-")
     *             .build());
     * 
     *         ctx.export("startsWithOutput", startsWith.cortexSearchServices());
     *         // Filtering (limit)
     *         final var limit = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .limit(GetCortexSearchServicesLimitArgs.builder()
     *                 .rows(10)
     *                 .from("prefix-")
     *                 .build())
     *             .build());
     * 
     *         ctx.export("limitOutput", limit.cortexSearchServices());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetCortexSearchServicesResult> getCortexSearchServicesPlain(GetCortexSearchServicesPlainArgs args) {
        return getCortexSearchServicesPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetCortexSearchServicesArgs;
     * import com.pulumi.snowflake.inputs.GetCortexSearchServicesLimitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Simple usage
     *         final var simple = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .build());
     * 
     *         ctx.export("simpleOutput", simple.cortexSearchServices());
     *         // Filtering (like)
     *         final var like = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .like("some-name")
     *             .build());
     * 
     *         ctx.export("likeOutput", like.cortexSearchServices());
     *         // Filtering (starts_with)
     *         final var startsWith = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .startsWith("prefix-")
     *             .build());
     * 
     *         ctx.export("startsWithOutput", startsWith.cortexSearchServices());
     *         // Filtering (limit)
     *         final var limit = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .limit(GetCortexSearchServicesLimitArgs.builder()
     *                 .rows(10)
     *                 .from("prefix-")
     *                 .build())
     *             .build());
     * 
     *         ctx.export("limitOutput", limit.cortexSearchServices());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetCortexSearchServicesResult> getCortexSearchServices(GetCortexSearchServicesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getCortexSearchServices:getCortexSearchServices", TypeShape.of(GetCortexSearchServicesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetCortexSearchServicesArgs;
     * import com.pulumi.snowflake.inputs.GetCortexSearchServicesLimitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Simple usage
     *         final var simple = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .build());
     * 
     *         ctx.export("simpleOutput", simple.cortexSearchServices());
     *         // Filtering (like)
     *         final var like = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .like("some-name")
     *             .build());
     * 
     *         ctx.export("likeOutput", like.cortexSearchServices());
     *         // Filtering (starts_with)
     *         final var startsWith = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .startsWith("prefix-")
     *             .build());
     * 
     *         ctx.export("startsWithOutput", startsWith.cortexSearchServices());
     *         // Filtering (limit)
     *         final var limit = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .limit(GetCortexSearchServicesLimitArgs.builder()
     *                 .rows(10)
     *                 .from("prefix-")
     *                 .build())
     *             .build());
     * 
     *         ctx.export("limitOutput", limit.cortexSearchServices());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetCortexSearchServicesResult> getCortexSearchServices(GetCortexSearchServicesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getCortexSearchServices:getCortexSearchServices", TypeShape.of(GetCortexSearchServicesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetCortexSearchServicesArgs;
     * import com.pulumi.snowflake.inputs.GetCortexSearchServicesLimitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Simple usage
     *         final var simple = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .build());
     * 
     *         ctx.export("simpleOutput", simple.cortexSearchServices());
     *         // Filtering (like)
     *         final var like = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .like("some-name")
     *             .build());
     * 
     *         ctx.export("likeOutput", like.cortexSearchServices());
     *         // Filtering (starts_with)
     *         final var startsWith = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .startsWith("prefix-")
     *             .build());
     * 
     *         ctx.export("startsWithOutput", startsWith.cortexSearchServices());
     *         // Filtering (limit)
     *         final var limit = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()
     *             .limit(GetCortexSearchServicesLimitArgs.builder()
     *                 .rows(10)
     *                 .from("prefix-")
     *                 .build())
     *             .build());
     * 
     *         ctx.export("limitOutput", limit.cortexSearchServices());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetCortexSearchServicesResult> getCortexSearchServicesPlain(GetCortexSearchServicesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getCortexSearchServices:getCortexSearchServices", TypeShape.of(GetCortexSearchServicesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.aws.ssmParameter;
     * import com.pulumi.aws.ssmParameterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SnowflakeFunctions.getCurrentAccount(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         var snowflakeAccountUrl = new SsmParameter("snowflakeAccountUrl", SsmParameterArgs.builder()
     *             .name("/snowflake/account_url")
     *             .type("String")
     *             .value(this_.url())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetCurrentAccountResult> getCurrentAccount() {
        return getCurrentAccount(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.aws.ssmParameter;
     * import com.pulumi.aws.ssmParameterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SnowflakeFunctions.getCurrentAccount(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         var snowflakeAccountUrl = new SsmParameter("snowflakeAccountUrl", SsmParameterArgs.builder()
     *             .name("/snowflake/account_url")
     *             .type("String")
     *             .value(this_.url())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetCurrentAccountResult> getCurrentAccountPlain() {
        return getCurrentAccountPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.aws.ssmParameter;
     * import com.pulumi.aws.ssmParameterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SnowflakeFunctions.getCurrentAccount(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         var snowflakeAccountUrl = new SsmParameter("snowflakeAccountUrl", SsmParameterArgs.builder()
     *             .name("/snowflake/account_url")
     *             .type("String")
     *             .value(this_.url())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetCurrentAccountResult> getCurrentAccount(InvokeArgs args) {
        return getCurrentAccount(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.aws.ssmParameter;
     * import com.pulumi.aws.ssmParameterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SnowflakeFunctions.getCurrentAccount(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         var snowflakeAccountUrl = new SsmParameter("snowflakeAccountUrl", SsmParameterArgs.builder()
     *             .name("/snowflake/account_url")
     *             .type("String")
     *             .value(this_.url())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetCurrentAccountResult> getCurrentAccountPlain(InvokeArgs args) {
        return getCurrentAccountPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.aws.ssmParameter;
     * import com.pulumi.aws.ssmParameterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SnowflakeFunctions.getCurrentAccount(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         var snowflakeAccountUrl = new SsmParameter("snowflakeAccountUrl", SsmParameterArgs.builder()
     *             .name("/snowflake/account_url")
     *             .type("String")
     *             .value(this_.url())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetCurrentAccountResult> getCurrentAccount(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getCurrentAccount:getCurrentAccount", TypeShape.of(GetCurrentAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.aws.ssmParameter;
     * import com.pulumi.aws.ssmParameterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SnowflakeFunctions.getCurrentAccount(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         var snowflakeAccountUrl = new SsmParameter("snowflakeAccountUrl", SsmParameterArgs.builder()
     *             .name("/snowflake/account_url")
     *             .type("String")
     *             .value(this_.url())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetCurrentAccountResult> getCurrentAccount(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getCurrentAccount:getCurrentAccount", TypeShape.of(GetCurrentAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.aws.ssmParameter;
     * import com.pulumi.aws.ssmParameterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SnowflakeFunctions.getCurrentAccount(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         var snowflakeAccountUrl = new SsmParameter("snowflakeAccountUrl", SsmParameterArgs.builder()
     *             .name("/snowflake/account_url")
     *             .type("String")
     *             .value(this_.url())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetCurrentAccountResult> getCurrentAccountPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getCurrentAccount:getCurrentAccount", TypeShape.of(GetCurrentAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetCurrentRoleResult> getCurrentRole() {
        return getCurrentRole(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetCurrentRoleResult> getCurrentRolePlain() {
        return getCurrentRolePlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetCurrentRoleResult> getCurrentRole(InvokeArgs args) {
        return getCurrentRole(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetCurrentRoleResult> getCurrentRolePlain(InvokeArgs args) {
        return getCurrentRolePlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetCurrentRoleResult> getCurrentRole(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getCurrentRole:getCurrentRole", TypeShape.of(GetCurrentRoleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetCurrentRoleResult> getCurrentRole(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getCurrentRole:getCurrentRole", TypeShape.of(GetCurrentRoleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetCurrentRoleResult> getCurrentRolePlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getCurrentRole:getCurrentRole", TypeShape.of(GetCurrentRoleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetDatabaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SnowflakeFunctions.getDatabase(GetDatabaseArgs.builder()
     *             .name("DEMO_DB")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetDatabaseResult> getDatabase(GetDatabaseArgs args) {
        return getDatabase(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetDatabaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SnowflakeFunctions.getDatabase(GetDatabaseArgs.builder()
     *             .name("DEMO_DB")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetDatabaseResult> getDatabasePlain(GetDatabasePlainArgs args) {
        return getDatabasePlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetDatabaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SnowflakeFunctions.getDatabase(GetDatabaseArgs.builder()
     *             .name("DEMO_DB")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetDatabaseResult> getDatabase(GetDatabaseArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getDatabase:getDatabase", TypeShape.of(GetDatabaseResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetDatabaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SnowflakeFunctions.getDatabase(GetDatabaseArgs.builder()
     *             .name("DEMO_DB")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetDatabaseResult> getDatabase(GetDatabaseArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getDatabase:getDatabase", TypeShape.of(GetDatabaseResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetDatabaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SnowflakeFunctions.getDatabase(GetDatabaseArgs.builder()
     *             .name("DEMO_DB")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetDatabaseResult> getDatabasePlain(GetDatabasePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getDatabase:getDatabase", TypeShape.of(GetDatabaseResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetDatabaseRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dbRole = SnowflakeFunctions.getDatabaseRole(GetDatabaseRoleArgs.builder()
     *             .database("MYDB")
     *             .name("DBROLE")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetDatabaseRoleResult> getDatabaseRole(GetDatabaseRoleArgs args) {
        return getDatabaseRole(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetDatabaseRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dbRole = SnowflakeFunctions.getDatabaseRole(GetDatabaseRoleArgs.builder()
     *             .database("MYDB")
     *             .name("DBROLE")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetDatabaseRoleResult> getDatabaseRolePlain(GetDatabaseRolePlainArgs args) {
        return getDatabaseRolePlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetDatabaseRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dbRole = SnowflakeFunctions.getDatabaseRole(GetDatabaseRoleArgs.builder()
     *             .database("MYDB")
     *             .name("DBROLE")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetDatabaseRoleResult> getDatabaseRole(GetDatabaseRoleArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getDatabaseRole:getDatabaseRole", TypeShape.of(GetDatabaseRoleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetDatabaseRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dbRole = SnowflakeFunctions.getDatabaseRole(GetDatabaseRoleArgs.builder()
     *             .database("MYDB")
     *             .name("DBROLE")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetDatabaseRoleResult> getDatabaseRole(GetDatabaseRoleArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getDatabaseRole:getDatabaseRole", TypeShape.of(GetDatabaseRoleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetDatabaseRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dbRole = SnowflakeFunctions.getDatabaseRole(GetDatabaseRoleArgs.builder()
     *             .database("MYDB")
     *             .name("DBROLE")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetDatabaseRoleResult> getDatabaseRolePlain(GetDatabaseRolePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getDatabaseRole:getDatabaseRole", TypeShape.of(GetDatabaseRoleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered database roles. Filtering is aligned with the current possibilities for [SHOW DATABASE ROLES](https://docs.snowflake.com/en/sql-reference/sql/show-database-roles) query (`like` and `limit` are supported). The results of SHOW is encapsulated in show_output collection.
     * 
     */
    public static Output<GetDatabaseRolesResult> getDatabaseRoles(GetDatabaseRolesArgs args) {
        return getDatabaseRoles(args, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered database roles. Filtering is aligned with the current possibilities for [SHOW DATABASE ROLES](https://docs.snowflake.com/en/sql-reference/sql/show-database-roles) query (`like` and `limit` are supported). The results of SHOW is encapsulated in show_output collection.
     * 
     */
    public static CompletableFuture<GetDatabaseRolesResult> getDatabaseRolesPlain(GetDatabaseRolesPlainArgs args) {
        return getDatabaseRolesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered database roles. Filtering is aligned with the current possibilities for [SHOW DATABASE ROLES](https://docs.snowflake.com/en/sql-reference/sql/show-database-roles) query (`like` and `limit` are supported). The results of SHOW is encapsulated in show_output collection.
     * 
     */
    public static Output<GetDatabaseRolesResult> getDatabaseRoles(GetDatabaseRolesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getDatabaseRoles:getDatabaseRoles", TypeShape.of(GetDatabaseRolesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered database roles. Filtering is aligned with the current possibilities for [SHOW DATABASE ROLES](https://docs.snowflake.com/en/sql-reference/sql/show-database-roles) query (`like` and `limit` are supported). The results of SHOW is encapsulated in show_output collection.
     * 
     */
    public static Output<GetDatabaseRolesResult> getDatabaseRoles(GetDatabaseRolesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getDatabaseRoles:getDatabaseRoles", TypeShape.of(GetDatabaseRolesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered database roles. Filtering is aligned with the current possibilities for [SHOW DATABASE ROLES](https://docs.snowflake.com/en/sql-reference/sql/show-database-roles) query (`like` and `limit` are supported). The results of SHOW is encapsulated in show_output collection.
     * 
     */
    public static CompletableFuture<GetDatabaseRolesResult> getDatabaseRolesPlain(GetDatabaseRolesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getDatabaseRoles:getDatabaseRoles", TypeShape.of(GetDatabaseRolesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered databases. Filtering is aligned with the current possibilities for [SHOW DATABASES](https://docs.snowflake.com/en/sql-reference/sql/show-databases) query (`like`, `starts_with`, and `limit` are all supported). The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.
     * 
     */
    public static Output<GetDatabasesResult> getDatabases() {
        return getDatabases(GetDatabasesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered databases. Filtering is aligned with the current possibilities for [SHOW DATABASES](https://docs.snowflake.com/en/sql-reference/sql/show-databases) query (`like`, `starts_with`, and `limit` are all supported). The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.
     * 
     */
    public static CompletableFuture<GetDatabasesResult> getDatabasesPlain() {
        return getDatabasesPlain(GetDatabasesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered databases. Filtering is aligned with the current possibilities for [SHOW DATABASES](https://docs.snowflake.com/en/sql-reference/sql/show-databases) query (`like`, `starts_with`, and `limit` are all supported). The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.
     * 
     */
    public static Output<GetDatabasesResult> getDatabases(GetDatabasesArgs args) {
        return getDatabases(args, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered databases. Filtering is aligned with the current possibilities for [SHOW DATABASES](https://docs.snowflake.com/en/sql-reference/sql/show-databases) query (`like`, `starts_with`, and `limit` are all supported). The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.
     * 
     */
    public static CompletableFuture<GetDatabasesResult> getDatabasesPlain(GetDatabasesPlainArgs args) {
        return getDatabasesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered databases. Filtering is aligned with the current possibilities for [SHOW DATABASES](https://docs.snowflake.com/en/sql-reference/sql/show-databases) query (`like`, `starts_with`, and `limit` are all supported). The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.
     * 
     */
    public static Output<GetDatabasesResult> getDatabases(GetDatabasesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getDatabases:getDatabases", TypeShape.of(GetDatabasesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered databases. Filtering is aligned with the current possibilities for [SHOW DATABASES](https://docs.snowflake.com/en/sql-reference/sql/show-databases) query (`like`, `starts_with`, and `limit` are all supported). The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.
     * 
     */
    public static Output<GetDatabasesResult> getDatabases(GetDatabasesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getDatabases:getDatabases", TypeShape.of(GetDatabasesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered databases. Filtering is aligned with the current possibilities for [SHOW DATABASES](https://docs.snowflake.com/en/sql-reference/sql/show-databases) query (`like`, `starts_with`, and `limit` are all supported). The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.
     * 
     */
    public static CompletableFuture<GetDatabasesResult> getDatabasesPlain(GetDatabasesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getDatabases:getDatabases", TypeShape.of(GetDatabasesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetDynamicTablesResult> getDynamicTables() {
        return getDynamicTables(GetDynamicTablesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetDynamicTablesResult> getDynamicTablesPlain() {
        return getDynamicTablesPlain(GetDynamicTablesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetDynamicTablesResult> getDynamicTables(GetDynamicTablesArgs args) {
        return getDynamicTables(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetDynamicTablesResult> getDynamicTablesPlain(GetDynamicTablesPlainArgs args) {
        return getDynamicTablesPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetDynamicTablesResult> getDynamicTables(GetDynamicTablesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getDynamicTables:getDynamicTables", TypeShape.of(GetDynamicTablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetDynamicTablesResult> getDynamicTables(GetDynamicTablesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getDynamicTables:getDynamicTables", TypeShape.of(GetDynamicTablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetDynamicTablesResult> getDynamicTablesPlain(GetDynamicTablesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getDynamicTables:getDynamicTables", TypeShape.of(GetDynamicTablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetExternalFunctionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getExternalFunctions(GetExternalFunctionsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetExternalFunctionsResult> getExternalFunctions() {
        return getExternalFunctions(GetExternalFunctionsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetExternalFunctionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getExternalFunctions(GetExternalFunctionsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetExternalFunctionsResult> getExternalFunctionsPlain() {
        return getExternalFunctionsPlain(GetExternalFunctionsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetExternalFunctionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getExternalFunctions(GetExternalFunctionsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetExternalFunctionsResult> getExternalFunctions(GetExternalFunctionsArgs args) {
        return getExternalFunctions(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetExternalFunctionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getExternalFunctions(GetExternalFunctionsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetExternalFunctionsResult> getExternalFunctionsPlain(GetExternalFunctionsPlainArgs args) {
        return getExternalFunctionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetExternalFunctionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getExternalFunctions(GetExternalFunctionsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetExternalFunctionsResult> getExternalFunctions(GetExternalFunctionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getExternalFunctions:getExternalFunctions", TypeShape.of(GetExternalFunctionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetExternalFunctionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getExternalFunctions(GetExternalFunctionsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetExternalFunctionsResult> getExternalFunctions(GetExternalFunctionsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getExternalFunctions:getExternalFunctions", TypeShape.of(GetExternalFunctionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetExternalFunctionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getExternalFunctions(GetExternalFunctionsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetExternalFunctionsResult> getExternalFunctionsPlain(GetExternalFunctionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getExternalFunctions:getExternalFunctions", TypeShape.of(GetExternalFunctionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetExternalTablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getExternalTables(GetExternalTablesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetExternalTablesResult> getExternalTables(GetExternalTablesArgs args) {
        return getExternalTables(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetExternalTablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getExternalTables(GetExternalTablesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetExternalTablesResult> getExternalTablesPlain(GetExternalTablesPlainArgs args) {
        return getExternalTablesPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetExternalTablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getExternalTables(GetExternalTablesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetExternalTablesResult> getExternalTables(GetExternalTablesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getExternalTables:getExternalTables", TypeShape.of(GetExternalTablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetExternalTablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getExternalTables(GetExternalTablesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetExternalTablesResult> getExternalTables(GetExternalTablesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getExternalTables:getExternalTables", TypeShape.of(GetExternalTablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetExternalTablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getExternalTables(GetExternalTablesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetExternalTablesResult> getExternalTablesPlain(GetExternalTablesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getExternalTables:getExternalTables", TypeShape.of(GetExternalTablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetFailoverGroupsResult> getFailoverGroups() {
        return getFailoverGroups(GetFailoverGroupsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetFailoverGroupsResult> getFailoverGroupsPlain() {
        return getFailoverGroupsPlain(GetFailoverGroupsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetFailoverGroupsResult> getFailoverGroups(GetFailoverGroupsArgs args) {
        return getFailoverGroups(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetFailoverGroupsResult> getFailoverGroupsPlain(GetFailoverGroupsPlainArgs args) {
        return getFailoverGroupsPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetFailoverGroupsResult> getFailoverGroups(GetFailoverGroupsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getFailoverGroups:getFailoverGroups", TypeShape.of(GetFailoverGroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetFailoverGroupsResult> getFailoverGroups(GetFailoverGroupsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getFailoverGroups:getFailoverGroups", TypeShape.of(GetFailoverGroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetFailoverGroupsResult> getFailoverGroupsPlain(GetFailoverGroupsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getFailoverGroups:getFailoverGroups", TypeShape.of(GetFailoverGroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetFileFormatsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getFileFormats(GetFileFormatsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetFileFormatsResult> getFileFormats(GetFileFormatsArgs args) {
        return getFileFormats(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetFileFormatsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getFileFormats(GetFileFormatsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetFileFormatsResult> getFileFormatsPlain(GetFileFormatsPlainArgs args) {
        return getFileFormatsPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetFileFormatsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getFileFormats(GetFileFormatsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetFileFormatsResult> getFileFormats(GetFileFormatsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getFileFormats:getFileFormats", TypeShape.of(GetFileFormatsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetFileFormatsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getFileFormats(GetFileFormatsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetFileFormatsResult> getFileFormats(GetFileFormatsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getFileFormats:getFileFormats", TypeShape.of(GetFileFormatsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetFileFormatsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getFileFormats(GetFileFormatsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetFileFormatsResult> getFileFormatsPlain(GetFileFormatsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getFileFormats:getFileFormats", TypeShape.of(GetFileFormatsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetFunctionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getFunctions(GetFunctionsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetFunctionsResult> getFunctions(GetFunctionsArgs args) {
        return getFunctions(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetFunctionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getFunctions(GetFunctionsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetFunctionsResult> getFunctionsPlain(GetFunctionsPlainArgs args) {
        return getFunctionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetFunctionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getFunctions(GetFunctionsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetFunctionsResult> getFunctions(GetFunctionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getFunctions:getFunctions", TypeShape.of(GetFunctionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetFunctionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getFunctions(GetFunctionsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetFunctionsResult> getFunctions(GetFunctionsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getFunctions:getFunctions", TypeShape.of(GetFunctionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetFunctionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getFunctions(GetFunctionsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetFunctionsResult> getFunctionsPlain(GetFunctionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getFunctions:getFunctions", TypeShape.of(GetFunctionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetGrantsArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsOnArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsToArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsToShareArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsOfArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsFutureGrantsInArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsFutureGrantsToArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         //#################################
     *         //## SHOW GRANTS ON ...
     *         //#################################
     *         // account
     *         final var exampleOnAccount = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .account(true)
     *                 .build())
     *             .build());
     * 
     *         // account object (e.g. database)
     *         final var exampleOnAccountObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .objectName("some_database")
     *                 .objectType("DATABASE")
     *                 .build())
     *             .build());
     * 
     *         // database object (e.g. schema)
     *         final var exampleOnDatabaseObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .objectName("\"some_database\".\"some_schema\"")
     *                 .objectType("SCHEMA")
     *                 .build())
     *             .build());
     * 
     *         // schema object (e.g. table)
     *         final var exampleOnSchemaObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .objectName("\"some_database\".\"some_schema\".\"some_table\"")
     *                 .objectType("TABLE")
     *                 .build())
     *             .build());
     * 
     *         // application
     *         final var exampleToApplication = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .application("some_application")
     *                 .build())
     *             .build());
     * 
     *         // application role
     *         final var exampleToApplicationRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .applicationRole("\"some_application\".\"some_application_role\"")
     *                 .build())
     *             .build());
     * 
     *         // account role
     *         final var exampleToRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .accountRole("some_role")
     *                 .build())
     *             .build());
     * 
     *         // database role
     *         final var exampleToDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .databaseRole("\"some_database\".\"some_database_role\"")
     *                 .build())
     *             .build());
     * 
     *         // share
     *         final var exampleToShare = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .share(GetGrantsGrantsToShareArgs.builder()
     *                     .shareName("some_share")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         // user
     *         final var exampleToUser = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .user("some_user")
     *                 .build())
     *             .build());
     * 
     *         // application role
     *         final var exampleOfApplicationRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .applicationRole("\"some_application\".\"some_application_role\"")
     *                 .build())
     *             .build());
     * 
     *         // database role
     *         final var exampleOfDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .databaseRole("\"some_database\".\"some_database_role\"")
     *                 .build())
     *             .build());
     * 
     *         // account role
     *         final var exampleOfRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .accountRole("some_role")
     *                 .build())
     *             .build());
     * 
     *         // share
     *         final var exampleOfShare = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .share("some_share")
     *                 .build())
     *             .build());
     * 
     *         // database
     *         final var exampleFutureInDatabase = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsIn(GetGrantsFutureGrantsInArgs.builder()
     *                 .database("some_database")
     *                 .build())
     *             .build());
     * 
     *         // schema
     *         final var exampleFutureInSchema = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsIn(GetGrantsFutureGrantsInArgs.builder()
     *                 .schema("\"some_database\".\"some_schema\"")
     *                 .build())
     *             .build());
     * 
     *         // account role
     *         final var exampleFutureToRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsTo(GetGrantsFutureGrantsToArgs.builder()
     *                 .accountRole("some_role")
     *                 .build())
     *             .build());
     * 
     *         // database role
     *         final var exampleFutureToDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsTo(GetGrantsFutureGrantsToArgs.builder()
     *                 .databaseRole("\"some_database\".\"some_database_role\"")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetGrantsResult> getGrants() {
        return getGrants(GetGrantsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetGrantsArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsOnArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsToArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsToShareArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsOfArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsFutureGrantsInArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsFutureGrantsToArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         //#################################
     *         //## SHOW GRANTS ON ...
     *         //#################################
     *         // account
     *         final var exampleOnAccount = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .account(true)
     *                 .build())
     *             .build());
     * 
     *         // account object (e.g. database)
     *         final var exampleOnAccountObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .objectName("some_database")
     *                 .objectType("DATABASE")
     *                 .build())
     *             .build());
     * 
     *         // database object (e.g. schema)
     *         final var exampleOnDatabaseObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .objectName("\"some_database\".\"some_schema\"")
     *                 .objectType("SCHEMA")
     *                 .build())
     *             .build());
     * 
     *         // schema object (e.g. table)
     *         final var exampleOnSchemaObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .objectName("\"some_database\".\"some_schema\".\"some_table\"")
     *                 .objectType("TABLE")
     *                 .build())
     *             .build());
     * 
     *         // application
     *         final var exampleToApplication = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .application("some_application")
     *                 .build())
     *             .build());
     * 
     *         // application role
     *         final var exampleToApplicationRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .applicationRole("\"some_application\".\"some_application_role\"")
     *                 .build())
     *             .build());
     * 
     *         // account role
     *         final var exampleToRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .accountRole("some_role")
     *                 .build())
     *             .build());
     * 
     *         // database role
     *         final var exampleToDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .databaseRole("\"some_database\".\"some_database_role\"")
     *                 .build())
     *             .build());
     * 
     *         // share
     *         final var exampleToShare = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .share(GetGrantsGrantsToShareArgs.builder()
     *                     .shareName("some_share")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         // user
     *         final var exampleToUser = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .user("some_user")
     *                 .build())
     *             .build());
     * 
     *         // application role
     *         final var exampleOfApplicationRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .applicationRole("\"some_application\".\"some_application_role\"")
     *                 .build())
     *             .build());
     * 
     *         // database role
     *         final var exampleOfDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .databaseRole("\"some_database\".\"some_database_role\"")
     *                 .build())
     *             .build());
     * 
     *         // account role
     *         final var exampleOfRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .accountRole("some_role")
     *                 .build())
     *             .build());
     * 
     *         // share
     *         final var exampleOfShare = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .share("some_share")
     *                 .build())
     *             .build());
     * 
     *         // database
     *         final var exampleFutureInDatabase = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsIn(GetGrantsFutureGrantsInArgs.builder()
     *                 .database("some_database")
     *                 .build())
     *             .build());
     * 
     *         // schema
     *         final var exampleFutureInSchema = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsIn(GetGrantsFutureGrantsInArgs.builder()
     *                 .schema("\"some_database\".\"some_schema\"")
     *                 .build())
     *             .build());
     * 
     *         // account role
     *         final var exampleFutureToRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsTo(GetGrantsFutureGrantsToArgs.builder()
     *                 .accountRole("some_role")
     *                 .build())
     *             .build());
     * 
     *         // database role
     *         final var exampleFutureToDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsTo(GetGrantsFutureGrantsToArgs.builder()
     *                 .databaseRole("\"some_database\".\"some_database_role\"")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetGrantsResult> getGrantsPlain() {
        return getGrantsPlain(GetGrantsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetGrantsArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsOnArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsToArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsToShareArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsOfArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsFutureGrantsInArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsFutureGrantsToArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         //#################################
     *         //## SHOW GRANTS ON ...
     *         //#################################
     *         // account
     *         final var exampleOnAccount = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .account(true)
     *                 .build())
     *             .build());
     * 
     *         // account object (e.g. database)
     *         final var exampleOnAccountObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .objectName("some_database")
     *                 .objectType("DATABASE")
     *                 .build())
     *             .build());
     * 
     *         // database object (e.g. schema)
     *         final var exampleOnDatabaseObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .objectName("\"some_database\".\"some_schema\"")
     *                 .objectType("SCHEMA")
     *                 .build())
     *             .build());
     * 
     *         // schema object (e.g. table)
     *         final var exampleOnSchemaObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .objectName("\"some_database\".\"some_schema\".\"some_table\"")
     *                 .objectType("TABLE")
     *                 .build())
     *             .build());
     * 
     *         // application
     *         final var exampleToApplication = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .application("some_application")
     *                 .build())
     *             .build());
     * 
     *         // application role
     *         final var exampleToApplicationRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .applicationRole("\"some_application\".\"some_application_role\"")
     *                 .build())
     *             .build());
     * 
     *         // account role
     *         final var exampleToRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .accountRole("some_role")
     *                 .build())
     *             .build());
     * 
     *         // database role
     *         final var exampleToDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .databaseRole("\"some_database\".\"some_database_role\"")
     *                 .build())
     *             .build());
     * 
     *         // share
     *         final var exampleToShare = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .share(GetGrantsGrantsToShareArgs.builder()
     *                     .shareName("some_share")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         // user
     *         final var exampleToUser = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .user("some_user")
     *                 .build())
     *             .build());
     * 
     *         // application role
     *         final var exampleOfApplicationRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .applicationRole("\"some_application\".\"some_application_role\"")
     *                 .build())
     *             .build());
     * 
     *         // database role
     *         final var exampleOfDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .databaseRole("\"some_database\".\"some_database_role\"")
     *                 .build())
     *             .build());
     * 
     *         // account role
     *         final var exampleOfRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .accountRole("some_role")
     *                 .build())
     *             .build());
     * 
     *         // share
     *         final var exampleOfShare = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .share("some_share")
     *                 .build())
     *             .build());
     * 
     *         // database
     *         final var exampleFutureInDatabase = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsIn(GetGrantsFutureGrantsInArgs.builder()
     *                 .database("some_database")
     *                 .build())
     *             .build());
     * 
     *         // schema
     *         final var exampleFutureInSchema = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsIn(GetGrantsFutureGrantsInArgs.builder()
     *                 .schema("\"some_database\".\"some_schema\"")
     *                 .build())
     *             .build());
     * 
     *         // account role
     *         final var exampleFutureToRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsTo(GetGrantsFutureGrantsToArgs.builder()
     *                 .accountRole("some_role")
     *                 .build())
     *             .build());
     * 
     *         // database role
     *         final var exampleFutureToDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsTo(GetGrantsFutureGrantsToArgs.builder()
     *                 .databaseRole("\"some_database\".\"some_database_role\"")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetGrantsResult> getGrants(GetGrantsArgs args) {
        return getGrants(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetGrantsArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsOnArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsToArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsToShareArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsOfArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsFutureGrantsInArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsFutureGrantsToArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         //#################################
     *         //## SHOW GRANTS ON ...
     *         //#################################
     *         // account
     *         final var exampleOnAccount = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .account(true)
     *                 .build())
     *             .build());
     * 
     *         // account object (e.g. database)
     *         final var exampleOnAccountObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .objectName("some_database")
     *                 .objectType("DATABASE")
     *                 .build())
     *             .build());
     * 
     *         // database object (e.g. schema)
     *         final var exampleOnDatabaseObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .objectName("\"some_database\".\"some_schema\"")
     *                 .objectType("SCHEMA")
     *                 .build())
     *             .build());
     * 
     *         // schema object (e.g. table)
     *         final var exampleOnSchemaObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .objectName("\"some_database\".\"some_schema\".\"some_table\"")
     *                 .objectType("TABLE")
     *                 .build())
     *             .build());
     * 
     *         // application
     *         final var exampleToApplication = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .application("some_application")
     *                 .build())
     *             .build());
     * 
     *         // application role
     *         final var exampleToApplicationRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .applicationRole("\"some_application\".\"some_application_role\"")
     *                 .build())
     *             .build());
     * 
     *         // account role
     *         final var exampleToRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .accountRole("some_role")
     *                 .build())
     *             .build());
     * 
     *         // database role
     *         final var exampleToDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .databaseRole("\"some_database\".\"some_database_role\"")
     *                 .build())
     *             .build());
     * 
     *         // share
     *         final var exampleToShare = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .share(GetGrantsGrantsToShareArgs.builder()
     *                     .shareName("some_share")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         // user
     *         final var exampleToUser = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .user("some_user")
     *                 .build())
     *             .build());
     * 
     *         // application role
     *         final var exampleOfApplicationRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .applicationRole("\"some_application\".\"some_application_role\"")
     *                 .build())
     *             .build());
     * 
     *         // database role
     *         final var exampleOfDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .databaseRole("\"some_database\".\"some_database_role\"")
     *                 .build())
     *             .build());
     * 
     *         // account role
     *         final var exampleOfRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .accountRole("some_role")
     *                 .build())
     *             .build());
     * 
     *         // share
     *         final var exampleOfShare = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .share("some_share")
     *                 .build())
     *             .build());
     * 
     *         // database
     *         final var exampleFutureInDatabase = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsIn(GetGrantsFutureGrantsInArgs.builder()
     *                 .database("some_database")
     *                 .build())
     *             .build());
     * 
     *         // schema
     *         final var exampleFutureInSchema = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsIn(GetGrantsFutureGrantsInArgs.builder()
     *                 .schema("\"some_database\".\"some_schema\"")
     *                 .build())
     *             .build());
     * 
     *         // account role
     *         final var exampleFutureToRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsTo(GetGrantsFutureGrantsToArgs.builder()
     *                 .accountRole("some_role")
     *                 .build())
     *             .build());
     * 
     *         // database role
     *         final var exampleFutureToDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsTo(GetGrantsFutureGrantsToArgs.builder()
     *                 .databaseRole("\"some_database\".\"some_database_role\"")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetGrantsResult> getGrantsPlain(GetGrantsPlainArgs args) {
        return getGrantsPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetGrantsArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsOnArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsToArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsToShareArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsOfArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsFutureGrantsInArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsFutureGrantsToArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         //#################################
     *         //## SHOW GRANTS ON ...
     *         //#################################
     *         // account
     *         final var exampleOnAccount = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .account(true)
     *                 .build())
     *             .build());
     * 
     *         // account object (e.g. database)
     *         final var exampleOnAccountObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .objectName("some_database")
     *                 .objectType("DATABASE")
     *                 .build())
     *             .build());
     * 
     *         // database object (e.g. schema)
     *         final var exampleOnDatabaseObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .objectName("\"some_database\".\"some_schema\"")
     *                 .objectType("SCHEMA")
     *                 .build())
     *             .build());
     * 
     *         // schema object (e.g. table)
     *         final var exampleOnSchemaObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .objectName("\"some_database\".\"some_schema\".\"some_table\"")
     *                 .objectType("TABLE")
     *                 .build())
     *             .build());
     * 
     *         // application
     *         final var exampleToApplication = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .application("some_application")
     *                 .build())
     *             .build());
     * 
     *         // application role
     *         final var exampleToApplicationRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .applicationRole("\"some_application\".\"some_application_role\"")
     *                 .build())
     *             .build());
     * 
     *         // account role
     *         final var exampleToRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .accountRole("some_role")
     *                 .build())
     *             .build());
     * 
     *         // database role
     *         final var exampleToDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .databaseRole("\"some_database\".\"some_database_role\"")
     *                 .build())
     *             .build());
     * 
     *         // share
     *         final var exampleToShare = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .share(GetGrantsGrantsToShareArgs.builder()
     *                     .shareName("some_share")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         // user
     *         final var exampleToUser = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .user("some_user")
     *                 .build())
     *             .build());
     * 
     *         // application role
     *         final var exampleOfApplicationRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .applicationRole("\"some_application\".\"some_application_role\"")
     *                 .build())
     *             .build());
     * 
     *         // database role
     *         final var exampleOfDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .databaseRole("\"some_database\".\"some_database_role\"")
     *                 .build())
     *             .build());
     * 
     *         // account role
     *         final var exampleOfRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .accountRole("some_role")
     *                 .build())
     *             .build());
     * 
     *         // share
     *         final var exampleOfShare = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .share("some_share")
     *                 .build())
     *             .build());
     * 
     *         // database
     *         final var exampleFutureInDatabase = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsIn(GetGrantsFutureGrantsInArgs.builder()
     *                 .database("some_database")
     *                 .build())
     *             .build());
     * 
     *         // schema
     *         final var exampleFutureInSchema = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsIn(GetGrantsFutureGrantsInArgs.builder()
     *                 .schema("\"some_database\".\"some_schema\"")
     *                 .build())
     *             .build());
     * 
     *         // account role
     *         final var exampleFutureToRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsTo(GetGrantsFutureGrantsToArgs.builder()
     *                 .accountRole("some_role")
     *                 .build())
     *             .build());
     * 
     *         // database role
     *         final var exampleFutureToDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsTo(GetGrantsFutureGrantsToArgs.builder()
     *                 .databaseRole("\"some_database\".\"some_database_role\"")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetGrantsResult> getGrants(GetGrantsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getGrants:getGrants", TypeShape.of(GetGrantsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetGrantsArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsOnArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsToArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsToShareArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsOfArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsFutureGrantsInArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsFutureGrantsToArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         //#################################
     *         //## SHOW GRANTS ON ...
     *         //#################################
     *         // account
     *         final var exampleOnAccount = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .account(true)
     *                 .build())
     *             .build());
     * 
     *         // account object (e.g. database)
     *         final var exampleOnAccountObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .objectName("some_database")
     *                 .objectType("DATABASE")
     *                 .build())
     *             .build());
     * 
     *         // database object (e.g. schema)
     *         final var exampleOnDatabaseObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .objectName("\"some_database\".\"some_schema\"")
     *                 .objectType("SCHEMA")
     *                 .build())
     *             .build());
     * 
     *         // schema object (e.g. table)
     *         final var exampleOnSchemaObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .objectName("\"some_database\".\"some_schema\".\"some_table\"")
     *                 .objectType("TABLE")
     *                 .build())
     *             .build());
     * 
     *         // application
     *         final var exampleToApplication = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .application("some_application")
     *                 .build())
     *             .build());
     * 
     *         // application role
     *         final var exampleToApplicationRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .applicationRole("\"some_application\".\"some_application_role\"")
     *                 .build())
     *             .build());
     * 
     *         // account role
     *         final var exampleToRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .accountRole("some_role")
     *                 .build())
     *             .build());
     * 
     *         // database role
     *         final var exampleToDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .databaseRole("\"some_database\".\"some_database_role\"")
     *                 .build())
     *             .build());
     * 
     *         // share
     *         final var exampleToShare = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .share(GetGrantsGrantsToShareArgs.builder()
     *                     .shareName("some_share")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         // user
     *         final var exampleToUser = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .user("some_user")
     *                 .build())
     *             .build());
     * 
     *         // application role
     *         final var exampleOfApplicationRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .applicationRole("\"some_application\".\"some_application_role\"")
     *                 .build())
     *             .build());
     * 
     *         // database role
     *         final var exampleOfDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .databaseRole("\"some_database\".\"some_database_role\"")
     *                 .build())
     *             .build());
     * 
     *         // account role
     *         final var exampleOfRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .accountRole("some_role")
     *                 .build())
     *             .build());
     * 
     *         // share
     *         final var exampleOfShare = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .share("some_share")
     *                 .build())
     *             .build());
     * 
     *         // database
     *         final var exampleFutureInDatabase = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsIn(GetGrantsFutureGrantsInArgs.builder()
     *                 .database("some_database")
     *                 .build())
     *             .build());
     * 
     *         // schema
     *         final var exampleFutureInSchema = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsIn(GetGrantsFutureGrantsInArgs.builder()
     *                 .schema("\"some_database\".\"some_schema\"")
     *                 .build())
     *             .build());
     * 
     *         // account role
     *         final var exampleFutureToRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsTo(GetGrantsFutureGrantsToArgs.builder()
     *                 .accountRole("some_role")
     *                 .build())
     *             .build());
     * 
     *         // database role
     *         final var exampleFutureToDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsTo(GetGrantsFutureGrantsToArgs.builder()
     *                 .databaseRole("\"some_database\".\"some_database_role\"")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetGrantsResult> getGrants(GetGrantsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getGrants:getGrants", TypeShape.of(GetGrantsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetGrantsArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsOnArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsToArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsToShareArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsGrantsOfArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsFutureGrantsInArgs;
     * import com.pulumi.snowflake.inputs.GetGrantsFutureGrantsToArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         //#################################
     *         //## SHOW GRANTS ON ...
     *         //#################################
     *         // account
     *         final var exampleOnAccount = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .account(true)
     *                 .build())
     *             .build());
     * 
     *         // account object (e.g. database)
     *         final var exampleOnAccountObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .objectName("some_database")
     *                 .objectType("DATABASE")
     *                 .build())
     *             .build());
     * 
     *         // database object (e.g. schema)
     *         final var exampleOnDatabaseObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .objectName("\"some_database\".\"some_schema\"")
     *                 .objectType("SCHEMA")
     *                 .build())
     *             .build());
     * 
     *         // schema object (e.g. table)
     *         final var exampleOnSchemaObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOn(GetGrantsGrantsOnArgs.builder()
     *                 .objectName("\"some_database\".\"some_schema\".\"some_table\"")
     *                 .objectType("TABLE")
     *                 .build())
     *             .build());
     * 
     *         // application
     *         final var exampleToApplication = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .application("some_application")
     *                 .build())
     *             .build());
     * 
     *         // application role
     *         final var exampleToApplicationRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .applicationRole("\"some_application\".\"some_application_role\"")
     *                 .build())
     *             .build());
     * 
     *         // account role
     *         final var exampleToRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .accountRole("some_role")
     *                 .build())
     *             .build());
     * 
     *         // database role
     *         final var exampleToDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .databaseRole("\"some_database\".\"some_database_role\"")
     *                 .build())
     *             .build());
     * 
     *         // share
     *         final var exampleToShare = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .share(GetGrantsGrantsToShareArgs.builder()
     *                     .shareName("some_share")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         // user
     *         final var exampleToUser = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsTo(GetGrantsGrantsToArgs.builder()
     *                 .user("some_user")
     *                 .build())
     *             .build());
     * 
     *         // application role
     *         final var exampleOfApplicationRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .applicationRole("\"some_application\".\"some_application_role\"")
     *                 .build())
     *             .build());
     * 
     *         // database role
     *         final var exampleOfDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .databaseRole("\"some_database\".\"some_database_role\"")
     *                 .build())
     *             .build());
     * 
     *         // account role
     *         final var exampleOfRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .accountRole("some_role")
     *                 .build())
     *             .build());
     * 
     *         // share
     *         final var exampleOfShare = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .grantsOf(GetGrantsGrantsOfArgs.builder()
     *                 .share("some_share")
     *                 .build())
     *             .build());
     * 
     *         // database
     *         final var exampleFutureInDatabase = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsIn(GetGrantsFutureGrantsInArgs.builder()
     *                 .database("some_database")
     *                 .build())
     *             .build());
     * 
     *         // schema
     *         final var exampleFutureInSchema = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsIn(GetGrantsFutureGrantsInArgs.builder()
     *                 .schema("\"some_database\".\"some_schema\"")
     *                 .build())
     *             .build());
     * 
     *         // account role
     *         final var exampleFutureToRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsTo(GetGrantsFutureGrantsToArgs.builder()
     *                 .accountRole("some_role")
     *                 .build())
     *             .build());
     * 
     *         // database role
     *         final var exampleFutureToDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()
     *             .futureGrantsTo(GetGrantsFutureGrantsToArgs.builder()
     *                 .databaseRole("\"some_database\".\"some_database_role\"")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetGrantsResult> getGrantsPlain(GetGrantsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getGrants:getGrants", TypeShape.of(GetGrantsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Sensitive values** This data source&#39;s `describe_output.body` field is not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. If you use one of these fields, they may be present in logs, so ensure that the provider logs are properly restricted. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered masking policies. Filtering is aligned with the current possibilities for [SHOW MASKING POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-masking-policies) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `masking_policies`.
     * 
     */
    public static Output<GetMaskingPoliciesResult> getMaskingPolicies() {
        return getMaskingPolicies(GetMaskingPoliciesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Sensitive values** This data source&#39;s `describe_output.body` field is not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. If you use one of these fields, they may be present in logs, so ensure that the provider logs are properly restricted. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered masking policies. Filtering is aligned with the current possibilities for [SHOW MASKING POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-masking-policies) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `masking_policies`.
     * 
     */
    public static CompletableFuture<GetMaskingPoliciesResult> getMaskingPoliciesPlain() {
        return getMaskingPoliciesPlain(GetMaskingPoliciesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Sensitive values** This data source&#39;s `describe_output.body` field is not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. If you use one of these fields, they may be present in logs, so ensure that the provider logs are properly restricted. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered masking policies. Filtering is aligned with the current possibilities for [SHOW MASKING POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-masking-policies) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `masking_policies`.
     * 
     */
    public static Output<GetMaskingPoliciesResult> getMaskingPolicies(GetMaskingPoliciesArgs args) {
        return getMaskingPolicies(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Sensitive values** This data source&#39;s `describe_output.body` field is not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. If you use one of these fields, they may be present in logs, so ensure that the provider logs are properly restricted. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered masking policies. Filtering is aligned with the current possibilities for [SHOW MASKING POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-masking-policies) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `masking_policies`.
     * 
     */
    public static CompletableFuture<GetMaskingPoliciesResult> getMaskingPoliciesPlain(GetMaskingPoliciesPlainArgs args) {
        return getMaskingPoliciesPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Sensitive values** This data source&#39;s `describe_output.body` field is not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. If you use one of these fields, they may be present in logs, so ensure that the provider logs are properly restricted. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered masking policies. Filtering is aligned with the current possibilities for [SHOW MASKING POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-masking-policies) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `masking_policies`.
     * 
     */
    public static Output<GetMaskingPoliciesResult> getMaskingPolicies(GetMaskingPoliciesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getMaskingPolicies:getMaskingPolicies", TypeShape.of(GetMaskingPoliciesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Sensitive values** This data source&#39;s `describe_output.body` field is not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. If you use one of these fields, they may be present in logs, so ensure that the provider logs are properly restricted. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered masking policies. Filtering is aligned with the current possibilities for [SHOW MASKING POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-masking-policies) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `masking_policies`.
     * 
     */
    public static Output<GetMaskingPoliciesResult> getMaskingPolicies(GetMaskingPoliciesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getMaskingPolicies:getMaskingPolicies", TypeShape.of(GetMaskingPoliciesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Sensitive values** This data source&#39;s `describe_output.body` field is not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. If you use one of these fields, they may be present in logs, so ensure that the provider logs are properly restricted. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered masking policies. Filtering is aligned with the current possibilities for [SHOW MASKING POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-masking-policies) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `masking_policies`.
     * 
     */
    public static CompletableFuture<GetMaskingPoliciesResult> getMaskingPoliciesPlain(GetMaskingPoliciesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getMaskingPolicies:getMaskingPolicies", TypeShape.of(GetMaskingPoliciesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetMaterializedViewsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getMaterializedViews(GetMaterializedViewsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetMaterializedViewsResult> getMaterializedViews(GetMaterializedViewsArgs args) {
        return getMaterializedViews(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetMaterializedViewsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getMaterializedViews(GetMaterializedViewsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetMaterializedViewsResult> getMaterializedViewsPlain(GetMaterializedViewsPlainArgs args) {
        return getMaterializedViewsPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetMaterializedViewsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getMaterializedViews(GetMaterializedViewsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetMaterializedViewsResult> getMaterializedViews(GetMaterializedViewsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getMaterializedViews:getMaterializedViews", TypeShape.of(GetMaterializedViewsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetMaterializedViewsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getMaterializedViews(GetMaterializedViewsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetMaterializedViewsResult> getMaterializedViews(GetMaterializedViewsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getMaterializedViews:getMaterializedViews", TypeShape.of(GetMaterializedViewsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetMaterializedViewsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getMaterializedViews(GetMaterializedViewsArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetMaterializedViewsResult> getMaterializedViewsPlain(GetMaterializedViewsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getMaterializedViews:getMaterializedViews", TypeShape.of(GetMaterializedViewsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered network policies. Filtering is aligned with the current possibilities for [SHOW NETWORK POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-network-policies) query (`like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection.
     * 
     */
    public static Output<GetNetworkPoliciesResult> getNetworkPolicies() {
        return getNetworkPolicies(GetNetworkPoliciesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered network policies. Filtering is aligned with the current possibilities for [SHOW NETWORK POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-network-policies) query (`like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection.
     * 
     */
    public static CompletableFuture<GetNetworkPoliciesResult> getNetworkPoliciesPlain() {
        return getNetworkPoliciesPlain(GetNetworkPoliciesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered network policies. Filtering is aligned with the current possibilities for [SHOW NETWORK POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-network-policies) query (`like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection.
     * 
     */
    public static Output<GetNetworkPoliciesResult> getNetworkPolicies(GetNetworkPoliciesArgs args) {
        return getNetworkPolicies(args, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered network policies. Filtering is aligned with the current possibilities for [SHOW NETWORK POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-network-policies) query (`like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection.
     * 
     */
    public static CompletableFuture<GetNetworkPoliciesResult> getNetworkPoliciesPlain(GetNetworkPoliciesPlainArgs args) {
        return getNetworkPoliciesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered network policies. Filtering is aligned with the current possibilities for [SHOW NETWORK POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-network-policies) query (`like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection.
     * 
     */
    public static Output<GetNetworkPoliciesResult> getNetworkPolicies(GetNetworkPoliciesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getNetworkPolicies:getNetworkPolicies", TypeShape.of(GetNetworkPoliciesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered network policies. Filtering is aligned with the current possibilities for [SHOW NETWORK POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-network-policies) query (`like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection.
     * 
     */
    public static Output<GetNetworkPoliciesResult> getNetworkPolicies(GetNetworkPoliciesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getNetworkPolicies:getNetworkPolicies", TypeShape.of(GetNetworkPoliciesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered network policies. Filtering is aligned with the current possibilities for [SHOW NETWORK POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-network-policies) query (`like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection.
     * 
     */
    public static CompletableFuture<GetNetworkPoliciesResult> getNetworkPoliciesPlain(GetNetworkPoliciesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getNetworkPolicies:getNetworkPolicies", TypeShape.of(GetNetworkPoliciesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.Database;
     * import com.pulumi.snowflake.DatabaseArgs;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetParametersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var d = new Database("d", DatabaseArgs.builder()
     *             .name("TEST_DB")
     *             .build());
     * 
     *         // read all object parameters in database TEST_DB
     *         final var p = SnowflakeFunctions.getParameters(GetParametersArgs.builder()
     *             .parameterType("OBJECT")
     *             .objectType("DATABASE")
     *             .objectName(d.name())
     *             .build());
     * 
     *         // read all account parameters with the pattern '%TIMESTAMP%'
     *         final var p2 = SnowflakeFunctions.getParameters(GetParametersArgs.builder()
     *             .parameterType("ACCOUNT")
     *             .pattern("%TIMESTAMP%")
     *             .build());
     * 
     *         // read the exact session parameter ROWS_PER_RESULTSET
     *         final var p3 = SnowflakeFunctions.getParameters(GetParametersArgs.builder()
     *             .parameterType("SESSION")
     *             .pattern("ROWS_PER_RESULTSET")
     *             .user("TEST_USER")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetParametersResult> getParameters() {
        return getParameters(GetParametersArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.Database;
     * import com.pulumi.snowflake.DatabaseArgs;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetParametersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var d = new Database("d", DatabaseArgs.builder()
     *             .name("TEST_DB")
     *             .build());
     * 
     *         // read all object parameters in database TEST_DB
     *         final var p = SnowflakeFunctions.getParameters(GetParametersArgs.builder()
     *             .parameterType("OBJECT")
     *             .objectType("DATABASE")
     *             .objectName(d.name())
     *             .build());
     * 
     *         // read all account parameters with the pattern '%TIMESTAMP%'
     *         final var p2 = SnowflakeFunctions.getParameters(GetParametersArgs.builder()
     *             .parameterType("ACCOUNT")
     *             .pattern("%TIMESTAMP%")
     *             .build());
     * 
     *         // read the exact session parameter ROWS_PER_RESULTSET
     *         final var p3 = SnowflakeFunctions.getParameters(GetParametersArgs.builder()
     *             .parameterType("SESSION")
     *             .pattern("ROWS_PER_RESULTSET")
     *             .user("TEST_USER")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetParametersResult> getParametersPlain() {
        return getParametersPlain(GetParametersPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.Database;
     * import com.pulumi.snowflake.DatabaseArgs;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetParametersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var d = new Database("d", DatabaseArgs.builder()
     *             .name("TEST_DB")
     *             .build());
     * 
     *         // read all object parameters in database TEST_DB
     *         final var p = SnowflakeFunctions.getParameters(GetParametersArgs.builder()
     *             .parameterType("OBJECT")
     *             .objectType("DATABASE")
     *             .objectName(d.name())
     *             .build());
     * 
     *         // read all account parameters with the pattern '%TIMESTAMP%'
     *         final var p2 = SnowflakeFunctions.getParameters(GetParametersArgs.builder()
     *             .parameterType("ACCOUNT")
     *             .pattern("%TIMESTAMP%")
     *             .build());
     * 
     *         // read the exact session parameter ROWS_PER_RESULTSET
     *         final var p3 = SnowflakeFunctions.getParameters(GetParametersArgs.builder()
     *             .parameterType("SESSION")
     *             .pattern("ROWS_PER_RESULTSET")
     *             .user("TEST_USER")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetParametersResult> getParameters(GetParametersArgs args) {
        return getParameters(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.Database;
     * import com.pulumi.snowflake.DatabaseArgs;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetParametersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var d = new Database("d", DatabaseArgs.builder()
     *             .name("TEST_DB")
     *             .build());
     * 
     *         // read all object parameters in database TEST_DB
     *         final var p = SnowflakeFunctions.getParameters(GetParametersArgs.builder()
     *             .parameterType("OBJECT")
     *             .objectType("DATABASE")
     *             .objectName(d.name())
     *             .build());
     * 
     *         // read all account parameters with the pattern '%TIMESTAMP%'
     *         final var p2 = SnowflakeFunctions.getParameters(GetParametersArgs.builder()
     *             .parameterType("ACCOUNT")
     *             .pattern("%TIMESTAMP%")
     *             .build());
     * 
     *         // read the exact session parameter ROWS_PER_RESULTSET
     *         final var p3 = SnowflakeFunctions.getParameters(GetParametersArgs.builder()
     *             .parameterType("SESSION")
     *             .pattern("ROWS_PER_RESULTSET")
     *             .user("TEST_USER")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetParametersResult> getParametersPlain(GetParametersPlainArgs args) {
        return getParametersPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.Database;
     * import com.pulumi.snowflake.DatabaseArgs;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetParametersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var d = new Database("d", DatabaseArgs.builder()
     *             .name("TEST_DB")
     *             .build());
     * 
     *         // read all object parameters in database TEST_DB
     *         final var p = SnowflakeFunctions.getParameters(GetParametersArgs.builder()
     *             .parameterType("OBJECT")
     *             .objectType("DATABASE")
     *             .objectName(d.name())
     *             .build());
     * 
     *         // read all account parameters with the pattern '%TIMESTAMP%'
     *         final var p2 = SnowflakeFunctions.getParameters(GetParametersArgs.builder()
     *             .parameterType("ACCOUNT")
     *             .pattern("%TIMESTAMP%")
     *             .build());
     * 
     *         // read the exact session parameter ROWS_PER_RESULTSET
     *         final var p3 = SnowflakeFunctions.getParameters(GetParametersArgs.builder()
     *             .parameterType("SESSION")
     *             .pattern("ROWS_PER_RESULTSET")
     *             .user("TEST_USER")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetParametersResult> getParameters(GetParametersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getParameters:getParameters", TypeShape.of(GetParametersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.Database;
     * import com.pulumi.snowflake.DatabaseArgs;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetParametersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var d = new Database("d", DatabaseArgs.builder()
     *             .name("TEST_DB")
     *             .build());
     * 
     *         // read all object parameters in database TEST_DB
     *         final var p = SnowflakeFunctions.getParameters(GetParametersArgs.builder()
     *             .parameterType("OBJECT")
     *             .objectType("DATABASE")
     *             .objectName(d.name())
     *             .build());
     * 
     *         // read all account parameters with the pattern '%TIMESTAMP%'
     *         final var p2 = SnowflakeFunctions.getParameters(GetParametersArgs.builder()
     *             .parameterType("ACCOUNT")
     *             .pattern("%TIMESTAMP%")
     *             .build());
     * 
     *         // read the exact session parameter ROWS_PER_RESULTSET
     *         final var p3 = SnowflakeFunctions.getParameters(GetParametersArgs.builder()
     *             .parameterType("SESSION")
     *             .pattern("ROWS_PER_RESULTSET")
     *             .user("TEST_USER")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetParametersResult> getParameters(GetParametersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getParameters:getParameters", TypeShape.of(GetParametersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.Database;
     * import com.pulumi.snowflake.DatabaseArgs;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetParametersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var d = new Database("d", DatabaseArgs.builder()
     *             .name("TEST_DB")
     *             .build());
     * 
     *         // read all object parameters in database TEST_DB
     *         final var p = SnowflakeFunctions.getParameters(GetParametersArgs.builder()
     *             .parameterType("OBJECT")
     *             .objectType("DATABASE")
     *             .objectName(d.name())
     *             .build());
     * 
     *         // read all account parameters with the pattern '%TIMESTAMP%'
     *         final var p2 = SnowflakeFunctions.getParameters(GetParametersArgs.builder()
     *             .parameterType("ACCOUNT")
     *             .pattern("%TIMESTAMP%")
     *             .build());
     * 
     *         // read the exact session parameter ROWS_PER_RESULTSET
     *         final var p3 = SnowflakeFunctions.getParameters(GetParametersArgs.builder()
     *             .parameterType("SESSION")
     *             .pattern("ROWS_PER_RESULTSET")
     *             .user("TEST_USER")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetParametersResult> getParametersPlain(GetParametersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getParameters:getParameters", TypeShape.of(GetParametersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetPipesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getPipes(GetPipesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetPipesResult> getPipes(GetPipesArgs args) {
        return getPipes(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetPipesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getPipes(GetPipesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetPipesResult> getPipesPlain(GetPipesPlainArgs args) {
        return getPipesPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetPipesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getPipes(GetPipesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetPipesResult> getPipes(GetPipesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getPipes:getPipes", TypeShape.of(GetPipesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetPipesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getPipes(GetPipesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetPipesResult> getPipes(GetPipesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getPipes:getPipes", TypeShape.of(GetPipesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetPipesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getPipes(GetPipesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetPipesResult> getPipesPlain(GetPipesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getPipes:getPipes", TypeShape.of(GetPipesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetProceduresArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getProcedures(GetProceduresArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetProceduresResult> getProcedures(GetProceduresArgs args) {
        return getProcedures(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetProceduresArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getProcedures(GetProceduresArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetProceduresResult> getProceduresPlain(GetProceduresPlainArgs args) {
        return getProceduresPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetProceduresArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getProcedures(GetProceduresArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetProceduresResult> getProcedures(GetProceduresArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getProcedures:getProcedures", TypeShape.of(GetProceduresResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetProceduresArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getProcedures(GetProceduresArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetProceduresResult> getProcedures(GetProceduresArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getProcedures:getProcedures", TypeShape.of(GetProceduresResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetProceduresArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getProcedures(GetProceduresArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetProceduresResult> getProceduresPlain(GetProceduresPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getProcedures:getProcedures", TypeShape.of(GetProceduresResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered resource monitors. Filtering is aligned with the current possibilities for [SHOW RESOURCE MONITORS](https://docs.snowflake.com/en/sql-reference/sql/show-resource-monitors) query (`like` is supported). The results of SHOW is encapsulated in show_output collection.
     * 
     */
    public static Output<GetResourceMonitorsResult> getResourceMonitors() {
        return getResourceMonitors(GetResourceMonitorsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered resource monitors. Filtering is aligned with the current possibilities for [SHOW RESOURCE MONITORS](https://docs.snowflake.com/en/sql-reference/sql/show-resource-monitors) query (`like` is supported). The results of SHOW is encapsulated in show_output collection.
     * 
     */
    public static CompletableFuture<GetResourceMonitorsResult> getResourceMonitorsPlain() {
        return getResourceMonitorsPlain(GetResourceMonitorsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered resource monitors. Filtering is aligned with the current possibilities for [SHOW RESOURCE MONITORS](https://docs.snowflake.com/en/sql-reference/sql/show-resource-monitors) query (`like` is supported). The results of SHOW is encapsulated in show_output collection.
     * 
     */
    public static Output<GetResourceMonitorsResult> getResourceMonitors(GetResourceMonitorsArgs args) {
        return getResourceMonitors(args, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered resource monitors. Filtering is aligned with the current possibilities for [SHOW RESOURCE MONITORS](https://docs.snowflake.com/en/sql-reference/sql/show-resource-monitors) query (`like` is supported). The results of SHOW is encapsulated in show_output collection.
     * 
     */
    public static CompletableFuture<GetResourceMonitorsResult> getResourceMonitorsPlain(GetResourceMonitorsPlainArgs args) {
        return getResourceMonitorsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered resource monitors. Filtering is aligned with the current possibilities for [SHOW RESOURCE MONITORS](https://docs.snowflake.com/en/sql-reference/sql/show-resource-monitors) query (`like` is supported). The results of SHOW is encapsulated in show_output collection.
     * 
     */
    public static Output<GetResourceMonitorsResult> getResourceMonitors(GetResourceMonitorsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getResourceMonitors:getResourceMonitors", TypeShape.of(GetResourceMonitorsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered resource monitors. Filtering is aligned with the current possibilities for [SHOW RESOURCE MONITORS](https://docs.snowflake.com/en/sql-reference/sql/show-resource-monitors) query (`like` is supported). The results of SHOW is encapsulated in show_output collection.
     * 
     */
    public static Output<GetResourceMonitorsResult> getResourceMonitors(GetResourceMonitorsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getResourceMonitors:getResourceMonitors", TypeShape.of(GetResourceMonitorsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered resource monitors. Filtering is aligned with the current possibilities for [SHOW RESOURCE MONITORS](https://docs.snowflake.com/en/sql-reference/sql/show-resource-monitors) query (`like` is supported). The results of SHOW is encapsulated in show_output collection.
     * 
     */
    public static CompletableFuture<GetResourceMonitorsResult> getResourceMonitorsPlain(GetResourceMonitorsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getResourceMonitors:getResourceMonitors", TypeShape.of(GetResourceMonitorsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Sensitive values** This data source&#39;s `describe_output.body` field is not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. If you use one of these fields, they may be present in logs, so ensure that the provider logs are properly restricted. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered row access policies. Filtering is aligned with the current possibilities for [SHOW ROW ACCESS POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-row-access-policies) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `row_access_policies`.
     * 
     */
    public static Output<GetRowAccessPoliciesResult> getRowAccessPolicies() {
        return getRowAccessPolicies(GetRowAccessPoliciesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Sensitive values** This data source&#39;s `describe_output.body` field is not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. If you use one of these fields, they may be present in logs, so ensure that the provider logs are properly restricted. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered row access policies. Filtering is aligned with the current possibilities for [SHOW ROW ACCESS POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-row-access-policies) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `row_access_policies`.
     * 
     */
    public static CompletableFuture<GetRowAccessPoliciesResult> getRowAccessPoliciesPlain() {
        return getRowAccessPoliciesPlain(GetRowAccessPoliciesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Sensitive values** This data source&#39;s `describe_output.body` field is not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. If you use one of these fields, they may be present in logs, so ensure that the provider logs are properly restricted. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered row access policies. Filtering is aligned with the current possibilities for [SHOW ROW ACCESS POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-row-access-policies) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `row_access_policies`.
     * 
     */
    public static Output<GetRowAccessPoliciesResult> getRowAccessPolicies(GetRowAccessPoliciesArgs args) {
        return getRowAccessPolicies(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Sensitive values** This data source&#39;s `describe_output.body` field is not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. If you use one of these fields, they may be present in logs, so ensure that the provider logs are properly restricted. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered row access policies. Filtering is aligned with the current possibilities for [SHOW ROW ACCESS POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-row-access-policies) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `row_access_policies`.
     * 
     */
    public static CompletableFuture<GetRowAccessPoliciesResult> getRowAccessPoliciesPlain(GetRowAccessPoliciesPlainArgs args) {
        return getRowAccessPoliciesPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Sensitive values** This data source&#39;s `describe_output.body` field is not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. If you use one of these fields, they may be present in logs, so ensure that the provider logs are properly restricted. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered row access policies. Filtering is aligned with the current possibilities for [SHOW ROW ACCESS POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-row-access-policies) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `row_access_policies`.
     * 
     */
    public static Output<GetRowAccessPoliciesResult> getRowAccessPolicies(GetRowAccessPoliciesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getRowAccessPolicies:getRowAccessPolicies", TypeShape.of(GetRowAccessPoliciesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Sensitive values** This data source&#39;s `describe_output.body` field is not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. If you use one of these fields, they may be present in logs, so ensure that the provider logs are properly restricted. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered row access policies. Filtering is aligned with the current possibilities for [SHOW ROW ACCESS POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-row-access-policies) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `row_access_policies`.
     * 
     */
    public static Output<GetRowAccessPoliciesResult> getRowAccessPolicies(GetRowAccessPoliciesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getRowAccessPolicies:getRowAccessPolicies", TypeShape.of(GetRowAccessPoliciesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Sensitive values** This data source&#39;s `describe_output.body` field is not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. If you use one of these fields, they may be present in logs, so ensure that the provider logs are properly restricted. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered row access policies. Filtering is aligned with the current possibilities for [SHOW ROW ACCESS POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-row-access-policies) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `row_access_policies`.
     * 
     */
    public static CompletableFuture<GetRowAccessPoliciesResult> getRowAccessPoliciesPlain(GetRowAccessPoliciesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getRowAccessPolicies:getRowAccessPolicies", TypeShape.of(GetRowAccessPoliciesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * &lt;!-- TODO(SNOW-1844996): Remove this note.--&gt;
     * &gt; **Note** Field `WITH PRIVILEGES` is currently missing. It will be added in the future.
     * 
     * Data source used to get details of filtered schemas. Filtering is aligned with the current possibilities for [SHOW SCHEMAS](https://docs.snowflake.com/en/sql-reference/sql/show-schemas) query. The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.
     * 
     */
    public static Output<GetSchemasResult> getSchemas() {
        return getSchemas(GetSchemasArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * &lt;!-- TODO(SNOW-1844996): Remove this note.--&gt;
     * &gt; **Note** Field `WITH PRIVILEGES` is currently missing. It will be added in the future.
     * 
     * Data source used to get details of filtered schemas. Filtering is aligned with the current possibilities for [SHOW SCHEMAS](https://docs.snowflake.com/en/sql-reference/sql/show-schemas) query. The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.
     * 
     */
    public static CompletableFuture<GetSchemasResult> getSchemasPlain() {
        return getSchemasPlain(GetSchemasPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * &lt;!-- TODO(SNOW-1844996): Remove this note.--&gt;
     * &gt; **Note** Field `WITH PRIVILEGES` is currently missing. It will be added in the future.
     * 
     * Data source used to get details of filtered schemas. Filtering is aligned with the current possibilities for [SHOW SCHEMAS](https://docs.snowflake.com/en/sql-reference/sql/show-schemas) query. The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.
     * 
     */
    public static Output<GetSchemasResult> getSchemas(GetSchemasArgs args) {
        return getSchemas(args, InvokeOptions.Empty);
    }
    /**
     * &lt;!-- TODO(SNOW-1844996): Remove this note.--&gt;
     * &gt; **Note** Field `WITH PRIVILEGES` is currently missing. It will be added in the future.
     * 
     * Data source used to get details of filtered schemas. Filtering is aligned with the current possibilities for [SHOW SCHEMAS](https://docs.snowflake.com/en/sql-reference/sql/show-schemas) query. The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.
     * 
     */
    public static CompletableFuture<GetSchemasResult> getSchemasPlain(GetSchemasPlainArgs args) {
        return getSchemasPlain(args, InvokeOptions.Empty);
    }
    /**
     * &lt;!-- TODO(SNOW-1844996): Remove this note.--&gt;
     * &gt; **Note** Field `WITH PRIVILEGES` is currently missing. It will be added in the future.
     * 
     * Data source used to get details of filtered schemas. Filtering is aligned with the current possibilities for [SHOW SCHEMAS](https://docs.snowflake.com/en/sql-reference/sql/show-schemas) query. The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.
     * 
     */
    public static Output<GetSchemasResult> getSchemas(GetSchemasArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getSchemas:getSchemas", TypeShape.of(GetSchemasResult.class), args, Utilities.withVersion(options));
    }
    /**
     * &lt;!-- TODO(SNOW-1844996): Remove this note.--&gt;
     * &gt; **Note** Field `WITH PRIVILEGES` is currently missing. It will be added in the future.
     * 
     * Data source used to get details of filtered schemas. Filtering is aligned with the current possibilities for [SHOW SCHEMAS](https://docs.snowflake.com/en/sql-reference/sql/show-schemas) query. The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.
     * 
     */
    public static Output<GetSchemasResult> getSchemas(GetSchemasArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getSchemas:getSchemas", TypeShape.of(GetSchemasResult.class), args, Utilities.withVersion(options));
    }
    /**
     * &lt;!-- TODO(SNOW-1844996): Remove this note.--&gt;
     * &gt; **Note** Field `WITH PRIVILEGES` is currently missing. It will be added in the future.
     * 
     * Data source used to get details of filtered schemas. Filtering is aligned with the current possibilities for [SHOW SCHEMAS](https://docs.snowflake.com/en/sql-reference/sql/show-schemas) query. The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.
     * 
     */
    public static CompletableFuture<GetSchemasResult> getSchemasPlain(GetSchemasPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getSchemas:getSchemas", TypeShape.of(GetSchemasResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered secrets. Filtering is aligned with the current possibilities for [SHOW SECRETS](https://docs.snowflake.com/en/sql-reference/sql/show-secrets) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `secrets`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSecretsArgs;
     * import com.pulumi.snowflake.inputs.GetSecretsInArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Simple usage
     *         final var simple = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .build());
     * 
     *         ctx.export("simpleOutput", simple.secrets());
     *         // Filtering (like)
     *         final var like = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .like("secret-name")
     *             .build());
     * 
     *         ctx.export("likeOutput", like.secrets());
     *         // Filtering by prefix (like)
     *         final var likePrefix = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .like("prefix%")
     *             .build());
     * 
     *         ctx.export("likePrefixOutput", likePrefix.secrets());
     *         // Filtering (in)
     *         final var in = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .in(GetSecretsInArgs.builder()
     *                 .schema(test.fullyQualifiedName())
     *                 .build())
     *             .build());
     * 
     *         ctx.export("inOutput", in.secrets());
     *         // Without additional data (to limit the number of calls make for every found secret)
     *         final var onlyShow = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .withDescribe(false)
     *             .build());
     * 
     *         ctx.export("onlyShowOutput", onlyShow.secrets());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSecretsResult> getSecrets() {
        return getSecrets(GetSecretsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered secrets. Filtering is aligned with the current possibilities for [SHOW SECRETS](https://docs.snowflake.com/en/sql-reference/sql/show-secrets) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `secrets`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSecretsArgs;
     * import com.pulumi.snowflake.inputs.GetSecretsInArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Simple usage
     *         final var simple = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .build());
     * 
     *         ctx.export("simpleOutput", simple.secrets());
     *         // Filtering (like)
     *         final var like = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .like("secret-name")
     *             .build());
     * 
     *         ctx.export("likeOutput", like.secrets());
     *         // Filtering by prefix (like)
     *         final var likePrefix = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .like("prefix%")
     *             .build());
     * 
     *         ctx.export("likePrefixOutput", likePrefix.secrets());
     *         // Filtering (in)
     *         final var in = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .in(GetSecretsInArgs.builder()
     *                 .schema(test.fullyQualifiedName())
     *                 .build())
     *             .build());
     * 
     *         ctx.export("inOutput", in.secrets());
     *         // Without additional data (to limit the number of calls make for every found secret)
     *         final var onlyShow = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .withDescribe(false)
     *             .build());
     * 
     *         ctx.export("onlyShowOutput", onlyShow.secrets());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetSecretsResult> getSecretsPlain() {
        return getSecretsPlain(GetSecretsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered secrets. Filtering is aligned with the current possibilities for [SHOW SECRETS](https://docs.snowflake.com/en/sql-reference/sql/show-secrets) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `secrets`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSecretsArgs;
     * import com.pulumi.snowflake.inputs.GetSecretsInArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Simple usage
     *         final var simple = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .build());
     * 
     *         ctx.export("simpleOutput", simple.secrets());
     *         // Filtering (like)
     *         final var like = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .like("secret-name")
     *             .build());
     * 
     *         ctx.export("likeOutput", like.secrets());
     *         // Filtering by prefix (like)
     *         final var likePrefix = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .like("prefix%")
     *             .build());
     * 
     *         ctx.export("likePrefixOutput", likePrefix.secrets());
     *         // Filtering (in)
     *         final var in = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .in(GetSecretsInArgs.builder()
     *                 .schema(test.fullyQualifiedName())
     *                 .build())
     *             .build());
     * 
     *         ctx.export("inOutput", in.secrets());
     *         // Without additional data (to limit the number of calls make for every found secret)
     *         final var onlyShow = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .withDescribe(false)
     *             .build());
     * 
     *         ctx.export("onlyShowOutput", onlyShow.secrets());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSecretsResult> getSecrets(GetSecretsArgs args) {
        return getSecrets(args, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered secrets. Filtering is aligned with the current possibilities for [SHOW SECRETS](https://docs.snowflake.com/en/sql-reference/sql/show-secrets) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `secrets`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSecretsArgs;
     * import com.pulumi.snowflake.inputs.GetSecretsInArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Simple usage
     *         final var simple = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .build());
     * 
     *         ctx.export("simpleOutput", simple.secrets());
     *         // Filtering (like)
     *         final var like = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .like("secret-name")
     *             .build());
     * 
     *         ctx.export("likeOutput", like.secrets());
     *         // Filtering by prefix (like)
     *         final var likePrefix = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .like("prefix%")
     *             .build());
     * 
     *         ctx.export("likePrefixOutput", likePrefix.secrets());
     *         // Filtering (in)
     *         final var in = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .in(GetSecretsInArgs.builder()
     *                 .schema(test.fullyQualifiedName())
     *                 .build())
     *             .build());
     * 
     *         ctx.export("inOutput", in.secrets());
     *         // Without additional data (to limit the number of calls make for every found secret)
     *         final var onlyShow = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .withDescribe(false)
     *             .build());
     * 
     *         ctx.export("onlyShowOutput", onlyShow.secrets());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetSecretsResult> getSecretsPlain(GetSecretsPlainArgs args) {
        return getSecretsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered secrets. Filtering is aligned with the current possibilities for [SHOW SECRETS](https://docs.snowflake.com/en/sql-reference/sql/show-secrets) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `secrets`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSecretsArgs;
     * import com.pulumi.snowflake.inputs.GetSecretsInArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Simple usage
     *         final var simple = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .build());
     * 
     *         ctx.export("simpleOutput", simple.secrets());
     *         // Filtering (like)
     *         final var like = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .like("secret-name")
     *             .build());
     * 
     *         ctx.export("likeOutput", like.secrets());
     *         // Filtering by prefix (like)
     *         final var likePrefix = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .like("prefix%")
     *             .build());
     * 
     *         ctx.export("likePrefixOutput", likePrefix.secrets());
     *         // Filtering (in)
     *         final var in = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .in(GetSecretsInArgs.builder()
     *                 .schema(test.fullyQualifiedName())
     *                 .build())
     *             .build());
     * 
     *         ctx.export("inOutput", in.secrets());
     *         // Without additional data (to limit the number of calls make for every found secret)
     *         final var onlyShow = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .withDescribe(false)
     *             .build());
     * 
     *         ctx.export("onlyShowOutput", onlyShow.secrets());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSecretsResult> getSecrets(GetSecretsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getSecrets:getSecrets", TypeShape.of(GetSecretsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered secrets. Filtering is aligned with the current possibilities for [SHOW SECRETS](https://docs.snowflake.com/en/sql-reference/sql/show-secrets) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `secrets`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSecretsArgs;
     * import com.pulumi.snowflake.inputs.GetSecretsInArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Simple usage
     *         final var simple = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .build());
     * 
     *         ctx.export("simpleOutput", simple.secrets());
     *         // Filtering (like)
     *         final var like = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .like("secret-name")
     *             .build());
     * 
     *         ctx.export("likeOutput", like.secrets());
     *         // Filtering by prefix (like)
     *         final var likePrefix = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .like("prefix%")
     *             .build());
     * 
     *         ctx.export("likePrefixOutput", likePrefix.secrets());
     *         // Filtering (in)
     *         final var in = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .in(GetSecretsInArgs.builder()
     *                 .schema(test.fullyQualifiedName())
     *                 .build())
     *             .build());
     * 
     *         ctx.export("inOutput", in.secrets());
     *         // Without additional data (to limit the number of calls make for every found secret)
     *         final var onlyShow = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .withDescribe(false)
     *             .build());
     * 
     *         ctx.export("onlyShowOutput", onlyShow.secrets());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSecretsResult> getSecrets(GetSecretsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getSecrets:getSecrets", TypeShape.of(GetSecretsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered secrets. Filtering is aligned with the current possibilities for [SHOW SECRETS](https://docs.snowflake.com/en/sql-reference/sql/show-secrets) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `secrets`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSecretsArgs;
     * import com.pulumi.snowflake.inputs.GetSecretsInArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Simple usage
     *         final var simple = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .build());
     * 
     *         ctx.export("simpleOutput", simple.secrets());
     *         // Filtering (like)
     *         final var like = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .like("secret-name")
     *             .build());
     * 
     *         ctx.export("likeOutput", like.secrets());
     *         // Filtering by prefix (like)
     *         final var likePrefix = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .like("prefix%")
     *             .build());
     * 
     *         ctx.export("likePrefixOutput", likePrefix.secrets());
     *         // Filtering (in)
     *         final var in = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .in(GetSecretsInArgs.builder()
     *                 .schema(test.fullyQualifiedName())
     *                 .build())
     *             .build());
     * 
     *         ctx.export("inOutput", in.secrets());
     *         // Without additional data (to limit the number of calls make for every found secret)
     *         final var onlyShow = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()
     *             .withDescribe(false)
     *             .build());
     * 
     *         ctx.export("onlyShowOutput", onlyShow.secrets());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetSecretsResult> getSecretsPlain(GetSecretsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getSecrets:getSecrets", TypeShape.of(GetSecretsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetSecurityIntegrationsResult> getSecurityIntegrations() {
        return getSecurityIntegrations(GetSecurityIntegrationsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetSecurityIntegrationsResult> getSecurityIntegrationsPlain() {
        return getSecurityIntegrationsPlain(GetSecurityIntegrationsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetSecurityIntegrationsResult> getSecurityIntegrations(GetSecurityIntegrationsArgs args) {
        return getSecurityIntegrations(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetSecurityIntegrationsResult> getSecurityIntegrationsPlain(GetSecurityIntegrationsPlainArgs args) {
        return getSecurityIntegrationsPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetSecurityIntegrationsResult> getSecurityIntegrations(GetSecurityIntegrationsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getSecurityIntegrations:getSecurityIntegrations", TypeShape.of(GetSecurityIntegrationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetSecurityIntegrationsResult> getSecurityIntegrations(GetSecurityIntegrationsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getSecurityIntegrations:getSecurityIntegrations", TypeShape.of(GetSecurityIntegrationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetSecurityIntegrationsResult> getSecurityIntegrationsPlain(GetSecurityIntegrationsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getSecurityIntegrations:getSecurityIntegrations", TypeShape.of(GetSecurityIntegrationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSequencesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getSequences(GetSequencesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSequencesResult> getSequences(GetSequencesArgs args) {
        return getSequences(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSequencesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getSequences(GetSequencesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetSequencesResult> getSequencesPlain(GetSequencesPlainArgs args) {
        return getSequencesPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSequencesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getSequences(GetSequencesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSequencesResult> getSequences(GetSequencesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getSequences:getSequences", TypeShape.of(GetSequencesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSequencesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getSequences(GetSequencesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSequencesResult> getSequences(GetSequencesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getSequences:getSequences", TypeShape.of(GetSequencesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSequencesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getSequences(GetSequencesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetSequencesResult> getSequencesPlain(GetSequencesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getSequences:getSequences", TypeShape.of(GetSequencesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSharesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SnowflakeFunctions.getShares(GetSharesArgs.builder()
     *             .build());
     * 
     *         final var ad = SnowflakeFunctions.getShares(GetSharesArgs.builder()
     *             .pattern("usage")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSharesResult> getShares() {
        return getShares(GetSharesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSharesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SnowflakeFunctions.getShares(GetSharesArgs.builder()
     *             .build());
     * 
     *         final var ad = SnowflakeFunctions.getShares(GetSharesArgs.builder()
     *             .pattern("usage")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetSharesResult> getSharesPlain() {
        return getSharesPlain(GetSharesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSharesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SnowflakeFunctions.getShares(GetSharesArgs.builder()
     *             .build());
     * 
     *         final var ad = SnowflakeFunctions.getShares(GetSharesArgs.builder()
     *             .pattern("usage")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSharesResult> getShares(GetSharesArgs args) {
        return getShares(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSharesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SnowflakeFunctions.getShares(GetSharesArgs.builder()
     *             .build());
     * 
     *         final var ad = SnowflakeFunctions.getShares(GetSharesArgs.builder()
     *             .pattern("usage")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetSharesResult> getSharesPlain(GetSharesPlainArgs args) {
        return getSharesPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSharesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SnowflakeFunctions.getShares(GetSharesArgs.builder()
     *             .build());
     * 
     *         final var ad = SnowflakeFunctions.getShares(GetSharesArgs.builder()
     *             .pattern("usage")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSharesResult> getShares(GetSharesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getShares:getShares", TypeShape.of(GetSharesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSharesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SnowflakeFunctions.getShares(GetSharesArgs.builder()
     *             .build());
     * 
     *         final var ad = SnowflakeFunctions.getShares(GetSharesArgs.builder()
     *             .pattern("usage")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSharesResult> getShares(GetSharesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getShares:getShares", TypeShape.of(GetSharesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSharesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SnowflakeFunctions.getShares(GetSharesArgs.builder()
     *             .build());
     * 
     *         final var ad = SnowflakeFunctions.getShares(GetSharesArgs.builder()
     *             .pattern("usage")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetSharesResult> getSharesPlain(GetSharesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getShares:getShares", TypeShape.of(GetSharesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetStagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getStages(GetStagesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetStagesResult> getStages(GetStagesArgs args) {
        return getStages(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetStagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getStages(GetStagesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetStagesResult> getStagesPlain(GetStagesPlainArgs args) {
        return getStagesPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetStagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getStages(GetStagesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetStagesResult> getStages(GetStagesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getStages:getStages", TypeShape.of(GetStagesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetStagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getStages(GetStagesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetStagesResult> getStages(GetStagesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getStages:getStages", TypeShape.of(GetStagesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetStagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getStages(GetStagesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetStagesResult> getStagesPlain(GetStagesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getStages:getStages", TypeShape.of(GetStagesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getStorageIntegrations(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetStorageIntegrationsResult> getStorageIntegrations() {
        return getStorageIntegrations(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getStorageIntegrations(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetStorageIntegrationsResult> getStorageIntegrationsPlain() {
        return getStorageIntegrationsPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getStorageIntegrations(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetStorageIntegrationsResult> getStorageIntegrations(InvokeArgs args) {
        return getStorageIntegrations(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getStorageIntegrations(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetStorageIntegrationsResult> getStorageIntegrationsPlain(InvokeArgs args) {
        return getStorageIntegrationsPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getStorageIntegrations(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetStorageIntegrationsResult> getStorageIntegrations(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getStorageIntegrations:getStorageIntegrations", TypeShape.of(GetStorageIntegrationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getStorageIntegrations(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetStorageIntegrationsResult> getStorageIntegrations(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getStorageIntegrations:getStorageIntegrations", TypeShape.of(GetStorageIntegrationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getStorageIntegrations(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetStorageIntegrationsResult> getStorageIntegrationsPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getStorageIntegrations:getStorageIntegrations", TypeShape.of(GetStorageIntegrationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered streamlits. Filtering is aligned with the current possibilities for [SHOW STREAMLITS](https://docs.snowflake.com/en/sql-reference/sql/show-streamlits) query (only `like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection `streamlits`.
     * 
     */
    public static Output<GetStreamlitsResult> getStreamlits() {
        return getStreamlits(GetStreamlitsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered streamlits. Filtering is aligned with the current possibilities for [SHOW STREAMLITS](https://docs.snowflake.com/en/sql-reference/sql/show-streamlits) query (only `like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection `streamlits`.
     * 
     */
    public static CompletableFuture<GetStreamlitsResult> getStreamlitsPlain() {
        return getStreamlitsPlain(GetStreamlitsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered streamlits. Filtering is aligned with the current possibilities for [SHOW STREAMLITS](https://docs.snowflake.com/en/sql-reference/sql/show-streamlits) query (only `like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection `streamlits`.
     * 
     */
    public static Output<GetStreamlitsResult> getStreamlits(GetStreamlitsArgs args) {
        return getStreamlits(args, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered streamlits. Filtering is aligned with the current possibilities for [SHOW STREAMLITS](https://docs.snowflake.com/en/sql-reference/sql/show-streamlits) query (only `like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection `streamlits`.
     * 
     */
    public static CompletableFuture<GetStreamlitsResult> getStreamlitsPlain(GetStreamlitsPlainArgs args) {
        return getStreamlitsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered streamlits. Filtering is aligned with the current possibilities for [SHOW STREAMLITS](https://docs.snowflake.com/en/sql-reference/sql/show-streamlits) query (only `like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection `streamlits`.
     * 
     */
    public static Output<GetStreamlitsResult> getStreamlits(GetStreamlitsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getStreamlits:getStreamlits", TypeShape.of(GetStreamlitsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered streamlits. Filtering is aligned with the current possibilities for [SHOW STREAMLITS](https://docs.snowflake.com/en/sql-reference/sql/show-streamlits) query (only `like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection `streamlits`.
     * 
     */
    public static Output<GetStreamlitsResult> getStreamlits(GetStreamlitsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getStreamlits:getStreamlits", TypeShape.of(GetStreamlitsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered streamlits. Filtering is aligned with the current possibilities for [SHOW STREAMLITS](https://docs.snowflake.com/en/sql-reference/sql/show-streamlits) query (only `like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection `streamlits`.
     * 
     */
    public static CompletableFuture<GetStreamlitsResult> getStreamlitsPlain(GetStreamlitsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getStreamlits:getStreamlits", TypeShape.of(GetStreamlitsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered streams. Filtering is aligned with the current possibilities for [SHOW STREAMS](https://docs.snowflake.com/en/sql-reference/sql/show-streams) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `streams`.
     * 
     */
    public static Output<GetStreamsResult> getStreams() {
        return getStreams(GetStreamsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered streams. Filtering is aligned with the current possibilities for [SHOW STREAMS](https://docs.snowflake.com/en/sql-reference/sql/show-streams) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `streams`.
     * 
     */
    public static CompletableFuture<GetStreamsResult> getStreamsPlain() {
        return getStreamsPlain(GetStreamsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered streams. Filtering is aligned with the current possibilities for [SHOW STREAMS](https://docs.snowflake.com/en/sql-reference/sql/show-streams) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `streams`.
     * 
     */
    public static Output<GetStreamsResult> getStreams(GetStreamsArgs args) {
        return getStreams(args, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered streams. Filtering is aligned with the current possibilities for [SHOW STREAMS](https://docs.snowflake.com/en/sql-reference/sql/show-streams) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `streams`.
     * 
     */
    public static CompletableFuture<GetStreamsResult> getStreamsPlain(GetStreamsPlainArgs args) {
        return getStreamsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered streams. Filtering is aligned with the current possibilities for [SHOW STREAMS](https://docs.snowflake.com/en/sql-reference/sql/show-streams) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `streams`.
     * 
     */
    public static Output<GetStreamsResult> getStreams(GetStreamsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getStreams:getStreams", TypeShape.of(GetStreamsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered streams. Filtering is aligned with the current possibilities for [SHOW STREAMS](https://docs.snowflake.com/en/sql-reference/sql/show-streams) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `streams`.
     * 
     */
    public static Output<GetStreamsResult> getStreams(GetStreamsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getStreams:getStreams", TypeShape.of(GetStreamsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered streams. Filtering is aligned with the current possibilities for [SHOW STREAMS](https://docs.snowflake.com/en/sql-reference/sql/show-streams) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `streams`.
     * 
     */
    public static CompletableFuture<GetStreamsResult> getStreamsPlain(GetStreamsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getStreams:getStreams", TypeShape.of(GetStreamsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSystemGenerateScimAccessTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var scim = SnowflakeFunctions.getSystemGenerateScimAccessToken(GetSystemGenerateScimAccessTokenArgs.builder()
     *             .integrationName("AAD_PROVISIONING")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSystemGenerateScimAccessTokenResult> getSystemGenerateScimAccessToken(GetSystemGenerateScimAccessTokenArgs args) {
        return getSystemGenerateScimAccessToken(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSystemGenerateScimAccessTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var scim = SnowflakeFunctions.getSystemGenerateScimAccessToken(GetSystemGenerateScimAccessTokenArgs.builder()
     *             .integrationName("AAD_PROVISIONING")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetSystemGenerateScimAccessTokenResult> getSystemGenerateScimAccessTokenPlain(GetSystemGenerateScimAccessTokenPlainArgs args) {
        return getSystemGenerateScimAccessTokenPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSystemGenerateScimAccessTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var scim = SnowflakeFunctions.getSystemGenerateScimAccessToken(GetSystemGenerateScimAccessTokenArgs.builder()
     *             .integrationName("AAD_PROVISIONING")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSystemGenerateScimAccessTokenResult> getSystemGenerateScimAccessToken(GetSystemGenerateScimAccessTokenArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getSystemGenerateScimAccessToken:getSystemGenerateScimAccessToken", TypeShape.of(GetSystemGenerateScimAccessTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSystemGenerateScimAccessTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var scim = SnowflakeFunctions.getSystemGenerateScimAccessToken(GetSystemGenerateScimAccessTokenArgs.builder()
     *             .integrationName("AAD_PROVISIONING")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSystemGenerateScimAccessTokenResult> getSystemGenerateScimAccessToken(GetSystemGenerateScimAccessTokenArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getSystemGenerateScimAccessToken:getSystemGenerateScimAccessToken", TypeShape.of(GetSystemGenerateScimAccessTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSystemGenerateScimAccessTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var scim = SnowflakeFunctions.getSystemGenerateScimAccessToken(GetSystemGenerateScimAccessTokenArgs.builder()
     *             .integrationName("AAD_PROVISIONING")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetSystemGenerateScimAccessTokenResult> getSystemGenerateScimAccessTokenPlain(GetSystemGenerateScimAccessTokenPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getSystemGenerateScimAccessToken:getSystemGenerateScimAccessToken", TypeShape.of(GetSystemGenerateScimAccessTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSystemGetAwsSnsIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snowflakePolicy = SnowflakeFunctions.getSystemGetAwsSnsIamPolicy(GetSystemGetAwsSnsIamPolicyArgs.builder()
     *             .awsSnsTopicArn("<aws_sns_topic_arn>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSystemGetAwsSnsIamPolicyResult> getSystemGetAwsSnsIamPolicy(GetSystemGetAwsSnsIamPolicyArgs args) {
        return getSystemGetAwsSnsIamPolicy(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSystemGetAwsSnsIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snowflakePolicy = SnowflakeFunctions.getSystemGetAwsSnsIamPolicy(GetSystemGetAwsSnsIamPolicyArgs.builder()
     *             .awsSnsTopicArn("<aws_sns_topic_arn>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetSystemGetAwsSnsIamPolicyResult> getSystemGetAwsSnsIamPolicyPlain(GetSystemGetAwsSnsIamPolicyPlainArgs args) {
        return getSystemGetAwsSnsIamPolicyPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSystemGetAwsSnsIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snowflakePolicy = SnowflakeFunctions.getSystemGetAwsSnsIamPolicy(GetSystemGetAwsSnsIamPolicyArgs.builder()
     *             .awsSnsTopicArn("<aws_sns_topic_arn>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSystemGetAwsSnsIamPolicyResult> getSystemGetAwsSnsIamPolicy(GetSystemGetAwsSnsIamPolicyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getSystemGetAwsSnsIamPolicy:getSystemGetAwsSnsIamPolicy", TypeShape.of(GetSystemGetAwsSnsIamPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSystemGetAwsSnsIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snowflakePolicy = SnowflakeFunctions.getSystemGetAwsSnsIamPolicy(GetSystemGetAwsSnsIamPolicyArgs.builder()
     *             .awsSnsTopicArn("<aws_sns_topic_arn>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSystemGetAwsSnsIamPolicyResult> getSystemGetAwsSnsIamPolicy(GetSystemGetAwsSnsIamPolicyArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getSystemGetAwsSnsIamPolicy:getSystemGetAwsSnsIamPolicy", TypeShape.of(GetSystemGetAwsSnsIamPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetSystemGetAwsSnsIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snowflakePolicy = SnowflakeFunctions.getSystemGetAwsSnsIamPolicy(GetSystemGetAwsSnsIamPolicyArgs.builder()
     *             .awsSnsTopicArn("<aws_sns_topic_arn>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetSystemGetAwsSnsIamPolicyResult> getSystemGetAwsSnsIamPolicyPlain(GetSystemGetAwsSnsIamPolicyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getSystemGetAwsSnsIamPolicy:getSystemGetAwsSnsIamPolicy", TypeShape.of(GetSystemGetAwsSnsIamPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.aws.securityGroup;
     * import com.pulumi.aws.securityGroupArgs;
     * import com.pulumi.aws.vpcEndpoint;
     * import com.pulumi.aws.vpcEndpointArgs;
     * import com.pulumi.aws.route53Zone;
     * import com.pulumi.aws.route53ZoneArgs;
     * import com.pulumi.aws.route53Record;
     * import com.pulumi.aws.route53RecordArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snowflakePrivateLink = SnowflakeFunctions.getSystemGetPrivateLinkConfig(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         var snowflakePrivateLinkSecurityGroup = new SecurityGroup("snowflakePrivateLinkSecurityGroup", SecurityGroupArgs.builder()
     *             .vpcId(vpcId)
     *             .ingress(List.of(            
     *                 Map.ofEntries(
     *                     Map.entry("fromPort", 80),
     *                     Map.entry("toPort", 80),
     *                     Map.entry("cidrBlocks", vpcCidr),
     *                     Map.entry("protocol", "tcp")
     *                 ),
     *                 Map.ofEntries(
     *                     Map.entry("fromPort", 443),
     *                     Map.entry("toPort", 443),
     *                     Map.entry("cidrBlocks", vpcCidr),
     *                     Map.entry("protocol", "tcp")
     *                 )))
     *             .build());
     * 
     *         var snowflakePrivateLinkVpcEndpoint = new VpcEndpoint("snowflakePrivateLinkVpcEndpoint", VpcEndpointArgs.builder()
     *             .vpcId(vpcId)
     *             .serviceName(snowflakePrivateLink.awsVpceId())
     *             .vpcEndpointType("Interface")
     *             .securityGroupIds(List.of(snowflakePrivateLinkSecurityGroup.id()))
     *             .subnetIds(subnetIds)
     *             .privateDnsEnabled(false)
     *             .build());
     * 
     *         var snowflakePrivateLinkRoute53Zone = new Route53Zone("snowflakePrivateLinkRoute53Zone", Route53ZoneArgs.builder()
     *             .name("privatelink.snowflakecomputing.com")
     *             .vpc(List.of(Map.of("vpcId", vpcId)))
     *             .build());
     * 
     *         var snowflakePrivateLinkUrl = new Route53Record("snowflakePrivateLinkUrl", Route53RecordArgs.builder()
     *             .zoneId(snowflakePrivateLinkRoute53Zone.zoneId())
     *             .name(snowflakePrivateLink.accountUrl())
     *             .type("CNAME")
     *             .ttl("300")
     *             .records(List.of(snowflakePrivateLinkVpcEndpoint.dnsEntry()[0].dns_name()))
     *             .build());
     * 
     *         var snowflakePrivateLinkOcspUrl = new Route53Record("snowflakePrivateLinkOcspUrl", Route53RecordArgs.builder()
     *             .zoneId(snowflakePrivateLinkRoute53Zone.zoneId())
     *             .name(snowflakePrivateLink.ocspUrl())
     *             .type("CNAME")
     *             .ttl("300")
     *             .records(List.of(snowflakePrivateLinkVpcEndpoint.dnsEntry()[0].dns_name()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSystemGetPrivateLinkConfigResult> getSystemGetPrivateLinkConfig() {
        return getSystemGetPrivateLinkConfig(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.aws.securityGroup;
     * import com.pulumi.aws.securityGroupArgs;
     * import com.pulumi.aws.vpcEndpoint;
     * import com.pulumi.aws.vpcEndpointArgs;
     * import com.pulumi.aws.route53Zone;
     * import com.pulumi.aws.route53ZoneArgs;
     * import com.pulumi.aws.route53Record;
     * import com.pulumi.aws.route53RecordArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snowflakePrivateLink = SnowflakeFunctions.getSystemGetPrivateLinkConfig(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         var snowflakePrivateLinkSecurityGroup = new SecurityGroup("snowflakePrivateLinkSecurityGroup", SecurityGroupArgs.builder()
     *             .vpcId(vpcId)
     *             .ingress(List.of(            
     *                 Map.ofEntries(
     *                     Map.entry("fromPort", 80),
     *                     Map.entry("toPort", 80),
     *                     Map.entry("cidrBlocks", vpcCidr),
     *                     Map.entry("protocol", "tcp")
     *                 ),
     *                 Map.ofEntries(
     *                     Map.entry("fromPort", 443),
     *                     Map.entry("toPort", 443),
     *                     Map.entry("cidrBlocks", vpcCidr),
     *                     Map.entry("protocol", "tcp")
     *                 )))
     *             .build());
     * 
     *         var snowflakePrivateLinkVpcEndpoint = new VpcEndpoint("snowflakePrivateLinkVpcEndpoint", VpcEndpointArgs.builder()
     *             .vpcId(vpcId)
     *             .serviceName(snowflakePrivateLink.awsVpceId())
     *             .vpcEndpointType("Interface")
     *             .securityGroupIds(List.of(snowflakePrivateLinkSecurityGroup.id()))
     *             .subnetIds(subnetIds)
     *             .privateDnsEnabled(false)
     *             .build());
     * 
     *         var snowflakePrivateLinkRoute53Zone = new Route53Zone("snowflakePrivateLinkRoute53Zone", Route53ZoneArgs.builder()
     *             .name("privatelink.snowflakecomputing.com")
     *             .vpc(List.of(Map.of("vpcId", vpcId)))
     *             .build());
     * 
     *         var snowflakePrivateLinkUrl = new Route53Record("snowflakePrivateLinkUrl", Route53RecordArgs.builder()
     *             .zoneId(snowflakePrivateLinkRoute53Zone.zoneId())
     *             .name(snowflakePrivateLink.accountUrl())
     *             .type("CNAME")
     *             .ttl("300")
     *             .records(List.of(snowflakePrivateLinkVpcEndpoint.dnsEntry()[0].dns_name()))
     *             .build());
     * 
     *         var snowflakePrivateLinkOcspUrl = new Route53Record("snowflakePrivateLinkOcspUrl", Route53RecordArgs.builder()
     *             .zoneId(snowflakePrivateLinkRoute53Zone.zoneId())
     *             .name(snowflakePrivateLink.ocspUrl())
     *             .type("CNAME")
     *             .ttl("300")
     *             .records(List.of(snowflakePrivateLinkVpcEndpoint.dnsEntry()[0].dns_name()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetSystemGetPrivateLinkConfigResult> getSystemGetPrivateLinkConfigPlain() {
        return getSystemGetPrivateLinkConfigPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.aws.securityGroup;
     * import com.pulumi.aws.securityGroupArgs;
     * import com.pulumi.aws.vpcEndpoint;
     * import com.pulumi.aws.vpcEndpointArgs;
     * import com.pulumi.aws.route53Zone;
     * import com.pulumi.aws.route53ZoneArgs;
     * import com.pulumi.aws.route53Record;
     * import com.pulumi.aws.route53RecordArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snowflakePrivateLink = SnowflakeFunctions.getSystemGetPrivateLinkConfig(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         var snowflakePrivateLinkSecurityGroup = new SecurityGroup("snowflakePrivateLinkSecurityGroup", SecurityGroupArgs.builder()
     *             .vpcId(vpcId)
     *             .ingress(List.of(            
     *                 Map.ofEntries(
     *                     Map.entry("fromPort", 80),
     *                     Map.entry("toPort", 80),
     *                     Map.entry("cidrBlocks", vpcCidr),
     *                     Map.entry("protocol", "tcp")
     *                 ),
     *                 Map.ofEntries(
     *                     Map.entry("fromPort", 443),
     *                     Map.entry("toPort", 443),
     *                     Map.entry("cidrBlocks", vpcCidr),
     *                     Map.entry("protocol", "tcp")
     *                 )))
     *             .build());
     * 
     *         var snowflakePrivateLinkVpcEndpoint = new VpcEndpoint("snowflakePrivateLinkVpcEndpoint", VpcEndpointArgs.builder()
     *             .vpcId(vpcId)
     *             .serviceName(snowflakePrivateLink.awsVpceId())
     *             .vpcEndpointType("Interface")
     *             .securityGroupIds(List.of(snowflakePrivateLinkSecurityGroup.id()))
     *             .subnetIds(subnetIds)
     *             .privateDnsEnabled(false)
     *             .build());
     * 
     *         var snowflakePrivateLinkRoute53Zone = new Route53Zone("snowflakePrivateLinkRoute53Zone", Route53ZoneArgs.builder()
     *             .name("privatelink.snowflakecomputing.com")
     *             .vpc(List.of(Map.of("vpcId", vpcId)))
     *             .build());
     * 
     *         var snowflakePrivateLinkUrl = new Route53Record("snowflakePrivateLinkUrl", Route53RecordArgs.builder()
     *             .zoneId(snowflakePrivateLinkRoute53Zone.zoneId())
     *             .name(snowflakePrivateLink.accountUrl())
     *             .type("CNAME")
     *             .ttl("300")
     *             .records(List.of(snowflakePrivateLinkVpcEndpoint.dnsEntry()[0].dns_name()))
     *             .build());
     * 
     *         var snowflakePrivateLinkOcspUrl = new Route53Record("snowflakePrivateLinkOcspUrl", Route53RecordArgs.builder()
     *             .zoneId(snowflakePrivateLinkRoute53Zone.zoneId())
     *             .name(snowflakePrivateLink.ocspUrl())
     *             .type("CNAME")
     *             .ttl("300")
     *             .records(List.of(snowflakePrivateLinkVpcEndpoint.dnsEntry()[0].dns_name()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSystemGetPrivateLinkConfigResult> getSystemGetPrivateLinkConfig(InvokeArgs args) {
        return getSystemGetPrivateLinkConfig(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.aws.securityGroup;
     * import com.pulumi.aws.securityGroupArgs;
     * import com.pulumi.aws.vpcEndpoint;
     * import com.pulumi.aws.vpcEndpointArgs;
     * import com.pulumi.aws.route53Zone;
     * import com.pulumi.aws.route53ZoneArgs;
     * import com.pulumi.aws.route53Record;
     * import com.pulumi.aws.route53RecordArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snowflakePrivateLink = SnowflakeFunctions.getSystemGetPrivateLinkConfig(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         var snowflakePrivateLinkSecurityGroup = new SecurityGroup("snowflakePrivateLinkSecurityGroup", SecurityGroupArgs.builder()
     *             .vpcId(vpcId)
     *             .ingress(List.of(            
     *                 Map.ofEntries(
     *                     Map.entry("fromPort", 80),
     *                     Map.entry("toPort", 80),
     *                     Map.entry("cidrBlocks", vpcCidr),
     *                     Map.entry("protocol", "tcp")
     *                 ),
     *                 Map.ofEntries(
     *                     Map.entry("fromPort", 443),
     *                     Map.entry("toPort", 443),
     *                     Map.entry("cidrBlocks", vpcCidr),
     *                     Map.entry("protocol", "tcp")
     *                 )))
     *             .build());
     * 
     *         var snowflakePrivateLinkVpcEndpoint = new VpcEndpoint("snowflakePrivateLinkVpcEndpoint", VpcEndpointArgs.builder()
     *             .vpcId(vpcId)
     *             .serviceName(snowflakePrivateLink.awsVpceId())
     *             .vpcEndpointType("Interface")
     *             .securityGroupIds(List.of(snowflakePrivateLinkSecurityGroup.id()))
     *             .subnetIds(subnetIds)
     *             .privateDnsEnabled(false)
     *             .build());
     * 
     *         var snowflakePrivateLinkRoute53Zone = new Route53Zone("snowflakePrivateLinkRoute53Zone", Route53ZoneArgs.builder()
     *             .name("privatelink.snowflakecomputing.com")
     *             .vpc(List.of(Map.of("vpcId", vpcId)))
     *             .build());
     * 
     *         var snowflakePrivateLinkUrl = new Route53Record("snowflakePrivateLinkUrl", Route53RecordArgs.builder()
     *             .zoneId(snowflakePrivateLinkRoute53Zone.zoneId())
     *             .name(snowflakePrivateLink.accountUrl())
     *             .type("CNAME")
     *             .ttl("300")
     *             .records(List.of(snowflakePrivateLinkVpcEndpoint.dnsEntry()[0].dns_name()))
     *             .build());
     * 
     *         var snowflakePrivateLinkOcspUrl = new Route53Record("snowflakePrivateLinkOcspUrl", Route53RecordArgs.builder()
     *             .zoneId(snowflakePrivateLinkRoute53Zone.zoneId())
     *             .name(snowflakePrivateLink.ocspUrl())
     *             .type("CNAME")
     *             .ttl("300")
     *             .records(List.of(snowflakePrivateLinkVpcEndpoint.dnsEntry()[0].dns_name()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetSystemGetPrivateLinkConfigResult> getSystemGetPrivateLinkConfigPlain(InvokeArgs args) {
        return getSystemGetPrivateLinkConfigPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.aws.securityGroup;
     * import com.pulumi.aws.securityGroupArgs;
     * import com.pulumi.aws.vpcEndpoint;
     * import com.pulumi.aws.vpcEndpointArgs;
     * import com.pulumi.aws.route53Zone;
     * import com.pulumi.aws.route53ZoneArgs;
     * import com.pulumi.aws.route53Record;
     * import com.pulumi.aws.route53RecordArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snowflakePrivateLink = SnowflakeFunctions.getSystemGetPrivateLinkConfig(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         var snowflakePrivateLinkSecurityGroup = new SecurityGroup("snowflakePrivateLinkSecurityGroup", SecurityGroupArgs.builder()
     *             .vpcId(vpcId)
     *             .ingress(List.of(            
     *                 Map.ofEntries(
     *                     Map.entry("fromPort", 80),
     *                     Map.entry("toPort", 80),
     *                     Map.entry("cidrBlocks", vpcCidr),
     *                     Map.entry("protocol", "tcp")
     *                 ),
     *                 Map.ofEntries(
     *                     Map.entry("fromPort", 443),
     *                     Map.entry("toPort", 443),
     *                     Map.entry("cidrBlocks", vpcCidr),
     *                     Map.entry("protocol", "tcp")
     *                 )))
     *             .build());
     * 
     *         var snowflakePrivateLinkVpcEndpoint = new VpcEndpoint("snowflakePrivateLinkVpcEndpoint", VpcEndpointArgs.builder()
     *             .vpcId(vpcId)
     *             .serviceName(snowflakePrivateLink.awsVpceId())
     *             .vpcEndpointType("Interface")
     *             .securityGroupIds(List.of(snowflakePrivateLinkSecurityGroup.id()))
     *             .subnetIds(subnetIds)
     *             .privateDnsEnabled(false)
     *             .build());
     * 
     *         var snowflakePrivateLinkRoute53Zone = new Route53Zone("snowflakePrivateLinkRoute53Zone", Route53ZoneArgs.builder()
     *             .name("privatelink.snowflakecomputing.com")
     *             .vpc(List.of(Map.of("vpcId", vpcId)))
     *             .build());
     * 
     *         var snowflakePrivateLinkUrl = new Route53Record("snowflakePrivateLinkUrl", Route53RecordArgs.builder()
     *             .zoneId(snowflakePrivateLinkRoute53Zone.zoneId())
     *             .name(snowflakePrivateLink.accountUrl())
     *             .type("CNAME")
     *             .ttl("300")
     *             .records(List.of(snowflakePrivateLinkVpcEndpoint.dnsEntry()[0].dns_name()))
     *             .build());
     * 
     *         var snowflakePrivateLinkOcspUrl = new Route53Record("snowflakePrivateLinkOcspUrl", Route53RecordArgs.builder()
     *             .zoneId(snowflakePrivateLinkRoute53Zone.zoneId())
     *             .name(snowflakePrivateLink.ocspUrl())
     *             .type("CNAME")
     *             .ttl("300")
     *             .records(List.of(snowflakePrivateLinkVpcEndpoint.dnsEntry()[0].dns_name()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSystemGetPrivateLinkConfigResult> getSystemGetPrivateLinkConfig(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getSystemGetPrivateLinkConfig:getSystemGetPrivateLinkConfig", TypeShape.of(GetSystemGetPrivateLinkConfigResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.aws.securityGroup;
     * import com.pulumi.aws.securityGroupArgs;
     * import com.pulumi.aws.vpcEndpoint;
     * import com.pulumi.aws.vpcEndpointArgs;
     * import com.pulumi.aws.route53Zone;
     * import com.pulumi.aws.route53ZoneArgs;
     * import com.pulumi.aws.route53Record;
     * import com.pulumi.aws.route53RecordArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snowflakePrivateLink = SnowflakeFunctions.getSystemGetPrivateLinkConfig(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         var snowflakePrivateLinkSecurityGroup = new SecurityGroup("snowflakePrivateLinkSecurityGroup", SecurityGroupArgs.builder()
     *             .vpcId(vpcId)
     *             .ingress(List.of(            
     *                 Map.ofEntries(
     *                     Map.entry("fromPort", 80),
     *                     Map.entry("toPort", 80),
     *                     Map.entry("cidrBlocks", vpcCidr),
     *                     Map.entry("protocol", "tcp")
     *                 ),
     *                 Map.ofEntries(
     *                     Map.entry("fromPort", 443),
     *                     Map.entry("toPort", 443),
     *                     Map.entry("cidrBlocks", vpcCidr),
     *                     Map.entry("protocol", "tcp")
     *                 )))
     *             .build());
     * 
     *         var snowflakePrivateLinkVpcEndpoint = new VpcEndpoint("snowflakePrivateLinkVpcEndpoint", VpcEndpointArgs.builder()
     *             .vpcId(vpcId)
     *             .serviceName(snowflakePrivateLink.awsVpceId())
     *             .vpcEndpointType("Interface")
     *             .securityGroupIds(List.of(snowflakePrivateLinkSecurityGroup.id()))
     *             .subnetIds(subnetIds)
     *             .privateDnsEnabled(false)
     *             .build());
     * 
     *         var snowflakePrivateLinkRoute53Zone = new Route53Zone("snowflakePrivateLinkRoute53Zone", Route53ZoneArgs.builder()
     *             .name("privatelink.snowflakecomputing.com")
     *             .vpc(List.of(Map.of("vpcId", vpcId)))
     *             .build());
     * 
     *         var snowflakePrivateLinkUrl = new Route53Record("snowflakePrivateLinkUrl", Route53RecordArgs.builder()
     *             .zoneId(snowflakePrivateLinkRoute53Zone.zoneId())
     *             .name(snowflakePrivateLink.accountUrl())
     *             .type("CNAME")
     *             .ttl("300")
     *             .records(List.of(snowflakePrivateLinkVpcEndpoint.dnsEntry()[0].dns_name()))
     *             .build());
     * 
     *         var snowflakePrivateLinkOcspUrl = new Route53Record("snowflakePrivateLinkOcspUrl", Route53RecordArgs.builder()
     *             .zoneId(snowflakePrivateLinkRoute53Zone.zoneId())
     *             .name(snowflakePrivateLink.ocspUrl())
     *             .type("CNAME")
     *             .ttl("300")
     *             .records(List.of(snowflakePrivateLinkVpcEndpoint.dnsEntry()[0].dns_name()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSystemGetPrivateLinkConfigResult> getSystemGetPrivateLinkConfig(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getSystemGetPrivateLinkConfig:getSystemGetPrivateLinkConfig", TypeShape.of(GetSystemGetPrivateLinkConfigResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.aws.securityGroup;
     * import com.pulumi.aws.securityGroupArgs;
     * import com.pulumi.aws.vpcEndpoint;
     * import com.pulumi.aws.vpcEndpointArgs;
     * import com.pulumi.aws.route53Zone;
     * import com.pulumi.aws.route53ZoneArgs;
     * import com.pulumi.aws.route53Record;
     * import com.pulumi.aws.route53RecordArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snowflakePrivateLink = SnowflakeFunctions.getSystemGetPrivateLinkConfig(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         var snowflakePrivateLinkSecurityGroup = new SecurityGroup("snowflakePrivateLinkSecurityGroup", SecurityGroupArgs.builder()
     *             .vpcId(vpcId)
     *             .ingress(List.of(            
     *                 Map.ofEntries(
     *                     Map.entry("fromPort", 80),
     *                     Map.entry("toPort", 80),
     *                     Map.entry("cidrBlocks", vpcCidr),
     *                     Map.entry("protocol", "tcp")
     *                 ),
     *                 Map.ofEntries(
     *                     Map.entry("fromPort", 443),
     *                     Map.entry("toPort", 443),
     *                     Map.entry("cidrBlocks", vpcCidr),
     *                     Map.entry("protocol", "tcp")
     *                 )))
     *             .build());
     * 
     *         var snowflakePrivateLinkVpcEndpoint = new VpcEndpoint("snowflakePrivateLinkVpcEndpoint", VpcEndpointArgs.builder()
     *             .vpcId(vpcId)
     *             .serviceName(snowflakePrivateLink.awsVpceId())
     *             .vpcEndpointType("Interface")
     *             .securityGroupIds(List.of(snowflakePrivateLinkSecurityGroup.id()))
     *             .subnetIds(subnetIds)
     *             .privateDnsEnabled(false)
     *             .build());
     * 
     *         var snowflakePrivateLinkRoute53Zone = new Route53Zone("snowflakePrivateLinkRoute53Zone", Route53ZoneArgs.builder()
     *             .name("privatelink.snowflakecomputing.com")
     *             .vpc(List.of(Map.of("vpcId", vpcId)))
     *             .build());
     * 
     *         var snowflakePrivateLinkUrl = new Route53Record("snowflakePrivateLinkUrl", Route53RecordArgs.builder()
     *             .zoneId(snowflakePrivateLinkRoute53Zone.zoneId())
     *             .name(snowflakePrivateLink.accountUrl())
     *             .type("CNAME")
     *             .ttl("300")
     *             .records(List.of(snowflakePrivateLinkVpcEndpoint.dnsEntry()[0].dns_name()))
     *             .build());
     * 
     *         var snowflakePrivateLinkOcspUrl = new Route53Record("snowflakePrivateLinkOcspUrl", Route53RecordArgs.builder()
     *             .zoneId(snowflakePrivateLinkRoute53Zone.zoneId())
     *             .name(snowflakePrivateLink.ocspUrl())
     *             .type("CNAME")
     *             .ttl("300")
     *             .records(List.of(snowflakePrivateLinkVpcEndpoint.dnsEntry()[0].dns_name()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetSystemGetPrivateLinkConfigResult> getSystemGetPrivateLinkConfigPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getSystemGetPrivateLinkConfig:getSystemGetPrivateLinkConfig", TypeShape.of(GetSystemGetPrivateLinkConfigResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSystemGetSnowflakePlatformInfoResult> getSystemGetSnowflakePlatformInfo() {
        return getSystemGetSnowflakePlatformInfo(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetSystemGetSnowflakePlatformInfoResult> getSystemGetSnowflakePlatformInfoPlain() {
        return getSystemGetSnowflakePlatformInfoPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSystemGetSnowflakePlatformInfoResult> getSystemGetSnowflakePlatformInfo(InvokeArgs args) {
        return getSystemGetSnowflakePlatformInfo(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetSystemGetSnowflakePlatformInfoResult> getSystemGetSnowflakePlatformInfoPlain(InvokeArgs args) {
        return getSystemGetSnowflakePlatformInfoPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSystemGetSnowflakePlatformInfoResult> getSystemGetSnowflakePlatformInfo(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getSystemGetSnowflakePlatformInfo:getSystemGetSnowflakePlatformInfo", TypeShape.of(GetSystemGetSnowflakePlatformInfoResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetSystemGetSnowflakePlatformInfoResult> getSystemGetSnowflakePlatformInfo(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getSystemGetSnowflakePlatformInfo:getSystemGetSnowflakePlatformInfo", TypeShape.of(GetSystemGetSnowflakePlatformInfoResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetSystemGetSnowflakePlatformInfoResult> getSystemGetSnowflakePlatformInfoPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getSystemGetSnowflakePlatformInfo:getSystemGetSnowflakePlatformInfo", TypeShape.of(GetSystemGetSnowflakePlatformInfoResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetTablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getTables(GetTablesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetTablesResult> getTables(GetTablesArgs args) {
        return getTables(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetTablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getTables(GetTablesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetTablesResult> getTablesPlain(GetTablesPlainArgs args) {
        return getTablesPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetTablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getTables(GetTablesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetTablesResult> getTables(GetTablesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getTables:getTables", TypeShape.of(GetTablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetTablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getTables(GetTablesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static Output<GetTablesResult> getTables(GetTablesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getTables:getTables", TypeShape.of(GetTablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.snowflake.SnowflakeFunctions;
     * import com.pulumi.snowflake.inputs.GetTablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = SnowflakeFunctions.getTables(GetTablesArgs.builder()
     *             .database("MYDB")
     *             .schema("MYSCHEMA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
     * 
     */
    public static CompletableFuture<GetTablesResult> getTablesPlain(GetTablesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getTables:getTables", TypeShape.of(GetTablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered tags. Filtering is aligned with the current possibilities for [SHOW TAGS](https://docs.snowflake.com/en/sql-reference/sql/show-tags) query. The results of SHOW are encapsulated in one output collection `tags`.
     * 
     */
    public static Output<GetTagsResult> getTags() {
        return getTags(GetTagsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered tags. Filtering is aligned with the current possibilities for [SHOW TAGS](https://docs.snowflake.com/en/sql-reference/sql/show-tags) query. The results of SHOW are encapsulated in one output collection `tags`.
     * 
     */
    public static CompletableFuture<GetTagsResult> getTagsPlain() {
        return getTagsPlain(GetTagsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered tags. Filtering is aligned with the current possibilities for [SHOW TAGS](https://docs.snowflake.com/en/sql-reference/sql/show-tags) query. The results of SHOW are encapsulated in one output collection `tags`.
     * 
     */
    public static Output<GetTagsResult> getTags(GetTagsArgs args) {
        return getTags(args, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered tags. Filtering is aligned with the current possibilities for [SHOW TAGS](https://docs.snowflake.com/en/sql-reference/sql/show-tags) query. The results of SHOW are encapsulated in one output collection `tags`.
     * 
     */
    public static CompletableFuture<GetTagsResult> getTagsPlain(GetTagsPlainArgs args) {
        return getTagsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered tags. Filtering is aligned with the current possibilities for [SHOW TAGS](https://docs.snowflake.com/en/sql-reference/sql/show-tags) query. The results of SHOW are encapsulated in one output collection `tags`.
     * 
     */
    public static Output<GetTagsResult> getTags(GetTagsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getTags:getTags", TypeShape.of(GetTagsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered tags. Filtering is aligned with the current possibilities for [SHOW TAGS](https://docs.snowflake.com/en/sql-reference/sql/show-tags) query. The results of SHOW are encapsulated in one output collection `tags`.
     * 
     */
    public static Output<GetTagsResult> getTags(GetTagsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getTags:getTags", TypeShape.of(GetTagsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered tags. Filtering is aligned with the current possibilities for [SHOW TAGS](https://docs.snowflake.com/en/sql-reference/sql/show-tags) query. The results of SHOW are encapsulated in one output collection `tags`.
     * 
     */
    public static CompletableFuture<GetTagsResult> getTagsPlain(GetTagsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getTags:getTags", TypeShape.of(GetTagsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Sensitive values** This data source&#39;s `show_output.config` and `show_output.definition` fields are not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered tasks. Filtering is aligned with the current possibilities for [SHOW TASKS](https://docs.snowflake.com/en/sql-reference/sql/show-tasks) query. The results of SHOW and SHOW PARAMETERS IN are encapsulated in one output collection `tasks`.
     * 
     */
    public static Output<GetTasksResult> getTasks() {
        return getTasks(GetTasksArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Sensitive values** This data source&#39;s `show_output.config` and `show_output.definition` fields are not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered tasks. Filtering is aligned with the current possibilities for [SHOW TASKS](https://docs.snowflake.com/en/sql-reference/sql/show-tasks) query. The results of SHOW and SHOW PARAMETERS IN are encapsulated in one output collection `tasks`.
     * 
     */
    public static CompletableFuture<GetTasksResult> getTasksPlain() {
        return getTasksPlain(GetTasksPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Sensitive values** This data source&#39;s `show_output.config` and `show_output.definition` fields are not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered tasks. Filtering is aligned with the current possibilities for [SHOW TASKS](https://docs.snowflake.com/en/sql-reference/sql/show-tasks) query. The results of SHOW and SHOW PARAMETERS IN are encapsulated in one output collection `tasks`.
     * 
     */
    public static Output<GetTasksResult> getTasks(GetTasksArgs args) {
        return getTasks(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Sensitive values** This data source&#39;s `show_output.config` and `show_output.definition` fields are not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered tasks. Filtering is aligned with the current possibilities for [SHOW TASKS](https://docs.snowflake.com/en/sql-reference/sql/show-tasks) query. The results of SHOW and SHOW PARAMETERS IN are encapsulated in one output collection `tasks`.
     * 
     */
    public static CompletableFuture<GetTasksResult> getTasksPlain(GetTasksPlainArgs args) {
        return getTasksPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Sensitive values** This data source&#39;s `show_output.config` and `show_output.definition` fields are not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered tasks. Filtering is aligned with the current possibilities for [SHOW TASKS](https://docs.snowflake.com/en/sql-reference/sql/show-tasks) query. The results of SHOW and SHOW PARAMETERS IN are encapsulated in one output collection `tasks`.
     * 
     */
    public static Output<GetTasksResult> getTasks(GetTasksArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getTasks:getTasks", TypeShape.of(GetTasksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Sensitive values** This data source&#39;s `show_output.config` and `show_output.definition` fields are not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered tasks. Filtering is aligned with the current possibilities for [SHOW TASKS](https://docs.snowflake.com/en/sql-reference/sql/show-tasks) query. The results of SHOW and SHOW PARAMETERS IN are encapsulated in one output collection `tasks`.
     * 
     */
    public static Output<GetTasksResult> getTasks(GetTasksArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getTasks:getTasks", TypeShape.of(GetTasksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Sensitive values** This data source&#39;s `show_output.config` and `show_output.definition` fields are not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered tasks. Filtering is aligned with the current possibilities for [SHOW TASKS](https://docs.snowflake.com/en/sql-reference/sql/show-tasks) query. The results of SHOW and SHOW PARAMETERS IN are encapsulated in one output collection `tasks`.
     * 
     */
    public static CompletableFuture<GetTasksResult> getTasksPlain(GetTasksPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getTasks:getTasks", TypeShape.of(GetTasksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetUsersResult> getUsers() {
        return getUsers(GetUsersArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetUsersResult> getUsersPlain() {
        return getUsersPlain(GetUsersPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetUsersResult> getUsers(GetUsersArgs args) {
        return getUsers(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetUsersResult> getUsersPlain(GetUsersPlainArgs args) {
        return getUsersPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetUsersResult> getUsers(GetUsersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getUsers:getUsers", TypeShape.of(GetUsersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetUsersResult> getUsers(GetUsersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getUsers:getUsers", TypeShape.of(GetUsersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetUsersResult> getUsersPlain(GetUsersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getUsers:getUsers", TypeShape.of(GetUsersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Sensitive values** This resource&#39;s `show_output.text` field is not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered views. Filtering is aligned with the current possibilities for [SHOW VIEWS](https://docs.snowflake.com/en/sql-reference/sql/show-views) query (only `like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection `views`.
     * 
     */
    public static Output<GetViewsResult> getViews() {
        return getViews(GetViewsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Sensitive values** This resource&#39;s `show_output.text` field is not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered views. Filtering is aligned with the current possibilities for [SHOW VIEWS](https://docs.snowflake.com/en/sql-reference/sql/show-views) query (only `like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection `views`.
     * 
     */
    public static CompletableFuture<GetViewsResult> getViewsPlain() {
        return getViewsPlain(GetViewsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Sensitive values** This resource&#39;s `show_output.text` field is not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered views. Filtering is aligned with the current possibilities for [SHOW VIEWS](https://docs.snowflake.com/en/sql-reference/sql/show-views) query (only `like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection `views`.
     * 
     */
    public static Output<GetViewsResult> getViews(GetViewsArgs args) {
        return getViews(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Sensitive values** This resource&#39;s `show_output.text` field is not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered views. Filtering is aligned with the current possibilities for [SHOW VIEWS](https://docs.snowflake.com/en/sql-reference/sql/show-views) query (only `like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection `views`.
     * 
     */
    public static CompletableFuture<GetViewsResult> getViewsPlain(GetViewsPlainArgs args) {
        return getViewsPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Sensitive values** This resource&#39;s `show_output.text` field is not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered views. Filtering is aligned with the current possibilities for [SHOW VIEWS](https://docs.snowflake.com/en/sql-reference/sql/show-views) query (only `like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection `views`.
     * 
     */
    public static Output<GetViewsResult> getViews(GetViewsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getViews:getViews", TypeShape.of(GetViewsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Sensitive values** This resource&#39;s `show_output.text` field is not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered views. Filtering is aligned with the current possibilities for [SHOW VIEWS](https://docs.snowflake.com/en/sql-reference/sql/show-views) query (only `like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection `views`.
     * 
     */
    public static Output<GetViewsResult> getViews(GetViewsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getViews:getViews", TypeShape.of(GetViewsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Sensitive values** This resource&#39;s `show_output.text` field is not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
     * 
     * Data source used to get details of filtered views. Filtering is aligned with the current possibilities for [SHOW VIEWS](https://docs.snowflake.com/en/sql-reference/sql/show-views) query (only `like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection `views`.
     * 
     */
    public static CompletableFuture<GetViewsResult> getViewsPlain(GetViewsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getViews:getViews", TypeShape.of(GetViewsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered warehouses. Filtering is aligned with the current possibilities for [SHOW WAREHOUSES](https://docs.snowflake.com/en/sql-reference/sql/show-warehouses) query (only `like` is supported). The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.
     * 
     */
    public static Output<GetWarehousesResult> getWarehouses() {
        return getWarehouses(GetWarehousesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered warehouses. Filtering is aligned with the current possibilities for [SHOW WAREHOUSES](https://docs.snowflake.com/en/sql-reference/sql/show-warehouses) query (only `like` is supported). The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.
     * 
     */
    public static CompletableFuture<GetWarehousesResult> getWarehousesPlain() {
        return getWarehousesPlain(GetWarehousesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered warehouses. Filtering is aligned with the current possibilities for [SHOW WAREHOUSES](https://docs.snowflake.com/en/sql-reference/sql/show-warehouses) query (only `like` is supported). The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.
     * 
     */
    public static Output<GetWarehousesResult> getWarehouses(GetWarehousesArgs args) {
        return getWarehouses(args, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered warehouses. Filtering is aligned with the current possibilities for [SHOW WAREHOUSES](https://docs.snowflake.com/en/sql-reference/sql/show-warehouses) query (only `like` is supported). The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.
     * 
     */
    public static CompletableFuture<GetWarehousesResult> getWarehousesPlain(GetWarehousesPlainArgs args) {
        return getWarehousesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source used to get details of filtered warehouses. Filtering is aligned with the current possibilities for [SHOW WAREHOUSES](https://docs.snowflake.com/en/sql-reference/sql/show-warehouses) query (only `like` is supported). The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.
     * 
     */
    public static Output<GetWarehousesResult> getWarehouses(GetWarehousesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getWarehouses:getWarehouses", TypeShape.of(GetWarehousesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered warehouses. Filtering is aligned with the current possibilities for [SHOW WAREHOUSES](https://docs.snowflake.com/en/sql-reference/sql/show-warehouses) query (only `like` is supported). The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.
     * 
     */
    public static Output<GetWarehousesResult> getWarehouses(GetWarehousesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("snowflake:index/getWarehouses:getWarehouses", TypeShape.of(GetWarehousesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source used to get details of filtered warehouses. Filtering is aligned with the current possibilities for [SHOW WAREHOUSES](https://docs.snowflake.com/en/sql-reference/sql/show-warehouses) query (only `like` is supported). The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.
     * 
     */
    public static CompletableFuture<GetWarehousesResult> getWarehousesPlain(GetWarehousesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("snowflake:index/getWarehouses:getWarehouses", TypeShape.of(GetWarehousesResult.class), args, Utilities.withVersion(options));
    }
}
