// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedAccountState extends com.pulumi.resources.ResourceArgs {

    public static final ManagedAccountState Empty = new ManagedAccountState();

    /**
     * Identifier, as well as login name, for the initial user in the managed account. This user serves as the account administrator for the account.
     * 
     */
    @Import(name="adminName")
    private @Nullable Output<String> adminName;

    /**
     * @return Identifier, as well as login name, for the initial user in the managed account. This user serves as the account administrator for the account.
     * 
     */
    public Optional<Output<String>> adminName() {
        return Optional.ofNullable(this.adminName);
    }

    /**
     * Password for the initial user in the managed account.
     * 
     */
    @Import(name="adminPassword")
    private @Nullable Output<String> adminPassword;

    /**
     * @return Password for the initial user in the managed account.
     * 
     */
    public Optional<Output<String>> adminPassword() {
        return Optional.ofNullable(this.adminPassword);
    }

    /**
     * Cloud in which the managed account is located.
     * 
     */
    @Import(name="cloud")
    private @Nullable Output<String> cloud;

    /**
     * @return Cloud in which the managed account is located.
     * 
     */
    public Optional<Output<String>> cloud() {
        return Optional.ofNullable(this.cloud);
    }

    /**
     * Specifies a comment for the managed account.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Specifies a comment for the managed account.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * Date and time when the managed account was created.
     * 
     */
    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    /**
     * @return Date and time when the managed account was created.
     * 
     */
    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    /**
     * Display name of the managed account.
     * 
     */
    @Import(name="locator")
    private @Nullable Output<String> locator;

    /**
     * @return Display name of the managed account.
     * 
     */
    public Optional<Output<String>> locator() {
        return Optional.ofNullable(this.locator);
    }

    /**
     * Identifier for the managed account; must be unique for your account.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Identifier for the managed account; must be unique for your account.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Snowflake Region in which the managed account is located.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Snowflake Region in which the managed account is located.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Specifies the type of managed account.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Specifies the type of managed account.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * URL for accessing the managed account, particularly through the web interface.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return URL for accessing the managed account, particularly through the web interface.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private ManagedAccountState() {}

    private ManagedAccountState(ManagedAccountState $) {
        this.adminName = $.adminName;
        this.adminPassword = $.adminPassword;
        this.cloud = $.cloud;
        this.comment = $.comment;
        this.createdOn = $.createdOn;
        this.locator = $.locator;
        this.name = $.name;
        this.region = $.region;
        this.type = $.type;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedAccountState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedAccountState $;

        public Builder() {
            $ = new ManagedAccountState();
        }

        public Builder(ManagedAccountState defaults) {
            $ = new ManagedAccountState(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminName Identifier, as well as login name, for the initial user in the managed account. This user serves as the account administrator for the account.
         * 
         * @return builder
         * 
         */
        public Builder adminName(@Nullable Output<String> adminName) {
            $.adminName = adminName;
            return this;
        }

        /**
         * @param adminName Identifier, as well as login name, for the initial user in the managed account. This user serves as the account administrator for the account.
         * 
         * @return builder
         * 
         */
        public Builder adminName(String adminName) {
            return adminName(Output.of(adminName));
        }

        /**
         * @param adminPassword Password for the initial user in the managed account.
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(@Nullable Output<String> adminPassword) {
            $.adminPassword = adminPassword;
            return this;
        }

        /**
         * @param adminPassword Password for the initial user in the managed account.
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(String adminPassword) {
            return adminPassword(Output.of(adminPassword));
        }

        /**
         * @param cloud Cloud in which the managed account is located.
         * 
         * @return builder
         * 
         */
        public Builder cloud(@Nullable Output<String> cloud) {
            $.cloud = cloud;
            return this;
        }

        /**
         * @param cloud Cloud in which the managed account is located.
         * 
         * @return builder
         * 
         */
        public Builder cloud(String cloud) {
            return cloud(Output.of(cloud));
        }

        /**
         * @param comment Specifies a comment for the managed account.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Specifies a comment for the managed account.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param createdOn Date and time when the managed account was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        /**
         * @param createdOn Date and time when the managed account was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        /**
         * @param locator Display name of the managed account.
         * 
         * @return builder
         * 
         */
        public Builder locator(@Nullable Output<String> locator) {
            $.locator = locator;
            return this;
        }

        /**
         * @param locator Display name of the managed account.
         * 
         * @return builder
         * 
         */
        public Builder locator(String locator) {
            return locator(Output.of(locator));
        }

        /**
         * @param name Identifier for the managed account; must be unique for your account.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Identifier for the managed account; must be unique for your account.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param region Snowflake Region in which the managed account is located.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Snowflake Region in which the managed account is located.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param type Specifies the type of managed account.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Specifies the type of managed account.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param url URL for accessing the managed account, particularly through the web interface.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url URL for accessing the managed account, particularly through the web interface.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public ManagedAccountState build() {
            return $;
        }
    }

}
