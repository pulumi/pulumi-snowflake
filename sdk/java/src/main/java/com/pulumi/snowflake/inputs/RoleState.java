// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.snowflake.inputs.RoleShowOutputArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RoleState extends com.pulumi.resources.ResourceArgs {

    public static final RoleState Empty = new RoleState();

    @Import(name="comment")
    private @Nullable Output<String> comment;

    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Outputs the result of `SHOW ROLES` for the given role.
     * 
     */
    @Import(name="showOutputs")
    private @Nullable Output<List<RoleShowOutputArgs>> showOutputs;

    /**
     * @return Outputs the result of `SHOW ROLES` for the given role.
     * 
     */
    public Optional<Output<List<RoleShowOutputArgs>>> showOutputs() {
        return Optional.ofNullable(this.showOutputs);
    }

    private RoleState() {}

    private RoleState(RoleState $) {
        this.comment = $.comment;
        this.name = $.name;
        this.showOutputs = $.showOutputs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoleState $;

        public Builder() {
            $ = new RoleState();
        }

        public Builder(RoleState defaults) {
            $ = new RoleState(Objects.requireNonNull(defaults));
        }

        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param showOutputs Outputs the result of `SHOW ROLES` for the given role.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(@Nullable Output<List<RoleShowOutputArgs>> showOutputs) {
            $.showOutputs = showOutputs;
            return this;
        }

        /**
         * @param showOutputs Outputs the result of `SHOW ROLES` for the given role.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(List<RoleShowOutputArgs> showOutputs) {
            return showOutputs(Output.of(showOutputs));
        }

        /**
         * @param showOutputs Outputs the result of `SHOW ROLES` for the given role.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(RoleShowOutputArgs... showOutputs) {
            return showOutputs(List.of(showOutputs));
        }

        public RoleState build() {
            return $;
        }
    }

}
