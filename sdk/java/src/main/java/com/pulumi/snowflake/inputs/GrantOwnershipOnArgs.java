// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.snowflake.inputs.GrantOwnershipOnAllArgs;
import com.pulumi.snowflake.inputs.GrantOwnershipOnFutureArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GrantOwnershipOnArgs extends com.pulumi.resources.ResourceArgs {

    public static final GrantOwnershipOnArgs Empty = new GrantOwnershipOnArgs();

    /**
     * Configures the privilege to be granted on all objects in either a database or schema.
     * 
     */
    @Import(name="all")
    private @Nullable Output<GrantOwnershipOnAllArgs> all;

    /**
     * @return Configures the privilege to be granted on all objects in either a database or schema.
     * 
     */
    public Optional<Output<GrantOwnershipOnAllArgs>> all() {
        return Optional.ofNullable(this.all);
    }

    /**
     * Configures the privilege to be granted on all objects in either a database or schema.
     * 
     */
    @Import(name="future")
    private @Nullable Output<GrantOwnershipOnFutureArgs> future;

    /**
     * @return Configures the privilege to be granted on all objects in either a database or schema.
     * 
     */
    public Optional<Output<GrantOwnershipOnFutureArgs>> future() {
        return Optional.ofNullable(this.future);
    }

    /**
     * Specifies the identifier for the object on which you are transferring ownership.
     * 
     */
    @Import(name="objectName")
    private @Nullable Output<String> objectName;

    /**
     * @return Specifies the identifier for the object on which you are transferring ownership.
     * 
     */
    public Optional<Output<String>> objectName() {
        return Optional.ofNullable(this.objectName);
    }

    /**
     * Specifies the type of object on which you are transferring ownership. Available values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | COMPUTE POOL | DATABASE | DATABASE ROLE | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | EXTERNAL VOLUME | FAILOVER GROUP | FILE FORMAT | FUNCTION | HYBRID TABLE | ICEBERG TABLE | IMAGE REPOSITORY | INTEGRATION | MATERIALIZED VIEW | NETWORK POLICY | NETWORK RULE | PACKAGES POLICY | PIPE | PROCEDURE | MASKING POLICY | PASSWORD POLICY | PROJECTION POLICY | REPLICATION GROUP | ROLE | ROW ACCESS POLICY | SCHEMA | SESSION POLICY | SECRET | SEQUENCE | STAGE | STREAM | TABLE | TAG | TASK | USER | VIEW | WAREHOUSE
     * 
     */
    @Import(name="objectType")
    private @Nullable Output<String> objectType;

    /**
     * @return Specifies the type of object on which you are transferring ownership. Available values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | COMPUTE POOL | DATABASE | DATABASE ROLE | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | EXTERNAL VOLUME | FAILOVER GROUP | FILE FORMAT | FUNCTION | HYBRID TABLE | ICEBERG TABLE | IMAGE REPOSITORY | INTEGRATION | MATERIALIZED VIEW | NETWORK POLICY | NETWORK RULE | PACKAGES POLICY | PIPE | PROCEDURE | MASKING POLICY | PASSWORD POLICY | PROJECTION POLICY | REPLICATION GROUP | ROLE | ROW ACCESS POLICY | SCHEMA | SESSION POLICY | SECRET | SEQUENCE | STAGE | STREAM | TABLE | TAG | TASK | USER | VIEW | WAREHOUSE
     * 
     */
    public Optional<Output<String>> objectType() {
        return Optional.ofNullable(this.objectType);
    }

    private GrantOwnershipOnArgs() {}

    private GrantOwnershipOnArgs(GrantOwnershipOnArgs $) {
        this.all = $.all;
        this.future = $.future;
        this.objectName = $.objectName;
        this.objectType = $.objectType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GrantOwnershipOnArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GrantOwnershipOnArgs $;

        public Builder() {
            $ = new GrantOwnershipOnArgs();
        }

        public Builder(GrantOwnershipOnArgs defaults) {
            $ = new GrantOwnershipOnArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param all Configures the privilege to be granted on all objects in either a database or schema.
         * 
         * @return builder
         * 
         */
        public Builder all(@Nullable Output<GrantOwnershipOnAllArgs> all) {
            $.all = all;
            return this;
        }

        /**
         * @param all Configures the privilege to be granted on all objects in either a database or schema.
         * 
         * @return builder
         * 
         */
        public Builder all(GrantOwnershipOnAllArgs all) {
            return all(Output.of(all));
        }

        /**
         * @param future Configures the privilege to be granted on all objects in either a database or schema.
         * 
         * @return builder
         * 
         */
        public Builder future(@Nullable Output<GrantOwnershipOnFutureArgs> future) {
            $.future = future;
            return this;
        }

        /**
         * @param future Configures the privilege to be granted on all objects in either a database or schema.
         * 
         * @return builder
         * 
         */
        public Builder future(GrantOwnershipOnFutureArgs future) {
            return future(Output.of(future));
        }

        /**
         * @param objectName Specifies the identifier for the object on which you are transferring ownership.
         * 
         * @return builder
         * 
         */
        public Builder objectName(@Nullable Output<String> objectName) {
            $.objectName = objectName;
            return this;
        }

        /**
         * @param objectName Specifies the identifier for the object on which you are transferring ownership.
         * 
         * @return builder
         * 
         */
        public Builder objectName(String objectName) {
            return objectName(Output.of(objectName));
        }

        /**
         * @param objectType Specifies the type of object on which you are transferring ownership. Available values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | COMPUTE POOL | DATABASE | DATABASE ROLE | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | EXTERNAL VOLUME | FAILOVER GROUP | FILE FORMAT | FUNCTION | HYBRID TABLE | ICEBERG TABLE | IMAGE REPOSITORY | INTEGRATION | MATERIALIZED VIEW | NETWORK POLICY | NETWORK RULE | PACKAGES POLICY | PIPE | PROCEDURE | MASKING POLICY | PASSWORD POLICY | PROJECTION POLICY | REPLICATION GROUP | ROLE | ROW ACCESS POLICY | SCHEMA | SESSION POLICY | SECRET | SEQUENCE | STAGE | STREAM | TABLE | TAG | TASK | USER | VIEW | WAREHOUSE
         * 
         * @return builder
         * 
         */
        public Builder objectType(@Nullable Output<String> objectType) {
            $.objectType = objectType;
            return this;
        }

        /**
         * @param objectType Specifies the type of object on which you are transferring ownership. Available values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | COMPUTE POOL | DATABASE | DATABASE ROLE | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | EXTERNAL VOLUME | FAILOVER GROUP | FILE FORMAT | FUNCTION | HYBRID TABLE | ICEBERG TABLE | IMAGE REPOSITORY | INTEGRATION | MATERIALIZED VIEW | NETWORK POLICY | NETWORK RULE | PACKAGES POLICY | PIPE | PROCEDURE | MASKING POLICY | PASSWORD POLICY | PROJECTION POLICY | REPLICATION GROUP | ROLE | ROW ACCESS POLICY | SCHEMA | SESSION POLICY | SECRET | SEQUENCE | STAGE | STREAM | TABLE | TAG | TASK | USER | VIEW | WAREHOUSE
         * 
         * @return builder
         * 
         */
        public Builder objectType(String objectType) {
            return objectType(Output.of(objectType));
        }

        public GrantOwnershipOnArgs build() {
            return $;
        }
    }

}
