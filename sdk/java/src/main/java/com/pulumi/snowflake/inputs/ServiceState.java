// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.snowflake.inputs.ServiceDescribeOutputArgs;
import com.pulumi.snowflake.inputs.ServiceFromSpecificationArgs;
import com.pulumi.snowflake.inputs.ServiceFromSpecificationTemplateArgs;
import com.pulumi.snowflake.inputs.ServiceShowOutputArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceState extends com.pulumi.resources.ResourceArgs {

    public static final ServiceState Empty = new ServiceState();

    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a service. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
     * 
     */
    @Import(name="autoResume")
    private @Nullable Output<String> autoResume;

    /**
     * @return (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a service. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
     * 
     */
    public Optional<Output<String>> autoResume() {
        return Optional.ofNullable(this.autoResume);
    }

    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the number of seconds of inactivity (service is idle) after which Snowflake automatically suspends the service.
     * 
     */
    @Import(name="autoSuspendSecs")
    private @Nullable Output<Integer> autoSuspendSecs;

    /**
     * @return (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the number of seconds of inactivity (service is idle) after which Snowflake automatically suspends the service.
     * 
     */
    public Optional<Output<Integer>> autoSuspendSecs() {
        return Optional.ofNullable(this.autoSuspendSecs);
    }

    /**
     * Specifies a comment for the service.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Specifies a comment for the service.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * Specifies the name of the compute pool in your account on which to run the service. Identifiers with special or lower-case characters are not supported. This limitation in the provider follows the limitation in Snowflake (see [docs](https://docs.snowflake.com/en/sql-reference/sql/create-compute-pool)). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="computePool")
    private @Nullable Output<String> computePool;

    /**
     * @return Specifies the name of the compute pool in your account on which to run the service. Identifiers with special or lower-case characters are not supported. This limitation in the provider follows the limitation in Snowflake (see [docs](https://docs.snowflake.com/en/sql-reference/sql/create-compute-pool)). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> computePool() {
        return Optional.ofNullable(this.computePool);
    }

    /**
     * The database in which to create the service. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="database")
    private @Nullable Output<String> database;

    /**
     * @return The database in which to create the service. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> database() {
        return Optional.ofNullable(this.database);
    }

    /**
     * Outputs the result of `DESCRIBE SERVICE` for the given service.
     * 
     */
    @Import(name="describeOutputs")
    private @Nullable Output<List<ServiceDescribeOutputArgs>> describeOutputs;

    /**
     * @return Outputs the result of `DESCRIBE SERVICE` for the given service.
     * 
     */
    public Optional<Output<List<ServiceDescribeOutputArgs>>> describeOutputs() {
        return Optional.ofNullable(this.describeOutputs);
    }

    /**
     * Specifies the names of the external access integrations that allow your service to access external sites.
     * 
     */
    @Import(name="externalAccessIntegrations")
    private @Nullable Output<List<String>> externalAccessIntegrations;

    /**
     * @return Specifies the names of the external access integrations that allow your service to access external sites.
     * 
     */
    public Optional<Output<List<String>>> externalAccessIntegrations() {
        return Optional.ofNullable(this.externalAccessIntegrations);
    }

    /**
     * Specifies the service specification to use for the service. Note that external changes on this field and nested fields are not detected. Use correctly formatted YAML files. Watch out for the space/tabs indentation. See [service specification](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/specification-reference#general-guidelines) for more information.
     * 
     */
    @Import(name="fromSpecification")
    private @Nullable Output<ServiceFromSpecificationArgs> fromSpecification;

    /**
     * @return Specifies the service specification to use for the service. Note that external changes on this field and nested fields are not detected. Use correctly formatted YAML files. Watch out for the space/tabs indentation. See [service specification](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/specification-reference#general-guidelines) for more information.
     * 
     */
    public Optional<Output<ServiceFromSpecificationArgs>> fromSpecification() {
        return Optional.ofNullable(this.fromSpecification);
    }

    /**
     * Specifies the service specification template to use for the service. Note that external changes on this field and nested fields are not detected. Use correctly formatted YAML files. Watch out for the space/tabs indentation. See [service specification](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/specification-reference#general-guidelines) for more information.
     * 
     */
    @Import(name="fromSpecificationTemplate")
    private @Nullable Output<ServiceFromSpecificationTemplateArgs> fromSpecificationTemplate;

    /**
     * @return Specifies the service specification template to use for the service. Note that external changes on this field and nested fields are not detected. Use correctly formatted YAML files. Watch out for the space/tabs indentation. See [service specification](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/specification-reference#general-guidelines) for more information.
     * 
     */
    public Optional<Output<ServiceFromSpecificationTemplateArgs>> fromSpecificationTemplate() {
        return Optional.ofNullable(this.fromSpecificationTemplate);
    }

    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    @Import(name="fullyQualifiedName")
    private @Nullable Output<String> fullyQualifiedName;

    /**
     * @return Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    public Optional<Output<String>> fullyQualifiedName() {
        return Optional.ofNullable(this.fullyQualifiedName);
    }

    /**
     * Specifies the maximum number of service instances to run.
     * 
     */
    @Import(name="maxInstances")
    private @Nullable Output<Integer> maxInstances;

    /**
     * @return Specifies the maximum number of service instances to run.
     * 
     */
    public Optional<Output<Integer>> maxInstances() {
        return Optional.ofNullable(this.maxInstances);
    }

    /**
     * Specifies the minimum number of service instances to run.
     * 
     */
    @Import(name="minInstances")
    private @Nullable Output<Integer> minInstances;

    /**
     * @return Specifies the minimum number of service instances to run.
     * 
     */
    public Optional<Output<Integer>> minInstances() {
        return Optional.ofNullable(this.minInstances);
    }

    /**
     * Indicates the minimum service instances that must be ready for Snowflake to consider the service is ready to process requests.
     * 
     */
    @Import(name="minReadyInstances")
    private @Nullable Output<Integer> minReadyInstances;

    /**
     * @return Indicates the minimum service instances that must be ready for Snowflake to consider the service is ready to process requests.
     * 
     */
    public Optional<Output<Integer>> minReadyInstances() {
        return Optional.ofNullable(this.minReadyInstances);
    }

    /**
     * Specifies the identifier for the service; must be unique for the schema in which the service is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the identifier for the service; must be unique for the schema in which the service is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Warehouse to use if a service container connects to Snowflake to execute a query but does not explicitly specify a warehouse to use. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="queryWarehouse")
    private @Nullable Output<String> queryWarehouse;

    /**
     * @return Warehouse to use if a service container connects to Snowflake to execute a query but does not explicitly specify a warehouse to use. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> queryWarehouse() {
        return Optional.ofNullable(this.queryWarehouse);
    }

    /**
     * The schema in which to create the service. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="schema")
    private @Nullable Output<String> schema;

    /**
     * @return The schema in which to create the service. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> schema() {
        return Optional.ofNullable(this.schema);
    }

    /**
     * Specifies a type for the service. This field is used for checking external changes and recreating the resources if needed.
     * 
     */
    @Import(name="serviceType")
    private @Nullable Output<String> serviceType;

    /**
     * @return Specifies a type for the service. This field is used for checking external changes and recreating the resources if needed.
     * 
     */
    public Optional<Output<String>> serviceType() {
        return Optional.ofNullable(this.serviceType);
    }

    /**
     * Outputs the result of `SHOW SERVICES` for the given service.
     * 
     */
    @Import(name="showOutputs")
    private @Nullable Output<List<ServiceShowOutputArgs>> showOutputs;

    /**
     * @return Outputs the result of `SHOW SERVICES` for the given service.
     * 
     */
    public Optional<Output<List<ServiceShowOutputArgs>>> showOutputs() {
        return Optional.ofNullable(this.showOutputs);
    }

    private ServiceState() {}

    private ServiceState(ServiceState $) {
        this.autoResume = $.autoResume;
        this.autoSuspendSecs = $.autoSuspendSecs;
        this.comment = $.comment;
        this.computePool = $.computePool;
        this.database = $.database;
        this.describeOutputs = $.describeOutputs;
        this.externalAccessIntegrations = $.externalAccessIntegrations;
        this.fromSpecification = $.fromSpecification;
        this.fromSpecificationTemplate = $.fromSpecificationTemplate;
        this.fullyQualifiedName = $.fullyQualifiedName;
        this.maxInstances = $.maxInstances;
        this.minInstances = $.minInstances;
        this.minReadyInstances = $.minReadyInstances;
        this.name = $.name;
        this.queryWarehouse = $.queryWarehouse;
        this.schema = $.schema;
        this.serviceType = $.serviceType;
        this.showOutputs = $.showOutputs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceState $;

        public Builder() {
            $ = new ServiceState();
        }

        public Builder(ServiceState defaults) {
            $ = new ServiceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoResume (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a service. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
         * 
         * @return builder
         * 
         */
        public Builder autoResume(@Nullable Output<String> autoResume) {
            $.autoResume = autoResume;
            return this;
        }

        /**
         * @param autoResume (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a service. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
         * 
         * @return builder
         * 
         */
        public Builder autoResume(String autoResume) {
            return autoResume(Output.of(autoResume));
        }

        /**
         * @param autoSuspendSecs (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the number of seconds of inactivity (service is idle) after which Snowflake automatically suspends the service.
         * 
         * @return builder
         * 
         */
        public Builder autoSuspendSecs(@Nullable Output<Integer> autoSuspendSecs) {
            $.autoSuspendSecs = autoSuspendSecs;
            return this;
        }

        /**
         * @param autoSuspendSecs (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the number of seconds of inactivity (service is idle) after which Snowflake automatically suspends the service.
         * 
         * @return builder
         * 
         */
        public Builder autoSuspendSecs(Integer autoSuspendSecs) {
            return autoSuspendSecs(Output.of(autoSuspendSecs));
        }

        /**
         * @param comment Specifies a comment for the service.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Specifies a comment for the service.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param computePool Specifies the name of the compute pool in your account on which to run the service. Identifiers with special or lower-case characters are not supported. This limitation in the provider follows the limitation in Snowflake (see [docs](https://docs.snowflake.com/en/sql-reference/sql/create-compute-pool)). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder computePool(@Nullable Output<String> computePool) {
            $.computePool = computePool;
            return this;
        }

        /**
         * @param computePool Specifies the name of the compute pool in your account on which to run the service. Identifiers with special or lower-case characters are not supported. This limitation in the provider follows the limitation in Snowflake (see [docs](https://docs.snowflake.com/en/sql-reference/sql/create-compute-pool)). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder computePool(String computePool) {
            return computePool(Output.of(computePool));
        }

        /**
         * @param database The database in which to create the service. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(@Nullable Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The database in which to create the service. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param describeOutputs Outputs the result of `DESCRIBE SERVICE` for the given service.
         * 
         * @return builder
         * 
         */
        public Builder describeOutputs(@Nullable Output<List<ServiceDescribeOutputArgs>> describeOutputs) {
            $.describeOutputs = describeOutputs;
            return this;
        }

        /**
         * @param describeOutputs Outputs the result of `DESCRIBE SERVICE` for the given service.
         * 
         * @return builder
         * 
         */
        public Builder describeOutputs(List<ServiceDescribeOutputArgs> describeOutputs) {
            return describeOutputs(Output.of(describeOutputs));
        }

        /**
         * @param describeOutputs Outputs the result of `DESCRIBE SERVICE` for the given service.
         * 
         * @return builder
         * 
         */
        public Builder describeOutputs(ServiceDescribeOutputArgs... describeOutputs) {
            return describeOutputs(List.of(describeOutputs));
        }

        /**
         * @param externalAccessIntegrations Specifies the names of the external access integrations that allow your service to access external sites.
         * 
         * @return builder
         * 
         */
        public Builder externalAccessIntegrations(@Nullable Output<List<String>> externalAccessIntegrations) {
            $.externalAccessIntegrations = externalAccessIntegrations;
            return this;
        }

        /**
         * @param externalAccessIntegrations Specifies the names of the external access integrations that allow your service to access external sites.
         * 
         * @return builder
         * 
         */
        public Builder externalAccessIntegrations(List<String> externalAccessIntegrations) {
            return externalAccessIntegrations(Output.of(externalAccessIntegrations));
        }

        /**
         * @param externalAccessIntegrations Specifies the names of the external access integrations that allow your service to access external sites.
         * 
         * @return builder
         * 
         */
        public Builder externalAccessIntegrations(String... externalAccessIntegrations) {
            return externalAccessIntegrations(List.of(externalAccessIntegrations));
        }

        /**
         * @param fromSpecification Specifies the service specification to use for the service. Note that external changes on this field and nested fields are not detected. Use correctly formatted YAML files. Watch out for the space/tabs indentation. See [service specification](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/specification-reference#general-guidelines) for more information.
         * 
         * @return builder
         * 
         */
        public Builder fromSpecification(@Nullable Output<ServiceFromSpecificationArgs> fromSpecification) {
            $.fromSpecification = fromSpecification;
            return this;
        }

        /**
         * @param fromSpecification Specifies the service specification to use for the service. Note that external changes on this field and nested fields are not detected. Use correctly formatted YAML files. Watch out for the space/tabs indentation. See [service specification](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/specification-reference#general-guidelines) for more information.
         * 
         * @return builder
         * 
         */
        public Builder fromSpecification(ServiceFromSpecificationArgs fromSpecification) {
            return fromSpecification(Output.of(fromSpecification));
        }

        /**
         * @param fromSpecificationTemplate Specifies the service specification template to use for the service. Note that external changes on this field and nested fields are not detected. Use correctly formatted YAML files. Watch out for the space/tabs indentation. See [service specification](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/specification-reference#general-guidelines) for more information.
         * 
         * @return builder
         * 
         */
        public Builder fromSpecificationTemplate(@Nullable Output<ServiceFromSpecificationTemplateArgs> fromSpecificationTemplate) {
            $.fromSpecificationTemplate = fromSpecificationTemplate;
            return this;
        }

        /**
         * @param fromSpecificationTemplate Specifies the service specification template to use for the service. Note that external changes on this field and nested fields are not detected. Use correctly formatted YAML files. Watch out for the space/tabs indentation. See [service specification](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/specification-reference#general-guidelines) for more information.
         * 
         * @return builder
         * 
         */
        public Builder fromSpecificationTemplate(ServiceFromSpecificationTemplateArgs fromSpecificationTemplate) {
            return fromSpecificationTemplate(Output.of(fromSpecificationTemplate));
        }

        /**
         * @param fullyQualifiedName Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
         * 
         * @return builder
         * 
         */
        public Builder fullyQualifiedName(@Nullable Output<String> fullyQualifiedName) {
            $.fullyQualifiedName = fullyQualifiedName;
            return this;
        }

        /**
         * @param fullyQualifiedName Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
         * 
         * @return builder
         * 
         */
        public Builder fullyQualifiedName(String fullyQualifiedName) {
            return fullyQualifiedName(Output.of(fullyQualifiedName));
        }

        /**
         * @param maxInstances Specifies the maximum number of service instances to run.
         * 
         * @return builder
         * 
         */
        public Builder maxInstances(@Nullable Output<Integer> maxInstances) {
            $.maxInstances = maxInstances;
            return this;
        }

        /**
         * @param maxInstances Specifies the maximum number of service instances to run.
         * 
         * @return builder
         * 
         */
        public Builder maxInstances(Integer maxInstances) {
            return maxInstances(Output.of(maxInstances));
        }

        /**
         * @param minInstances Specifies the minimum number of service instances to run.
         * 
         * @return builder
         * 
         */
        public Builder minInstances(@Nullable Output<Integer> minInstances) {
            $.minInstances = minInstances;
            return this;
        }

        /**
         * @param minInstances Specifies the minimum number of service instances to run.
         * 
         * @return builder
         * 
         */
        public Builder minInstances(Integer minInstances) {
            return minInstances(Output.of(minInstances));
        }

        /**
         * @param minReadyInstances Indicates the minimum service instances that must be ready for Snowflake to consider the service is ready to process requests.
         * 
         * @return builder
         * 
         */
        public Builder minReadyInstances(@Nullable Output<Integer> minReadyInstances) {
            $.minReadyInstances = minReadyInstances;
            return this;
        }

        /**
         * @param minReadyInstances Indicates the minimum service instances that must be ready for Snowflake to consider the service is ready to process requests.
         * 
         * @return builder
         * 
         */
        public Builder minReadyInstances(Integer minReadyInstances) {
            return minReadyInstances(Output.of(minReadyInstances));
        }

        /**
         * @param name Specifies the identifier for the service; must be unique for the schema in which the service is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the identifier for the service; must be unique for the schema in which the service is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param queryWarehouse Warehouse to use if a service container connects to Snowflake to execute a query but does not explicitly specify a warehouse to use. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder queryWarehouse(@Nullable Output<String> queryWarehouse) {
            $.queryWarehouse = queryWarehouse;
            return this;
        }

        /**
         * @param queryWarehouse Warehouse to use if a service container connects to Snowflake to execute a query but does not explicitly specify a warehouse to use. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder queryWarehouse(String queryWarehouse) {
            return queryWarehouse(Output.of(queryWarehouse));
        }

        /**
         * @param schema The schema in which to create the service. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder schema(@Nullable Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The schema in which to create the service. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param serviceType Specifies a type for the service. This field is used for checking external changes and recreating the resources if needed.
         * 
         * @return builder
         * 
         */
        public Builder serviceType(@Nullable Output<String> serviceType) {
            $.serviceType = serviceType;
            return this;
        }

        /**
         * @param serviceType Specifies a type for the service. This field is used for checking external changes and recreating the resources if needed.
         * 
         * @return builder
         * 
         */
        public Builder serviceType(String serviceType) {
            return serviceType(Output.of(serviceType));
        }

        /**
         * @param showOutputs Outputs the result of `SHOW SERVICES` for the given service.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(@Nullable Output<List<ServiceShowOutputArgs>> showOutputs) {
            $.showOutputs = showOutputs;
            return this;
        }

        /**
         * @param showOutputs Outputs the result of `SHOW SERVICES` for the given service.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(List<ServiceShowOutputArgs> showOutputs) {
            return showOutputs(Output.of(showOutputs));
        }

        /**
         * @param showOutputs Outputs the result of `SHOW SERVICES` for the given service.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(ServiceShowOutputArgs... showOutputs) {
            return showOutputs(List.of(showOutputs));
        }

        public ServiceState build() {
            return $;
        }
    }

}
