// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.snowflake.SamlIntegrationArgs;
import com.pulumi.snowflake.Utilities;
import com.pulumi.snowflake.inputs.SamlIntegrationState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.snowflake.SamlIntegration;
 * import com.pulumi.snowflake.SamlIntegrationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var samlIntegration = new SamlIntegration(&#34;samlIntegration&#34;, SamlIntegrationArgs.builder()        
 *             .enabled(true)
 *             .saml2Issuer(&#34;test_issuer&#34;)
 *             .saml2Provider(&#34;CUSTOM&#34;)
 *             .saml2SsoUrl(&#34;https://testsamlissuer.com&#34;)
 *             .saml2X509Cert(&#34;MIICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUFADAuMQswCQYDVQQGEwJVUzEMMAoGA1UEChMDSUJNMREwDwYDVQQLEwhMb2NhbCBDQTAeFw05OTEyMjIwNTAwMDBaFw0wMDEyMjMwNDU5NTlaMC4xCzAJBgNVBAYTAlVTMQwwCgYDVQQKEwNJQk0xETAPBgNVBAsTCExvY2FsIENBMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD2bZEo7xGaX2/0GHkrNFZvlxBou9v1Jmt/PDiTMPve8r9FeJAQ0QdvFST/0JPQYD20rH0bimdDLgNdNynmyRoS2S/IInfpmf69iyc2G0TPyRvmHIiOZbdCd+YBHQi1adkj17NDcWj6S14tVurFX73zx0sNoMS79q3tuXKrDsxeuwIDAQABo4GQMIGNMEsGCVUdDwGG+EIBDQQ+EzxHZW5lcmF0ZWQgYnkgdGhlIFNlY3VyZVdheSBTZWN1cml0eSBTZXJ2ZXIgZm9yIE9TLzM5MCAoUkFDRikwDgYDVR0PAQH/BAQDAgAGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFJ3+ocRyCTJw067dLSwr/nalx6YMMA0GCSqGSIb3DQEBBQUAA4GBAMaQzt+zaj1GU77yzlr8iiMBXgdQrwsZZWJo5exnAucJAEYQZmOfyLiMD6oYq+ZnfvM0n8G/Y79q8nhwvuxpYOnRSAXFp6xSkrIOeZtJMY1h00LKp/JX3Ng1svZ2agE126JHsQ0bhzN5TKsYfbwfTwfjdWAGy6Vf1nYi/rO+ryMO&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ```sh
 *  $ pulumi import snowflake:index/samlIntegration:SamlIntegration example name
 * ```
 * 
 */
@ResourceType(type="snowflake:index/samlIntegration:SamlIntegration")
public class SamlIntegration extends com.pulumi.resources.CustomResource {
    /**
     * Date and time when the SAML integration was created.
     * 
     */
    @Export(name="createdOn", refs={String.class}, tree="[0]")
    private Output<String> createdOn;

    /**
     * @return Date and time when the SAML integration was created.
     * 
     */
    public Output<String> createdOn() {
        return this.createdOn;
    }
    /**
     * Specifies whether this security integration is enabled or disabled.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return Specifies whether this security integration is enabled or disabled.
     * 
     */
    public Output<Optional<Boolean>> enabled() {
        return Codegen.optional(this.enabled);
    }
    /**
     * Specifies the name of the SAML2 integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Specifies the name of the SAML2 integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    @Export(name="saml2DigestMethodsUsed", refs={String.class}, tree="[0]")
    private Output<String> saml2DigestMethodsUsed;

    public Output<String> saml2DigestMethodsUsed() {
        return this.saml2DigestMethodsUsed;
    }
    /**
     * The Boolean indicating if the Log In With button will be shown on the login page. TRUE: displays the Log in WIth button on the login page.  FALSE: does not display the Log in With button on the login page.
     * 
     */
    @Export(name="saml2EnableSpInitiated", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> saml2EnableSpInitiated;

    /**
     * @return The Boolean indicating if the Log In With button will be shown on the login page. TRUE: displays the Log in WIth button on the login page.  FALSE: does not display the Log in With button on the login page.
     * 
     */
    public Output<Optional<Boolean>> saml2EnableSpInitiated() {
        return Codegen.optional(this.saml2EnableSpInitiated);
    }
    /**
     * The Boolean indicating whether users, during the initial authentication flow, are forced to authenticate again to access Snowflake. When set to TRUE, Snowflake sets the ForceAuthn SAML parameter to TRUE in the outgoing request from Snowflake to the identity provider. TRUE: forces users to authenticate again to access Snowflake, even if a valid session with the identity provider exists. FALSE: does not force users to authenticate again to access Snowflake.
     * 
     */
    @Export(name="saml2ForceAuthn", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> saml2ForceAuthn;

    /**
     * @return The Boolean indicating whether users, during the initial authentication flow, are forced to authenticate again to access Snowflake. When set to TRUE, Snowflake sets the ForceAuthn SAML parameter to TRUE in the outgoing request from Snowflake to the identity provider. TRUE: forces users to authenticate again to access Snowflake, even if a valid session with the identity provider exists. FALSE: does not force users to authenticate again to access Snowflake.
     * 
     */
    public Output<Optional<Boolean>> saml2ForceAuthn() {
        return Codegen.optional(this.saml2ForceAuthn);
    }
    /**
     * The string containing the IdP EntityID / Issuer.
     * 
     */
    @Export(name="saml2Issuer", refs={String.class}, tree="[0]")
    private Output<String> saml2Issuer;

    /**
     * @return The string containing the IdP EntityID / Issuer.
     * 
     */
    public Output<String> saml2Issuer() {
        return this.saml2Issuer;
    }
    /**
     * The endpoint to which Snowflake redirects users after clicking the Log Out button in the classic Snowflake web interface. Snowflake terminates the Snowflake session upon redirecting to the specified endpoint.
     * 
     */
    @Export(name="saml2PostLogoutRedirectUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> saml2PostLogoutRedirectUrl;

    /**
     * @return The endpoint to which Snowflake redirects users after clicking the Log Out button in the classic Snowflake web interface. Snowflake terminates the Snowflake session upon redirecting to the specified endpoint.
     * 
     */
    public Output<Optional<String>> saml2PostLogoutRedirectUrl() {
        return Codegen.optional(this.saml2PostLogoutRedirectUrl);
    }
    /**
     * The string describing the IdP. One of the following: OKTA, ADFS, Custom.
     * 
     */
    @Export(name="saml2Provider", refs={String.class}, tree="[0]")
    private Output<String> saml2Provider;

    /**
     * @return The string describing the IdP. One of the following: OKTA, ADFS, Custom.
     * 
     */
    public Output<String> saml2Provider() {
        return this.saml2Provider;
    }
    /**
     * The SAML NameID format allows Snowflake to set an expectation of the identifying attribute of the user (i.e. SAML Subject) in the SAML assertion from the IdP to ensure a valid authentication to Snowflake. If a value is not specified, Snowflake sends the urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress value in the authentication request to the IdP. NameID must be one of the following values: urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified, urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress, urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName, urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName, urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos, urn:oasis:names:tc:SAML:2.0:nameid-format:persistent, urn:oasis:names:tc:SAML:2.0:nameid-format:transient .
     * 
     */
    @Export(name="saml2RequestedNameidFormat", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> saml2RequestedNameidFormat;

    /**
     * @return The SAML NameID format allows Snowflake to set an expectation of the identifying attribute of the user (i.e. SAML Subject) in the SAML assertion from the IdP to ensure a valid authentication to Snowflake. If a value is not specified, Snowflake sends the urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress value in the authentication request to the IdP. NameID must be one of the following values: urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified, urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress, urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName, urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName, urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos, urn:oasis:names:tc:SAML:2.0:nameid-format:persistent, urn:oasis:names:tc:SAML:2.0:nameid-format:transient .
     * 
     */
    public Output<Optional<String>> saml2RequestedNameidFormat() {
        return Codegen.optional(this.saml2RequestedNameidFormat);
    }
    /**
     * The Boolean indicating whether SAML requests are signed. TRUE: allows SAML requests to be signed. FALSE: does not allow SAML requests to be signed.
     * 
     */
    @Export(name="saml2SignRequest", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> saml2SignRequest;

    /**
     * @return The Boolean indicating whether SAML requests are signed. TRUE: allows SAML requests to be signed. FALSE: does not allow SAML requests to be signed.
     * 
     */
    public Output<Optional<Boolean>> saml2SignRequest() {
        return Codegen.optional(this.saml2SignRequest);
    }
    @Export(name="saml2SignatureMethodsUsed", refs={String.class}, tree="[0]")
    private Output<String> saml2SignatureMethodsUsed;

    public Output<String> saml2SignatureMethodsUsed() {
        return this.saml2SignatureMethodsUsed;
    }
    /**
     * The string containing the Snowflake Assertion Consumer Service URL to which the IdP will send its SAML authentication response back to Snowflake. This property will be set in the SAML authentication request generated by Snowflake when initiating a SAML SSO operation with the IdP. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use. Default: https://\n\n.\n\n.snowflakecomputing.com/fed/login
     * 
     */
    @Export(name="saml2SnowflakeAcsUrl", refs={String.class}, tree="[0]")
    private Output<String> saml2SnowflakeAcsUrl;

    /**
     * @return The string containing the Snowflake Assertion Consumer Service URL to which the IdP will send its SAML authentication response back to Snowflake. This property will be set in the SAML authentication request generated by Snowflake when initiating a SAML SSO operation with the IdP. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use. Default: https://\n\n.\n\n.snowflakecomputing.com/fed/login
     * 
     */
    public Output<String> saml2SnowflakeAcsUrl() {
        return this.saml2SnowflakeAcsUrl;
    }
    /**
     * The string containing the EntityID / Issuer for the Snowflake service provider. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use.
     * 
     */
    @Export(name="saml2SnowflakeIssuerUrl", refs={String.class}, tree="[0]")
    private Output<String> saml2SnowflakeIssuerUrl;

    /**
     * @return The string containing the EntityID / Issuer for the Snowflake service provider. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use.
     * 
     */
    public Output<String> saml2SnowflakeIssuerUrl() {
        return this.saml2SnowflakeIssuerUrl;
    }
    /**
     * Metadata created by Snowflake to provide to SAML2 provider.
     * 
     */
    @Export(name="saml2SnowflakeMetadata", refs={String.class}, tree="[0]")
    private Output<String> saml2SnowflakeMetadata;

    /**
     * @return Metadata created by Snowflake to provide to SAML2 provider.
     * 
     */
    public Output<String> saml2SnowflakeMetadata() {
        return this.saml2SnowflakeMetadata;
    }
    /**
     * The Base64 encoded self-signed certificate generated by Snowflake for use with Encrypting SAML Assertions and Signed SAML Requests. You must have at least one of these features (encrypted SAML assertions or signed SAML responses) enabled in your Snowflake account to access the certificate value.
     * 
     */
    @Export(name="saml2SnowflakeX509Cert", refs={String.class}, tree="[0]")
    private Output<String> saml2SnowflakeX509Cert;

    /**
     * @return The Base64 encoded self-signed certificate generated by Snowflake for use with Encrypting SAML Assertions and Signed SAML Requests. You must have at least one of these features (encrypted SAML assertions or signed SAML responses) enabled in your Snowflake account to access the certificate value.
     * 
     */
    public Output<String> saml2SnowflakeX509Cert() {
        return this.saml2SnowflakeX509Cert;
    }
    /**
     * The string containing the label to display after the Log In With button on the login page.
     * 
     */
    @Export(name="saml2SpInitiatedLoginPageLabel", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> saml2SpInitiatedLoginPageLabel;

    /**
     * @return The string containing the label to display after the Log In With button on the login page.
     * 
     */
    public Output<Optional<String>> saml2SpInitiatedLoginPageLabel() {
        return Codegen.optional(this.saml2SpInitiatedLoginPageLabel);
    }
    /**
     * The string containing the IdP SSO URL, where the user should be redirected by Snowflake (the Service Provider) with a SAML AuthnRequest message.
     * 
     */
    @Export(name="saml2SsoUrl", refs={String.class}, tree="[0]")
    private Output<String> saml2SsoUrl;

    /**
     * @return The string containing the IdP SSO URL, where the user should be redirected by Snowflake (the Service Provider) with a SAML AuthnRequest message.
     * 
     */
    public Output<String> saml2SsoUrl() {
        return this.saml2SsoUrl;
    }
    /**
     * The Base64 encoded IdP signing certificate on a single line without the leading -----BEGIN CERTIFICATE----- and ending -----END CERTIFICATE----- markers.
     * 
     */
    @Export(name="saml2X509Cert", refs={String.class}, tree="[0]")
    private Output<String> saml2X509Cert;

    /**
     * @return The Base64 encoded IdP signing certificate on a single line without the leading -----BEGIN CERTIFICATE----- and ending -----END CERTIFICATE----- markers.
     * 
     */
    public Output<String> saml2X509Cert() {
        return this.saml2X509Cert;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SamlIntegration(String name) {
        this(name, SamlIntegrationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SamlIntegration(String name, SamlIntegrationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SamlIntegration(String name, SamlIntegrationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("snowflake:index/samlIntegration:SamlIntegration", name, args == null ? SamlIntegrationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SamlIntegration(String name, Output<String> id, @Nullable SamlIntegrationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("snowflake:index/samlIntegration:SamlIntegration", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SamlIntegration get(String name, Output<String> id, @Nullable SamlIntegrationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SamlIntegration(name, id, state, options);
    }
}
