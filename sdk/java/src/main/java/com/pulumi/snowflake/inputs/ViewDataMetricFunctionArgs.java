// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ViewDataMetricFunctionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ViewDataMetricFunctionArgs Empty = new ViewDataMetricFunctionArgs();

    /**
     * Identifier of the data metric function to add to the table or view or drop from the table or view. This function identifier must be provided without arguments in parenthesis.
     * 
     */
    @Import(name="functionName", required=true)
    private Output<String> functionName;

    /**
     * @return Identifier of the data metric function to add to the table or view or drop from the table or view. This function identifier must be provided without arguments in parenthesis.
     * 
     */
    public Output<String> functionName() {
        return this.functionName;
    }

    /**
     * The table or view columns on which to associate the data metric function. The data types of the columns must match the data types of the columns specified in the data metric function definition.
     * 
     */
    @Import(name="ons", required=true)
    private Output<List<String>> ons;

    /**
     * @return The table or view columns on which to associate the data metric function. The data types of the columns must match the data types of the columns specified in the data metric function definition.
     * 
     */
    public Output<List<String>> ons() {
        return this.ons;
    }

    /**
     * The status of the metrics association. Valid values are: `STARTED` | `SUSPENDED`. When status of a data metric function is changed, it is being reassigned with `DROP DATA METRIC FUNCTION` and `ADD DATA METRIC FUNCTION`, and then its status is changed by `MODIFY DATA METRIC FUNCTION`
     * 
     */
    @Import(name="scheduleStatus", required=true)
    private Output<String> scheduleStatus;

    /**
     * @return The status of the metrics association. Valid values are: `STARTED` | `SUSPENDED`. When status of a data metric function is changed, it is being reassigned with `DROP DATA METRIC FUNCTION` and `ADD DATA METRIC FUNCTION`, and then its status is changed by `MODIFY DATA METRIC FUNCTION`
     * 
     */
    public Output<String> scheduleStatus() {
        return this.scheduleStatus;
    }

    private ViewDataMetricFunctionArgs() {}

    private ViewDataMetricFunctionArgs(ViewDataMetricFunctionArgs $) {
        this.functionName = $.functionName;
        this.ons = $.ons;
        this.scheduleStatus = $.scheduleStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ViewDataMetricFunctionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ViewDataMetricFunctionArgs $;

        public Builder() {
            $ = new ViewDataMetricFunctionArgs();
        }

        public Builder(ViewDataMetricFunctionArgs defaults) {
            $ = new ViewDataMetricFunctionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param functionName Identifier of the data metric function to add to the table or view or drop from the table or view. This function identifier must be provided without arguments in parenthesis.
         * 
         * @return builder
         * 
         */
        public Builder functionName(Output<String> functionName) {
            $.functionName = functionName;
            return this;
        }

        /**
         * @param functionName Identifier of the data metric function to add to the table or view or drop from the table or view. This function identifier must be provided without arguments in parenthesis.
         * 
         * @return builder
         * 
         */
        public Builder functionName(String functionName) {
            return functionName(Output.of(functionName));
        }

        /**
         * @param ons The table or view columns on which to associate the data metric function. The data types of the columns must match the data types of the columns specified in the data metric function definition.
         * 
         * @return builder
         * 
         */
        public Builder ons(Output<List<String>> ons) {
            $.ons = ons;
            return this;
        }

        /**
         * @param ons The table or view columns on which to associate the data metric function. The data types of the columns must match the data types of the columns specified in the data metric function definition.
         * 
         * @return builder
         * 
         */
        public Builder ons(List<String> ons) {
            return ons(Output.of(ons));
        }

        /**
         * @param ons The table or view columns on which to associate the data metric function. The data types of the columns must match the data types of the columns specified in the data metric function definition.
         * 
         * @return builder
         * 
         */
        public Builder ons(String... ons) {
            return ons(List.of(ons));
        }

        /**
         * @param scheduleStatus The status of the metrics association. Valid values are: `STARTED` | `SUSPENDED`. When status of a data metric function is changed, it is being reassigned with `DROP DATA METRIC FUNCTION` and `ADD DATA METRIC FUNCTION`, and then its status is changed by `MODIFY DATA METRIC FUNCTION`
         * 
         * @return builder
         * 
         */
        public Builder scheduleStatus(Output<String> scheduleStatus) {
            $.scheduleStatus = scheduleStatus;
            return this;
        }

        /**
         * @param scheduleStatus The status of the metrics association. Valid values are: `STARTED` | `SUSPENDED`. When status of a data metric function is changed, it is being reassigned with `DROP DATA METRIC FUNCTION` and `ADD DATA METRIC FUNCTION`, and then its status is changed by `MODIFY DATA METRIC FUNCTION`
         * 
         * @return builder
         * 
         */
        public Builder scheduleStatus(String scheduleStatus) {
            return scheduleStatus(Output.of(scheduleStatus));
        }

        public ViewDataMetricFunctionArgs build() {
            if ($.functionName == null) {
                throw new MissingRequiredPropertyException("ViewDataMetricFunctionArgs", "functionName");
            }
            if ($.ons == null) {
                throw new MissingRequiredPropertyException("ViewDataMetricFunctionArgs", "ons");
            }
            if ($.scheduleStatus == null) {
                throw new MissingRequiredPropertyException("ViewDataMetricFunctionArgs", "scheduleStatus");
            }
            return $;
        }
    }

}
