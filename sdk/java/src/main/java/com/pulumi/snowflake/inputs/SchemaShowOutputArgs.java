// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SchemaShowOutputArgs extends com.pulumi.resources.ResourceArgs {

    public static final SchemaShowOutputArgs Empty = new SchemaShowOutputArgs();

    @Import(name="comment")
    private @Nullable Output<String> comment;

    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    @Import(name="droppedOn")
    private @Nullable Output<String> droppedOn;

    public Optional<Output<String>> droppedOn() {
        return Optional.ofNullable(this.droppedOn);
    }

    @Import(name="isCurrent")
    private @Nullable Output<Boolean> isCurrent;

    public Optional<Output<Boolean>> isCurrent() {
        return Optional.ofNullable(this.isCurrent);
    }

    @Import(name="isDefault")
    private @Nullable Output<Boolean> isDefault;

    public Optional<Output<Boolean>> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="options")
    private @Nullable Output<String> options;

    public Optional<Output<String>> options() {
        return Optional.ofNullable(this.options);
    }

    @Import(name="owner")
    private @Nullable Output<String> owner;

    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    @Import(name="ownerRoleType")
    private @Nullable Output<String> ownerRoleType;

    public Optional<Output<String>> ownerRoleType() {
        return Optional.ofNullable(this.ownerRoleType);
    }

    @Import(name="retentionTime")
    private @Nullable Output<String> retentionTime;

    public Optional<Output<String>> retentionTime() {
        return Optional.ofNullable(this.retentionTime);
    }

    private SchemaShowOutputArgs() {}

    private SchemaShowOutputArgs(SchemaShowOutputArgs $) {
        this.comment = $.comment;
        this.createdOn = $.createdOn;
        this.databaseName = $.databaseName;
        this.droppedOn = $.droppedOn;
        this.isCurrent = $.isCurrent;
        this.isDefault = $.isDefault;
        this.name = $.name;
        this.options = $.options;
        this.owner = $.owner;
        this.ownerRoleType = $.ownerRoleType;
        this.retentionTime = $.retentionTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchemaShowOutputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchemaShowOutputArgs $;

        public Builder() {
            $ = new SchemaShowOutputArgs();
        }

        public Builder(SchemaShowOutputArgs defaults) {
            $ = new SchemaShowOutputArgs(Objects.requireNonNull(defaults));
        }

        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        public Builder droppedOn(@Nullable Output<String> droppedOn) {
            $.droppedOn = droppedOn;
            return this;
        }

        public Builder droppedOn(String droppedOn) {
            return droppedOn(Output.of(droppedOn));
        }

        public Builder isCurrent(@Nullable Output<Boolean> isCurrent) {
            $.isCurrent = isCurrent;
            return this;
        }

        public Builder isCurrent(Boolean isCurrent) {
            return isCurrent(Output.of(isCurrent));
        }

        public Builder isDefault(@Nullable Output<Boolean> isDefault) {
            $.isDefault = isDefault;
            return this;
        }

        public Builder isDefault(Boolean isDefault) {
            return isDefault(Output.of(isDefault));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder options(@Nullable Output<String> options) {
            $.options = options;
            return this;
        }

        public Builder options(String options) {
            return options(Output.of(options));
        }

        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        public Builder ownerRoleType(@Nullable Output<String> ownerRoleType) {
            $.ownerRoleType = ownerRoleType;
            return this;
        }

        public Builder ownerRoleType(String ownerRoleType) {
            return ownerRoleType(Output.of(ownerRoleType));
        }

        public Builder retentionTime(@Nullable Output<String> retentionTime) {
            $.retentionTime = retentionTime;
            return this;
        }

        public Builder retentionTime(String retentionTime) {
            return retentionTime(Output.of(retentionTime));
        }

        public SchemaShowOutputArgs build() {
            return $;
        }
    }

}
