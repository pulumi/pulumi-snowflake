// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.snowflake.outputs.GetDynamicTablesIn;
import com.pulumi.snowflake.outputs.GetDynamicTablesLike;
import com.pulumi.snowflake.outputs.GetDynamicTablesLimit;
import com.pulumi.snowflake.outputs.GetDynamicTablesRecord;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDynamicTablesResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return IN clause to filter the list of dynamic tables.
     * 
     */
    private @Nullable GetDynamicTablesIn in;
    /**
     * @return LIKE clause to filter the list of dynamic tables.
     * 
     */
    private @Nullable GetDynamicTablesLike like;
    /**
     * @return Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. Note that the actual number of rows returned might be less than the specified limit (e.g. the number of existing objects is less than the specified limit).
     * 
     */
    private @Nullable GetDynamicTablesLimit limit;
    /**
     * @return The list of dynamic tables.
     * 
     */
    private List<GetDynamicTablesRecord> records;
    /**
     * @return Optionally filters the command output based on the characters that appear at the beginning of the object name. The string is case-sensitive.
     * 
     */
    private @Nullable String startsWith;

    private GetDynamicTablesResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return IN clause to filter the list of dynamic tables.
     * 
     */
    public Optional<GetDynamicTablesIn> in() {
        return Optional.ofNullable(this.in);
    }
    /**
     * @return LIKE clause to filter the list of dynamic tables.
     * 
     */
    public Optional<GetDynamicTablesLike> like() {
        return Optional.ofNullable(this.like);
    }
    /**
     * @return Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. Note that the actual number of rows returned might be less than the specified limit (e.g. the number of existing objects is less than the specified limit).
     * 
     */
    public Optional<GetDynamicTablesLimit> limit() {
        return Optional.ofNullable(this.limit);
    }
    /**
     * @return The list of dynamic tables.
     * 
     */
    public List<GetDynamicTablesRecord> records() {
        return this.records;
    }
    /**
     * @return Optionally filters the command output based on the characters that appear at the beginning of the object name. The string is case-sensitive.
     * 
     */
    public Optional<String> startsWith() {
        return Optional.ofNullable(this.startsWith);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDynamicTablesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private @Nullable GetDynamicTablesIn in;
        private @Nullable GetDynamicTablesLike like;
        private @Nullable GetDynamicTablesLimit limit;
        private List<GetDynamicTablesRecord> records;
        private @Nullable String startsWith;
        public Builder() {}
        public Builder(GetDynamicTablesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.in = defaults.in;
    	      this.like = defaults.like;
    	      this.limit = defaults.limit;
    	      this.records = defaults.records;
    	      this.startsWith = defaults.startsWith;
        }

        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder in(@Nullable GetDynamicTablesIn in) {
            this.in = in;
            return this;
        }
        @CustomType.Setter
        public Builder like(@Nullable GetDynamicTablesLike like) {
            this.like = like;
            return this;
        }
        @CustomType.Setter
        public Builder limit(@Nullable GetDynamicTablesLimit limit) {
            this.limit = limit;
            return this;
        }
        @CustomType.Setter
        public Builder records(List<GetDynamicTablesRecord> records) {
            this.records = Objects.requireNonNull(records);
            return this;
        }
        public Builder records(GetDynamicTablesRecord... records) {
            return records(List.of(records));
        }
        @CustomType.Setter
        public Builder startsWith(@Nullable String startsWith) {
            this.startsWith = startsWith;
            return this;
        }
        public GetDynamicTablesResult build() {
            final var _resultValue = new GetDynamicTablesResult();
            _resultValue.id = id;
            _resultValue.in = in;
            _resultValue.like = like;
            _resultValue.limit = limit;
            _resultValue.records = records;
            _resultValue.startsWith = startsWith;
            return _resultValue;
        }
    }
}
