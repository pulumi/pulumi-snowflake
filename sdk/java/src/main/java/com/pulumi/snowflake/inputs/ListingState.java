// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.snowflake.inputs.ListingManifestArgs;
import com.pulumi.snowflake.inputs.ListingShowOutputArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListingState extends com.pulumi.resources.ResourceArgs {

    public static final ListingState Empty = new ListingState();

    /**
     * Specifies the application package attached to the listing.
     * 
     */
    @Import(name="applicationPackage")
    private @Nullable Output<String> applicationPackage;

    /**
     * @return Specifies the application package attached to the listing.
     * 
     */
    public Optional<Output<String>> applicationPackage() {
        return Optional.ofNullable(this.applicationPackage);
    }

    /**
     * Specifies a comment for the listing.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Specifies a comment for the listing.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    @Import(name="fullyQualifiedName")
    private @Nullable Output<String> fullyQualifiedName;

    /**
     * @return Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    public Optional<Output<String>> fullyQualifiedName() {
        return Optional.ofNullable(this.fullyQualifiedName);
    }

    @Import(name="manifest")
    private @Nullable Output<ListingManifestArgs> manifest;

    public Optional<Output<ListingManifestArgs>> manifest() {
        return Optional.ofNullable(this.manifest);
    }

    /**
     * Specifies the listing identifier (name). It must be unique within the organization, regardless of which Snowflake region the account is located in. Must start with an alphabetic character and cannot contain spaces or special characters except for underscores.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the listing identifier (name). It must be unique within the organization, regardless of which Snowflake region the account is located in. Must start with an alphabetic character and cannot contain spaces or special characters except for underscores.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Determines if the listing should be published.
     * 
     */
    @Import(name="publish")
    private @Nullable Output<String> publish;

    /**
     * @return (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Determines if the listing should be published.
     * 
     */
    public Optional<Output<String>> publish() {
        return Optional.ofNullable(this.publish);
    }

    /**
     * Specifies the identifier for the share to attach to the listing.
     * 
     */
    @Import(name="share")
    private @Nullable Output<String> share;

    /**
     * @return Specifies the identifier for the share to attach to the listing.
     * 
     */
    public Optional<Output<String>> share() {
        return Optional.ofNullable(this.share);
    }

    /**
     * Outputs the result of `SHOW LISTINGS` for the given listing.
     * 
     */
    @Import(name="showOutputs")
    private @Nullable Output<List<ListingShowOutputArgs>> showOutputs;

    /**
     * @return Outputs the result of `SHOW LISTINGS` for the given listing.
     * 
     */
    public Optional<Output<List<ListingShowOutputArgs>>> showOutputs() {
        return Optional.ofNullable(this.showOutputs);
    }

    private ListingState() {}

    private ListingState(ListingState $) {
        this.applicationPackage = $.applicationPackage;
        this.comment = $.comment;
        this.fullyQualifiedName = $.fullyQualifiedName;
        this.manifest = $.manifest;
        this.name = $.name;
        this.publish = $.publish;
        this.share = $.share;
        this.showOutputs = $.showOutputs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListingState $;

        public Builder() {
            $ = new ListingState();
        }

        public Builder(ListingState defaults) {
            $ = new ListingState(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationPackage Specifies the application package attached to the listing.
         * 
         * @return builder
         * 
         */
        public Builder applicationPackage(@Nullable Output<String> applicationPackage) {
            $.applicationPackage = applicationPackage;
            return this;
        }

        /**
         * @param applicationPackage Specifies the application package attached to the listing.
         * 
         * @return builder
         * 
         */
        public Builder applicationPackage(String applicationPackage) {
            return applicationPackage(Output.of(applicationPackage));
        }

        /**
         * @param comment Specifies a comment for the listing.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Specifies a comment for the listing.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param fullyQualifiedName Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
         * 
         * @return builder
         * 
         */
        public Builder fullyQualifiedName(@Nullable Output<String> fullyQualifiedName) {
            $.fullyQualifiedName = fullyQualifiedName;
            return this;
        }

        /**
         * @param fullyQualifiedName Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
         * 
         * @return builder
         * 
         */
        public Builder fullyQualifiedName(String fullyQualifiedName) {
            return fullyQualifiedName(Output.of(fullyQualifiedName));
        }

        public Builder manifest(@Nullable Output<ListingManifestArgs> manifest) {
            $.manifest = manifest;
            return this;
        }

        public Builder manifest(ListingManifestArgs manifest) {
            return manifest(Output.of(manifest));
        }

        /**
         * @param name Specifies the listing identifier (name). It must be unique within the organization, regardless of which Snowflake region the account is located in. Must start with an alphabetic character and cannot contain spaces or special characters except for underscores.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the listing identifier (name). It must be unique within the organization, regardless of which Snowflake region the account is located in. Must start with an alphabetic character and cannot contain spaces or special characters except for underscores.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param publish (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Determines if the listing should be published.
         * 
         * @return builder
         * 
         */
        public Builder publish(@Nullable Output<String> publish) {
            $.publish = publish;
            return this;
        }

        /**
         * @param publish (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Determines if the listing should be published.
         * 
         * @return builder
         * 
         */
        public Builder publish(String publish) {
            return publish(Output.of(publish));
        }

        /**
         * @param share Specifies the identifier for the share to attach to the listing.
         * 
         * @return builder
         * 
         */
        public Builder share(@Nullable Output<String> share) {
            $.share = share;
            return this;
        }

        /**
         * @param share Specifies the identifier for the share to attach to the listing.
         * 
         * @return builder
         * 
         */
        public Builder share(String share) {
            return share(Output.of(share));
        }

        /**
         * @param showOutputs Outputs the result of `SHOW LISTINGS` for the given listing.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(@Nullable Output<List<ListingShowOutputArgs>> showOutputs) {
            $.showOutputs = showOutputs;
            return this;
        }

        /**
         * @param showOutputs Outputs the result of `SHOW LISTINGS` for the given listing.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(List<ListingShowOutputArgs> showOutputs) {
            return showOutputs(Output.of(showOutputs));
        }

        /**
         * @param showOutputs Outputs the result of `SHOW LISTINGS` for the given listing.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(ListingShowOutputArgs... showOutputs) {
            return showOutputs(List.of(showOutputs));
        }

        public ListingState build() {
            return $;
        }
    }

}
