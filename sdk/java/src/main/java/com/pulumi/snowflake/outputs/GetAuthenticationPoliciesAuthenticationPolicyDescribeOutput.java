// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAuthenticationPoliciesAuthenticationPolicyDescribeOutput {
    private String authenticationMethods;
    private String clientTypes;
    private String comment;
    private String mfaAuthenticationMethods;
    private String mfaEnrollment;
    private String mfaPolicy;
    private String name;
    private String owner;
    private String patPolicy;
    private String securityIntegrations;
    private String workloadIdentityPolicy;

    private GetAuthenticationPoliciesAuthenticationPolicyDescribeOutput() {}
    public String authenticationMethods() {
        return this.authenticationMethods;
    }
    public String clientTypes() {
        return this.clientTypes;
    }
    public String comment() {
        return this.comment;
    }
    public String mfaAuthenticationMethods() {
        return this.mfaAuthenticationMethods;
    }
    public String mfaEnrollment() {
        return this.mfaEnrollment;
    }
    public String mfaPolicy() {
        return this.mfaPolicy;
    }
    public String name() {
        return this.name;
    }
    public String owner() {
        return this.owner;
    }
    public String patPolicy() {
        return this.patPolicy;
    }
    public String securityIntegrations() {
        return this.securityIntegrations;
    }
    public String workloadIdentityPolicy() {
        return this.workloadIdentityPolicy;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAuthenticationPoliciesAuthenticationPolicyDescribeOutput defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authenticationMethods;
        private String clientTypes;
        private String comment;
        private String mfaAuthenticationMethods;
        private String mfaEnrollment;
        private String mfaPolicy;
        private String name;
        private String owner;
        private String patPolicy;
        private String securityIntegrations;
        private String workloadIdentityPolicy;
        public Builder() {}
        public Builder(GetAuthenticationPoliciesAuthenticationPolicyDescribeOutput defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationMethods = defaults.authenticationMethods;
    	      this.clientTypes = defaults.clientTypes;
    	      this.comment = defaults.comment;
    	      this.mfaAuthenticationMethods = defaults.mfaAuthenticationMethods;
    	      this.mfaEnrollment = defaults.mfaEnrollment;
    	      this.mfaPolicy = defaults.mfaPolicy;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.patPolicy = defaults.patPolicy;
    	      this.securityIntegrations = defaults.securityIntegrations;
    	      this.workloadIdentityPolicy = defaults.workloadIdentityPolicy;
        }

        @CustomType.Setter
        public Builder authenticationMethods(String authenticationMethods) {
            if (authenticationMethods == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationPoliciesAuthenticationPolicyDescribeOutput", "authenticationMethods");
            }
            this.authenticationMethods = authenticationMethods;
            return this;
        }
        @CustomType.Setter
        public Builder clientTypes(String clientTypes) {
            if (clientTypes == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationPoliciesAuthenticationPolicyDescribeOutput", "clientTypes");
            }
            this.clientTypes = clientTypes;
            return this;
        }
        @CustomType.Setter
        public Builder comment(String comment) {
            if (comment == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationPoliciesAuthenticationPolicyDescribeOutput", "comment");
            }
            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder mfaAuthenticationMethods(String mfaAuthenticationMethods) {
            if (mfaAuthenticationMethods == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationPoliciesAuthenticationPolicyDescribeOutput", "mfaAuthenticationMethods");
            }
            this.mfaAuthenticationMethods = mfaAuthenticationMethods;
            return this;
        }
        @CustomType.Setter
        public Builder mfaEnrollment(String mfaEnrollment) {
            if (mfaEnrollment == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationPoliciesAuthenticationPolicyDescribeOutput", "mfaEnrollment");
            }
            this.mfaEnrollment = mfaEnrollment;
            return this;
        }
        @CustomType.Setter
        public Builder mfaPolicy(String mfaPolicy) {
            if (mfaPolicy == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationPoliciesAuthenticationPolicyDescribeOutput", "mfaPolicy");
            }
            this.mfaPolicy = mfaPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationPoliciesAuthenticationPolicyDescribeOutput", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder owner(String owner) {
            if (owner == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationPoliciesAuthenticationPolicyDescribeOutput", "owner");
            }
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder patPolicy(String patPolicy) {
            if (patPolicy == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationPoliciesAuthenticationPolicyDescribeOutput", "patPolicy");
            }
            this.patPolicy = patPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder securityIntegrations(String securityIntegrations) {
            if (securityIntegrations == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationPoliciesAuthenticationPolicyDescribeOutput", "securityIntegrations");
            }
            this.securityIntegrations = securityIntegrations;
            return this;
        }
        @CustomType.Setter
        public Builder workloadIdentityPolicy(String workloadIdentityPolicy) {
            if (workloadIdentityPolicy == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationPoliciesAuthenticationPolicyDescribeOutput", "workloadIdentityPolicy");
            }
            this.workloadIdentityPolicy = workloadIdentityPolicy;
            return this;
        }
        public GetAuthenticationPoliciesAuthenticationPolicyDescribeOutput build() {
            final var _resultValue = new GetAuthenticationPoliciesAuthenticationPolicyDescribeOutput();
            _resultValue.authenticationMethods = authenticationMethods;
            _resultValue.clientTypes = clientTypes;
            _resultValue.comment = comment;
            _resultValue.mfaAuthenticationMethods = mfaAuthenticationMethods;
            _resultValue.mfaEnrollment = mfaEnrollment;
            _resultValue.mfaPolicy = mfaPolicy;
            _resultValue.name = name;
            _resultValue.owner = owner;
            _resultValue.patPolicy = patPolicy;
            _resultValue.securityIntegrations = securityIntegrations;
            _resultValue.workloadIdentityPolicy = workloadIdentityPolicy;
            return _resultValue;
        }
    }
}
