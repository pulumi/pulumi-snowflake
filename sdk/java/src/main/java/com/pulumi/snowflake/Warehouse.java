// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.snowflake.Utilities;
import com.pulumi.snowflake.WarehouseArgs;
import com.pulumi.snowflake.inputs.WarehouseState;
import com.pulumi.snowflake.outputs.WarehouseParameter;
import com.pulumi.snowflake.outputs.WarehouseShowOutput;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * !&gt; **V1 release candidate** This resource was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the resource if needed. Any errors reported will be resolved with a higher priority. We encourage checking this resource out before the V1 release. Please follow the migration guide to use it.
 * 
 * Resource used to manage warehouse objects. For more information, check [warehouse documentation](https://docs.snowflake.com/en/sql-reference/commands-warehouse).
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.snowflake.Warehouse;
 * import com.pulumi.snowflake.WarehouseArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var warehouse = new Warehouse("warehouse", WarehouseArgs.builder()
 *             .name("test")
 *             .comment("foo")
 *             .warehouseSize("small")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import snowflake:index/warehouse:Warehouse example warehouseName
 * ```
 * 
 */
@ResourceType(type="snowflake:index/warehouse:Warehouse")
public class Warehouse extends com.pulumi.resources.CustomResource {
    /**
     * Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
     * 
     */
    @Export(name="autoResume", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> autoResume;

    /**
     * @return Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
     * 
     */
    public Output<Optional<String>> autoResume() {
        return Codegen.optional(this.autoResume);
    }
    /**
     * Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.
     * 
     */
    @Export(name="autoSuspend", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> autoSuspend;

    /**
     * @return Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.
     * 
     */
    public Output<Optional<Integer>> autoSuspend() {
        return Codegen.optional(this.autoSuspend);
    }
    /**
     * Specifies a comment for the warehouse.
     * 
     */
    @Export(name="comment", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> comment;

    /**
     * @return Specifies a comment for the warehouse.
     * 
     */
    public Output<Optional<String>> comment() {
        return Codegen.optional(this.comment);
    }
    /**
     * Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute resources. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
     * 
     */
    @Export(name="enableQueryAcceleration", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> enableQueryAcceleration;

    /**
     * @return Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute resources. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
     * 
     */
    public Output<Optional<String>> enableQueryAcceleration() {
        return Codegen.optional(this.enableQueryAcceleration);
    }
    /**
     * Specifies whether the warehouse is created initially in the ‘Suspended’ state.
     * 
     */
    @Export(name="initiallySuspended", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> initiallySuspended;

    /**
     * @return Specifies whether the warehouse is created initially in the ‘Suspended’ state.
     * 
     */
    public Output<Optional<Boolean>> initiallySuspended() {
        return Codegen.optional(this.initiallySuspended);
    }
    /**
     * Specifies the maximum number of server clusters for the warehouse.
     * 
     */
    @Export(name="maxClusterCount", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> maxClusterCount;

    /**
     * @return Specifies the maximum number of server clusters for the warehouse.
     * 
     */
    public Output<Optional<Integer>> maxClusterCount() {
        return Codegen.optional(this.maxClusterCount);
    }
    /**
     * Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.
     * 
     */
    @Export(name="maxConcurrencyLevel", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxConcurrencyLevel;

    /**
     * @return Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.
     * 
     */
    public Output<Integer> maxConcurrencyLevel() {
        return this.maxConcurrencyLevel;
    }
    /**
     * Specifies the minimum number of server clusters for the warehouse (only applies to multi-cluster warehouses).
     * 
     */
    @Export(name="minClusterCount", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> minClusterCount;

    /**
     * @return Specifies the minimum number of server clusters for the warehouse (only applies to multi-cluster warehouses).
     * 
     */
    public Output<Optional<Integer>> minClusterCount() {
        return Codegen.optional(this.minClusterCount);
    }
    /**
     * Identifier for the virtual warehouse; must be unique for your account.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Identifier for the virtual warehouse; must be unique for your account.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Outputs the result of `SHOW PARAMETERS IN WAREHOUSE` for the given warehouse.
     * 
     */
    @Export(name="parameters", refs={List.class,WarehouseParameter.class}, tree="[0,1]")
    private Output<List<WarehouseParameter>> parameters;

    /**
     * @return Outputs the result of `SHOW PARAMETERS IN WAREHOUSE` for the given warehouse.
     * 
     */
    public Output<List<WarehouseParameter>> parameters() {
        return this.parameters;
    }
    /**
     * Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a multiplier based on warehouse size.
     * 
     */
    @Export(name="queryAccelerationMaxScaleFactor", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> queryAccelerationMaxScaleFactor;

    /**
     * @return Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a multiplier based on warehouse size.
     * 
     */
    public Output<Optional<Integer>> queryAccelerationMaxScaleFactor() {
        return Codegen.optional(this.queryAccelerationMaxScaleFactor);
    }
    /**
     * Specifies the name of a resource monitor that is explicitly assigned to the warehouse.
     * 
     */
    @Export(name="resourceMonitor", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> resourceMonitor;

    /**
     * @return Specifies the name of a resource monitor that is explicitly assigned to the warehouse.
     * 
     */
    public Output<Optional<String>> resourceMonitor() {
        return Codegen.optional(this.resourceMonitor);
    }
    /**
     * Specifies the policy for automatically starting and shutting down clusters in a multi-cluster warehouse running in Auto-scale mode. Valid values are (case-insensitive): `STANDARD` | `ECONOMY`.
     * 
     */
    @Export(name="scalingPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> scalingPolicy;

    /**
     * @return Specifies the policy for automatically starting and shutting down clusters in a multi-cluster warehouse running in Auto-scale mode. Valid values are (case-insensitive): `STANDARD` | `ECONOMY`.
     * 
     */
    public Output<Optional<String>> scalingPolicy() {
        return Codegen.optional(this.scalingPolicy);
    }
    /**
     * Outputs the result of `SHOW WAREHOUSE` for the given warehouse.
     * 
     */
    @Export(name="showOutputs", refs={List.class,WarehouseShowOutput.class}, tree="[0,1]")
    private Output<List<WarehouseShowOutput>> showOutputs;

    /**
     * @return Outputs the result of `SHOW WAREHOUSE` for the given warehouse.
     * 
     */
    public Output<List<WarehouseShowOutput>> showOutputs() {
        return this.showOutputs;
    }
    /**
     * Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a warehouse before it is canceled by the system.
     * 
     */
    @Export(name="statementQueuedTimeoutInSeconds", refs={Integer.class}, tree="[0]")
    private Output<Integer> statementQueuedTimeoutInSeconds;

    /**
     * @return Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a warehouse before it is canceled by the system.
     * 
     */
    public Output<Integer> statementQueuedTimeoutInSeconds() {
        return this.statementQueuedTimeoutInSeconds;
    }
    /**
     * Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system
     * 
     */
    @Export(name="statementTimeoutInSeconds", refs={Integer.class}, tree="[0]")
    private Output<Integer> statementTimeoutInSeconds;

    /**
     * @return Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system
     * 
     */
    public Output<Integer> statementTimeoutInSeconds() {
        return this.statementTimeoutInSeconds;
    }
    /**
     * Specifies the size of the virtual warehouse. Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. Consult [warehouse documentation](https://docs.snowflake.com/en/sql-reference/sql/create-warehouse#optional-properties-objectproperties) for the details. Note: removing the size from config will result in the resource recreation.
     * 
     */
    @Export(name="warehouseSize", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> warehouseSize;

    /**
     * @return Specifies the size of the virtual warehouse. Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. Consult [warehouse documentation](https://docs.snowflake.com/en/sql-reference/sql/create-warehouse#optional-properties-objectproperties) for the details. Note: removing the size from config will result in the resource recreation.
     * 
     */
    public Output<Optional<String>> warehouseSize() {
        return Codegen.optional(this.warehouseSize);
    }
    /**
     * Specifies warehouse type. Valid values are (case-insensitive): `STANDARD` | `SNOWPARK-OPTIMIZED`. Warehouse needs to be suspended to change its type. Provider will handle automatic suspension and resumption if needed.
     * 
     */
    @Export(name="warehouseType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> warehouseType;

    /**
     * @return Specifies warehouse type. Valid values are (case-insensitive): `STANDARD` | `SNOWPARK-OPTIMIZED`. Warehouse needs to be suspended to change its type. Provider will handle automatic suspension and resumption if needed.
     * 
     */
    public Output<Optional<String>> warehouseType() {
        return Codegen.optional(this.warehouseType);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Warehouse(java.lang.String name) {
        this(name, WarehouseArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Warehouse(java.lang.String name, @Nullable WarehouseArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Warehouse(java.lang.String name, @Nullable WarehouseArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("snowflake:index/warehouse:Warehouse", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Warehouse(java.lang.String name, Output<java.lang.String> id, @Nullable WarehouseState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("snowflake:index/warehouse:Warehouse", name, state, makeResourceOptions(options, id), false);
    }

    private static WarehouseArgs makeArgs(@Nullable WarehouseArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? WarehouseArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Warehouse get(java.lang.String name, Output<java.lang.String> id, @Nullable WarehouseState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Warehouse(name, id, state, options);
    }
}
