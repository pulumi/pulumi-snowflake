// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.snowflake.ProcedurePythonArgs;
import com.pulumi.snowflake.Utilities;
import com.pulumi.snowflake.inputs.ProcedurePythonState;
import com.pulumi.snowflake.outputs.ProcedurePythonArgument;
import com.pulumi.snowflake.outputs.ProcedurePythonImport;
import com.pulumi.snowflake.outputs.ProcedurePythonParameter;
import com.pulumi.snowflake.outputs.ProcedurePythonSecret;
import com.pulumi.snowflake.outputs.ProcedurePythonShowOutput;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * ```sh
 * $ pulumi import snowflake:index/procedurePython:ProcedurePython example &#39;&#34;&lt;database_name&gt;&#34;.&#34;&lt;schema_name&gt;&#34;.&#34;&lt;function_name&gt;&#34;(varchar, varchar, varchar)&#39;
 * ```
 * 
 * Note: Snowflake is not returning all information needed to populate the state correctly after import (e.g. data types with attributes like NUMBER(32, 10) are returned as NUMBER, default values for arguments are not returned at all).
 * 
 * Also, `ALTER` for functions is very limited so most of the attributes on this resource are marked as force new. Because of that, in multiple situations plan won&#39;t be empty after importing and manual state operations may be required.
 * 
 */
@ResourceType(type="snowflake:index/procedurePython:ProcedurePython")
public class ProcedurePython extends com.pulumi.resources.CustomResource {
    /**
     * List of the arguments for the procedure. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.
     * 
     */
    @Export(name="arguments", refs={List.class,ProcedurePythonArgument.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ProcedurePythonArgument>> arguments;

    /**
     * @return List of the arguments for the procedure. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.
     * 
     */
    public Output<Optional<List<ProcedurePythonArgument>>> arguments() {
        return Codegen.optional(this.arguments);
    }
    /**
     * Specifies a comment for the procedure.
     * 
     */
    @Export(name="comment", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> comment;

    /**
     * @return Specifies a comment for the procedure.
     * 
     */
    public Output<Optional<String>> comment() {
        return Codegen.optional(this.comment);
    }
    /**
     * The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Export(name="database", refs={String.class}, tree="[0]")
    private Output<String> database;

    /**
     * @return The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> database() {
        return this.database;
    }
    /**
     * Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check *CONSOLE_OUTPUT docs[ENABLE](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
     * 
     */
    @Export(name="enableConsoleOutput", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enableConsoleOutput;

    /**
     * @return Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check *CONSOLE_OUTPUT docs[ENABLE](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
     * 
     */
    public Output<Boolean> enableConsoleOutput() {
        return this.enableConsoleOutput;
    }
    /**
     * Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights procedure. For more information, see [Understanding caller’s rights and owner’s rights stored procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are (case-insensitive): `CALLER` | `OWNER`.
     * 
     */
    @Export(name="executeAs", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> executeAs;

    /**
     * @return Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights procedure. For more information, see [Understanding caller’s rights and owner’s rights stored procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are (case-insensitive): `CALLER` | `OWNER`.
     * 
     */
    public Output<Optional<String>> executeAs() {
        return Codegen.optional(this.executeAs);
    }
    /**
     * The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this procedure’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
     * 
     */
    @Export(name="externalAccessIntegrations", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> externalAccessIntegrations;

    /**
     * @return The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this procedure’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
     * 
     */
    public Output<Optional<List<String>>> externalAccessIntegrations() {
        return Codegen.optional(this.externalAccessIntegrations);
    }
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    @Export(name="fullyQualifiedName", refs={String.class}, tree="[0]")
    private Output<String> fullyQualifiedName;

    /**
     * @return Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    public Output<String> fullyQualifiedName() {
        return this.fullyQualifiedName;
    }
    /**
     * Use the name of the stored procedure’s function or method. This can differ depending on whether the code is in-line or referenced at a stage. When the code is in-line, you can specify just the function name. When the code is imported from a stage, specify the fully-qualified handler function name as `&lt;module_name&gt;.&lt;function_name&gt;`.
     * 
     */
    @Export(name="handler", refs={String.class}, tree="[0]")
    private Output<String> handler;

    /**
     * @return Use the name of the stored procedure’s function or method. This can differ depending on whether the code is in-line or referenced at a stage. When the code is in-line, you can specify just the function name. When the code is imported from a stage, specify the fully-qualified handler function name as `&lt;module_name&gt;.&lt;function_name&gt;`.
     * 
     */
    public Output<String> handler() {
        return this.handler;
    }
    /**
     * The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your code depends on classes defined outside the stored procedure or resource files. If your stored procedure’s code will be on a stage, you must also include a path to the module file your code is in. The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.
     * 
     */
    @Export(name="imports", refs={List.class,ProcedurePythonImport.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ProcedurePythonImport>> imports;

    /**
     * @return The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your code depends on classes defined outside the stored procedure or resource files. If your stored procedure’s code will be on a stage, you must also include a path to the module file your code is in. The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.
     * 
     */
    public Output<Optional<List<ProcedurePythonImport>>> imports() {
        return Codegen.optional(this.imports);
    }
    /**
     * Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure). Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
     * 
     */
    @Export(name="isSecure", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> isSecure;

    /**
     * @return Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure). Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
     * 
     */
    public Output<Optional<String>> isSecure() {
        return Codegen.optional(this.isSecure);
    }
    /**
     * LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
     * 
     */
    @Export(name="logLevel", refs={String.class}, tree="[0]")
    private Output<String> logLevel;

    /**
     * @return LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
     * 
     */
    public Output<String> logLevel() {
        return this.logLevel;
    }
    /**
     * METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
     * 
     */
    @Export(name="metricLevel", refs={String.class}, tree="[0]")
    private Output<String> metricLevel;

    /**
     * @return METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
     * 
     */
    public Output<String> metricLevel() {
        return this.metricLevel;
    }
    /**
     * The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created because stored procedures are [identified and resolved by the combination of the name and argument types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created because stored procedures are [identified and resolved by the combination of the name and argument types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
     * 
     */
    @Export(name="nullInputBehavior", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> nullInputBehavior;

    /**
     * @return Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
     * 
     */
    public Output<Optional<String>> nullInputBehavior() {
        return Codegen.optional(this.nullInputBehavior);
    }
    /**
     * List of the names of packages deployed in Snowflake that should be included in the handler code’s execution environment. The Snowpark package is required for stored procedures, but is specified in the `snowpark_package` attribute. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
     * 
     */
    @Export(name="packages", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> packages;

    /**
     * @return List of the names of packages deployed in Snowflake that should be included in the handler code’s execution environment. The Snowpark package is required for stored procedures, but is specified in the `snowpark_package` attribute. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
     * 
     */
    public Output<Optional<List<String>>> packages() {
        return Codegen.optional(this.packages);
    }
    /**
     * Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.
     * 
     */
    @Export(name="parameters", refs={List.class,ProcedurePythonParameter.class}, tree="[0,1]")
    private Output<List<ProcedurePythonParameter>> parameters;

    /**
     * @return Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.
     * 
     */
    public Output<List<ProcedurePythonParameter>> parameters() {
        return this.parameters;
    }
    /**
     * Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are added by the provider automatically; do not include them. The `procedure_definition` value must be Python source code. For more information, see [Python (using Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-overview). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
     * 
     */
    @Export(name="procedureDefinition", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> procedureDefinition;

    /**
     * @return Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are added by the provider automatically; do not include them. The `procedure_definition` value must be Python source code. For more information, see [Python (using Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-overview). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
     * 
     */
    public Output<Optional<String>> procedureDefinition() {
        return Codegen.optional(this.procedureDefinition);
    }
    /**
     * Specifies language for the procedure. Used to detect external changes.
     * 
     */
    @Export(name="procedureLanguage", refs={String.class}, tree="[0]")
    private Output<String> procedureLanguage;

    /**
     * @return Specifies language for the procedure. Used to detect external changes.
     * 
     */
    public Output<String> procedureLanguage() {
        return this.procedureLanguage;
    }
    /**
     * Specifies the type of the result returned by the stored procedure. For `&lt;result_data_type&gt;`, use the Snowflake data type that corresponds to the type of the language that you are using (see [SQL-Python Data Type Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-python-data-type-mappings)). For `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e. `TABLE ()`).
     * 
     */
    @Export(name="returnType", refs={String.class}, tree="[0]")
    private Output<String> returnType;

    /**
     * @return Specifies the type of the result returned by the stored procedure. For `&lt;result_data_type&gt;`, use the Snowflake data type that corresponds to the type of the language that you are using (see [SQL-Python Data Type Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-python-data-type-mappings)). For `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e. `TABLE ()`).
     * 
     */
    public Output<String> returnType() {
        return this.returnType;
    }
    /**
     * The language runtime version to use. Currently, the supported versions are: 3.9, 3.10, and 3.11.
     * 
     */
    @Export(name="runtimeVersion", refs={String.class}, tree="[0]")
    private Output<String> runtimeVersion;

    /**
     * @return The language runtime version to use. Currently, the supported versions are: 3.9, 3.10, and 3.11.
     * 
     */
    public Output<String> runtimeVersion() {
        return this.runtimeVersion;
    }
    /**
     * The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Export(name="schema", refs={String.class}, tree="[0]")
    private Output<String> schema;

    /**
     * @return The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }
    /**
     * Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.
     * 
     */
    @Export(name="secrets", refs={List.class,ProcedurePythonSecret.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ProcedurePythonSecret>> secrets;

    /**
     * @return Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.
     * 
     */
    public Output<Optional<List<ProcedurePythonSecret>>> secrets() {
        return Codegen.optional(this.secrets);
    }
    /**
     * Outputs the result of `SHOW PROCEDURE` for the given procedure.
     * 
     */
    @Export(name="showOutputs", refs={List.class,ProcedurePythonShowOutput.class}, tree="[0,1]")
    private Output<List<ProcedurePythonShowOutput>> showOutputs;

    /**
     * @return Outputs the result of `SHOW PROCEDURE` for the given procedure.
     * 
     */
    public Output<List<ProcedurePythonShowOutput>> showOutputs() {
        return this.showOutputs;
    }
    /**
     * The Snowpark package is required for stored procedures, so it must always be present. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
     * 
     */
    @Export(name="snowparkPackage", refs={String.class}, tree="[0]")
    private Output<String> snowparkPackage;

    /**
     * @return The Snowpark package is required for stored procedures, so it must always be present. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
     * 
     */
    public Output<String> snowparkPackage() {
        return this.snowparkPackage;
    }
    /**
     * Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
     * 
     */
    @Export(name="traceLevel", refs={String.class}, tree="[0]")
    private Output<String> traceLevel;

    /**
     * @return Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
     * 
     */
    public Output<String> traceLevel() {
        return this.traceLevel;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ProcedurePython(java.lang.String name) {
        this(name, ProcedurePythonArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ProcedurePython(java.lang.String name, ProcedurePythonArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ProcedurePython(java.lang.String name, ProcedurePythonArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("snowflake:index/procedurePython:ProcedurePython", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ProcedurePython(java.lang.String name, Output<java.lang.String> id, @Nullable ProcedurePythonState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("snowflake:index/procedurePython:ProcedurePython", name, state, makeResourceOptions(options, id), false);
    }

    private static ProcedurePythonArgs makeArgs(ProcedurePythonArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ProcedurePythonArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ProcedurePython get(java.lang.String name, Output<java.lang.String> id, @Nullable ProcedurePythonState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ProcedurePython(name, id, state, options);
    }
}
