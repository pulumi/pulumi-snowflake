// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretWithGenericStringArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretWithGenericStringArgs Empty = new SecretWithGenericStringArgs();

    /**
     * Specifies a comment for the secret.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Specifies a comment for the secret.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * The database in which to create the secret Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="database", required=true)
    private Output<String> database;

    /**
     * @return The database in which to create the secret Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> database() {
        return this.database;
    }

    /**
     * String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical
     * limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical
     * limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="schema", required=true)
    private Output<String> schema;

    /**
     * @return The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }

    @Import(name="secretString", required=true)
    private Output<String> secretString;

    public Output<String> secretString() {
        return this.secretString;
    }

    private SecretWithGenericStringArgs() {}

    private SecretWithGenericStringArgs(SecretWithGenericStringArgs $) {
        this.comment = $.comment;
        this.database = $.database;
        this.name = $.name;
        this.schema = $.schema;
        this.secretString = $.secretString;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretWithGenericStringArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretWithGenericStringArgs $;

        public Builder() {
            $ = new SecretWithGenericStringArgs();
        }

        public Builder(SecretWithGenericStringArgs defaults) {
            $ = new SecretWithGenericStringArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment Specifies a comment for the secret.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Specifies a comment for the secret.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param database The database in which to create the secret Due to technical limitations (read more here), avoid using the following
         * characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The database in which to create the secret Due to technical limitations (read more here), avoid using the following
         * characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param name String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical
         * limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical
         * limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param schema The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following
         * characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder schema(Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following
         * characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        public Builder secretString(Output<String> secretString) {
            $.secretString = secretString;
            return this;
        }

        public Builder secretString(String secretString) {
            return secretString(Output.of(secretString));
        }

        public SecretWithGenericStringArgs build() {
            if ($.database == null) {
                throw new MissingRequiredPropertyException("SecretWithGenericStringArgs", "database");
            }
            if ($.schema == null) {
                throw new MissingRequiredPropertyException("SecretWithGenericStringArgs", "schema");
            }
            if ($.secretString == null) {
                throw new MissingRequiredPropertyException("SecretWithGenericStringArgs", "secretString");
            }
            return $;
        }
    }

}
