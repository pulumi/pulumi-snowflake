// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.snowflake.AuthenticationPolicyArgs;
import com.pulumi.snowflake.Utilities;
import com.pulumi.snowflake.inputs.AuthenticationPolicyState;
import com.pulumi.snowflake.outputs.AuthenticationPolicyDescribeOutput;
import com.pulumi.snowflake.outputs.AuthenticationPolicyShowOutput;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * ```sh
 * $ pulumi import snowflake:index/authenticationPolicy:AuthenticationPolicy example &#39;&#34;&lt;database_name&gt;&#34;.&#34;&lt;schema_name&gt;&#34;.&#34;&lt;authentication_policy_name&gt;&#34;&#39;
 * ```
 * 
 */
@ResourceType(type="snowflake:index/authenticationPolicy:AuthenticationPolicy")
public class AuthenticationPolicy extends com.pulumi.resources.CustomResource {
    /**
     * A list of authentication methods that are allowed during login. This parameter accepts one or more of the following values: `ALL` | `SAML` | `PASSWORD` | `OAUTH` | `KEYPAIR`
     * 
     */
    @Export(name="authenticationMethods", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> authenticationMethods;

    /**
     * @return A list of authentication methods that are allowed during login. This parameter accepts one or more of the following values: `ALL` | `SAML` | `PASSWORD` | `OAUTH` | `KEYPAIR`
     * 
     */
    public Output<Optional<List<String>>> authenticationMethods() {
        return Codegen.optional(this.authenticationMethods);
    }
    /**
     * A list of clients that can authenticate with Snowflake. If a client tries to connect, and the client is not one of the valid CLIENT*TYPES, then the login attempt fails. Allowed values are `ALL` | `SNOWFLAKE_UI` | `DRIVERS` | `SNOWSQL`. The CLIENT*TYPES property of an authentication policy is a best effort method to block user logins based on specific clients. It should not be used as the sole control to establish a security boundary.
     * 
     */
    @Export(name="clientTypes", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> clientTypes;

    /**
     * @return A list of clients that can authenticate with Snowflake. If a client tries to connect, and the client is not one of the valid CLIENT*TYPES, then the login attempt fails. Allowed values are `ALL` | `SNOWFLAKE_UI` | `DRIVERS` | `SNOWSQL`. The CLIENT*TYPES property of an authentication policy is a best effort method to block user logins based on specific clients. It should not be used as the sole control to establish a security boundary.
     * 
     */
    public Output<Optional<List<String>>> clientTypes() {
        return Codegen.optional(this.clientTypes);
    }
    /**
     * Specifies a comment for the authentication policy.
     * 
     */
    @Export(name="comment", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> comment;

    /**
     * @return Specifies a comment for the authentication policy.
     * 
     */
    public Output<Optional<String>> comment() {
        return Codegen.optional(this.comment);
    }
    /**
     * The database in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Export(name="database", refs={String.class}, tree="[0]")
    private Output<String> database;

    /**
     * @return The database in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> database() {
        return this.database;
    }
    /**
     * Outputs the result of `DESCRIBE AUTHENTICATION POLICY` for the given policy.
     * 
     */
    @Export(name="describeOutputs", refs={List.class,AuthenticationPolicyDescribeOutput.class}, tree="[0,1]")
    private Output<List<AuthenticationPolicyDescribeOutput>> describeOutputs;

    /**
     * @return Outputs the result of `DESCRIBE AUTHENTICATION POLICY` for the given policy.
     * 
     */
    public Output<List<AuthenticationPolicyDescribeOutput>> describeOutputs() {
        return this.describeOutputs;
    }
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    @Export(name="fullyQualifiedName", refs={String.class}, tree="[0]")
    private Output<String> fullyQualifiedName;

    /**
     * @return Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    public Output<String> fullyQualifiedName() {
        return this.fullyQualifiedName;
    }
    /**
     * A list of authentication methods that enforce multi-factor authentication (MFA) during login. Authentication methods not listed in this parameter do not prompt for multi-factor authentication. Allowed values are `ALL` | `SAML` | `PASSWORD`.
     * 
     */
    @Export(name="mfaAuthenticationMethods", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> mfaAuthenticationMethods;

    /**
     * @return A list of authentication methods that enforce multi-factor authentication (MFA) during login. Authentication methods not listed in this parameter do not prompt for multi-factor authentication. Allowed values are `ALL` | `SAML` | `PASSWORD`.
     * 
     */
    public Output<Optional<List<String>>> mfaAuthenticationMethods() {
        return Codegen.optional(this.mfaAuthenticationMethods);
    }
    /**
     * (Default: `OPTIONAL`) Determines whether a user must enroll in multi-factor authentication. Allowed values are REQUIRED and OPTIONAL. When REQUIRED is specified, Enforces users to enroll in MFA. If this value is used, then the CLIENT*TYPES parameter must include SNOWFLAKE*UI, because Snowsight is the only place users can enroll in multi-factor authentication (MFA).
     * 
     */
    @Export(name="mfaEnrollment", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> mfaEnrollment;

    /**
     * @return (Default: `OPTIONAL`) Determines whether a user must enroll in multi-factor authentication. Allowed values are REQUIRED and OPTIONAL. When REQUIRED is specified, Enforces users to enroll in MFA. If this value is used, then the CLIENT*TYPES parameter must include SNOWFLAKE*UI, because Snowsight is the only place users can enroll in multi-factor authentication (MFA).
     * 
     */
    public Output<Optional<String>> mfaEnrollment() {
        return Codegen.optional(this.mfaEnrollment);
    }
    /**
     * Specifies the identifier for the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Specifies the identifier for the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The schema in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Export(name="schema", refs={String.class}, tree="[0]")
    private Output<String> schema;

    /**
     * @return The schema in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }
    /**
     * A list of security integrations the authentication policy is associated with. This parameter has no effect when SAML or OAUTH are not in the AUTHENTICATION*METHODS list. All values in the SECURITY*INTEGRATIONS list must be compatible with the values in the AUTHENTICATION*METHODS list. For example, if SECURITY*INTEGRATIONS contains a SAML security integration, and AUTHENTICATION_METHODS contains OAUTH, then you cannot create the authentication policy. To allow all security integrations use ALL as parameter.
     * 
     */
    @Export(name="securityIntegrations", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> securityIntegrations;

    /**
     * @return A list of security integrations the authentication policy is associated with. This parameter has no effect when SAML or OAUTH are not in the AUTHENTICATION*METHODS list. All values in the SECURITY*INTEGRATIONS list must be compatible with the values in the AUTHENTICATION*METHODS list. For example, if SECURITY*INTEGRATIONS contains a SAML security integration, and AUTHENTICATION_METHODS contains OAUTH, then you cannot create the authentication policy. To allow all security integrations use ALL as parameter.
     * 
     */
    public Output<Optional<List<String>>> securityIntegrations() {
        return Codegen.optional(this.securityIntegrations);
    }
    /**
     * Outputs the result of `SHOW AUTHENTICATION POLICIES` for the given policy.
     * 
     */
    @Export(name="showOutputs", refs={List.class,AuthenticationPolicyShowOutput.class}, tree="[0,1]")
    private Output<List<AuthenticationPolicyShowOutput>> showOutputs;

    /**
     * @return Outputs the result of `SHOW AUTHENTICATION POLICIES` for the given policy.
     * 
     */
    public Output<List<AuthenticationPolicyShowOutput>> showOutputs() {
        return this.showOutputs;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AuthenticationPolicy(java.lang.String name) {
        this(name, AuthenticationPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AuthenticationPolicy(java.lang.String name, AuthenticationPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AuthenticationPolicy(java.lang.String name, AuthenticationPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("snowflake:index/authenticationPolicy:AuthenticationPolicy", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private AuthenticationPolicy(java.lang.String name, Output<java.lang.String> id, @Nullable AuthenticationPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("snowflake:index/authenticationPolicy:AuthenticationPolicy", name, state, makeResourceOptions(options, id), false);
    }

    private static AuthenticationPolicyArgs makeArgs(AuthenticationPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? AuthenticationPolicyArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AuthenticationPolicy get(java.lang.String name, Output<java.lang.String> id, @Nullable AuthenticationPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AuthenticationPolicy(name, id, state, options);
    }
}
