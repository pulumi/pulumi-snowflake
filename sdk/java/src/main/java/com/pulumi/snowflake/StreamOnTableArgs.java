// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.snowflake.inputs.StreamOnTableAtArgs;
import com.pulumi.snowflake.inputs.StreamOnTableBeforeArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamOnTableArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamOnTableArgs Empty = new StreamOnTableArgs();

    /**
     * Specifies whether this is an append-only stream. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in
     * the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
     * 
     */
    @Import(name="appendOnly")
    private @Nullable Output<String> appendOnly;

    /**
     * @return Specifies whether this is an append-only stream. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in
     * the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
     * 
     */
    public Optional<Output<String>> appendOnly() {
        return Optional.ofNullable(this.appendOnly);
    }

    @Import(name="at")
    private @Nullable Output<StreamOnTableAtArgs> at;

    public Optional<Output<StreamOnTableAtArgs>> at() {
        return Optional.ofNullable(this.at);
    }

    @Import(name="before")
    private @Nullable Output<StreamOnTableBeforeArgs> before;

    public Optional<Output<StreamOnTableBeforeArgs>> before() {
        return Optional.ofNullable(this.before);
    }

    /**
     * Specifies a comment for the stream.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Specifies a comment for the stream.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="copyGrants")
    private @Nullable Output<Boolean> copyGrants;

    public Optional<Output<Boolean>> copyGrants() {
        return Optional.ofNullable(this.copyGrants);
    }

    /**
     * The database in which to create the stream. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="database", required=true)
    private Output<String> database;

    /**
     * @return The database in which to create the stream. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> database() {
        return this.database;
    }

    /**
     * Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due
     * to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due
     * to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="schema", required=true)
    private Output<String> schema;

    /**
     * @return The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }

    @Import(name="showInitialRows")
    private @Nullable Output<String> showInitialRows;

    public Optional<Output<String>> showInitialRows() {
        return Optional.ofNullable(this.showInitialRows);
    }

    /**
     * Specifies an identifier for the table the stream will monitor. Due to technical limitations (read more here), avoid
     * using the following characters: `|`, `.`, `&#34;`. For more information about this resource, see docs.
     * 
     */
    @Import(name="table", required=true)
    private Output<String> table;

    /**
     * @return Specifies an identifier for the table the stream will monitor. Due to technical limitations (read more here), avoid
     * using the following characters: `|`, `.`, `&#34;`. For more information about this resource, see docs.
     * 
     */
    public Output<String> table() {
        return this.table;
    }

    private StreamOnTableArgs() {}

    private StreamOnTableArgs(StreamOnTableArgs $) {
        this.appendOnly = $.appendOnly;
        this.at = $.at;
        this.before = $.before;
        this.comment = $.comment;
        this.copyGrants = $.copyGrants;
        this.database = $.database;
        this.name = $.name;
        this.schema = $.schema;
        this.showInitialRows = $.showInitialRows;
        this.table = $.table;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamOnTableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamOnTableArgs $;

        public Builder() {
            $ = new StreamOnTableArgs();
        }

        public Builder(StreamOnTableArgs defaults) {
            $ = new StreamOnTableArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appendOnly Specifies whether this is an append-only stream. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in
         * the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
         * 
         * @return builder
         * 
         */
        public Builder appendOnly(@Nullable Output<String> appendOnly) {
            $.appendOnly = appendOnly;
            return this;
        }

        /**
         * @param appendOnly Specifies whether this is an append-only stream. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in
         * the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
         * 
         * @return builder
         * 
         */
        public Builder appendOnly(String appendOnly) {
            return appendOnly(Output.of(appendOnly));
        }

        public Builder at(@Nullable Output<StreamOnTableAtArgs> at) {
            $.at = at;
            return this;
        }

        public Builder at(StreamOnTableAtArgs at) {
            return at(Output.of(at));
        }

        public Builder before(@Nullable Output<StreamOnTableBeforeArgs> before) {
            $.before = before;
            return this;
        }

        public Builder before(StreamOnTableBeforeArgs before) {
            return before(Output.of(before));
        }

        /**
         * @param comment Specifies a comment for the stream.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Specifies a comment for the stream.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder copyGrants(@Nullable Output<Boolean> copyGrants) {
            $.copyGrants = copyGrants;
            return this;
        }

        public Builder copyGrants(Boolean copyGrants) {
            return copyGrants(Output.of(copyGrants));
        }

        /**
         * @param database The database in which to create the stream. Due to technical limitations (read more here), avoid using the following
         * characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The database in which to create the stream. Due to technical limitations (read more here), avoid using the following
         * characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param name Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due
         * to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due
         * to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param schema The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following
         * characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder schema(Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following
         * characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        public Builder showInitialRows(@Nullable Output<String> showInitialRows) {
            $.showInitialRows = showInitialRows;
            return this;
        }

        public Builder showInitialRows(String showInitialRows) {
            return showInitialRows(Output.of(showInitialRows));
        }

        /**
         * @param table Specifies an identifier for the table the stream will monitor. Due to technical limitations (read more here), avoid
         * using the following characters: `|`, `.`, `&#34;`. For more information about this resource, see docs.
         * 
         * @return builder
         * 
         */
        public Builder table(Output<String> table) {
            $.table = table;
            return this;
        }

        /**
         * @param table Specifies an identifier for the table the stream will monitor. Due to technical limitations (read more here), avoid
         * using the following characters: `|`, `.`, `&#34;`. For more information about this resource, see docs.
         * 
         * @return builder
         * 
         */
        public Builder table(String table) {
            return table(Output.of(table));
        }

        public StreamOnTableArgs build() {
            if ($.database == null) {
                throw new MissingRequiredPropertyException("StreamOnTableArgs", "database");
            }
            if ($.schema == null) {
                throw new MissingRequiredPropertyException("StreamOnTableArgs", "schema");
            }
            if ($.table == null) {
                throw new MissingRequiredPropertyException("StreamOnTableArgs", "table");
            }
            return $;
        }
    }

}
