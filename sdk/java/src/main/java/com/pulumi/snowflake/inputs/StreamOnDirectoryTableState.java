// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.snowflake.inputs.StreamOnDirectoryTableDescribeOutputArgs;
import com.pulumi.snowflake.inputs.StreamOnDirectoryTableShowOutputArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamOnDirectoryTableState extends com.pulumi.resources.ResourceArgs {

    public static final StreamOnDirectoryTableState Empty = new StreamOnDirectoryTableState();

    /**
     * Specifies a comment for the stream.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Specifies a comment for the stream.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="copyGrants")
    private @Nullable Output<Boolean> copyGrants;

    public Optional<Output<Boolean>> copyGrants() {
        return Optional.ofNullable(this.copyGrants);
    }

    /**
     * The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="database")
    private @Nullable Output<String> database;

    /**
     * @return The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> database() {
        return Optional.ofNullable(this.database);
    }

    /**
     * Outputs the result of `DESCRIBE STREAM` for the given stream.
     * 
     */
    @Import(name="describeOutputs")
    private @Nullable Output<List<StreamOnDirectoryTableDescribeOutputArgs>> describeOutputs;

    /**
     * @return Outputs the result of `DESCRIBE STREAM` for the given stream.
     * 
     */
    public Optional<Output<List<StreamOnDirectoryTableDescribeOutputArgs>>> describeOutputs() {
        return Optional.ofNullable(this.describeOutputs);
    }

    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    @Import(name="fullyQualifiedName")
    private @Nullable Output<String> fullyQualifiedName;

    /**
     * @return Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    public Optional<Output<String>> fullyQualifiedName() {
        return Optional.ofNullable(this.fullyQualifiedName);
    }

    /**
     * Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="schema")
    private @Nullable Output<String> schema;

    /**
     * @return The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> schema() {
        return Optional.ofNullable(this.schema);
    }

    /**
     * Outputs the result of `SHOW STREAMS` for the given stream.
     * 
     */
    @Import(name="showOutputs")
    private @Nullable Output<List<StreamOnDirectoryTableShowOutputArgs>> showOutputs;

    /**
     * @return Outputs the result of `SHOW STREAMS` for the given stream.
     * 
     */
    public Optional<Output<List<StreamOnDirectoryTableShowOutputArgs>>> showOutputs() {
        return Optional.ofNullable(this.showOutputs);
    }

    /**
     * Specifies an identifier for the stage the stream will monitor. Due to Snowflake limitations, the provider can not read the stage&#39;s database and schema. For stages, Snowflake returns only partially qualified name instead of fully qualified name. Please use stages located in the same schema as the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`. For more information about this resource, see docs.
     * 
     */
    @Import(name="stage")
    private @Nullable Output<String> stage;

    /**
     * @return Specifies an identifier for the stage the stream will monitor. Due to Snowflake limitations, the provider can not read the stage&#39;s database and schema. For stages, Snowflake returns only partially qualified name instead of fully qualified name. Please use stages located in the same schema as the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`. For more information about this resource, see docs.
     * 
     */
    public Optional<Output<String>> stage() {
        return Optional.ofNullable(this.stage);
    }

    @Import(name="stale")
    private @Nullable Output<Boolean> stale;

    public Optional<Output<Boolean>> stale() {
        return Optional.ofNullable(this.stale);
    }

    /**
     * Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.
     * 
     */
    @Import(name="streamType")
    private @Nullable Output<String> streamType;

    /**
     * @return Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.
     * 
     */
    public Optional<Output<String>> streamType() {
        return Optional.ofNullable(this.streamType);
    }

    private StreamOnDirectoryTableState() {}

    private StreamOnDirectoryTableState(StreamOnDirectoryTableState $) {
        this.comment = $.comment;
        this.copyGrants = $.copyGrants;
        this.database = $.database;
        this.describeOutputs = $.describeOutputs;
        this.fullyQualifiedName = $.fullyQualifiedName;
        this.name = $.name;
        this.schema = $.schema;
        this.showOutputs = $.showOutputs;
        this.stage = $.stage;
        this.stale = $.stale;
        this.streamType = $.streamType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamOnDirectoryTableState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamOnDirectoryTableState $;

        public Builder() {
            $ = new StreamOnDirectoryTableState();
        }

        public Builder(StreamOnDirectoryTableState defaults) {
            $ = new StreamOnDirectoryTableState(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment Specifies a comment for the stream.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Specifies a comment for the stream.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder copyGrants(@Nullable Output<Boolean> copyGrants) {
            $.copyGrants = copyGrants;
            return this;
        }

        public Builder copyGrants(Boolean copyGrants) {
            return copyGrants(Output.of(copyGrants));
        }

        /**
         * @param database The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(@Nullable Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param describeOutputs Outputs the result of `DESCRIBE STREAM` for the given stream.
         * 
         * @return builder
         * 
         */
        public Builder describeOutputs(@Nullable Output<List<StreamOnDirectoryTableDescribeOutputArgs>> describeOutputs) {
            $.describeOutputs = describeOutputs;
            return this;
        }

        /**
         * @param describeOutputs Outputs the result of `DESCRIBE STREAM` for the given stream.
         * 
         * @return builder
         * 
         */
        public Builder describeOutputs(List<StreamOnDirectoryTableDescribeOutputArgs> describeOutputs) {
            return describeOutputs(Output.of(describeOutputs));
        }

        /**
         * @param describeOutputs Outputs the result of `DESCRIBE STREAM` for the given stream.
         * 
         * @return builder
         * 
         */
        public Builder describeOutputs(StreamOnDirectoryTableDescribeOutputArgs... describeOutputs) {
            return describeOutputs(List.of(describeOutputs));
        }

        /**
         * @param fullyQualifiedName Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
         * 
         * @return builder
         * 
         */
        public Builder fullyQualifiedName(@Nullable Output<String> fullyQualifiedName) {
            $.fullyQualifiedName = fullyQualifiedName;
            return this;
        }

        /**
         * @param fullyQualifiedName Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
         * 
         * @return builder
         * 
         */
        public Builder fullyQualifiedName(String fullyQualifiedName) {
            return fullyQualifiedName(Output.of(fullyQualifiedName));
        }

        /**
         * @param name Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param schema The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder schema(@Nullable Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param showOutputs Outputs the result of `SHOW STREAMS` for the given stream.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(@Nullable Output<List<StreamOnDirectoryTableShowOutputArgs>> showOutputs) {
            $.showOutputs = showOutputs;
            return this;
        }

        /**
         * @param showOutputs Outputs the result of `SHOW STREAMS` for the given stream.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(List<StreamOnDirectoryTableShowOutputArgs> showOutputs) {
            return showOutputs(Output.of(showOutputs));
        }

        /**
         * @param showOutputs Outputs the result of `SHOW STREAMS` for the given stream.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(StreamOnDirectoryTableShowOutputArgs... showOutputs) {
            return showOutputs(List.of(showOutputs));
        }

        /**
         * @param stage Specifies an identifier for the stage the stream will monitor. Due to Snowflake limitations, the provider can not read the stage&#39;s database and schema. For stages, Snowflake returns only partially qualified name instead of fully qualified name. Please use stages located in the same schema as the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`. For more information about this resource, see docs.
         * 
         * @return builder
         * 
         */
        public Builder stage(@Nullable Output<String> stage) {
            $.stage = stage;
            return this;
        }

        /**
         * @param stage Specifies an identifier for the stage the stream will monitor. Due to Snowflake limitations, the provider can not read the stage&#39;s database and schema. For stages, Snowflake returns only partially qualified name instead of fully qualified name. Please use stages located in the same schema as the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`. For more information about this resource, see docs.
         * 
         * @return builder
         * 
         */
        public Builder stage(String stage) {
            return stage(Output.of(stage));
        }

        public Builder stale(@Nullable Output<Boolean> stale) {
            $.stale = stale;
            return this;
        }

        public Builder stale(Boolean stale) {
            return stale(Output.of(stale));
        }

        /**
         * @param streamType Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.
         * 
         * @return builder
         * 
         */
        public Builder streamType(@Nullable Output<String> streamType) {
            $.streamType = streamType;
            return this;
        }

        /**
         * @param streamType Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.
         * 
         * @return builder
         * 
         */
        public Builder streamType(String streamType) {
            return streamType(Output.of(streamType));
        }

        public StreamOnDirectoryTableState build() {
            return $;
        }
    }

}
