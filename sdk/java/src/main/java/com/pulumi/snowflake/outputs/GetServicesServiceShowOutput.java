// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServicesServiceShowOutput {
    private Boolean autoResume;
    private Integer autoSuspendSecs;
    private String comment;
    private String computePool;
    private String createdOn;
    private Integer currentInstances;
    private String databaseName;
    private String dnsName;
    private List<String> externalAccessIntegrations;
    private Boolean isAsyncJob;
    private Boolean isJob;
    private Boolean isUpgrading;
    private String managingObjectDomain;
    private String managingObjectName;
    private Integer maxInstances;
    private Integer minInstances;
    private Integer minReadyInstances;
    private String name;
    private String owner;
    private String ownerRoleType;
    private String queryWarehouse;
    private String resumedOn;
    private String schemaName;
    private String specDigest;
    private String status;
    private String suspendedOn;
    private Integer targetInstances;
    private String updatedOn;

    private GetServicesServiceShowOutput() {}
    public Boolean autoResume() {
        return this.autoResume;
    }
    public Integer autoSuspendSecs() {
        return this.autoSuspendSecs;
    }
    public String comment() {
        return this.comment;
    }
    public String computePool() {
        return this.computePool;
    }
    public String createdOn() {
        return this.createdOn;
    }
    public Integer currentInstances() {
        return this.currentInstances;
    }
    public String databaseName() {
        return this.databaseName;
    }
    public String dnsName() {
        return this.dnsName;
    }
    public List<String> externalAccessIntegrations() {
        return this.externalAccessIntegrations;
    }
    public Boolean isAsyncJob() {
        return this.isAsyncJob;
    }
    public Boolean isJob() {
        return this.isJob;
    }
    public Boolean isUpgrading() {
        return this.isUpgrading;
    }
    public String managingObjectDomain() {
        return this.managingObjectDomain;
    }
    public String managingObjectName() {
        return this.managingObjectName;
    }
    public Integer maxInstances() {
        return this.maxInstances;
    }
    public Integer minInstances() {
        return this.minInstances;
    }
    public Integer minReadyInstances() {
        return this.minReadyInstances;
    }
    public String name() {
        return this.name;
    }
    public String owner() {
        return this.owner;
    }
    public String ownerRoleType() {
        return this.ownerRoleType;
    }
    public String queryWarehouse() {
        return this.queryWarehouse;
    }
    public String resumedOn() {
        return this.resumedOn;
    }
    public String schemaName() {
        return this.schemaName;
    }
    public String specDigest() {
        return this.specDigest;
    }
    public String status() {
        return this.status;
    }
    public String suspendedOn() {
        return this.suspendedOn;
    }
    public Integer targetInstances() {
        return this.targetInstances;
    }
    public String updatedOn() {
        return this.updatedOn;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServicesServiceShowOutput defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean autoResume;
        private Integer autoSuspendSecs;
        private String comment;
        private String computePool;
        private String createdOn;
        private Integer currentInstances;
        private String databaseName;
        private String dnsName;
        private List<String> externalAccessIntegrations;
        private Boolean isAsyncJob;
        private Boolean isJob;
        private Boolean isUpgrading;
        private String managingObjectDomain;
        private String managingObjectName;
        private Integer maxInstances;
        private Integer minInstances;
        private Integer minReadyInstances;
        private String name;
        private String owner;
        private String ownerRoleType;
        private String queryWarehouse;
        private String resumedOn;
        private String schemaName;
        private String specDigest;
        private String status;
        private String suspendedOn;
        private Integer targetInstances;
        private String updatedOn;
        public Builder() {}
        public Builder(GetServicesServiceShowOutput defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoResume = defaults.autoResume;
    	      this.autoSuspendSecs = defaults.autoSuspendSecs;
    	      this.comment = defaults.comment;
    	      this.computePool = defaults.computePool;
    	      this.createdOn = defaults.createdOn;
    	      this.currentInstances = defaults.currentInstances;
    	      this.databaseName = defaults.databaseName;
    	      this.dnsName = defaults.dnsName;
    	      this.externalAccessIntegrations = defaults.externalAccessIntegrations;
    	      this.isAsyncJob = defaults.isAsyncJob;
    	      this.isJob = defaults.isJob;
    	      this.isUpgrading = defaults.isUpgrading;
    	      this.managingObjectDomain = defaults.managingObjectDomain;
    	      this.managingObjectName = defaults.managingObjectName;
    	      this.maxInstances = defaults.maxInstances;
    	      this.minInstances = defaults.minInstances;
    	      this.minReadyInstances = defaults.minReadyInstances;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.ownerRoleType = defaults.ownerRoleType;
    	      this.queryWarehouse = defaults.queryWarehouse;
    	      this.resumedOn = defaults.resumedOn;
    	      this.schemaName = defaults.schemaName;
    	      this.specDigest = defaults.specDigest;
    	      this.status = defaults.status;
    	      this.suspendedOn = defaults.suspendedOn;
    	      this.targetInstances = defaults.targetInstances;
    	      this.updatedOn = defaults.updatedOn;
        }

        @CustomType.Setter
        public Builder autoResume(Boolean autoResume) {
            if (autoResume == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "autoResume");
            }
            this.autoResume = autoResume;
            return this;
        }
        @CustomType.Setter
        public Builder autoSuspendSecs(Integer autoSuspendSecs) {
            if (autoSuspendSecs == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "autoSuspendSecs");
            }
            this.autoSuspendSecs = autoSuspendSecs;
            return this;
        }
        @CustomType.Setter
        public Builder comment(String comment) {
            if (comment == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "comment");
            }
            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder computePool(String computePool) {
            if (computePool == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "computePool");
            }
            this.computePool = computePool;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder currentInstances(Integer currentInstances) {
            if (currentInstances == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "currentInstances");
            }
            this.currentInstances = currentInstances;
            return this;
        }
        @CustomType.Setter
        public Builder databaseName(String databaseName) {
            if (databaseName == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "databaseName");
            }
            this.databaseName = databaseName;
            return this;
        }
        @CustomType.Setter
        public Builder dnsName(String dnsName) {
            if (dnsName == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "dnsName");
            }
            this.dnsName = dnsName;
            return this;
        }
        @CustomType.Setter
        public Builder externalAccessIntegrations(List<String> externalAccessIntegrations) {
            if (externalAccessIntegrations == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "externalAccessIntegrations");
            }
            this.externalAccessIntegrations = externalAccessIntegrations;
            return this;
        }
        public Builder externalAccessIntegrations(String... externalAccessIntegrations) {
            return externalAccessIntegrations(List.of(externalAccessIntegrations));
        }
        @CustomType.Setter
        public Builder isAsyncJob(Boolean isAsyncJob) {
            if (isAsyncJob == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "isAsyncJob");
            }
            this.isAsyncJob = isAsyncJob;
            return this;
        }
        @CustomType.Setter
        public Builder isJob(Boolean isJob) {
            if (isJob == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "isJob");
            }
            this.isJob = isJob;
            return this;
        }
        @CustomType.Setter
        public Builder isUpgrading(Boolean isUpgrading) {
            if (isUpgrading == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "isUpgrading");
            }
            this.isUpgrading = isUpgrading;
            return this;
        }
        @CustomType.Setter
        public Builder managingObjectDomain(String managingObjectDomain) {
            if (managingObjectDomain == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "managingObjectDomain");
            }
            this.managingObjectDomain = managingObjectDomain;
            return this;
        }
        @CustomType.Setter
        public Builder managingObjectName(String managingObjectName) {
            if (managingObjectName == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "managingObjectName");
            }
            this.managingObjectName = managingObjectName;
            return this;
        }
        @CustomType.Setter
        public Builder maxInstances(Integer maxInstances) {
            if (maxInstances == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "maxInstances");
            }
            this.maxInstances = maxInstances;
            return this;
        }
        @CustomType.Setter
        public Builder minInstances(Integer minInstances) {
            if (minInstances == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "minInstances");
            }
            this.minInstances = minInstances;
            return this;
        }
        @CustomType.Setter
        public Builder minReadyInstances(Integer minReadyInstances) {
            if (minReadyInstances == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "minReadyInstances");
            }
            this.minReadyInstances = minReadyInstances;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder owner(String owner) {
            if (owner == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "owner");
            }
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder ownerRoleType(String ownerRoleType) {
            if (ownerRoleType == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "ownerRoleType");
            }
            this.ownerRoleType = ownerRoleType;
            return this;
        }
        @CustomType.Setter
        public Builder queryWarehouse(String queryWarehouse) {
            if (queryWarehouse == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "queryWarehouse");
            }
            this.queryWarehouse = queryWarehouse;
            return this;
        }
        @CustomType.Setter
        public Builder resumedOn(String resumedOn) {
            if (resumedOn == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "resumedOn");
            }
            this.resumedOn = resumedOn;
            return this;
        }
        @CustomType.Setter
        public Builder schemaName(String schemaName) {
            if (schemaName == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "schemaName");
            }
            this.schemaName = schemaName;
            return this;
        }
        @CustomType.Setter
        public Builder specDigest(String specDigest) {
            if (specDigest == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "specDigest");
            }
            this.specDigest = specDigest;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder suspendedOn(String suspendedOn) {
            if (suspendedOn == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "suspendedOn");
            }
            this.suspendedOn = suspendedOn;
            return this;
        }
        @CustomType.Setter
        public Builder targetInstances(Integer targetInstances) {
            if (targetInstances == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "targetInstances");
            }
            this.targetInstances = targetInstances;
            return this;
        }
        @CustomType.Setter
        public Builder updatedOn(String updatedOn) {
            if (updatedOn == null) {
              throw new MissingRequiredPropertyException("GetServicesServiceShowOutput", "updatedOn");
            }
            this.updatedOn = updatedOn;
            return this;
        }
        public GetServicesServiceShowOutput build() {
            final var _resultValue = new GetServicesServiceShowOutput();
            _resultValue.autoResume = autoResume;
            _resultValue.autoSuspendSecs = autoSuspendSecs;
            _resultValue.comment = comment;
            _resultValue.computePool = computePool;
            _resultValue.createdOn = createdOn;
            _resultValue.currentInstances = currentInstances;
            _resultValue.databaseName = databaseName;
            _resultValue.dnsName = dnsName;
            _resultValue.externalAccessIntegrations = externalAccessIntegrations;
            _resultValue.isAsyncJob = isAsyncJob;
            _resultValue.isJob = isJob;
            _resultValue.isUpgrading = isUpgrading;
            _resultValue.managingObjectDomain = managingObjectDomain;
            _resultValue.managingObjectName = managingObjectName;
            _resultValue.maxInstances = maxInstances;
            _resultValue.minInstances = minInstances;
            _resultValue.minReadyInstances = minReadyInstances;
            _resultValue.name = name;
            _resultValue.owner = owner;
            _resultValue.ownerRoleType = ownerRoleType;
            _resultValue.queryWarehouse = queryWarehouse;
            _resultValue.resumedOn = resumedOn;
            _resultValue.schemaName = schemaName;
            _resultValue.specDigest = specDigest;
            _resultValue.status = status;
            _resultValue.suspendedOn = suspendedOn;
            _resultValue.targetInstances = targetInstances;
            _resultValue.updatedOn = updatedOn;
            return _resultValue;
        }
    }
}
