// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SessionParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final SessionParameterArgs Empty = new SessionParameterArgs();

    /**
     * Name of session parameter. Valid values are those in [session parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#session-parameters).
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return Name of session parameter. Valid values are those in [session parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#session-parameters).
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * If true, the session parameter will be set on the account level.
     * 
     */
    @Import(name="onAccount")
    private @Nullable Output<Boolean> onAccount;

    /**
     * @return If true, the session parameter will be set on the account level.
     * 
     */
    public Optional<Output<Boolean>> onAccount() {
        return Optional.ofNullable(this.onAccount);
    }

    /**
     * The user to set the session parameter for. Required if on_account is false
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return The user to set the session parameter for. Required if on_account is false
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    /**
     * Value of session parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return Value of session parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private SessionParameterArgs() {}

    private SessionParameterArgs(SessionParameterArgs $) {
        this.key = $.key;
        this.onAccount = $.onAccount;
        this.user = $.user;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SessionParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SessionParameterArgs $;

        public Builder() {
            $ = new SessionParameterArgs();
        }

        public Builder(SessionParameterArgs defaults) {
            $ = new SessionParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param key Name of session parameter. Valid values are those in [session parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#session-parameters).
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Name of session parameter. Valid values are those in [session parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#session-parameters).
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param onAccount If true, the session parameter will be set on the account level.
         * 
         * @return builder
         * 
         */
        public Builder onAccount(@Nullable Output<Boolean> onAccount) {
            $.onAccount = onAccount;
            return this;
        }

        /**
         * @param onAccount If true, the session parameter will be set on the account level.
         * 
         * @return builder
         * 
         */
        public Builder onAccount(Boolean onAccount) {
            return onAccount(Output.of(onAccount));
        }

        /**
         * @param user The user to set the session parameter for. Required if on_account is false
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user The user to set the session parameter for. Required if on_account is false
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        /**
         * @param value Value of session parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Value of session parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public SessionParameterArgs build() {
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            return $;
        }
    }

}
