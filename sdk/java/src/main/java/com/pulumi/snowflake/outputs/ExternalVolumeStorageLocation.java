// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ExternalVolumeStorageLocation {
    /**
     * @return Specifies the ID for your Office 365 tenant that the allowed and blocked storage accounts belong to.
     * 
     */
    private @Nullable String azureTenantId;
    /**
     * @return Specifies the ID for the KMS-managed key used to encrypt files.
     * 
     */
    private @Nullable String encryptionKmsKeyId;
    /**
     * @return Specifies the encryption type used.
     * 
     */
    private @Nullable String encryptionType;
    /**
     * @return External ID that Snowflake uses to establish a trust relationship with AWS.
     * 
     */
    private @Nullable String storageAwsExternalId;
    /**
     * @return Specifies the case-sensitive Amazon Resource Name (ARN) of the AWS identity and access management (IAM) role that grants privileges on the S3 bucket containing your data files.
     * 
     */
    private @Nullable String storageAwsRoleArn;
    /**
     * @return Specifies the base URL for your cloud storage location.
     * 
     */
    private String storageBaseUrl;
    private String storageLocationName;
    /**
     * @return Specifies the cloud storage provider that stores your data files. Valid values are (case-insensitive): `GCS` | `AZURE` | `S3` | `S3GOV`.
     * 
     */
    private String storageProvider;

    private ExternalVolumeStorageLocation() {}
    /**
     * @return Specifies the ID for your Office 365 tenant that the allowed and blocked storage accounts belong to.
     * 
     */
    public Optional<String> azureTenantId() {
        return Optional.ofNullable(this.azureTenantId);
    }
    /**
     * @return Specifies the ID for the KMS-managed key used to encrypt files.
     * 
     */
    public Optional<String> encryptionKmsKeyId() {
        return Optional.ofNullable(this.encryptionKmsKeyId);
    }
    /**
     * @return Specifies the encryption type used.
     * 
     */
    public Optional<String> encryptionType() {
        return Optional.ofNullable(this.encryptionType);
    }
    /**
     * @return External ID that Snowflake uses to establish a trust relationship with AWS.
     * 
     */
    public Optional<String> storageAwsExternalId() {
        return Optional.ofNullable(this.storageAwsExternalId);
    }
    /**
     * @return Specifies the case-sensitive Amazon Resource Name (ARN) of the AWS identity and access management (IAM) role that grants privileges on the S3 bucket containing your data files.
     * 
     */
    public Optional<String> storageAwsRoleArn() {
        return Optional.ofNullable(this.storageAwsRoleArn);
    }
    /**
     * @return Specifies the base URL for your cloud storage location.
     * 
     */
    public String storageBaseUrl() {
        return this.storageBaseUrl;
    }
    public String storageLocationName() {
        return this.storageLocationName;
    }
    /**
     * @return Specifies the cloud storage provider that stores your data files. Valid values are (case-insensitive): `GCS` | `AZURE` | `S3` | `S3GOV`.
     * 
     */
    public String storageProvider() {
        return this.storageProvider;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExternalVolumeStorageLocation defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String azureTenantId;
        private @Nullable String encryptionKmsKeyId;
        private @Nullable String encryptionType;
        private @Nullable String storageAwsExternalId;
        private @Nullable String storageAwsRoleArn;
        private String storageBaseUrl;
        private String storageLocationName;
        private String storageProvider;
        public Builder() {}
        public Builder(ExternalVolumeStorageLocation defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.azureTenantId = defaults.azureTenantId;
    	      this.encryptionKmsKeyId = defaults.encryptionKmsKeyId;
    	      this.encryptionType = defaults.encryptionType;
    	      this.storageAwsExternalId = defaults.storageAwsExternalId;
    	      this.storageAwsRoleArn = defaults.storageAwsRoleArn;
    	      this.storageBaseUrl = defaults.storageBaseUrl;
    	      this.storageLocationName = defaults.storageLocationName;
    	      this.storageProvider = defaults.storageProvider;
        }

        @CustomType.Setter
        public Builder azureTenantId(@Nullable String azureTenantId) {

            this.azureTenantId = azureTenantId;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionKmsKeyId(@Nullable String encryptionKmsKeyId) {

            this.encryptionKmsKeyId = encryptionKmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionType(@Nullable String encryptionType) {

            this.encryptionType = encryptionType;
            return this;
        }
        @CustomType.Setter
        public Builder storageAwsExternalId(@Nullable String storageAwsExternalId) {

            this.storageAwsExternalId = storageAwsExternalId;
            return this;
        }
        @CustomType.Setter
        public Builder storageAwsRoleArn(@Nullable String storageAwsRoleArn) {

            this.storageAwsRoleArn = storageAwsRoleArn;
            return this;
        }
        @CustomType.Setter
        public Builder storageBaseUrl(String storageBaseUrl) {
            if (storageBaseUrl == null) {
              throw new MissingRequiredPropertyException("ExternalVolumeStorageLocation", "storageBaseUrl");
            }
            this.storageBaseUrl = storageBaseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder storageLocationName(String storageLocationName) {
            if (storageLocationName == null) {
              throw new MissingRequiredPropertyException("ExternalVolumeStorageLocation", "storageLocationName");
            }
            this.storageLocationName = storageLocationName;
            return this;
        }
        @CustomType.Setter
        public Builder storageProvider(String storageProvider) {
            if (storageProvider == null) {
              throw new MissingRequiredPropertyException("ExternalVolumeStorageLocation", "storageProvider");
            }
            this.storageProvider = storageProvider;
            return this;
        }
        public ExternalVolumeStorageLocation build() {
            final var _resultValue = new ExternalVolumeStorageLocation();
            _resultValue.azureTenantId = azureTenantId;
            _resultValue.encryptionKmsKeyId = encryptionKmsKeyId;
            _resultValue.encryptionType = encryptionType;
            _resultValue.storageAwsExternalId = storageAwsExternalId;
            _resultValue.storageAwsRoleArn = storageAwsRoleArn;
            _resultValue.storageBaseUrl = storageBaseUrl;
            _resultValue.storageLocationName = storageLocationName;
            _resultValue.storageProvider = storageProvider;
            return _resultValue;
        }
    }
}
