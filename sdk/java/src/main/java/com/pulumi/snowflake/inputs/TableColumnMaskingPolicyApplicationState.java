// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableColumnMaskingPolicyApplicationState extends com.pulumi.resources.ResourceArgs {

    public static final TableColumnMaskingPolicyApplicationState Empty = new TableColumnMaskingPolicyApplicationState();

    /**
     * The column to apply the masking policy to.
     * 
     */
    @Import(name="column")
    private @Nullable Output<String> column;

    /**
     * @return The column to apply the masking policy to.
     * 
     */
    public Optional<Output<String>> column() {
        return Optional.ofNullable(this.column);
    }

    /**
     * Fully qualified name (`database.schema.policyname`) of the policy to apply.
     * 
     */
    @Import(name="maskingPolicy")
    private @Nullable Output<String> maskingPolicy;

    /**
     * @return Fully qualified name (`database.schema.policyname`) of the policy to apply.
     * 
     */
    public Optional<Output<String>> maskingPolicy() {
        return Optional.ofNullable(this.maskingPolicy);
    }

    /**
     * The fully qualified name (`database.schema.table`) of the table to apply the masking policy to.
     * 
     */
    @Import(name="table")
    private @Nullable Output<String> table;

    /**
     * @return The fully qualified name (`database.schema.table`) of the table to apply the masking policy to.
     * 
     */
    public Optional<Output<String>> table() {
        return Optional.ofNullable(this.table);
    }

    private TableColumnMaskingPolicyApplicationState() {}

    private TableColumnMaskingPolicyApplicationState(TableColumnMaskingPolicyApplicationState $) {
        this.column = $.column;
        this.maskingPolicy = $.maskingPolicy;
        this.table = $.table;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableColumnMaskingPolicyApplicationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableColumnMaskingPolicyApplicationState $;

        public Builder() {
            $ = new TableColumnMaskingPolicyApplicationState();
        }

        public Builder(TableColumnMaskingPolicyApplicationState defaults) {
            $ = new TableColumnMaskingPolicyApplicationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param column The column to apply the masking policy to.
         * 
         * @return builder
         * 
         */
        public Builder column(@Nullable Output<String> column) {
            $.column = column;
            return this;
        }

        /**
         * @param column The column to apply the masking policy to.
         * 
         * @return builder
         * 
         */
        public Builder column(String column) {
            return column(Output.of(column));
        }

        /**
         * @param maskingPolicy Fully qualified name (`database.schema.policyname`) of the policy to apply.
         * 
         * @return builder
         * 
         */
        public Builder maskingPolicy(@Nullable Output<String> maskingPolicy) {
            $.maskingPolicy = maskingPolicy;
            return this;
        }

        /**
         * @param maskingPolicy Fully qualified name (`database.schema.policyname`) of the policy to apply.
         * 
         * @return builder
         * 
         */
        public Builder maskingPolicy(String maskingPolicy) {
            return maskingPolicy(Output.of(maskingPolicy));
        }

        /**
         * @param table The fully qualified name (`database.schema.table`) of the table to apply the masking policy to.
         * 
         * @return builder
         * 
         */
        public Builder table(@Nullable Output<String> table) {
            $.table = table;
            return this;
        }

        /**
         * @param table The fully qualified name (`database.schema.table`) of the table to apply the masking policy to.
         * 
         * @return builder
         * 
         */
        public Builder table(String table) {
            return table(Output.of(table));
        }

        public TableColumnMaskingPolicyApplicationState build() {
            return $;
        }
    }

}
