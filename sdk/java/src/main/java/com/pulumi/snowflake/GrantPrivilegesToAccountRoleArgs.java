// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.snowflake.inputs.GrantPrivilegesToAccountRoleOnAccountObjectArgs;
import com.pulumi.snowflake.inputs.GrantPrivilegesToAccountRoleOnSchemaArgs;
import com.pulumi.snowflake.inputs.GrantPrivilegesToAccountRoleOnSchemaObjectArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GrantPrivilegesToAccountRoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final GrantPrivilegesToAccountRoleArgs Empty = new GrantPrivilegesToAccountRoleArgs();

    /**
     * The fully qualified name of the account role to which privileges will be granted. For more information about this resource, see docs.
     * 
     */
    @Import(name="accountRoleName", required=true)
    private Output<String> accountRoleName;

    /**
     * @return The fully qualified name of the account role to which privileges will be granted. For more information about this resource, see docs.
     * 
     */
    public Output<String> accountRoleName() {
        return this.accountRoleName;
    }

    /**
     * (Default: `false`) Grant all privileges on the account role. When all privileges cannot be granted, the provider returns a warning, which is aligned with the Snowsight behavior.
     * 
     */
    @Import(name="allPrivileges")
    private @Nullable Output<Boolean> allPrivileges;

    /**
     * @return (Default: `false`) Grant all privileges on the account role. When all privileges cannot be granted, the provider returns a warning, which is aligned with the Snowsight behavior.
     * 
     */
    public Optional<Output<Boolean>> allPrivileges() {
        return Optional.ofNullable(this.allPrivileges);
    }

    @Import(name="alwaysApply")
    private @Nullable Output<Boolean> alwaysApply;

    public Optional<Output<Boolean>> alwaysApply() {
        return Optional.ofNullable(this.alwaysApply);
    }

    /**
     * (Default: ``) This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the alwaysApply field.
     * 
     */
    @Import(name="alwaysApplyTrigger")
    private @Nullable Output<String> alwaysApplyTrigger;

    /**
     * @return (Default: ``) This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the alwaysApply field.
     * 
     */
    public Optional<Output<String>> alwaysApplyTrigger() {
        return Optional.ofNullable(this.alwaysApplyTrigger);
    }

    /**
     * (Default: `false`) If true, the privileges will be granted on the account.
     * 
     */
    @Import(name="onAccount")
    private @Nullable Output<Boolean> onAccount;

    /**
     * @return (Default: `false`) If true, the privileges will be granted on the account.
     * 
     */
    public Optional<Output<Boolean>> onAccount() {
        return Optional.ofNullable(this.onAccount);
    }

    /**
     * Specifies the account object on which privileges will be granted
     * 
     */
    @Import(name="onAccountObject")
    private @Nullable Output<GrantPrivilegesToAccountRoleOnAccountObjectArgs> onAccountObject;

    /**
     * @return Specifies the account object on which privileges will be granted
     * 
     */
    public Optional<Output<GrantPrivilegesToAccountRoleOnAccountObjectArgs>> onAccountObject() {
        return Optional.ofNullable(this.onAccountObject);
    }

    /**
     * Specifies the schema on which privileges will be granted.
     * 
     */
    @Import(name="onSchema")
    private @Nullable Output<GrantPrivilegesToAccountRoleOnSchemaArgs> onSchema;

    /**
     * @return Specifies the schema on which privileges will be granted.
     * 
     */
    public Optional<Output<GrantPrivilegesToAccountRoleOnSchemaArgs>> onSchema() {
        return Optional.ofNullable(this.onSchema);
    }

    /**
     * Specifies the schema object on which privileges will be granted.
     * 
     */
    @Import(name="onSchemaObject")
    private @Nullable Output<GrantPrivilegesToAccountRoleOnSchemaObjectArgs> onSchemaObject;

    /**
     * @return Specifies the schema object on which privileges will be granted.
     * 
     */
    public Optional<Output<GrantPrivilegesToAccountRoleOnSchemaObjectArgs>> onSchemaObject() {
        return Optional.ofNullable(this.onSchemaObject);
    }

    /**
     * The privileges to grant on the account role. This field is case-sensitive; use only upper-case privileges.
     * 
     */
    @Import(name="privileges")
    private @Nullable Output<List<String>> privileges;

    /**
     * @return The privileges to grant on the account role. This field is case-sensitive; use only upper-case privileges.
     * 
     */
    public Optional<Output<List<String>>> privileges() {
        return Optional.ofNullable(this.privileges);
    }

    /**
     * (Default: `false`) Specifies whether the grantee can grant the privileges to other users.
     * 
     */
    @Import(name="withGrantOption")
    private @Nullable Output<Boolean> withGrantOption;

    /**
     * @return (Default: `false`) Specifies whether the grantee can grant the privileges to other users.
     * 
     */
    public Optional<Output<Boolean>> withGrantOption() {
        return Optional.ofNullable(this.withGrantOption);
    }

    private GrantPrivilegesToAccountRoleArgs() {}

    private GrantPrivilegesToAccountRoleArgs(GrantPrivilegesToAccountRoleArgs $) {
        this.accountRoleName = $.accountRoleName;
        this.allPrivileges = $.allPrivileges;
        this.alwaysApply = $.alwaysApply;
        this.alwaysApplyTrigger = $.alwaysApplyTrigger;
        this.onAccount = $.onAccount;
        this.onAccountObject = $.onAccountObject;
        this.onSchema = $.onSchema;
        this.onSchemaObject = $.onSchemaObject;
        this.privileges = $.privileges;
        this.withGrantOption = $.withGrantOption;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GrantPrivilegesToAccountRoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GrantPrivilegesToAccountRoleArgs $;

        public Builder() {
            $ = new GrantPrivilegesToAccountRoleArgs();
        }

        public Builder(GrantPrivilegesToAccountRoleArgs defaults) {
            $ = new GrantPrivilegesToAccountRoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountRoleName The fully qualified name of the account role to which privileges will be granted. For more information about this resource, see docs.
         * 
         * @return builder
         * 
         */
        public Builder accountRoleName(Output<String> accountRoleName) {
            $.accountRoleName = accountRoleName;
            return this;
        }

        /**
         * @param accountRoleName The fully qualified name of the account role to which privileges will be granted. For more information about this resource, see docs.
         * 
         * @return builder
         * 
         */
        public Builder accountRoleName(String accountRoleName) {
            return accountRoleName(Output.of(accountRoleName));
        }

        /**
         * @param allPrivileges (Default: `false`) Grant all privileges on the account role. When all privileges cannot be granted, the provider returns a warning, which is aligned with the Snowsight behavior.
         * 
         * @return builder
         * 
         */
        public Builder allPrivileges(@Nullable Output<Boolean> allPrivileges) {
            $.allPrivileges = allPrivileges;
            return this;
        }

        /**
         * @param allPrivileges (Default: `false`) Grant all privileges on the account role. When all privileges cannot be granted, the provider returns a warning, which is aligned with the Snowsight behavior.
         * 
         * @return builder
         * 
         */
        public Builder allPrivileges(Boolean allPrivileges) {
            return allPrivileges(Output.of(allPrivileges));
        }

        public Builder alwaysApply(@Nullable Output<Boolean> alwaysApply) {
            $.alwaysApply = alwaysApply;
            return this;
        }

        public Builder alwaysApply(Boolean alwaysApply) {
            return alwaysApply(Output.of(alwaysApply));
        }

        /**
         * @param alwaysApplyTrigger (Default: ``) This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the alwaysApply field.
         * 
         * @return builder
         * 
         */
        public Builder alwaysApplyTrigger(@Nullable Output<String> alwaysApplyTrigger) {
            $.alwaysApplyTrigger = alwaysApplyTrigger;
            return this;
        }

        /**
         * @param alwaysApplyTrigger (Default: ``) This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the alwaysApply field.
         * 
         * @return builder
         * 
         */
        public Builder alwaysApplyTrigger(String alwaysApplyTrigger) {
            return alwaysApplyTrigger(Output.of(alwaysApplyTrigger));
        }

        /**
         * @param onAccount (Default: `false`) If true, the privileges will be granted on the account.
         * 
         * @return builder
         * 
         */
        public Builder onAccount(@Nullable Output<Boolean> onAccount) {
            $.onAccount = onAccount;
            return this;
        }

        /**
         * @param onAccount (Default: `false`) If true, the privileges will be granted on the account.
         * 
         * @return builder
         * 
         */
        public Builder onAccount(Boolean onAccount) {
            return onAccount(Output.of(onAccount));
        }

        /**
         * @param onAccountObject Specifies the account object on which privileges will be granted
         * 
         * @return builder
         * 
         */
        public Builder onAccountObject(@Nullable Output<GrantPrivilegesToAccountRoleOnAccountObjectArgs> onAccountObject) {
            $.onAccountObject = onAccountObject;
            return this;
        }

        /**
         * @param onAccountObject Specifies the account object on which privileges will be granted
         * 
         * @return builder
         * 
         */
        public Builder onAccountObject(GrantPrivilegesToAccountRoleOnAccountObjectArgs onAccountObject) {
            return onAccountObject(Output.of(onAccountObject));
        }

        /**
         * @param onSchema Specifies the schema on which privileges will be granted.
         * 
         * @return builder
         * 
         */
        public Builder onSchema(@Nullable Output<GrantPrivilegesToAccountRoleOnSchemaArgs> onSchema) {
            $.onSchema = onSchema;
            return this;
        }

        /**
         * @param onSchema Specifies the schema on which privileges will be granted.
         * 
         * @return builder
         * 
         */
        public Builder onSchema(GrantPrivilegesToAccountRoleOnSchemaArgs onSchema) {
            return onSchema(Output.of(onSchema));
        }

        /**
         * @param onSchemaObject Specifies the schema object on which privileges will be granted.
         * 
         * @return builder
         * 
         */
        public Builder onSchemaObject(@Nullable Output<GrantPrivilegesToAccountRoleOnSchemaObjectArgs> onSchemaObject) {
            $.onSchemaObject = onSchemaObject;
            return this;
        }

        /**
         * @param onSchemaObject Specifies the schema object on which privileges will be granted.
         * 
         * @return builder
         * 
         */
        public Builder onSchemaObject(GrantPrivilegesToAccountRoleOnSchemaObjectArgs onSchemaObject) {
            return onSchemaObject(Output.of(onSchemaObject));
        }

        /**
         * @param privileges The privileges to grant on the account role. This field is case-sensitive; use only upper-case privileges.
         * 
         * @return builder
         * 
         */
        public Builder privileges(@Nullable Output<List<String>> privileges) {
            $.privileges = privileges;
            return this;
        }

        /**
         * @param privileges The privileges to grant on the account role. This field is case-sensitive; use only upper-case privileges.
         * 
         * @return builder
         * 
         */
        public Builder privileges(List<String> privileges) {
            return privileges(Output.of(privileges));
        }

        /**
         * @param privileges The privileges to grant on the account role. This field is case-sensitive; use only upper-case privileges.
         * 
         * @return builder
         * 
         */
        public Builder privileges(String... privileges) {
            return privileges(List.of(privileges));
        }

        /**
         * @param withGrantOption (Default: `false`) Specifies whether the grantee can grant the privileges to other users.
         * 
         * @return builder
         * 
         */
        public Builder withGrantOption(@Nullable Output<Boolean> withGrantOption) {
            $.withGrantOption = withGrantOption;
            return this;
        }

        /**
         * @param withGrantOption (Default: `false`) Specifies whether the grantee can grant the privileges to other users.
         * 
         * @return builder
         * 
         */
        public Builder withGrantOption(Boolean withGrantOption) {
            return withGrantOption(Output.of(withGrantOption));
        }

        public GrantPrivilegesToAccountRoleArgs build() {
            if ($.accountRoleName == null) {
                throw new MissingRequiredPropertyException("GrantPrivilegesToAccountRoleArgs", "accountRoleName");
            }
            return $;
        }
    }

}
