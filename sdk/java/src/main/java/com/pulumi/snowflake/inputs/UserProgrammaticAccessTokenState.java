// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.snowflake.inputs.UserProgrammaticAccessTokenShowOutputArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserProgrammaticAccessTokenState extends com.pulumi.resources.ResourceArgs {

    public static final UserProgrammaticAccessTokenState Empty = new UserProgrammaticAccessTokenState();

    /**
     * Descriptive comment about the programmatic access token.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Descriptive comment about the programmatic access token.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="daysToExpiry")
    private @Nullable Output<Integer> daysToExpiry;

    public Optional<Output<Integer>> daysToExpiry() {
        return Optional.ofNullable(this.daysToExpiry);
    }

    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Disables or enables the programmatic access token. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<String> disabled;

    /**
     * @return (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Disables or enables the programmatic access token. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
     * 
     */
    public Optional<Output<String>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) This field is only used when the token is rotated by changing the `keeper` field. Sets the expiration time of the existing token secret to expire after the specified number of hours. You can set this to a value of 0 to expire the current token secret immediately.
     * 
     */
    @Import(name="expireRotatedTokenAfterHours")
    private @Nullable Output<Integer> expireRotatedTokenAfterHours;

    /**
     * @return (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) This field is only used when the token is rotated by changing the `keeper` field. Sets the expiration time of the existing token secret to expire after the specified number of hours. You can set this to a value of 0 to expire the current token secret immediately.
     * 
     */
    public Optional<Output<Integer>> expireRotatedTokenAfterHours() {
        return Optional.ofNullable(this.expireRotatedTokenAfterHours);
    }

    /**
     * Arbitrary string that, if and only if, changed from a non-empty to a different non-empty value (or known after apply), will trigger a key to be rotated. When you add this field to the configuration, or remove it from the configuration, the rotation is not triggered. When the token is rotated, the `token` and `rotated_token_name` fields are marked as computed.
     * 
     */
    @Import(name="keeper")
    private @Nullable Output<String> keeper;

    /**
     * @return Arbitrary string that, if and only if, changed from a non-empty to a different non-empty value (or known after apply), will trigger a key to be rotated. When you add this field to the configuration, or remove it from the configuration, the rotation is not triggered. When the token is rotated, the `token` and `rotated_token_name` fields are marked as computed.
     * 
     */
    public Optional<Output<String>> keeper() {
        return Optional.ofNullable(this.keeper);
    }

    @Import(name="minsToBypassNetworkPolicyRequirement")
    private @Nullable Output<Integer> minsToBypassNetworkPolicyRequirement;

    public Optional<Output<Integer>> minsToBypassNetworkPolicyRequirement() {
        return Optional.ofNullable(this.minsToBypassNetworkPolicyRequirement);
    }

    /**
     * Specifies the name for the programmatic access token; must be unique for the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name for the programmatic access token; must be unique for the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the role used for privilege evaluation and object creation. This must be one of the roles that has already been granted to the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="roleRestriction")
    private @Nullable Output<String> roleRestriction;

    /**
     * @return The name of the role used for privilege evaluation and object creation. This must be one of the roles that has already been granted to the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> roleRestriction() {
        return Optional.ofNullable(this.roleRestriction);
    }

    /**
     * Name of the token that represents the prior secret. This field is updated only when the token is rotated. In this case, the field is marked as computed.
     * 
     */
    @Import(name="rotatedTokenName")
    private @Nullable Output<String> rotatedTokenName;

    /**
     * @return Name of the token that represents the prior secret. This field is updated only when the token is rotated. In this case, the field is marked as computed.
     * 
     */
    public Optional<Output<String>> rotatedTokenName() {
        return Optional.ofNullable(this.rotatedTokenName);
    }

    /**
     * Outputs the result of `SHOW USER PROGRAMMATIC ACCESS TOKENS` for the given user programmatic access token.
     * 
     */
    @Import(name="showOutputs")
    private @Nullable Output<List<UserProgrammaticAccessTokenShowOutputArgs>> showOutputs;

    /**
     * @return Outputs the result of `SHOW USER PROGRAMMATIC ACCESS TOKENS` for the given user programmatic access token.
     * 
     */
    public Optional<Output<List<UserProgrammaticAccessTokenShowOutputArgs>>> showOutputs() {
        return Optional.ofNullable(this.showOutputs);
    }

    /**
     * The token itself. Use this to authenticate to an endpoint. The data in this field is updated only when the token is created or rotated. In this case, the field is marked as computed.
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return The token itself. Use this to authenticate to an endpoint. The data in this field is updated only when the token is created or rotated. In this case, the field is marked as computed.
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    /**
     * The name of the user that the token is associated with. A user cannot use another user&#39;s programmatic access token to authenticate. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return The name of the user that the token is associated with. A user cannot use another user&#39;s programmatic access token to authenticate. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    private UserProgrammaticAccessTokenState() {}

    private UserProgrammaticAccessTokenState(UserProgrammaticAccessTokenState $) {
        this.comment = $.comment;
        this.daysToExpiry = $.daysToExpiry;
        this.disabled = $.disabled;
        this.expireRotatedTokenAfterHours = $.expireRotatedTokenAfterHours;
        this.keeper = $.keeper;
        this.minsToBypassNetworkPolicyRequirement = $.minsToBypassNetworkPolicyRequirement;
        this.name = $.name;
        this.roleRestriction = $.roleRestriction;
        this.rotatedTokenName = $.rotatedTokenName;
        this.showOutputs = $.showOutputs;
        this.token = $.token;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserProgrammaticAccessTokenState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserProgrammaticAccessTokenState $;

        public Builder() {
            $ = new UserProgrammaticAccessTokenState();
        }

        public Builder(UserProgrammaticAccessTokenState defaults) {
            $ = new UserProgrammaticAccessTokenState(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment Descriptive comment about the programmatic access token.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Descriptive comment about the programmatic access token.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder daysToExpiry(@Nullable Output<Integer> daysToExpiry) {
            $.daysToExpiry = daysToExpiry;
            return this;
        }

        public Builder daysToExpiry(Integer daysToExpiry) {
            return daysToExpiry(Output.of(daysToExpiry));
        }

        /**
         * @param disabled (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Disables or enables the programmatic access token. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<String> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Disables or enables the programmatic access token. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
         * 
         * @return builder
         * 
         */
        public Builder disabled(String disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param expireRotatedTokenAfterHours (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) This field is only used when the token is rotated by changing the `keeper` field. Sets the expiration time of the existing token secret to expire after the specified number of hours. You can set this to a value of 0 to expire the current token secret immediately.
         * 
         * @return builder
         * 
         */
        public Builder expireRotatedTokenAfterHours(@Nullable Output<Integer> expireRotatedTokenAfterHours) {
            $.expireRotatedTokenAfterHours = expireRotatedTokenAfterHours;
            return this;
        }

        /**
         * @param expireRotatedTokenAfterHours (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) This field is only used when the token is rotated by changing the `keeper` field. Sets the expiration time of the existing token secret to expire after the specified number of hours. You can set this to a value of 0 to expire the current token secret immediately.
         * 
         * @return builder
         * 
         */
        public Builder expireRotatedTokenAfterHours(Integer expireRotatedTokenAfterHours) {
            return expireRotatedTokenAfterHours(Output.of(expireRotatedTokenAfterHours));
        }

        /**
         * @param keeper Arbitrary string that, if and only if, changed from a non-empty to a different non-empty value (or known after apply), will trigger a key to be rotated. When you add this field to the configuration, or remove it from the configuration, the rotation is not triggered. When the token is rotated, the `token` and `rotated_token_name` fields are marked as computed.
         * 
         * @return builder
         * 
         */
        public Builder keeper(@Nullable Output<String> keeper) {
            $.keeper = keeper;
            return this;
        }

        /**
         * @param keeper Arbitrary string that, if and only if, changed from a non-empty to a different non-empty value (or known after apply), will trigger a key to be rotated. When you add this field to the configuration, or remove it from the configuration, the rotation is not triggered. When the token is rotated, the `token` and `rotated_token_name` fields are marked as computed.
         * 
         * @return builder
         * 
         */
        public Builder keeper(String keeper) {
            return keeper(Output.of(keeper));
        }

        public Builder minsToBypassNetworkPolicyRequirement(@Nullable Output<Integer> minsToBypassNetworkPolicyRequirement) {
            $.minsToBypassNetworkPolicyRequirement = minsToBypassNetworkPolicyRequirement;
            return this;
        }

        public Builder minsToBypassNetworkPolicyRequirement(Integer minsToBypassNetworkPolicyRequirement) {
            return minsToBypassNetworkPolicyRequirement(Output.of(minsToBypassNetworkPolicyRequirement));
        }

        /**
         * @param name Specifies the name for the programmatic access token; must be unique for the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name for the programmatic access token; must be unique for the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param roleRestriction The name of the role used for privilege evaluation and object creation. This must be one of the roles that has already been granted to the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder roleRestriction(@Nullable Output<String> roleRestriction) {
            $.roleRestriction = roleRestriction;
            return this;
        }

        /**
         * @param roleRestriction The name of the role used for privilege evaluation and object creation. This must be one of the roles that has already been granted to the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder roleRestriction(String roleRestriction) {
            return roleRestriction(Output.of(roleRestriction));
        }

        /**
         * @param rotatedTokenName Name of the token that represents the prior secret. This field is updated only when the token is rotated. In this case, the field is marked as computed.
         * 
         * @return builder
         * 
         */
        public Builder rotatedTokenName(@Nullable Output<String> rotatedTokenName) {
            $.rotatedTokenName = rotatedTokenName;
            return this;
        }

        /**
         * @param rotatedTokenName Name of the token that represents the prior secret. This field is updated only when the token is rotated. In this case, the field is marked as computed.
         * 
         * @return builder
         * 
         */
        public Builder rotatedTokenName(String rotatedTokenName) {
            return rotatedTokenName(Output.of(rotatedTokenName));
        }

        /**
         * @param showOutputs Outputs the result of `SHOW USER PROGRAMMATIC ACCESS TOKENS` for the given user programmatic access token.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(@Nullable Output<List<UserProgrammaticAccessTokenShowOutputArgs>> showOutputs) {
            $.showOutputs = showOutputs;
            return this;
        }

        /**
         * @param showOutputs Outputs the result of `SHOW USER PROGRAMMATIC ACCESS TOKENS` for the given user programmatic access token.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(List<UserProgrammaticAccessTokenShowOutputArgs> showOutputs) {
            return showOutputs(Output.of(showOutputs));
        }

        /**
         * @param showOutputs Outputs the result of `SHOW USER PROGRAMMATIC ACCESS TOKENS` for the given user programmatic access token.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(UserProgrammaticAccessTokenShowOutputArgs... showOutputs) {
            return showOutputs(List.of(showOutputs));
        }

        /**
         * @param token The token itself. Use this to authenticate to an endpoint. The data in this field is updated only when the token is created or rotated. In this case, the field is marked as computed.
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token The token itself. Use this to authenticate to an endpoint. The data in this field is updated only when the token is created or rotated. In this case, the field is marked as computed.
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        /**
         * @param user The name of the user that the token is associated with. A user cannot use another user&#39;s programmatic access token to authenticate. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user The name of the user that the token is associated with. A user cannot use another user&#39;s programmatic access token to authenticate. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public UserProgrammaticAccessTokenState build() {
            return $;
        }
    }

}
