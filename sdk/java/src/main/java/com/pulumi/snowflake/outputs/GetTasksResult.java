// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.snowflake.outputs.GetTasksIn;
import com.pulumi.snowflake.outputs.GetTasksLimit;
import com.pulumi.snowflake.outputs.GetTasksTask;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTasksResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable GetTasksIn in;
    private @Nullable String like;
    private @Nullable GetTasksLimit limit;
    private @Nullable Boolean rootOnly;
    private @Nullable String startsWith;
    private List<GetTasksTask> tasks;
    private @Nullable Boolean withParameters;

    private GetTasksResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<GetTasksIn> in() {
        return Optional.ofNullable(this.in);
    }
    public Optional<String> like() {
        return Optional.ofNullable(this.like);
    }
    public Optional<GetTasksLimit> limit() {
        return Optional.ofNullable(this.limit);
    }
    public Optional<Boolean> rootOnly() {
        return Optional.ofNullable(this.rootOnly);
    }
    public Optional<String> startsWith() {
        return Optional.ofNullable(this.startsWith);
    }
    public List<GetTasksTask> tasks() {
        return this.tasks;
    }
    public Optional<Boolean> withParameters() {
        return Optional.ofNullable(this.withParameters);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTasksResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private @Nullable GetTasksIn in;
        private @Nullable String like;
        private @Nullable GetTasksLimit limit;
        private @Nullable Boolean rootOnly;
        private @Nullable String startsWith;
        private List<GetTasksTask> tasks;
        private @Nullable Boolean withParameters;
        public Builder() {}
        public Builder(GetTasksResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.in = defaults.in;
    	      this.like = defaults.like;
    	      this.limit = defaults.limit;
    	      this.rootOnly = defaults.rootOnly;
    	      this.startsWith = defaults.startsWith;
    	      this.tasks = defaults.tasks;
    	      this.withParameters = defaults.withParameters;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTasksResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder in(@Nullable GetTasksIn in) {

            this.in = in;
            return this;
        }
        @CustomType.Setter
        public Builder like(@Nullable String like) {

            this.like = like;
            return this;
        }
        @CustomType.Setter
        public Builder limit(@Nullable GetTasksLimit limit) {

            this.limit = limit;
            return this;
        }
        @CustomType.Setter
        public Builder rootOnly(@Nullable Boolean rootOnly) {

            this.rootOnly = rootOnly;
            return this;
        }
        @CustomType.Setter
        public Builder startsWith(@Nullable String startsWith) {

            this.startsWith = startsWith;
            return this;
        }
        @CustomType.Setter
        public Builder tasks(List<GetTasksTask> tasks) {
            if (tasks == null) {
              throw new MissingRequiredPropertyException("GetTasksResult", "tasks");
            }
            this.tasks = tasks;
            return this;
        }
        public Builder tasks(GetTasksTask... tasks) {
            return tasks(List.of(tasks));
        }
        @CustomType.Setter
        public Builder withParameters(@Nullable Boolean withParameters) {

            this.withParameters = withParameters;
            return this;
        }
        public GetTasksResult build() {
            final var _resultValue = new GetTasksResult();
            _resultValue.id = id;
            _resultValue.in = in;
            _resultValue.like = like;
            _resultValue.limit = limit;
            _resultValue.rootOnly = rootOnly;
            _resultValue.startsWith = startsWith;
            _resultValue.tasks = tasks;
            _resultValue.withParameters = withParameters;
            return _resultValue;
        }
    }
}
