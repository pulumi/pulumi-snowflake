// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAccountsAccount {
    /**
     * @return System-assigned identifier of the acccount.
     * 
     */
    private String accountLocator;
    /**
     * @return Legacy Snowflake access URL syntax that includes the region_name and account_locator.
     * 
     */
    private String accountLocatorUrl;
    /**
     * @return User-defined name that identifies an account within the organization.
     * 
     */
    private String accountName;
    /**
     * @return Preferred Snowflake access URL that includes the values of organization_name and account_name.
     * 
     */
    private String accountUrl;
    /**
     * @return Comment for the account.
     * 
     */
    private String comment;
    /**
     * @return Name of the consumption billing entity.
     * 
     */
    private String consumptionBillingEntityName;
    /**
     * @return Date and time when the account was created.
     * 
     */
    private String createdOn;
    /**
     * @return Snowflake Edition of the account.
     * 
     */
    private String edition;
    /**
     * @return Indicates whether the ORGADMIN role is enabled in an account. If TRUE, the role is enabled.
     * 
     */
    private Boolean isOrgAdmin;
    /**
     * @return Indicates how many managed accounts have been created by the account.
     * 
     */
    private Integer managedAccounts;
    /**
     * @return Name of the marketplace consumer billing entity.
     * 
     */
    private String marketplaceConsumerBillingEntityName;
    /**
     * @return Name of the marketplace provider billing entity.
     * 
     */
    private String marketplaceProviderBillingEntityName;
    /**
     * @return The previous account URL for a given account.
     * 
     */
    private String oldAccountUrl;
    /**
     * @return Name of the organization.
     * 
     */
    private String organizationName;
    /**
     * @return Region group where the account is located. Note: this column is only visible to organizations that span multiple Region Groups.
     * 
     */
    private String regionGroup;
    /**
     * @return Snowflake Region where the account is located. A Snowflake Region is a distinct location within a cloud platform region that is isolated from other Snowflake Regions. A Snowflake Region can be either multi-tenant or single-tenant (for a Virtual Private Snowflake account).
     * 
     */
    private String snowflakeRegion;

    private GetAccountsAccount() {}
    /**
     * @return System-assigned identifier of the acccount.
     * 
     */
    public String accountLocator() {
        return this.accountLocator;
    }
    /**
     * @return Legacy Snowflake access URL syntax that includes the region_name and account_locator.
     * 
     */
    public String accountLocatorUrl() {
        return this.accountLocatorUrl;
    }
    /**
     * @return User-defined name that identifies an account within the organization.
     * 
     */
    public String accountName() {
        return this.accountName;
    }
    /**
     * @return Preferred Snowflake access URL that includes the values of organization_name and account_name.
     * 
     */
    public String accountUrl() {
        return this.accountUrl;
    }
    /**
     * @return Comment for the account.
     * 
     */
    public String comment() {
        return this.comment;
    }
    /**
     * @return Name of the consumption billing entity.
     * 
     */
    public String consumptionBillingEntityName() {
        return this.consumptionBillingEntityName;
    }
    /**
     * @return Date and time when the account was created.
     * 
     */
    public String createdOn() {
        return this.createdOn;
    }
    /**
     * @return Snowflake Edition of the account.
     * 
     */
    public String edition() {
        return this.edition;
    }
    /**
     * @return Indicates whether the ORGADMIN role is enabled in an account. If TRUE, the role is enabled.
     * 
     */
    public Boolean isOrgAdmin() {
        return this.isOrgAdmin;
    }
    /**
     * @return Indicates how many managed accounts have been created by the account.
     * 
     */
    public Integer managedAccounts() {
        return this.managedAccounts;
    }
    /**
     * @return Name of the marketplace consumer billing entity.
     * 
     */
    public String marketplaceConsumerBillingEntityName() {
        return this.marketplaceConsumerBillingEntityName;
    }
    /**
     * @return Name of the marketplace provider billing entity.
     * 
     */
    public String marketplaceProviderBillingEntityName() {
        return this.marketplaceProviderBillingEntityName;
    }
    /**
     * @return The previous account URL for a given account.
     * 
     */
    public String oldAccountUrl() {
        return this.oldAccountUrl;
    }
    /**
     * @return Name of the organization.
     * 
     */
    public String organizationName() {
        return this.organizationName;
    }
    /**
     * @return Region group where the account is located. Note: this column is only visible to organizations that span multiple Region Groups.
     * 
     */
    public String regionGroup() {
        return this.regionGroup;
    }
    /**
     * @return Snowflake Region where the account is located. A Snowflake Region is a distinct location within a cloud platform region that is isolated from other Snowflake Regions. A Snowflake Region can be either multi-tenant or single-tenant (for a Virtual Private Snowflake account).
     * 
     */
    public String snowflakeRegion() {
        return this.snowflakeRegion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAccountsAccount defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountLocator;
        private String accountLocatorUrl;
        private String accountName;
        private String accountUrl;
        private String comment;
        private String consumptionBillingEntityName;
        private String createdOn;
        private String edition;
        private Boolean isOrgAdmin;
        private Integer managedAccounts;
        private String marketplaceConsumerBillingEntityName;
        private String marketplaceProviderBillingEntityName;
        private String oldAccountUrl;
        private String organizationName;
        private String regionGroup;
        private String snowflakeRegion;
        public Builder() {}
        public Builder(GetAccountsAccount defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountLocator = defaults.accountLocator;
    	      this.accountLocatorUrl = defaults.accountLocatorUrl;
    	      this.accountName = defaults.accountName;
    	      this.accountUrl = defaults.accountUrl;
    	      this.comment = defaults.comment;
    	      this.consumptionBillingEntityName = defaults.consumptionBillingEntityName;
    	      this.createdOn = defaults.createdOn;
    	      this.edition = defaults.edition;
    	      this.isOrgAdmin = defaults.isOrgAdmin;
    	      this.managedAccounts = defaults.managedAccounts;
    	      this.marketplaceConsumerBillingEntityName = defaults.marketplaceConsumerBillingEntityName;
    	      this.marketplaceProviderBillingEntityName = defaults.marketplaceProviderBillingEntityName;
    	      this.oldAccountUrl = defaults.oldAccountUrl;
    	      this.organizationName = defaults.organizationName;
    	      this.regionGroup = defaults.regionGroup;
    	      this.snowflakeRegion = defaults.snowflakeRegion;
        }

        @CustomType.Setter
        public Builder accountLocator(String accountLocator) {
            if (accountLocator == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "accountLocator");
            }
            this.accountLocator = accountLocator;
            return this;
        }
        @CustomType.Setter
        public Builder accountLocatorUrl(String accountLocatorUrl) {
            if (accountLocatorUrl == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "accountLocatorUrl");
            }
            this.accountLocatorUrl = accountLocatorUrl;
            return this;
        }
        @CustomType.Setter
        public Builder accountName(String accountName) {
            if (accountName == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "accountName");
            }
            this.accountName = accountName;
            return this;
        }
        @CustomType.Setter
        public Builder accountUrl(String accountUrl) {
            if (accountUrl == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "accountUrl");
            }
            this.accountUrl = accountUrl;
            return this;
        }
        @CustomType.Setter
        public Builder comment(String comment) {
            if (comment == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "comment");
            }
            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder consumptionBillingEntityName(String consumptionBillingEntityName) {
            if (consumptionBillingEntityName == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "consumptionBillingEntityName");
            }
            this.consumptionBillingEntityName = consumptionBillingEntityName;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder edition(String edition) {
            if (edition == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "edition");
            }
            this.edition = edition;
            return this;
        }
        @CustomType.Setter
        public Builder isOrgAdmin(Boolean isOrgAdmin) {
            if (isOrgAdmin == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "isOrgAdmin");
            }
            this.isOrgAdmin = isOrgAdmin;
            return this;
        }
        @CustomType.Setter
        public Builder managedAccounts(Integer managedAccounts) {
            if (managedAccounts == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "managedAccounts");
            }
            this.managedAccounts = managedAccounts;
            return this;
        }
        @CustomType.Setter
        public Builder marketplaceConsumerBillingEntityName(String marketplaceConsumerBillingEntityName) {
            if (marketplaceConsumerBillingEntityName == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "marketplaceConsumerBillingEntityName");
            }
            this.marketplaceConsumerBillingEntityName = marketplaceConsumerBillingEntityName;
            return this;
        }
        @CustomType.Setter
        public Builder marketplaceProviderBillingEntityName(String marketplaceProviderBillingEntityName) {
            if (marketplaceProviderBillingEntityName == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "marketplaceProviderBillingEntityName");
            }
            this.marketplaceProviderBillingEntityName = marketplaceProviderBillingEntityName;
            return this;
        }
        @CustomType.Setter
        public Builder oldAccountUrl(String oldAccountUrl) {
            if (oldAccountUrl == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "oldAccountUrl");
            }
            this.oldAccountUrl = oldAccountUrl;
            return this;
        }
        @CustomType.Setter
        public Builder organizationName(String organizationName) {
            if (organizationName == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "organizationName");
            }
            this.organizationName = organizationName;
            return this;
        }
        @CustomType.Setter
        public Builder regionGroup(String regionGroup) {
            if (regionGroup == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "regionGroup");
            }
            this.regionGroup = regionGroup;
            return this;
        }
        @CustomType.Setter
        public Builder snowflakeRegion(String snowflakeRegion) {
            if (snowflakeRegion == null) {
              throw new MissingRequiredPropertyException("GetAccountsAccount", "snowflakeRegion");
            }
            this.snowflakeRegion = snowflakeRegion;
            return this;
        }
        public GetAccountsAccount build() {
            final var _resultValue = new GetAccountsAccount();
            _resultValue.accountLocator = accountLocator;
            _resultValue.accountLocatorUrl = accountLocatorUrl;
            _resultValue.accountName = accountName;
            _resultValue.accountUrl = accountUrl;
            _resultValue.comment = comment;
            _resultValue.consumptionBillingEntityName = consumptionBillingEntityName;
            _resultValue.createdOn = createdOn;
            _resultValue.edition = edition;
            _resultValue.isOrgAdmin = isOrgAdmin;
            _resultValue.managedAccounts = managedAccounts;
            _resultValue.marketplaceConsumerBillingEntityName = marketplaceConsumerBillingEntityName;
            _resultValue.marketplaceProviderBillingEntityName = marketplaceProviderBillingEntityName;
            _resultValue.oldAccountUrl = oldAccountUrl;
            _resultValue.organizationName = organizationName;
            _resultValue.regionGroup = regionGroup;
            _resultValue.snowflakeRegion = snowflakeRegion;
            return _resultValue;
        }
    }
}
