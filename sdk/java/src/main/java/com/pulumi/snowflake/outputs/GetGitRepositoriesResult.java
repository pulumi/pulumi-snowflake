// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.snowflake.outputs.GetGitRepositoriesGitRepository;
import com.pulumi.snowflake.outputs.GetGitRepositoriesIn;
import com.pulumi.snowflake.outputs.GetGitRepositoriesLimit;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetGitRepositoriesResult {
    /**
     * @return Holds the aggregated output of all git repositories details queries.
     * 
     */
    private List<GetGitRepositoriesGitRepository> gitRepositories;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return IN clause to filter the list of objects
     * 
     */
    private @Nullable GetGitRepositoriesIn in;
    /**
     * @return Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
     * 
     */
    private @Nullable String like;
    /**
     * @return Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.
     * 
     */
    private @Nullable GetGitRepositoriesLimit limit;
    /**
     * @return (Default: `true`) Runs DESC GIT REPOSITORY for each git repository returned by SHOW GIT REPOSITORIES. The output of describe is saved to the description field. By default this value is set to true.
     * 
     */
    private @Nullable Boolean withDescribe;

    private GetGitRepositoriesResult() {}
    /**
     * @return Holds the aggregated output of all git repositories details queries.
     * 
     */
    public List<GetGitRepositoriesGitRepository> gitRepositories() {
        return this.gitRepositories;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return IN clause to filter the list of objects
     * 
     */
    public Optional<GetGitRepositoriesIn> in() {
        return Optional.ofNullable(this.in);
    }
    /**
     * @return Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
     * 
     */
    public Optional<String> like() {
        return Optional.ofNullable(this.like);
    }
    /**
     * @return Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.
     * 
     */
    public Optional<GetGitRepositoriesLimit> limit() {
        return Optional.ofNullable(this.limit);
    }
    /**
     * @return (Default: `true`) Runs DESC GIT REPOSITORY for each git repository returned by SHOW GIT REPOSITORIES. The output of describe is saved to the description field. By default this value is set to true.
     * 
     */
    public Optional<Boolean> withDescribe() {
        return Optional.ofNullable(this.withDescribe);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGitRepositoriesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetGitRepositoriesGitRepository> gitRepositories;
        private String id;
        private @Nullable GetGitRepositoriesIn in;
        private @Nullable String like;
        private @Nullable GetGitRepositoriesLimit limit;
        private @Nullable Boolean withDescribe;
        public Builder() {}
        public Builder(GetGitRepositoriesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.gitRepositories = defaults.gitRepositories;
    	      this.id = defaults.id;
    	      this.in = defaults.in;
    	      this.like = defaults.like;
    	      this.limit = defaults.limit;
    	      this.withDescribe = defaults.withDescribe;
        }

        @CustomType.Setter
        public Builder gitRepositories(List<GetGitRepositoriesGitRepository> gitRepositories) {
            if (gitRepositories == null) {
              throw new MissingRequiredPropertyException("GetGitRepositoriesResult", "gitRepositories");
            }
            this.gitRepositories = gitRepositories;
            return this;
        }
        public Builder gitRepositories(GetGitRepositoriesGitRepository... gitRepositories) {
            return gitRepositories(List.of(gitRepositories));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGitRepositoriesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder in(@Nullable GetGitRepositoriesIn in) {

            this.in = in;
            return this;
        }
        @CustomType.Setter
        public Builder like(@Nullable String like) {

            this.like = like;
            return this;
        }
        @CustomType.Setter
        public Builder limit(@Nullable GetGitRepositoriesLimit limit) {

            this.limit = limit;
            return this;
        }
        @CustomType.Setter
        public Builder withDescribe(@Nullable Boolean withDescribe) {

            this.withDescribe = withDescribe;
            return this;
        }
        public GetGitRepositoriesResult build() {
            final var _resultValue = new GetGitRepositoriesResult();
            _resultValue.gitRepositories = gitRepositories;
            _resultValue.id = id;
            _resultValue.in = in;
            _resultValue.like = like;
            _resultValue.limit = limit;
            _resultValue.withDescribe = withDescribe;
            return _resultValue;
        }
    }
}
