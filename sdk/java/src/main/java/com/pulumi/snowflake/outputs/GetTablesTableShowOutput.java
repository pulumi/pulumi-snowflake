// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetTablesTableShowOutput {
    private Boolean automaticClustering;
    private String budget;
    private Integer bytes;
    private Boolean changeTracking;
    private String clusterBy;
    private String comment;
    private String createdOn;
    private String databaseName;
    private String droppedOn;
    private Boolean enableSchemaEvolution;
    private Boolean isEvent;
    private Boolean isExternal;
    private String kind;
    private String name;
    private String owner;
    private String ownerRoleType;
    private Integer retentionTime;
    private Integer rows;
    private String schemaName;
    private Boolean searchOptimization;
    private Integer searchOptimizationBytes;
    private String searchOptimizationProgress;

    private GetTablesTableShowOutput() {}
    public Boolean automaticClustering() {
        return this.automaticClustering;
    }
    public String budget() {
        return this.budget;
    }
    public Integer bytes() {
        return this.bytes;
    }
    public Boolean changeTracking() {
        return this.changeTracking;
    }
    public String clusterBy() {
        return this.clusterBy;
    }
    public String comment() {
        return this.comment;
    }
    public String createdOn() {
        return this.createdOn;
    }
    public String databaseName() {
        return this.databaseName;
    }
    public String droppedOn() {
        return this.droppedOn;
    }
    public Boolean enableSchemaEvolution() {
        return this.enableSchemaEvolution;
    }
    public Boolean isEvent() {
        return this.isEvent;
    }
    public Boolean isExternal() {
        return this.isExternal;
    }
    public String kind() {
        return this.kind;
    }
    public String name() {
        return this.name;
    }
    public String owner() {
        return this.owner;
    }
    public String ownerRoleType() {
        return this.ownerRoleType;
    }
    public Integer retentionTime() {
        return this.retentionTime;
    }
    public Integer rows() {
        return this.rows;
    }
    public String schemaName() {
        return this.schemaName;
    }
    public Boolean searchOptimization() {
        return this.searchOptimization;
    }
    public Integer searchOptimizationBytes() {
        return this.searchOptimizationBytes;
    }
    public String searchOptimizationProgress() {
        return this.searchOptimizationProgress;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTablesTableShowOutput defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean automaticClustering;
        private String budget;
        private Integer bytes;
        private Boolean changeTracking;
        private String clusterBy;
        private String comment;
        private String createdOn;
        private String databaseName;
        private String droppedOn;
        private Boolean enableSchemaEvolution;
        private Boolean isEvent;
        private Boolean isExternal;
        private String kind;
        private String name;
        private String owner;
        private String ownerRoleType;
        private Integer retentionTime;
        private Integer rows;
        private String schemaName;
        private Boolean searchOptimization;
        private Integer searchOptimizationBytes;
        private String searchOptimizationProgress;
        public Builder() {}
        public Builder(GetTablesTableShowOutput defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.automaticClustering = defaults.automaticClustering;
    	      this.budget = defaults.budget;
    	      this.bytes = defaults.bytes;
    	      this.changeTracking = defaults.changeTracking;
    	      this.clusterBy = defaults.clusterBy;
    	      this.comment = defaults.comment;
    	      this.createdOn = defaults.createdOn;
    	      this.databaseName = defaults.databaseName;
    	      this.droppedOn = defaults.droppedOn;
    	      this.enableSchemaEvolution = defaults.enableSchemaEvolution;
    	      this.isEvent = defaults.isEvent;
    	      this.isExternal = defaults.isExternal;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.ownerRoleType = defaults.ownerRoleType;
    	      this.retentionTime = defaults.retentionTime;
    	      this.rows = defaults.rows;
    	      this.schemaName = defaults.schemaName;
    	      this.searchOptimization = defaults.searchOptimization;
    	      this.searchOptimizationBytes = defaults.searchOptimizationBytes;
    	      this.searchOptimizationProgress = defaults.searchOptimizationProgress;
        }

        @CustomType.Setter
        public Builder automaticClustering(Boolean automaticClustering) {
            if (automaticClustering == null) {
              throw new MissingRequiredPropertyException("GetTablesTableShowOutput", "automaticClustering");
            }
            this.automaticClustering = automaticClustering;
            return this;
        }
        @CustomType.Setter
        public Builder budget(String budget) {
            if (budget == null) {
              throw new MissingRequiredPropertyException("GetTablesTableShowOutput", "budget");
            }
            this.budget = budget;
            return this;
        }
        @CustomType.Setter
        public Builder bytes(Integer bytes) {
            if (bytes == null) {
              throw new MissingRequiredPropertyException("GetTablesTableShowOutput", "bytes");
            }
            this.bytes = bytes;
            return this;
        }
        @CustomType.Setter
        public Builder changeTracking(Boolean changeTracking) {
            if (changeTracking == null) {
              throw new MissingRequiredPropertyException("GetTablesTableShowOutput", "changeTracking");
            }
            this.changeTracking = changeTracking;
            return this;
        }
        @CustomType.Setter
        public Builder clusterBy(String clusterBy) {
            if (clusterBy == null) {
              throw new MissingRequiredPropertyException("GetTablesTableShowOutput", "clusterBy");
            }
            this.clusterBy = clusterBy;
            return this;
        }
        @CustomType.Setter
        public Builder comment(String comment) {
            if (comment == null) {
              throw new MissingRequiredPropertyException("GetTablesTableShowOutput", "comment");
            }
            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetTablesTableShowOutput", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder databaseName(String databaseName) {
            if (databaseName == null) {
              throw new MissingRequiredPropertyException("GetTablesTableShowOutput", "databaseName");
            }
            this.databaseName = databaseName;
            return this;
        }
        @CustomType.Setter
        public Builder droppedOn(String droppedOn) {
            if (droppedOn == null) {
              throw new MissingRequiredPropertyException("GetTablesTableShowOutput", "droppedOn");
            }
            this.droppedOn = droppedOn;
            return this;
        }
        @CustomType.Setter
        public Builder enableSchemaEvolution(Boolean enableSchemaEvolution) {
            if (enableSchemaEvolution == null) {
              throw new MissingRequiredPropertyException("GetTablesTableShowOutput", "enableSchemaEvolution");
            }
            this.enableSchemaEvolution = enableSchemaEvolution;
            return this;
        }
        @CustomType.Setter
        public Builder isEvent(Boolean isEvent) {
            if (isEvent == null) {
              throw new MissingRequiredPropertyException("GetTablesTableShowOutput", "isEvent");
            }
            this.isEvent = isEvent;
            return this;
        }
        @CustomType.Setter
        public Builder isExternal(Boolean isExternal) {
            if (isExternal == null) {
              throw new MissingRequiredPropertyException("GetTablesTableShowOutput", "isExternal");
            }
            this.isExternal = isExternal;
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            if (kind == null) {
              throw new MissingRequiredPropertyException("GetTablesTableShowOutput", "kind");
            }
            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetTablesTableShowOutput", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder owner(String owner) {
            if (owner == null) {
              throw new MissingRequiredPropertyException("GetTablesTableShowOutput", "owner");
            }
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder ownerRoleType(String ownerRoleType) {
            if (ownerRoleType == null) {
              throw new MissingRequiredPropertyException("GetTablesTableShowOutput", "ownerRoleType");
            }
            this.ownerRoleType = ownerRoleType;
            return this;
        }
        @CustomType.Setter
        public Builder retentionTime(Integer retentionTime) {
            if (retentionTime == null) {
              throw new MissingRequiredPropertyException("GetTablesTableShowOutput", "retentionTime");
            }
            this.retentionTime = retentionTime;
            return this;
        }
        @CustomType.Setter
        public Builder rows(Integer rows) {
            if (rows == null) {
              throw new MissingRequiredPropertyException("GetTablesTableShowOutput", "rows");
            }
            this.rows = rows;
            return this;
        }
        @CustomType.Setter
        public Builder schemaName(String schemaName) {
            if (schemaName == null) {
              throw new MissingRequiredPropertyException("GetTablesTableShowOutput", "schemaName");
            }
            this.schemaName = schemaName;
            return this;
        }
        @CustomType.Setter
        public Builder searchOptimization(Boolean searchOptimization) {
            if (searchOptimization == null) {
              throw new MissingRequiredPropertyException("GetTablesTableShowOutput", "searchOptimization");
            }
            this.searchOptimization = searchOptimization;
            return this;
        }
        @CustomType.Setter
        public Builder searchOptimizationBytes(Integer searchOptimizationBytes) {
            if (searchOptimizationBytes == null) {
              throw new MissingRequiredPropertyException("GetTablesTableShowOutput", "searchOptimizationBytes");
            }
            this.searchOptimizationBytes = searchOptimizationBytes;
            return this;
        }
        @CustomType.Setter
        public Builder searchOptimizationProgress(String searchOptimizationProgress) {
            if (searchOptimizationProgress == null) {
              throw new MissingRequiredPropertyException("GetTablesTableShowOutput", "searchOptimizationProgress");
            }
            this.searchOptimizationProgress = searchOptimizationProgress;
            return this;
        }
        public GetTablesTableShowOutput build() {
            final var _resultValue = new GetTablesTableShowOutput();
            _resultValue.automaticClustering = automaticClustering;
            _resultValue.budget = budget;
            _resultValue.bytes = bytes;
            _resultValue.changeTracking = changeTracking;
            _resultValue.clusterBy = clusterBy;
            _resultValue.comment = comment;
            _resultValue.createdOn = createdOn;
            _resultValue.databaseName = databaseName;
            _resultValue.droppedOn = droppedOn;
            _resultValue.enableSchemaEvolution = enableSchemaEvolution;
            _resultValue.isEvent = isEvent;
            _resultValue.isExternal = isExternal;
            _resultValue.kind = kind;
            _resultValue.name = name;
            _resultValue.owner = owner;
            _resultValue.ownerRoleType = ownerRoleType;
            _resultValue.retentionTime = retentionTime;
            _resultValue.rows = rows;
            _resultValue.schemaName = schemaName;
            _resultValue.searchOptimization = searchOptimization;
            _resultValue.searchOptimizationBytes = searchOptimizationBytes;
            _resultValue.searchOptimizationProgress = searchOptimizationProgress;
            return _resultValue;
        }
    }
}
