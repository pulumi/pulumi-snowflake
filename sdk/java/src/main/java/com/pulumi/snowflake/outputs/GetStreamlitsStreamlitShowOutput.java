// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetStreamlitsStreamlitShowOutput {
    private String comment;
    private String createdOn;
    private String databaseName;
    private String name;
    private String owner;
    private String ownerRoleType;
    private String queryWarehouse;
    private String schemaName;
    private String title;
    private String urlId;

    private GetStreamlitsStreamlitShowOutput() {}
    public String comment() {
        return this.comment;
    }
    public String createdOn() {
        return this.createdOn;
    }
    public String databaseName() {
        return this.databaseName;
    }
    public String name() {
        return this.name;
    }
    public String owner() {
        return this.owner;
    }
    public String ownerRoleType() {
        return this.ownerRoleType;
    }
    public String queryWarehouse() {
        return this.queryWarehouse;
    }
    public String schemaName() {
        return this.schemaName;
    }
    public String title() {
        return this.title;
    }
    public String urlId() {
        return this.urlId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStreamlitsStreamlitShowOutput defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String comment;
        private String createdOn;
        private String databaseName;
        private String name;
        private String owner;
        private String ownerRoleType;
        private String queryWarehouse;
        private String schemaName;
        private String title;
        private String urlId;
        public Builder() {}
        public Builder(GetStreamlitsStreamlitShowOutput defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comment = defaults.comment;
    	      this.createdOn = defaults.createdOn;
    	      this.databaseName = defaults.databaseName;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.ownerRoleType = defaults.ownerRoleType;
    	      this.queryWarehouse = defaults.queryWarehouse;
    	      this.schemaName = defaults.schemaName;
    	      this.title = defaults.title;
    	      this.urlId = defaults.urlId;
        }

        @CustomType.Setter
        public Builder comment(String comment) {
            if (comment == null) {
              throw new MissingRequiredPropertyException("GetStreamlitsStreamlitShowOutput", "comment");
            }
            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetStreamlitsStreamlitShowOutput", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder databaseName(String databaseName) {
            if (databaseName == null) {
              throw new MissingRequiredPropertyException("GetStreamlitsStreamlitShowOutput", "databaseName");
            }
            this.databaseName = databaseName;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetStreamlitsStreamlitShowOutput", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder owner(String owner) {
            if (owner == null) {
              throw new MissingRequiredPropertyException("GetStreamlitsStreamlitShowOutput", "owner");
            }
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder ownerRoleType(String ownerRoleType) {
            if (ownerRoleType == null) {
              throw new MissingRequiredPropertyException("GetStreamlitsStreamlitShowOutput", "ownerRoleType");
            }
            this.ownerRoleType = ownerRoleType;
            return this;
        }
        @CustomType.Setter
        public Builder queryWarehouse(String queryWarehouse) {
            if (queryWarehouse == null) {
              throw new MissingRequiredPropertyException("GetStreamlitsStreamlitShowOutput", "queryWarehouse");
            }
            this.queryWarehouse = queryWarehouse;
            return this;
        }
        @CustomType.Setter
        public Builder schemaName(String schemaName) {
            if (schemaName == null) {
              throw new MissingRequiredPropertyException("GetStreamlitsStreamlitShowOutput", "schemaName");
            }
            this.schemaName = schemaName;
            return this;
        }
        @CustomType.Setter
        public Builder title(String title) {
            if (title == null) {
              throw new MissingRequiredPropertyException("GetStreamlitsStreamlitShowOutput", "title");
            }
            this.title = title;
            return this;
        }
        @CustomType.Setter
        public Builder urlId(String urlId) {
            if (urlId == null) {
              throw new MissingRequiredPropertyException("GetStreamlitsStreamlitShowOutput", "urlId");
            }
            this.urlId = urlId;
            return this;
        }
        public GetStreamlitsStreamlitShowOutput build() {
            final var _resultValue = new GetStreamlitsStreamlitShowOutput();
            _resultValue.comment = comment;
            _resultValue.createdOn = createdOn;
            _resultValue.databaseName = databaseName;
            _resultValue.name = name;
            _resultValue.owner = owner;
            _resultValue.ownerRoleType = ownerRoleType;
            _resultValue.queryWarehouse = queryWarehouse;
            _resultValue.schemaName = schemaName;
            _resultValue.title = title;
            _resultValue.urlId = urlId;
            return _resultValue;
        }
    }
}
