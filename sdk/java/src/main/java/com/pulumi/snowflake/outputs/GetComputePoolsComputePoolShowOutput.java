// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetComputePoolsComputePoolShowOutput {
    private Integer activeNodes;
    private String application;
    private Boolean autoResume;
    private Integer autoSuspendSecs;
    private String comment;
    private String createdOn;
    private Integer idleNodes;
    private String instanceFamily;
    private Boolean isExclusive;
    private Integer maxNodes;
    private Integer minNodes;
    private String name;
    private Integer numJobs;
    private Integer numServices;
    private String owner;
    private String resumedOn;
    private String state;
    private Integer targetNodes;
    private String updatedOn;

    private GetComputePoolsComputePoolShowOutput() {}
    public Integer activeNodes() {
        return this.activeNodes;
    }
    public String application() {
        return this.application;
    }
    public Boolean autoResume() {
        return this.autoResume;
    }
    public Integer autoSuspendSecs() {
        return this.autoSuspendSecs;
    }
    public String comment() {
        return this.comment;
    }
    public String createdOn() {
        return this.createdOn;
    }
    public Integer idleNodes() {
        return this.idleNodes;
    }
    public String instanceFamily() {
        return this.instanceFamily;
    }
    public Boolean isExclusive() {
        return this.isExclusive;
    }
    public Integer maxNodes() {
        return this.maxNodes;
    }
    public Integer minNodes() {
        return this.minNodes;
    }
    public String name() {
        return this.name;
    }
    public Integer numJobs() {
        return this.numJobs;
    }
    public Integer numServices() {
        return this.numServices;
    }
    public String owner() {
        return this.owner;
    }
    public String resumedOn() {
        return this.resumedOn;
    }
    public String state() {
        return this.state;
    }
    public Integer targetNodes() {
        return this.targetNodes;
    }
    public String updatedOn() {
        return this.updatedOn;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetComputePoolsComputePoolShowOutput defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer activeNodes;
        private String application;
        private Boolean autoResume;
        private Integer autoSuspendSecs;
        private String comment;
        private String createdOn;
        private Integer idleNodes;
        private String instanceFamily;
        private Boolean isExclusive;
        private Integer maxNodes;
        private Integer minNodes;
        private String name;
        private Integer numJobs;
        private Integer numServices;
        private String owner;
        private String resumedOn;
        private String state;
        private Integer targetNodes;
        private String updatedOn;
        public Builder() {}
        public Builder(GetComputePoolsComputePoolShowOutput defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeNodes = defaults.activeNodes;
    	      this.application = defaults.application;
    	      this.autoResume = defaults.autoResume;
    	      this.autoSuspendSecs = defaults.autoSuspendSecs;
    	      this.comment = defaults.comment;
    	      this.createdOn = defaults.createdOn;
    	      this.idleNodes = defaults.idleNodes;
    	      this.instanceFamily = defaults.instanceFamily;
    	      this.isExclusive = defaults.isExclusive;
    	      this.maxNodes = defaults.maxNodes;
    	      this.minNodes = defaults.minNodes;
    	      this.name = defaults.name;
    	      this.numJobs = defaults.numJobs;
    	      this.numServices = defaults.numServices;
    	      this.owner = defaults.owner;
    	      this.resumedOn = defaults.resumedOn;
    	      this.state = defaults.state;
    	      this.targetNodes = defaults.targetNodes;
    	      this.updatedOn = defaults.updatedOn;
        }

        @CustomType.Setter
        public Builder activeNodes(Integer activeNodes) {
            if (activeNodes == null) {
              throw new MissingRequiredPropertyException("GetComputePoolsComputePoolShowOutput", "activeNodes");
            }
            this.activeNodes = activeNodes;
            return this;
        }
        @CustomType.Setter
        public Builder application(String application) {
            if (application == null) {
              throw new MissingRequiredPropertyException("GetComputePoolsComputePoolShowOutput", "application");
            }
            this.application = application;
            return this;
        }
        @CustomType.Setter
        public Builder autoResume(Boolean autoResume) {
            if (autoResume == null) {
              throw new MissingRequiredPropertyException("GetComputePoolsComputePoolShowOutput", "autoResume");
            }
            this.autoResume = autoResume;
            return this;
        }
        @CustomType.Setter
        public Builder autoSuspendSecs(Integer autoSuspendSecs) {
            if (autoSuspendSecs == null) {
              throw new MissingRequiredPropertyException("GetComputePoolsComputePoolShowOutput", "autoSuspendSecs");
            }
            this.autoSuspendSecs = autoSuspendSecs;
            return this;
        }
        @CustomType.Setter
        public Builder comment(String comment) {
            if (comment == null) {
              throw new MissingRequiredPropertyException("GetComputePoolsComputePoolShowOutput", "comment");
            }
            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetComputePoolsComputePoolShowOutput", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder idleNodes(Integer idleNodes) {
            if (idleNodes == null) {
              throw new MissingRequiredPropertyException("GetComputePoolsComputePoolShowOutput", "idleNodes");
            }
            this.idleNodes = idleNodes;
            return this;
        }
        @CustomType.Setter
        public Builder instanceFamily(String instanceFamily) {
            if (instanceFamily == null) {
              throw new MissingRequiredPropertyException("GetComputePoolsComputePoolShowOutput", "instanceFamily");
            }
            this.instanceFamily = instanceFamily;
            return this;
        }
        @CustomType.Setter
        public Builder isExclusive(Boolean isExclusive) {
            if (isExclusive == null) {
              throw new MissingRequiredPropertyException("GetComputePoolsComputePoolShowOutput", "isExclusive");
            }
            this.isExclusive = isExclusive;
            return this;
        }
        @CustomType.Setter
        public Builder maxNodes(Integer maxNodes) {
            if (maxNodes == null) {
              throw new MissingRequiredPropertyException("GetComputePoolsComputePoolShowOutput", "maxNodes");
            }
            this.maxNodes = maxNodes;
            return this;
        }
        @CustomType.Setter
        public Builder minNodes(Integer minNodes) {
            if (minNodes == null) {
              throw new MissingRequiredPropertyException("GetComputePoolsComputePoolShowOutput", "minNodes");
            }
            this.minNodes = minNodes;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetComputePoolsComputePoolShowOutput", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder numJobs(Integer numJobs) {
            if (numJobs == null) {
              throw new MissingRequiredPropertyException("GetComputePoolsComputePoolShowOutput", "numJobs");
            }
            this.numJobs = numJobs;
            return this;
        }
        @CustomType.Setter
        public Builder numServices(Integer numServices) {
            if (numServices == null) {
              throw new MissingRequiredPropertyException("GetComputePoolsComputePoolShowOutput", "numServices");
            }
            this.numServices = numServices;
            return this;
        }
        @CustomType.Setter
        public Builder owner(String owner) {
            if (owner == null) {
              throw new MissingRequiredPropertyException("GetComputePoolsComputePoolShowOutput", "owner");
            }
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder resumedOn(String resumedOn) {
            if (resumedOn == null) {
              throw new MissingRequiredPropertyException("GetComputePoolsComputePoolShowOutput", "resumedOn");
            }
            this.resumedOn = resumedOn;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetComputePoolsComputePoolShowOutput", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder targetNodes(Integer targetNodes) {
            if (targetNodes == null) {
              throw new MissingRequiredPropertyException("GetComputePoolsComputePoolShowOutput", "targetNodes");
            }
            this.targetNodes = targetNodes;
            return this;
        }
        @CustomType.Setter
        public Builder updatedOn(String updatedOn) {
            if (updatedOn == null) {
              throw new MissingRequiredPropertyException("GetComputePoolsComputePoolShowOutput", "updatedOn");
            }
            this.updatedOn = updatedOn;
            return this;
        }
        public GetComputePoolsComputePoolShowOutput build() {
            final var _resultValue = new GetComputePoolsComputePoolShowOutput();
            _resultValue.activeNodes = activeNodes;
            _resultValue.application = application;
            _resultValue.autoResume = autoResume;
            _resultValue.autoSuspendSecs = autoSuspendSecs;
            _resultValue.comment = comment;
            _resultValue.createdOn = createdOn;
            _resultValue.idleNodes = idleNodes;
            _resultValue.instanceFamily = instanceFamily;
            _resultValue.isExclusive = isExclusive;
            _resultValue.maxNodes = maxNodes;
            _resultValue.minNodes = minNodes;
            _resultValue.name = name;
            _resultValue.numJobs = numJobs;
            _resultValue.numServices = numServices;
            _resultValue.owner = owner;
            _resultValue.resumedOn = resumedOn;
            _resultValue.state = state;
            _resultValue.targetNodes = targetNodes;
            _resultValue.updatedOn = updatedOn;
            return _resultValue;
        }
    }
}
