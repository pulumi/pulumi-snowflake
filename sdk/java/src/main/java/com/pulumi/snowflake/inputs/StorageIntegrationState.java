// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.snowflake.inputs.StorageIntegrationDescribeOutputArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StorageIntegrationState extends com.pulumi.resources.ResourceArgs {

    public static final StorageIntegrationState Empty = new StorageIntegrationState();

    /**
     * The consent URL that is used to create an Azure Snowflake service principle inside your tenant.
     * 
     */
    @Import(name="azureConsentUrl")
    private @Nullable Output<String> azureConsentUrl;

    /**
     * @return The consent URL that is used to create an Azure Snowflake service principle inside your tenant.
     * 
     */
    public Optional<Output<String>> azureConsentUrl() {
        return Optional.ofNullable(this.azureConsentUrl);
    }

    /**
     * This is the name of the Snowflake client application created for your account.
     * 
     */
    @Import(name="azureMultiTenantAppName")
    private @Nullable Output<String> azureMultiTenantAppName;

    /**
     * @return This is the name of the Snowflake client application created for your account.
     * 
     */
    public Optional<Output<String>> azureMultiTenantAppName() {
        return Optional.ofNullable(this.azureMultiTenantAppName);
    }

    /**
     * (Default: ``)
     * 
     */
    @Import(name="azureTenantId")
    private @Nullable Output<String> azureTenantId;

    /**
     * @return (Default: ``)
     * 
     */
    public Optional<Output<String>> azureTenantId() {
        return Optional.ofNullable(this.azureTenantId);
    }

    /**
     * (Default: ``)
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return (Default: ``)
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * Date and time when the storage integration was created.
     * 
     */
    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    /**
     * @return Date and time when the storage integration was created.
     * 
     */
    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    /**
     * Outputs the result of `DESCRIBE STORAGE INTEGRATION` for the given storage integration.
     * 
     */
    @Import(name="describeOutputs")
    private @Nullable Output<List<StorageIntegrationDescribeOutputArgs>> describeOutputs;

    /**
     * @return Outputs the result of `DESCRIBE STORAGE INTEGRATION` for the given storage integration.
     * 
     */
    public Optional<Output<List<StorageIntegrationDescribeOutputArgs>>> describeOutputs() {
        return Optional.ofNullable(this.describeOutputs);
    }

    /**
     * (Default: `true`)
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return (Default: `true`)
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    @Import(name="fullyQualifiedName")
    private @Nullable Output<String> fullyQualifiedName;

    /**
     * @return Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    public Optional<Output<String>> fullyQualifiedName() {
        return Optional.ofNullable(this.fullyQualifiedName);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Explicitly limits external stages that use the integration to reference one or more storage locations.
     * 
     */
    @Import(name="storageAllowedLocations")
    private @Nullable Output<List<String>> storageAllowedLocations;

    /**
     * @return Explicitly limits external stages that use the integration to reference one or more storage locations.
     * 
     */
    public Optional<Output<List<String>>> storageAllowedLocations() {
        return Optional.ofNullable(this.storageAllowedLocations);
    }

    /**
     * The external ID that Snowflake will use when assuming the AWS role.
     * 
     */
    @Import(name="storageAwsExternalId")
    private @Nullable Output<String> storageAwsExternalId;

    /**
     * @return The external ID that Snowflake will use when assuming the AWS role.
     * 
     */
    public Optional<Output<String>> storageAwsExternalId() {
        return Optional.ofNullable(this.storageAwsExternalId);
    }

    /**
     * The Snowflake user that will attempt to assume the AWS role.
     * 
     */
    @Import(name="storageAwsIamUserArn")
    private @Nullable Output<String> storageAwsIamUserArn;

    /**
     * @return The Snowflake user that will attempt to assume the AWS role.
     * 
     */
    public Optional<Output<String>> storageAwsIamUserArn() {
        return Optional.ofNullable(this.storageAwsIamUserArn);
    }

    /**
     * &#34;bucket-owner-full-control&#34; Enables support for AWS access control lists (ACLs) to grant the bucket owner full control.
     * 
     */
    @Import(name="storageAwsObjectAcl")
    private @Nullable Output<String> storageAwsObjectAcl;

    /**
     * @return &#34;bucket-owner-full-control&#34; Enables support for AWS access control lists (ACLs) to grant the bucket owner full control.
     * 
     */
    public Optional<Output<String>> storageAwsObjectAcl() {
        return Optional.ofNullable(this.storageAwsObjectAcl);
    }

    /**
     * (Default: ``)
     * 
     */
    @Import(name="storageAwsRoleArn")
    private @Nullable Output<String> storageAwsRoleArn;

    /**
     * @return (Default: ``)
     * 
     */
    public Optional<Output<String>> storageAwsRoleArn() {
        return Optional.ofNullable(this.storageAwsRoleArn);
    }

    /**
     * Explicitly prohibits external stages that use the integration from referencing one or more storage locations.
     * 
     */
    @Import(name="storageBlockedLocations")
    private @Nullable Output<List<String>> storageBlockedLocations;

    /**
     * @return Explicitly prohibits external stages that use the integration from referencing one or more storage locations.
     * 
     */
    public Optional<Output<List<String>>> storageBlockedLocations() {
        return Optional.ofNullable(this.storageBlockedLocations);
    }

    /**
     * This is the name of the Snowflake Google Service Account created for your account.
     * 
     */
    @Import(name="storageGcpServiceAccount")
    private @Nullable Output<String> storageGcpServiceAccount;

    /**
     * @return This is the name of the Snowflake Google Service Account created for your account.
     * 
     */
    public Optional<Output<String>> storageGcpServiceAccount() {
        return Optional.ofNullable(this.storageGcpServiceAccount);
    }

    /**
     * Specifies the storage provider for the integration. Valid options are: `S3` | `S3GOV` | `S3CHINA` | `GCS` | `AZURE`
     * 
     */
    @Import(name="storageProvider")
    private @Nullable Output<String> storageProvider;

    /**
     * @return Specifies the storage provider for the integration. Valid options are: `S3` | `S3GOV` | `S3CHINA` | `GCS` | `AZURE`
     * 
     */
    public Optional<Output<String>> storageProvider() {
        return Optional.ofNullable(this.storageProvider);
    }

    /**
     * (Default: `EXTERNAL_STAGE`)
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return (Default: `EXTERNAL_STAGE`)
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private StorageIntegrationState() {}

    private StorageIntegrationState(StorageIntegrationState $) {
        this.azureConsentUrl = $.azureConsentUrl;
        this.azureMultiTenantAppName = $.azureMultiTenantAppName;
        this.azureTenantId = $.azureTenantId;
        this.comment = $.comment;
        this.createdOn = $.createdOn;
        this.describeOutputs = $.describeOutputs;
        this.enabled = $.enabled;
        this.fullyQualifiedName = $.fullyQualifiedName;
        this.name = $.name;
        this.storageAllowedLocations = $.storageAllowedLocations;
        this.storageAwsExternalId = $.storageAwsExternalId;
        this.storageAwsIamUserArn = $.storageAwsIamUserArn;
        this.storageAwsObjectAcl = $.storageAwsObjectAcl;
        this.storageAwsRoleArn = $.storageAwsRoleArn;
        this.storageBlockedLocations = $.storageBlockedLocations;
        this.storageGcpServiceAccount = $.storageGcpServiceAccount;
        this.storageProvider = $.storageProvider;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StorageIntegrationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StorageIntegrationState $;

        public Builder() {
            $ = new StorageIntegrationState();
        }

        public Builder(StorageIntegrationState defaults) {
            $ = new StorageIntegrationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param azureConsentUrl The consent URL that is used to create an Azure Snowflake service principle inside your tenant.
         * 
         * @return builder
         * 
         */
        public Builder azureConsentUrl(@Nullable Output<String> azureConsentUrl) {
            $.azureConsentUrl = azureConsentUrl;
            return this;
        }

        /**
         * @param azureConsentUrl The consent URL that is used to create an Azure Snowflake service principle inside your tenant.
         * 
         * @return builder
         * 
         */
        public Builder azureConsentUrl(String azureConsentUrl) {
            return azureConsentUrl(Output.of(azureConsentUrl));
        }

        /**
         * @param azureMultiTenantAppName This is the name of the Snowflake client application created for your account.
         * 
         * @return builder
         * 
         */
        public Builder azureMultiTenantAppName(@Nullable Output<String> azureMultiTenantAppName) {
            $.azureMultiTenantAppName = azureMultiTenantAppName;
            return this;
        }

        /**
         * @param azureMultiTenantAppName This is the name of the Snowflake client application created for your account.
         * 
         * @return builder
         * 
         */
        public Builder azureMultiTenantAppName(String azureMultiTenantAppName) {
            return azureMultiTenantAppName(Output.of(azureMultiTenantAppName));
        }

        /**
         * @param azureTenantId (Default: ``)
         * 
         * @return builder
         * 
         */
        public Builder azureTenantId(@Nullable Output<String> azureTenantId) {
            $.azureTenantId = azureTenantId;
            return this;
        }

        /**
         * @param azureTenantId (Default: ``)
         * 
         * @return builder
         * 
         */
        public Builder azureTenantId(String azureTenantId) {
            return azureTenantId(Output.of(azureTenantId));
        }

        /**
         * @param comment (Default: ``)
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment (Default: ``)
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param createdOn Date and time when the storage integration was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        /**
         * @param createdOn Date and time when the storage integration was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        /**
         * @param describeOutputs Outputs the result of `DESCRIBE STORAGE INTEGRATION` for the given storage integration.
         * 
         * @return builder
         * 
         */
        public Builder describeOutputs(@Nullable Output<List<StorageIntegrationDescribeOutputArgs>> describeOutputs) {
            $.describeOutputs = describeOutputs;
            return this;
        }

        /**
         * @param describeOutputs Outputs the result of `DESCRIBE STORAGE INTEGRATION` for the given storage integration.
         * 
         * @return builder
         * 
         */
        public Builder describeOutputs(List<StorageIntegrationDescribeOutputArgs> describeOutputs) {
            return describeOutputs(Output.of(describeOutputs));
        }

        /**
         * @param describeOutputs Outputs the result of `DESCRIBE STORAGE INTEGRATION` for the given storage integration.
         * 
         * @return builder
         * 
         */
        public Builder describeOutputs(StorageIntegrationDescribeOutputArgs... describeOutputs) {
            return describeOutputs(List.of(describeOutputs));
        }

        /**
         * @param enabled (Default: `true`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled (Default: `true`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param fullyQualifiedName Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
         * 
         * @return builder
         * 
         */
        public Builder fullyQualifiedName(@Nullable Output<String> fullyQualifiedName) {
            $.fullyQualifiedName = fullyQualifiedName;
            return this;
        }

        /**
         * @param fullyQualifiedName Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
         * 
         * @return builder
         * 
         */
        public Builder fullyQualifiedName(String fullyQualifiedName) {
            return fullyQualifiedName(Output.of(fullyQualifiedName));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param storageAllowedLocations Explicitly limits external stages that use the integration to reference one or more storage locations.
         * 
         * @return builder
         * 
         */
        public Builder storageAllowedLocations(@Nullable Output<List<String>> storageAllowedLocations) {
            $.storageAllowedLocations = storageAllowedLocations;
            return this;
        }

        /**
         * @param storageAllowedLocations Explicitly limits external stages that use the integration to reference one or more storage locations.
         * 
         * @return builder
         * 
         */
        public Builder storageAllowedLocations(List<String> storageAllowedLocations) {
            return storageAllowedLocations(Output.of(storageAllowedLocations));
        }

        /**
         * @param storageAllowedLocations Explicitly limits external stages that use the integration to reference one or more storage locations.
         * 
         * @return builder
         * 
         */
        public Builder storageAllowedLocations(String... storageAllowedLocations) {
            return storageAllowedLocations(List.of(storageAllowedLocations));
        }

        /**
         * @param storageAwsExternalId The external ID that Snowflake will use when assuming the AWS role.
         * 
         * @return builder
         * 
         */
        public Builder storageAwsExternalId(@Nullable Output<String> storageAwsExternalId) {
            $.storageAwsExternalId = storageAwsExternalId;
            return this;
        }

        /**
         * @param storageAwsExternalId The external ID that Snowflake will use when assuming the AWS role.
         * 
         * @return builder
         * 
         */
        public Builder storageAwsExternalId(String storageAwsExternalId) {
            return storageAwsExternalId(Output.of(storageAwsExternalId));
        }

        /**
         * @param storageAwsIamUserArn The Snowflake user that will attempt to assume the AWS role.
         * 
         * @return builder
         * 
         */
        public Builder storageAwsIamUserArn(@Nullable Output<String> storageAwsIamUserArn) {
            $.storageAwsIamUserArn = storageAwsIamUserArn;
            return this;
        }

        /**
         * @param storageAwsIamUserArn The Snowflake user that will attempt to assume the AWS role.
         * 
         * @return builder
         * 
         */
        public Builder storageAwsIamUserArn(String storageAwsIamUserArn) {
            return storageAwsIamUserArn(Output.of(storageAwsIamUserArn));
        }

        /**
         * @param storageAwsObjectAcl &#34;bucket-owner-full-control&#34; Enables support for AWS access control lists (ACLs) to grant the bucket owner full control.
         * 
         * @return builder
         * 
         */
        public Builder storageAwsObjectAcl(@Nullable Output<String> storageAwsObjectAcl) {
            $.storageAwsObjectAcl = storageAwsObjectAcl;
            return this;
        }

        /**
         * @param storageAwsObjectAcl &#34;bucket-owner-full-control&#34; Enables support for AWS access control lists (ACLs) to grant the bucket owner full control.
         * 
         * @return builder
         * 
         */
        public Builder storageAwsObjectAcl(String storageAwsObjectAcl) {
            return storageAwsObjectAcl(Output.of(storageAwsObjectAcl));
        }

        /**
         * @param storageAwsRoleArn (Default: ``)
         * 
         * @return builder
         * 
         */
        public Builder storageAwsRoleArn(@Nullable Output<String> storageAwsRoleArn) {
            $.storageAwsRoleArn = storageAwsRoleArn;
            return this;
        }

        /**
         * @param storageAwsRoleArn (Default: ``)
         * 
         * @return builder
         * 
         */
        public Builder storageAwsRoleArn(String storageAwsRoleArn) {
            return storageAwsRoleArn(Output.of(storageAwsRoleArn));
        }

        /**
         * @param storageBlockedLocations Explicitly prohibits external stages that use the integration from referencing one or more storage locations.
         * 
         * @return builder
         * 
         */
        public Builder storageBlockedLocations(@Nullable Output<List<String>> storageBlockedLocations) {
            $.storageBlockedLocations = storageBlockedLocations;
            return this;
        }

        /**
         * @param storageBlockedLocations Explicitly prohibits external stages that use the integration from referencing one or more storage locations.
         * 
         * @return builder
         * 
         */
        public Builder storageBlockedLocations(List<String> storageBlockedLocations) {
            return storageBlockedLocations(Output.of(storageBlockedLocations));
        }

        /**
         * @param storageBlockedLocations Explicitly prohibits external stages that use the integration from referencing one or more storage locations.
         * 
         * @return builder
         * 
         */
        public Builder storageBlockedLocations(String... storageBlockedLocations) {
            return storageBlockedLocations(List.of(storageBlockedLocations));
        }

        /**
         * @param storageGcpServiceAccount This is the name of the Snowflake Google Service Account created for your account.
         * 
         * @return builder
         * 
         */
        public Builder storageGcpServiceAccount(@Nullable Output<String> storageGcpServiceAccount) {
            $.storageGcpServiceAccount = storageGcpServiceAccount;
            return this;
        }

        /**
         * @param storageGcpServiceAccount This is the name of the Snowflake Google Service Account created for your account.
         * 
         * @return builder
         * 
         */
        public Builder storageGcpServiceAccount(String storageGcpServiceAccount) {
            return storageGcpServiceAccount(Output.of(storageGcpServiceAccount));
        }

        /**
         * @param storageProvider Specifies the storage provider for the integration. Valid options are: `S3` | `S3GOV` | `S3CHINA` | `GCS` | `AZURE`
         * 
         * @return builder
         * 
         */
        public Builder storageProvider(@Nullable Output<String> storageProvider) {
            $.storageProvider = storageProvider;
            return this;
        }

        /**
         * @param storageProvider Specifies the storage provider for the integration. Valid options are: `S3` | `S3GOV` | `S3CHINA` | `GCS` | `AZURE`
         * 
         * @return builder
         * 
         */
        public Builder storageProvider(String storageProvider) {
            return storageProvider(Output.of(storageProvider));
        }

        /**
         * @param type (Default: `EXTERNAL_STAGE`)
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Default: `EXTERNAL_STAGE`)
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public StorageIntegrationState build() {
            return $;
        }
    }

}
