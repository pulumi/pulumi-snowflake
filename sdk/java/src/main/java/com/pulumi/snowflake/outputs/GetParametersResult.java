// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.snowflake.outputs.GetParametersParameter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetParametersResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return If parameter*type is set to &#34;OBJECT&#34; then object*name is the name of the object to display object parameters for.
     * 
     */
    private @Nullable String objectName;
    /**
     * @return If parameter*type is set to &#34;OBJECT&#34; then object*type is the type of object to display object parameters for. Valid values are any object supported by the IN clause of the [SHOW PARAMETERS](https://docs.snowflake.com/en/sql-reference/sql/show-parameters.html#parameters) statement, including: WAREHOUSE | DATABASE | SCHEMA | TASK | TABLE
     * 
     */
    private @Nullable String objectType;
    /**
     * @return (Default: `ACCOUNT`) The type of parameter to filter by. Valid values are: &#34;ACCOUNT&#34;, &#34;SESSION&#34;, &#34;OBJECT&#34;.
     * 
     */
    private @Nullable String parameterType;
    /**
     * @return The pipes in the schema
     * 
     */
    private List<GetParametersParameter> parameters;
    /**
     * @return Allows limiting the list of parameters by name using LIKE clause. Refer to [Limiting the List of Parameters by Name](https://docs.snowflake.com/en/sql-reference/parameters.html#limiting-the-list-of-parameters-by-name)
     * 
     */
    private @Nullable String pattern;
    /**
     * @return If parameter_type is set to &#34;SESSION&#34; then user is the name of the user to display session parameters for.
     * 
     */
    private @Nullable String user;

    private GetParametersResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return If parameter*type is set to &#34;OBJECT&#34; then object*name is the name of the object to display object parameters for.
     * 
     */
    public Optional<String> objectName() {
        return Optional.ofNullable(this.objectName);
    }
    /**
     * @return If parameter*type is set to &#34;OBJECT&#34; then object*type is the type of object to display object parameters for. Valid values are any object supported by the IN clause of the [SHOW PARAMETERS](https://docs.snowflake.com/en/sql-reference/sql/show-parameters.html#parameters) statement, including: WAREHOUSE | DATABASE | SCHEMA | TASK | TABLE
     * 
     */
    public Optional<String> objectType() {
        return Optional.ofNullable(this.objectType);
    }
    /**
     * @return (Default: `ACCOUNT`) The type of parameter to filter by. Valid values are: &#34;ACCOUNT&#34;, &#34;SESSION&#34;, &#34;OBJECT&#34;.
     * 
     */
    public Optional<String> parameterType() {
        return Optional.ofNullable(this.parameterType);
    }
    /**
     * @return The pipes in the schema
     * 
     */
    public List<GetParametersParameter> parameters() {
        return this.parameters;
    }
    /**
     * @return Allows limiting the list of parameters by name using LIKE clause. Refer to [Limiting the List of Parameters by Name](https://docs.snowflake.com/en/sql-reference/parameters.html#limiting-the-list-of-parameters-by-name)
     * 
     */
    public Optional<String> pattern() {
        return Optional.ofNullable(this.pattern);
    }
    /**
     * @return If parameter_type is set to &#34;SESSION&#34; then user is the name of the user to display session parameters for.
     * 
     */
    public Optional<String> user() {
        return Optional.ofNullable(this.user);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetParametersResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private @Nullable String objectName;
        private @Nullable String objectType;
        private @Nullable String parameterType;
        private List<GetParametersParameter> parameters;
        private @Nullable String pattern;
        private @Nullable String user;
        public Builder() {}
        public Builder(GetParametersResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.objectName = defaults.objectName;
    	      this.objectType = defaults.objectType;
    	      this.parameterType = defaults.parameterType;
    	      this.parameters = defaults.parameters;
    	      this.pattern = defaults.pattern;
    	      this.user = defaults.user;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetParametersResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder objectName(@Nullable String objectName) {

            this.objectName = objectName;
            return this;
        }
        @CustomType.Setter
        public Builder objectType(@Nullable String objectType) {

            this.objectType = objectType;
            return this;
        }
        @CustomType.Setter
        public Builder parameterType(@Nullable String parameterType) {

            this.parameterType = parameterType;
            return this;
        }
        @CustomType.Setter
        public Builder parameters(List<GetParametersParameter> parameters) {
            if (parameters == null) {
              throw new MissingRequiredPropertyException("GetParametersResult", "parameters");
            }
            this.parameters = parameters;
            return this;
        }
        public Builder parameters(GetParametersParameter... parameters) {
            return parameters(List.of(parameters));
        }
        @CustomType.Setter
        public Builder pattern(@Nullable String pattern) {

            this.pattern = pattern;
            return this;
        }
        @CustomType.Setter
        public Builder user(@Nullable String user) {

            this.user = user;
            return this;
        }
        public GetParametersResult build() {
            final var _resultValue = new GetParametersResult();
            _resultValue.id = id;
            _resultValue.objectName = objectName;
            _resultValue.objectType = objectType;
            _resultValue.parameterType = parameterType;
            _resultValue.parameters = parameters;
            _resultValue.pattern = pattern;
            _resultValue.user = user;
            return _resultValue;
        }
    }
}
