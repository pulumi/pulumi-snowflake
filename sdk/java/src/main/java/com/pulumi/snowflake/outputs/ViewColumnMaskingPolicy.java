// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class ViewColumnMaskingPolicy {
    /**
     * @return Specifies the masking policy to set on a column. For more information about this resource, see docs.
     * 
     */
    private String policyName;
    /**
     * @return Specifies the arguments to pass into the conditional masking policy SQL expression. The first column in the list specifies the column for the policy conditions to mask or tokenize the data and must match the column to which the masking policy is set. The additional columns specify the columns to evaluate to determine whether to mask or tokenize the data in each row of the query result when a query is made on the first column. If the USING clause is omitted, Snowflake treats the conditional masking policy as a normal masking policy.
     * 
     */
    private @Nullable List<String> usings;

    private ViewColumnMaskingPolicy() {}
    /**
     * @return Specifies the masking policy to set on a column. For more information about this resource, see docs.
     * 
     */
    public String policyName() {
        return this.policyName;
    }
    /**
     * @return Specifies the arguments to pass into the conditional masking policy SQL expression. The first column in the list specifies the column for the policy conditions to mask or tokenize the data and must match the column to which the masking policy is set. The additional columns specify the columns to evaluate to determine whether to mask or tokenize the data in each row of the query result when a query is made on the first column. If the USING clause is omitted, Snowflake treats the conditional masking policy as a normal masking policy.
     * 
     */
    public List<String> usings() {
        return this.usings == null ? List.of() : this.usings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ViewColumnMaskingPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String policyName;
        private @Nullable List<String> usings;
        public Builder() {}
        public Builder(ViewColumnMaskingPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.policyName = defaults.policyName;
    	      this.usings = defaults.usings;
        }

        @CustomType.Setter
        public Builder policyName(String policyName) {
            if (policyName == null) {
              throw new MissingRequiredPropertyException("ViewColumnMaskingPolicy", "policyName");
            }
            this.policyName = policyName;
            return this;
        }
        @CustomType.Setter
        public Builder usings(@Nullable List<String> usings) {

            this.usings = usings;
            return this;
        }
        public Builder usings(String... usings) {
            return usings(List.of(usings));
        }
        public ViewColumnMaskingPolicy build() {
            final var _resultValue = new ViewColumnMaskingPolicy();
            _resultValue.policyName = policyName;
            _resultValue.usings = usings;
            return _resultValue;
        }
    }
}
