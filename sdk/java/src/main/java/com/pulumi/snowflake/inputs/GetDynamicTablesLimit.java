// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDynamicTablesLimit extends com.pulumi.resources.InvokeArgs {

    public static final GetDynamicTablesLimit Empty = new GetDynamicTablesLimit();

    /**
     * The optional FROM &#39;name_string&#39; subclause effectively serves as a “cursor” for the results. This enables fetching the specified number of rows following the first row whose object name matches the specified string
     * 
     */
    @Import(name="from")
    private @Nullable String from;

    /**
     * @return The optional FROM &#39;name_string&#39; subclause effectively serves as a “cursor” for the results. This enables fetching the specified number of rows following the first row whose object name matches the specified string
     * 
     */
    public Optional<String> from() {
        return Optional.ofNullable(this.from);
    }

    /**
     * Specifies the maximum number of rows to return.
     * 
     */
    @Import(name="rows")
    private @Nullable Integer rows;

    /**
     * @return Specifies the maximum number of rows to return.
     * 
     */
    public Optional<Integer> rows() {
        return Optional.ofNullable(this.rows);
    }

    private GetDynamicTablesLimit() {}

    private GetDynamicTablesLimit(GetDynamicTablesLimit $) {
        this.from = $.from;
        this.rows = $.rows;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDynamicTablesLimit defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDynamicTablesLimit $;

        public Builder() {
            $ = new GetDynamicTablesLimit();
        }

        public Builder(GetDynamicTablesLimit defaults) {
            $ = new GetDynamicTablesLimit(Objects.requireNonNull(defaults));
        }

        /**
         * @param from The optional FROM &#39;name_string&#39; subclause effectively serves as a “cursor” for the results. This enables fetching the specified number of rows following the first row whose object name matches the specified string
         * 
         * @return builder
         * 
         */
        public Builder from(@Nullable String from) {
            $.from = from;
            return this;
        }

        /**
         * @param rows Specifies the maximum number of rows to return.
         * 
         * @return builder
         * 
         */
        public Builder rows(@Nullable Integer rows) {
            $.rows = rows;
            return this;
        }

        public GetDynamicTablesLimit build() {
            return $;
        }
    }

}
