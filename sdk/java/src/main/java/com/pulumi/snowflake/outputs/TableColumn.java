// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.snowflake.outputs.TableColumnDefault;
import com.pulumi.snowflake.outputs.TableColumnIdentity;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TableColumn {
    /**
     * @return Column comment
     * 
     */
    private final @Nullable String comment;
    /**
     * @return Defines the column default value; note due to limitations of Snowflake&#39;s ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied
     * 
     */
    private final @Nullable TableColumnDefault default_;
    /**
     * @return Defines the identity start/step values for a column. **Note** Identity/default are mutually exclusive.
     * 
     */
    private final @Nullable TableColumnIdentity identity;
    /**
     * @return Column name
     * 
     */
    private final String name;
    /**
     * @return Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
     * 
     */
    private final @Nullable Boolean nullable;
    /**
     * @return Column type, e.g. VARIANT
     * 
     */
    private final String type;

    @CustomType.Constructor
    private TableColumn(
        @CustomType.Parameter("comment") @Nullable String comment,
        @CustomType.Parameter("default") @Nullable TableColumnDefault default_,
        @CustomType.Parameter("identity") @Nullable TableColumnIdentity identity,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("nullable") @Nullable Boolean nullable,
        @CustomType.Parameter("type") String type) {
        this.comment = comment;
        this.default_ = default_;
        this.identity = identity;
        this.name = name;
        this.nullable = nullable;
        this.type = type;
    }

    /**
     * @return Column comment
     * 
     */
    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }
    /**
     * @return Defines the column default value; note due to limitations of Snowflake&#39;s ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied
     * 
     */
    public Optional<TableColumnDefault> default_() {
        return Optional.ofNullable(this.default_);
    }
    /**
     * @return Defines the identity start/step values for a column. **Note** Identity/default are mutually exclusive.
     * 
     */
    public Optional<TableColumnIdentity> identity() {
        return Optional.ofNullable(this.identity);
    }
    /**
     * @return Column name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
     * 
     */
    public Optional<Boolean> nullable() {
        return Optional.ofNullable(this.nullable);
    }
    /**
     * @return Column type, e.g. VARIANT
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableColumn defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String comment;
        private @Nullable TableColumnDefault default_;
        private @Nullable TableColumnIdentity identity;
        private String name;
        private @Nullable Boolean nullable;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(TableColumn defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comment = defaults.comment;
    	      this.default_ = defaults.default_;
    	      this.identity = defaults.identity;
    	      this.name = defaults.name;
    	      this.nullable = defaults.nullable;
    	      this.type = defaults.type;
        }

        public Builder comment(@Nullable String comment) {
            this.comment = comment;
            return this;
        }
        public Builder default_(@Nullable TableColumnDefault default_) {
            this.default_ = default_;
            return this;
        }
        public Builder identity(@Nullable TableColumnIdentity identity) {
            this.identity = identity;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder nullable(@Nullable Boolean nullable) {
            this.nullable = nullable;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public TableColumn build() {
            return new TableColumn(comment, default_, identity, name, nullable, type);
        }
    }
}
