// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.snowflake.outputs.TableColumnDefault;
import com.pulumi.snowflake.outputs.TableColumnIdentity;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TableColumn {
    /**
     * @return Column collation, e.g. utf8
     * 
     */
    private @Nullable String collate;
    /**
     * @return Column comment
     * 
     */
    private @Nullable String comment;
    /**
     * @return Defines the column default value; note due to limitations of Snowflake&#39;s ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied
     * 
     */
    private @Nullable TableColumnDefault default_;
    /**
     * @return Defines the identity start/step values for a column. **Note** Identity/default are mutually exclusive.
     * 
     */
    private @Nullable TableColumnIdentity identity;
    /**
     * @return Masking policy to apply on column. It has to be a fully qualified name.
     * 
     */
    private @Nullable String maskingPolicy;
    /**
     * @return Column name
     * 
     */
    private String name;
    /**
     * @return Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
     * 
     */
    private @Nullable Boolean nullable;
    /**
     * @return Record of schema evolution.
     * 
     */
    private @Nullable String schemaEvolutionRecord;
    /**
     * @return Column type, e.g. VARIANT
     * 
     */
    private String type;

    private TableColumn() {}
    /**
     * @return Column collation, e.g. utf8
     * 
     */
    public Optional<String> collate() {
        return Optional.ofNullable(this.collate);
    }
    /**
     * @return Column comment
     * 
     */
    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }
    /**
     * @return Defines the column default value; note due to limitations of Snowflake&#39;s ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied
     * 
     */
    public Optional<TableColumnDefault> default_() {
        return Optional.ofNullable(this.default_);
    }
    /**
     * @return Defines the identity start/step values for a column. **Note** Identity/default are mutually exclusive.
     * 
     */
    public Optional<TableColumnIdentity> identity() {
        return Optional.ofNullable(this.identity);
    }
    /**
     * @return Masking policy to apply on column. It has to be a fully qualified name.
     * 
     */
    public Optional<String> maskingPolicy() {
        return Optional.ofNullable(this.maskingPolicy);
    }
    /**
     * @return Column name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
     * 
     */
    public Optional<Boolean> nullable() {
        return Optional.ofNullable(this.nullable);
    }
    /**
     * @return Record of schema evolution.
     * 
     */
    public Optional<String> schemaEvolutionRecord() {
        return Optional.ofNullable(this.schemaEvolutionRecord);
    }
    /**
     * @return Column type, e.g. VARIANT
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableColumn defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String collate;
        private @Nullable String comment;
        private @Nullable TableColumnDefault default_;
        private @Nullable TableColumnIdentity identity;
        private @Nullable String maskingPolicy;
        private String name;
        private @Nullable Boolean nullable;
        private @Nullable String schemaEvolutionRecord;
        private String type;
        public Builder() {}
        public Builder(TableColumn defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.collate = defaults.collate;
    	      this.comment = defaults.comment;
    	      this.default_ = defaults.default_;
    	      this.identity = defaults.identity;
    	      this.maskingPolicy = defaults.maskingPolicy;
    	      this.name = defaults.name;
    	      this.nullable = defaults.nullable;
    	      this.schemaEvolutionRecord = defaults.schemaEvolutionRecord;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder collate(@Nullable String collate) {

            this.collate = collate;
            return this;
        }
        @CustomType.Setter
        public Builder comment(@Nullable String comment) {

            this.comment = comment;
            return this;
        }
        @CustomType.Setter("default")
        public Builder default_(@Nullable TableColumnDefault default_) {

            this.default_ = default_;
            return this;
        }
        @CustomType.Setter
        public Builder identity(@Nullable TableColumnIdentity identity) {

            this.identity = identity;
            return this;
        }
        @CustomType.Setter
        public Builder maskingPolicy(@Nullable String maskingPolicy) {

            this.maskingPolicy = maskingPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("TableColumn", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nullable(@Nullable Boolean nullable) {

            this.nullable = nullable;
            return this;
        }
        @CustomType.Setter
        public Builder schemaEvolutionRecord(@Nullable String schemaEvolutionRecord) {

            this.schemaEvolutionRecord = schemaEvolutionRecord;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("TableColumn", "type");
            }
            this.type = type;
            return this;
        }
        public TableColumn build() {
            final var _resultValue = new TableColumn();
            _resultValue.collate = collate;
            _resultValue.comment = comment;
            _resultValue.default_ = default_;
            _resultValue.identity = identity;
            _resultValue.maskingPolicy = maskingPolicy;
            _resultValue.name = name;
            _resultValue.nullable = nullable;
            _resultValue.schemaEvolutionRecord = schemaEvolutionRecord;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
