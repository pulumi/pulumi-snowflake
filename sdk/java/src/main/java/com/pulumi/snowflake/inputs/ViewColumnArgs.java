// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.snowflake.inputs.ViewColumnMaskingPolicyArgs;
import com.pulumi.snowflake.inputs.ViewColumnProjectionPolicyArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ViewColumnArgs extends com.pulumi.resources.ResourceArgs {

    public static final ViewColumnArgs Empty = new ViewColumnArgs();

    /**
     * Specifies affected column name.
     * 
     */
    @Import(name="columnName", required=true)
    private Output<String> columnName;

    /**
     * @return Specifies affected column name.
     * 
     */
    public Output<String> columnName() {
        return this.columnName;
    }

    /**
     * Specifies a comment for the column.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Specifies a comment for the column.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="maskingPolicy")
    private @Nullable Output<ViewColumnMaskingPolicyArgs> maskingPolicy;

    public Optional<Output<ViewColumnMaskingPolicyArgs>> maskingPolicy() {
        return Optional.ofNullable(this.maskingPolicy);
    }

    @Import(name="projectionPolicy")
    private @Nullable Output<ViewColumnProjectionPolicyArgs> projectionPolicy;

    public Optional<Output<ViewColumnProjectionPolicyArgs>> projectionPolicy() {
        return Optional.ofNullable(this.projectionPolicy);
    }

    private ViewColumnArgs() {}

    private ViewColumnArgs(ViewColumnArgs $) {
        this.columnName = $.columnName;
        this.comment = $.comment;
        this.maskingPolicy = $.maskingPolicy;
        this.projectionPolicy = $.projectionPolicy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ViewColumnArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ViewColumnArgs $;

        public Builder() {
            $ = new ViewColumnArgs();
        }

        public Builder(ViewColumnArgs defaults) {
            $ = new ViewColumnArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param columnName Specifies affected column name.
         * 
         * @return builder
         * 
         */
        public Builder columnName(Output<String> columnName) {
            $.columnName = columnName;
            return this;
        }

        /**
         * @param columnName Specifies affected column name.
         * 
         * @return builder
         * 
         */
        public Builder columnName(String columnName) {
            return columnName(Output.of(columnName));
        }

        /**
         * @param comment Specifies a comment for the column.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Specifies a comment for the column.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder maskingPolicy(@Nullable Output<ViewColumnMaskingPolicyArgs> maskingPolicy) {
            $.maskingPolicy = maskingPolicy;
            return this;
        }

        public Builder maskingPolicy(ViewColumnMaskingPolicyArgs maskingPolicy) {
            return maskingPolicy(Output.of(maskingPolicy));
        }

        public Builder projectionPolicy(@Nullable Output<ViewColumnProjectionPolicyArgs> projectionPolicy) {
            $.projectionPolicy = projectionPolicy;
            return this;
        }

        public Builder projectionPolicy(ViewColumnProjectionPolicyArgs projectionPolicy) {
            return projectionPolicy(Output.of(projectionPolicy));
        }

        public ViewColumnArgs build() {
            if ($.columnName == null) {
                throw new MissingRequiredPropertyException("ViewColumnArgs", "columnName");
            }
            return $;
        }
    }

}
