// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.snowflake.inputs.GetRowAccessPoliciesIn;
import com.pulumi.snowflake.inputs.GetRowAccessPoliciesLimit;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRowAccessPoliciesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRowAccessPoliciesPlainArgs Empty = new GetRowAccessPoliciesPlainArgs();

    /**
     * IN clause to filter the list of row access policies
     * 
     */
    @Import(name="in")
    private @Nullable GetRowAccessPoliciesIn in;

    /**
     * @return IN clause to filter the list of row access policies
     * 
     */
    public Optional<GetRowAccessPoliciesIn> in() {
        return Optional.ofNullable(this.in);
    }

    /**
     * Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
     * 
     */
    @Import(name="like")
    private @Nullable String like;

    /**
     * @return Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
     * 
     */
    public Optional<String> like() {
        return Optional.ofNullable(this.like);
    }

    /**
     * Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.
     * 
     */
    @Import(name="limit")
    private @Nullable GetRowAccessPoliciesLimit limit;

    /**
     * @return Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.
     * 
     */
    public Optional<GetRowAccessPoliciesLimit> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * (Default: `true`) Runs DESC ROW ACCESS POLICY for each row access policy returned by SHOW ROW ACCESS POLICIES. The output of describe is saved to the description field. By default this value is set to true.
     * 
     */
    @Import(name="withDescribe")
    private @Nullable Boolean withDescribe;

    /**
     * @return (Default: `true`) Runs DESC ROW ACCESS POLICY for each row access policy returned by SHOW ROW ACCESS POLICIES. The output of describe is saved to the description field. By default this value is set to true.
     * 
     */
    public Optional<Boolean> withDescribe() {
        return Optional.ofNullable(this.withDescribe);
    }

    private GetRowAccessPoliciesPlainArgs() {}

    private GetRowAccessPoliciesPlainArgs(GetRowAccessPoliciesPlainArgs $) {
        this.in = $.in;
        this.like = $.like;
        this.limit = $.limit;
        this.withDescribe = $.withDescribe;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRowAccessPoliciesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRowAccessPoliciesPlainArgs $;

        public Builder() {
            $ = new GetRowAccessPoliciesPlainArgs();
        }

        public Builder(GetRowAccessPoliciesPlainArgs defaults) {
            $ = new GetRowAccessPoliciesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param in IN clause to filter the list of row access policies
         * 
         * @return builder
         * 
         */
        public Builder in(@Nullable GetRowAccessPoliciesIn in) {
            $.in = in;
            return this;
        }

        /**
         * @param like Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
         * 
         * @return builder
         * 
         */
        public Builder like(@Nullable String like) {
            $.like = like;
            return this;
        }

        /**
         * @param limit Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.
         * 
         * @return builder
         * 
         */
        public Builder limit(@Nullable GetRowAccessPoliciesLimit limit) {
            $.limit = limit;
            return this;
        }

        /**
         * @param withDescribe (Default: `true`) Runs DESC ROW ACCESS POLICY for each row access policy returned by SHOW ROW ACCESS POLICIES. The output of describe is saved to the description field. By default this value is set to true.
         * 
         * @return builder
         * 
         */
        public Builder withDescribe(@Nullable Boolean withDescribe) {
            $.withDescribe = withDescribe;
            return this;
        }

        public GetRowAccessPoliciesPlainArgs build() {
            return $;
        }
    }

}
