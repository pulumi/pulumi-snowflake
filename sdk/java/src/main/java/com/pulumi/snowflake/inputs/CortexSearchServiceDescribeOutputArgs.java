// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CortexSearchServiceDescribeOutputArgs extends com.pulumi.resources.ResourceArgs {

    public static final CortexSearchServiceDescribeOutputArgs Empty = new CortexSearchServiceDescribeOutputArgs();

    @Import(name="attributeColumns")
    private @Nullable Output<List<String>> attributeColumns;

    public Optional<Output<List<String>>> attributeColumns() {
        return Optional.ofNullable(this.attributeColumns);
    }

    @Import(name="columns")
    private @Nullable Output<List<String>> columns;

    public Optional<Output<List<String>>> columns() {
        return Optional.ofNullable(this.columns);
    }

    @Import(name="comment")
    private @Nullable Output<String> comment;

    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    @Import(name="dataTimestamp")
    private @Nullable Output<String> dataTimestamp;

    public Optional<Output<String>> dataTimestamp() {
        return Optional.ofNullable(this.dataTimestamp);
    }

    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    @Import(name="definition")
    private @Nullable Output<String> definition;

    public Optional<Output<String>> definition() {
        return Optional.ofNullable(this.definition);
    }

    @Import(name="embeddingModel")
    private @Nullable Output<String> embeddingModel;

    public Optional<Output<String>> embeddingModel() {
        return Optional.ofNullable(this.embeddingModel);
    }

    @Import(name="indexingError")
    private @Nullable Output<String> indexingError;

    public Optional<Output<String>> indexingError() {
        return Optional.ofNullable(this.indexingError);
    }

    @Import(name="indexingState")
    private @Nullable Output<String> indexingState;

    public Optional<Output<String>> indexingState() {
        return Optional.ofNullable(this.indexingState);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="schemaName")
    private @Nullable Output<String> schemaName;

    public Optional<Output<String>> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }

    @Import(name="searchColumn")
    private @Nullable Output<String> searchColumn;

    public Optional<Output<String>> searchColumn() {
        return Optional.ofNullable(this.searchColumn);
    }

    @Import(name="serviceQueryUrl")
    private @Nullable Output<String> serviceQueryUrl;

    public Optional<Output<String>> serviceQueryUrl() {
        return Optional.ofNullable(this.serviceQueryUrl);
    }

    @Import(name="sourceDataNumRows")
    private @Nullable Output<Integer> sourceDataNumRows;

    public Optional<Output<Integer>> sourceDataNumRows() {
        return Optional.ofNullable(this.sourceDataNumRows);
    }

    @Import(name="targetLag")
    private @Nullable Output<String> targetLag;

    public Optional<Output<String>> targetLag() {
        return Optional.ofNullable(this.targetLag);
    }

    @Import(name="warehouse")
    private @Nullable Output<String> warehouse;

    public Optional<Output<String>> warehouse() {
        return Optional.ofNullable(this.warehouse);
    }

    private CortexSearchServiceDescribeOutputArgs() {}

    private CortexSearchServiceDescribeOutputArgs(CortexSearchServiceDescribeOutputArgs $) {
        this.attributeColumns = $.attributeColumns;
        this.columns = $.columns;
        this.comment = $.comment;
        this.createdOn = $.createdOn;
        this.dataTimestamp = $.dataTimestamp;
        this.databaseName = $.databaseName;
        this.definition = $.definition;
        this.embeddingModel = $.embeddingModel;
        this.indexingError = $.indexingError;
        this.indexingState = $.indexingState;
        this.name = $.name;
        this.schemaName = $.schemaName;
        this.searchColumn = $.searchColumn;
        this.serviceQueryUrl = $.serviceQueryUrl;
        this.sourceDataNumRows = $.sourceDataNumRows;
        this.targetLag = $.targetLag;
        this.warehouse = $.warehouse;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CortexSearchServiceDescribeOutputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CortexSearchServiceDescribeOutputArgs $;

        public Builder() {
            $ = new CortexSearchServiceDescribeOutputArgs();
        }

        public Builder(CortexSearchServiceDescribeOutputArgs defaults) {
            $ = new CortexSearchServiceDescribeOutputArgs(Objects.requireNonNull(defaults));
        }

        public Builder attributeColumns(@Nullable Output<List<String>> attributeColumns) {
            $.attributeColumns = attributeColumns;
            return this;
        }

        public Builder attributeColumns(List<String> attributeColumns) {
            return attributeColumns(Output.of(attributeColumns));
        }

        public Builder attributeColumns(String... attributeColumns) {
            return attributeColumns(List.of(attributeColumns));
        }

        public Builder columns(@Nullable Output<List<String>> columns) {
            $.columns = columns;
            return this;
        }

        public Builder columns(List<String> columns) {
            return columns(Output.of(columns));
        }

        public Builder columns(String... columns) {
            return columns(List.of(columns));
        }

        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        public Builder dataTimestamp(@Nullable Output<String> dataTimestamp) {
            $.dataTimestamp = dataTimestamp;
            return this;
        }

        public Builder dataTimestamp(String dataTimestamp) {
            return dataTimestamp(Output.of(dataTimestamp));
        }

        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        public Builder definition(@Nullable Output<String> definition) {
            $.definition = definition;
            return this;
        }

        public Builder definition(String definition) {
            return definition(Output.of(definition));
        }

        public Builder embeddingModel(@Nullable Output<String> embeddingModel) {
            $.embeddingModel = embeddingModel;
            return this;
        }

        public Builder embeddingModel(String embeddingModel) {
            return embeddingModel(Output.of(embeddingModel));
        }

        public Builder indexingError(@Nullable Output<String> indexingError) {
            $.indexingError = indexingError;
            return this;
        }

        public Builder indexingError(String indexingError) {
            return indexingError(Output.of(indexingError));
        }

        public Builder indexingState(@Nullable Output<String> indexingState) {
            $.indexingState = indexingState;
            return this;
        }

        public Builder indexingState(String indexingState) {
            return indexingState(Output.of(indexingState));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder schemaName(@Nullable Output<String> schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        public Builder schemaName(String schemaName) {
            return schemaName(Output.of(schemaName));
        }

        public Builder searchColumn(@Nullable Output<String> searchColumn) {
            $.searchColumn = searchColumn;
            return this;
        }

        public Builder searchColumn(String searchColumn) {
            return searchColumn(Output.of(searchColumn));
        }

        public Builder serviceQueryUrl(@Nullable Output<String> serviceQueryUrl) {
            $.serviceQueryUrl = serviceQueryUrl;
            return this;
        }

        public Builder serviceQueryUrl(String serviceQueryUrl) {
            return serviceQueryUrl(Output.of(serviceQueryUrl));
        }

        public Builder sourceDataNumRows(@Nullable Output<Integer> sourceDataNumRows) {
            $.sourceDataNumRows = sourceDataNumRows;
            return this;
        }

        public Builder sourceDataNumRows(Integer sourceDataNumRows) {
            return sourceDataNumRows(Output.of(sourceDataNumRows));
        }

        public Builder targetLag(@Nullable Output<String> targetLag) {
            $.targetLag = targetLag;
            return this;
        }

        public Builder targetLag(String targetLag) {
            return targetLag(Output.of(targetLag));
        }

        public Builder warehouse(@Nullable Output<String> warehouse) {
            $.warehouse = warehouse;
            return this;
        }

        public Builder warehouse(String warehouse) {
            return warehouse(Output.of(warehouse));
        }

        public CortexSearchServiceDescribeOutputArgs build() {
            return $;
        }
    }

}
