// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetStreamsStreamDescribeOutput {
    private List<String> baseTables;
    private String comment;
    private String createdOn;
    private String databaseName;
    private String invalidReason;
    private String mode;
    private String name;
    private String owner;
    private String ownerRoleType;
    private String schemaName;
    private String sourceType;
    private Boolean stale;
    private String staleAfter;
    private String tableName;
    private String type;

    private GetStreamsStreamDescribeOutput() {}
    public List<String> baseTables() {
        return this.baseTables;
    }
    public String comment() {
        return this.comment;
    }
    public String createdOn() {
        return this.createdOn;
    }
    public String databaseName() {
        return this.databaseName;
    }
    public String invalidReason() {
        return this.invalidReason;
    }
    public String mode() {
        return this.mode;
    }
    public String name() {
        return this.name;
    }
    public String owner() {
        return this.owner;
    }
    public String ownerRoleType() {
        return this.ownerRoleType;
    }
    public String schemaName() {
        return this.schemaName;
    }
    public String sourceType() {
        return this.sourceType;
    }
    public Boolean stale() {
        return this.stale;
    }
    public String staleAfter() {
        return this.staleAfter;
    }
    public String tableName() {
        return this.tableName;
    }
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStreamsStreamDescribeOutput defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> baseTables;
        private String comment;
        private String createdOn;
        private String databaseName;
        private String invalidReason;
        private String mode;
        private String name;
        private String owner;
        private String ownerRoleType;
        private String schemaName;
        private String sourceType;
        private Boolean stale;
        private String staleAfter;
        private String tableName;
        private String type;
        public Builder() {}
        public Builder(GetStreamsStreamDescribeOutput defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseTables = defaults.baseTables;
    	      this.comment = defaults.comment;
    	      this.createdOn = defaults.createdOn;
    	      this.databaseName = defaults.databaseName;
    	      this.invalidReason = defaults.invalidReason;
    	      this.mode = defaults.mode;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.ownerRoleType = defaults.ownerRoleType;
    	      this.schemaName = defaults.schemaName;
    	      this.sourceType = defaults.sourceType;
    	      this.stale = defaults.stale;
    	      this.staleAfter = defaults.staleAfter;
    	      this.tableName = defaults.tableName;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder baseTables(List<String> baseTables) {
            if (baseTables == null) {
              throw new MissingRequiredPropertyException("GetStreamsStreamDescribeOutput", "baseTables");
            }
            this.baseTables = baseTables;
            return this;
        }
        public Builder baseTables(String... baseTables) {
            return baseTables(List.of(baseTables));
        }
        @CustomType.Setter
        public Builder comment(String comment) {
            if (comment == null) {
              throw new MissingRequiredPropertyException("GetStreamsStreamDescribeOutput", "comment");
            }
            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetStreamsStreamDescribeOutput", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder databaseName(String databaseName) {
            if (databaseName == null) {
              throw new MissingRequiredPropertyException("GetStreamsStreamDescribeOutput", "databaseName");
            }
            this.databaseName = databaseName;
            return this;
        }
        @CustomType.Setter
        public Builder invalidReason(String invalidReason) {
            if (invalidReason == null) {
              throw new MissingRequiredPropertyException("GetStreamsStreamDescribeOutput", "invalidReason");
            }
            this.invalidReason = invalidReason;
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            if (mode == null) {
              throw new MissingRequiredPropertyException("GetStreamsStreamDescribeOutput", "mode");
            }
            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetStreamsStreamDescribeOutput", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder owner(String owner) {
            if (owner == null) {
              throw new MissingRequiredPropertyException("GetStreamsStreamDescribeOutput", "owner");
            }
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder ownerRoleType(String ownerRoleType) {
            if (ownerRoleType == null) {
              throw new MissingRequiredPropertyException("GetStreamsStreamDescribeOutput", "ownerRoleType");
            }
            this.ownerRoleType = ownerRoleType;
            return this;
        }
        @CustomType.Setter
        public Builder schemaName(String schemaName) {
            if (schemaName == null) {
              throw new MissingRequiredPropertyException("GetStreamsStreamDescribeOutput", "schemaName");
            }
            this.schemaName = schemaName;
            return this;
        }
        @CustomType.Setter
        public Builder sourceType(String sourceType) {
            if (sourceType == null) {
              throw new MissingRequiredPropertyException("GetStreamsStreamDescribeOutput", "sourceType");
            }
            this.sourceType = sourceType;
            return this;
        }
        @CustomType.Setter
        public Builder stale(Boolean stale) {
            if (stale == null) {
              throw new MissingRequiredPropertyException("GetStreamsStreamDescribeOutput", "stale");
            }
            this.stale = stale;
            return this;
        }
        @CustomType.Setter
        public Builder staleAfter(String staleAfter) {
            if (staleAfter == null) {
              throw new MissingRequiredPropertyException("GetStreamsStreamDescribeOutput", "staleAfter");
            }
            this.staleAfter = staleAfter;
            return this;
        }
        @CustomType.Setter
        public Builder tableName(String tableName) {
            if (tableName == null) {
              throw new MissingRequiredPropertyException("GetStreamsStreamDescribeOutput", "tableName");
            }
            this.tableName = tableName;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetStreamsStreamDescribeOutput", "type");
            }
            this.type = type;
            return this;
        }
        public GetStreamsStreamDescribeOutput build() {
            final var _resultValue = new GetStreamsStreamDescribeOutput();
            _resultValue.baseTables = baseTables;
            _resultValue.comment = comment;
            _resultValue.createdOn = createdOn;
            _resultValue.databaseName = databaseName;
            _resultValue.invalidReason = invalidReason;
            _resultValue.mode = mode;
            _resultValue.name = name;
            _resultValue.owner = owner;
            _resultValue.ownerRoleType = ownerRoleType;
            _resultValue.schemaName = schemaName;
            _resultValue.sourceType = sourceType;
            _resultValue.stale = stale;
            _resultValue.staleAfter = staleAfter;
            _resultValue.tableName = tableName;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
