// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitRepositoryShowOutputArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitRepositoryShowOutputArgs Empty = new GitRepositoryShowOutputArgs();

    @Import(name="apiIntegration")
    private @Nullable Output<String> apiIntegration;

    public Optional<Output<String>> apiIntegration() {
        return Optional.ofNullable(this.apiIntegration);
    }

    @Import(name="comment")
    private @Nullable Output<String> comment;

    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    @Import(name="gitCredentials")
    private @Nullable Output<String> gitCredentials;

    public Optional<Output<String>> gitCredentials() {
        return Optional.ofNullable(this.gitCredentials);
    }

    @Import(name="lastFetchedAt")
    private @Nullable Output<String> lastFetchedAt;

    public Optional<Output<String>> lastFetchedAt() {
        return Optional.ofNullable(this.lastFetchedAt);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="origin")
    private @Nullable Output<String> origin;

    public Optional<Output<String>> origin() {
        return Optional.ofNullable(this.origin);
    }

    @Import(name="owner")
    private @Nullable Output<String> owner;

    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    @Import(name="ownerRoleType")
    private @Nullable Output<String> ownerRoleType;

    public Optional<Output<String>> ownerRoleType() {
        return Optional.ofNullable(this.ownerRoleType);
    }

    @Import(name="schemaName")
    private @Nullable Output<String> schemaName;

    public Optional<Output<String>> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }

    private GitRepositoryShowOutputArgs() {}

    private GitRepositoryShowOutputArgs(GitRepositoryShowOutputArgs $) {
        this.apiIntegration = $.apiIntegration;
        this.comment = $.comment;
        this.createdOn = $.createdOn;
        this.databaseName = $.databaseName;
        this.gitCredentials = $.gitCredentials;
        this.lastFetchedAt = $.lastFetchedAt;
        this.name = $.name;
        this.origin = $.origin;
        this.owner = $.owner;
        this.ownerRoleType = $.ownerRoleType;
        this.schemaName = $.schemaName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitRepositoryShowOutputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitRepositoryShowOutputArgs $;

        public Builder() {
            $ = new GitRepositoryShowOutputArgs();
        }

        public Builder(GitRepositoryShowOutputArgs defaults) {
            $ = new GitRepositoryShowOutputArgs(Objects.requireNonNull(defaults));
        }

        public Builder apiIntegration(@Nullable Output<String> apiIntegration) {
            $.apiIntegration = apiIntegration;
            return this;
        }

        public Builder apiIntegration(String apiIntegration) {
            return apiIntegration(Output.of(apiIntegration));
        }

        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        public Builder gitCredentials(@Nullable Output<String> gitCredentials) {
            $.gitCredentials = gitCredentials;
            return this;
        }

        public Builder gitCredentials(String gitCredentials) {
            return gitCredentials(Output.of(gitCredentials));
        }

        public Builder lastFetchedAt(@Nullable Output<String> lastFetchedAt) {
            $.lastFetchedAt = lastFetchedAt;
            return this;
        }

        public Builder lastFetchedAt(String lastFetchedAt) {
            return lastFetchedAt(Output.of(lastFetchedAt));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder origin(@Nullable Output<String> origin) {
            $.origin = origin;
            return this;
        }

        public Builder origin(String origin) {
            return origin(Output.of(origin));
        }

        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        public Builder ownerRoleType(@Nullable Output<String> ownerRoleType) {
            $.ownerRoleType = ownerRoleType;
            return this;
        }

        public Builder ownerRoleType(String ownerRoleType) {
            return ownerRoleType(Output.of(ownerRoleType));
        }

        public Builder schemaName(@Nullable Output<String> schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        public Builder schemaName(String schemaName) {
            return schemaName(Output.of(schemaName));
        }

        public GitRepositoryShowOutputArgs build() {
            return $;
        }
    }

}
