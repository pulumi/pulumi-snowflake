// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.snowflake.Utilities;
import com.pulumi.snowflake.ViewArgs;
import com.pulumi.snowflake.inputs.ViewState;
import com.pulumi.snowflake.outputs.ViewAggregationPolicy;
import com.pulumi.snowflake.outputs.ViewColumn;
import com.pulumi.snowflake.outputs.ViewDataMetricFunction;
import com.pulumi.snowflake.outputs.ViewDataMetricSchedule;
import com.pulumi.snowflake.outputs.ViewDescribeOutput;
import com.pulumi.snowflake.outputs.ViewRowAccessPolicy;
import com.pulumi.snowflake.outputs.ViewShowOutput;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * ```sh
 * $ pulumi import snowflake:index/view:View example &#39;&#34;&lt;database_name&gt;&#34;.&#34;&lt;schema_name&gt;&#34;.&#34;&lt;view_name&gt;&#34;&#39;
 * ```
 * 
 */
@ResourceType(type="snowflake:index/view:View")
public class View extends com.pulumi.resources.CustomResource {
    /**
     * Specifies the aggregation policy to set on a view.
     * 
     */
    @Export(name="aggregationPolicy", refs={ViewAggregationPolicy.class}, tree="[0]")
    private Output</* @Nullable */ ViewAggregationPolicy> aggregationPolicy;

    /**
     * @return Specifies the aggregation policy to set on a view.
     * 
     */
    public Output<Optional<ViewAggregationPolicy>> aggregationPolicy() {
        return Codegen.optional(this.aggregationPolicy);
    }
    /**
     * Specifies to enable or disable change tracking on the table. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
     * 
     */
    @Export(name="changeTracking", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> changeTracking;

    /**
     * @return Specifies to enable or disable change tracking on the table. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
     * 
     */
    public Output<Optional<String>> changeTracking() {
        return Codegen.optional(this.changeTracking);
    }
    /**
     * If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.
     * 
     */
    @Export(name="columns", refs={List.class,ViewColumn.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ViewColumn>> columns;

    /**
     * @return If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.
     * 
     */
    public Output<Optional<List<ViewColumn>>> columns() {
        return Codegen.optional(this.columns);
    }
    /**
     * Specifies a comment for the view.
     * 
     */
    @Export(name="comment", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> comment;

    /**
     * @return Specifies a comment for the view.
     * 
     */
    public Output<Optional<String>> comment() {
        return Codegen.optional(this.comment);
    }
    /**
     * Retains the access permissions from the original view when a new view is created using the OR REPLACE clause.
     * 
     */
    @Export(name="copyGrants", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> copyGrants;

    /**
     * @return Retains the access permissions from the original view when a new view is created using the OR REPLACE clause.
     * 
     */
    public Output<Optional<Boolean>> copyGrants() {
        return Codegen.optional(this.copyGrants);
    }
    /**
     * Data metric functions used for the view.
     * 
     */
    @Export(name="dataMetricFunctions", refs={List.class,ViewDataMetricFunction.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ViewDataMetricFunction>> dataMetricFunctions;

    /**
     * @return Data metric functions used for the view.
     * 
     */
    public Output<Optional<List<ViewDataMetricFunction>>> dataMetricFunctions() {
        return Codegen.optional(this.dataMetricFunctions);
    }
    /**
     * Specifies the schedule to run the data metric functions periodically.
     * 
     */
    @Export(name="dataMetricSchedule", refs={ViewDataMetricSchedule.class}, tree="[0]")
    private Output</* @Nullable */ ViewDataMetricSchedule> dataMetricSchedule;

    /**
     * @return Specifies the schedule to run the data metric functions periodically.
     * 
     */
    public Output<Optional<ViewDataMetricSchedule>> dataMetricSchedule() {
        return Codegen.optional(this.dataMetricSchedule);
    }
    /**
     * The database in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `&#34;`
     * 
     */
    @Export(name="database", refs={String.class}, tree="[0]")
    private Output<String> database;

    /**
     * @return The database in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `&#34;`
     * 
     */
    public Output<String> database() {
        return this.database;
    }
    /**
     * Outputs the result of `DESCRIBE VIEW` for the given view.
     * 
     */
    @Export(name="describeOutputs", refs={List.class,ViewDescribeOutput.class}, tree="[0,1]")
    private Output<List<ViewDescribeOutput>> describeOutputs;

    /**
     * @return Outputs the result of `DESCRIBE VIEW` for the given view.
     * 
     */
    public Output<List<ViewDescribeOutput>> describeOutputs() {
        return this.describeOutputs;
    }
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    @Export(name="fullyQualifiedName", refs={String.class}, tree="[0]")
    private Output<String> fullyQualifiedName;

    /**
     * @return Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    public Output<String> fullyQualifiedName() {
        return this.fullyQualifiedName;
    }
    /**
     * Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
     * 
     */
    @Export(name="isRecursive", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> isRecursive;

    /**
     * @return Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
     * 
     */
    public Output<Optional<String>> isRecursive() {
        return Codegen.optional(this.isRecursive);
    }
    @Export(name="isSecure", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> isSecure;

    public Output<Optional<String>> isSecure() {
        return Codegen.optional(this.isSecure);
    }
    @Export(name="isTemporary", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> isTemporary;

    public Output<Optional<String>> isTemporary() {
        return Codegen.optional(this.isTemporary);
    }
    /**
     * Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `&#34;`
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `&#34;`
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Specifies the row access policy to set on a view.
     * 
     */
    @Export(name="rowAccessPolicy", refs={ViewRowAccessPolicy.class}, tree="[0]")
    private Output</* @Nullable */ ViewRowAccessPolicy> rowAccessPolicy;

    /**
     * @return Specifies the row access policy to set on a view.
     * 
     */
    public Output<Optional<ViewRowAccessPolicy>> rowAccessPolicy() {
        return Codegen.optional(this.rowAccessPolicy);
    }
    /**
     * The schema in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `&#34;`
     * 
     */
    @Export(name="schema", refs={String.class}, tree="[0]")
    private Output<String> schema;

    /**
     * @return The schema in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `&#34;`
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }
    /**
     * Outputs the result of `SHOW VIEW` for the given view.
     * 
     */
    @Export(name="showOutputs", refs={List.class,ViewShowOutput.class}, tree="[0,1]")
    private Output<List<ViewShowOutput>> showOutputs;

    /**
     * @return Outputs the result of `SHOW VIEW` for the given view.
     * 
     */
    public Output<List<ViewShowOutput>> showOutputs() {
        return this.showOutputs;
    }
    /**
     * Specifies the query used to create the view.
     * 
     */
    @Export(name="statement", refs={String.class}, tree="[0]")
    private Output<String> statement;

    /**
     * @return Specifies the query used to create the view.
     * 
     */
    public Output<String> statement() {
        return this.statement;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public View(java.lang.String name) {
        this(name, ViewArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public View(java.lang.String name, ViewArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public View(java.lang.String name, ViewArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("snowflake:index/view:View", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private View(java.lang.String name, Output<java.lang.String> id, @Nullable ViewState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("snowflake:index/view:View", name, state, makeResourceOptions(options, id), false);
    }

    private static ViewArgs makeArgs(ViewArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ViewArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static View get(java.lang.String name, Output<java.lang.String> id, @Nullable ViewState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new View(name, id, state, options);
    }
}
