// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.snowflake.outputs.DatabaseReplicationEnableToAccount;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatabaseReplication {
    /**
     * @return Entry to enable replication and optionally failover for a given account identifier.
     * 
     */
    private List<DatabaseReplicationEnableToAccount> enableToAccounts;
    /**
     * @return Allows replicating data to accounts on lower editions in either of the following scenarios: 1. The primary database is in a Business Critical (or higher) account but one or more of the accounts approved for replication are on lower editions. Business Critical Edition is intended for Snowflake accounts with extremely sensitive data. 2. The primary database is in a Business Critical (or higher) account and a signed business associate agreement is in place to store PHI data in the account per HIPAA and HITRUST regulations, but no such agreement is in place for one or more of the accounts approved for replication, regardless if they are Business Critical (or higher) accounts. Both scenarios are prohibited by default in an effort to help prevent account administrators for Business Critical (or higher) accounts from inadvertently replicating sensitive data to accounts on lower editions.
     * 
     */
    private @Nullable Boolean ignoreEditionCheck;

    private DatabaseReplication() {}
    /**
     * @return Entry to enable replication and optionally failover for a given account identifier.
     * 
     */
    public List<DatabaseReplicationEnableToAccount> enableToAccounts() {
        return this.enableToAccounts;
    }
    /**
     * @return Allows replicating data to accounts on lower editions in either of the following scenarios: 1. The primary database is in a Business Critical (or higher) account but one or more of the accounts approved for replication are on lower editions. Business Critical Edition is intended for Snowflake accounts with extremely sensitive data. 2. The primary database is in a Business Critical (or higher) account and a signed business associate agreement is in place to store PHI data in the account per HIPAA and HITRUST regulations, but no such agreement is in place for one or more of the accounts approved for replication, regardless if they are Business Critical (or higher) accounts. Both scenarios are prohibited by default in an effort to help prevent account administrators for Business Critical (or higher) accounts from inadvertently replicating sensitive data to accounts on lower editions.
     * 
     */
    public Optional<Boolean> ignoreEditionCheck() {
        return Optional.ofNullable(this.ignoreEditionCheck);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseReplication defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<DatabaseReplicationEnableToAccount> enableToAccounts;
        private @Nullable Boolean ignoreEditionCheck;
        public Builder() {}
        public Builder(DatabaseReplication defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableToAccounts = defaults.enableToAccounts;
    	      this.ignoreEditionCheck = defaults.ignoreEditionCheck;
        }

        @CustomType.Setter
        public Builder enableToAccounts(List<DatabaseReplicationEnableToAccount> enableToAccounts) {
            if (enableToAccounts == null) {
              throw new MissingRequiredPropertyException("DatabaseReplication", "enableToAccounts");
            }
            this.enableToAccounts = enableToAccounts;
            return this;
        }
        public Builder enableToAccounts(DatabaseReplicationEnableToAccount... enableToAccounts) {
            return enableToAccounts(List.of(enableToAccounts));
        }
        @CustomType.Setter
        public Builder ignoreEditionCheck(@Nullable Boolean ignoreEditionCheck) {

            this.ignoreEditionCheck = ignoreEditionCheck;
            return this;
        }
        public DatabaseReplication build() {
            final var _resultValue = new DatabaseReplication();
            _resultValue.enableToAccounts = enableToAccounts;
            _resultValue.ignoreEditionCheck = ignoreEditionCheck;
            return _resultValue;
        }
    }
}
