// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.snowflake.inputs.UserTagArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserArgs Empty = new UserArgs();

    @Import(name="comment")
    private @Nullable Output<String> comment;

    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login.
     * 
     */
    @Import(name="defaultNamespace")
    private @Nullable Output<String> defaultNamespace;

    /**
     * @return Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login.
     * 
     */
    public Optional<Output<String>> defaultNamespace() {
        return Optional.ofNullable(this.defaultNamespace);
    }

    /**
     * Specifies the role that is active by default for the user’s session upon login.
     * 
     */
    @Import(name="defaultRole")
    private @Nullable Output<String> defaultRole;

    /**
     * @return Specifies the role that is active by default for the user’s session upon login.
     * 
     */
    public Optional<Output<String>> defaultRole() {
        return Optional.ofNullable(this.defaultRole);
    }

    /**
     * Specifies the set of secondary roles that are active for the user’s session upon login.
     * 
     */
    @Import(name="defaultSecondaryRoles")
    private @Nullable Output<List<String>> defaultSecondaryRoles;

    /**
     * @return Specifies the set of secondary roles that are active for the user’s session upon login.
     * 
     */
    public Optional<Output<List<String>>> defaultSecondaryRoles() {
        return Optional.ofNullable(this.defaultSecondaryRoles);
    }

    /**
     * Specifies the virtual warehouse that is active by default for the user’s session upon login.
     * 
     */
    @Import(name="defaultWarehouse")
    private @Nullable Output<String> defaultWarehouse;

    /**
     * @return Specifies the virtual warehouse that is active by default for the user’s session upon login.
     * 
     */
    public Optional<Output<String>> defaultWarehouse() {
        return Optional.ofNullable(this.defaultWarehouse);
    }

    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * Name displayed for the user in the Snowflake web interface.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Name displayed for the user in the Snowflake web interface.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Email address for the user.
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return Email address for the user.
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * First name of the user.
     * 
     */
    @Import(name="firstName")
    private @Nullable Output<String> firstName;

    /**
     * @return First name of the user.
     * 
     */
    public Optional<Output<String>> firstName() {
        return Optional.ofNullable(this.firstName);
    }

    /**
     * Last name of the user.
     * 
     */
    @Import(name="lastName")
    private @Nullable Output<String> lastName;

    /**
     * @return Last name of the user.
     * 
     */
    public Optional<Output<String>> lastName() {
        return Optional.ofNullable(this.lastName);
    }

    /**
     * The name users use to log in. If not supplied, snowflake will use name instead.
     * 
     */
    @Import(name="loginName")
    private @Nullable Output<String> loginName;

    /**
     * @return The name users use to log in. If not supplied, snowflake will use name instead.
     * 
     */
    public Optional<Output<String>> loginName() {
        return Optional.ofNullable(this.loginName);
    }

    /**
     * Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system.
     * 
     */
    @Import(name="mustChangePassword")
    private @Nullable Output<Boolean> mustChangePassword;

    /**
     * @return Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system.
     * 
     */
    public Optional<Output<Boolean>> mustChangePassword() {
        return Optional.ofNullable(this.mustChangePassword);
    }

    /**
     * Name of the user. Note that if you do not supply login*name this will be used as login*name. [doc](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters)
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the user. Note that if you do not supply login*name this will be used as login*name. [doc](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters)
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * **WARNING:** this will put the password in the terraform state file. Use carefully.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return **WARNING:** this will put the password in the terraform state file. Use carefully.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.
     * 
     */
    @Import(name="rsaPublicKey")
    private @Nullable Output<String> rsaPublicKey;

    /**
     * @return Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.
     * 
     */
    public Optional<Output<String>> rsaPublicKey() {
        return Optional.ofNullable(this.rsaPublicKey);
    }

    /**
     * Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
     * 
     */
    @Import(name="rsaPublicKey2")
    private @Nullable Output<String> rsaPublicKey2;

    /**
     * @return Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
     * 
     */
    public Optional<Output<String>> rsaPublicKey2() {
        return Optional.ofNullable(this.rsaPublicKey2);
    }

    /**
     * Definitions of a tag to associate with the resource.
     * 
     * @deprecated
     * Use the &#39;snowflake_tag_association&#39; resource instead.
     * 
     */
    @Deprecated /* Use the 'snowflake_tag_association' resource instead. */
    @Import(name="tags")
    private @Nullable Output<List<UserTagArgs>> tags;

    /**
     * @return Definitions of a tag to associate with the resource.
     * 
     * @deprecated
     * Use the &#39;snowflake_tag_association&#39; resource instead.
     * 
     */
    @Deprecated /* Use the 'snowflake_tag_association' resource instead. */
    public Optional<Output<List<UserTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private UserArgs() {}

    private UserArgs(UserArgs $) {
        this.comment = $.comment;
        this.defaultNamespace = $.defaultNamespace;
        this.defaultRole = $.defaultRole;
        this.defaultSecondaryRoles = $.defaultSecondaryRoles;
        this.defaultWarehouse = $.defaultWarehouse;
        this.disabled = $.disabled;
        this.displayName = $.displayName;
        this.email = $.email;
        this.firstName = $.firstName;
        this.lastName = $.lastName;
        this.loginName = $.loginName;
        this.mustChangePassword = $.mustChangePassword;
        this.name = $.name;
        this.password = $.password;
        this.rsaPublicKey = $.rsaPublicKey;
        this.rsaPublicKey2 = $.rsaPublicKey2;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserArgs $;

        public Builder() {
            $ = new UserArgs();
        }

        public Builder(UserArgs defaults) {
            $ = new UserArgs(Objects.requireNonNull(defaults));
        }

        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param defaultNamespace Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login.
         * 
         * @return builder
         * 
         */
        public Builder defaultNamespace(@Nullable Output<String> defaultNamespace) {
            $.defaultNamespace = defaultNamespace;
            return this;
        }

        /**
         * @param defaultNamespace Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login.
         * 
         * @return builder
         * 
         */
        public Builder defaultNamespace(String defaultNamespace) {
            return defaultNamespace(Output.of(defaultNamespace));
        }

        /**
         * @param defaultRole Specifies the role that is active by default for the user’s session upon login.
         * 
         * @return builder
         * 
         */
        public Builder defaultRole(@Nullable Output<String> defaultRole) {
            $.defaultRole = defaultRole;
            return this;
        }

        /**
         * @param defaultRole Specifies the role that is active by default for the user’s session upon login.
         * 
         * @return builder
         * 
         */
        public Builder defaultRole(String defaultRole) {
            return defaultRole(Output.of(defaultRole));
        }

        /**
         * @param defaultSecondaryRoles Specifies the set of secondary roles that are active for the user’s session upon login.
         * 
         * @return builder
         * 
         */
        public Builder defaultSecondaryRoles(@Nullable Output<List<String>> defaultSecondaryRoles) {
            $.defaultSecondaryRoles = defaultSecondaryRoles;
            return this;
        }

        /**
         * @param defaultSecondaryRoles Specifies the set of secondary roles that are active for the user’s session upon login.
         * 
         * @return builder
         * 
         */
        public Builder defaultSecondaryRoles(List<String> defaultSecondaryRoles) {
            return defaultSecondaryRoles(Output.of(defaultSecondaryRoles));
        }

        /**
         * @param defaultSecondaryRoles Specifies the set of secondary roles that are active for the user’s session upon login.
         * 
         * @return builder
         * 
         */
        public Builder defaultSecondaryRoles(String... defaultSecondaryRoles) {
            return defaultSecondaryRoles(List.of(defaultSecondaryRoles));
        }

        /**
         * @param defaultWarehouse Specifies the virtual warehouse that is active by default for the user’s session upon login.
         * 
         * @return builder
         * 
         */
        public Builder defaultWarehouse(@Nullable Output<String> defaultWarehouse) {
            $.defaultWarehouse = defaultWarehouse;
            return this;
        }

        /**
         * @param defaultWarehouse Specifies the virtual warehouse that is active by default for the user’s session upon login.
         * 
         * @return builder
         * 
         */
        public Builder defaultWarehouse(String defaultWarehouse) {
            return defaultWarehouse(Output.of(defaultWarehouse));
        }

        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param displayName Name displayed for the user in the Snowflake web interface.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Name displayed for the user in the Snowflake web interface.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param email Email address for the user.
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email Email address for the user.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param firstName First name of the user.
         * 
         * @return builder
         * 
         */
        public Builder firstName(@Nullable Output<String> firstName) {
            $.firstName = firstName;
            return this;
        }

        /**
         * @param firstName First name of the user.
         * 
         * @return builder
         * 
         */
        public Builder firstName(String firstName) {
            return firstName(Output.of(firstName));
        }

        /**
         * @param lastName Last name of the user.
         * 
         * @return builder
         * 
         */
        public Builder lastName(@Nullable Output<String> lastName) {
            $.lastName = lastName;
            return this;
        }

        /**
         * @param lastName Last name of the user.
         * 
         * @return builder
         * 
         */
        public Builder lastName(String lastName) {
            return lastName(Output.of(lastName));
        }

        /**
         * @param loginName The name users use to log in. If not supplied, snowflake will use name instead.
         * 
         * @return builder
         * 
         */
        public Builder loginName(@Nullable Output<String> loginName) {
            $.loginName = loginName;
            return this;
        }

        /**
         * @param loginName The name users use to log in. If not supplied, snowflake will use name instead.
         * 
         * @return builder
         * 
         */
        public Builder loginName(String loginName) {
            return loginName(Output.of(loginName));
        }

        /**
         * @param mustChangePassword Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system.
         * 
         * @return builder
         * 
         */
        public Builder mustChangePassword(@Nullable Output<Boolean> mustChangePassword) {
            $.mustChangePassword = mustChangePassword;
            return this;
        }

        /**
         * @param mustChangePassword Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system.
         * 
         * @return builder
         * 
         */
        public Builder mustChangePassword(Boolean mustChangePassword) {
            return mustChangePassword(Output.of(mustChangePassword));
        }

        /**
         * @param name Name of the user. Note that if you do not supply login*name this will be used as login*name. [doc](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters)
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the user. Note that if you do not supply login*name this will be used as login*name. [doc](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters)
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param password **WARNING:** this will put the password in the terraform state file. Use carefully.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password **WARNING:** this will put the password in the terraform state file. Use carefully.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param rsaPublicKey Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.
         * 
         * @return builder
         * 
         */
        public Builder rsaPublicKey(@Nullable Output<String> rsaPublicKey) {
            $.rsaPublicKey = rsaPublicKey;
            return this;
        }

        /**
         * @param rsaPublicKey Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.
         * 
         * @return builder
         * 
         */
        public Builder rsaPublicKey(String rsaPublicKey) {
            return rsaPublicKey(Output.of(rsaPublicKey));
        }

        /**
         * @param rsaPublicKey2 Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
         * 
         * @return builder
         * 
         */
        public Builder rsaPublicKey2(@Nullable Output<String> rsaPublicKey2) {
            $.rsaPublicKey2 = rsaPublicKey2;
            return this;
        }

        /**
         * @param rsaPublicKey2 Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
         * 
         * @return builder
         * 
         */
        public Builder rsaPublicKey2(String rsaPublicKey2) {
            return rsaPublicKey2(Output.of(rsaPublicKey2));
        }

        /**
         * @param tags Definitions of a tag to associate with the resource.
         * 
         * @return builder
         * 
         * @deprecated
         * Use the &#39;snowflake_tag_association&#39; resource instead.
         * 
         */
        @Deprecated /* Use the 'snowflake_tag_association' resource instead. */
        public Builder tags(@Nullable Output<List<UserTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Definitions of a tag to associate with the resource.
         * 
         * @return builder
         * 
         * @deprecated
         * Use the &#39;snowflake_tag_association&#39; resource instead.
         * 
         */
        @Deprecated /* Use the 'snowflake_tag_association' resource instead. */
        public Builder tags(List<UserTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Definitions of a tag to associate with the resource.
         * 
         * @return builder
         * 
         * @deprecated
         * Use the &#39;snowflake_tag_association&#39; resource instead.
         * 
         */
        @Deprecated /* Use the 'snowflake_tag_association' resource instead. */
        public Builder tags(UserTagArgs... tags) {
            return tags(List.of(tags));
        }

        public UserArgs build() {
            return $;
        }
    }

}
