// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListingManifestFromStageArgs extends com.pulumi.resources.ResourceArgs {

    public static final ListingManifestFromStageArgs Empty = new ListingManifestFromStageArgs();

    /**
     * Location of the manifest file in the stage. If not specified, the manifest file will be expected to be at the root of the stage.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Location of the manifest file in the stage. If not specified, the manifest file will be expected to be at the root of the stage.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Identifier of the stage where the manifest file is located.
     * 
     */
    @Import(name="stage", required=true)
    private Output<String> stage;

    /**
     * @return Identifier of the stage where the manifest file is located.
     * 
     */
    public Output<String> stage() {
        return this.stage;
    }

    /**
     * Specifies a comment for the listing version. Whenever a new version is created, this comment will be associated with it. The comment on the version will be visible in the [SHOW VERSIONS IN LISTING](https://docs.snowflake.com/en/sql-reference/sql/show-versions-in-listing) command output.
     * 
     */
    @Import(name="versionComment")
    private @Nullable Output<String> versionComment;

    /**
     * @return Specifies a comment for the listing version. Whenever a new version is created, this comment will be associated with it. The comment on the version will be visible in the [SHOW VERSIONS IN LISTING](https://docs.snowflake.com/en/sql-reference/sql/show-versions-in-listing) command output.
     * 
     */
    public Optional<Output<String>> versionComment() {
        return Optional.ofNullable(this.versionComment);
    }

    /**
     * Represents manifest version name. It&#39;s case-sensitive and used in manifest versioning. Version name should be specified or changed whenever any changes in the manifest should be applied to the listing. Later on the versions of the listing can be analyzed by calling the [SHOW VERSIONS IN LISTING](https://docs.snowflake.com/en/sql-reference/sql/show-versions-in-listing) command. The resource does not track the changes on the specified stage.
     * 
     */
    @Import(name="versionName")
    private @Nullable Output<String> versionName;

    /**
     * @return Represents manifest version name. It&#39;s case-sensitive and used in manifest versioning. Version name should be specified or changed whenever any changes in the manifest should be applied to the listing. Later on the versions of the listing can be analyzed by calling the [SHOW VERSIONS IN LISTING](https://docs.snowflake.com/en/sql-reference/sql/show-versions-in-listing) command. The resource does not track the changes on the specified stage.
     * 
     */
    public Optional<Output<String>> versionName() {
        return Optional.ofNullable(this.versionName);
    }

    private ListingManifestFromStageArgs() {}

    private ListingManifestFromStageArgs(ListingManifestFromStageArgs $) {
        this.location = $.location;
        this.stage = $.stage;
        this.versionComment = $.versionComment;
        this.versionName = $.versionName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListingManifestFromStageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListingManifestFromStageArgs $;

        public Builder() {
            $ = new ListingManifestFromStageArgs();
        }

        public Builder(ListingManifestFromStageArgs defaults) {
            $ = new ListingManifestFromStageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param location Location of the manifest file in the stage. If not specified, the manifest file will be expected to be at the root of the stage.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location of the manifest file in the stage. If not specified, the manifest file will be expected to be at the root of the stage.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param stage Identifier of the stage where the manifest file is located.
         * 
         * @return builder
         * 
         */
        public Builder stage(Output<String> stage) {
            $.stage = stage;
            return this;
        }

        /**
         * @param stage Identifier of the stage where the manifest file is located.
         * 
         * @return builder
         * 
         */
        public Builder stage(String stage) {
            return stage(Output.of(stage));
        }

        /**
         * @param versionComment Specifies a comment for the listing version. Whenever a new version is created, this comment will be associated with it. The comment on the version will be visible in the [SHOW VERSIONS IN LISTING](https://docs.snowflake.com/en/sql-reference/sql/show-versions-in-listing) command output.
         * 
         * @return builder
         * 
         */
        public Builder versionComment(@Nullable Output<String> versionComment) {
            $.versionComment = versionComment;
            return this;
        }

        /**
         * @param versionComment Specifies a comment for the listing version. Whenever a new version is created, this comment will be associated with it. The comment on the version will be visible in the [SHOW VERSIONS IN LISTING](https://docs.snowflake.com/en/sql-reference/sql/show-versions-in-listing) command output.
         * 
         * @return builder
         * 
         */
        public Builder versionComment(String versionComment) {
            return versionComment(Output.of(versionComment));
        }

        /**
         * @param versionName Represents manifest version name. It&#39;s case-sensitive and used in manifest versioning. Version name should be specified or changed whenever any changes in the manifest should be applied to the listing. Later on the versions of the listing can be analyzed by calling the [SHOW VERSIONS IN LISTING](https://docs.snowflake.com/en/sql-reference/sql/show-versions-in-listing) command. The resource does not track the changes on the specified stage.
         * 
         * @return builder
         * 
         */
        public Builder versionName(@Nullable Output<String> versionName) {
            $.versionName = versionName;
            return this;
        }

        /**
         * @param versionName Represents manifest version name. It&#39;s case-sensitive and used in manifest versioning. Version name should be specified or changed whenever any changes in the manifest should be applied to the listing. Later on the versions of the listing can be analyzed by calling the [SHOW VERSIONS IN LISTING](https://docs.snowflake.com/en/sql-reference/sql/show-versions-in-listing) command. The resource does not track the changes on the specified stage.
         * 
         * @return builder
         * 
         */
        public Builder versionName(String versionName) {
            return versionName(Output.of(versionName));
        }

        public ListingManifestFromStageArgs build() {
            if ($.stage == null) {
                throw new MissingRequiredPropertyException("ListingManifestFromStageArgs", "stage");
            }
            return $;
        }
    }

}
