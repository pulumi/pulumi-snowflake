// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ListingManifestFromStage {
    /**
     * @return Location of the manifest file in the stage. If not specified, the manifest file will be expected to be at the root of the stage.
     * 
     */
    private @Nullable String location;
    /**
     * @return Identifier of the stage where the manifest file is located.
     * 
     */
    private String stage;
    /**
     * @return Specifies a comment for the listing version. Whenever a new version is created, this comment will be associated with it. The comment on the version will be visible in the [SHOW VERSIONS IN LISTING](https://docs.snowflake.com/en/sql-reference/sql/show-versions-in-listing) command output.
     * 
     */
    private @Nullable String versionComment;
    /**
     * @return Represents manifest version name. It&#39;s case-sensitive and used in manifest versioning. Version name should be specified or changed whenever any changes in the manifest should be applied to the listing. Later on the versions of the listing can be analyzed by calling the [SHOW VERSIONS IN LISTING](https://docs.snowflake.com/en/sql-reference/sql/show-versions-in-listing) command. The resource does not track the changes on the specified stage.
     * 
     */
    private @Nullable String versionName;

    private ListingManifestFromStage() {}
    /**
     * @return Location of the manifest file in the stage. If not specified, the manifest file will be expected to be at the root of the stage.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return Identifier of the stage where the manifest file is located.
     * 
     */
    public String stage() {
        return this.stage;
    }
    /**
     * @return Specifies a comment for the listing version. Whenever a new version is created, this comment will be associated with it. The comment on the version will be visible in the [SHOW VERSIONS IN LISTING](https://docs.snowflake.com/en/sql-reference/sql/show-versions-in-listing) command output.
     * 
     */
    public Optional<String> versionComment() {
        return Optional.ofNullable(this.versionComment);
    }
    /**
     * @return Represents manifest version name. It&#39;s case-sensitive and used in manifest versioning. Version name should be specified or changed whenever any changes in the manifest should be applied to the listing. Later on the versions of the listing can be analyzed by calling the [SHOW VERSIONS IN LISTING](https://docs.snowflake.com/en/sql-reference/sql/show-versions-in-listing) command. The resource does not track the changes on the specified stage.
     * 
     */
    public Optional<String> versionName() {
        return Optional.ofNullable(this.versionName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ListingManifestFromStage defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String location;
        private String stage;
        private @Nullable String versionComment;
        private @Nullable String versionName;
        public Builder() {}
        public Builder(ListingManifestFromStage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.location = defaults.location;
    	      this.stage = defaults.stage;
    	      this.versionComment = defaults.versionComment;
    	      this.versionName = defaults.versionName;
        }

        @CustomType.Setter
        public Builder location(@Nullable String location) {

            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder stage(String stage) {
            if (stage == null) {
              throw new MissingRequiredPropertyException("ListingManifestFromStage", "stage");
            }
            this.stage = stage;
            return this;
        }
        @CustomType.Setter
        public Builder versionComment(@Nullable String versionComment) {

            this.versionComment = versionComment;
            return this;
        }
        @CustomType.Setter
        public Builder versionName(@Nullable String versionName) {

            this.versionName = versionName;
            return this;
        }
        public ListingManifestFromStage build() {
            final var _resultValue = new ListingManifestFromStage();
            _resultValue.location = location;
            _resultValue.stage = stage;
            _resultValue.versionComment = versionComment;
            _resultValue.versionName = versionName;
            return _resultValue;
        }
    }
}
