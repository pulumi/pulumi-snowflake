// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.snowflake.inputs.ScimIntegrationDescribeOutputArgs;
import com.pulumi.snowflake.inputs.ScimIntegrationShowOutputArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScimIntegrationState extends com.pulumi.resources.ResourceArgs {

    public static final ScimIntegrationState Empty = new ScimIntegrationState();

    /**
     * Specifies a comment for the integration.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Specifies a comment for the integration.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.
     * 
     */
    @Import(name="describeOutputs")
    private @Nullable Output<List<ScimIntegrationDescribeOutputArgs>> describeOutputs;

    /**
     * @return Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.
     * 
     */
    public Optional<Output<List<ScimIntegrationDescribeOutputArgs>>> describeOutputs() {
        return Optional.ofNullable(this.describeOutputs);
    }

    /**
     * Specify whether the security integration is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Specify whether the security integration is enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * String that specifies the identifier (i.e. name) for the integration; must be unique in your account.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return String that specifies the identifier (i.e. name) for the integration; must be unique in your account.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies an existing network policy that controls SCIM network traffic.
     * 
     */
    @Import(name="networkPolicy")
    private @Nullable Output<String> networkPolicy;

    /**
     * @return Specifies an existing network policy that controls SCIM network traffic.
     * 
     */
    public Optional<Output<String>> networkPolicy() {
        return Optional.ofNullable(this.networkPolicy);
    }

    /**
     * Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into Snowflake using SCIM. Provider assumes that the specified role is already provided. Valid options are: [OKTA*PROVISIONER AAD*PROVISIONER GENERIC*SCIM*PROVISIONER].
     * 
     */
    @Import(name="runAsRole")
    private @Nullable Output<String> runAsRole;

    /**
     * @return Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into Snowflake using SCIM. Provider assumes that the specified role is already provided. Valid options are: [OKTA*PROVISIONER AAD*PROVISIONER GENERIC*SCIM*PROVISIONER].
     * 
     */
    public Optional<Output<String>> runAsRole() {
        return Optional.ofNullable(this.runAsRole);
    }

    /**
     * Specifies the client type for the scim integration. Valid options are: [OKTA AZURE GENERIC].
     * 
     */
    @Import(name="scimClient")
    private @Nullable Output<String> scimClient;

    /**
     * @return Specifies the client type for the scim integration. Valid options are: [OKTA AZURE GENERIC].
     * 
     */
    public Optional<Output<String>> scimClient() {
        return Optional.ofNullable(this.scimClient);
    }

    /**
     * Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.
     * 
     */
    @Import(name="showOutputs")
    private @Nullable Output<List<ScimIntegrationShowOutputArgs>> showOutputs;

    /**
     * @return Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.
     * 
     */
    public Optional<Output<List<ScimIntegrationShowOutputArgs>>> showOutputs() {
        return Optional.ofNullable(this.showOutputs);
    }

    /**
     * Specifies whether to enable or disable the synchronization of a user password from an Okta SCIM client as part of the API request to Snowflake. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
     * 
     */
    @Import(name="syncPassword")
    private @Nullable Output<String> syncPassword;

    /**
     * @return Specifies whether to enable or disable the synchronization of a user password from an Okta SCIM client as part of the API request to Snowflake. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
     * 
     */
    public Optional<Output<String>> syncPassword() {
        return Optional.ofNullable(this.syncPassword);
    }

    private ScimIntegrationState() {}

    private ScimIntegrationState(ScimIntegrationState $) {
        this.comment = $.comment;
        this.describeOutputs = $.describeOutputs;
        this.enabled = $.enabled;
        this.name = $.name;
        this.networkPolicy = $.networkPolicy;
        this.runAsRole = $.runAsRole;
        this.scimClient = $.scimClient;
        this.showOutputs = $.showOutputs;
        this.syncPassword = $.syncPassword;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScimIntegrationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScimIntegrationState $;

        public Builder() {
            $ = new ScimIntegrationState();
        }

        public Builder(ScimIntegrationState defaults) {
            $ = new ScimIntegrationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment Specifies a comment for the integration.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Specifies a comment for the integration.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param describeOutputs Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.
         * 
         * @return builder
         * 
         */
        public Builder describeOutputs(@Nullable Output<List<ScimIntegrationDescribeOutputArgs>> describeOutputs) {
            $.describeOutputs = describeOutputs;
            return this;
        }

        /**
         * @param describeOutputs Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.
         * 
         * @return builder
         * 
         */
        public Builder describeOutputs(List<ScimIntegrationDescribeOutputArgs> describeOutputs) {
            return describeOutputs(Output.of(describeOutputs));
        }

        /**
         * @param describeOutputs Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.
         * 
         * @return builder
         * 
         */
        public Builder describeOutputs(ScimIntegrationDescribeOutputArgs... describeOutputs) {
            return describeOutputs(List.of(describeOutputs));
        }

        /**
         * @param enabled Specify whether the security integration is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Specify whether the security integration is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param name String that specifies the identifier (i.e. name) for the integration; must be unique in your account.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name String that specifies the identifier (i.e. name) for the integration; must be unique in your account.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkPolicy Specifies an existing network policy that controls SCIM network traffic.
         * 
         * @return builder
         * 
         */
        public Builder networkPolicy(@Nullable Output<String> networkPolicy) {
            $.networkPolicy = networkPolicy;
            return this;
        }

        /**
         * @param networkPolicy Specifies an existing network policy that controls SCIM network traffic.
         * 
         * @return builder
         * 
         */
        public Builder networkPolicy(String networkPolicy) {
            return networkPolicy(Output.of(networkPolicy));
        }

        /**
         * @param runAsRole Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into Snowflake using SCIM. Provider assumes that the specified role is already provided. Valid options are: [OKTA*PROVISIONER AAD*PROVISIONER GENERIC*SCIM*PROVISIONER].
         * 
         * @return builder
         * 
         */
        public Builder runAsRole(@Nullable Output<String> runAsRole) {
            $.runAsRole = runAsRole;
            return this;
        }

        /**
         * @param runAsRole Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into Snowflake using SCIM. Provider assumes that the specified role is already provided. Valid options are: [OKTA*PROVISIONER AAD*PROVISIONER GENERIC*SCIM*PROVISIONER].
         * 
         * @return builder
         * 
         */
        public Builder runAsRole(String runAsRole) {
            return runAsRole(Output.of(runAsRole));
        }

        /**
         * @param scimClient Specifies the client type for the scim integration. Valid options are: [OKTA AZURE GENERIC].
         * 
         * @return builder
         * 
         */
        public Builder scimClient(@Nullable Output<String> scimClient) {
            $.scimClient = scimClient;
            return this;
        }

        /**
         * @param scimClient Specifies the client type for the scim integration. Valid options are: [OKTA AZURE GENERIC].
         * 
         * @return builder
         * 
         */
        public Builder scimClient(String scimClient) {
            return scimClient(Output.of(scimClient));
        }

        /**
         * @param showOutputs Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(@Nullable Output<List<ScimIntegrationShowOutputArgs>> showOutputs) {
            $.showOutputs = showOutputs;
            return this;
        }

        /**
         * @param showOutputs Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(List<ScimIntegrationShowOutputArgs> showOutputs) {
            return showOutputs(Output.of(showOutputs));
        }

        /**
         * @param showOutputs Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(ScimIntegrationShowOutputArgs... showOutputs) {
            return showOutputs(List.of(showOutputs));
        }

        /**
         * @param syncPassword Specifies whether to enable or disable the synchronization of a user password from an Okta SCIM client as part of the API request to Snowflake. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
         * 
         * @return builder
         * 
         */
        public Builder syncPassword(@Nullable Output<String> syncPassword) {
            $.syncPassword = syncPassword;
            return this;
        }

        /**
         * @param syncPassword Specifies whether to enable or disable the synchronization of a user password from an Okta SCIM client as part of the API request to Snowflake. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
         * 
         * @return builder
         * 
         */
        public Builder syncPassword(String syncPassword) {
            return syncPassword(Output.of(syncPassword));
        }

        public ScimIntegrationState build() {
            return $;
        }
    }

}
