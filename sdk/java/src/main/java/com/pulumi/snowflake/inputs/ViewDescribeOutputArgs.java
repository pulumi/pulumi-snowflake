// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ViewDescribeOutputArgs extends com.pulumi.resources.ResourceArgs {

    public static final ViewDescribeOutputArgs Empty = new ViewDescribeOutputArgs();

    @Import(name="check")
    private @Nullable Output<String> check;

    public Optional<Output<String>> check() {
        return Optional.ofNullable(this.check);
    }

    @Import(name="comment")
    private @Nullable Output<String> comment;

    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="default")
    private @Nullable Output<String> default_;

    public Optional<Output<String>> default_() {
        return Optional.ofNullable(this.default_);
    }

    @Import(name="expression")
    private @Nullable Output<String> expression;

    public Optional<Output<String>> expression() {
        return Optional.ofNullable(this.expression);
    }

    @Import(name="isNullable")
    private @Nullable Output<Boolean> isNullable;

    public Optional<Output<Boolean>> isNullable() {
        return Optional.ofNullable(this.isNullable);
    }

    @Import(name="isPrimary")
    private @Nullable Output<Boolean> isPrimary;

    public Optional<Output<Boolean>> isPrimary() {
        return Optional.ofNullable(this.isPrimary);
    }

    @Import(name="isUnique")
    private @Nullable Output<Boolean> isUnique;

    public Optional<Output<Boolean>> isUnique() {
        return Optional.ofNullable(this.isUnique);
    }

    @Import(name="kind")
    private @Nullable Output<String> kind;

    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="policyName")
    private @Nullable Output<String> policyName;

    public Optional<Output<String>> policyName() {
        return Optional.ofNullable(this.policyName);
    }

    @Import(name="privacyDomain")
    private @Nullable Output<String> privacyDomain;

    public Optional<Output<String>> privacyDomain() {
        return Optional.ofNullable(this.privacyDomain);
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private ViewDescribeOutputArgs() {}

    private ViewDescribeOutputArgs(ViewDescribeOutputArgs $) {
        this.check = $.check;
        this.comment = $.comment;
        this.default_ = $.default_;
        this.expression = $.expression;
        this.isNullable = $.isNullable;
        this.isPrimary = $.isPrimary;
        this.isUnique = $.isUnique;
        this.kind = $.kind;
        this.name = $.name;
        this.policyName = $.policyName;
        this.privacyDomain = $.privacyDomain;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ViewDescribeOutputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ViewDescribeOutputArgs $;

        public Builder() {
            $ = new ViewDescribeOutputArgs();
        }

        public Builder(ViewDescribeOutputArgs defaults) {
            $ = new ViewDescribeOutputArgs(Objects.requireNonNull(defaults));
        }

        public Builder check(@Nullable Output<String> check) {
            $.check = check;
            return this;
        }

        public Builder check(String check) {
            return check(Output.of(check));
        }

        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder default_(@Nullable Output<String> default_) {
            $.default_ = default_;
            return this;
        }

        public Builder default_(String default_) {
            return default_(Output.of(default_));
        }

        public Builder expression(@Nullable Output<String> expression) {
            $.expression = expression;
            return this;
        }

        public Builder expression(String expression) {
            return expression(Output.of(expression));
        }

        public Builder isNullable(@Nullable Output<Boolean> isNullable) {
            $.isNullable = isNullable;
            return this;
        }

        public Builder isNullable(Boolean isNullable) {
            return isNullable(Output.of(isNullable));
        }

        public Builder isPrimary(@Nullable Output<Boolean> isPrimary) {
            $.isPrimary = isPrimary;
            return this;
        }

        public Builder isPrimary(Boolean isPrimary) {
            return isPrimary(Output.of(isPrimary));
        }

        public Builder isUnique(@Nullable Output<Boolean> isUnique) {
            $.isUnique = isUnique;
            return this;
        }

        public Builder isUnique(Boolean isUnique) {
            return isUnique(Output.of(isUnique));
        }

        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder policyName(@Nullable Output<String> policyName) {
            $.policyName = policyName;
            return this;
        }

        public Builder policyName(String policyName) {
            return policyName(Output.of(policyName));
        }

        public Builder privacyDomain(@Nullable Output<String> privacyDomain) {
            $.privacyDomain = privacyDomain;
            return this;
        }

        public Builder privacyDomain(String privacyDomain) {
            return privacyDomain(Output.of(privacyDomain));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ViewDescribeOutputArgs build() {
            return $;
        }
    }

}
