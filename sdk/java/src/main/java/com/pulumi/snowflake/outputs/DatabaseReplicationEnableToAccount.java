// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatabaseReplicationEnableToAccount {
    /**
     * @return Specifies account identifier for which replication should be enabled. The account identifiers should be in the form of `&#34;&lt;organization_name&gt;&#34;.&#34;&lt;account_name&gt;&#34;`. For more information about this resource, see docs.
     * 
     */
    private String accountIdentifier;
    /**
     * @return Specifies if failover should be enabled for the specified account identifier
     * 
     */
    private @Nullable Boolean withFailover;

    private DatabaseReplicationEnableToAccount() {}
    /**
     * @return Specifies account identifier for which replication should be enabled. The account identifiers should be in the form of `&#34;&lt;organization_name&gt;&#34;.&#34;&lt;account_name&gt;&#34;`. For more information about this resource, see docs.
     * 
     */
    public String accountIdentifier() {
        return this.accountIdentifier;
    }
    /**
     * @return Specifies if failover should be enabled for the specified account identifier
     * 
     */
    public Optional<Boolean> withFailover() {
        return Optional.ofNullable(this.withFailover);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseReplicationEnableToAccount defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountIdentifier;
        private @Nullable Boolean withFailover;
        public Builder() {}
        public Builder(DatabaseReplicationEnableToAccount defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountIdentifier = defaults.accountIdentifier;
    	      this.withFailover = defaults.withFailover;
        }

        @CustomType.Setter
        public Builder accountIdentifier(String accountIdentifier) {
            if (accountIdentifier == null) {
              throw new MissingRequiredPropertyException("DatabaseReplicationEnableToAccount", "accountIdentifier");
            }
            this.accountIdentifier = accountIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder withFailover(@Nullable Boolean withFailover) {

            this.withFailover = withFailover;
            return this;
        }
        public DatabaseReplicationEnableToAccount build() {
            final var _resultValue = new DatabaseReplicationEnableToAccount();
            _resultValue.accountIdentifier = accountIdentifier;
            _resultValue.withFailover = withFailover;
            return _resultValue;
        }
    }
}
