// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthenticationPolicyMfaPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthenticationPolicyMfaPolicyArgs Empty = new AuthenticationPolicyMfaPolicyArgs();

    @Import(name="allowedMethods")
    private @Nullable Output<List<String>> allowedMethods;

    public Optional<Output<List<String>>> allowedMethods() {
        return Optional.ofNullable(this.allowedMethods);
    }

    /**
     * Determines whether multi-factor authentication (MFA) is enforced on external authentication. Valid values are (case-insensitive): `ALL` | `NONE`.
     * 
     */
    @Import(name="enforceMfaOnExternalAuthentication")
    private @Nullable Output<String> enforceMfaOnExternalAuthentication;

    /**
     * @return Determines whether multi-factor authentication (MFA) is enforced on external authentication. Valid values are (case-insensitive): `ALL` | `NONE`.
     * 
     */
    public Optional<Output<String>> enforceMfaOnExternalAuthentication() {
        return Optional.ofNullable(this.enforceMfaOnExternalAuthentication);
    }

    private AuthenticationPolicyMfaPolicyArgs() {}

    private AuthenticationPolicyMfaPolicyArgs(AuthenticationPolicyMfaPolicyArgs $) {
        this.allowedMethods = $.allowedMethods;
        this.enforceMfaOnExternalAuthentication = $.enforceMfaOnExternalAuthentication;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthenticationPolicyMfaPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthenticationPolicyMfaPolicyArgs $;

        public Builder() {
            $ = new AuthenticationPolicyMfaPolicyArgs();
        }

        public Builder(AuthenticationPolicyMfaPolicyArgs defaults) {
            $ = new AuthenticationPolicyMfaPolicyArgs(Objects.requireNonNull(defaults));
        }

        public Builder allowedMethods(@Nullable Output<List<String>> allowedMethods) {
            $.allowedMethods = allowedMethods;
            return this;
        }

        public Builder allowedMethods(List<String> allowedMethods) {
            return allowedMethods(Output.of(allowedMethods));
        }

        public Builder allowedMethods(String... allowedMethods) {
            return allowedMethods(List.of(allowedMethods));
        }

        /**
         * @param enforceMfaOnExternalAuthentication Determines whether multi-factor authentication (MFA) is enforced on external authentication. Valid values are (case-insensitive): `ALL` | `NONE`.
         * 
         * @return builder
         * 
         */
        public Builder enforceMfaOnExternalAuthentication(@Nullable Output<String> enforceMfaOnExternalAuthentication) {
            $.enforceMfaOnExternalAuthentication = enforceMfaOnExternalAuthentication;
            return this;
        }

        /**
         * @param enforceMfaOnExternalAuthentication Determines whether multi-factor authentication (MFA) is enforced on external authentication. Valid values are (case-insensitive): `ALL` | `NONE`.
         * 
         * @return builder
         * 
         */
        public Builder enforceMfaOnExternalAuthentication(String enforceMfaOnExternalAuthentication) {
            return enforceMfaOnExternalAuthentication(Output.of(enforceMfaOnExternalAuthentication));
        }

        public AuthenticationPolicyMfaPolicyArgs build() {
            return $;
        }
    }

}
