// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.snowflake.inputs.TagShowOutputArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TagState extends com.pulumi.resources.ResourceArgs {

    public static final TagState Empty = new TagState();

    /**
     * Set of allowed values for the tag.
     * 
     */
    @Import(name="allowedValues")
    private @Nullable Output<List<String>> allowedValues;

    /**
     * @return Set of allowed values for the tag.
     * 
     */
    public Optional<Output<List<String>>> allowedValues() {
        return Optional.ofNullable(this.allowedValues);
    }

    /**
     * Specifies a comment for the tag.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Specifies a comment for the tag.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * The database in which to create the tag. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="database")
    private @Nullable Output<String> database;

    /**
     * @return The database in which to create the tag. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> database() {
        return Optional.ofNullable(this.database);
    }

    /**
     * Fully qualified name of the resource. For more information, see [object name
     * resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    @Import(name="fullyQualifiedName")
    private @Nullable Output<String> fullyQualifiedName;

    /**
     * @return Fully qualified name of the resource. For more information, see [object name
     * resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    public Optional<Output<String>> fullyQualifiedName() {
        return Optional.ofNullable(this.fullyQualifiedName);
    }

    /**
     * Set of masking policies for the tag. A tag can support one masking policy for each data type. If masking policies are
     * assigned to the tag, before dropping the tag, the provider automatically unassigns them. For more information about this
     * resource, see docs.
     * 
     */
    @Import(name="maskingPolicies")
    private @Nullable Output<List<String>> maskingPolicies;

    /**
     * @return Set of masking policies for the tag. A tag can support one masking policy for each data type. If masking policies are
     * assigned to the tag, before dropping the tag, the provider automatically unassigns them. For more information about this
     * resource, see docs.
     * 
     */
    public Optional<Output<List<String>>> maskingPolicies() {
        return Optional.ofNullable(this.maskingPolicies);
    }

    /**
     * Specifies the identifier for the tag; must be unique for the database in which the tag is created. Due to technical
     * limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the identifier for the tag; must be unique for the database in which the tag is created. Due to technical
     * limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The schema in which to create the tag. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="schema")
    private @Nullable Output<String> schema;

    /**
     * @return The schema in which to create the tag. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> schema() {
        return Optional.ofNullable(this.schema);
    }

    /**
     * Outputs the result of `SHOW TAGS` for the given tag.
     * 
     */
    @Import(name="showOutputs")
    private @Nullable Output<List<TagShowOutputArgs>> showOutputs;

    /**
     * @return Outputs the result of `SHOW TAGS` for the given tag.
     * 
     */
    public Optional<Output<List<TagShowOutputArgs>>> showOutputs() {
        return Optional.ofNullable(this.showOutputs);
    }

    private TagState() {}

    private TagState(TagState $) {
        this.allowedValues = $.allowedValues;
        this.comment = $.comment;
        this.database = $.database;
        this.fullyQualifiedName = $.fullyQualifiedName;
        this.maskingPolicies = $.maskingPolicies;
        this.name = $.name;
        this.schema = $.schema;
        this.showOutputs = $.showOutputs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TagState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TagState $;

        public Builder() {
            $ = new TagState();
        }

        public Builder(TagState defaults) {
            $ = new TagState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedValues Set of allowed values for the tag.
         * 
         * @return builder
         * 
         */
        public Builder allowedValues(@Nullable Output<List<String>> allowedValues) {
            $.allowedValues = allowedValues;
            return this;
        }

        /**
         * @param allowedValues Set of allowed values for the tag.
         * 
         * @return builder
         * 
         */
        public Builder allowedValues(List<String> allowedValues) {
            return allowedValues(Output.of(allowedValues));
        }

        /**
         * @param allowedValues Set of allowed values for the tag.
         * 
         * @return builder
         * 
         */
        public Builder allowedValues(String... allowedValues) {
            return allowedValues(List.of(allowedValues));
        }

        /**
         * @param comment Specifies a comment for the tag.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Specifies a comment for the tag.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param database The database in which to create the tag. Due to technical limitations (read more here), avoid using the following
         * characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(@Nullable Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The database in which to create the tag. Due to technical limitations (read more here), avoid using the following
         * characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param fullyQualifiedName Fully qualified name of the resource. For more information, see [object name
         * resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
         * 
         * @return builder
         * 
         */
        public Builder fullyQualifiedName(@Nullable Output<String> fullyQualifiedName) {
            $.fullyQualifiedName = fullyQualifiedName;
            return this;
        }

        /**
         * @param fullyQualifiedName Fully qualified name of the resource. For more information, see [object name
         * resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
         * 
         * @return builder
         * 
         */
        public Builder fullyQualifiedName(String fullyQualifiedName) {
            return fullyQualifiedName(Output.of(fullyQualifiedName));
        }

        /**
         * @param maskingPolicies Set of masking policies for the tag. A tag can support one masking policy for each data type. If masking policies are
         * assigned to the tag, before dropping the tag, the provider automatically unassigns them. For more information about this
         * resource, see docs.
         * 
         * @return builder
         * 
         */
        public Builder maskingPolicies(@Nullable Output<List<String>> maskingPolicies) {
            $.maskingPolicies = maskingPolicies;
            return this;
        }

        /**
         * @param maskingPolicies Set of masking policies for the tag. A tag can support one masking policy for each data type. If masking policies are
         * assigned to the tag, before dropping the tag, the provider automatically unassigns them. For more information about this
         * resource, see docs.
         * 
         * @return builder
         * 
         */
        public Builder maskingPolicies(List<String> maskingPolicies) {
            return maskingPolicies(Output.of(maskingPolicies));
        }

        /**
         * @param maskingPolicies Set of masking policies for the tag. A tag can support one masking policy for each data type. If masking policies are
         * assigned to the tag, before dropping the tag, the provider automatically unassigns them. For more information about this
         * resource, see docs.
         * 
         * @return builder
         * 
         */
        public Builder maskingPolicies(String... maskingPolicies) {
            return maskingPolicies(List.of(maskingPolicies));
        }

        /**
         * @param name Specifies the identifier for the tag; must be unique for the database in which the tag is created. Due to technical
         * limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the identifier for the tag; must be unique for the database in which the tag is created. Due to technical
         * limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param schema The schema in which to create the tag. Due to technical limitations (read more here), avoid using the following
         * characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder schema(@Nullable Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The schema in which to create the tag. Due to technical limitations (read more here), avoid using the following
         * characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param showOutputs Outputs the result of `SHOW TAGS` for the given tag.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(@Nullable Output<List<TagShowOutputArgs>> showOutputs) {
            $.showOutputs = showOutputs;
            return this;
        }

        /**
         * @param showOutputs Outputs the result of `SHOW TAGS` for the given tag.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(List<TagShowOutputArgs> showOutputs) {
            return showOutputs(Output.of(showOutputs));
        }

        /**
         * @param showOutputs Outputs the result of `SHOW TAGS` for the given tag.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(TagShowOutputArgs... showOutputs) {
            return showOutputs(List.of(showOutputs));
        }

        public TagState build() {
            return $;
        }
    }

}
