// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class ExternalTableColumnArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExternalTableColumnArgs Empty = new ExternalTableColumnArgs();

    /**
     * String that specifies the expression for the column. When queried, the column returns results derived from this expression.
     * 
     */
    @Import(name="as", required=true)
    private Output<String> as;

    /**
     * @return String that specifies the expression for the column. When queried, the column returns results derived from this expression.
     * 
     */
    public Output<String> as() {
        return this.as;
    }

    /**
     * Column name
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Column name
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Column type, e.g. VARIANT
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Column type, e.g. VARIANT
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private ExternalTableColumnArgs() {}

    private ExternalTableColumnArgs(ExternalTableColumnArgs $) {
        this.as = $.as;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExternalTableColumnArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExternalTableColumnArgs $;

        public Builder() {
            $ = new ExternalTableColumnArgs();
        }

        public Builder(ExternalTableColumnArgs defaults) {
            $ = new ExternalTableColumnArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param as String that specifies the expression for the column. When queried, the column returns results derived from this expression.
         * 
         * @return builder
         * 
         */
        public Builder as(Output<String> as) {
            $.as = as;
            return this;
        }

        /**
         * @param as String that specifies the expression for the column. When queried, the column returns results derived from this expression.
         * 
         * @return builder
         * 
         */
        public Builder as(String as) {
            return as(Output.of(as));
        }

        /**
         * @param name Column name
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Column name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type Column type, e.g. VARIANT
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Column type, e.g. VARIANT
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ExternalTableColumnArgs build() {
            $.as = Objects.requireNonNull($.as, "expected parameter 'as' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
