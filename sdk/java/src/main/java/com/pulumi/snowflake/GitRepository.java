// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.snowflake.GitRepositoryArgs;
import com.pulumi.snowflake.Utilities;
import com.pulumi.snowflake.inputs.GitRepositoryState;
import com.pulumi.snowflake.outputs.GitRepositoryDescribeOutput;
import com.pulumi.snowflake.outputs.GitRepositoryShowOutput;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * ```sh
 * $ pulumi import snowflake:index/gitRepository:GitRepository example &#39;&#34;&lt;db_name&gt;&#34;.&#34;&lt;schema_name&gt;&#34;.&#34;&lt;git_repository_name&gt;&#34;&#39;
 * ```
 * 
 */
@ResourceType(type="snowflake:index/gitRepository:GitRepository")
public class GitRepository extends com.pulumi.resources.CustomResource {
    /**
     * Identifier of API INTEGRATION containing information about the remote Git repository such as allowed credentials and prefixes for target URLs.
     * 
     */
    @Export(name="apiIntegration", refs={String.class}, tree="[0]")
    private Output<String> apiIntegration;

    /**
     * @return Identifier of API INTEGRATION containing information about the remote Git repository such as allowed credentials and prefixes for target URLs.
     * 
     */
    public Output<String> apiIntegration() {
        return this.apiIntegration;
    }
    /**
     * Specifies a comment for the git repository.
     * 
     */
    @Export(name="comment", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> comment;

    /**
     * @return Specifies a comment for the git repository.
     * 
     */
    public Output<Optional<String>> comment() {
        return Codegen.optional(this.comment);
    }
    /**
     * The database in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Export(name="database", refs={String.class}, tree="[0]")
    private Output<String> database;

    /**
     * @return The database in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> database() {
        return this.database;
    }
    /**
     * Outputs the result of `DESCRIBE GIT REPOSITORY` for the given git repository.
     * 
     */
    @Export(name="describeOutputs", refs={List.class,GitRepositoryDescribeOutput.class}, tree="[0,1]")
    private Output<List<GitRepositoryDescribeOutput>> describeOutputs;

    /**
     * @return Outputs the result of `DESCRIBE GIT REPOSITORY` for the given git repository.
     * 
     */
    public Output<List<GitRepositoryDescribeOutput>> describeOutputs() {
        return this.describeOutputs;
    }
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    @Export(name="fullyQualifiedName", refs={String.class}, tree="[0]")
    private Output<String> fullyQualifiedName;

    /**
     * @return Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    public Output<String> fullyQualifiedName() {
        return this.fullyQualifiedName;
    }
    /**
     * Specifies the Snowflake secret fully qualified name (e.g `&#34;\&#34;&lt;db_name&gt;\&#34;.\&#34;&lt;schema_name&gt;\&#34;.\&#34;&lt;secret_name&gt;\&#34;&#34;`) containing the credentials to use for authenticating with the remote Git repository. Omit this parameter to use the default secret specified by the API integration or if this integration does not require authentication.
     * 
     */
    @Export(name="gitCredentials", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> gitCredentials;

    /**
     * @return Specifies the Snowflake secret fully qualified name (e.g `&#34;\&#34;&lt;db_name&gt;\&#34;.\&#34;&lt;schema_name&gt;\&#34;.\&#34;&lt;secret_name&gt;\&#34;&#34;`) containing the credentials to use for authenticating with the remote Git repository. Omit this parameter to use the default secret specified by the API integration or if this integration does not require authentication.
     * 
     */
    public Output<Optional<String>> gitCredentials() {
        return Codegen.optional(this.gitCredentials);
    }
    /**
     * Specifies the identifier for the git repository; must be unique for the schema in which the git repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Specifies the identifier for the git repository; must be unique for the schema in which the git repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Specifies the origin URL of the remote Git repository that this Git repository clone represents. The URL must use HTTPS.
     * 
     */
    @Export(name="origin", refs={String.class}, tree="[0]")
    private Output<String> origin;

    /**
     * @return Specifies the origin URL of the remote Git repository that this Git repository clone represents. The URL must use HTTPS.
     * 
     */
    public Output<String> origin() {
        return this.origin;
    }
    /**
     * The schema in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Export(name="schema", refs={String.class}, tree="[0]")
    private Output<String> schema;

    /**
     * @return The schema in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }
    /**
     * Outputs the result of `SHOW GIT REPOSITORIES` for the given git repository.
     * 
     */
    @Export(name="showOutputs", refs={List.class,GitRepositoryShowOutput.class}, tree="[0,1]")
    private Output<List<GitRepositoryShowOutput>> showOutputs;

    /**
     * @return Outputs the result of `SHOW GIT REPOSITORIES` for the given git repository.
     * 
     */
    public Output<List<GitRepositoryShowOutput>> showOutputs() {
        return this.showOutputs;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GitRepository(java.lang.String name) {
        this(name, GitRepositoryArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GitRepository(java.lang.String name, GitRepositoryArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GitRepository(java.lang.String name, GitRepositoryArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("snowflake:index/gitRepository:GitRepository", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private GitRepository(java.lang.String name, Output<java.lang.String> id, @Nullable GitRepositoryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("snowflake:index/gitRepository:GitRepository", name, state, makeResourceOptions(options, id), false);
    }

    private static GitRepositoryArgs makeArgs(GitRepositoryArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? GitRepositoryArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GitRepository get(java.lang.String name, Output<java.lang.String> id, @Nullable GitRepositoryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GitRepository(name, id, state, options);
    }
}
