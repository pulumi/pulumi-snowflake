// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecondaryConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecondaryConnectionArgs Empty = new SecondaryConnectionArgs();

    /**
     * Specifies the identifier for a primary connection from which to create a replica (i.e. a secondary connection). For more information about this resource, see docs.
     * 
     */
    @Import(name="asReplicaOf", required=true)
    private Output<String> asReplicaOf;

    /**
     * @return Specifies the identifier for a primary connection from which to create a replica (i.e. a secondary connection). For more information about this resource, see docs.
     * 
     */
    public Output<String> asReplicaOf() {
        return this.asReplicaOf;
    }

    /**
     * Specifies a comment for the secondary connection.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Specifies a comment for the secondary connection.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * String that specifies the identifier (i.e. name) for the connection. Must start with an alphabetic character and may only contain letters, decimal digits (0-9), and underscores (_). For a secondary connection, the name must match the name of its primary connection. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return String that specifies the identifier (i.e. name) for the connection. Must start with an alphabetic character and may only contain letters, decimal digits (0-9), and underscores (_). For a secondary connection, the name must match the name of its primary connection. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private SecondaryConnectionArgs() {}

    private SecondaryConnectionArgs(SecondaryConnectionArgs $) {
        this.asReplicaOf = $.asReplicaOf;
        this.comment = $.comment;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecondaryConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecondaryConnectionArgs $;

        public Builder() {
            $ = new SecondaryConnectionArgs();
        }

        public Builder(SecondaryConnectionArgs defaults) {
            $ = new SecondaryConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param asReplicaOf Specifies the identifier for a primary connection from which to create a replica (i.e. a secondary connection). For more information about this resource, see docs.
         * 
         * @return builder
         * 
         */
        public Builder asReplicaOf(Output<String> asReplicaOf) {
            $.asReplicaOf = asReplicaOf;
            return this;
        }

        /**
         * @param asReplicaOf Specifies the identifier for a primary connection from which to create a replica (i.e. a secondary connection). For more information about this resource, see docs.
         * 
         * @return builder
         * 
         */
        public Builder asReplicaOf(String asReplicaOf) {
            return asReplicaOf(Output.of(asReplicaOf));
        }

        /**
         * @param comment Specifies a comment for the secondary connection.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Specifies a comment for the secondary connection.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param name String that specifies the identifier (i.e. name) for the connection. Must start with an alphabetic character and may only contain letters, decimal digits (0-9), and underscores (_). For a secondary connection, the name must match the name of its primary connection. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name String that specifies the identifier (i.e. name) for the connection. Must start with an alphabetic character and may only contain letters, decimal digits (0-9), and underscores (_). For a secondary connection, the name must match the name of its primary connection. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public SecondaryConnectionArgs build() {
            if ($.asReplicaOf == null) {
                throw new MissingRequiredPropertyException("SecondaryConnectionArgs", "asReplicaOf");
            }
            return $;
        }
    }

}
