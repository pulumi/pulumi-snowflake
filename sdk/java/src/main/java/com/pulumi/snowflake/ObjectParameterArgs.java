// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.snowflake.inputs.ObjectParameterObjectIdentifierArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObjectParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObjectParameterArgs Empty = new ObjectParameterArgs();

    /**
     * Name of object parameter. Valid values are those in [object parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#object-parameters).
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return Name of object parameter. Valid values are those in [object parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#object-parameters).
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * Specifies the object identifier for the object parameter. If no value is provided, then the resource will default to setting the object parameter at account level.
     * 
     */
    @Import(name="objectIdentifiers")
    private @Nullable Output<List<ObjectParameterObjectIdentifierArgs>> objectIdentifiers;

    /**
     * @return Specifies the object identifier for the object parameter. If no value is provided, then the resource will default to setting the object parameter at account level.
     * 
     */
    public Optional<Output<List<ObjectParameterObjectIdentifierArgs>>> objectIdentifiers() {
        return Optional.ofNullable(this.objectIdentifiers);
    }

    /**
     * Type of object to which the parameter applies. Valid values are those in [object types](https://docs.snowflake.com/en/sql-reference/parameters.html#object-types). If no value is provided, then the resource will default to setting the object parameter at account level.
     * 
     */
    @Import(name="objectType")
    private @Nullable Output<String> objectType;

    /**
     * @return Type of object to which the parameter applies. Valid values are those in [object types](https://docs.snowflake.com/en/sql-reference/parameters.html#object-types). If no value is provided, then the resource will default to setting the object parameter at account level.
     * 
     */
    public Optional<Output<String>> objectType() {
        return Optional.ofNullable(this.objectType);
    }

    /**
     * If true, the object parameter will be set on the account level.
     * 
     */
    @Import(name="onAccount")
    private @Nullable Output<Boolean> onAccount;

    /**
     * @return If true, the object parameter will be set on the account level.
     * 
     */
    public Optional<Output<Boolean>> onAccount() {
        return Optional.ofNullable(this.onAccount);
    }

    /**
     * Value of object parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return Value of object parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private ObjectParameterArgs() {}

    private ObjectParameterArgs(ObjectParameterArgs $) {
        this.key = $.key;
        this.objectIdentifiers = $.objectIdentifiers;
        this.objectType = $.objectType;
        this.onAccount = $.onAccount;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObjectParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObjectParameterArgs $;

        public Builder() {
            $ = new ObjectParameterArgs();
        }

        public Builder(ObjectParameterArgs defaults) {
            $ = new ObjectParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param key Name of object parameter. Valid values are those in [object parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#object-parameters).
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Name of object parameter. Valid values are those in [object parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#object-parameters).
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param objectIdentifiers Specifies the object identifier for the object parameter. If no value is provided, then the resource will default to setting the object parameter at account level.
         * 
         * @return builder
         * 
         */
        public Builder objectIdentifiers(@Nullable Output<List<ObjectParameterObjectIdentifierArgs>> objectIdentifiers) {
            $.objectIdentifiers = objectIdentifiers;
            return this;
        }

        /**
         * @param objectIdentifiers Specifies the object identifier for the object parameter. If no value is provided, then the resource will default to setting the object parameter at account level.
         * 
         * @return builder
         * 
         */
        public Builder objectIdentifiers(List<ObjectParameterObjectIdentifierArgs> objectIdentifiers) {
            return objectIdentifiers(Output.of(objectIdentifiers));
        }

        /**
         * @param objectIdentifiers Specifies the object identifier for the object parameter. If no value is provided, then the resource will default to setting the object parameter at account level.
         * 
         * @return builder
         * 
         */
        public Builder objectIdentifiers(ObjectParameterObjectIdentifierArgs... objectIdentifiers) {
            return objectIdentifiers(List.of(objectIdentifiers));
        }

        /**
         * @param objectType Type of object to which the parameter applies. Valid values are those in [object types](https://docs.snowflake.com/en/sql-reference/parameters.html#object-types). If no value is provided, then the resource will default to setting the object parameter at account level.
         * 
         * @return builder
         * 
         */
        public Builder objectType(@Nullable Output<String> objectType) {
            $.objectType = objectType;
            return this;
        }

        /**
         * @param objectType Type of object to which the parameter applies. Valid values are those in [object types](https://docs.snowflake.com/en/sql-reference/parameters.html#object-types). If no value is provided, then the resource will default to setting the object parameter at account level.
         * 
         * @return builder
         * 
         */
        public Builder objectType(String objectType) {
            return objectType(Output.of(objectType));
        }

        /**
         * @param onAccount If true, the object parameter will be set on the account level.
         * 
         * @return builder
         * 
         */
        public Builder onAccount(@Nullable Output<Boolean> onAccount) {
            $.onAccount = onAccount;
            return this;
        }

        /**
         * @param onAccount If true, the object parameter will be set on the account level.
         * 
         * @return builder
         * 
         */
        public Builder onAccount(Boolean onAccount) {
            return onAccount(Output.of(onAccount));
        }

        /**
         * @param value Value of object parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Value of object parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public ObjectParameterArgs build() {
            if ($.key == null) {
                throw new MissingRequiredPropertyException("ObjectParameterArgs", "key");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("ObjectParameterArgs", "value");
            }
            return $;
        }
    }

}
