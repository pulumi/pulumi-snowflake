// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.snowflake.outputs.TaskShowOutputTaskRelation;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TaskShowOutput {
    private @Nullable Boolean allowOverlappingExecution;
    private @Nullable String budget;
    private @Nullable String comment;
    private @Nullable String condition;
    private @Nullable String config;
    private @Nullable String createdOn;
    private @Nullable String databaseName;
    private @Nullable String definition;
    private @Nullable String errorIntegration;
    private @Nullable String id;
    private @Nullable String lastCommittedOn;
    private @Nullable String lastSuspendedOn;
    private @Nullable String lastSuspendedReason;
    private @Nullable String name;
    private @Nullable String owner;
    private @Nullable String ownerRoleType;
    private @Nullable List<String> predecessors;
    private @Nullable String schedule;
    private @Nullable String schemaName;
    private @Nullable String state;
    private @Nullable List<TaskShowOutputTaskRelation> taskRelations;
    private @Nullable String warehouse;

    private TaskShowOutput() {}
    public Optional<Boolean> allowOverlappingExecution() {
        return Optional.ofNullable(this.allowOverlappingExecution);
    }
    public Optional<String> budget() {
        return Optional.ofNullable(this.budget);
    }
    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }
    public Optional<String> condition() {
        return Optional.ofNullable(this.condition);
    }
    public Optional<String> config() {
        return Optional.ofNullable(this.config);
    }
    public Optional<String> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }
    public Optional<String> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }
    public Optional<String> definition() {
        return Optional.ofNullable(this.definition);
    }
    public Optional<String> errorIntegration() {
        return Optional.ofNullable(this.errorIntegration);
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public Optional<String> lastCommittedOn() {
        return Optional.ofNullable(this.lastCommittedOn);
    }
    public Optional<String> lastSuspendedOn() {
        return Optional.ofNullable(this.lastSuspendedOn);
    }
    public Optional<String> lastSuspendedReason() {
        return Optional.ofNullable(this.lastSuspendedReason);
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<String> owner() {
        return Optional.ofNullable(this.owner);
    }
    public Optional<String> ownerRoleType() {
        return Optional.ofNullable(this.ownerRoleType);
    }
    public List<String> predecessors() {
        return this.predecessors == null ? List.of() : this.predecessors;
    }
    public Optional<String> schedule() {
        return Optional.ofNullable(this.schedule);
    }
    public Optional<String> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    public List<TaskShowOutputTaskRelation> taskRelations() {
        return this.taskRelations == null ? List.of() : this.taskRelations;
    }
    public Optional<String> warehouse() {
        return Optional.ofNullable(this.warehouse);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TaskShowOutput defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allowOverlappingExecution;
        private @Nullable String budget;
        private @Nullable String comment;
        private @Nullable String condition;
        private @Nullable String config;
        private @Nullable String createdOn;
        private @Nullable String databaseName;
        private @Nullable String definition;
        private @Nullable String errorIntegration;
        private @Nullable String id;
        private @Nullable String lastCommittedOn;
        private @Nullable String lastSuspendedOn;
        private @Nullable String lastSuspendedReason;
        private @Nullable String name;
        private @Nullable String owner;
        private @Nullable String ownerRoleType;
        private @Nullable List<String> predecessors;
        private @Nullable String schedule;
        private @Nullable String schemaName;
        private @Nullable String state;
        private @Nullable List<TaskShowOutputTaskRelation> taskRelations;
        private @Nullable String warehouse;
        public Builder() {}
        public Builder(TaskShowOutput defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowOverlappingExecution = defaults.allowOverlappingExecution;
    	      this.budget = defaults.budget;
    	      this.comment = defaults.comment;
    	      this.condition = defaults.condition;
    	      this.config = defaults.config;
    	      this.createdOn = defaults.createdOn;
    	      this.databaseName = defaults.databaseName;
    	      this.definition = defaults.definition;
    	      this.errorIntegration = defaults.errorIntegration;
    	      this.id = defaults.id;
    	      this.lastCommittedOn = defaults.lastCommittedOn;
    	      this.lastSuspendedOn = defaults.lastSuspendedOn;
    	      this.lastSuspendedReason = defaults.lastSuspendedReason;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.ownerRoleType = defaults.ownerRoleType;
    	      this.predecessors = defaults.predecessors;
    	      this.schedule = defaults.schedule;
    	      this.schemaName = defaults.schemaName;
    	      this.state = defaults.state;
    	      this.taskRelations = defaults.taskRelations;
    	      this.warehouse = defaults.warehouse;
        }

        @CustomType.Setter
        public Builder allowOverlappingExecution(@Nullable Boolean allowOverlappingExecution) {

            this.allowOverlappingExecution = allowOverlappingExecution;
            return this;
        }
        @CustomType.Setter
        public Builder budget(@Nullable String budget) {

            this.budget = budget;
            return this;
        }
        @CustomType.Setter
        public Builder comment(@Nullable String comment) {

            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder condition(@Nullable String condition) {

            this.condition = condition;
            return this;
        }
        @CustomType.Setter
        public Builder config(@Nullable String config) {

            this.config = config;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(@Nullable String createdOn) {

            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder databaseName(@Nullable String databaseName) {

            this.databaseName = databaseName;
            return this;
        }
        @CustomType.Setter
        public Builder definition(@Nullable String definition) {

            this.definition = definition;
            return this;
        }
        @CustomType.Setter
        public Builder errorIntegration(@Nullable String errorIntegration) {

            this.errorIntegration = errorIntegration;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastCommittedOn(@Nullable String lastCommittedOn) {

            this.lastCommittedOn = lastCommittedOn;
            return this;
        }
        @CustomType.Setter
        public Builder lastSuspendedOn(@Nullable String lastSuspendedOn) {

            this.lastSuspendedOn = lastSuspendedOn;
            return this;
        }
        @CustomType.Setter
        public Builder lastSuspendedReason(@Nullable String lastSuspendedReason) {

            this.lastSuspendedReason = lastSuspendedReason;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder owner(@Nullable String owner) {

            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder ownerRoleType(@Nullable String ownerRoleType) {

            this.ownerRoleType = ownerRoleType;
            return this;
        }
        @CustomType.Setter
        public Builder predecessors(@Nullable List<String> predecessors) {

            this.predecessors = predecessors;
            return this;
        }
        public Builder predecessors(String... predecessors) {
            return predecessors(List.of(predecessors));
        }
        @CustomType.Setter
        public Builder schedule(@Nullable String schedule) {

            this.schedule = schedule;
            return this;
        }
        @CustomType.Setter
        public Builder schemaName(@Nullable String schemaName) {

            this.schemaName = schemaName;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder taskRelations(@Nullable List<TaskShowOutputTaskRelation> taskRelations) {

            this.taskRelations = taskRelations;
            return this;
        }
        public Builder taskRelations(TaskShowOutputTaskRelation... taskRelations) {
            return taskRelations(List.of(taskRelations));
        }
        @CustomType.Setter
        public Builder warehouse(@Nullable String warehouse) {

            this.warehouse = warehouse;
            return this;
        }
        public TaskShowOutput build() {
            final var _resultValue = new TaskShowOutput();
            _resultValue.allowOverlappingExecution = allowOverlappingExecution;
            _resultValue.budget = budget;
            _resultValue.comment = comment;
            _resultValue.condition = condition;
            _resultValue.config = config;
            _resultValue.createdOn = createdOn;
            _resultValue.databaseName = databaseName;
            _resultValue.definition = definition;
            _resultValue.errorIntegration = errorIntegration;
            _resultValue.id = id;
            _resultValue.lastCommittedOn = lastCommittedOn;
            _resultValue.lastSuspendedOn = lastSuspendedOn;
            _resultValue.lastSuspendedReason = lastSuspendedReason;
            _resultValue.name = name;
            _resultValue.owner = owner;
            _resultValue.ownerRoleType = ownerRoleType;
            _resultValue.predecessors = predecessors;
            _resultValue.schedule = schedule;
            _resultValue.schemaName = schemaName;
            _resultValue.state = state;
            _resultValue.taskRelations = taskRelations;
            _resultValue.warehouse = warehouse;
            return _resultValue;
        }
    }
}
