// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.snowflake.inputs.ExternalFunctionArgArgs;
import com.pulumi.snowflake.inputs.ExternalFunctionHeaderArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExternalFunctionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExternalFunctionArgs Empty = new ExternalFunctionArgs();

    /**
     * The name of the API integration object that should be used to authenticate the call to the proxy service.
     * 
     */
    @Import(name="apiIntegration", required=true)
    private Output<String> apiIntegration;

    /**
     * @return The name of the API integration object that should be used to authenticate the call to the proxy service.
     * 
     */
    public Output<String> apiIntegration() {
        return this.apiIntegration;
    }

    /**
     * Specifies the arguments/inputs for the external function. These should correspond to the arguments that the remote service expects.
     * 
     */
    @Import(name="args")
    private @Nullable Output<List<ExternalFunctionArgArgs>> args;

    /**
     * @return Specifies the arguments/inputs for the external function. These should correspond to the arguments that the remote service expects.
     * 
     */
    public Optional<Output<List<ExternalFunctionArgArgs>>> args() {
        return Optional.ofNullable(this.args);
    }

    /**
     * A description of the external function.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return A description of the external function.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * If specified, the JSON payload is compressed when sent from Snowflake to the proxy service, and when sent back from the proxy service to Snowflake.
     * 
     */
    @Import(name="compression")
    private @Nullable Output<String> compression;

    /**
     * @return If specified, the JSON payload is compressed when sent from Snowflake to the proxy service, and when sent back from the proxy service to Snowflake.
     * 
     */
    public Optional<Output<String>> compression() {
        return Optional.ofNullable(this.compression);
    }

    /**
     * Binds Snowflake context function results to HTTP headers.
     * 
     */
    @Import(name="contextHeaders")
    private @Nullable Output<List<String>> contextHeaders;

    /**
     * @return Binds Snowflake context function results to HTTP headers.
     * 
     */
    public Optional<Output<List<String>>> contextHeaders() {
        return Optional.ofNullable(this.contextHeaders);
    }

    /**
     * The database in which to create the external function.
     * 
     */
    @Import(name="database", required=true)
    private Output<String> database;

    /**
     * @return The database in which to create the external function.
     * 
     */
    public Output<String> database() {
        return this.database;
    }

    /**
     * Allows users to specify key-value metadata that is sent with every request as HTTP headers.
     * 
     */
    @Import(name="headers")
    private @Nullable Output<List<ExternalFunctionHeaderArgs>> headers;

    /**
     * @return Allows users to specify key-value metadata that is sent with every request as HTTP headers.
     * 
     */
    public Optional<Output<List<ExternalFunctionHeaderArgs>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * This specifies the maximum number of rows in each batch sent to the proxy service.
     * 
     */
    @Import(name="maxBatchRows")
    private @Nullable Output<Integer> maxBatchRows;

    /**
     * @return This specifies the maximum number of rows in each batch sent to the proxy service.
     * 
     */
    public Optional<Output<Integer>> maxBatchRows() {
        return Optional.ofNullable(this.maxBatchRows);
    }

    /**
     * Specifies the identifier for the external function. The identifier can contain the schema name and database name, as well as the function name. The function&#39;s signature (name and argument data types) must be unique within the schema.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the identifier for the external function. The identifier can contain the schema name and database name, as well as the function name. The function&#39;s signature (name and argument data types) must be unique within the schema.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the behavior of the external function when called with null inputs.
     * 
     */
    @Import(name="nullInputBehavior")
    private @Nullable Output<String> nullInputBehavior;

    /**
     * @return Specifies the behavior of the external function when called with null inputs.
     * 
     */
    public Optional<Output<String>> nullInputBehavior() {
        return Optional.ofNullable(this.nullInputBehavior);
    }

    /**
     * Specifies the behavior of the function when returning results
     * 
     */
    @Import(name="returnBehavior", required=true)
    private Output<String> returnBehavior;

    /**
     * @return Specifies the behavior of the function when returning results
     * 
     */
    public Output<String> returnBehavior() {
        return this.returnBehavior;
    }

    /**
     * Indicates whether the function can return NULL values or must return only NON-NULL values.
     * 
     */
    @Import(name="returnNullAllowed")
    private @Nullable Output<Boolean> returnNullAllowed;

    /**
     * @return Indicates whether the function can return NULL values or must return only NON-NULL values.
     * 
     */
    public Optional<Output<Boolean>> returnNullAllowed() {
        return Optional.ofNullable(this.returnNullAllowed);
    }

    /**
     * Specifies the data type returned by the external function.
     * 
     */
    @Import(name="returnType", required=true)
    private Output<String> returnType;

    /**
     * @return Specifies the data type returned by the external function.
     * 
     */
    public Output<String> returnType() {
        return this.returnType;
    }

    /**
     * The schema in which to create the external function.
     * 
     */
    @Import(name="schema", required=true)
    private Output<String> schema;

    /**
     * @return The schema in which to create the external function.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }

    /**
     * This is the invocation URL of the proxy service and resource through which Snowflake calls the remote service.
     * 
     */
    @Import(name="urlOfProxyAndResource", required=true)
    private Output<String> urlOfProxyAndResource;

    /**
     * @return This is the invocation URL of the proxy service and resource through which Snowflake calls the remote service.
     * 
     */
    public Output<String> urlOfProxyAndResource() {
        return this.urlOfProxyAndResource;
    }

    private ExternalFunctionArgs() {}

    private ExternalFunctionArgs(ExternalFunctionArgs $) {
        this.apiIntegration = $.apiIntegration;
        this.args = $.args;
        this.comment = $.comment;
        this.compression = $.compression;
        this.contextHeaders = $.contextHeaders;
        this.database = $.database;
        this.headers = $.headers;
        this.maxBatchRows = $.maxBatchRows;
        this.name = $.name;
        this.nullInputBehavior = $.nullInputBehavior;
        this.returnBehavior = $.returnBehavior;
        this.returnNullAllowed = $.returnNullAllowed;
        this.returnType = $.returnType;
        this.schema = $.schema;
        this.urlOfProxyAndResource = $.urlOfProxyAndResource;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExternalFunctionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExternalFunctionArgs $;

        public Builder() {
            $ = new ExternalFunctionArgs();
        }

        public Builder(ExternalFunctionArgs defaults) {
            $ = new ExternalFunctionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiIntegration The name of the API integration object that should be used to authenticate the call to the proxy service.
         * 
         * @return builder
         * 
         */
        public Builder apiIntegration(Output<String> apiIntegration) {
            $.apiIntegration = apiIntegration;
            return this;
        }

        /**
         * @param apiIntegration The name of the API integration object that should be used to authenticate the call to the proxy service.
         * 
         * @return builder
         * 
         */
        public Builder apiIntegration(String apiIntegration) {
            return apiIntegration(Output.of(apiIntegration));
        }

        /**
         * @param args Specifies the arguments/inputs for the external function. These should correspond to the arguments that the remote service expects.
         * 
         * @return builder
         * 
         */
        public Builder args(@Nullable Output<List<ExternalFunctionArgArgs>> args) {
            $.args = args;
            return this;
        }

        /**
         * @param args Specifies the arguments/inputs for the external function. These should correspond to the arguments that the remote service expects.
         * 
         * @return builder
         * 
         */
        public Builder args(List<ExternalFunctionArgArgs> args) {
            return args(Output.of(args));
        }

        /**
         * @param args Specifies the arguments/inputs for the external function. These should correspond to the arguments that the remote service expects.
         * 
         * @return builder
         * 
         */
        public Builder args(ExternalFunctionArgArgs... args) {
            return args(List.of(args));
        }

        /**
         * @param comment A description of the external function.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment A description of the external function.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param compression If specified, the JSON payload is compressed when sent from Snowflake to the proxy service, and when sent back from the proxy service to Snowflake.
         * 
         * @return builder
         * 
         */
        public Builder compression(@Nullable Output<String> compression) {
            $.compression = compression;
            return this;
        }

        /**
         * @param compression If specified, the JSON payload is compressed when sent from Snowflake to the proxy service, and when sent back from the proxy service to Snowflake.
         * 
         * @return builder
         * 
         */
        public Builder compression(String compression) {
            return compression(Output.of(compression));
        }

        /**
         * @param contextHeaders Binds Snowflake context function results to HTTP headers.
         * 
         * @return builder
         * 
         */
        public Builder contextHeaders(@Nullable Output<List<String>> contextHeaders) {
            $.contextHeaders = contextHeaders;
            return this;
        }

        /**
         * @param contextHeaders Binds Snowflake context function results to HTTP headers.
         * 
         * @return builder
         * 
         */
        public Builder contextHeaders(List<String> contextHeaders) {
            return contextHeaders(Output.of(contextHeaders));
        }

        /**
         * @param contextHeaders Binds Snowflake context function results to HTTP headers.
         * 
         * @return builder
         * 
         */
        public Builder contextHeaders(String... contextHeaders) {
            return contextHeaders(List.of(contextHeaders));
        }

        /**
         * @param database The database in which to create the external function.
         * 
         * @return builder
         * 
         */
        public Builder database(Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The database in which to create the external function.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param headers Allows users to specify key-value metadata that is sent with every request as HTTP headers.
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<List<ExternalFunctionHeaderArgs>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers Allows users to specify key-value metadata that is sent with every request as HTTP headers.
         * 
         * @return builder
         * 
         */
        public Builder headers(List<ExternalFunctionHeaderArgs> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param headers Allows users to specify key-value metadata that is sent with every request as HTTP headers.
         * 
         * @return builder
         * 
         */
        public Builder headers(ExternalFunctionHeaderArgs... headers) {
            return headers(List.of(headers));
        }

        /**
         * @param maxBatchRows This specifies the maximum number of rows in each batch sent to the proxy service.
         * 
         * @return builder
         * 
         */
        public Builder maxBatchRows(@Nullable Output<Integer> maxBatchRows) {
            $.maxBatchRows = maxBatchRows;
            return this;
        }

        /**
         * @param maxBatchRows This specifies the maximum number of rows in each batch sent to the proxy service.
         * 
         * @return builder
         * 
         */
        public Builder maxBatchRows(Integer maxBatchRows) {
            return maxBatchRows(Output.of(maxBatchRows));
        }

        /**
         * @param name Specifies the identifier for the external function. The identifier can contain the schema name and database name, as well as the function name. The function&#39;s signature (name and argument data types) must be unique within the schema.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the identifier for the external function. The identifier can contain the schema name and database name, as well as the function name. The function&#39;s signature (name and argument data types) must be unique within the schema.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nullInputBehavior Specifies the behavior of the external function when called with null inputs.
         * 
         * @return builder
         * 
         */
        public Builder nullInputBehavior(@Nullable Output<String> nullInputBehavior) {
            $.nullInputBehavior = nullInputBehavior;
            return this;
        }

        /**
         * @param nullInputBehavior Specifies the behavior of the external function when called with null inputs.
         * 
         * @return builder
         * 
         */
        public Builder nullInputBehavior(String nullInputBehavior) {
            return nullInputBehavior(Output.of(nullInputBehavior));
        }

        /**
         * @param returnBehavior Specifies the behavior of the function when returning results
         * 
         * @return builder
         * 
         */
        public Builder returnBehavior(Output<String> returnBehavior) {
            $.returnBehavior = returnBehavior;
            return this;
        }

        /**
         * @param returnBehavior Specifies the behavior of the function when returning results
         * 
         * @return builder
         * 
         */
        public Builder returnBehavior(String returnBehavior) {
            return returnBehavior(Output.of(returnBehavior));
        }

        /**
         * @param returnNullAllowed Indicates whether the function can return NULL values or must return only NON-NULL values.
         * 
         * @return builder
         * 
         */
        public Builder returnNullAllowed(@Nullable Output<Boolean> returnNullAllowed) {
            $.returnNullAllowed = returnNullAllowed;
            return this;
        }

        /**
         * @param returnNullAllowed Indicates whether the function can return NULL values or must return only NON-NULL values.
         * 
         * @return builder
         * 
         */
        public Builder returnNullAllowed(Boolean returnNullAllowed) {
            return returnNullAllowed(Output.of(returnNullAllowed));
        }

        /**
         * @param returnType Specifies the data type returned by the external function.
         * 
         * @return builder
         * 
         */
        public Builder returnType(Output<String> returnType) {
            $.returnType = returnType;
            return this;
        }

        /**
         * @param returnType Specifies the data type returned by the external function.
         * 
         * @return builder
         * 
         */
        public Builder returnType(String returnType) {
            return returnType(Output.of(returnType));
        }

        /**
         * @param schema The schema in which to create the external function.
         * 
         * @return builder
         * 
         */
        public Builder schema(Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The schema in which to create the external function.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param urlOfProxyAndResource This is the invocation URL of the proxy service and resource through which Snowflake calls the remote service.
         * 
         * @return builder
         * 
         */
        public Builder urlOfProxyAndResource(Output<String> urlOfProxyAndResource) {
            $.urlOfProxyAndResource = urlOfProxyAndResource;
            return this;
        }

        /**
         * @param urlOfProxyAndResource This is the invocation URL of the proxy service and resource through which Snowflake calls the remote service.
         * 
         * @return builder
         * 
         */
        public Builder urlOfProxyAndResource(String urlOfProxyAndResource) {
            return urlOfProxyAndResource(Output.of(urlOfProxyAndResource));
        }

        public ExternalFunctionArgs build() {
            $.apiIntegration = Objects.requireNonNull($.apiIntegration, "expected parameter 'apiIntegration' to be non-null");
            $.database = Objects.requireNonNull($.database, "expected parameter 'database' to be non-null");
            $.returnBehavior = Objects.requireNonNull($.returnBehavior, "expected parameter 'returnBehavior' to be non-null");
            $.returnType = Objects.requireNonNull($.returnType, "expected parameter 'returnType' to be non-null");
            $.schema = Objects.requireNonNull($.schema, "expected parameter 'schema' to be non-null");
            $.urlOfProxyAndResource = Objects.requireNonNull($.urlOfProxyAndResource, "expected parameter 'urlOfProxyAndResource' to be non-null");
            return $;
        }
    }

}
