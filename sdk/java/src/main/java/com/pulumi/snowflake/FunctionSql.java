// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.snowflake.FunctionSqlArgs;
import com.pulumi.snowflake.Utilities;
import com.pulumi.snowflake.inputs.FunctionSqlState;
import com.pulumi.snowflake.outputs.FunctionSqlArgument;
import com.pulumi.snowflake.outputs.FunctionSqlParameter;
import com.pulumi.snowflake.outputs.FunctionSqlShowOutput;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="snowflake:index/functionSql:FunctionSql")
public class FunctionSql extends com.pulumi.resources.CustomResource {
    /**
     * List of the arguments for the function. Consult the
     * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
     * 
     */
    @Export(name="arguments", refs={List.class,FunctionSqlArgument.class}, tree="[0,1]")
    private Output</* @Nullable */ List<FunctionSqlArgument>> arguments;

    /**
     * @return List of the arguments for the function. Consult the
     * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
     * 
     */
    public Output<Optional<List<FunctionSqlArgument>>> arguments() {
        return Codegen.optional(this.arguments);
    }
    /**
     * Specifies a comment for the function.
     * 
     */
    @Export(name="comment", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> comment;

    /**
     * @return Specifies a comment for the function.
     * 
     */
    public Output<Optional<String>> comment() {
        return Codegen.optional(this.comment);
    }
    /**
     * The database in which to create the function. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    @Export(name="database", refs={String.class}, tree="[0]")
    private Output<String> database;

    /**
     * @return The database in which to create the function. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> database() {
        return this.database;
    }
    /**
     * Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).
     * For more information, check [ENABLE_CONSOLE_OUTPUT
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
     * 
     */
    @Export(name="enableConsoleOutput", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enableConsoleOutput;

    /**
     * @return Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).
     * For more information, check [ENABLE_CONSOLE_OUTPUT
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
     * 
     */
    public Output<Boolean> enableConsoleOutput() {
        return this.enableConsoleOutput;
    }
    /**
     * Fully qualified name of the resource. For more information, see [object name
     * resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    @Export(name="fullyQualifiedName", refs={String.class}, tree="[0]")
    private Output<String> fullyQualifiedName;

    /**
     * @return Fully qualified name of the resource. For more information, see [object name
     * resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    public Output<String> fullyQualifiedName() {
        return this.fullyQualifiedName;
    }
    /**
     * Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;
     * do not include them. The `function_definition` value must be SQL source code. For more information, see [Introduction to
     * SQL UDFs](https://docs.snowflake.com/en/developer-guide/udf/sql/udf-sql-introduction). To mitigate permadiff on this
     * field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in
     * case or run of whitespace is semantically significant.
     * 
     */
    @Export(name="functionDefinition", refs={String.class}, tree="[0]")
    private Output<String> functionDefinition;

    /**
     * @return Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;
     * do not include them. The `function_definition` value must be SQL source code. For more information, see [Introduction to
     * SQL UDFs](https://docs.snowflake.com/en/developer-guide/udf/sql/udf-sql-introduction). To mitigate permadiff on this
     * field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in
     * case or run of whitespace is semantically significant.
     * 
     */
    public Output<String> functionDefinition() {
        return this.functionDefinition;
    }
    /**
     * Specifies language for the user. Used to detect external changes.
     * 
     */
    @Export(name="functionLanguage", refs={String.class}, tree="[0]")
    private Output<String> functionLanguage;

    /**
     * @return Specifies language for the user. Used to detect external changes.
     * 
     */
    public Output<String> functionLanguage() {
        return this.functionLanguage;
    }
    @Export(name="isSecure", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> isSecure;

    public Output<Optional<String>> isSecure() {
        return Codegen.optional(this.isSecure);
    }
    /**
     * LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
     * 
     */
    @Export(name="logLevel", refs={String.class}, tree="[0]")
    private Output<String> logLevel;

    /**
     * @return LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
     * 
     */
    public Output<String> logLevel() {
        return this.logLevel;
    }
    /**
     * METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
     * 
     */
    @Export(name="metricLevel", refs={String.class}, tree="[0]")
    private Output<String> metricLevel;

    /**
     * @return METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
     * 
     */
    public Output<String> metricLevel() {
        return this.metricLevel;
    }
    /**
     * The name of the function; the identifier does not need to be unique for the schema in which the function is created
     * because UDFs are identified and resolved by the combination of the name and argument types. Check the
     * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations
     * (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the function; the identifier does not need to be unique for the schema in which the function is created
     * because UDFs are identified and resolved by the combination of the name and argument types. Check the
     * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations
     * (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.
     * 
     */
    @Export(name="parameters", refs={List.class,FunctionSqlParameter.class}, tree="[0,1]")
    private Output<List<FunctionSqlParameter>> parameters;

    /**
     * @return Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.
     * 
     */
    public Output<List<FunctionSqlParameter>> parameters() {
        return this.parameters;
    }
    /**
     * Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |
     * `IMMUTABLE`.
     * 
     */
    @Export(name="returnResultsBehavior", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> returnResultsBehavior;

    /**
     * @return Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |
     * `IMMUTABLE`.
     * 
     */
    public Output<Optional<String>> returnResultsBehavior() {
        return Codegen.optional(this.returnResultsBehavior);
    }
    /**
     * Specifies the results returned by the UDF, which determines the UDF type. Use `&lt;result_data_type&gt;` to create a scalar
     * UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a
     * table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult
     * the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
     * 
     */
    @Export(name="returnType", refs={String.class}, tree="[0]")
    private Output<String> returnType;

    /**
     * @return Specifies the results returned by the UDF, which determines the UDF type. Use `&lt;result_data_type&gt;` to create a scalar
     * UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a
     * table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult
     * the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
     * 
     */
    public Output<String> returnType() {
        return this.returnType;
    }
    /**
     * The schema in which to create the function. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    @Export(name="schema", refs={String.class}, tree="[0]")
    private Output<String> schema;

    /**
     * @return The schema in which to create the function. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }
    /**
     * Outputs the result of `SHOW FUNCTION` for the given function.
     * 
     */
    @Export(name="showOutputs", refs={List.class,FunctionSqlShowOutput.class}, tree="[0,1]")
    private Output<List<FunctionSqlShowOutput>> showOutputs;

    /**
     * @return Outputs the result of `SHOW FUNCTION` for the given function.
     * 
     */
    public Output<List<FunctionSqlShowOutput>> showOutputs() {
        return this.showOutputs;
    }
    /**
     * Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
     * 
     */
    @Export(name="traceLevel", refs={String.class}, tree="[0]")
    private Output<String> traceLevel;

    /**
     * @return Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
     * 
     */
    public Output<String> traceLevel() {
        return this.traceLevel;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public FunctionSql(java.lang.String name) {
        this(name, FunctionSqlArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public FunctionSql(java.lang.String name, FunctionSqlArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public FunctionSql(java.lang.String name, FunctionSqlArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("snowflake:index/functionSql:FunctionSql", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private FunctionSql(java.lang.String name, Output<java.lang.String> id, @Nullable FunctionSqlState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("snowflake:index/functionSql:FunctionSql", name, state, makeResourceOptions(options, id), false);
    }

    private static FunctionSqlArgs makeArgs(FunctionSqlArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? FunctionSqlArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static FunctionSql get(java.lang.String name, Output<java.lang.String> id, @Nullable FunctionSqlState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new FunctionSql(name, id, state, options);
    }
}
