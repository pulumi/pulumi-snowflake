// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.snowflake.outputs.GetDatabasesDatabaseParameterCatalog;
import com.pulumi.snowflake.outputs.GetDatabasesDatabaseParameterDataRetentionTimeInDay;
import com.pulumi.snowflake.outputs.GetDatabasesDatabaseParameterDefaultDdlCollation;
import com.pulumi.snowflake.outputs.GetDatabasesDatabaseParameterEnableConsoleOutput;
import com.pulumi.snowflake.outputs.GetDatabasesDatabaseParameterExternalVolume;
import com.pulumi.snowflake.outputs.GetDatabasesDatabaseParameterLogLevel;
import com.pulumi.snowflake.outputs.GetDatabasesDatabaseParameterMaxDataExtensionTimeInDay;
import com.pulumi.snowflake.outputs.GetDatabasesDatabaseParameterQuotedIdentifiersIgnoreCase;
import com.pulumi.snowflake.outputs.GetDatabasesDatabaseParameterReplaceInvalidCharacter;
import com.pulumi.snowflake.outputs.GetDatabasesDatabaseParameterStorageSerializationPolicy;
import com.pulumi.snowflake.outputs.GetDatabasesDatabaseParameterSuspendTaskAfterNumFailure;
import com.pulumi.snowflake.outputs.GetDatabasesDatabaseParameterTaskAutoRetryAttempt;
import com.pulumi.snowflake.outputs.GetDatabasesDatabaseParameterTraceLevel;
import com.pulumi.snowflake.outputs.GetDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSize;
import com.pulumi.snowflake.outputs.GetDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecond;
import com.pulumi.snowflake.outputs.GetDatabasesDatabaseParameterUserTaskTimeoutM;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDatabasesDatabaseParameter {
    private List<GetDatabasesDatabaseParameterCatalog> catalogs;
    private List<GetDatabasesDatabaseParameterDataRetentionTimeInDay> dataRetentionTimeInDays;
    private List<GetDatabasesDatabaseParameterDefaultDdlCollation> defaultDdlCollations;
    private List<GetDatabasesDatabaseParameterEnableConsoleOutput> enableConsoleOutputs;
    private List<GetDatabasesDatabaseParameterExternalVolume> externalVolumes;
    private List<GetDatabasesDatabaseParameterLogLevel> logLevels;
    private List<GetDatabasesDatabaseParameterMaxDataExtensionTimeInDay> maxDataExtensionTimeInDays;
    private List<GetDatabasesDatabaseParameterQuotedIdentifiersIgnoreCase> quotedIdentifiersIgnoreCases;
    private List<GetDatabasesDatabaseParameterReplaceInvalidCharacter> replaceInvalidCharacters;
    private List<GetDatabasesDatabaseParameterStorageSerializationPolicy> storageSerializationPolicies;
    private List<GetDatabasesDatabaseParameterSuspendTaskAfterNumFailure> suspendTaskAfterNumFailures;
    private List<GetDatabasesDatabaseParameterTaskAutoRetryAttempt> taskAutoRetryAttempts;
    private List<GetDatabasesDatabaseParameterTraceLevel> traceLevels;
    private List<GetDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSize> userTaskManagedInitialWarehouseSizes;
    private List<GetDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecond> userTaskMinimumTriggerIntervalInSeconds;
    private List<GetDatabasesDatabaseParameterUserTaskTimeoutM> userTaskTimeoutMs;

    private GetDatabasesDatabaseParameter() {}
    public List<GetDatabasesDatabaseParameterCatalog> catalogs() {
        return this.catalogs;
    }
    public List<GetDatabasesDatabaseParameterDataRetentionTimeInDay> dataRetentionTimeInDays() {
        return this.dataRetentionTimeInDays;
    }
    public List<GetDatabasesDatabaseParameterDefaultDdlCollation> defaultDdlCollations() {
        return this.defaultDdlCollations;
    }
    public List<GetDatabasesDatabaseParameterEnableConsoleOutput> enableConsoleOutputs() {
        return this.enableConsoleOutputs;
    }
    public List<GetDatabasesDatabaseParameterExternalVolume> externalVolumes() {
        return this.externalVolumes;
    }
    public List<GetDatabasesDatabaseParameterLogLevel> logLevels() {
        return this.logLevels;
    }
    public List<GetDatabasesDatabaseParameterMaxDataExtensionTimeInDay> maxDataExtensionTimeInDays() {
        return this.maxDataExtensionTimeInDays;
    }
    public List<GetDatabasesDatabaseParameterQuotedIdentifiersIgnoreCase> quotedIdentifiersIgnoreCases() {
        return this.quotedIdentifiersIgnoreCases;
    }
    public List<GetDatabasesDatabaseParameterReplaceInvalidCharacter> replaceInvalidCharacters() {
        return this.replaceInvalidCharacters;
    }
    public List<GetDatabasesDatabaseParameterStorageSerializationPolicy> storageSerializationPolicies() {
        return this.storageSerializationPolicies;
    }
    public List<GetDatabasesDatabaseParameterSuspendTaskAfterNumFailure> suspendTaskAfterNumFailures() {
        return this.suspendTaskAfterNumFailures;
    }
    public List<GetDatabasesDatabaseParameterTaskAutoRetryAttempt> taskAutoRetryAttempts() {
        return this.taskAutoRetryAttempts;
    }
    public List<GetDatabasesDatabaseParameterTraceLevel> traceLevels() {
        return this.traceLevels;
    }
    public List<GetDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSize> userTaskManagedInitialWarehouseSizes() {
        return this.userTaskManagedInitialWarehouseSizes;
    }
    public List<GetDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecond> userTaskMinimumTriggerIntervalInSeconds() {
        return this.userTaskMinimumTriggerIntervalInSeconds;
    }
    public List<GetDatabasesDatabaseParameterUserTaskTimeoutM> userTaskTimeoutMs() {
        return this.userTaskTimeoutMs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabasesDatabaseParameter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetDatabasesDatabaseParameterCatalog> catalogs;
        private List<GetDatabasesDatabaseParameterDataRetentionTimeInDay> dataRetentionTimeInDays;
        private List<GetDatabasesDatabaseParameterDefaultDdlCollation> defaultDdlCollations;
        private List<GetDatabasesDatabaseParameterEnableConsoleOutput> enableConsoleOutputs;
        private List<GetDatabasesDatabaseParameterExternalVolume> externalVolumes;
        private List<GetDatabasesDatabaseParameterLogLevel> logLevels;
        private List<GetDatabasesDatabaseParameterMaxDataExtensionTimeInDay> maxDataExtensionTimeInDays;
        private List<GetDatabasesDatabaseParameterQuotedIdentifiersIgnoreCase> quotedIdentifiersIgnoreCases;
        private List<GetDatabasesDatabaseParameterReplaceInvalidCharacter> replaceInvalidCharacters;
        private List<GetDatabasesDatabaseParameterStorageSerializationPolicy> storageSerializationPolicies;
        private List<GetDatabasesDatabaseParameterSuspendTaskAfterNumFailure> suspendTaskAfterNumFailures;
        private List<GetDatabasesDatabaseParameterTaskAutoRetryAttempt> taskAutoRetryAttempts;
        private List<GetDatabasesDatabaseParameterTraceLevel> traceLevels;
        private List<GetDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSize> userTaskManagedInitialWarehouseSizes;
        private List<GetDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecond> userTaskMinimumTriggerIntervalInSeconds;
        private List<GetDatabasesDatabaseParameterUserTaskTimeoutM> userTaskTimeoutMs;
        public Builder() {}
        public Builder(GetDatabasesDatabaseParameter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalogs = defaults.catalogs;
    	      this.dataRetentionTimeInDays = defaults.dataRetentionTimeInDays;
    	      this.defaultDdlCollations = defaults.defaultDdlCollations;
    	      this.enableConsoleOutputs = defaults.enableConsoleOutputs;
    	      this.externalVolumes = defaults.externalVolumes;
    	      this.logLevels = defaults.logLevels;
    	      this.maxDataExtensionTimeInDays = defaults.maxDataExtensionTimeInDays;
    	      this.quotedIdentifiersIgnoreCases = defaults.quotedIdentifiersIgnoreCases;
    	      this.replaceInvalidCharacters = defaults.replaceInvalidCharacters;
    	      this.storageSerializationPolicies = defaults.storageSerializationPolicies;
    	      this.suspendTaskAfterNumFailures = defaults.suspendTaskAfterNumFailures;
    	      this.taskAutoRetryAttempts = defaults.taskAutoRetryAttempts;
    	      this.traceLevels = defaults.traceLevels;
    	      this.userTaskManagedInitialWarehouseSizes = defaults.userTaskManagedInitialWarehouseSizes;
    	      this.userTaskMinimumTriggerIntervalInSeconds = defaults.userTaskMinimumTriggerIntervalInSeconds;
    	      this.userTaskTimeoutMs = defaults.userTaskTimeoutMs;
        }

        @CustomType.Setter
        public Builder catalogs(List<GetDatabasesDatabaseParameterCatalog> catalogs) {
            if (catalogs == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseParameter", "catalogs");
            }
            this.catalogs = catalogs;
            return this;
        }
        public Builder catalogs(GetDatabasesDatabaseParameterCatalog... catalogs) {
            return catalogs(List.of(catalogs));
        }
        @CustomType.Setter
        public Builder dataRetentionTimeInDays(List<GetDatabasesDatabaseParameterDataRetentionTimeInDay> dataRetentionTimeInDays) {
            if (dataRetentionTimeInDays == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseParameter", "dataRetentionTimeInDays");
            }
            this.dataRetentionTimeInDays = dataRetentionTimeInDays;
            return this;
        }
        public Builder dataRetentionTimeInDays(GetDatabasesDatabaseParameterDataRetentionTimeInDay... dataRetentionTimeInDays) {
            return dataRetentionTimeInDays(List.of(dataRetentionTimeInDays));
        }
        @CustomType.Setter
        public Builder defaultDdlCollations(List<GetDatabasesDatabaseParameterDefaultDdlCollation> defaultDdlCollations) {
            if (defaultDdlCollations == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseParameter", "defaultDdlCollations");
            }
            this.defaultDdlCollations = defaultDdlCollations;
            return this;
        }
        public Builder defaultDdlCollations(GetDatabasesDatabaseParameterDefaultDdlCollation... defaultDdlCollations) {
            return defaultDdlCollations(List.of(defaultDdlCollations));
        }
        @CustomType.Setter
        public Builder enableConsoleOutputs(List<GetDatabasesDatabaseParameterEnableConsoleOutput> enableConsoleOutputs) {
            if (enableConsoleOutputs == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseParameter", "enableConsoleOutputs");
            }
            this.enableConsoleOutputs = enableConsoleOutputs;
            return this;
        }
        public Builder enableConsoleOutputs(GetDatabasesDatabaseParameterEnableConsoleOutput... enableConsoleOutputs) {
            return enableConsoleOutputs(List.of(enableConsoleOutputs));
        }
        @CustomType.Setter
        public Builder externalVolumes(List<GetDatabasesDatabaseParameterExternalVolume> externalVolumes) {
            if (externalVolumes == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseParameter", "externalVolumes");
            }
            this.externalVolumes = externalVolumes;
            return this;
        }
        public Builder externalVolumes(GetDatabasesDatabaseParameterExternalVolume... externalVolumes) {
            return externalVolumes(List.of(externalVolumes));
        }
        @CustomType.Setter
        public Builder logLevels(List<GetDatabasesDatabaseParameterLogLevel> logLevels) {
            if (logLevels == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseParameter", "logLevels");
            }
            this.logLevels = logLevels;
            return this;
        }
        public Builder logLevels(GetDatabasesDatabaseParameterLogLevel... logLevels) {
            return logLevels(List.of(logLevels));
        }
        @CustomType.Setter
        public Builder maxDataExtensionTimeInDays(List<GetDatabasesDatabaseParameterMaxDataExtensionTimeInDay> maxDataExtensionTimeInDays) {
            if (maxDataExtensionTimeInDays == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseParameter", "maxDataExtensionTimeInDays");
            }
            this.maxDataExtensionTimeInDays = maxDataExtensionTimeInDays;
            return this;
        }
        public Builder maxDataExtensionTimeInDays(GetDatabasesDatabaseParameterMaxDataExtensionTimeInDay... maxDataExtensionTimeInDays) {
            return maxDataExtensionTimeInDays(List.of(maxDataExtensionTimeInDays));
        }
        @CustomType.Setter
        public Builder quotedIdentifiersIgnoreCases(List<GetDatabasesDatabaseParameterQuotedIdentifiersIgnoreCase> quotedIdentifiersIgnoreCases) {
            if (quotedIdentifiersIgnoreCases == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseParameter", "quotedIdentifiersIgnoreCases");
            }
            this.quotedIdentifiersIgnoreCases = quotedIdentifiersIgnoreCases;
            return this;
        }
        public Builder quotedIdentifiersIgnoreCases(GetDatabasesDatabaseParameterQuotedIdentifiersIgnoreCase... quotedIdentifiersIgnoreCases) {
            return quotedIdentifiersIgnoreCases(List.of(quotedIdentifiersIgnoreCases));
        }
        @CustomType.Setter
        public Builder replaceInvalidCharacters(List<GetDatabasesDatabaseParameterReplaceInvalidCharacter> replaceInvalidCharacters) {
            if (replaceInvalidCharacters == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseParameter", "replaceInvalidCharacters");
            }
            this.replaceInvalidCharacters = replaceInvalidCharacters;
            return this;
        }
        public Builder replaceInvalidCharacters(GetDatabasesDatabaseParameterReplaceInvalidCharacter... replaceInvalidCharacters) {
            return replaceInvalidCharacters(List.of(replaceInvalidCharacters));
        }
        @CustomType.Setter
        public Builder storageSerializationPolicies(List<GetDatabasesDatabaseParameterStorageSerializationPolicy> storageSerializationPolicies) {
            if (storageSerializationPolicies == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseParameter", "storageSerializationPolicies");
            }
            this.storageSerializationPolicies = storageSerializationPolicies;
            return this;
        }
        public Builder storageSerializationPolicies(GetDatabasesDatabaseParameterStorageSerializationPolicy... storageSerializationPolicies) {
            return storageSerializationPolicies(List.of(storageSerializationPolicies));
        }
        @CustomType.Setter
        public Builder suspendTaskAfterNumFailures(List<GetDatabasesDatabaseParameterSuspendTaskAfterNumFailure> suspendTaskAfterNumFailures) {
            if (suspendTaskAfterNumFailures == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseParameter", "suspendTaskAfterNumFailures");
            }
            this.suspendTaskAfterNumFailures = suspendTaskAfterNumFailures;
            return this;
        }
        public Builder suspendTaskAfterNumFailures(GetDatabasesDatabaseParameterSuspendTaskAfterNumFailure... suspendTaskAfterNumFailures) {
            return suspendTaskAfterNumFailures(List.of(suspendTaskAfterNumFailures));
        }
        @CustomType.Setter
        public Builder taskAutoRetryAttempts(List<GetDatabasesDatabaseParameterTaskAutoRetryAttempt> taskAutoRetryAttempts) {
            if (taskAutoRetryAttempts == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseParameter", "taskAutoRetryAttempts");
            }
            this.taskAutoRetryAttempts = taskAutoRetryAttempts;
            return this;
        }
        public Builder taskAutoRetryAttempts(GetDatabasesDatabaseParameterTaskAutoRetryAttempt... taskAutoRetryAttempts) {
            return taskAutoRetryAttempts(List.of(taskAutoRetryAttempts));
        }
        @CustomType.Setter
        public Builder traceLevels(List<GetDatabasesDatabaseParameterTraceLevel> traceLevels) {
            if (traceLevels == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseParameter", "traceLevels");
            }
            this.traceLevels = traceLevels;
            return this;
        }
        public Builder traceLevels(GetDatabasesDatabaseParameterTraceLevel... traceLevels) {
            return traceLevels(List.of(traceLevels));
        }
        @CustomType.Setter
        public Builder userTaskManagedInitialWarehouseSizes(List<GetDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSize> userTaskManagedInitialWarehouseSizes) {
            if (userTaskManagedInitialWarehouseSizes == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseParameter", "userTaskManagedInitialWarehouseSizes");
            }
            this.userTaskManagedInitialWarehouseSizes = userTaskManagedInitialWarehouseSizes;
            return this;
        }
        public Builder userTaskManagedInitialWarehouseSizes(GetDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSize... userTaskManagedInitialWarehouseSizes) {
            return userTaskManagedInitialWarehouseSizes(List.of(userTaskManagedInitialWarehouseSizes));
        }
        @CustomType.Setter
        public Builder userTaskMinimumTriggerIntervalInSeconds(List<GetDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecond> userTaskMinimumTriggerIntervalInSeconds) {
            if (userTaskMinimumTriggerIntervalInSeconds == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseParameter", "userTaskMinimumTriggerIntervalInSeconds");
            }
            this.userTaskMinimumTriggerIntervalInSeconds = userTaskMinimumTriggerIntervalInSeconds;
            return this;
        }
        public Builder userTaskMinimumTriggerIntervalInSeconds(GetDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecond... userTaskMinimumTriggerIntervalInSeconds) {
            return userTaskMinimumTriggerIntervalInSeconds(List.of(userTaskMinimumTriggerIntervalInSeconds));
        }
        @CustomType.Setter
        public Builder userTaskTimeoutMs(List<GetDatabasesDatabaseParameterUserTaskTimeoutM> userTaskTimeoutMs) {
            if (userTaskTimeoutMs == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseParameter", "userTaskTimeoutMs");
            }
            this.userTaskTimeoutMs = userTaskTimeoutMs;
            return this;
        }
        public Builder userTaskTimeoutMs(GetDatabasesDatabaseParameterUserTaskTimeoutM... userTaskTimeoutMs) {
            return userTaskTimeoutMs(List.of(userTaskTimeoutMs));
        }
        public GetDatabasesDatabaseParameter build() {
            final var _resultValue = new GetDatabasesDatabaseParameter();
            _resultValue.catalogs = catalogs;
            _resultValue.dataRetentionTimeInDays = dataRetentionTimeInDays;
            _resultValue.defaultDdlCollations = defaultDdlCollations;
            _resultValue.enableConsoleOutputs = enableConsoleOutputs;
            _resultValue.externalVolumes = externalVolumes;
            _resultValue.logLevels = logLevels;
            _resultValue.maxDataExtensionTimeInDays = maxDataExtensionTimeInDays;
            _resultValue.quotedIdentifiersIgnoreCases = quotedIdentifiersIgnoreCases;
            _resultValue.replaceInvalidCharacters = replaceInvalidCharacters;
            _resultValue.storageSerializationPolicies = storageSerializationPolicies;
            _resultValue.suspendTaskAfterNumFailures = suspendTaskAfterNumFailures;
            _resultValue.taskAutoRetryAttempts = taskAutoRetryAttempts;
            _resultValue.traceLevels = traceLevels;
            _resultValue.userTaskManagedInitialWarehouseSizes = userTaskManagedInitialWarehouseSizes;
            _resultValue.userTaskMinimumTriggerIntervalInSeconds = userTaskMinimumTriggerIntervalInSeconds;
            _resultValue.userTaskTimeoutMs = userTaskTimeoutMs;
            return _resultValue;
        }
    }
}
