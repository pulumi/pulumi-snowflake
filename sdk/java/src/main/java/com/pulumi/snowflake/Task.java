// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.snowflake.TaskArgs;
import com.pulumi.snowflake.Utilities;
import com.pulumi.snowflake.inputs.TaskState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.snowflake.Task;
 * import com.pulumi.snowflake.TaskArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var task = new Task(&#34;task&#34;, TaskArgs.builder()        
 *             .comment(&#34;my task&#34;)
 *             .database(&#34;db&#34;)
 *             .schema(&#34;schema&#34;)
 *             .warehouse(&#34;warehouse&#34;)
 *             .schedule(&#34;10 MINUTE&#34;)
 *             .sqlStatement(&#34;select * from foo;&#34;)
 *             .sessionParameters(Map.of(&#34;foo&#34;, &#34;bar&#34;))
 *             .userTaskTimeoutMs(10000)
 *             .after(&#34;preceding_task&#34;)
 *             .when(&#34;foo AND bar&#34;)
 *             .enabled(true)
 *             .build());
 * 
 *         var serverlessTask = new Task(&#34;serverlessTask&#34;, TaskArgs.builder()        
 *             .comment(&#34;my serverless task&#34;)
 *             .database(&#34;db&#34;)
 *             .schema(&#34;schema&#34;)
 *             .schedule(&#34;10 MINUTE&#34;)
 *             .sqlStatement(&#34;select * from foo;&#34;)
 *             .sessionParameters(Map.of(&#34;foo&#34;, &#34;bar&#34;))
 *             .userTaskTimeoutMs(10000)
 *             .userTaskManagedInitialWarehouseSize(&#34;XSMALL&#34;)
 *             .after(&#34;preceding_task&#34;)
 *             .when(&#34;foo AND bar&#34;)
 *             .enabled(true)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * # format is database name | schema name | task name
 * 
 * ```sh
 *  $ pulumi import snowflake:index/task:Task example &#39;dbName|schemaName|taskName&#39;
 * ```
 * 
 */
@ResourceType(type="snowflake:index/task:Task")
public class Task extends com.pulumi.resources.CustomResource {
    /**
     * Specifies the predecessor task in the same database and schema of the current task. When a run of the predecessor task finishes successfully, it triggers this task (after a brief lag). (Conflict with schedule)
     * 
     */
    @Export(name="after", type=String.class, parameters={})
    private Output</* @Nullable */ String> after;

    /**
     * @return Specifies the predecessor task in the same database and schema of the current task. When a run of the predecessor task finishes successfully, it triggers this task (after a brief lag). (Conflict with schedule)
     * 
     */
    public Output<Optional<String>> after() {
        return Codegen.optional(this.after);
    }
    /**
     * Specifies a comment for the task.
     * 
     */
    @Export(name="comment", type=String.class, parameters={})
    private Output</* @Nullable */ String> comment;

    /**
     * @return Specifies a comment for the task.
     * 
     */
    public Output<Optional<String>> comment() {
        return Codegen.optional(this.comment);
    }
    /**
     * The database in which to create the task.
     * 
     */
    @Export(name="database", type=String.class, parameters={})
    private Output<String> database;

    /**
     * @return The database in which to create the task.
     * 
     */
    public Output<String> database() {
        return this.database;
    }
    /**
     * Specifies if the task should be started (enabled) after creation or should remain suspended (default).
     * 
     */
    @Export(name="enabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return Specifies if the task should be started (enabled) after creation or should remain suspended (default).
     * 
     */
    public Output<Optional<Boolean>> enabled() {
        return Codegen.optional(this.enabled);
    }
    /**
     * Specifies the name of the notification integration used for error notifications.
     * 
     */
    @Export(name="errorIntegration", type=String.class, parameters={})
    private Output</* @Nullable */ String> errorIntegration;

    /**
     * @return Specifies the name of the notification integration used for error notifications.
     * 
     */
    public Output<Optional<String>> errorIntegration() {
        return Codegen.optional(this.errorIntegration);
    }
    /**
     * Specifies the identifier for the task; must be unique for the database and schema in which the task is created.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Specifies the identifier for the task; must be unique for the database and schema in which the task is created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The schedule for periodically running the task. This can be a cron or interval in minutes. (Conflict with after)
     * 
     */
    @Export(name="schedule", type=String.class, parameters={})
    private Output</* @Nullable */ String> schedule;

    /**
     * @return The schedule for periodically running the task. This can be a cron or interval in minutes. (Conflict with after)
     * 
     */
    public Output<Optional<String>> schedule() {
        return Codegen.optional(this.schedule);
    }
    /**
     * The schema in which to create the task.
     * 
     */
    @Export(name="schema", type=String.class, parameters={})
    private Output<String> schema;

    /**
     * @return The schema in which to create the task.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }
    /**
     * Specifies session parameters to set for the session when the task runs. A task supports all session parameters.
     * 
     */
    @Export(name="sessionParameters", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> sessionParameters;

    /**
     * @return Specifies session parameters to set for the session when the task runs. A task supports all session parameters.
     * 
     */
    public Output<Optional<Map<String,String>>> sessionParameters() {
        return Codegen.optional(this.sessionParameters);
    }
    /**
     * Any single SQL statement, or a call to a stored procedure, executed when the task runs.
     * 
     */
    @Export(name="sqlStatement", type=String.class, parameters={})
    private Output<String> sqlStatement;

    /**
     * @return Any single SQL statement, or a call to a stored procedure, executed when the task runs.
     * 
     */
    public Output<String> sqlStatement() {
        return this.sqlStatement;
    }
    /**
     * Specifies the size of the compute resources to provision for the first run of the task, before a task history is available for Snowflake to determine an ideal size. Once a task has successfully completed a few runs, Snowflake ignores this parameter setting. (Conflicts with warehouse)
     * 
     */
    @Export(name="userTaskManagedInitialWarehouseSize", type=String.class, parameters={})
    private Output</* @Nullable */ String> userTaskManagedInitialWarehouseSize;

    /**
     * @return Specifies the size of the compute resources to provision for the first run of the task, before a task history is available for Snowflake to determine an ideal size. Once a task has successfully completed a few runs, Snowflake ignores this parameter setting. (Conflicts with warehouse)
     * 
     */
    public Output<Optional<String>> userTaskManagedInitialWarehouseSize() {
        return Codegen.optional(this.userTaskManagedInitialWarehouseSize);
    }
    /**
     * Specifies the time limit on a single run of the task before it times out (in milliseconds).
     * 
     */
    @Export(name="userTaskTimeoutMs", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> userTaskTimeoutMs;

    /**
     * @return Specifies the time limit on a single run of the task before it times out (in milliseconds).
     * 
     */
    public Output<Optional<Integer>> userTaskTimeoutMs() {
        return Codegen.optional(this.userTaskTimeoutMs);
    }
    /**
     * The warehouse the task will use. Omit this parameter to use Snowflake-managed compute resources for runs of this task. (Conflicts with user*task*managed*initial*warehouse_size)
     * 
     */
    @Export(name="warehouse", type=String.class, parameters={})
    private Output</* @Nullable */ String> warehouse;

    /**
     * @return The warehouse the task will use. Omit this parameter to use Snowflake-managed compute resources for runs of this task. (Conflicts with user*task*managed*initial*warehouse_size)
     * 
     */
    public Output<Optional<String>> warehouse() {
        return Codegen.optional(this.warehouse);
    }
    /**
     * Specifies a Boolean SQL expression; multiple conditions joined with AND/OR are supported.
     * 
     */
    @Export(name="when", type=String.class, parameters={})
    private Output</* @Nullable */ String> when;

    /**
     * @return Specifies a Boolean SQL expression; multiple conditions joined with AND/OR are supported.
     * 
     */
    public Output<Optional<String>> when() {
        return Codegen.optional(this.when);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Task(String name) {
        this(name, TaskArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Task(String name, TaskArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Task(String name, TaskArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("snowflake:index/task:Task", name, args == null ? TaskArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Task(String name, Output<String> id, @Nullable TaskState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("snowflake:index/task:Task", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Task get(String name, Output<String> id, @Nullable TaskState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Task(name, id, state, options);
    }
}
