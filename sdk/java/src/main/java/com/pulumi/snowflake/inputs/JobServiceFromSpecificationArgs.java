// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobServiceFromSpecificationArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobServiceFromSpecificationArgs Empty = new JobServiceFromSpecificationArgs();

    /**
     * The file name of the service specification. Example: `spec.yaml`.
     * 
     */
    @Import(name="file")
    private @Nullable Output<String> file;

    /**
     * @return The file name of the service specification. Example: `spec.yaml`.
     * 
     */
    public Optional<Output<String>> file() {
        return Optional.ofNullable(this.file);
    }

    /**
     * The path to the service specification file on the given stage. When the path is specified, the `/` character is automatically added as a path prefix. Example: `path/to/spec`.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return The path to the service specification file on the given stage. When the path is specified, the `/` character is automatically added as a path prefix. Example: `path/to/spec`.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * The fully qualified name of the stage containing the service specification file. At symbol (`{@literal @}`) is added automatically. Example: `&#34;\&#34;&lt;db_name&gt;\&#34;.\&#34;&lt;schema_name&gt;\&#34;.\&#34;&lt;stage_name&gt;\&#34;&#34;`. For more information about this resource, see docs.
     * 
     */
    @Import(name="stage")
    private @Nullable Output<String> stage;

    /**
     * @return The fully qualified name of the stage containing the service specification file. At symbol (`{@literal @}`) is added automatically. Example: `&#34;\&#34;&lt;db_name&gt;\&#34;.\&#34;&lt;schema_name&gt;\&#34;.\&#34;&lt;stage_name&gt;\&#34;&#34;`. For more information about this resource, see docs.
     * 
     */
    public Optional<Output<String>> stage() {
        return Optional.ofNullable(this.stage);
    }

    /**
     * The embedded text of the service specification.
     * 
     */
    @Import(name="text")
    private @Nullable Output<String> text;

    /**
     * @return The embedded text of the service specification.
     * 
     */
    public Optional<Output<String>> text() {
        return Optional.ofNullable(this.text);
    }

    private JobServiceFromSpecificationArgs() {}

    private JobServiceFromSpecificationArgs(JobServiceFromSpecificationArgs $) {
        this.file = $.file;
        this.path = $.path;
        this.stage = $.stage;
        this.text = $.text;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobServiceFromSpecificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobServiceFromSpecificationArgs $;

        public Builder() {
            $ = new JobServiceFromSpecificationArgs();
        }

        public Builder(JobServiceFromSpecificationArgs defaults) {
            $ = new JobServiceFromSpecificationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param file The file name of the service specification. Example: `spec.yaml`.
         * 
         * @return builder
         * 
         */
        public Builder file(@Nullable Output<String> file) {
            $.file = file;
            return this;
        }

        /**
         * @param file The file name of the service specification. Example: `spec.yaml`.
         * 
         * @return builder
         * 
         */
        public Builder file(String file) {
            return file(Output.of(file));
        }

        /**
         * @param path The path to the service specification file on the given stage. When the path is specified, the `/` character is automatically added as a path prefix. Example: `path/to/spec`.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path to the service specification file on the given stage. When the path is specified, the `/` character is automatically added as a path prefix. Example: `path/to/spec`.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param stage The fully qualified name of the stage containing the service specification file. At symbol (`{@literal @}`) is added automatically. Example: `&#34;\&#34;&lt;db_name&gt;\&#34;.\&#34;&lt;schema_name&gt;\&#34;.\&#34;&lt;stage_name&gt;\&#34;&#34;`. For more information about this resource, see docs.
         * 
         * @return builder
         * 
         */
        public Builder stage(@Nullable Output<String> stage) {
            $.stage = stage;
            return this;
        }

        /**
         * @param stage The fully qualified name of the stage containing the service specification file. At symbol (`{@literal @}`) is added automatically. Example: `&#34;\&#34;&lt;db_name&gt;\&#34;.\&#34;&lt;schema_name&gt;\&#34;.\&#34;&lt;stage_name&gt;\&#34;&#34;`. For more information about this resource, see docs.
         * 
         * @return builder
         * 
         */
        public Builder stage(String stage) {
            return stage(Output.of(stage));
        }

        /**
         * @param text The embedded text of the service specification.
         * 
         * @return builder
         * 
         */
        public Builder text(@Nullable Output<String> text) {
            $.text = text;
            return this;
        }

        /**
         * @param text The embedded text of the service specification.
         * 
         * @return builder
         * 
         */
        public Builder text(String text) {
            return text(Output.of(text));
        }

        public JobServiceFromSpecificationArgs build() {
            return $;
        }
    }

}
