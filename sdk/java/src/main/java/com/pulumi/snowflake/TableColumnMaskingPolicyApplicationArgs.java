// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class TableColumnMaskingPolicyApplicationArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableColumnMaskingPolicyApplicationArgs Empty = new TableColumnMaskingPolicyApplicationArgs();

    /**
     * The column to apply the masking policy to.
     * 
     */
    @Import(name="column", required=true)
    private Output<String> column;

    /**
     * @return The column to apply the masking policy to.
     * 
     */
    public Output<String> column() {
        return this.column;
    }

    /**
     * Fully qualified name (`database.schema.policyname`) of the policy to apply.
     * 
     */
    @Import(name="maskingPolicy", required=true)
    private Output<String> maskingPolicy;

    /**
     * @return Fully qualified name (`database.schema.policyname`) of the policy to apply.
     * 
     */
    public Output<String> maskingPolicy() {
        return this.maskingPolicy;
    }

    /**
     * The fully qualified name (`database.schema.table`) of the table to apply the masking policy to.
     * 
     */
    @Import(name="table", required=true)
    private Output<String> table;

    /**
     * @return The fully qualified name (`database.schema.table`) of the table to apply the masking policy to.
     * 
     */
    public Output<String> table() {
        return this.table;
    }

    private TableColumnMaskingPolicyApplicationArgs() {}

    private TableColumnMaskingPolicyApplicationArgs(TableColumnMaskingPolicyApplicationArgs $) {
        this.column = $.column;
        this.maskingPolicy = $.maskingPolicy;
        this.table = $.table;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableColumnMaskingPolicyApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableColumnMaskingPolicyApplicationArgs $;

        public Builder() {
            $ = new TableColumnMaskingPolicyApplicationArgs();
        }

        public Builder(TableColumnMaskingPolicyApplicationArgs defaults) {
            $ = new TableColumnMaskingPolicyApplicationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param column The column to apply the masking policy to.
         * 
         * @return builder
         * 
         */
        public Builder column(Output<String> column) {
            $.column = column;
            return this;
        }

        /**
         * @param column The column to apply the masking policy to.
         * 
         * @return builder
         * 
         */
        public Builder column(String column) {
            return column(Output.of(column));
        }

        /**
         * @param maskingPolicy Fully qualified name (`database.schema.policyname`) of the policy to apply.
         * 
         * @return builder
         * 
         */
        public Builder maskingPolicy(Output<String> maskingPolicy) {
            $.maskingPolicy = maskingPolicy;
            return this;
        }

        /**
         * @param maskingPolicy Fully qualified name (`database.schema.policyname`) of the policy to apply.
         * 
         * @return builder
         * 
         */
        public Builder maskingPolicy(String maskingPolicy) {
            return maskingPolicy(Output.of(maskingPolicy));
        }

        /**
         * @param table The fully qualified name (`database.schema.table`) of the table to apply the masking policy to.
         * 
         * @return builder
         * 
         */
        public Builder table(Output<String> table) {
            $.table = table;
            return this;
        }

        /**
         * @param table The fully qualified name (`database.schema.table`) of the table to apply the masking policy to.
         * 
         * @return builder
         * 
         */
        public Builder table(String table) {
            return table(Output.of(table));
        }

        public TableColumnMaskingPolicyApplicationArgs build() {
            if ($.column == null) {
                throw new MissingRequiredPropertyException("TableColumnMaskingPolicyApplicationArgs", "column");
            }
            if ($.maskingPolicy == null) {
                throw new MissingRequiredPropertyException("TableColumnMaskingPolicyApplicationArgs", "maskingPolicy");
            }
            if ($.table == null) {
                throw new MissingRequiredPropertyException("TableColumnMaskingPolicyApplicationArgs", "table");
            }
            return $;
        }
    }

}
