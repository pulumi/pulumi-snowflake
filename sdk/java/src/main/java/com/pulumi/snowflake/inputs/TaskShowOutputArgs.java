// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.snowflake.inputs.TaskShowOutputTaskRelationArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TaskShowOutputArgs extends com.pulumi.resources.ResourceArgs {

    public static final TaskShowOutputArgs Empty = new TaskShowOutputArgs();

    @Import(name="allowOverlappingExecution")
    private @Nullable Output<Boolean> allowOverlappingExecution;

    public Optional<Output<Boolean>> allowOverlappingExecution() {
        return Optional.ofNullable(this.allowOverlappingExecution);
    }

    @Import(name="budget")
    private @Nullable Output<String> budget;

    public Optional<Output<String>> budget() {
        return Optional.ofNullable(this.budget);
    }

    @Import(name="comment")
    private @Nullable Output<String> comment;

    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="condition")
    private @Nullable Output<String> condition;

    public Optional<Output<String>> condition() {
        return Optional.ofNullable(this.condition);
    }

    @Import(name="config")
    private @Nullable Output<String> config;

    public Optional<Output<String>> config() {
        return Optional.ofNullable(this.config);
    }

    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    @Import(name="definition")
    private @Nullable Output<String> definition;

    public Optional<Output<String>> definition() {
        return Optional.ofNullable(this.definition);
    }

    @Import(name="errorIntegration")
    private @Nullable Output<String> errorIntegration;

    public Optional<Output<String>> errorIntegration() {
        return Optional.ofNullable(this.errorIntegration);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    @Import(name="lastCommittedOn")
    private @Nullable Output<String> lastCommittedOn;

    public Optional<Output<String>> lastCommittedOn() {
        return Optional.ofNullable(this.lastCommittedOn);
    }

    @Import(name="lastSuspendedOn")
    private @Nullable Output<String> lastSuspendedOn;

    public Optional<Output<String>> lastSuspendedOn() {
        return Optional.ofNullable(this.lastSuspendedOn);
    }

    @Import(name="lastSuspendedReason")
    private @Nullable Output<String> lastSuspendedReason;

    public Optional<Output<String>> lastSuspendedReason() {
        return Optional.ofNullable(this.lastSuspendedReason);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="owner")
    private @Nullable Output<String> owner;

    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    @Import(name="ownerRoleType")
    private @Nullable Output<String> ownerRoleType;

    public Optional<Output<String>> ownerRoleType() {
        return Optional.ofNullable(this.ownerRoleType);
    }

    @Import(name="predecessors")
    private @Nullable Output<List<String>> predecessors;

    public Optional<Output<List<String>>> predecessors() {
        return Optional.ofNullable(this.predecessors);
    }

    @Import(name="schedule")
    private @Nullable Output<String> schedule;

    public Optional<Output<String>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    @Import(name="schemaName")
    private @Nullable Output<String> schemaName;

    public Optional<Output<String>> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }

    @Import(name="state")
    private @Nullable Output<String> state;

    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    @Import(name="taskRelations")
    private @Nullable Output<List<TaskShowOutputTaskRelationArgs>> taskRelations;

    public Optional<Output<List<TaskShowOutputTaskRelationArgs>>> taskRelations() {
        return Optional.ofNullable(this.taskRelations);
    }

    @Import(name="warehouse")
    private @Nullable Output<String> warehouse;

    public Optional<Output<String>> warehouse() {
        return Optional.ofNullable(this.warehouse);
    }

    private TaskShowOutputArgs() {}

    private TaskShowOutputArgs(TaskShowOutputArgs $) {
        this.allowOverlappingExecution = $.allowOverlappingExecution;
        this.budget = $.budget;
        this.comment = $.comment;
        this.condition = $.condition;
        this.config = $.config;
        this.createdOn = $.createdOn;
        this.databaseName = $.databaseName;
        this.definition = $.definition;
        this.errorIntegration = $.errorIntegration;
        this.id = $.id;
        this.lastCommittedOn = $.lastCommittedOn;
        this.lastSuspendedOn = $.lastSuspendedOn;
        this.lastSuspendedReason = $.lastSuspendedReason;
        this.name = $.name;
        this.owner = $.owner;
        this.ownerRoleType = $.ownerRoleType;
        this.predecessors = $.predecessors;
        this.schedule = $.schedule;
        this.schemaName = $.schemaName;
        this.state = $.state;
        this.taskRelations = $.taskRelations;
        this.warehouse = $.warehouse;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TaskShowOutputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TaskShowOutputArgs $;

        public Builder() {
            $ = new TaskShowOutputArgs();
        }

        public Builder(TaskShowOutputArgs defaults) {
            $ = new TaskShowOutputArgs(Objects.requireNonNull(defaults));
        }

        public Builder allowOverlappingExecution(@Nullable Output<Boolean> allowOverlappingExecution) {
            $.allowOverlappingExecution = allowOverlappingExecution;
            return this;
        }

        public Builder allowOverlappingExecution(Boolean allowOverlappingExecution) {
            return allowOverlappingExecution(Output.of(allowOverlappingExecution));
        }

        public Builder budget(@Nullable Output<String> budget) {
            $.budget = budget;
            return this;
        }

        public Builder budget(String budget) {
            return budget(Output.of(budget));
        }

        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder condition(@Nullable Output<String> condition) {
            $.condition = condition;
            return this;
        }

        public Builder condition(String condition) {
            return condition(Output.of(condition));
        }

        public Builder config(@Nullable Output<String> config) {
            $.config = config;
            return this;
        }

        public Builder config(String config) {
            return config(Output.of(config));
        }

        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        public Builder definition(@Nullable Output<String> definition) {
            $.definition = definition;
            return this;
        }

        public Builder definition(String definition) {
            return definition(Output.of(definition));
        }

        public Builder errorIntegration(@Nullable Output<String> errorIntegration) {
            $.errorIntegration = errorIntegration;
            return this;
        }

        public Builder errorIntegration(String errorIntegration) {
            return errorIntegration(Output.of(errorIntegration));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder lastCommittedOn(@Nullable Output<String> lastCommittedOn) {
            $.lastCommittedOn = lastCommittedOn;
            return this;
        }

        public Builder lastCommittedOn(String lastCommittedOn) {
            return lastCommittedOn(Output.of(lastCommittedOn));
        }

        public Builder lastSuspendedOn(@Nullable Output<String> lastSuspendedOn) {
            $.lastSuspendedOn = lastSuspendedOn;
            return this;
        }

        public Builder lastSuspendedOn(String lastSuspendedOn) {
            return lastSuspendedOn(Output.of(lastSuspendedOn));
        }

        public Builder lastSuspendedReason(@Nullable Output<String> lastSuspendedReason) {
            $.lastSuspendedReason = lastSuspendedReason;
            return this;
        }

        public Builder lastSuspendedReason(String lastSuspendedReason) {
            return lastSuspendedReason(Output.of(lastSuspendedReason));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        public Builder ownerRoleType(@Nullable Output<String> ownerRoleType) {
            $.ownerRoleType = ownerRoleType;
            return this;
        }

        public Builder ownerRoleType(String ownerRoleType) {
            return ownerRoleType(Output.of(ownerRoleType));
        }

        public Builder predecessors(@Nullable Output<List<String>> predecessors) {
            $.predecessors = predecessors;
            return this;
        }

        public Builder predecessors(List<String> predecessors) {
            return predecessors(Output.of(predecessors));
        }

        public Builder predecessors(String... predecessors) {
            return predecessors(List.of(predecessors));
        }

        public Builder schedule(@Nullable Output<String> schedule) {
            $.schedule = schedule;
            return this;
        }

        public Builder schedule(String schedule) {
            return schedule(Output.of(schedule));
        }

        public Builder schemaName(@Nullable Output<String> schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        public Builder schemaName(String schemaName) {
            return schemaName(Output.of(schemaName));
        }

        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        public Builder state(String state) {
            return state(Output.of(state));
        }

        public Builder taskRelations(@Nullable Output<List<TaskShowOutputTaskRelationArgs>> taskRelations) {
            $.taskRelations = taskRelations;
            return this;
        }

        public Builder taskRelations(List<TaskShowOutputTaskRelationArgs> taskRelations) {
            return taskRelations(Output.of(taskRelations));
        }

        public Builder taskRelations(TaskShowOutputTaskRelationArgs... taskRelations) {
            return taskRelations(List.of(taskRelations));
        }

        public Builder warehouse(@Nullable Output<String> warehouse) {
            $.warehouse = warehouse;
            return this;
        }

        public Builder warehouse(String warehouse) {
            return warehouse(Output.of(warehouse));
        }

        public TaskShowOutputArgs build() {
            return $;
        }
    }

}
