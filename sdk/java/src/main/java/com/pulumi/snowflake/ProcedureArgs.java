// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.snowflake.inputs.ProcedureArgumentArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProcedureArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProcedureArgs Empty = new ProcedureArgs();

    /**
     * List of the arguments for the procedure
     * 
     */
    @Import(name="arguments")
    private @Nullable Output<List<ProcedureArgumentArgs>> arguments;

    /**
     * @return List of the arguments for the procedure
     * 
     */
    public Optional<Output<List<ProcedureArgumentArgs>>> arguments() {
        return Optional.ofNullable(this.arguments);
    }

    /**
     * Specifies a comment for the procedure.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Specifies a comment for the procedure.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * The database in which to create the procedure. Don&#39;t use the | character.
     * 
     */
    @Import(name="database", required=true)
    private Output<String> database;

    /**
     * @return The database in which to create the procedure. Don&#39;t use the | character.
     * 
     */
    public Output<String> database() {
        return this.database;
    }

    /**
     * Sets execute context - see caller&#39;s rights and owner&#39;s rights
     * 
     */
    @Import(name="executeAs")
    private @Nullable Output<String> executeAs;

    /**
     * @return Sets execute context - see caller&#39;s rights and owner&#39;s rights
     * 
     */
    public Optional<Output<String>> executeAs() {
        return Optional.ofNullable(this.executeAs);
    }

    /**
     * Specifies the language of the stored procedure code.
     * 
     */
    @Import(name="language")
    private @Nullable Output<String> language;

    /**
     * @return Specifies the language of the stored procedure code.
     * 
     */
    public Optional<Output<String>> language() {
        return Optional.ofNullable(this.language);
    }

    /**
     * Specifies the identifier for the procedure; does not have to be unique for the schema in which the procedure is created. Don&#39;t use the | character.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the identifier for the procedure; does not have to be unique for the schema in which the procedure is created. Don&#39;t use the | character.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the behavior of the procedure when called with null inputs.
     * 
     */
    @Import(name="nullInputBehavior")
    private @Nullable Output<String> nullInputBehavior;

    /**
     * @return Specifies the behavior of the procedure when called with null inputs.
     * 
     */
    public Optional<Output<String>> nullInputBehavior() {
        return Optional.ofNullable(this.nullInputBehavior);
    }

    /**
     * Specifies the behavior of the function when returning results
     * 
     */
    @Import(name="returnBehavior")
    private @Nullable Output<String> returnBehavior;

    /**
     * @return Specifies the behavior of the function when returning results
     * 
     */
    public Optional<Output<String>> returnBehavior() {
        return Optional.ofNullable(this.returnBehavior);
    }

    /**
     * The return type of the procedure
     * 
     */
    @Import(name="returnType", required=true)
    private Output<String> returnType;

    /**
     * @return The return type of the procedure
     * 
     */
    public Output<String> returnType() {
        return this.returnType;
    }

    /**
     * The schema in which to create the procedure. Don&#39;t use the | character.
     * 
     */
    @Import(name="schema", required=true)
    private Output<String> schema;

    /**
     * @return The schema in which to create the procedure. Don&#39;t use the | character.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }

    /**
     * Specifies the javascript code used to create the procedure.
     * 
     */
    @Import(name="statement", required=true)
    private Output<String> statement;

    /**
     * @return Specifies the javascript code used to create the procedure.
     * 
     */
    public Output<String> statement() {
        return this.statement;
    }

    private ProcedureArgs() {}

    private ProcedureArgs(ProcedureArgs $) {
        this.arguments = $.arguments;
        this.comment = $.comment;
        this.database = $.database;
        this.executeAs = $.executeAs;
        this.language = $.language;
        this.name = $.name;
        this.nullInputBehavior = $.nullInputBehavior;
        this.returnBehavior = $.returnBehavior;
        this.returnType = $.returnType;
        this.schema = $.schema;
        this.statement = $.statement;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProcedureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProcedureArgs $;

        public Builder() {
            $ = new ProcedureArgs();
        }

        public Builder(ProcedureArgs defaults) {
            $ = new ProcedureArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arguments List of the arguments for the procedure
         * 
         * @return builder
         * 
         */
        public Builder arguments(@Nullable Output<List<ProcedureArgumentArgs>> arguments) {
            $.arguments = arguments;
            return this;
        }

        /**
         * @param arguments List of the arguments for the procedure
         * 
         * @return builder
         * 
         */
        public Builder arguments(List<ProcedureArgumentArgs> arguments) {
            return arguments(Output.of(arguments));
        }

        /**
         * @param arguments List of the arguments for the procedure
         * 
         * @return builder
         * 
         */
        public Builder arguments(ProcedureArgumentArgs... arguments) {
            return arguments(List.of(arguments));
        }

        /**
         * @param comment Specifies a comment for the procedure.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Specifies a comment for the procedure.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param database The database in which to create the procedure. Don&#39;t use the | character.
         * 
         * @return builder
         * 
         */
        public Builder database(Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The database in which to create the procedure. Don&#39;t use the | character.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param executeAs Sets execute context - see caller&#39;s rights and owner&#39;s rights
         * 
         * @return builder
         * 
         */
        public Builder executeAs(@Nullable Output<String> executeAs) {
            $.executeAs = executeAs;
            return this;
        }

        /**
         * @param executeAs Sets execute context - see caller&#39;s rights and owner&#39;s rights
         * 
         * @return builder
         * 
         */
        public Builder executeAs(String executeAs) {
            return executeAs(Output.of(executeAs));
        }

        /**
         * @param language Specifies the language of the stored procedure code.
         * 
         * @return builder
         * 
         */
        public Builder language(@Nullable Output<String> language) {
            $.language = language;
            return this;
        }

        /**
         * @param language Specifies the language of the stored procedure code.
         * 
         * @return builder
         * 
         */
        public Builder language(String language) {
            return language(Output.of(language));
        }

        /**
         * @param name Specifies the identifier for the procedure; does not have to be unique for the schema in which the procedure is created. Don&#39;t use the | character.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the identifier for the procedure; does not have to be unique for the schema in which the procedure is created. Don&#39;t use the | character.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nullInputBehavior Specifies the behavior of the procedure when called with null inputs.
         * 
         * @return builder
         * 
         */
        public Builder nullInputBehavior(@Nullable Output<String> nullInputBehavior) {
            $.nullInputBehavior = nullInputBehavior;
            return this;
        }

        /**
         * @param nullInputBehavior Specifies the behavior of the procedure when called with null inputs.
         * 
         * @return builder
         * 
         */
        public Builder nullInputBehavior(String nullInputBehavior) {
            return nullInputBehavior(Output.of(nullInputBehavior));
        }

        /**
         * @param returnBehavior Specifies the behavior of the function when returning results
         * 
         * @return builder
         * 
         */
        public Builder returnBehavior(@Nullable Output<String> returnBehavior) {
            $.returnBehavior = returnBehavior;
            return this;
        }

        /**
         * @param returnBehavior Specifies the behavior of the function when returning results
         * 
         * @return builder
         * 
         */
        public Builder returnBehavior(String returnBehavior) {
            return returnBehavior(Output.of(returnBehavior));
        }

        /**
         * @param returnType The return type of the procedure
         * 
         * @return builder
         * 
         */
        public Builder returnType(Output<String> returnType) {
            $.returnType = returnType;
            return this;
        }

        /**
         * @param returnType The return type of the procedure
         * 
         * @return builder
         * 
         */
        public Builder returnType(String returnType) {
            return returnType(Output.of(returnType));
        }

        /**
         * @param schema The schema in which to create the procedure. Don&#39;t use the | character.
         * 
         * @return builder
         * 
         */
        public Builder schema(Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The schema in which to create the procedure. Don&#39;t use the | character.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param statement Specifies the javascript code used to create the procedure.
         * 
         * @return builder
         * 
         */
        public Builder statement(Output<String> statement) {
            $.statement = statement;
            return this;
        }

        /**
         * @param statement Specifies the javascript code used to create the procedure.
         * 
         * @return builder
         * 
         */
        public Builder statement(String statement) {
            return statement(Output.of(statement));
        }

        public ProcedureArgs build() {
            $.database = Objects.requireNonNull($.database, "expected parameter 'database' to be non-null");
            $.returnType = Objects.requireNonNull($.returnType, "expected parameter 'returnType' to be non-null");
            $.schema = Objects.requireNonNull($.schema, "expected parameter 'schema' to be non-null");
            $.statement = Objects.requireNonNull($.statement, "expected parameter 'statement' to be non-null");
            return $;
        }
    }

}
