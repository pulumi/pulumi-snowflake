// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResourceMonitorArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourceMonitorArgs Empty = new ResourceMonitorArgs();

    /**
     * The number of credits allocated monthly to the resource monitor.
     * 
     */
    @Import(name="creditQuota")
    private @Nullable Output<Integer> creditQuota;

    /**
     * @return The number of credits allocated monthly to the resource monitor.
     * 
     */
    public Optional<Output<Integer>> creditQuota() {
        return Optional.ofNullable(this.creditQuota);
    }

    /**
     * The date and time when the resource monitor suspends the assigned warehouses.
     * 
     */
    @Import(name="endTimestamp")
    private @Nullable Output<String> endTimestamp;

    /**
     * @return The date and time when the resource monitor suspends the assigned warehouses.
     * 
     */
    public Optional<Output<String>> endTimestamp() {
        return Optional.ofNullable(this.endTimestamp);
    }

    /**
     * The frequency interval at which the credit usage resets to 0. If you set a frequency for a resource monitor, you must also set START_TIMESTAMP.
     * 
     */
    @Import(name="frequency")
    private @Nullable Output<String> frequency;

    /**
     * @return The frequency interval at which the credit usage resets to 0. If you set a frequency for a resource monitor, you must also set START_TIMESTAMP.
     * 
     */
    public Optional<Output<String>> frequency() {
        return Optional.ofNullable(this.frequency);
    }

    /**
     * Identifier for the resource monitor; must be unique for your account.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Identifier for the resource monitor; must be unique for your account.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A list of percentage thresholds at which to send an alert to subscribed users.
     * 
     */
    @Import(name="notifyTriggers")
    private @Nullable Output<List<Integer>> notifyTriggers;

    /**
     * @return A list of percentage thresholds at which to send an alert to subscribed users.
     * 
     */
    public Optional<Output<List<Integer>>> notifyTriggers() {
        return Optional.ofNullable(this.notifyTriggers);
    }

    /**
     * Specifies the list of users to receive email notifications on resource monitors.
     * 
     */
    @Import(name="notifyUsers")
    private @Nullable Output<List<String>> notifyUsers;

    /**
     * @return Specifies the list of users to receive email notifications on resource monitors.
     * 
     */
    public Optional<Output<List<String>>> notifyUsers() {
        return Optional.ofNullable(this.notifyUsers);
    }

    /**
     * Specifies whether the resource monitor should be applied globally to your Snowflake account.
     * 
     */
    @Import(name="setForAccount")
    private @Nullable Output<Boolean> setForAccount;

    /**
     * @return Specifies whether the resource monitor should be applied globally to your Snowflake account.
     * 
     */
    public Optional<Output<Boolean>> setForAccount() {
        return Optional.ofNullable(this.setForAccount);
    }

    /**
     * The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses.
     * 
     */
    @Import(name="startTimestamp")
    private @Nullable Output<String> startTimestamp;

    /**
     * @return The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses.
     * 
     */
    public Optional<Output<String>> startTimestamp() {
        return Optional.ofNullable(this.startTimestamp);
    }

    /**
     * A list of percentage thresholds at which to immediately suspend all warehouses.
     * 
     */
    @Import(name="suspendImmediateTriggers")
    private @Nullable Output<List<Integer>> suspendImmediateTriggers;

    /**
     * @return A list of percentage thresholds at which to immediately suspend all warehouses.
     * 
     */
    public Optional<Output<List<Integer>>> suspendImmediateTriggers() {
        return Optional.ofNullable(this.suspendImmediateTriggers);
    }

    /**
     * A list of percentage thresholds at which to suspend all warehouses.
     * 
     */
    @Import(name="suspendTriggers")
    private @Nullable Output<List<Integer>> suspendTriggers;

    /**
     * @return A list of percentage thresholds at which to suspend all warehouses.
     * 
     */
    public Optional<Output<List<Integer>>> suspendTriggers() {
        return Optional.ofNullable(this.suspendTriggers);
    }

    /**
     * A list of warehouses to apply the resource monitor to.
     * 
     */
    @Import(name="warehouses")
    private @Nullable Output<List<String>> warehouses;

    /**
     * @return A list of warehouses to apply the resource monitor to.
     * 
     */
    public Optional<Output<List<String>>> warehouses() {
        return Optional.ofNullable(this.warehouses);
    }

    private ResourceMonitorArgs() {}

    private ResourceMonitorArgs(ResourceMonitorArgs $) {
        this.creditQuota = $.creditQuota;
        this.endTimestamp = $.endTimestamp;
        this.frequency = $.frequency;
        this.name = $.name;
        this.notifyTriggers = $.notifyTriggers;
        this.notifyUsers = $.notifyUsers;
        this.setForAccount = $.setForAccount;
        this.startTimestamp = $.startTimestamp;
        this.suspendImmediateTriggers = $.suspendImmediateTriggers;
        this.suspendTriggers = $.suspendTriggers;
        this.warehouses = $.warehouses;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceMonitorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceMonitorArgs $;

        public Builder() {
            $ = new ResourceMonitorArgs();
        }

        public Builder(ResourceMonitorArgs defaults) {
            $ = new ResourceMonitorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param creditQuota The number of credits allocated monthly to the resource monitor.
         * 
         * @return builder
         * 
         */
        public Builder creditQuota(@Nullable Output<Integer> creditQuota) {
            $.creditQuota = creditQuota;
            return this;
        }

        /**
         * @param creditQuota The number of credits allocated monthly to the resource monitor.
         * 
         * @return builder
         * 
         */
        public Builder creditQuota(Integer creditQuota) {
            return creditQuota(Output.of(creditQuota));
        }

        /**
         * @param endTimestamp The date and time when the resource monitor suspends the assigned warehouses.
         * 
         * @return builder
         * 
         */
        public Builder endTimestamp(@Nullable Output<String> endTimestamp) {
            $.endTimestamp = endTimestamp;
            return this;
        }

        /**
         * @param endTimestamp The date and time when the resource monitor suspends the assigned warehouses.
         * 
         * @return builder
         * 
         */
        public Builder endTimestamp(String endTimestamp) {
            return endTimestamp(Output.of(endTimestamp));
        }

        /**
         * @param frequency The frequency interval at which the credit usage resets to 0. If you set a frequency for a resource monitor, you must also set START_TIMESTAMP.
         * 
         * @return builder
         * 
         */
        public Builder frequency(@Nullable Output<String> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency The frequency interval at which the credit usage resets to 0. If you set a frequency for a resource monitor, you must also set START_TIMESTAMP.
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param name Identifier for the resource monitor; must be unique for your account.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Identifier for the resource monitor; must be unique for your account.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notifyTriggers A list of percentage thresholds at which to send an alert to subscribed users.
         * 
         * @return builder
         * 
         */
        public Builder notifyTriggers(@Nullable Output<List<Integer>> notifyTriggers) {
            $.notifyTriggers = notifyTriggers;
            return this;
        }

        /**
         * @param notifyTriggers A list of percentage thresholds at which to send an alert to subscribed users.
         * 
         * @return builder
         * 
         */
        public Builder notifyTriggers(List<Integer> notifyTriggers) {
            return notifyTriggers(Output.of(notifyTriggers));
        }

        /**
         * @param notifyTriggers A list of percentage thresholds at which to send an alert to subscribed users.
         * 
         * @return builder
         * 
         */
        public Builder notifyTriggers(Integer... notifyTriggers) {
            return notifyTriggers(List.of(notifyTriggers));
        }

        /**
         * @param notifyUsers Specifies the list of users to receive email notifications on resource monitors.
         * 
         * @return builder
         * 
         */
        public Builder notifyUsers(@Nullable Output<List<String>> notifyUsers) {
            $.notifyUsers = notifyUsers;
            return this;
        }

        /**
         * @param notifyUsers Specifies the list of users to receive email notifications on resource monitors.
         * 
         * @return builder
         * 
         */
        public Builder notifyUsers(List<String> notifyUsers) {
            return notifyUsers(Output.of(notifyUsers));
        }

        /**
         * @param notifyUsers Specifies the list of users to receive email notifications on resource monitors.
         * 
         * @return builder
         * 
         */
        public Builder notifyUsers(String... notifyUsers) {
            return notifyUsers(List.of(notifyUsers));
        }

        /**
         * @param setForAccount Specifies whether the resource monitor should be applied globally to your Snowflake account.
         * 
         * @return builder
         * 
         */
        public Builder setForAccount(@Nullable Output<Boolean> setForAccount) {
            $.setForAccount = setForAccount;
            return this;
        }

        /**
         * @param setForAccount Specifies whether the resource monitor should be applied globally to your Snowflake account.
         * 
         * @return builder
         * 
         */
        public Builder setForAccount(Boolean setForAccount) {
            return setForAccount(Output.of(setForAccount));
        }

        /**
         * @param startTimestamp The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses.
         * 
         * @return builder
         * 
         */
        public Builder startTimestamp(@Nullable Output<String> startTimestamp) {
            $.startTimestamp = startTimestamp;
            return this;
        }

        /**
         * @param startTimestamp The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses.
         * 
         * @return builder
         * 
         */
        public Builder startTimestamp(String startTimestamp) {
            return startTimestamp(Output.of(startTimestamp));
        }

        /**
         * @param suspendImmediateTriggers A list of percentage thresholds at which to immediately suspend all warehouses.
         * 
         * @return builder
         * 
         */
        public Builder suspendImmediateTriggers(@Nullable Output<List<Integer>> suspendImmediateTriggers) {
            $.suspendImmediateTriggers = suspendImmediateTriggers;
            return this;
        }

        /**
         * @param suspendImmediateTriggers A list of percentage thresholds at which to immediately suspend all warehouses.
         * 
         * @return builder
         * 
         */
        public Builder suspendImmediateTriggers(List<Integer> suspendImmediateTriggers) {
            return suspendImmediateTriggers(Output.of(suspendImmediateTriggers));
        }

        /**
         * @param suspendImmediateTriggers A list of percentage thresholds at which to immediately suspend all warehouses.
         * 
         * @return builder
         * 
         */
        public Builder suspendImmediateTriggers(Integer... suspendImmediateTriggers) {
            return suspendImmediateTriggers(List.of(suspendImmediateTriggers));
        }

        /**
         * @param suspendTriggers A list of percentage thresholds at which to suspend all warehouses.
         * 
         * @return builder
         * 
         */
        public Builder suspendTriggers(@Nullable Output<List<Integer>> suspendTriggers) {
            $.suspendTriggers = suspendTriggers;
            return this;
        }

        /**
         * @param suspendTriggers A list of percentage thresholds at which to suspend all warehouses.
         * 
         * @return builder
         * 
         */
        public Builder suspendTriggers(List<Integer> suspendTriggers) {
            return suspendTriggers(Output.of(suspendTriggers));
        }

        /**
         * @param suspendTriggers A list of percentage thresholds at which to suspend all warehouses.
         * 
         * @return builder
         * 
         */
        public Builder suspendTriggers(Integer... suspendTriggers) {
            return suspendTriggers(List.of(suspendTriggers));
        }

        /**
         * @param warehouses A list of warehouses to apply the resource monitor to.
         * 
         * @return builder
         * 
         */
        public Builder warehouses(@Nullable Output<List<String>> warehouses) {
            $.warehouses = warehouses;
            return this;
        }

        /**
         * @param warehouses A list of warehouses to apply the resource monitor to.
         * 
         * @return builder
         * 
         */
        public Builder warehouses(List<String> warehouses) {
            return warehouses(Output.of(warehouses));
        }

        /**
         * @param warehouses A list of warehouses to apply the resource monitor to.
         * 
         * @return builder
         * 
         */
        public Builder warehouses(String... warehouses) {
            return warehouses(List.of(warehouses));
        }

        public ResourceMonitorArgs build() {
            return $;
        }
    }

}
