// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretWithGenericStringDescribeOutputArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretWithGenericStringDescribeOutputArgs Empty = new SecretWithGenericStringDescribeOutputArgs();

    @Import(name="comment")
    private @Nullable Output<String> comment;

    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    @Import(name="integrationName")
    private @Nullable Output<String> integrationName;

    public Optional<Output<String>> integrationName() {
        return Optional.ofNullable(this.integrationName);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="oauthAccessTokenExpiryTime")
    private @Nullable Output<String> oauthAccessTokenExpiryTime;

    public Optional<Output<String>> oauthAccessTokenExpiryTime() {
        return Optional.ofNullable(this.oauthAccessTokenExpiryTime);
    }

    @Import(name="oauthRefreshTokenExpiryTime")
    private @Nullable Output<String> oauthRefreshTokenExpiryTime;

    public Optional<Output<String>> oauthRefreshTokenExpiryTime() {
        return Optional.ofNullable(this.oauthRefreshTokenExpiryTime);
    }

    @Import(name="oauthScopes")
    private @Nullable Output<List<String>> oauthScopes;

    public Optional<Output<List<String>>> oauthScopes() {
        return Optional.ofNullable(this.oauthScopes);
    }

    @Import(name="owner")
    private @Nullable Output<String> owner;

    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    @Import(name="schemaName")
    private @Nullable Output<String> schemaName;

    public Optional<Output<String>> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }

    @Import(name="secretType")
    private @Nullable Output<String> secretType;

    public Optional<Output<String>> secretType() {
        return Optional.ofNullable(this.secretType);
    }

    @Import(name="username")
    private @Nullable Output<String> username;

    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private SecretWithGenericStringDescribeOutputArgs() {}

    private SecretWithGenericStringDescribeOutputArgs(SecretWithGenericStringDescribeOutputArgs $) {
        this.comment = $.comment;
        this.createdOn = $.createdOn;
        this.databaseName = $.databaseName;
        this.integrationName = $.integrationName;
        this.name = $.name;
        this.oauthAccessTokenExpiryTime = $.oauthAccessTokenExpiryTime;
        this.oauthRefreshTokenExpiryTime = $.oauthRefreshTokenExpiryTime;
        this.oauthScopes = $.oauthScopes;
        this.owner = $.owner;
        this.schemaName = $.schemaName;
        this.secretType = $.secretType;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretWithGenericStringDescribeOutputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretWithGenericStringDescribeOutputArgs $;

        public Builder() {
            $ = new SecretWithGenericStringDescribeOutputArgs();
        }

        public Builder(SecretWithGenericStringDescribeOutputArgs defaults) {
            $ = new SecretWithGenericStringDescribeOutputArgs(Objects.requireNonNull(defaults));
        }

        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        public Builder integrationName(@Nullable Output<String> integrationName) {
            $.integrationName = integrationName;
            return this;
        }

        public Builder integrationName(String integrationName) {
            return integrationName(Output.of(integrationName));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder oauthAccessTokenExpiryTime(@Nullable Output<String> oauthAccessTokenExpiryTime) {
            $.oauthAccessTokenExpiryTime = oauthAccessTokenExpiryTime;
            return this;
        }

        public Builder oauthAccessTokenExpiryTime(String oauthAccessTokenExpiryTime) {
            return oauthAccessTokenExpiryTime(Output.of(oauthAccessTokenExpiryTime));
        }

        public Builder oauthRefreshTokenExpiryTime(@Nullable Output<String> oauthRefreshTokenExpiryTime) {
            $.oauthRefreshTokenExpiryTime = oauthRefreshTokenExpiryTime;
            return this;
        }

        public Builder oauthRefreshTokenExpiryTime(String oauthRefreshTokenExpiryTime) {
            return oauthRefreshTokenExpiryTime(Output.of(oauthRefreshTokenExpiryTime));
        }

        public Builder oauthScopes(@Nullable Output<List<String>> oauthScopes) {
            $.oauthScopes = oauthScopes;
            return this;
        }

        public Builder oauthScopes(List<String> oauthScopes) {
            return oauthScopes(Output.of(oauthScopes));
        }

        public Builder oauthScopes(String... oauthScopes) {
            return oauthScopes(List.of(oauthScopes));
        }

        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        public Builder schemaName(@Nullable Output<String> schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        public Builder schemaName(String schemaName) {
            return schemaName(Output.of(schemaName));
        }

        public Builder secretType(@Nullable Output<String> secretType) {
            $.secretType = secretType;
            return this;
        }

        public Builder secretType(String secretType) {
            return secretType(Output.of(secretType));
        }

        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        public Builder username(String username) {
            return username(Output.of(username));
        }

        public SecretWithGenericStringDescribeOutputArgs build() {
            return $;
        }
    }

}
