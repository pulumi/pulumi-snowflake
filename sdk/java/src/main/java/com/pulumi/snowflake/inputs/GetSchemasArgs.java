// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.snowflake.inputs.GetSchemasInArgs;
import com.pulumi.snowflake.inputs.GetSchemasLimitArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSchemasArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSchemasArgs Empty = new GetSchemasArgs();

    /**
     * IN clause to filter the list of streamlits
     * 
     */
    @Import(name="in")
    private @Nullable Output<GetSchemasInArgs> in;

    /**
     * @return IN clause to filter the list of streamlits
     * 
     */
    public Optional<Output<GetSchemasInArgs>> in() {
        return Optional.ofNullable(this.in);
    }

    /**
     * Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
     * 
     */
    @Import(name="like")
    private @Nullable Output<String> like;

    /**
     * @return Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
     * 
     */
    public Optional<Output<String>> like() {
        return Optional.ofNullable(this.like);
    }

    /**
     * Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `startsWith` or `like`.
     * 
     */
    @Import(name="limit")
    private @Nullable Output<GetSchemasLimitArgs> limit;

    /**
     * @return Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `startsWith` or `like`.
     * 
     */
    public Optional<Output<GetSchemasLimitArgs>> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * Filters the output with **case-sensitive** characters indicating the beginning of the object name.
     * 
     */
    @Import(name="startsWith")
    private @Nullable Output<String> startsWith;

    /**
     * @return Filters the output with **case-sensitive** characters indicating the beginning of the object name.
     * 
     */
    public Optional<Output<String>> startsWith() {
        return Optional.ofNullable(this.startsWith);
    }

    /**
     * (Default: `true`) Runs DESC SCHEMA for each schema returned by SHOW SCHEMAS. The output of describe is saved to the description field. By default this value is set to true.
     * 
     */
    @Import(name="withDescribe")
    private @Nullable Output<Boolean> withDescribe;

    /**
     * @return (Default: `true`) Runs DESC SCHEMA for each schema returned by SHOW SCHEMAS. The output of describe is saved to the description field. By default this value is set to true.
     * 
     */
    public Optional<Output<Boolean>> withDescribe() {
        return Optional.ofNullable(this.withDescribe);
    }

    /**
     * (Default: `true`) Runs SHOW PARAMETERS FOR SCHEMA for each schema returned by SHOW SCHEMAS. The output of describe is saved to the parameters field as a map. By default this value is set to true.
     * 
     */
    @Import(name="withParameters")
    private @Nullable Output<Boolean> withParameters;

    /**
     * @return (Default: `true`) Runs SHOW PARAMETERS FOR SCHEMA for each schema returned by SHOW SCHEMAS. The output of describe is saved to the parameters field as a map. By default this value is set to true.
     * 
     */
    public Optional<Output<Boolean>> withParameters() {
        return Optional.ofNullable(this.withParameters);
    }

    private GetSchemasArgs() {}

    private GetSchemasArgs(GetSchemasArgs $) {
        this.in = $.in;
        this.like = $.like;
        this.limit = $.limit;
        this.startsWith = $.startsWith;
        this.withDescribe = $.withDescribe;
        this.withParameters = $.withParameters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSchemasArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSchemasArgs $;

        public Builder() {
            $ = new GetSchemasArgs();
        }

        public Builder(GetSchemasArgs defaults) {
            $ = new GetSchemasArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param in IN clause to filter the list of streamlits
         * 
         * @return builder
         * 
         */
        public Builder in(@Nullable Output<GetSchemasInArgs> in) {
            $.in = in;
            return this;
        }

        /**
         * @param in IN clause to filter the list of streamlits
         * 
         * @return builder
         * 
         */
        public Builder in(GetSchemasInArgs in) {
            return in(Output.of(in));
        }

        /**
         * @param like Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
         * 
         * @return builder
         * 
         */
        public Builder like(@Nullable Output<String> like) {
            $.like = like;
            return this;
        }

        /**
         * @param like Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
         * 
         * @return builder
         * 
         */
        public Builder like(String like) {
            return like(Output.of(like));
        }

        /**
         * @param limit Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `startsWith` or `like`.
         * 
         * @return builder
         * 
         */
        public Builder limit(@Nullable Output<GetSchemasLimitArgs> limit) {
            $.limit = limit;
            return this;
        }

        /**
         * @param limit Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `startsWith` or `like`.
         * 
         * @return builder
         * 
         */
        public Builder limit(GetSchemasLimitArgs limit) {
            return limit(Output.of(limit));
        }

        /**
         * @param startsWith Filters the output with **case-sensitive** characters indicating the beginning of the object name.
         * 
         * @return builder
         * 
         */
        public Builder startsWith(@Nullable Output<String> startsWith) {
            $.startsWith = startsWith;
            return this;
        }

        /**
         * @param startsWith Filters the output with **case-sensitive** characters indicating the beginning of the object name.
         * 
         * @return builder
         * 
         */
        public Builder startsWith(String startsWith) {
            return startsWith(Output.of(startsWith));
        }

        /**
         * @param withDescribe (Default: `true`) Runs DESC SCHEMA for each schema returned by SHOW SCHEMAS. The output of describe is saved to the description field. By default this value is set to true.
         * 
         * @return builder
         * 
         */
        public Builder withDescribe(@Nullable Output<Boolean> withDescribe) {
            $.withDescribe = withDescribe;
            return this;
        }

        /**
         * @param withDescribe (Default: `true`) Runs DESC SCHEMA for each schema returned by SHOW SCHEMAS. The output of describe is saved to the description field. By default this value is set to true.
         * 
         * @return builder
         * 
         */
        public Builder withDescribe(Boolean withDescribe) {
            return withDescribe(Output.of(withDescribe));
        }

        /**
         * @param withParameters (Default: `true`) Runs SHOW PARAMETERS FOR SCHEMA for each schema returned by SHOW SCHEMAS. The output of describe is saved to the parameters field as a map. By default this value is set to true.
         * 
         * @return builder
         * 
         */
        public Builder withParameters(@Nullable Output<Boolean> withParameters) {
            $.withParameters = withParameters;
            return this;
        }

        /**
         * @param withParameters (Default: `true`) Runs SHOW PARAMETERS FOR SCHEMA for each schema returned by SHOW SCHEMAS. The output of describe is saved to the parameters field as a map. By default this value is set to true.
         * 
         * @return builder
         * 
         */
        public Builder withParameters(Boolean withParameters) {
            return withParameters(Output.of(withParameters));
        }

        public GetSchemasArgs build() {
            return $;
        }
    }

}
