// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GrantPrivilegesToDatabaseRoleOnSchemaArgs extends com.pulumi.resources.ResourceArgs {

    public static final GrantPrivilegesToDatabaseRoleOnSchemaArgs Empty = new GrantPrivilegesToDatabaseRoleOnSchemaArgs();

    /**
     * The fully qualified name of the database.
     * 
     */
    @Import(name="allSchemasInDatabase")
    private @Nullable Output<String> allSchemasInDatabase;

    /**
     * @return The fully qualified name of the database.
     * 
     */
    public Optional<Output<String>> allSchemasInDatabase() {
        return Optional.ofNullable(this.allSchemasInDatabase);
    }

    /**
     * The fully qualified name of the database.
     * 
     */
    @Import(name="futureSchemasInDatabase")
    private @Nullable Output<String> futureSchemasInDatabase;

    /**
     * @return The fully qualified name of the database.
     * 
     */
    public Optional<Output<String>> futureSchemasInDatabase() {
        return Optional.ofNullable(this.futureSchemasInDatabase);
    }

    /**
     * The fully qualified name of the schema.
     * 
     */
    @Import(name="schemaName")
    private @Nullable Output<String> schemaName;

    /**
     * @return The fully qualified name of the schema.
     * 
     */
    public Optional<Output<String>> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }

    private GrantPrivilegesToDatabaseRoleOnSchemaArgs() {}

    private GrantPrivilegesToDatabaseRoleOnSchemaArgs(GrantPrivilegesToDatabaseRoleOnSchemaArgs $) {
        this.allSchemasInDatabase = $.allSchemasInDatabase;
        this.futureSchemasInDatabase = $.futureSchemasInDatabase;
        this.schemaName = $.schemaName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GrantPrivilegesToDatabaseRoleOnSchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GrantPrivilegesToDatabaseRoleOnSchemaArgs $;

        public Builder() {
            $ = new GrantPrivilegesToDatabaseRoleOnSchemaArgs();
        }

        public Builder(GrantPrivilegesToDatabaseRoleOnSchemaArgs defaults) {
            $ = new GrantPrivilegesToDatabaseRoleOnSchemaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allSchemasInDatabase The fully qualified name of the database.
         * 
         * @return builder
         * 
         */
        public Builder allSchemasInDatabase(@Nullable Output<String> allSchemasInDatabase) {
            $.allSchemasInDatabase = allSchemasInDatabase;
            return this;
        }

        /**
         * @param allSchemasInDatabase The fully qualified name of the database.
         * 
         * @return builder
         * 
         */
        public Builder allSchemasInDatabase(String allSchemasInDatabase) {
            return allSchemasInDatabase(Output.of(allSchemasInDatabase));
        }

        /**
         * @param futureSchemasInDatabase The fully qualified name of the database.
         * 
         * @return builder
         * 
         */
        public Builder futureSchemasInDatabase(@Nullable Output<String> futureSchemasInDatabase) {
            $.futureSchemasInDatabase = futureSchemasInDatabase;
            return this;
        }

        /**
         * @param futureSchemasInDatabase The fully qualified name of the database.
         * 
         * @return builder
         * 
         */
        public Builder futureSchemasInDatabase(String futureSchemasInDatabase) {
            return futureSchemasInDatabase(Output.of(futureSchemasInDatabase));
        }

        /**
         * @param schemaName The fully qualified name of the schema.
         * 
         * @return builder
         * 
         */
        public Builder schemaName(@Nullable Output<String> schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        /**
         * @param schemaName The fully qualified name of the schema.
         * 
         * @return builder
         * 
         */
        public Builder schemaName(String schemaName) {
            return schemaName(Output.of(schemaName));
        }

        public GrantPrivilegesToDatabaseRoleOnSchemaArgs build() {
            return $;
        }
    }

}
