// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.snowflake.outputs.ViewColumnMaskingPolicy;
import com.pulumi.snowflake.outputs.ViewColumnProjectionPolicy;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ViewColumn {
    /**
     * @return Specifies affected column name.
     * 
     */
    private String columnName;
    /**
     * @return Specifies a comment for the column.
     * 
     */
    private @Nullable String comment;
    private @Nullable ViewColumnMaskingPolicy maskingPolicy;
    private @Nullable ViewColumnProjectionPolicy projectionPolicy;

    private ViewColumn() {}
    /**
     * @return Specifies affected column name.
     * 
     */
    public String columnName() {
        return this.columnName;
    }
    /**
     * @return Specifies a comment for the column.
     * 
     */
    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }
    public Optional<ViewColumnMaskingPolicy> maskingPolicy() {
        return Optional.ofNullable(this.maskingPolicy);
    }
    public Optional<ViewColumnProjectionPolicy> projectionPolicy() {
        return Optional.ofNullable(this.projectionPolicy);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ViewColumn defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String columnName;
        private @Nullable String comment;
        private @Nullable ViewColumnMaskingPolicy maskingPolicy;
        private @Nullable ViewColumnProjectionPolicy projectionPolicy;
        public Builder() {}
        public Builder(ViewColumn defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columnName = defaults.columnName;
    	      this.comment = defaults.comment;
    	      this.maskingPolicy = defaults.maskingPolicy;
    	      this.projectionPolicy = defaults.projectionPolicy;
        }

        @CustomType.Setter
        public Builder columnName(String columnName) {
            if (columnName == null) {
              throw new MissingRequiredPropertyException("ViewColumn", "columnName");
            }
            this.columnName = columnName;
            return this;
        }
        @CustomType.Setter
        public Builder comment(@Nullable String comment) {

            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder maskingPolicy(@Nullable ViewColumnMaskingPolicy maskingPolicy) {

            this.maskingPolicy = maskingPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder projectionPolicy(@Nullable ViewColumnProjectionPolicy projectionPolicy) {

            this.projectionPolicy = projectionPolicy;
            return this;
        }
        public ViewColumn build() {
            final var _resultValue = new ViewColumn();
            _resultValue.columnName = columnName;
            _resultValue.comment = comment;
            _resultValue.maskingPolicy = maskingPolicy;
            _resultValue.projectionPolicy = projectionPolicy;
            return _resultValue;
        }
    }
}
