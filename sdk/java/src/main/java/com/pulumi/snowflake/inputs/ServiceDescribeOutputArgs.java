// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceDescribeOutputArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceDescribeOutputArgs Empty = new ServiceDescribeOutputArgs();

    @Import(name="autoResume")
    private @Nullable Output<Boolean> autoResume;

    public Optional<Output<Boolean>> autoResume() {
        return Optional.ofNullable(this.autoResume);
    }

    @Import(name="autoSuspendSecs")
    private @Nullable Output<Integer> autoSuspendSecs;

    public Optional<Output<Integer>> autoSuspendSecs() {
        return Optional.ofNullable(this.autoSuspendSecs);
    }

    @Import(name="comment")
    private @Nullable Output<String> comment;

    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="computePool")
    private @Nullable Output<String> computePool;

    public Optional<Output<String>> computePool() {
        return Optional.ofNullable(this.computePool);
    }

    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    @Import(name="currentInstances")
    private @Nullable Output<Integer> currentInstances;

    public Optional<Output<Integer>> currentInstances() {
        return Optional.ofNullable(this.currentInstances);
    }

    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    @Import(name="dnsName")
    private @Nullable Output<String> dnsName;

    public Optional<Output<String>> dnsName() {
        return Optional.ofNullable(this.dnsName);
    }

    @Import(name="externalAccessIntegrations")
    private @Nullable Output<List<String>> externalAccessIntegrations;

    public Optional<Output<List<String>>> externalAccessIntegrations() {
        return Optional.ofNullable(this.externalAccessIntegrations);
    }

    @Import(name="isAsyncJob")
    private @Nullable Output<Boolean> isAsyncJob;

    public Optional<Output<Boolean>> isAsyncJob() {
        return Optional.ofNullable(this.isAsyncJob);
    }

    @Import(name="isJob")
    private @Nullable Output<Boolean> isJob;

    public Optional<Output<Boolean>> isJob() {
        return Optional.ofNullable(this.isJob);
    }

    @Import(name="isUpgrading")
    private @Nullable Output<Boolean> isUpgrading;

    public Optional<Output<Boolean>> isUpgrading() {
        return Optional.ofNullable(this.isUpgrading);
    }

    @Import(name="managingObjectDomain")
    private @Nullable Output<String> managingObjectDomain;

    public Optional<Output<String>> managingObjectDomain() {
        return Optional.ofNullable(this.managingObjectDomain);
    }

    @Import(name="managingObjectName")
    private @Nullable Output<String> managingObjectName;

    public Optional<Output<String>> managingObjectName() {
        return Optional.ofNullable(this.managingObjectName);
    }

    @Import(name="maxInstances")
    private @Nullable Output<Integer> maxInstances;

    public Optional<Output<Integer>> maxInstances() {
        return Optional.ofNullable(this.maxInstances);
    }

    @Import(name="minInstances")
    private @Nullable Output<Integer> minInstances;

    public Optional<Output<Integer>> minInstances() {
        return Optional.ofNullable(this.minInstances);
    }

    @Import(name="minReadyInstances")
    private @Nullable Output<Integer> minReadyInstances;

    public Optional<Output<Integer>> minReadyInstances() {
        return Optional.ofNullable(this.minReadyInstances);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="owner")
    private @Nullable Output<String> owner;

    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    @Import(name="ownerRoleType")
    private @Nullable Output<String> ownerRoleType;

    public Optional<Output<String>> ownerRoleType() {
        return Optional.ofNullable(this.ownerRoleType);
    }

    @Import(name="queryWarehouse")
    private @Nullable Output<String> queryWarehouse;

    public Optional<Output<String>> queryWarehouse() {
        return Optional.ofNullable(this.queryWarehouse);
    }

    @Import(name="resumedOn")
    private @Nullable Output<String> resumedOn;

    public Optional<Output<String>> resumedOn() {
        return Optional.ofNullable(this.resumedOn);
    }

    @Import(name="schemaName")
    private @Nullable Output<String> schemaName;

    public Optional<Output<String>> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }

    @Import(name="spec")
    private @Nullable Output<String> spec;

    public Optional<Output<String>> spec() {
        return Optional.ofNullable(this.spec);
    }

    @Import(name="specDigest")
    private @Nullable Output<String> specDigest;

    public Optional<Output<String>> specDigest() {
        return Optional.ofNullable(this.specDigest);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="suspendedOn")
    private @Nullable Output<String> suspendedOn;

    public Optional<Output<String>> suspendedOn() {
        return Optional.ofNullable(this.suspendedOn);
    }

    @Import(name="targetInstances")
    private @Nullable Output<Integer> targetInstances;

    public Optional<Output<Integer>> targetInstances() {
        return Optional.ofNullable(this.targetInstances);
    }

    @Import(name="updatedOn")
    private @Nullable Output<String> updatedOn;

    public Optional<Output<String>> updatedOn() {
        return Optional.ofNullable(this.updatedOn);
    }

    private ServiceDescribeOutputArgs() {}

    private ServiceDescribeOutputArgs(ServiceDescribeOutputArgs $) {
        this.autoResume = $.autoResume;
        this.autoSuspendSecs = $.autoSuspendSecs;
        this.comment = $.comment;
        this.computePool = $.computePool;
        this.createdOn = $.createdOn;
        this.currentInstances = $.currentInstances;
        this.databaseName = $.databaseName;
        this.dnsName = $.dnsName;
        this.externalAccessIntegrations = $.externalAccessIntegrations;
        this.isAsyncJob = $.isAsyncJob;
        this.isJob = $.isJob;
        this.isUpgrading = $.isUpgrading;
        this.managingObjectDomain = $.managingObjectDomain;
        this.managingObjectName = $.managingObjectName;
        this.maxInstances = $.maxInstances;
        this.minInstances = $.minInstances;
        this.minReadyInstances = $.minReadyInstances;
        this.name = $.name;
        this.owner = $.owner;
        this.ownerRoleType = $.ownerRoleType;
        this.queryWarehouse = $.queryWarehouse;
        this.resumedOn = $.resumedOn;
        this.schemaName = $.schemaName;
        this.spec = $.spec;
        this.specDigest = $.specDigest;
        this.status = $.status;
        this.suspendedOn = $.suspendedOn;
        this.targetInstances = $.targetInstances;
        this.updatedOn = $.updatedOn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceDescribeOutputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceDescribeOutputArgs $;

        public Builder() {
            $ = new ServiceDescribeOutputArgs();
        }

        public Builder(ServiceDescribeOutputArgs defaults) {
            $ = new ServiceDescribeOutputArgs(Objects.requireNonNull(defaults));
        }

        public Builder autoResume(@Nullable Output<Boolean> autoResume) {
            $.autoResume = autoResume;
            return this;
        }

        public Builder autoResume(Boolean autoResume) {
            return autoResume(Output.of(autoResume));
        }

        public Builder autoSuspendSecs(@Nullable Output<Integer> autoSuspendSecs) {
            $.autoSuspendSecs = autoSuspendSecs;
            return this;
        }

        public Builder autoSuspendSecs(Integer autoSuspendSecs) {
            return autoSuspendSecs(Output.of(autoSuspendSecs));
        }

        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder computePool(@Nullable Output<String> computePool) {
            $.computePool = computePool;
            return this;
        }

        public Builder computePool(String computePool) {
            return computePool(Output.of(computePool));
        }

        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        public Builder currentInstances(@Nullable Output<Integer> currentInstances) {
            $.currentInstances = currentInstances;
            return this;
        }

        public Builder currentInstances(Integer currentInstances) {
            return currentInstances(Output.of(currentInstances));
        }

        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        public Builder dnsName(@Nullable Output<String> dnsName) {
            $.dnsName = dnsName;
            return this;
        }

        public Builder dnsName(String dnsName) {
            return dnsName(Output.of(dnsName));
        }

        public Builder externalAccessIntegrations(@Nullable Output<List<String>> externalAccessIntegrations) {
            $.externalAccessIntegrations = externalAccessIntegrations;
            return this;
        }

        public Builder externalAccessIntegrations(List<String> externalAccessIntegrations) {
            return externalAccessIntegrations(Output.of(externalAccessIntegrations));
        }

        public Builder externalAccessIntegrations(String... externalAccessIntegrations) {
            return externalAccessIntegrations(List.of(externalAccessIntegrations));
        }

        public Builder isAsyncJob(@Nullable Output<Boolean> isAsyncJob) {
            $.isAsyncJob = isAsyncJob;
            return this;
        }

        public Builder isAsyncJob(Boolean isAsyncJob) {
            return isAsyncJob(Output.of(isAsyncJob));
        }

        public Builder isJob(@Nullable Output<Boolean> isJob) {
            $.isJob = isJob;
            return this;
        }

        public Builder isJob(Boolean isJob) {
            return isJob(Output.of(isJob));
        }

        public Builder isUpgrading(@Nullable Output<Boolean> isUpgrading) {
            $.isUpgrading = isUpgrading;
            return this;
        }

        public Builder isUpgrading(Boolean isUpgrading) {
            return isUpgrading(Output.of(isUpgrading));
        }

        public Builder managingObjectDomain(@Nullable Output<String> managingObjectDomain) {
            $.managingObjectDomain = managingObjectDomain;
            return this;
        }

        public Builder managingObjectDomain(String managingObjectDomain) {
            return managingObjectDomain(Output.of(managingObjectDomain));
        }

        public Builder managingObjectName(@Nullable Output<String> managingObjectName) {
            $.managingObjectName = managingObjectName;
            return this;
        }

        public Builder managingObjectName(String managingObjectName) {
            return managingObjectName(Output.of(managingObjectName));
        }

        public Builder maxInstances(@Nullable Output<Integer> maxInstances) {
            $.maxInstances = maxInstances;
            return this;
        }

        public Builder maxInstances(Integer maxInstances) {
            return maxInstances(Output.of(maxInstances));
        }

        public Builder minInstances(@Nullable Output<Integer> minInstances) {
            $.minInstances = minInstances;
            return this;
        }

        public Builder minInstances(Integer minInstances) {
            return minInstances(Output.of(minInstances));
        }

        public Builder minReadyInstances(@Nullable Output<Integer> minReadyInstances) {
            $.minReadyInstances = minReadyInstances;
            return this;
        }

        public Builder minReadyInstances(Integer minReadyInstances) {
            return minReadyInstances(Output.of(minReadyInstances));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        public Builder ownerRoleType(@Nullable Output<String> ownerRoleType) {
            $.ownerRoleType = ownerRoleType;
            return this;
        }

        public Builder ownerRoleType(String ownerRoleType) {
            return ownerRoleType(Output.of(ownerRoleType));
        }

        public Builder queryWarehouse(@Nullable Output<String> queryWarehouse) {
            $.queryWarehouse = queryWarehouse;
            return this;
        }

        public Builder queryWarehouse(String queryWarehouse) {
            return queryWarehouse(Output.of(queryWarehouse));
        }

        public Builder resumedOn(@Nullable Output<String> resumedOn) {
            $.resumedOn = resumedOn;
            return this;
        }

        public Builder resumedOn(String resumedOn) {
            return resumedOn(Output.of(resumedOn));
        }

        public Builder schemaName(@Nullable Output<String> schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        public Builder schemaName(String schemaName) {
            return schemaName(Output.of(schemaName));
        }

        public Builder spec(@Nullable Output<String> spec) {
            $.spec = spec;
            return this;
        }

        public Builder spec(String spec) {
            return spec(Output.of(spec));
        }

        public Builder specDigest(@Nullable Output<String> specDigest) {
            $.specDigest = specDigest;
            return this;
        }

        public Builder specDigest(String specDigest) {
            return specDigest(Output.of(specDigest));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder suspendedOn(@Nullable Output<String> suspendedOn) {
            $.suspendedOn = suspendedOn;
            return this;
        }

        public Builder suspendedOn(String suspendedOn) {
            return suspendedOn(Output.of(suspendedOn));
        }

        public Builder targetInstances(@Nullable Output<Integer> targetInstances) {
            $.targetInstances = targetInstances;
            return this;
        }

        public Builder targetInstances(Integer targetInstances) {
            return targetInstances(Output.of(targetInstances));
        }

        public Builder updatedOn(@Nullable Output<String> updatedOn) {
            $.updatedOn = updatedOn;
            return this;
        }

        public Builder updatedOn(String updatedOn) {
            return updatedOn(Output.of(updatedOn));
        }

        public ServiceDescribeOutputArgs build() {
            return $;
        }
    }

}
