// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.snowflake.inputs.TableColumnDefaultArgs;
import com.pulumi.snowflake.inputs.TableColumnIdentityArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableColumnArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableColumnArgs Empty = new TableColumnArgs();

    /**
     * Column comment
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Column comment
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * Defines the column default value; note due to limitations of Snowflake&#39;s ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied
     * 
     */
    @Import(name="default")
    private @Nullable Output<TableColumnDefaultArgs> default_;

    /**
     * @return Defines the column default value; note due to limitations of Snowflake&#39;s ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied
     * 
     */
    public Optional<Output<TableColumnDefaultArgs>> default_() {
        return Optional.ofNullable(this.default_);
    }

    /**
     * Defines the identity start/step values for a column. **Note** Identity/default are mutually exclusive.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<TableColumnIdentityArgs> identity;

    /**
     * @return Defines the identity start/step values for a column. **Note** Identity/default are mutually exclusive.
     * 
     */
    public Optional<Output<TableColumnIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * Masking policy to apply on column
     * 
     */
    @Import(name="maskingPolicy")
    private @Nullable Output<String> maskingPolicy;

    /**
     * @return Masking policy to apply on column
     * 
     */
    public Optional<Output<String>> maskingPolicy() {
        return Optional.ofNullable(this.maskingPolicy);
    }

    /**
     * Column name
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Column name
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
     * 
     */
    @Import(name="nullable")
    private @Nullable Output<Boolean> nullable;

    /**
     * @return Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
     * 
     */
    public Optional<Output<Boolean>> nullable() {
        return Optional.ofNullable(this.nullable);
    }

    /**
     * Column type, e.g. VARIANT
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Column type, e.g. VARIANT
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private TableColumnArgs() {}

    private TableColumnArgs(TableColumnArgs $) {
        this.comment = $.comment;
        this.default_ = $.default_;
        this.identity = $.identity;
        this.maskingPolicy = $.maskingPolicy;
        this.name = $.name;
        this.nullable = $.nullable;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableColumnArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableColumnArgs $;

        public Builder() {
            $ = new TableColumnArgs();
        }

        public Builder(TableColumnArgs defaults) {
            $ = new TableColumnArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment Column comment
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Column comment
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param default_ Defines the column default value; note due to limitations of Snowflake&#39;s ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied
         * 
         * @return builder
         * 
         */
        public Builder default_(@Nullable Output<TableColumnDefaultArgs> default_) {
            $.default_ = default_;
            return this;
        }

        /**
         * @param default_ Defines the column default value; note due to limitations of Snowflake&#39;s ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied
         * 
         * @return builder
         * 
         */
        public Builder default_(TableColumnDefaultArgs default_) {
            return default_(Output.of(default_));
        }

        /**
         * @param identity Defines the identity start/step values for a column. **Note** Identity/default are mutually exclusive.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<TableColumnIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity Defines the identity start/step values for a column. **Note** Identity/default are mutually exclusive.
         * 
         * @return builder
         * 
         */
        public Builder identity(TableColumnIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param maskingPolicy Masking policy to apply on column
         * 
         * @return builder
         * 
         */
        public Builder maskingPolicy(@Nullable Output<String> maskingPolicy) {
            $.maskingPolicy = maskingPolicy;
            return this;
        }

        /**
         * @param maskingPolicy Masking policy to apply on column
         * 
         * @return builder
         * 
         */
        public Builder maskingPolicy(String maskingPolicy) {
            return maskingPolicy(Output.of(maskingPolicy));
        }

        /**
         * @param name Column name
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Column name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nullable Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
         * 
         * @return builder
         * 
         */
        public Builder nullable(@Nullable Output<Boolean> nullable) {
            $.nullable = nullable;
            return this;
        }

        /**
         * @param nullable Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
         * 
         * @return builder
         * 
         */
        public Builder nullable(Boolean nullable) {
            return nullable(Output.of(nullable));
        }

        /**
         * @param type Column type, e.g. VARIANT
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Column type, e.g. VARIANT
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public TableColumnArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
