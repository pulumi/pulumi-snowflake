// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamlitArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamlitArgs Empty = new StreamlitArgs();

    /**
     * Specifies a comment for the streamlit.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Specifies a comment for the streamlit.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * The database in which to create the streamlit Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="database", required=true)
    private Output<String> database;

    /**
     * @return The database in which to create the streamlit Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> database() {
        return this.database;
    }

    /**
     * Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml
     * file.
     * 
     */
    @Import(name="directoryLocation")
    private @Nullable Output<String> directoryLocation;

    /**
     * @return Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml
     * file.
     * 
     */
    public Optional<Output<String>> directoryLocation() {
        return Optional.ofNullable(this.directoryLocation);
    }

    /**
     * External access integrations connected to the Streamlit.
     * 
     */
    @Import(name="externalAccessIntegrations")
    private @Nullable Output<List<String>> externalAccessIntegrations;

    /**
     * @return External access integrations connected to the Streamlit.
     * 
     */
    public Optional<Output<List<String>>> externalAccessIntegrations() {
        return Optional.ofNullable(this.externalAccessIntegrations);
    }

    /**
     * Specifies the filename of the Streamlit Python application. This filename is relative to the value of
     * `directory_location`
     * 
     */
    @Import(name="mainFile", required=true)
    private Output<String> mainFile;

    /**
     * @return Specifies the filename of the Streamlit Python application. This filename is relative to the value of
     * `directory_location`
     * 
     */
    public Output<String> mainFile() {
        return this.mainFile;
    }

    /**
     * String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account. Due to technical
     * limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account. Due to technical
     * limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the warehouse where SQL queries issued by the Streamlit application are run. Due to Snowflake limitations
     * warehouse identifier can consist of only upper-cased letters. For more information about this resource, see docs.
     * 
     */
    @Import(name="queryWarehouse")
    private @Nullable Output<String> queryWarehouse;

    /**
     * @return Specifies the warehouse where SQL queries issued by the Streamlit application are run. Due to Snowflake limitations
     * warehouse identifier can consist of only upper-cased letters. For more information about this resource, see docs.
     * 
     */
    public Optional<Output<String>> queryWarehouse() {
        return Optional.ofNullable(this.queryWarehouse);
    }

    /**
     * The schema in which to create the streamlit. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="schema", required=true)
    private Output<String> schema;

    /**
     * @return The schema in which to create the streamlit. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }

    /**
     * The stage in which streamlit files are located. For more information about this resource, see docs.
     * 
     */
    @Import(name="stage", required=true)
    private Output<String> stage;

    /**
     * @return The stage in which streamlit files are located. For more information about this resource, see docs.
     * 
     */
    public Output<String> stage() {
        return this.stage;
    }

    /**
     * Specifies a title for the Streamlit app to display in Snowsight.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return Specifies a title for the Streamlit app to display in Snowsight.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    private StreamlitArgs() {}

    private StreamlitArgs(StreamlitArgs $) {
        this.comment = $.comment;
        this.database = $.database;
        this.directoryLocation = $.directoryLocation;
        this.externalAccessIntegrations = $.externalAccessIntegrations;
        this.mainFile = $.mainFile;
        this.name = $.name;
        this.queryWarehouse = $.queryWarehouse;
        this.schema = $.schema;
        this.stage = $.stage;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamlitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamlitArgs $;

        public Builder() {
            $ = new StreamlitArgs();
        }

        public Builder(StreamlitArgs defaults) {
            $ = new StreamlitArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment Specifies a comment for the streamlit.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Specifies a comment for the streamlit.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param database The database in which to create the streamlit Due to technical limitations (read more here), avoid using the following
         * characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The database in which to create the streamlit Due to technical limitations (read more here), avoid using the following
         * characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param directoryLocation Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml
         * file.
         * 
         * @return builder
         * 
         */
        public Builder directoryLocation(@Nullable Output<String> directoryLocation) {
            $.directoryLocation = directoryLocation;
            return this;
        }

        /**
         * @param directoryLocation Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml
         * file.
         * 
         * @return builder
         * 
         */
        public Builder directoryLocation(String directoryLocation) {
            return directoryLocation(Output.of(directoryLocation));
        }

        /**
         * @param externalAccessIntegrations External access integrations connected to the Streamlit.
         * 
         * @return builder
         * 
         */
        public Builder externalAccessIntegrations(@Nullable Output<List<String>> externalAccessIntegrations) {
            $.externalAccessIntegrations = externalAccessIntegrations;
            return this;
        }

        /**
         * @param externalAccessIntegrations External access integrations connected to the Streamlit.
         * 
         * @return builder
         * 
         */
        public Builder externalAccessIntegrations(List<String> externalAccessIntegrations) {
            return externalAccessIntegrations(Output.of(externalAccessIntegrations));
        }

        /**
         * @param externalAccessIntegrations External access integrations connected to the Streamlit.
         * 
         * @return builder
         * 
         */
        public Builder externalAccessIntegrations(String... externalAccessIntegrations) {
            return externalAccessIntegrations(List.of(externalAccessIntegrations));
        }

        /**
         * @param mainFile Specifies the filename of the Streamlit Python application. This filename is relative to the value of
         * `directory_location`
         * 
         * @return builder
         * 
         */
        public Builder mainFile(Output<String> mainFile) {
            $.mainFile = mainFile;
            return this;
        }

        /**
         * @param mainFile Specifies the filename of the Streamlit Python application. This filename is relative to the value of
         * `directory_location`
         * 
         * @return builder
         * 
         */
        public Builder mainFile(String mainFile) {
            return mainFile(Output.of(mainFile));
        }

        /**
         * @param name String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account. Due to technical
         * limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account. Due to technical
         * limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param queryWarehouse Specifies the warehouse where SQL queries issued by the Streamlit application are run. Due to Snowflake limitations
         * warehouse identifier can consist of only upper-cased letters. For more information about this resource, see docs.
         * 
         * @return builder
         * 
         */
        public Builder queryWarehouse(@Nullable Output<String> queryWarehouse) {
            $.queryWarehouse = queryWarehouse;
            return this;
        }

        /**
         * @param queryWarehouse Specifies the warehouse where SQL queries issued by the Streamlit application are run. Due to Snowflake limitations
         * warehouse identifier can consist of only upper-cased letters. For more information about this resource, see docs.
         * 
         * @return builder
         * 
         */
        public Builder queryWarehouse(String queryWarehouse) {
            return queryWarehouse(Output.of(queryWarehouse));
        }

        /**
         * @param schema The schema in which to create the streamlit. Due to technical limitations (read more here), avoid using the following
         * characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder schema(Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The schema in which to create the streamlit. Due to technical limitations (read more here), avoid using the following
         * characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param stage The stage in which streamlit files are located. For more information about this resource, see docs.
         * 
         * @return builder
         * 
         */
        public Builder stage(Output<String> stage) {
            $.stage = stage;
            return this;
        }

        /**
         * @param stage The stage in which streamlit files are located. For more information about this resource, see docs.
         * 
         * @return builder
         * 
         */
        public Builder stage(String stage) {
            return stage(Output.of(stage));
        }

        /**
         * @param title Specifies a title for the Streamlit app to display in Snowsight.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title Specifies a title for the Streamlit app to display in Snowsight.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        public StreamlitArgs build() {
            if ($.database == null) {
                throw new MissingRequiredPropertyException("StreamlitArgs", "database");
            }
            if ($.mainFile == null) {
                throw new MissingRequiredPropertyException("StreamlitArgs", "mainFile");
            }
            if ($.schema == null) {
                throw new MissingRequiredPropertyException("StreamlitArgs", "schema");
            }
            if ($.stage == null) {
                throw new MissingRequiredPropertyException("StreamlitArgs", "stage");
            }
            return $;
        }
    }

}
