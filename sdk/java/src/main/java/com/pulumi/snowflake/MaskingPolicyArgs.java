// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.snowflake.inputs.MaskingPolicyArgumentArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MaskingPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final MaskingPolicyArgs Empty = new MaskingPolicyArgs();

    /**
     * List of the arguments for the masking policy. The first column and its data type always indicate the column data type
     * values to mask or tokenize in the subsequent policy conditions. Note that you can not specify a virtual column as the
     * first column argument in a conditional masking policy.
     * 
     */
    @Import(name="arguments", required=true)
    private Output<List<MaskingPolicyArgumentArgs>> arguments;

    /**
     * @return List of the arguments for the masking policy. The first column and its data type always indicate the column data type
     * values to mask or tokenize in the subsequent policy conditions. Note that you can not specify a virtual column as the
     * first column argument in a conditional masking policy.
     * 
     */
    public Output<List<MaskingPolicyArgumentArgs>> arguments() {
        return this.arguments;
    }

    /**
     * Specifies the SQL expression that transforms the data. To mitigate permadiff on this field, the provider replaces blank
     * characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is
     * semantically significant.
     * 
     */
    @Import(name="body", required=true)
    private Output<String> body;

    /**
     * @return Specifies the SQL expression that transforms the data. To mitigate permadiff on this field, the provider replaces blank
     * characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is
     * semantically significant.
     * 
     */
    public Output<String> body() {
        return this.body;
    }

    /**
     * Specifies a comment for the masking policy.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Specifies a comment for the masking policy.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * The database in which to create the masking policy. Due to technical limitations (read more here), avoid using the
     * following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="database", required=true)
    private Output<String> database;

    /**
     * @return The database in which to create the masking policy. Due to technical limitations (read more here), avoid using the
     * following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> database() {
        return this.database;
    }

    /**
     * Specifies whether the row access policy or conditional masking policy can reference a column that is already protected
     * by a masking policy. Due to Snowflake limitations, when value is changed, the resource is recreated. Available options
     * are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means
     * to use the Snowflake default for this value.
     * 
     */
    @Import(name="exemptOtherPolicies")
    private @Nullable Output<String> exemptOtherPolicies;

    /**
     * @return Specifies whether the row access policy or conditional masking policy can reference a column that is already protected
     * by a masking policy. Due to Snowflake limitations, when value is changed, the resource is recreated. Available options
     * are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means
     * to use the Snowflake default for this value.
     * 
     */
    public Optional<Output<String>> exemptOtherPolicies() {
        return Optional.ofNullable(this.exemptOtherPolicies);
    }

    /**
     * Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy
     * is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy
     * is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The return data type must match the input data type of the first column that is specified as an input column. For more
     * information about data types, check [Snowflake
     * docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
     * 
     */
    @Import(name="returnDataType", required=true)
    private Output<String> returnDataType;

    /**
     * @return The return data type must match the input data type of the first column that is specified as an input column. For more
     * information about data types, check [Snowflake
     * docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
     * 
     */
    public Output<String> returnDataType() {
        return this.returnDataType;
    }

    /**
     * The schema in which to create the masking policy. Due to technical limitations (read more here), avoid using the
     * following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="schema", required=true)
    private Output<String> schema;

    /**
     * @return The schema in which to create the masking policy. Due to technical limitations (read more here), avoid using the
     * following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }

    private MaskingPolicyArgs() {}

    private MaskingPolicyArgs(MaskingPolicyArgs $) {
        this.arguments = $.arguments;
        this.body = $.body;
        this.comment = $.comment;
        this.database = $.database;
        this.exemptOtherPolicies = $.exemptOtherPolicies;
        this.name = $.name;
        this.returnDataType = $.returnDataType;
        this.schema = $.schema;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MaskingPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MaskingPolicyArgs $;

        public Builder() {
            $ = new MaskingPolicyArgs();
        }

        public Builder(MaskingPolicyArgs defaults) {
            $ = new MaskingPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arguments List of the arguments for the masking policy. The first column and its data type always indicate the column data type
         * values to mask or tokenize in the subsequent policy conditions. Note that you can not specify a virtual column as the
         * first column argument in a conditional masking policy.
         * 
         * @return builder
         * 
         */
        public Builder arguments(Output<List<MaskingPolicyArgumentArgs>> arguments) {
            $.arguments = arguments;
            return this;
        }

        /**
         * @param arguments List of the arguments for the masking policy. The first column and its data type always indicate the column data type
         * values to mask or tokenize in the subsequent policy conditions. Note that you can not specify a virtual column as the
         * first column argument in a conditional masking policy.
         * 
         * @return builder
         * 
         */
        public Builder arguments(List<MaskingPolicyArgumentArgs> arguments) {
            return arguments(Output.of(arguments));
        }

        /**
         * @param arguments List of the arguments for the masking policy. The first column and its data type always indicate the column data type
         * values to mask or tokenize in the subsequent policy conditions. Note that you can not specify a virtual column as the
         * first column argument in a conditional masking policy.
         * 
         * @return builder
         * 
         */
        public Builder arguments(MaskingPolicyArgumentArgs... arguments) {
            return arguments(List.of(arguments));
        }

        /**
         * @param body Specifies the SQL expression that transforms the data. To mitigate permadiff on this field, the provider replaces blank
         * characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is
         * semantically significant.
         * 
         * @return builder
         * 
         */
        public Builder body(Output<String> body) {
            $.body = body;
            return this;
        }

        /**
         * @param body Specifies the SQL expression that transforms the data. To mitigate permadiff on this field, the provider replaces blank
         * characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is
         * semantically significant.
         * 
         * @return builder
         * 
         */
        public Builder body(String body) {
            return body(Output.of(body));
        }

        /**
         * @param comment Specifies a comment for the masking policy.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Specifies a comment for the masking policy.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param database The database in which to create the masking policy. Due to technical limitations (read more here), avoid using the
         * following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The database in which to create the masking policy. Due to technical limitations (read more here), avoid using the
         * following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param exemptOtherPolicies Specifies whether the row access policy or conditional masking policy can reference a column that is already protected
         * by a masking policy. Due to Snowflake limitations, when value is changed, the resource is recreated. Available options
         * are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means
         * to use the Snowflake default for this value.
         * 
         * @return builder
         * 
         */
        public Builder exemptOtherPolicies(@Nullable Output<String> exemptOtherPolicies) {
            $.exemptOtherPolicies = exemptOtherPolicies;
            return this;
        }

        /**
         * @param exemptOtherPolicies Specifies whether the row access policy or conditional masking policy can reference a column that is already protected
         * by a masking policy. Due to Snowflake limitations, when value is changed, the resource is recreated. Available options
         * are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means
         * to use the Snowflake default for this value.
         * 
         * @return builder
         * 
         */
        public Builder exemptOtherPolicies(String exemptOtherPolicies) {
            return exemptOtherPolicies(Output.of(exemptOtherPolicies));
        }

        /**
         * @param name Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy
         * is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy
         * is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param returnDataType The return data type must match the input data type of the first column that is specified as an input column. For more
         * information about data types, check [Snowflake
         * docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
         * 
         * @return builder
         * 
         */
        public Builder returnDataType(Output<String> returnDataType) {
            $.returnDataType = returnDataType;
            return this;
        }

        /**
         * @param returnDataType The return data type must match the input data type of the first column that is specified as an input column. For more
         * information about data types, check [Snowflake
         * docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
         * 
         * @return builder
         * 
         */
        public Builder returnDataType(String returnDataType) {
            return returnDataType(Output.of(returnDataType));
        }

        /**
         * @param schema The schema in which to create the masking policy. Due to technical limitations (read more here), avoid using the
         * following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder schema(Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The schema in which to create the masking policy. Due to technical limitations (read more here), avoid using the
         * following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        public MaskingPolicyArgs build() {
            if ($.arguments == null) {
                throw new MissingRequiredPropertyException("MaskingPolicyArgs", "arguments");
            }
            if ($.body == null) {
                throw new MissingRequiredPropertyException("MaskingPolicyArgs", "body");
            }
            if ($.database == null) {
                throw new MissingRequiredPropertyException("MaskingPolicyArgs", "database");
            }
            if ($.returnDataType == null) {
                throw new MissingRequiredPropertyException("MaskingPolicyArgs", "returnDataType");
            }
            if ($.schema == null) {
                throw new MissingRequiredPropertyException("MaskingPolicyArgs", "schema");
            }
            return $;
        }
    }

}
