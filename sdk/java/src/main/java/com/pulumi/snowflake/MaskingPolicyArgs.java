// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MaskingPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final MaskingPolicyArgs Empty = new MaskingPolicyArgs();

    /**
     * Specifies a comment for the masking policy.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Specifies a comment for the masking policy.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * The database in which to create the masking policy.
     * 
     */
    @Import(name="database", required=true)
    private Output<String> database;

    /**
     * @return The database in which to create the masking policy.
     * 
     */
    public Output<String> database() {
        return this.database;
    }

    /**
     * Specifies the SQL expression that transforms the data.
     * 
     */
    @Import(name="maskingExpression", required=true)
    private Output<String> maskingExpression;

    /**
     * @return Specifies the SQL expression that transforms the data.
     * 
     */
    public Output<String> maskingExpression() {
        return this.maskingExpression;
    }

    /**
     * Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the data type to return.
     * 
     */
    @Import(name="returnDataType", required=true)
    private Output<String> returnDataType;

    /**
     * @return Specifies the data type to return.
     * 
     */
    public Output<String> returnDataType() {
        return this.returnDataType;
    }

    /**
     * The schema in which to create the masking policy.
     * 
     */
    @Import(name="schema", required=true)
    private Output<String> schema;

    /**
     * @return The schema in which to create the masking policy.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }

    /**
     * Specifies the data type to mask.
     * 
     */
    @Import(name="valueDataType", required=true)
    private Output<String> valueDataType;

    /**
     * @return Specifies the data type to mask.
     * 
     */
    public Output<String> valueDataType() {
        return this.valueDataType;
    }

    private MaskingPolicyArgs() {}

    private MaskingPolicyArgs(MaskingPolicyArgs $) {
        this.comment = $.comment;
        this.database = $.database;
        this.maskingExpression = $.maskingExpression;
        this.name = $.name;
        this.returnDataType = $.returnDataType;
        this.schema = $.schema;
        this.valueDataType = $.valueDataType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MaskingPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MaskingPolicyArgs $;

        public Builder() {
            $ = new MaskingPolicyArgs();
        }

        public Builder(MaskingPolicyArgs defaults) {
            $ = new MaskingPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment Specifies a comment for the masking policy.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Specifies a comment for the masking policy.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param database The database in which to create the masking policy.
         * 
         * @return builder
         * 
         */
        public Builder database(Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The database in which to create the masking policy.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param maskingExpression Specifies the SQL expression that transforms the data.
         * 
         * @return builder
         * 
         */
        public Builder maskingExpression(Output<String> maskingExpression) {
            $.maskingExpression = maskingExpression;
            return this;
        }

        /**
         * @param maskingExpression Specifies the SQL expression that transforms the data.
         * 
         * @return builder
         * 
         */
        public Builder maskingExpression(String maskingExpression) {
            return maskingExpression(Output.of(maskingExpression));
        }

        /**
         * @param name Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param returnDataType Specifies the data type to return.
         * 
         * @return builder
         * 
         */
        public Builder returnDataType(Output<String> returnDataType) {
            $.returnDataType = returnDataType;
            return this;
        }

        /**
         * @param returnDataType Specifies the data type to return.
         * 
         * @return builder
         * 
         */
        public Builder returnDataType(String returnDataType) {
            return returnDataType(Output.of(returnDataType));
        }

        /**
         * @param schema The schema in which to create the masking policy.
         * 
         * @return builder
         * 
         */
        public Builder schema(Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The schema in which to create the masking policy.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param valueDataType Specifies the data type to mask.
         * 
         * @return builder
         * 
         */
        public Builder valueDataType(Output<String> valueDataType) {
            $.valueDataType = valueDataType;
            return this;
        }

        /**
         * @param valueDataType Specifies the data type to mask.
         * 
         * @return builder
         * 
         */
        public Builder valueDataType(String valueDataType) {
            return valueDataType(Output.of(valueDataType));
        }

        public MaskingPolicyArgs build() {
            $.database = Objects.requireNonNull($.database, "expected parameter 'database' to be non-null");
            $.maskingExpression = Objects.requireNonNull($.maskingExpression, "expected parameter 'maskingExpression' to be non-null");
            $.returnDataType = Objects.requireNonNull($.returnDataType, "expected parameter 'returnDataType' to be non-null");
            $.schema = Objects.requireNonNull($.schema, "expected parameter 'schema' to be non-null");
            $.valueDataType = Objects.requireNonNull($.valueDataType, "expected parameter 'valueDataType' to be non-null");
            return $;
        }
    }

}
