// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAlertsAlert {
    private String action;
    private String comment;
    private String condition;
    private String databaseName;
    private String name;
    private String owner;
    private String schemaName;

    private GetAlertsAlert() {}
    public String action() {
        return this.action;
    }
    public String comment() {
        return this.comment;
    }
    public String condition() {
        return this.condition;
    }
    public String databaseName() {
        return this.databaseName;
    }
    public String name() {
        return this.name;
    }
    public String owner() {
        return this.owner;
    }
    public String schemaName() {
        return this.schemaName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAlertsAlert defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private String comment;
        private String condition;
        private String databaseName;
        private String name;
        private String owner;
        private String schemaName;
        public Builder() {}
        public Builder(GetAlertsAlert defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.comment = defaults.comment;
    	      this.condition = defaults.condition;
    	      this.databaseName = defaults.databaseName;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.schemaName = defaults.schemaName;
        }

        @CustomType.Setter
        public Builder action(String action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        @CustomType.Setter
        public Builder comment(String comment) {
            this.comment = Objects.requireNonNull(comment);
            return this;
        }
        @CustomType.Setter
        public Builder condition(String condition) {
            this.condition = Objects.requireNonNull(condition);
            return this;
        }
        @CustomType.Setter
        public Builder databaseName(String databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder owner(String owner) {
            this.owner = Objects.requireNonNull(owner);
            return this;
        }
        @CustomType.Setter
        public Builder schemaName(String schemaName) {
            this.schemaName = Objects.requireNonNull(schemaName);
            return this;
        }
        public GetAlertsAlert build() {
            final var o = new GetAlertsAlert();
            o.action = action;
            o.comment = comment;
            o.condition = condition;
            o.databaseName = databaseName;
            o.name = name;
            o.owner = owner;
            o.schemaName = schemaName;
            return o;
        }
    }
}
