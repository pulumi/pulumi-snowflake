// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.snowflake.inputs.FunctionScalaArgumentArgs;
import com.pulumi.snowflake.inputs.FunctionScalaImportArgs;
import com.pulumi.snowflake.inputs.FunctionScalaSecretArgs;
import com.pulumi.snowflake.inputs.FunctionScalaTargetPathArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FunctionScalaArgs extends com.pulumi.resources.ResourceArgs {

    public static final FunctionScalaArgs Empty = new FunctionScalaArgs();

    /**
     * List of the arguments for the function. Consult the
     * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
     * 
     */
    @Import(name="arguments")
    private @Nullable Output<List<FunctionScalaArgumentArgs>> arguments;

    /**
     * @return List of the arguments for the function. Consult the
     * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
     * 
     */
    public Optional<Output<List<FunctionScalaArgumentArgs>>> arguments() {
        return Optional.ofNullable(this.arguments);
    }

    /**
     * Specifies a comment for the function.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Specifies a comment for the function.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * The database in which to create the function. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="database", required=true)
    private Output<String> database;

    /**
     * @return The database in which to create the function. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> database() {
        return this.database;
    }

    /**
     * Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).
     * For more information, check [ENABLE_CONSOLE_OUTPUT
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
     * 
     */
    @Import(name="enableConsoleOutput")
    private @Nullable Output<Boolean> enableConsoleOutput;

    /**
     * @return Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).
     * For more information, check [ENABLE_CONSOLE_OUTPUT
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
     * 
     */
    public Optional<Output<Boolean>> enableConsoleOutput() {
        return Optional.ofNullable(this.enableConsoleOutput);
    }

    /**
     * The names of [external access
     * integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
     * this function’s handler code to access external networks. An external access integration specifies [network
     * rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
     * [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
     * (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
     * 
     */
    @Import(name="externalAccessIntegrations")
    private @Nullable Output<List<String>> externalAccessIntegrations;

    /**
     * @return The names of [external access
     * integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
     * this function’s handler code to access external networks. An external access integration specifies [network
     * rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
     * [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
     * (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
     * 
     */
    public Optional<Output<List<String>>> externalAccessIntegrations() {
        return Optional.ofNullable(this.externalAccessIntegrations);
    }

    /**
     * Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;
     * do not include them. The `function_definition` value must be Scala source code. For more information, see [Introduction
     * to Scala UDFs](https://docs.snowflake.com/en/developer-guide/udf/scala/udf-scala-introduction). To mitigate permadiff on
     * this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a
     * change in case or run of whitespace is semantically significant.
     * 
     */
    @Import(name="functionDefinition")
    private @Nullable Output<String> functionDefinition;

    /**
     * @return Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;
     * do not include them. The `function_definition` value must be Scala source code. For more information, see [Introduction
     * to Scala UDFs](https://docs.snowflake.com/en/developer-guide/udf/scala/udf-scala-introduction). To mitigate permadiff on
     * this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a
     * change in case or run of whitespace is semantically significant.
     * 
     */
    public Optional<Output<String>> functionDefinition() {
        return Optional.ofNullable(this.functionDefinition);
    }

    /**
     * The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
     * value should be a method name, as in the following form: `MyClass.myMethod`.
     * 
     */
    @Import(name="handler", required=true)
    private Output<String> handler;

    /**
     * @return The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
     * value should be a method name, as in the following form: `MyClass.myMethod`.
     * 
     */
    public Output<String> handler() {
        return this.handler;
    }

    /**
     * The location (stage), path, and name of the file(s) to import, such as a JAR or other kind of file. The JAR file might
     * contain handler dependency libraries. It can contain one or more .class files and zero or more resource files. JNI (Java
     * Native Interface) is not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java
     * bytecode). A non-JAR file might a file read by handler code. For an example, see [Reading a file specified statically in
     * IMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports).
     * Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#scala).
     * 
     */
    @Import(name="imports")
    private @Nullable Output<List<FunctionScalaImportArgs>> imports;

    /**
     * @return The location (stage), path, and name of the file(s) to import, such as a JAR or other kind of file. The JAR file might
     * contain handler dependency libraries. It can contain one or more .class files and zero or more resource files. JNI (Java
     * Native Interface) is not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java
     * bytecode). A non-JAR file might a file read by handler code. For an example, see [Reading a file specified statically in
     * IMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports).
     * Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#scala).
     * 
     */
    public Optional<Output<List<FunctionScalaImportArgs>>> imports() {
        return Optional.ofNullable(this.imports);
    }

    @Import(name="isSecure")
    private @Nullable Output<String> isSecure;

    public Optional<Output<String>> isSecure() {
        return Optional.ofNullable(this.isSecure);
    }

    /**
     * LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
     * 
     */
    @Import(name="logLevel")
    private @Nullable Output<String> logLevel;

    /**
     * @return LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
     * 
     */
    public Optional<Output<String>> logLevel() {
        return Optional.ofNullable(this.logLevel);
    }

    /**
     * METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
     * 
     */
    @Import(name="metricLevel")
    private @Nullable Output<String> metricLevel;

    /**
     * @return METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
     * 
     */
    public Optional<Output<String>> metricLevel() {
        return Optional.ofNullable(this.metricLevel);
    }

    /**
     * The name of the function; the identifier does not need to be unique for the schema in which the function is created
     * because UDFs are identified and resolved by the combination of the name and argument types. Check the
     * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations
     * (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the function; the identifier does not need to be unique for the schema in which the function is created
     * because UDFs are identified and resolved by the combination of the name and argument types. Check the
     * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations
     * (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON
     * NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
     * 
     */
    @Import(name="nullInputBehavior")
    private @Nullable Output<String> nullInputBehavior;

    /**
     * @return Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON
     * NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
     * 
     */
    public Optional<Output<String>> nullInputBehavior() {
        return Optional.ofNullable(this.nullInputBehavior);
    }

    /**
     * The name and version number of Snowflake system packages required as dependencies. The value should be of the form
     * `package_name:version_number`, where `package_name` is `snowflake_domain:package`.
     * 
     */
    @Import(name="packages")
    private @Nullable Output<List<String>> packages;

    /**
     * @return The name and version number of Snowflake system packages required as dependencies. The value should be of the form
     * `package_name:version_number`, where `package_name` is `snowflake_domain:package`.
     * 
     */
    public Optional<Output<List<String>>> packages() {
        return Optional.ofNullable(this.packages);
    }

    /**
     * Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |
     * `IMMUTABLE`.
     * 
     */
    @Import(name="returnResultsBehavior")
    private @Nullable Output<String> returnResultsBehavior;

    /**
     * @return Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |
     * `IMMUTABLE`.
     * 
     */
    public Optional<Output<String>> returnResultsBehavior() {
        return Optional.ofNullable(this.returnResultsBehavior);
    }

    /**
     * Specifies the results returned by the UDF, which determines the UDF type. Use `&lt;result_data_type&gt;` to create a scalar
     * UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a
     * table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult
     * the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
     * 
     */
    @Import(name="returnType", required=true)
    private Output<String> returnType;

    /**
     * @return Specifies the results returned by the UDF, which determines the UDF type. Use `&lt;result_data_type&gt;` to create a scalar
     * UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a
     * table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult
     * the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
     * 
     */
    public Output<String> returnType() {
        return this.returnType;
    }

    /**
     * Specifies the Scala runtime version to use. The supported versions of Scala are: 2.12.
     * 
     */
    @Import(name="runtimeVersion", required=true)
    private Output<String> runtimeVersion;

    /**
     * @return Specifies the Scala runtime version to use. The supported versions of Scala are: 2.12.
     * 
     */
    public Output<String> runtimeVersion() {
        return this.runtimeVersion;
    }

    /**
     * The schema in which to create the function. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="schema", required=true)
    private Output<String> schema;

    /**
     * @return The schema in which to create the function. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }

    /**
     * Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
     * can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
     * specify here must be allowed by the [external access
     * integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
     * this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
     * 
     */
    @Import(name="secrets")
    private @Nullable Output<List<FunctionScalaSecretArgs>> secrets;

    /**
     * @return Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
     * can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
     * specify here must be allowed by the [external access
     * integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
     * this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
     * 
     */
    public Optional<Output<List<FunctionScalaSecretArgs>>> secrets() {
        return Optional.ofNullable(this.secrets);
    }

    /**
     * The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
     * value should be a method name, as in the following form: `MyClass.myMethod`.
     * 
     */
    @Import(name="targetPath")
    private @Nullable Output<FunctionScalaTargetPathArgs> targetPath;

    /**
     * @return The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
     * value should be a method name, as in the following form: `MyClass.myMethod`.
     * 
     */
    public Optional<Output<FunctionScalaTargetPathArgs>> targetPath() {
        return Optional.ofNullable(this.targetPath);
    }

    /**
     * Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
     * 
     */
    @Import(name="traceLevel")
    private @Nullable Output<String> traceLevel;

    /**
     * @return Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
     * 
     */
    public Optional<Output<String>> traceLevel() {
        return Optional.ofNullable(this.traceLevel);
    }

    private FunctionScalaArgs() {}

    private FunctionScalaArgs(FunctionScalaArgs $) {
        this.arguments = $.arguments;
        this.comment = $.comment;
        this.database = $.database;
        this.enableConsoleOutput = $.enableConsoleOutput;
        this.externalAccessIntegrations = $.externalAccessIntegrations;
        this.functionDefinition = $.functionDefinition;
        this.handler = $.handler;
        this.imports = $.imports;
        this.isSecure = $.isSecure;
        this.logLevel = $.logLevel;
        this.metricLevel = $.metricLevel;
        this.name = $.name;
        this.nullInputBehavior = $.nullInputBehavior;
        this.packages = $.packages;
        this.returnResultsBehavior = $.returnResultsBehavior;
        this.returnType = $.returnType;
        this.runtimeVersion = $.runtimeVersion;
        this.schema = $.schema;
        this.secrets = $.secrets;
        this.targetPath = $.targetPath;
        this.traceLevel = $.traceLevel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FunctionScalaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FunctionScalaArgs $;

        public Builder() {
            $ = new FunctionScalaArgs();
        }

        public Builder(FunctionScalaArgs defaults) {
            $ = new FunctionScalaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arguments List of the arguments for the function. Consult the
         * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
         * 
         * @return builder
         * 
         */
        public Builder arguments(@Nullable Output<List<FunctionScalaArgumentArgs>> arguments) {
            $.arguments = arguments;
            return this;
        }

        /**
         * @param arguments List of the arguments for the function. Consult the
         * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
         * 
         * @return builder
         * 
         */
        public Builder arguments(List<FunctionScalaArgumentArgs> arguments) {
            return arguments(Output.of(arguments));
        }

        /**
         * @param arguments List of the arguments for the function. Consult the
         * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
         * 
         * @return builder
         * 
         */
        public Builder arguments(FunctionScalaArgumentArgs... arguments) {
            return arguments(List.of(arguments));
        }

        /**
         * @param comment Specifies a comment for the function.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Specifies a comment for the function.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param database The database in which to create the function. Due to technical limitations (read more here), avoid using the following
         * characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The database in which to create the function. Due to technical limitations (read more here), avoid using the following
         * characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param enableConsoleOutput Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).
         * For more information, check [ENABLE_CONSOLE_OUTPUT
         * docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
         * 
         * @return builder
         * 
         */
        public Builder enableConsoleOutput(@Nullable Output<Boolean> enableConsoleOutput) {
            $.enableConsoleOutput = enableConsoleOutput;
            return this;
        }

        /**
         * @param enableConsoleOutput Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).
         * For more information, check [ENABLE_CONSOLE_OUTPUT
         * docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
         * 
         * @return builder
         * 
         */
        public Builder enableConsoleOutput(Boolean enableConsoleOutput) {
            return enableConsoleOutput(Output.of(enableConsoleOutput));
        }

        /**
         * @param externalAccessIntegrations The names of [external access
         * integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
         * this function’s handler code to access external networks. An external access integration specifies [network
         * rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
         * [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
         * (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
         * 
         * @return builder
         * 
         */
        public Builder externalAccessIntegrations(@Nullable Output<List<String>> externalAccessIntegrations) {
            $.externalAccessIntegrations = externalAccessIntegrations;
            return this;
        }

        /**
         * @param externalAccessIntegrations The names of [external access
         * integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
         * this function’s handler code to access external networks. An external access integration specifies [network
         * rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
         * [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
         * (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
         * 
         * @return builder
         * 
         */
        public Builder externalAccessIntegrations(List<String> externalAccessIntegrations) {
            return externalAccessIntegrations(Output.of(externalAccessIntegrations));
        }

        /**
         * @param externalAccessIntegrations The names of [external access
         * integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
         * this function’s handler code to access external networks. An external access integration specifies [network
         * rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
         * [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
         * (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
         * 
         * @return builder
         * 
         */
        public Builder externalAccessIntegrations(String... externalAccessIntegrations) {
            return externalAccessIntegrations(List.of(externalAccessIntegrations));
        }

        /**
         * @param functionDefinition Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;
         * do not include them. The `function_definition` value must be Scala source code. For more information, see [Introduction
         * to Scala UDFs](https://docs.snowflake.com/en/developer-guide/udf/scala/udf-scala-introduction). To mitigate permadiff on
         * this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a
         * change in case or run of whitespace is semantically significant.
         * 
         * @return builder
         * 
         */
        public Builder functionDefinition(@Nullable Output<String> functionDefinition) {
            $.functionDefinition = functionDefinition;
            return this;
        }

        /**
         * @param functionDefinition Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;
         * do not include them. The `function_definition` value must be Scala source code. For more information, see [Introduction
         * to Scala UDFs](https://docs.snowflake.com/en/developer-guide/udf/scala/udf-scala-introduction). To mitigate permadiff on
         * this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a
         * change in case or run of whitespace is semantically significant.
         * 
         * @return builder
         * 
         */
        public Builder functionDefinition(String functionDefinition) {
            return functionDefinition(Output.of(functionDefinition));
        }

        /**
         * @param handler The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
         * value should be a method name, as in the following form: `MyClass.myMethod`.
         * 
         * @return builder
         * 
         */
        public Builder handler(Output<String> handler) {
            $.handler = handler;
            return this;
        }

        /**
         * @param handler The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
         * value should be a method name, as in the following form: `MyClass.myMethod`.
         * 
         * @return builder
         * 
         */
        public Builder handler(String handler) {
            return handler(Output.of(handler));
        }

        /**
         * @param imports The location (stage), path, and name of the file(s) to import, such as a JAR or other kind of file. The JAR file might
         * contain handler dependency libraries. It can contain one or more .class files and zero or more resource files. JNI (Java
         * Native Interface) is not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java
         * bytecode). A non-JAR file might a file read by handler code. For an example, see [Reading a file specified statically in
         * IMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports).
         * Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#scala).
         * 
         * @return builder
         * 
         */
        public Builder imports(@Nullable Output<List<FunctionScalaImportArgs>> imports) {
            $.imports = imports;
            return this;
        }

        /**
         * @param imports The location (stage), path, and name of the file(s) to import, such as a JAR or other kind of file. The JAR file might
         * contain handler dependency libraries. It can contain one or more .class files and zero or more resource files. JNI (Java
         * Native Interface) is not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java
         * bytecode). A non-JAR file might a file read by handler code. For an example, see [Reading a file specified statically in
         * IMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports).
         * Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#scala).
         * 
         * @return builder
         * 
         */
        public Builder imports(List<FunctionScalaImportArgs> imports) {
            return imports(Output.of(imports));
        }

        /**
         * @param imports The location (stage), path, and name of the file(s) to import, such as a JAR or other kind of file. The JAR file might
         * contain handler dependency libraries. It can contain one or more .class files and zero or more resource files. JNI (Java
         * Native Interface) is not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java
         * bytecode). A non-JAR file might a file read by handler code. For an example, see [Reading a file specified statically in
         * IMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports).
         * Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#scala).
         * 
         * @return builder
         * 
         */
        public Builder imports(FunctionScalaImportArgs... imports) {
            return imports(List.of(imports));
        }

        public Builder isSecure(@Nullable Output<String> isSecure) {
            $.isSecure = isSecure;
            return this;
        }

        public Builder isSecure(String isSecure) {
            return isSecure(Output.of(isSecure));
        }

        /**
         * @param logLevel LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
         * docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
         * 
         * @return builder
         * 
         */
        public Builder logLevel(@Nullable Output<String> logLevel) {
            $.logLevel = logLevel;
            return this;
        }

        /**
         * @param logLevel LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
         * docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
         * 
         * @return builder
         * 
         */
        public Builder logLevel(String logLevel) {
            return logLevel(Output.of(logLevel));
        }

        /**
         * @param metricLevel METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
         * docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
         * 
         * @return builder
         * 
         */
        public Builder metricLevel(@Nullable Output<String> metricLevel) {
            $.metricLevel = metricLevel;
            return this;
        }

        /**
         * @param metricLevel METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
         * docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
         * 
         * @return builder
         * 
         */
        public Builder metricLevel(String metricLevel) {
            return metricLevel(Output.of(metricLevel));
        }

        /**
         * @param name The name of the function; the identifier does not need to be unique for the schema in which the function is created
         * because UDFs are identified and resolved by the combination of the name and argument types. Check the
         * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations
         * (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the function; the identifier does not need to be unique for the schema in which the function is created
         * because UDFs are identified and resolved by the combination of the name and argument types. Check the
         * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations
         * (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nullInputBehavior Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON
         * NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
         * 
         * @return builder
         * 
         */
        public Builder nullInputBehavior(@Nullable Output<String> nullInputBehavior) {
            $.nullInputBehavior = nullInputBehavior;
            return this;
        }

        /**
         * @param nullInputBehavior Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON
         * NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
         * 
         * @return builder
         * 
         */
        public Builder nullInputBehavior(String nullInputBehavior) {
            return nullInputBehavior(Output.of(nullInputBehavior));
        }

        /**
         * @param packages The name and version number of Snowflake system packages required as dependencies. The value should be of the form
         * `package_name:version_number`, where `package_name` is `snowflake_domain:package`.
         * 
         * @return builder
         * 
         */
        public Builder packages(@Nullable Output<List<String>> packages) {
            $.packages = packages;
            return this;
        }

        /**
         * @param packages The name and version number of Snowflake system packages required as dependencies. The value should be of the form
         * `package_name:version_number`, where `package_name` is `snowflake_domain:package`.
         * 
         * @return builder
         * 
         */
        public Builder packages(List<String> packages) {
            return packages(Output.of(packages));
        }

        /**
         * @param packages The name and version number of Snowflake system packages required as dependencies. The value should be of the form
         * `package_name:version_number`, where `package_name` is `snowflake_domain:package`.
         * 
         * @return builder
         * 
         */
        public Builder packages(String... packages) {
            return packages(List.of(packages));
        }

        /**
         * @param returnResultsBehavior Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |
         * `IMMUTABLE`.
         * 
         * @return builder
         * 
         */
        public Builder returnResultsBehavior(@Nullable Output<String> returnResultsBehavior) {
            $.returnResultsBehavior = returnResultsBehavior;
            return this;
        }

        /**
         * @param returnResultsBehavior Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |
         * `IMMUTABLE`.
         * 
         * @return builder
         * 
         */
        public Builder returnResultsBehavior(String returnResultsBehavior) {
            return returnResultsBehavior(Output.of(returnResultsBehavior));
        }

        /**
         * @param returnType Specifies the results returned by the UDF, which determines the UDF type. Use `&lt;result_data_type&gt;` to create a scalar
         * UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a
         * table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult
         * the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
         * 
         * @return builder
         * 
         */
        public Builder returnType(Output<String> returnType) {
            $.returnType = returnType;
            return this;
        }

        /**
         * @param returnType Specifies the results returned by the UDF, which determines the UDF type. Use `&lt;result_data_type&gt;` to create a scalar
         * UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a
         * table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult
         * the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
         * 
         * @return builder
         * 
         */
        public Builder returnType(String returnType) {
            return returnType(Output.of(returnType));
        }

        /**
         * @param runtimeVersion Specifies the Scala runtime version to use. The supported versions of Scala are: 2.12.
         * 
         * @return builder
         * 
         */
        public Builder runtimeVersion(Output<String> runtimeVersion) {
            $.runtimeVersion = runtimeVersion;
            return this;
        }

        /**
         * @param runtimeVersion Specifies the Scala runtime version to use. The supported versions of Scala are: 2.12.
         * 
         * @return builder
         * 
         */
        public Builder runtimeVersion(String runtimeVersion) {
            return runtimeVersion(Output.of(runtimeVersion));
        }

        /**
         * @param schema The schema in which to create the function. Due to technical limitations (read more here), avoid using the following
         * characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder schema(Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The schema in which to create the function. Due to technical limitations (read more here), avoid using the following
         * characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param secrets Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
         * can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
         * specify here must be allowed by the [external access
         * integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
         * this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
         * 
         * @return builder
         * 
         */
        public Builder secrets(@Nullable Output<List<FunctionScalaSecretArgs>> secrets) {
            $.secrets = secrets;
            return this;
        }

        /**
         * @param secrets Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
         * can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
         * specify here must be allowed by the [external access
         * integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
         * this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
         * 
         * @return builder
         * 
         */
        public Builder secrets(List<FunctionScalaSecretArgs> secrets) {
            return secrets(Output.of(secrets));
        }

        /**
         * @param secrets Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
         * can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
         * specify here must be allowed by the [external access
         * integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
         * this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
         * 
         * @return builder
         * 
         */
        public Builder secrets(FunctionScalaSecretArgs... secrets) {
            return secrets(List.of(secrets));
        }

        /**
         * @param targetPath The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
         * value should be a method name, as in the following form: `MyClass.myMethod`.
         * 
         * @return builder
         * 
         */
        public Builder targetPath(@Nullable Output<FunctionScalaTargetPathArgs> targetPath) {
            $.targetPath = targetPath;
            return this;
        }

        /**
         * @param targetPath The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
         * value should be a method name, as in the following form: `MyClass.myMethod`.
         * 
         * @return builder
         * 
         */
        public Builder targetPath(FunctionScalaTargetPathArgs targetPath) {
            return targetPath(Output.of(targetPath));
        }

        /**
         * @param traceLevel Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
         * docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
         * 
         * @return builder
         * 
         */
        public Builder traceLevel(@Nullable Output<String> traceLevel) {
            $.traceLevel = traceLevel;
            return this;
        }

        /**
         * @param traceLevel Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
         * docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
         * 
         * @return builder
         * 
         */
        public Builder traceLevel(String traceLevel) {
            return traceLevel(Output.of(traceLevel));
        }

        public FunctionScalaArgs build() {
            if ($.database == null) {
                throw new MissingRequiredPropertyException("FunctionScalaArgs", "database");
            }
            if ($.handler == null) {
                throw new MissingRequiredPropertyException("FunctionScalaArgs", "handler");
            }
            if ($.returnType == null) {
                throw new MissingRequiredPropertyException("FunctionScalaArgs", "returnType");
            }
            if ($.runtimeVersion == null) {
                throw new MissingRequiredPropertyException("FunctionScalaArgs", "runtimeVersion");
            }
            if ($.schema == null) {
                throw new MissingRequiredPropertyException("FunctionScalaArgs", "schema");
            }
            return $;
        }
    }

}
