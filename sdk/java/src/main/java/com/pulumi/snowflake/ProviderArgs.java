// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.snowflake.inputs.ProviderTokenAccessorArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * Specifies your Snowflake account name assigned by Snowflake. For information about account identifiers, see the
     * [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#account-name). Required
     * unless using `profile`. Can also be sourced from the `SNOWFLAKE_ACCOUNT_NAME` environment variable.
     * 
     */
    @Import(name="accountName")
    private @Nullable Output<String> accountName;

    /**
     * @return Specifies your Snowflake account name assigned by Snowflake. For information about account identifiers, see the
     * [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#account-name). Required
     * unless using `profile`. Can also be sourced from the `SNOWFLAKE_ACCOUNT_NAME` environment variable.
     * 
     */
    public Optional<Output<String>> accountName() {
        return Optional.ofNullable(this.accountName);
    }

    /**
     * Specifies the [authentication type](https://pkg.go.dev/github.com/snowflakedb/gosnowflake#AuthType) to use when
     * connecting to Snowflake. Valid options are: `SNOWFLAKE` | `OAUTH` | `EXTERNALBROWSER` | `OKTA` | `SNOWFLAKE_JWT` |
     * `TOKENACCESSOR` | `USERNAMEPASSWORDMFA`. Can also be sourced from the `SNOWFLAKE_AUTHENTICATOR` environment variable.
     * 
     */
    @Import(name="authenticator")
    private @Nullable Output<String> authenticator;

    /**
     * @return Specifies the [authentication type](https://pkg.go.dev/github.com/snowflakedb/gosnowflake#AuthType) to use when
     * connecting to Snowflake. Valid options are: `SNOWFLAKE` | `OAUTH` | `EXTERNALBROWSER` | `OKTA` | `SNOWFLAKE_JWT` |
     * `TOKENACCESSOR` | `USERNAMEPASSWORDMFA`. Can also be sourced from the `SNOWFLAKE_AUTHENTICATOR` environment variable.
     * 
     */
    public Optional<Output<String>> authenticator() {
        return Optional.ofNullable(this.authenticator);
    }

    /**
     * IP address for network checks. Can also be sourced from the `SNOWFLAKE_CLIENT_IP` environment variable.
     * 
     */
    @Import(name="clientIp")
    private @Nullable Output<String> clientIp;

    /**
     * @return IP address for network checks. Can also be sourced from the `SNOWFLAKE_CLIENT_IP` environment variable.
     * 
     */
    public Optional<Output<String>> clientIp() {
        return Optional.ofNullable(this.clientIp);
    }

    /**
     * When true the MFA token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also
     * be sourced from the `SNOWFLAKE_CLIENT_REQUEST_MFA_TOKEN` environment variable.
     * 
     */
    @Import(name="clientRequestMfaToken")
    private @Nullable Output<String> clientRequestMfaToken;

    /**
     * @return When true the MFA token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also
     * be sourced from the `SNOWFLAKE_CLIENT_REQUEST_MFA_TOKEN` environment variable.
     * 
     */
    public Optional<Output<String>> clientRequestMfaToken() {
        return Optional.ofNullable(this.clientRequestMfaToken);
    }

    /**
     * When true the ID token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be
     * sourced from the `SNOWFLAKE_CLIENT_STORE_TEMPORARY_CREDENTIAL` environment variable.
     * 
     */
    @Import(name="clientStoreTemporaryCredential")
    private @Nullable Output<String> clientStoreTemporaryCredential;

    /**
     * @return When true the ID token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be
     * sourced from the `SNOWFLAKE_CLIENT_STORE_TEMPORARY_CREDENTIAL` environment variable.
     * 
     */
    public Optional<Output<String>> clientStoreTemporaryCredential() {
        return Optional.ofNullable(this.clientStoreTemporaryCredential);
    }

    /**
     * The timeout in seconds for the client to complete the authentication. Can also be sourced from the
     * `SNOWFLAKE_CLIENT_TIMEOUT` environment variable.
     * 
     */
    @Import(name="clientTimeout", json=true)
    private @Nullable Output<Integer> clientTimeout;

    /**
     * @return The timeout in seconds for the client to complete the authentication. Can also be sourced from the
     * `SNOWFLAKE_CLIENT_TIMEOUT` environment variable.
     * 
     */
    public Optional<Output<Integer>> clientTimeout() {
        return Optional.ofNullable(this.clientTimeout);
    }

    /**
     * Indicates whether console login should be disabled in the driver. Can also be sourced from the
     * `SNOWFLAKE_DISABLE_CONSOLE_LOGIN` environment variable.
     * 
     */
    @Import(name="disableConsoleLogin")
    private @Nullable Output<String> disableConsoleLogin;

    /**
     * @return Indicates whether console login should be disabled in the driver. Can also be sourced from the
     * `SNOWFLAKE_DISABLE_CONSOLE_LOGIN` environment variable.
     * 
     */
    public Optional<Output<String>> disableConsoleLogin() {
        return Optional.ofNullable(this.disableConsoleLogin);
    }

    /**
     * Disables HTAP query context cache in the driver. Can also be sourced from the `SNOWFLAKE_DISABLE_QUERY_CONTEXT_CACHE`
     * environment variable.
     * 
     */
    @Import(name="disableQueryContextCache", json=true)
    private @Nullable Output<Boolean> disableQueryContextCache;

    /**
     * @return Disables HTAP query context cache in the driver. Can also be sourced from the `SNOWFLAKE_DISABLE_QUERY_CONTEXT_CACHE`
     * environment variable.
     * 
     */
    public Optional<Output<Boolean>> disableQueryContextCache() {
        return Optional.ofNullable(this.disableQueryContextCache);
    }

    /**
     * Disables telemetry in the driver. Can also be sourced from the `DISABLE_TELEMETRY` environment variable.
     * 
     */
    @Import(name="disableTelemetry", json=true)
    private @Nullable Output<Boolean> disableTelemetry;

    /**
     * @return Disables telemetry in the driver. Can also be sourced from the `DISABLE_TELEMETRY` environment variable.
     * 
     */
    public Optional<Output<Boolean>> disableTelemetry() {
        return Optional.ofNullable(this.disableTelemetry);
    }

    /**
     * Specifies the logging level to be used by the driver. Valid options are: `trace` | `debug` | `info` | `print` |
     * `warning` | `error` | `fatal` | `panic`. Can also be sourced from the `SNOWFLAKE_DRIVER_TRACING` environment variable.
     * 
     */
    @Import(name="driverTracing")
    private @Nullable Output<String> driverTracing;

    /**
     * @return Specifies the logging level to be used by the driver. Valid options are: `trace` | `debug` | `info` | `print` |
     * `warning` | `error` | `fatal` | `panic`. Can also be sourced from the `SNOWFLAKE_DRIVER_TRACING` environment variable.
     * 
     */
    public Optional<Output<String>> driverTracing() {
        return Optional.ofNullable(this.driverTracing);
    }

    /**
     * The timeout in seconds for the external browser to complete the authentication. Can also be sourced from the
     * `SNOWFLAKE_EXTERNAL_BROWSER_TIMEOUT` environment variable.
     * 
     */
    @Import(name="externalBrowserTimeout", json=true)
    private @Nullable Output<Integer> externalBrowserTimeout;

    /**
     * @return The timeout in seconds for the external browser to complete the authentication. Can also be sourced from the
     * `SNOWFLAKE_EXTERNAL_BROWSER_TIMEOUT` environment variable.
     * 
     */
    public Optional<Output<Integer>> externalBrowserTimeout() {
        return Optional.ofNullable(this.externalBrowserTimeout);
    }

    /**
     * Specifies a custom host value used by the driver for privatelink connections. Can also be sourced from the
     * `SNOWFLAKE_HOST` environment variable.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return Specifies a custom host value used by the driver for privatelink connections. Can also be sourced from the
     * `SNOWFLAKE_HOST` environment variable.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * Should retried request contain retry reason. Can also be sourced from the `SNOWFLAKE_INCLUDE_RETRY_REASON` environment
     * variable.
     * 
     */
    @Import(name="includeRetryReason")
    private @Nullable Output<String> includeRetryReason;

    /**
     * @return Should retried request contain retry reason. Can also be sourced from the `SNOWFLAKE_INCLUDE_RETRY_REASON` environment
     * variable.
     * 
     */
    public Optional<Output<String>> includeRetryReason() {
        return Optional.ofNullable(this.includeRetryReason);
    }

    /**
     * If true, bypass the Online Certificate Status Protocol (OCSP) certificate revocation check. IMPORTANT: Change the
     * default value for testing or emergency situations only. Can also be sourced from the `SNOWFLAKE_INSECURE_MODE`
     * environment variable.
     * 
     */
    @Import(name="insecureMode", json=true)
    private @Nullable Output<Boolean> insecureMode;

    /**
     * @return If true, bypass the Online Certificate Status Protocol (OCSP) certificate revocation check. IMPORTANT: Change the
     * default value for testing or emergency situations only. Can also be sourced from the `SNOWFLAKE_INSECURE_MODE`
     * environment variable.
     * 
     */
    public Optional<Output<Boolean>> insecureMode() {
        return Optional.ofNullable(this.insecureMode);
    }

    /**
     * The timeout in seconds for the JWT client to complete the authentication. Can also be sourced from the
     * `SNOWFLAKE_JWT_CLIENT_TIMEOUT` environment variable.
     * 
     */
    @Import(name="jwtClientTimeout", json=true)
    private @Nullable Output<Integer> jwtClientTimeout;

    /**
     * @return The timeout in seconds for the JWT client to complete the authentication. Can also be sourced from the
     * `SNOWFLAKE_JWT_CLIENT_TIMEOUT` environment variable.
     * 
     */
    public Optional<Output<Integer>> jwtClientTimeout() {
        return Optional.ofNullable(this.jwtClientTimeout);
    }

    /**
     * JWT expire after timeout in seconds. Can also be sourced from the `SNOWFLAKE_JWT_EXPIRE_TIMEOUT` environment variable.
     * 
     */
    @Import(name="jwtExpireTimeout", json=true)
    private @Nullable Output<Integer> jwtExpireTimeout;

    /**
     * @return JWT expire after timeout in seconds. Can also be sourced from the `SNOWFLAKE_JWT_EXPIRE_TIMEOUT` environment variable.
     * 
     */
    public Optional<Output<Integer>> jwtExpireTimeout() {
        return Optional.ofNullable(this.jwtExpireTimeout);
    }

    /**
     * Enables the session to persist even after the connection is closed. Can also be sourced from the
     * `SNOWFLAKE_KEEP_SESSION_ALIVE` environment variable.
     * 
     */
    @Import(name="keepSessionAlive", json=true)
    private @Nullable Output<Boolean> keepSessionAlive;

    /**
     * @return Enables the session to persist even after the connection is closed. Can also be sourced from the
     * `SNOWFLAKE_KEEP_SESSION_ALIVE` environment variable.
     * 
     */
    public Optional<Output<Boolean>> keepSessionAlive() {
        return Optional.ofNullable(this.keepSessionAlive);
    }

    /**
     * Login retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the
     * `SNOWFLAKE_LOGIN_TIMEOUT` environment variable.
     * 
     */
    @Import(name="loginTimeout", json=true)
    private @Nullable Output<Integer> loginTimeout;

    /**
     * @return Login retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the
     * `SNOWFLAKE_LOGIN_TIMEOUT` environment variable.
     * 
     */
    public Optional<Output<Integer>> loginTimeout() {
        return Optional.ofNullable(this.loginTimeout);
    }

    /**
     * Specifies how many times non-periodic HTTP request can be retried by the driver. Can also be sourced from the
     * `SNOWFLAKE_MAX_RETRY_COUNT` environment variable.
     * 
     */
    @Import(name="maxRetryCount", json=true)
    private @Nullable Output<Integer> maxRetryCount;

    /**
     * @return Specifies how many times non-periodic HTTP request can be retried by the driver. Can also be sourced from the
     * `SNOWFLAKE_MAX_RETRY_COUNT` environment variable.
     * 
     */
    public Optional<Output<Integer>> maxRetryCount() {
        return Optional.ofNullable(this.maxRetryCount);
    }

    /**
     * True represents OCSP fail open mode. False represents OCSP fail closed mode. Fail open true by default. Can also be
     * sourced from the `SNOWFLAKE_OCSP_FAIL_OPEN` environment variable.
     * 
     */
    @Import(name="ocspFailOpen")
    private @Nullable Output<String> ocspFailOpen;

    /**
     * @return True represents OCSP fail open mode. False represents OCSP fail closed mode. Fail open true by default. Can also be
     * sourced from the `SNOWFLAKE_OCSP_FAIL_OPEN` environment variable.
     * 
     */
    public Optional<Output<String>> ocspFailOpen() {
        return Optional.ofNullable(this.ocspFailOpen);
    }

    /**
     * The URL of the Okta server. e.g. https://example.okta.com. Okta URL host needs to to have a suffix `okta.com`. Read more
     * in Snowflake [docs](https://docs.snowflake.com/en/user-guide/oauth-okta). Can also be sourced from the
     * `SNOWFLAKE_OKTA_URL` environment variable.
     * 
     */
    @Import(name="oktaUrl")
    private @Nullable Output<String> oktaUrl;

    /**
     * @return The URL of the Okta server. e.g. https://example.okta.com. Okta URL host needs to to have a suffix `okta.com`. Read more
     * in Snowflake [docs](https://docs.snowflake.com/en/user-guide/oauth-okta). Can also be sourced from the
     * `SNOWFLAKE_OKTA_URL` environment variable.
     * 
     */
    public Optional<Output<String>> oktaUrl() {
        return Optional.ofNullable(this.oktaUrl);
    }

    /**
     * Specifies your Snowflake organization name assigned by Snowflake. For information about account identifiers, see the
     * [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#organization-name). Required
     * unless using `profile`. Can also be sourced from the `SNOWFLAKE_ORGANIZATION_NAME` environment variable.
     * 
     */
    @Import(name="organizationName")
    private @Nullable Output<String> organizationName;

    /**
     * @return Specifies your Snowflake organization name assigned by Snowflake. For information about account identifiers, see the
     * [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#organization-name). Required
     * unless using `profile`. Can also be sourced from the `SNOWFLAKE_ORGANIZATION_NAME` environment variable.
     * 
     */
    public Optional<Output<String>> organizationName() {
        return Optional.ofNullable(this.organizationName);
    }

    /**
     * Sets other connection (i.e. session) parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters).
     * This field can not be set with environmental variables.
     * 
     */
    @Import(name="params", json=true)
    private @Nullable Output<Map<String,String>> params;

    /**
     * @return Sets other connection (i.e. session) parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters).
     * This field can not be set with environmental variables.
     * 
     */
    public Optional<Output<Map<String,String>>> params() {
        return Optional.ofNullable(this.params);
    }

    /**
     * Specifies the passcode provided by Duo when using multi-factor authentication (MFA) for login. Can also be sourced from
     * the `SNOWFLAKE_PASSCODE` environment variable.
     * 
     */
    @Import(name="passcode")
    private @Nullable Output<String> passcode;

    /**
     * @return Specifies the passcode provided by Duo when using multi-factor authentication (MFA) for login. Can also be sourced from
     * the `SNOWFLAKE_PASSCODE` environment variable.
     * 
     */
    public Optional<Output<String>> passcode() {
        return Optional.ofNullable(this.passcode);
    }

    /**
     * False by default. Set to true if the MFA passcode is embedded to the configured password. Can also be sourced from the
     * `SNOWFLAKE_PASSCODE_IN_PASSWORD` environment variable.
     * 
     */
    @Import(name="passcodeInPassword", json=true)
    private @Nullable Output<Boolean> passcodeInPassword;

    /**
     * @return False by default. Set to true if the MFA passcode is embedded to the configured password. Can also be sourced from the
     * `SNOWFLAKE_PASSCODE_IN_PASSWORD` environment variable.
     * 
     */
    public Optional<Output<Boolean>> passcodeInPassword() {
        return Optional.ofNullable(this.passcodeInPassword);
    }

    /**
     * Password for user + password auth. Cannot be used with `private_key` and `private_key_passphrase`. Can also be sourced
     * from the `SNOWFLAKE_PASSWORD` environment variable.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Password for user + password auth. Cannot be used with `private_key` and `private_key_passphrase`. Can also be sourced
     * from the `SNOWFLAKE_PASSWORD` environment variable.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Specifies a custom port value used by the driver for privatelink connections. Can also be sourced from the
     * `SNOWFLAKE_PORT` environment variable.
     * 
     */
    @Import(name="port", json=true)
    private @Nullable Output<Integer> port;

    /**
     * @return Specifies a custom port value used by the driver for privatelink connections. Can also be sourced from the
     * `SNOWFLAKE_PORT` environment variable.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    @Import(name="previewFeaturesEnabled", json=true)
    private @Nullable Output<List<String>> previewFeaturesEnabled;

    public Optional<Output<List<String>>> previewFeaturesEnabled() {
        return Optional.ofNullable(this.previewFeaturesEnabled);
    }

    /**
     * Private Key for username+private-key auth. Cannot be used with `password`. Can also be sourced from the
     * `SNOWFLAKE_PRIVATE_KEY` environment variable.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return Private Key for username+private-key auth. Cannot be used with `password`. Can also be sourced from the
     * `SNOWFLAKE_PRIVATE_KEY` environment variable.
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and
     * des-ede3-cbc. Can also be sourced from the `SNOWFLAKE_PRIVATE_KEY_PASSPHRASE` environment variable.
     * 
     */
    @Import(name="privateKeyPassphrase")
    private @Nullable Output<String> privateKeyPassphrase;

    /**
     * @return Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and
     * des-ede3-cbc. Can also be sourced from the `SNOWFLAKE_PRIVATE_KEY_PASSPHRASE` environment variable.
     * 
     */
    public Optional<Output<String>> privateKeyPassphrase() {
        return Optional.ofNullable(this.privateKeyPassphrase);
    }

    /**
     * Sets the profile to read from ~/.snowflake/config file. Can also be sourced from the `SNOWFLAKE_PROFILE` environment
     * variable.
     * 
     */
    @Import(name="profile")
    private @Nullable Output<String> profile;

    /**
     * @return Sets the profile to read from ~/.snowflake/config file. Can also be sourced from the `SNOWFLAKE_PROFILE` environment
     * variable.
     * 
     */
    public Optional<Output<String>> profile() {
        return Optional.ofNullable(this.profile);
    }

    /**
     * A protocol used in the connection. Valid options are: `http` | `https`. Can also be sourced from the
     * `SNOWFLAKE_PROTOCOL` environment variable.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return A protocol used in the connection. Valid options are: `http` | `https`. Can also be sourced from the
     * `SNOWFLAKE_PROTOCOL` environment variable.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * request retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the
     * `SNOWFLAKE_REQUEST_TIMEOUT` environment variable.
     * 
     */
    @Import(name="requestTimeout", json=true)
    private @Nullable Output<Integer> requestTimeout;

    /**
     * @return request retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the
     * `SNOWFLAKE_REQUEST_TIMEOUT` environment variable.
     * 
     */
    public Optional<Output<Integer>> requestTimeout() {
        return Optional.ofNullable(this.requestTimeout);
    }

    /**
     * Specifies the role to use by default for accessing Snowflake objects in the client session. Can also be sourced from the
     * `SNOWFLAKE_ROLE` environment variable.
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return Specifies the role to use by default for accessing Snowflake objects in the client session. Can also be sourced from the
     * `SNOWFLAKE_ROLE` environment variable.
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * False by default. Skips TOML configuration file permission verification. This flag has no effect on Windows systems, as
     * the permissions are not checked on this platform. Instead of skipping the permissions verification, we recommend setting
     * the proper privileges - see the section below. Can also be sourced from the
     * `SNOWFLAKE_SKIP_TOML_FILE_PERMISSION_VERIFICATION` environment variable.
     * 
     */
    @Import(name="skipTomlFilePermissionVerification", json=true)
    private @Nullable Output<Boolean> skipTomlFilePermissionVerification;

    /**
     * @return False by default. Skips TOML configuration file permission verification. This flag has no effect on Windows systems, as
     * the permissions are not checked on this platform. Instead of skipping the permissions verification, we recommend setting
     * the proper privileges - see the section below. Can also be sourced from the
     * `SNOWFLAKE_SKIP_TOML_FILE_PERMISSION_VERIFICATION` environment variable.
     * 
     */
    public Optional<Output<Boolean>> skipTomlFilePermissionVerification() {
        return Optional.ofNullable(this.skipTomlFilePermissionVerification);
    }

    /**
     * Sets temporary directory used by the driver for operations like encrypting, compressing etc. Can also be sourced from
     * the `SNOWFLAKE_TMP_DIRECTORY_PATH` environment variable.
     * 
     */
    @Import(name="tmpDirectoryPath")
    private @Nullable Output<String> tmpDirectoryPath;

    /**
     * @return Sets temporary directory used by the driver for operations like encrypting, compressing etc. Can also be sourced from
     * the `SNOWFLAKE_TMP_DIRECTORY_PATH` environment variable.
     * 
     */
    public Optional<Output<String>> tmpDirectoryPath() {
        return Optional.ofNullable(this.tmpDirectoryPath);
    }

    /**
     * Token to use for OAuth and other forms of token based auth. Can also be sourced from the `SNOWFLAKE_TOKEN` environment
     * variable.
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return Token to use for OAuth and other forms of token based auth. Can also be sourced from the `SNOWFLAKE_TOKEN` environment
     * variable.
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    @Import(name="tokenAccessor", json=true)
    private @Nullable Output<ProviderTokenAccessorArgs> tokenAccessor;

    public Optional<Output<ProviderTokenAccessorArgs>> tokenAccessor() {
        return Optional.ofNullable(this.tokenAccessor);
    }

    /**
     * False by default. When this is set to true, the provider expects the legacy TOML format. Otherwise, it expects the new
     * format. See more in the section below Can also be sourced from the `SNOWFLAKE_USE_LEGACY_TOML_FILE` environment
     * variable.
     * 
     */
    @Import(name="useLegacyTomlFile", json=true)
    private @Nullable Output<Boolean> useLegacyTomlFile;

    /**
     * @return False by default. When this is set to true, the provider expects the legacy TOML format. Otherwise, it expects the new
     * format. See more in the section below Can also be sourced from the `SNOWFLAKE_USE_LEGACY_TOML_FILE` environment
     * variable.
     * 
     */
    public Optional<Output<Boolean>> useLegacyTomlFile() {
        return Optional.ofNullable(this.useLegacyTomlFile);
    }

    /**
     * Username. Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_USER` environment variable.
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return Username. Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_USER` environment variable.
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    /**
     * True by default. If false, disables the validation checks for Database, Schema, Warehouse and Role at the time a
     * connection is established. Can also be sourced from the `SNOWFLAKE_VALIDATE_DEFAULT_PARAMETERS` environment variable.
     * 
     */
    @Import(name="validateDefaultParameters")
    private @Nullable Output<String> validateDefaultParameters;

    /**
     * @return True by default. If false, disables the validation checks for Database, Schema, Warehouse and Role at the time a
     * connection is established. Can also be sourced from the `SNOWFLAKE_VALIDATE_DEFAULT_PARAMETERS` environment variable.
     * 
     */
    public Optional<Output<String>> validateDefaultParameters() {
        return Optional.ofNullable(this.validateDefaultParameters);
    }

    /**
     * Specifies the virtual warehouse to use by default for queries, loading, etc. in the client session. Can also be sourced
     * from the `SNOWFLAKE_WAREHOUSE` environment variable.
     * 
     */
    @Import(name="warehouse")
    private @Nullable Output<String> warehouse;

    /**
     * @return Specifies the virtual warehouse to use by default for queries, loading, etc. in the client session. Can also be sourced
     * from the `SNOWFLAKE_WAREHOUSE` environment variable.
     * 
     */
    public Optional<Output<String>> warehouse() {
        return Optional.ofNullable(this.warehouse);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.accountName = $.accountName;
        this.authenticator = $.authenticator;
        this.clientIp = $.clientIp;
        this.clientRequestMfaToken = $.clientRequestMfaToken;
        this.clientStoreTemporaryCredential = $.clientStoreTemporaryCredential;
        this.clientTimeout = $.clientTimeout;
        this.disableConsoleLogin = $.disableConsoleLogin;
        this.disableQueryContextCache = $.disableQueryContextCache;
        this.disableTelemetry = $.disableTelemetry;
        this.driverTracing = $.driverTracing;
        this.externalBrowserTimeout = $.externalBrowserTimeout;
        this.host = $.host;
        this.includeRetryReason = $.includeRetryReason;
        this.insecureMode = $.insecureMode;
        this.jwtClientTimeout = $.jwtClientTimeout;
        this.jwtExpireTimeout = $.jwtExpireTimeout;
        this.keepSessionAlive = $.keepSessionAlive;
        this.loginTimeout = $.loginTimeout;
        this.maxRetryCount = $.maxRetryCount;
        this.ocspFailOpen = $.ocspFailOpen;
        this.oktaUrl = $.oktaUrl;
        this.organizationName = $.organizationName;
        this.params = $.params;
        this.passcode = $.passcode;
        this.passcodeInPassword = $.passcodeInPassword;
        this.password = $.password;
        this.port = $.port;
        this.previewFeaturesEnabled = $.previewFeaturesEnabled;
        this.privateKey = $.privateKey;
        this.privateKeyPassphrase = $.privateKeyPassphrase;
        this.profile = $.profile;
        this.protocol = $.protocol;
        this.requestTimeout = $.requestTimeout;
        this.role = $.role;
        this.skipTomlFilePermissionVerification = $.skipTomlFilePermissionVerification;
        this.tmpDirectoryPath = $.tmpDirectoryPath;
        this.token = $.token;
        this.tokenAccessor = $.tokenAccessor;
        this.useLegacyTomlFile = $.useLegacyTomlFile;
        this.user = $.user;
        this.validateDefaultParameters = $.validateDefaultParameters;
        this.warehouse = $.warehouse;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName Specifies your Snowflake account name assigned by Snowflake. For information about account identifiers, see the
         * [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#account-name). Required
         * unless using `profile`. Can also be sourced from the `SNOWFLAKE_ACCOUNT_NAME` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder accountName(@Nullable Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName Specifies your Snowflake account name assigned by Snowflake. For information about account identifiers, see the
         * [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#account-name). Required
         * unless using `profile`. Can also be sourced from the `SNOWFLAKE_ACCOUNT_NAME` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param authenticator Specifies the [authentication type](https://pkg.go.dev/github.com/snowflakedb/gosnowflake#AuthType) to use when
         * connecting to Snowflake. Valid options are: `SNOWFLAKE` | `OAUTH` | `EXTERNALBROWSER` | `OKTA` | `SNOWFLAKE_JWT` |
         * `TOKENACCESSOR` | `USERNAMEPASSWORDMFA`. Can also be sourced from the `SNOWFLAKE_AUTHENTICATOR` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder authenticator(@Nullable Output<String> authenticator) {
            $.authenticator = authenticator;
            return this;
        }

        /**
         * @param authenticator Specifies the [authentication type](https://pkg.go.dev/github.com/snowflakedb/gosnowflake#AuthType) to use when
         * connecting to Snowflake. Valid options are: `SNOWFLAKE` | `OAUTH` | `EXTERNALBROWSER` | `OKTA` | `SNOWFLAKE_JWT` |
         * `TOKENACCESSOR` | `USERNAMEPASSWORDMFA`. Can also be sourced from the `SNOWFLAKE_AUTHENTICATOR` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder authenticator(String authenticator) {
            return authenticator(Output.of(authenticator));
        }

        /**
         * @param clientIp IP address for network checks. Can also be sourced from the `SNOWFLAKE_CLIENT_IP` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder clientIp(@Nullable Output<String> clientIp) {
            $.clientIp = clientIp;
            return this;
        }

        /**
         * @param clientIp IP address for network checks. Can also be sourced from the `SNOWFLAKE_CLIENT_IP` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder clientIp(String clientIp) {
            return clientIp(Output.of(clientIp));
        }

        /**
         * @param clientRequestMfaToken When true the MFA token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also
         * be sourced from the `SNOWFLAKE_CLIENT_REQUEST_MFA_TOKEN` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder clientRequestMfaToken(@Nullable Output<String> clientRequestMfaToken) {
            $.clientRequestMfaToken = clientRequestMfaToken;
            return this;
        }

        /**
         * @param clientRequestMfaToken When true the MFA token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also
         * be sourced from the `SNOWFLAKE_CLIENT_REQUEST_MFA_TOKEN` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder clientRequestMfaToken(String clientRequestMfaToken) {
            return clientRequestMfaToken(Output.of(clientRequestMfaToken));
        }

        /**
         * @param clientStoreTemporaryCredential When true the ID token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be
         * sourced from the `SNOWFLAKE_CLIENT_STORE_TEMPORARY_CREDENTIAL` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder clientStoreTemporaryCredential(@Nullable Output<String> clientStoreTemporaryCredential) {
            $.clientStoreTemporaryCredential = clientStoreTemporaryCredential;
            return this;
        }

        /**
         * @param clientStoreTemporaryCredential When true the ID token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be
         * sourced from the `SNOWFLAKE_CLIENT_STORE_TEMPORARY_CREDENTIAL` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder clientStoreTemporaryCredential(String clientStoreTemporaryCredential) {
            return clientStoreTemporaryCredential(Output.of(clientStoreTemporaryCredential));
        }

        /**
         * @param clientTimeout The timeout in seconds for the client to complete the authentication. Can also be sourced from the
         * `SNOWFLAKE_CLIENT_TIMEOUT` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder clientTimeout(@Nullable Output<Integer> clientTimeout) {
            $.clientTimeout = clientTimeout;
            return this;
        }

        /**
         * @param clientTimeout The timeout in seconds for the client to complete the authentication. Can also be sourced from the
         * `SNOWFLAKE_CLIENT_TIMEOUT` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder clientTimeout(Integer clientTimeout) {
            return clientTimeout(Output.of(clientTimeout));
        }

        /**
         * @param disableConsoleLogin Indicates whether console login should be disabled in the driver. Can also be sourced from the
         * `SNOWFLAKE_DISABLE_CONSOLE_LOGIN` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder disableConsoleLogin(@Nullable Output<String> disableConsoleLogin) {
            $.disableConsoleLogin = disableConsoleLogin;
            return this;
        }

        /**
         * @param disableConsoleLogin Indicates whether console login should be disabled in the driver. Can also be sourced from the
         * `SNOWFLAKE_DISABLE_CONSOLE_LOGIN` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder disableConsoleLogin(String disableConsoleLogin) {
            return disableConsoleLogin(Output.of(disableConsoleLogin));
        }

        /**
         * @param disableQueryContextCache Disables HTAP query context cache in the driver. Can also be sourced from the `SNOWFLAKE_DISABLE_QUERY_CONTEXT_CACHE`
         * environment variable.
         * 
         * @return builder
         * 
         */
        public Builder disableQueryContextCache(@Nullable Output<Boolean> disableQueryContextCache) {
            $.disableQueryContextCache = disableQueryContextCache;
            return this;
        }

        /**
         * @param disableQueryContextCache Disables HTAP query context cache in the driver. Can also be sourced from the `SNOWFLAKE_DISABLE_QUERY_CONTEXT_CACHE`
         * environment variable.
         * 
         * @return builder
         * 
         */
        public Builder disableQueryContextCache(Boolean disableQueryContextCache) {
            return disableQueryContextCache(Output.of(disableQueryContextCache));
        }

        /**
         * @param disableTelemetry Disables telemetry in the driver. Can also be sourced from the `DISABLE_TELEMETRY` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder disableTelemetry(@Nullable Output<Boolean> disableTelemetry) {
            $.disableTelemetry = disableTelemetry;
            return this;
        }

        /**
         * @param disableTelemetry Disables telemetry in the driver. Can also be sourced from the `DISABLE_TELEMETRY` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder disableTelemetry(Boolean disableTelemetry) {
            return disableTelemetry(Output.of(disableTelemetry));
        }

        /**
         * @param driverTracing Specifies the logging level to be used by the driver. Valid options are: `trace` | `debug` | `info` | `print` |
         * `warning` | `error` | `fatal` | `panic`. Can also be sourced from the `SNOWFLAKE_DRIVER_TRACING` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder driverTracing(@Nullable Output<String> driverTracing) {
            $.driverTracing = driverTracing;
            return this;
        }

        /**
         * @param driverTracing Specifies the logging level to be used by the driver. Valid options are: `trace` | `debug` | `info` | `print` |
         * `warning` | `error` | `fatal` | `panic`. Can also be sourced from the `SNOWFLAKE_DRIVER_TRACING` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder driverTracing(String driverTracing) {
            return driverTracing(Output.of(driverTracing));
        }

        /**
         * @param externalBrowserTimeout The timeout in seconds for the external browser to complete the authentication. Can also be sourced from the
         * `SNOWFLAKE_EXTERNAL_BROWSER_TIMEOUT` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder externalBrowserTimeout(@Nullable Output<Integer> externalBrowserTimeout) {
            $.externalBrowserTimeout = externalBrowserTimeout;
            return this;
        }

        /**
         * @param externalBrowserTimeout The timeout in seconds for the external browser to complete the authentication. Can also be sourced from the
         * `SNOWFLAKE_EXTERNAL_BROWSER_TIMEOUT` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder externalBrowserTimeout(Integer externalBrowserTimeout) {
            return externalBrowserTimeout(Output.of(externalBrowserTimeout));
        }

        /**
         * @param host Specifies a custom host value used by the driver for privatelink connections. Can also be sourced from the
         * `SNOWFLAKE_HOST` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host Specifies a custom host value used by the driver for privatelink connections. Can also be sourced from the
         * `SNOWFLAKE_HOST` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param includeRetryReason Should retried request contain retry reason. Can also be sourced from the `SNOWFLAKE_INCLUDE_RETRY_REASON` environment
         * variable.
         * 
         * @return builder
         * 
         */
        public Builder includeRetryReason(@Nullable Output<String> includeRetryReason) {
            $.includeRetryReason = includeRetryReason;
            return this;
        }

        /**
         * @param includeRetryReason Should retried request contain retry reason. Can also be sourced from the `SNOWFLAKE_INCLUDE_RETRY_REASON` environment
         * variable.
         * 
         * @return builder
         * 
         */
        public Builder includeRetryReason(String includeRetryReason) {
            return includeRetryReason(Output.of(includeRetryReason));
        }

        /**
         * @param insecureMode If true, bypass the Online Certificate Status Protocol (OCSP) certificate revocation check. IMPORTANT: Change the
         * default value for testing or emergency situations only. Can also be sourced from the `SNOWFLAKE_INSECURE_MODE`
         * environment variable.
         * 
         * @return builder
         * 
         */
        public Builder insecureMode(@Nullable Output<Boolean> insecureMode) {
            $.insecureMode = insecureMode;
            return this;
        }

        /**
         * @param insecureMode If true, bypass the Online Certificate Status Protocol (OCSP) certificate revocation check. IMPORTANT: Change the
         * default value for testing or emergency situations only. Can also be sourced from the `SNOWFLAKE_INSECURE_MODE`
         * environment variable.
         * 
         * @return builder
         * 
         */
        public Builder insecureMode(Boolean insecureMode) {
            return insecureMode(Output.of(insecureMode));
        }

        /**
         * @param jwtClientTimeout The timeout in seconds for the JWT client to complete the authentication. Can also be sourced from the
         * `SNOWFLAKE_JWT_CLIENT_TIMEOUT` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder jwtClientTimeout(@Nullable Output<Integer> jwtClientTimeout) {
            $.jwtClientTimeout = jwtClientTimeout;
            return this;
        }

        /**
         * @param jwtClientTimeout The timeout in seconds for the JWT client to complete the authentication. Can also be sourced from the
         * `SNOWFLAKE_JWT_CLIENT_TIMEOUT` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder jwtClientTimeout(Integer jwtClientTimeout) {
            return jwtClientTimeout(Output.of(jwtClientTimeout));
        }

        /**
         * @param jwtExpireTimeout JWT expire after timeout in seconds. Can also be sourced from the `SNOWFLAKE_JWT_EXPIRE_TIMEOUT` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder jwtExpireTimeout(@Nullable Output<Integer> jwtExpireTimeout) {
            $.jwtExpireTimeout = jwtExpireTimeout;
            return this;
        }

        /**
         * @param jwtExpireTimeout JWT expire after timeout in seconds. Can also be sourced from the `SNOWFLAKE_JWT_EXPIRE_TIMEOUT` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder jwtExpireTimeout(Integer jwtExpireTimeout) {
            return jwtExpireTimeout(Output.of(jwtExpireTimeout));
        }

        /**
         * @param keepSessionAlive Enables the session to persist even after the connection is closed. Can also be sourced from the
         * `SNOWFLAKE_KEEP_SESSION_ALIVE` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder keepSessionAlive(@Nullable Output<Boolean> keepSessionAlive) {
            $.keepSessionAlive = keepSessionAlive;
            return this;
        }

        /**
         * @param keepSessionAlive Enables the session to persist even after the connection is closed. Can also be sourced from the
         * `SNOWFLAKE_KEEP_SESSION_ALIVE` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder keepSessionAlive(Boolean keepSessionAlive) {
            return keepSessionAlive(Output.of(keepSessionAlive));
        }

        /**
         * @param loginTimeout Login retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the
         * `SNOWFLAKE_LOGIN_TIMEOUT` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder loginTimeout(@Nullable Output<Integer> loginTimeout) {
            $.loginTimeout = loginTimeout;
            return this;
        }

        /**
         * @param loginTimeout Login retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the
         * `SNOWFLAKE_LOGIN_TIMEOUT` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder loginTimeout(Integer loginTimeout) {
            return loginTimeout(Output.of(loginTimeout));
        }

        /**
         * @param maxRetryCount Specifies how many times non-periodic HTTP request can be retried by the driver. Can also be sourced from the
         * `SNOWFLAKE_MAX_RETRY_COUNT` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder maxRetryCount(@Nullable Output<Integer> maxRetryCount) {
            $.maxRetryCount = maxRetryCount;
            return this;
        }

        /**
         * @param maxRetryCount Specifies how many times non-periodic HTTP request can be retried by the driver. Can also be sourced from the
         * `SNOWFLAKE_MAX_RETRY_COUNT` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder maxRetryCount(Integer maxRetryCount) {
            return maxRetryCount(Output.of(maxRetryCount));
        }

        /**
         * @param ocspFailOpen True represents OCSP fail open mode. False represents OCSP fail closed mode. Fail open true by default. Can also be
         * sourced from the `SNOWFLAKE_OCSP_FAIL_OPEN` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder ocspFailOpen(@Nullable Output<String> ocspFailOpen) {
            $.ocspFailOpen = ocspFailOpen;
            return this;
        }

        /**
         * @param ocspFailOpen True represents OCSP fail open mode. False represents OCSP fail closed mode. Fail open true by default. Can also be
         * sourced from the `SNOWFLAKE_OCSP_FAIL_OPEN` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder ocspFailOpen(String ocspFailOpen) {
            return ocspFailOpen(Output.of(ocspFailOpen));
        }

        /**
         * @param oktaUrl The URL of the Okta server. e.g. https://example.okta.com. Okta URL host needs to to have a suffix `okta.com`. Read more
         * in Snowflake [docs](https://docs.snowflake.com/en/user-guide/oauth-okta). Can also be sourced from the
         * `SNOWFLAKE_OKTA_URL` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder oktaUrl(@Nullable Output<String> oktaUrl) {
            $.oktaUrl = oktaUrl;
            return this;
        }

        /**
         * @param oktaUrl The URL of the Okta server. e.g. https://example.okta.com. Okta URL host needs to to have a suffix `okta.com`. Read more
         * in Snowflake [docs](https://docs.snowflake.com/en/user-guide/oauth-okta). Can also be sourced from the
         * `SNOWFLAKE_OKTA_URL` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder oktaUrl(String oktaUrl) {
            return oktaUrl(Output.of(oktaUrl));
        }

        /**
         * @param organizationName Specifies your Snowflake organization name assigned by Snowflake. For information about account identifiers, see the
         * [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#organization-name). Required
         * unless using `profile`. Can also be sourced from the `SNOWFLAKE_ORGANIZATION_NAME` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder organizationName(@Nullable Output<String> organizationName) {
            $.organizationName = organizationName;
            return this;
        }

        /**
         * @param organizationName Specifies your Snowflake organization name assigned by Snowflake. For information about account identifiers, see the
         * [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#organization-name). Required
         * unless using `profile`. Can also be sourced from the `SNOWFLAKE_ORGANIZATION_NAME` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder organizationName(String organizationName) {
            return organizationName(Output.of(organizationName));
        }

        /**
         * @param params Sets other connection (i.e. session) parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters).
         * This field can not be set with environmental variables.
         * 
         * @return builder
         * 
         */
        public Builder params(@Nullable Output<Map<String,String>> params) {
            $.params = params;
            return this;
        }

        /**
         * @param params Sets other connection (i.e. session) parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters).
         * This field can not be set with environmental variables.
         * 
         * @return builder
         * 
         */
        public Builder params(Map<String,String> params) {
            return params(Output.of(params));
        }

        /**
         * @param passcode Specifies the passcode provided by Duo when using multi-factor authentication (MFA) for login. Can also be sourced from
         * the `SNOWFLAKE_PASSCODE` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder passcode(@Nullable Output<String> passcode) {
            $.passcode = passcode;
            return this;
        }

        /**
         * @param passcode Specifies the passcode provided by Duo when using multi-factor authentication (MFA) for login. Can also be sourced from
         * the `SNOWFLAKE_PASSCODE` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder passcode(String passcode) {
            return passcode(Output.of(passcode));
        }

        /**
         * @param passcodeInPassword False by default. Set to true if the MFA passcode is embedded to the configured password. Can also be sourced from the
         * `SNOWFLAKE_PASSCODE_IN_PASSWORD` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder passcodeInPassword(@Nullable Output<Boolean> passcodeInPassword) {
            $.passcodeInPassword = passcodeInPassword;
            return this;
        }

        /**
         * @param passcodeInPassword False by default. Set to true if the MFA passcode is embedded to the configured password. Can also be sourced from the
         * `SNOWFLAKE_PASSCODE_IN_PASSWORD` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder passcodeInPassword(Boolean passcodeInPassword) {
            return passcodeInPassword(Output.of(passcodeInPassword));
        }

        /**
         * @param password Password for user + password auth. Cannot be used with `private_key` and `private_key_passphrase`. Can also be sourced
         * from the `SNOWFLAKE_PASSWORD` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password for user + password auth. Cannot be used with `private_key` and `private_key_passphrase`. Can also be sourced
         * from the `SNOWFLAKE_PASSWORD` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param port Specifies a custom port value used by the driver for privatelink connections. Can also be sourced from the
         * `SNOWFLAKE_PORT` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Specifies a custom port value used by the driver for privatelink connections. Can also be sourced from the
         * `SNOWFLAKE_PORT` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public Builder previewFeaturesEnabled(@Nullable Output<List<String>> previewFeaturesEnabled) {
            $.previewFeaturesEnabled = previewFeaturesEnabled;
            return this;
        }

        public Builder previewFeaturesEnabled(List<String> previewFeaturesEnabled) {
            return previewFeaturesEnabled(Output.of(previewFeaturesEnabled));
        }

        public Builder previewFeaturesEnabled(String... previewFeaturesEnabled) {
            return previewFeaturesEnabled(List.of(previewFeaturesEnabled));
        }

        /**
         * @param privateKey Private Key for username+private-key auth. Cannot be used with `password`. Can also be sourced from the
         * `SNOWFLAKE_PRIVATE_KEY` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey Private Key for username+private-key auth. Cannot be used with `password`. Can also be sourced from the
         * `SNOWFLAKE_PRIVATE_KEY` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param privateKeyPassphrase Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and
         * des-ede3-cbc. Can also be sourced from the `SNOWFLAKE_PRIVATE_KEY_PASSPHRASE` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPassphrase(@Nullable Output<String> privateKeyPassphrase) {
            $.privateKeyPassphrase = privateKeyPassphrase;
            return this;
        }

        /**
         * @param privateKeyPassphrase Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and
         * des-ede3-cbc. Can also be sourced from the `SNOWFLAKE_PRIVATE_KEY_PASSPHRASE` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPassphrase(String privateKeyPassphrase) {
            return privateKeyPassphrase(Output.of(privateKeyPassphrase));
        }

        /**
         * @param profile Sets the profile to read from ~/.snowflake/config file. Can also be sourced from the `SNOWFLAKE_PROFILE` environment
         * variable.
         * 
         * @return builder
         * 
         */
        public Builder profile(@Nullable Output<String> profile) {
            $.profile = profile;
            return this;
        }

        /**
         * @param profile Sets the profile to read from ~/.snowflake/config file. Can also be sourced from the `SNOWFLAKE_PROFILE` environment
         * variable.
         * 
         * @return builder
         * 
         */
        public Builder profile(String profile) {
            return profile(Output.of(profile));
        }

        /**
         * @param protocol A protocol used in the connection. Valid options are: `http` | `https`. Can also be sourced from the
         * `SNOWFLAKE_PROTOCOL` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol A protocol used in the connection. Valid options are: `http` | `https`. Can also be sourced from the
         * `SNOWFLAKE_PROTOCOL` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param requestTimeout request retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the
         * `SNOWFLAKE_REQUEST_TIMEOUT` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder requestTimeout(@Nullable Output<Integer> requestTimeout) {
            $.requestTimeout = requestTimeout;
            return this;
        }

        /**
         * @param requestTimeout request retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the
         * `SNOWFLAKE_REQUEST_TIMEOUT` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder requestTimeout(Integer requestTimeout) {
            return requestTimeout(Output.of(requestTimeout));
        }

        /**
         * @param role Specifies the role to use by default for accessing Snowflake objects in the client session. Can also be sourced from the
         * `SNOWFLAKE_ROLE` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role Specifies the role to use by default for accessing Snowflake objects in the client session. Can also be sourced from the
         * `SNOWFLAKE_ROLE` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param skipTomlFilePermissionVerification False by default. Skips TOML configuration file permission verification. This flag has no effect on Windows systems, as
         * the permissions are not checked on this platform. Instead of skipping the permissions verification, we recommend setting
         * the proper privileges - see the section below. Can also be sourced from the
         * `SNOWFLAKE_SKIP_TOML_FILE_PERMISSION_VERIFICATION` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder skipTomlFilePermissionVerification(@Nullable Output<Boolean> skipTomlFilePermissionVerification) {
            $.skipTomlFilePermissionVerification = skipTomlFilePermissionVerification;
            return this;
        }

        /**
         * @param skipTomlFilePermissionVerification False by default. Skips TOML configuration file permission verification. This flag has no effect on Windows systems, as
         * the permissions are not checked on this platform. Instead of skipping the permissions verification, we recommend setting
         * the proper privileges - see the section below. Can also be sourced from the
         * `SNOWFLAKE_SKIP_TOML_FILE_PERMISSION_VERIFICATION` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder skipTomlFilePermissionVerification(Boolean skipTomlFilePermissionVerification) {
            return skipTomlFilePermissionVerification(Output.of(skipTomlFilePermissionVerification));
        }

        /**
         * @param tmpDirectoryPath Sets temporary directory used by the driver for operations like encrypting, compressing etc. Can also be sourced from
         * the `SNOWFLAKE_TMP_DIRECTORY_PATH` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder tmpDirectoryPath(@Nullable Output<String> tmpDirectoryPath) {
            $.tmpDirectoryPath = tmpDirectoryPath;
            return this;
        }

        /**
         * @param tmpDirectoryPath Sets temporary directory used by the driver for operations like encrypting, compressing etc. Can also be sourced from
         * the `SNOWFLAKE_TMP_DIRECTORY_PATH` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder tmpDirectoryPath(String tmpDirectoryPath) {
            return tmpDirectoryPath(Output.of(tmpDirectoryPath));
        }

        /**
         * @param token Token to use for OAuth and other forms of token based auth. Can also be sourced from the `SNOWFLAKE_TOKEN` environment
         * variable.
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token Token to use for OAuth and other forms of token based auth. Can also be sourced from the `SNOWFLAKE_TOKEN` environment
         * variable.
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        public Builder tokenAccessor(@Nullable Output<ProviderTokenAccessorArgs> tokenAccessor) {
            $.tokenAccessor = tokenAccessor;
            return this;
        }

        public Builder tokenAccessor(ProviderTokenAccessorArgs tokenAccessor) {
            return tokenAccessor(Output.of(tokenAccessor));
        }

        /**
         * @param useLegacyTomlFile False by default. When this is set to true, the provider expects the legacy TOML format. Otherwise, it expects the new
         * format. See more in the section below Can also be sourced from the `SNOWFLAKE_USE_LEGACY_TOML_FILE` environment
         * variable.
         * 
         * @return builder
         * 
         */
        public Builder useLegacyTomlFile(@Nullable Output<Boolean> useLegacyTomlFile) {
            $.useLegacyTomlFile = useLegacyTomlFile;
            return this;
        }

        /**
         * @param useLegacyTomlFile False by default. When this is set to true, the provider expects the legacy TOML format. Otherwise, it expects the new
         * format. See more in the section below Can also be sourced from the `SNOWFLAKE_USE_LEGACY_TOML_FILE` environment
         * variable.
         * 
         * @return builder
         * 
         */
        public Builder useLegacyTomlFile(Boolean useLegacyTomlFile) {
            return useLegacyTomlFile(Output.of(useLegacyTomlFile));
        }

        /**
         * @param user Username. Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_USER` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user Username. Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_USER` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        /**
         * @param validateDefaultParameters True by default. If false, disables the validation checks for Database, Schema, Warehouse and Role at the time a
         * connection is established. Can also be sourced from the `SNOWFLAKE_VALIDATE_DEFAULT_PARAMETERS` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder validateDefaultParameters(@Nullable Output<String> validateDefaultParameters) {
            $.validateDefaultParameters = validateDefaultParameters;
            return this;
        }

        /**
         * @param validateDefaultParameters True by default. If false, disables the validation checks for Database, Schema, Warehouse and Role at the time a
         * connection is established. Can also be sourced from the `SNOWFLAKE_VALIDATE_DEFAULT_PARAMETERS` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder validateDefaultParameters(String validateDefaultParameters) {
            return validateDefaultParameters(Output.of(validateDefaultParameters));
        }

        /**
         * @param warehouse Specifies the virtual warehouse to use by default for queries, loading, etc. in the client session. Can also be sourced
         * from the `SNOWFLAKE_WAREHOUSE` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder warehouse(@Nullable Output<String> warehouse) {
            $.warehouse = warehouse;
            return this;
        }

        /**
         * @param warehouse Specifies the virtual warehouse to use by default for queries, loading, etc. in the client session. Can also be sourced
         * from the `SNOWFLAKE_WAREHOUSE` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder warehouse(String warehouse) {
            return warehouse(Output.of(warehouse));
        }

        public ProviderArgs build() {
            $.host = Codegen.stringProp("host").output().arg($.host).env("SNOWFLAKE_HOST").getNullable();
            $.password = Codegen.stringProp("password").secret().arg($.password).env("SNOWFLAKE_PASSWORD").getNullable();
            $.port = Codegen.integerProp("port").output().arg($.port).env("SNOWFLAKE_PORT").getNullable();
            $.privateKeyPassphrase = Codegen.stringProp("privateKeyPassphrase").secret().arg($.privateKeyPassphrase).env("SNOWFLAKE_PRIVATE_KEY_PASSPHRASE").getNullable();
            $.protocol = Codegen.stringProp("protocol").output().arg($.protocol).env("SNOWFLAKE_PROTOCOL").getNullable();
            $.role = Codegen.stringProp("role").output().arg($.role).env("SNOWFLAKE_ROLE").getNullable();
            $.warehouse = Codegen.stringProp("warehouse").output().arg($.warehouse).env("SNOWFLAKE_WAREHOUSE").getNullable();
            return $;
        }
    }

}
