// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ComputePoolShowOutputArgs extends com.pulumi.resources.ResourceArgs {

    public static final ComputePoolShowOutputArgs Empty = new ComputePoolShowOutputArgs();

    @Import(name="activeNodes")
    private @Nullable Output<Integer> activeNodes;

    public Optional<Output<Integer>> activeNodes() {
        return Optional.ofNullable(this.activeNodes);
    }

    @Import(name="application")
    private @Nullable Output<String> application;

    public Optional<Output<String>> application() {
        return Optional.ofNullable(this.application);
    }

    @Import(name="autoResume")
    private @Nullable Output<Boolean> autoResume;

    public Optional<Output<Boolean>> autoResume() {
        return Optional.ofNullable(this.autoResume);
    }

    @Import(name="autoSuspendSecs")
    private @Nullable Output<Integer> autoSuspendSecs;

    public Optional<Output<Integer>> autoSuspendSecs() {
        return Optional.ofNullable(this.autoSuspendSecs);
    }

    @Import(name="comment")
    private @Nullable Output<String> comment;

    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    @Import(name="idleNodes")
    private @Nullable Output<Integer> idleNodes;

    public Optional<Output<Integer>> idleNodes() {
        return Optional.ofNullable(this.idleNodes);
    }

    @Import(name="instanceFamily")
    private @Nullable Output<String> instanceFamily;

    public Optional<Output<String>> instanceFamily() {
        return Optional.ofNullable(this.instanceFamily);
    }

    @Import(name="isExclusive")
    private @Nullable Output<Boolean> isExclusive;

    public Optional<Output<Boolean>> isExclusive() {
        return Optional.ofNullable(this.isExclusive);
    }

    @Import(name="maxNodes")
    private @Nullable Output<Integer> maxNodes;

    public Optional<Output<Integer>> maxNodes() {
        return Optional.ofNullable(this.maxNodes);
    }

    @Import(name="minNodes")
    private @Nullable Output<Integer> minNodes;

    public Optional<Output<Integer>> minNodes() {
        return Optional.ofNullable(this.minNodes);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="numJobs")
    private @Nullable Output<Integer> numJobs;

    public Optional<Output<Integer>> numJobs() {
        return Optional.ofNullable(this.numJobs);
    }

    @Import(name="numServices")
    private @Nullable Output<Integer> numServices;

    public Optional<Output<Integer>> numServices() {
        return Optional.ofNullable(this.numServices);
    }

    @Import(name="owner")
    private @Nullable Output<String> owner;

    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    @Import(name="resumedOn")
    private @Nullable Output<String> resumedOn;

    public Optional<Output<String>> resumedOn() {
        return Optional.ofNullable(this.resumedOn);
    }

    @Import(name="state")
    private @Nullable Output<String> state;

    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    @Import(name="targetNodes")
    private @Nullable Output<Integer> targetNodes;

    public Optional<Output<Integer>> targetNodes() {
        return Optional.ofNullable(this.targetNodes);
    }

    @Import(name="updatedOn")
    private @Nullable Output<String> updatedOn;

    public Optional<Output<String>> updatedOn() {
        return Optional.ofNullable(this.updatedOn);
    }

    private ComputePoolShowOutputArgs() {}

    private ComputePoolShowOutputArgs(ComputePoolShowOutputArgs $) {
        this.activeNodes = $.activeNodes;
        this.application = $.application;
        this.autoResume = $.autoResume;
        this.autoSuspendSecs = $.autoSuspendSecs;
        this.comment = $.comment;
        this.createdOn = $.createdOn;
        this.idleNodes = $.idleNodes;
        this.instanceFamily = $.instanceFamily;
        this.isExclusive = $.isExclusive;
        this.maxNodes = $.maxNodes;
        this.minNodes = $.minNodes;
        this.name = $.name;
        this.numJobs = $.numJobs;
        this.numServices = $.numServices;
        this.owner = $.owner;
        this.resumedOn = $.resumedOn;
        this.state = $.state;
        this.targetNodes = $.targetNodes;
        this.updatedOn = $.updatedOn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ComputePoolShowOutputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ComputePoolShowOutputArgs $;

        public Builder() {
            $ = new ComputePoolShowOutputArgs();
        }

        public Builder(ComputePoolShowOutputArgs defaults) {
            $ = new ComputePoolShowOutputArgs(Objects.requireNonNull(defaults));
        }

        public Builder activeNodes(@Nullable Output<Integer> activeNodes) {
            $.activeNodes = activeNodes;
            return this;
        }

        public Builder activeNodes(Integer activeNodes) {
            return activeNodes(Output.of(activeNodes));
        }

        public Builder application(@Nullable Output<String> application) {
            $.application = application;
            return this;
        }

        public Builder application(String application) {
            return application(Output.of(application));
        }

        public Builder autoResume(@Nullable Output<Boolean> autoResume) {
            $.autoResume = autoResume;
            return this;
        }

        public Builder autoResume(Boolean autoResume) {
            return autoResume(Output.of(autoResume));
        }

        public Builder autoSuspendSecs(@Nullable Output<Integer> autoSuspendSecs) {
            $.autoSuspendSecs = autoSuspendSecs;
            return this;
        }

        public Builder autoSuspendSecs(Integer autoSuspendSecs) {
            return autoSuspendSecs(Output.of(autoSuspendSecs));
        }

        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        public Builder idleNodes(@Nullable Output<Integer> idleNodes) {
            $.idleNodes = idleNodes;
            return this;
        }

        public Builder idleNodes(Integer idleNodes) {
            return idleNodes(Output.of(idleNodes));
        }

        public Builder instanceFamily(@Nullable Output<String> instanceFamily) {
            $.instanceFamily = instanceFamily;
            return this;
        }

        public Builder instanceFamily(String instanceFamily) {
            return instanceFamily(Output.of(instanceFamily));
        }

        public Builder isExclusive(@Nullable Output<Boolean> isExclusive) {
            $.isExclusive = isExclusive;
            return this;
        }

        public Builder isExclusive(Boolean isExclusive) {
            return isExclusive(Output.of(isExclusive));
        }

        public Builder maxNodes(@Nullable Output<Integer> maxNodes) {
            $.maxNodes = maxNodes;
            return this;
        }

        public Builder maxNodes(Integer maxNodes) {
            return maxNodes(Output.of(maxNodes));
        }

        public Builder minNodes(@Nullable Output<Integer> minNodes) {
            $.minNodes = minNodes;
            return this;
        }

        public Builder minNodes(Integer minNodes) {
            return minNodes(Output.of(minNodes));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder numJobs(@Nullable Output<Integer> numJobs) {
            $.numJobs = numJobs;
            return this;
        }

        public Builder numJobs(Integer numJobs) {
            return numJobs(Output.of(numJobs));
        }

        public Builder numServices(@Nullable Output<Integer> numServices) {
            $.numServices = numServices;
            return this;
        }

        public Builder numServices(Integer numServices) {
            return numServices(Output.of(numServices));
        }

        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        public Builder resumedOn(@Nullable Output<String> resumedOn) {
            $.resumedOn = resumedOn;
            return this;
        }

        public Builder resumedOn(String resumedOn) {
            return resumedOn(Output.of(resumedOn));
        }

        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        public Builder state(String state) {
            return state(Output.of(state));
        }

        public Builder targetNodes(@Nullable Output<Integer> targetNodes) {
            $.targetNodes = targetNodes;
            return this;
        }

        public Builder targetNodes(Integer targetNodes) {
            return targetNodes(Output.of(targetNodes));
        }

        public Builder updatedOn(@Nullable Output<String> updatedOn) {
            $.updatedOn = updatedOn;
            return this;
        }

        public Builder updatedOn(String updatedOn) {
            return updatedOn(Output.of(updatedOn));
        }

        public ComputePoolShowOutputArgs build() {
            return $;
        }
    }

}
