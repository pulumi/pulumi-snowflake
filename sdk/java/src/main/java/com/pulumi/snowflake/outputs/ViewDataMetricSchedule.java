// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ViewDataMetricSchedule {
    /**
     * @return Specifies an interval (in minutes) of wait time inserted between runs of the data metric function. Conflicts with `usingCron`. Valid values are: `5` | `15` | `30` | `60` | `720` | `1440`. Due to Snowflake limitations, changes in this field are not managed by the provider. Please consider using taint command, `usingCron` field, or replace*triggered*by metadata argument.
     * 
     */
    private @Nullable Integer minutes;
    /**
     * @return Specifies a cron expression and time zone for periodically running the data metric function. Supports a subset of standard cron utility syntax. Conflicts with `minutes`.
     * 
     */
    private @Nullable String usingCron;

    private ViewDataMetricSchedule() {}
    /**
     * @return Specifies an interval (in minutes) of wait time inserted between runs of the data metric function. Conflicts with `usingCron`. Valid values are: `5` | `15` | `30` | `60` | `720` | `1440`. Due to Snowflake limitations, changes in this field are not managed by the provider. Please consider using taint command, `usingCron` field, or replace*triggered*by metadata argument.
     * 
     */
    public Optional<Integer> minutes() {
        return Optional.ofNullable(this.minutes);
    }
    /**
     * @return Specifies a cron expression and time zone for periodically running the data metric function. Supports a subset of standard cron utility syntax. Conflicts with `minutes`.
     * 
     */
    public Optional<String> usingCron() {
        return Optional.ofNullable(this.usingCron);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ViewDataMetricSchedule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer minutes;
        private @Nullable String usingCron;
        public Builder() {}
        public Builder(ViewDataMetricSchedule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.minutes = defaults.minutes;
    	      this.usingCron = defaults.usingCron;
        }

        @CustomType.Setter
        public Builder minutes(@Nullable Integer minutes) {

            this.minutes = minutes;
            return this;
        }
        @CustomType.Setter
        public Builder usingCron(@Nullable String usingCron) {

            this.usingCron = usingCron;
            return this;
        }
        public ViewDataMetricSchedule build() {
            final var _resultValue = new ViewDataMetricSchedule();
            _resultValue.minutes = minutes;
            _resultValue.usingCron = usingCron;
            return _resultValue;
        }
    }
}
