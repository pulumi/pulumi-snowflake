// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.snowflake.inputs.ViewAggregationPolicyArgs;
import com.pulumi.snowflake.inputs.ViewColumnArgs;
import com.pulumi.snowflake.inputs.ViewDataMetricFunctionArgs;
import com.pulumi.snowflake.inputs.ViewDataMetricScheduleArgs;
import com.pulumi.snowflake.inputs.ViewDescribeOutputArgs;
import com.pulumi.snowflake.inputs.ViewRowAccessPolicyArgs;
import com.pulumi.snowflake.inputs.ViewShowOutputArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ViewState extends com.pulumi.resources.ResourceArgs {

    public static final ViewState Empty = new ViewState();

    /**
     * Specifies the aggregation policy to set on a view.
     * 
     */
    @Import(name="aggregationPolicy")
    private @Nullable Output<ViewAggregationPolicyArgs> aggregationPolicy;

    /**
     * @return Specifies the aggregation policy to set on a view.
     * 
     */
    public Optional<Output<ViewAggregationPolicyArgs>> aggregationPolicy() {
        return Optional.ofNullable(this.aggregationPolicy);
    }

    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies to enable or disable change tracking on the table. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
     * 
     */
    @Import(name="changeTracking")
    private @Nullable Output<String> changeTracking;

    /**
     * @return (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies to enable or disable change tracking on the table. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
     * 
     */
    public Optional<Output<String>> changeTracking() {
        return Optional.ofNullable(this.changeTracking);
    }

    /**
     * If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.
     * 
     */
    @Import(name="columns")
    private @Nullable Output<List<ViewColumnArgs>> columns;

    /**
     * @return If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.
     * 
     */
    public Optional<Output<List<ViewColumnArgs>>> columns() {
        return Optional.ofNullable(this.columns);
    }

    /**
     * Specifies a comment for the view.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Specifies a comment for the view.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="copyGrants")
    private @Nullable Output<Boolean> copyGrants;

    public Optional<Output<Boolean>> copyGrants() {
        return Optional.ofNullable(this.copyGrants);
    }

    /**
     * Data metric functions used for the view.
     * 
     */
    @Import(name="dataMetricFunctions")
    private @Nullable Output<List<ViewDataMetricFunctionArgs>> dataMetricFunctions;

    /**
     * @return Data metric functions used for the view.
     * 
     */
    public Optional<Output<List<ViewDataMetricFunctionArgs>>> dataMetricFunctions() {
        return Optional.ofNullable(this.dataMetricFunctions);
    }

    /**
     * Specifies the schedule to run the data metric functions periodically.
     * 
     */
    @Import(name="dataMetricSchedule")
    private @Nullable Output<ViewDataMetricScheduleArgs> dataMetricSchedule;

    /**
     * @return Specifies the schedule to run the data metric functions periodically.
     * 
     */
    public Optional<Output<ViewDataMetricScheduleArgs>> dataMetricSchedule() {
        return Optional.ofNullable(this.dataMetricSchedule);
    }

    /**
     * The database in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="database")
    private @Nullable Output<String> database;

    /**
     * @return The database in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> database() {
        return Optional.ofNullable(this.database);
    }

    /**
     * Outputs the result of `DESCRIBE VIEW` for the given view.
     * 
     */
    @Import(name="describeOutputs")
    private @Nullable Output<List<ViewDescribeOutputArgs>> describeOutputs;

    /**
     * @return Outputs the result of `DESCRIBE VIEW` for the given view.
     * 
     */
    public Optional<Output<List<ViewDescribeOutputArgs>>> describeOutputs() {
        return Optional.ofNullable(this.describeOutputs);
    }

    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    @Import(name="fullyQualifiedName")
    private @Nullable Output<String> fullyQualifiedName;

    /**
     * @return Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    public Optional<Output<String>> fullyQualifiedName() {
        return Optional.ofNullable(this.fullyQualifiedName);
    }

    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
     * 
     */
    @Import(name="isRecursive")
    private @Nullable Output<String> isRecursive;

    /**
     * @return (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
     * 
     */
    public Optional<Output<String>> isRecursive() {
        return Optional.ofNullable(this.isRecursive);
    }

    @Import(name="isSecure")
    private @Nullable Output<String> isSecure;

    public Optional<Output<String>> isSecure() {
        return Optional.ofNullable(this.isSecure);
    }

    @Import(name="isTemporary")
    private @Nullable Output<String> isTemporary;

    public Optional<Output<String>> isTemporary() {
        return Optional.ofNullable(this.isTemporary);
    }

    /**
     * Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the row access policy to set on a view.
     * 
     */
    @Import(name="rowAccessPolicy")
    private @Nullable Output<ViewRowAccessPolicyArgs> rowAccessPolicy;

    /**
     * @return Specifies the row access policy to set on a view.
     * 
     */
    public Optional<Output<ViewRowAccessPolicyArgs>> rowAccessPolicy() {
        return Optional.ofNullable(this.rowAccessPolicy);
    }

    /**
     * The schema in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="schema")
    private @Nullable Output<String> schema;

    /**
     * @return The schema in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> schema() {
        return Optional.ofNullable(this.schema);
    }

    /**
     * Outputs the result of `SHOW VIEW` for the given view.
     * 
     */
    @Import(name="showOutputs")
    private @Nullable Output<List<ViewShowOutputArgs>> showOutputs;

    /**
     * @return Outputs the result of `SHOW VIEW` for the given view.
     * 
     */
    public Optional<Output<List<ViewShowOutputArgs>>> showOutputs() {
        return Optional.ofNullable(this.showOutputs);
    }

    /**
     * Specifies the query used to create the view. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
     * 
     */
    @Import(name="statement")
    private @Nullable Output<String> statement;

    /**
     * @return Specifies the query used to create the view. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
     * 
     */
    public Optional<Output<String>> statement() {
        return Optional.ofNullable(this.statement);
    }

    private ViewState() {}

    private ViewState(ViewState $) {
        this.aggregationPolicy = $.aggregationPolicy;
        this.changeTracking = $.changeTracking;
        this.columns = $.columns;
        this.comment = $.comment;
        this.copyGrants = $.copyGrants;
        this.dataMetricFunctions = $.dataMetricFunctions;
        this.dataMetricSchedule = $.dataMetricSchedule;
        this.database = $.database;
        this.describeOutputs = $.describeOutputs;
        this.fullyQualifiedName = $.fullyQualifiedName;
        this.isRecursive = $.isRecursive;
        this.isSecure = $.isSecure;
        this.isTemporary = $.isTemporary;
        this.name = $.name;
        this.rowAccessPolicy = $.rowAccessPolicy;
        this.schema = $.schema;
        this.showOutputs = $.showOutputs;
        this.statement = $.statement;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ViewState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ViewState $;

        public Builder() {
            $ = new ViewState();
        }

        public Builder(ViewState defaults) {
            $ = new ViewState(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregationPolicy Specifies the aggregation policy to set on a view.
         * 
         * @return builder
         * 
         */
        public Builder aggregationPolicy(@Nullable Output<ViewAggregationPolicyArgs> aggregationPolicy) {
            $.aggregationPolicy = aggregationPolicy;
            return this;
        }

        /**
         * @param aggregationPolicy Specifies the aggregation policy to set on a view.
         * 
         * @return builder
         * 
         */
        public Builder aggregationPolicy(ViewAggregationPolicyArgs aggregationPolicy) {
            return aggregationPolicy(Output.of(aggregationPolicy));
        }

        /**
         * @param changeTracking (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies to enable or disable change tracking on the table. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
         * 
         * @return builder
         * 
         */
        public Builder changeTracking(@Nullable Output<String> changeTracking) {
            $.changeTracking = changeTracking;
            return this;
        }

        /**
         * @param changeTracking (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies to enable or disable change tracking on the table. Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
         * 
         * @return builder
         * 
         */
        public Builder changeTracking(String changeTracking) {
            return changeTracking(Output.of(changeTracking));
        }

        /**
         * @param columns If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.
         * 
         * @return builder
         * 
         */
        public Builder columns(@Nullable Output<List<ViewColumnArgs>> columns) {
            $.columns = columns;
            return this;
        }

        /**
         * @param columns If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.
         * 
         * @return builder
         * 
         */
        public Builder columns(List<ViewColumnArgs> columns) {
            return columns(Output.of(columns));
        }

        /**
         * @param columns If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.
         * 
         * @return builder
         * 
         */
        public Builder columns(ViewColumnArgs... columns) {
            return columns(List.of(columns));
        }

        /**
         * @param comment Specifies a comment for the view.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Specifies a comment for the view.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder copyGrants(@Nullable Output<Boolean> copyGrants) {
            $.copyGrants = copyGrants;
            return this;
        }

        public Builder copyGrants(Boolean copyGrants) {
            return copyGrants(Output.of(copyGrants));
        }

        /**
         * @param dataMetricFunctions Data metric functions used for the view.
         * 
         * @return builder
         * 
         */
        public Builder dataMetricFunctions(@Nullable Output<List<ViewDataMetricFunctionArgs>> dataMetricFunctions) {
            $.dataMetricFunctions = dataMetricFunctions;
            return this;
        }

        /**
         * @param dataMetricFunctions Data metric functions used for the view.
         * 
         * @return builder
         * 
         */
        public Builder dataMetricFunctions(List<ViewDataMetricFunctionArgs> dataMetricFunctions) {
            return dataMetricFunctions(Output.of(dataMetricFunctions));
        }

        /**
         * @param dataMetricFunctions Data metric functions used for the view.
         * 
         * @return builder
         * 
         */
        public Builder dataMetricFunctions(ViewDataMetricFunctionArgs... dataMetricFunctions) {
            return dataMetricFunctions(List.of(dataMetricFunctions));
        }

        /**
         * @param dataMetricSchedule Specifies the schedule to run the data metric functions periodically.
         * 
         * @return builder
         * 
         */
        public Builder dataMetricSchedule(@Nullable Output<ViewDataMetricScheduleArgs> dataMetricSchedule) {
            $.dataMetricSchedule = dataMetricSchedule;
            return this;
        }

        /**
         * @param dataMetricSchedule Specifies the schedule to run the data metric functions periodically.
         * 
         * @return builder
         * 
         */
        public Builder dataMetricSchedule(ViewDataMetricScheduleArgs dataMetricSchedule) {
            return dataMetricSchedule(Output.of(dataMetricSchedule));
        }

        /**
         * @param database The database in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(@Nullable Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The database in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param describeOutputs Outputs the result of `DESCRIBE VIEW` for the given view.
         * 
         * @return builder
         * 
         */
        public Builder describeOutputs(@Nullable Output<List<ViewDescribeOutputArgs>> describeOutputs) {
            $.describeOutputs = describeOutputs;
            return this;
        }

        /**
         * @param describeOutputs Outputs the result of `DESCRIBE VIEW` for the given view.
         * 
         * @return builder
         * 
         */
        public Builder describeOutputs(List<ViewDescribeOutputArgs> describeOutputs) {
            return describeOutputs(Output.of(describeOutputs));
        }

        /**
         * @param describeOutputs Outputs the result of `DESCRIBE VIEW` for the given view.
         * 
         * @return builder
         * 
         */
        public Builder describeOutputs(ViewDescribeOutputArgs... describeOutputs) {
            return describeOutputs(List.of(describeOutputs));
        }

        /**
         * @param fullyQualifiedName Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
         * 
         * @return builder
         * 
         */
        public Builder fullyQualifiedName(@Nullable Output<String> fullyQualifiedName) {
            $.fullyQualifiedName = fullyQualifiedName;
            return this;
        }

        /**
         * @param fullyQualifiedName Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
         * 
         * @return builder
         * 
         */
        public Builder fullyQualifiedName(String fullyQualifiedName) {
            return fullyQualifiedName(Output.of(fullyQualifiedName));
        }

        /**
         * @param isRecursive (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
         * 
         * @return builder
         * 
         */
        public Builder isRecursive(@Nullable Output<String> isRecursive) {
            $.isRecursive = isRecursive;
            return this;
        }

        /**
         * @param isRecursive (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
         * 
         * @return builder
         * 
         */
        public Builder isRecursive(String isRecursive) {
            return isRecursive(Output.of(isRecursive));
        }

        public Builder isSecure(@Nullable Output<String> isSecure) {
            $.isSecure = isSecure;
            return this;
        }

        public Builder isSecure(String isSecure) {
            return isSecure(Output.of(isSecure));
        }

        public Builder isTemporary(@Nullable Output<String> isTemporary) {
            $.isTemporary = isTemporary;
            return this;
        }

        public Builder isTemporary(String isTemporary) {
            return isTemporary(Output.of(isTemporary));
        }

        /**
         * @param name Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param rowAccessPolicy Specifies the row access policy to set on a view.
         * 
         * @return builder
         * 
         */
        public Builder rowAccessPolicy(@Nullable Output<ViewRowAccessPolicyArgs> rowAccessPolicy) {
            $.rowAccessPolicy = rowAccessPolicy;
            return this;
        }

        /**
         * @param rowAccessPolicy Specifies the row access policy to set on a view.
         * 
         * @return builder
         * 
         */
        public Builder rowAccessPolicy(ViewRowAccessPolicyArgs rowAccessPolicy) {
            return rowAccessPolicy(Output.of(rowAccessPolicy));
        }

        /**
         * @param schema The schema in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder schema(@Nullable Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The schema in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param showOutputs Outputs the result of `SHOW VIEW` for the given view.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(@Nullable Output<List<ViewShowOutputArgs>> showOutputs) {
            $.showOutputs = showOutputs;
            return this;
        }

        /**
         * @param showOutputs Outputs the result of `SHOW VIEW` for the given view.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(List<ViewShowOutputArgs> showOutputs) {
            return showOutputs(Output.of(showOutputs));
        }

        /**
         * @param showOutputs Outputs the result of `SHOW VIEW` for the given view.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(ViewShowOutputArgs... showOutputs) {
            return showOutputs(List.of(showOutputs));
        }

        /**
         * @param statement Specifies the query used to create the view. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
         * 
         * @return builder
         * 
         */
        public Builder statement(@Nullable Output<String> statement) {
            $.statement = statement;
            return this;
        }

        /**
         * @param statement Specifies the query used to create the view. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
         * 
         * @return builder
         * 
         */
        public Builder statement(String statement) {
            return statement(Output.of(statement));
        }

        public ViewState build() {
            return $;
        }
    }

}
