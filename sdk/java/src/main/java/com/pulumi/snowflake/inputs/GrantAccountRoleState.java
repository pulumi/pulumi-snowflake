// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GrantAccountRoleState extends com.pulumi.resources.ResourceArgs {

    public static final GrantAccountRoleState Empty = new GrantAccountRoleState();

    /**
     * The fully qualified name of the parent role which will create a parent-child relationship between the roles.
     * 
     */
    @Import(name="parentRoleName")
    private @Nullable Output<String> parentRoleName;

    /**
     * @return The fully qualified name of the parent role which will create a parent-child relationship between the roles.
     * 
     */
    public Optional<Output<String>> parentRoleName() {
        return Optional.ofNullable(this.parentRoleName);
    }

    /**
     * The fully qualified name of the role which will be granted to the user or parent role.
     * 
     */
    @Import(name="roleName")
    private @Nullable Output<String> roleName;

    /**
     * @return The fully qualified name of the role which will be granted to the user or parent role.
     * 
     */
    public Optional<Output<String>> roleName() {
        return Optional.ofNullable(this.roleName);
    }

    /**
     * The fully qualified name of the user on which specified role will be granted.
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    /**
     * @return The fully qualified name of the user on which specified role will be granted.
     * 
     */
    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    private GrantAccountRoleState() {}

    private GrantAccountRoleState(GrantAccountRoleState $) {
        this.parentRoleName = $.parentRoleName;
        this.roleName = $.roleName;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GrantAccountRoleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GrantAccountRoleState $;

        public Builder() {
            $ = new GrantAccountRoleState();
        }

        public Builder(GrantAccountRoleState defaults) {
            $ = new GrantAccountRoleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param parentRoleName The fully qualified name of the parent role which will create a parent-child relationship between the roles.
         * 
         * @return builder
         * 
         */
        public Builder parentRoleName(@Nullable Output<String> parentRoleName) {
            $.parentRoleName = parentRoleName;
            return this;
        }

        /**
         * @param parentRoleName The fully qualified name of the parent role which will create a parent-child relationship between the roles.
         * 
         * @return builder
         * 
         */
        public Builder parentRoleName(String parentRoleName) {
            return parentRoleName(Output.of(parentRoleName));
        }

        /**
         * @param roleName The fully qualified name of the role which will be granted to the user or parent role.
         * 
         * @return builder
         * 
         */
        public Builder roleName(@Nullable Output<String> roleName) {
            $.roleName = roleName;
            return this;
        }

        /**
         * @param roleName The fully qualified name of the role which will be granted to the user or parent role.
         * 
         * @return builder
         * 
         */
        public Builder roleName(String roleName) {
            return roleName(Output.of(roleName));
        }

        /**
         * @param userName The fully qualified name of the user on which specified role will be granted.
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName The fully qualified name of the user on which specified role will be granted.
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public GrantAccountRoleState build() {
            return $;
        }
    }

}
