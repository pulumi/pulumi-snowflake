// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationIntegrationState extends com.pulumi.resources.ResourceArgs {

    public static final NotificationIntegrationState Empty = new NotificationIntegrationState();

    /**
     * The external ID that Snowflake will use when assuming the AWS role
     * 
     */
    @Import(name="awsSnsExternalId")
    private @Nullable Output<String> awsSnsExternalId;

    /**
     * @return The external ID that Snowflake will use when assuming the AWS role
     * 
     */
    public Optional<Output<String>> awsSnsExternalId() {
        return Optional.ofNullable(this.awsSnsExternalId);
    }

    /**
     * The Snowflake user that will attempt to assume the AWS role.
     * 
     */
    @Import(name="awsSnsIamUserArn")
    private @Nullable Output<String> awsSnsIamUserArn;

    /**
     * @return The Snowflake user that will attempt to assume the AWS role.
     * 
     */
    public Optional<Output<String>> awsSnsIamUserArn() {
        return Optional.ofNullable(this.awsSnsIamUserArn);
    }

    /**
     * AWS IAM role ARN for notification integration to assume
     * 
     */
    @Import(name="awsSnsRoleArn")
    private @Nullable Output<String> awsSnsRoleArn;

    /**
     * @return AWS IAM role ARN for notification integration to assume
     * 
     */
    public Optional<Output<String>> awsSnsRoleArn() {
        return Optional.ofNullable(this.awsSnsRoleArn);
    }

    /**
     * AWS SNS Topic ARN for notification integration to connect to
     * 
     */
    @Import(name="awsSnsTopicArn")
    private @Nullable Output<String> awsSnsTopicArn;

    /**
     * @return AWS SNS Topic ARN for notification integration to connect to
     * 
     */
    public Optional<Output<String>> awsSnsTopicArn() {
        return Optional.ofNullable(this.awsSnsTopicArn);
    }

    /**
     * AWS SQS queue ARN for notification integration to connect to
     * 
     */
    @Import(name="awsSqsArn")
    private @Nullable Output<String> awsSqsArn;

    /**
     * @return AWS SQS queue ARN for notification integration to connect to
     * 
     */
    public Optional<Output<String>> awsSqsArn() {
        return Optional.ofNullable(this.awsSqsArn);
    }

    /**
     * The external ID that Snowflake will use when assuming the AWS role
     * 
     */
    @Import(name="awsSqsExternalId")
    private @Nullable Output<String> awsSqsExternalId;

    /**
     * @return The external ID that Snowflake will use when assuming the AWS role
     * 
     */
    public Optional<Output<String>> awsSqsExternalId() {
        return Optional.ofNullable(this.awsSqsExternalId);
    }

    /**
     * The Snowflake user that will attempt to assume the AWS role.
     * 
     */
    @Import(name="awsSqsIamUserArn")
    private @Nullable Output<String> awsSqsIamUserArn;

    /**
     * @return The Snowflake user that will attempt to assume the AWS role.
     * 
     */
    public Optional<Output<String>> awsSqsIamUserArn() {
        return Optional.ofNullable(this.awsSqsIamUserArn);
    }

    /**
     * AWS IAM role ARN for notification integration to assume
     * 
     */
    @Import(name="awsSqsRoleArn")
    private @Nullable Output<String> awsSqsRoleArn;

    /**
     * @return AWS IAM role ARN for notification integration to assume
     * 
     */
    public Optional<Output<String>> awsSqsRoleArn() {
        return Optional.ofNullable(this.awsSqsRoleArn);
    }

    /**
     * The queue ID for the Azure Queue Storage queue created for Event Grid notifications
     * 
     */
    @Import(name="azureStorageQueuePrimaryUri")
    private @Nullable Output<String> azureStorageQueuePrimaryUri;

    /**
     * @return The queue ID for the Azure Queue Storage queue created for Event Grid notifications
     * 
     */
    public Optional<Output<String>> azureStorageQueuePrimaryUri() {
        return Optional.ofNullable(this.azureStorageQueuePrimaryUri);
    }

    /**
     * The ID of the Azure Active Directory tenant used for identity management
     * 
     */
    @Import(name="azureTenantId")
    private @Nullable Output<String> azureTenantId;

    /**
     * @return The ID of the Azure Active Directory tenant used for identity management
     * 
     */
    public Optional<Output<String>> azureTenantId() {
        return Optional.ofNullable(this.azureTenantId);
    }

    /**
     * A comment for the integration
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return A comment for the integration
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * Date and time when the notification integration was created.
     * 
     */
    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    /**
     * @return Date and time when the notification integration was created.
     * 
     */
    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    /**
     * Direction of the cloud messaging with respect to Snowflake (required only for error notifications)
     * 
     */
    @Import(name="direction")
    private @Nullable Output<String> direction;

    /**
     * @return Direction of the cloud messaging with respect to Snowflake (required only for error notifications)
     * 
     */
    public Optional<Output<String>> direction() {
        return Optional.ofNullable(this.direction);
    }

    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The GCP service account identifier that Snowflake will use when assuming the GCP role
     * 
     */
    @Import(name="gcpPubsubServiceAccount")
    private @Nullable Output<String> gcpPubsubServiceAccount;

    /**
     * @return The GCP service account identifier that Snowflake will use when assuming the GCP role
     * 
     */
    public Optional<Output<String>> gcpPubsubServiceAccount() {
        return Optional.ofNullable(this.gcpPubsubServiceAccount);
    }

    /**
     * The subscription id that Snowflake will listen to when using the GCP_PUBSUB provider.
     * 
     */
    @Import(name="gcpPubsubSubscriptionName")
    private @Nullable Output<String> gcpPubsubSubscriptionName;

    /**
     * @return The subscription id that Snowflake will listen to when using the GCP_PUBSUB provider.
     * 
     */
    public Optional<Output<String>> gcpPubsubSubscriptionName() {
        return Optional.ofNullable(this.gcpPubsubSubscriptionName);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The third-party cloud message queuing service (e.g. AZURE*STORAGE*QUEUE, AWS*SQS, AWS*SNS)
     * 
     */
    @Import(name="notificationProvider")
    private @Nullable Output<String> notificationProvider;

    /**
     * @return The third-party cloud message queuing service (e.g. AZURE*STORAGE*QUEUE, AWS*SQS, AWS*SNS)
     * 
     */
    public Optional<Output<String>> notificationProvider() {
        return Optional.ofNullable(this.notificationProvider);
    }

    /**
     * A type of integration
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return A type of integration
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private NotificationIntegrationState() {}

    private NotificationIntegrationState(NotificationIntegrationState $) {
        this.awsSnsExternalId = $.awsSnsExternalId;
        this.awsSnsIamUserArn = $.awsSnsIamUserArn;
        this.awsSnsRoleArn = $.awsSnsRoleArn;
        this.awsSnsTopicArn = $.awsSnsTopicArn;
        this.awsSqsArn = $.awsSqsArn;
        this.awsSqsExternalId = $.awsSqsExternalId;
        this.awsSqsIamUserArn = $.awsSqsIamUserArn;
        this.awsSqsRoleArn = $.awsSqsRoleArn;
        this.azureStorageQueuePrimaryUri = $.azureStorageQueuePrimaryUri;
        this.azureTenantId = $.azureTenantId;
        this.comment = $.comment;
        this.createdOn = $.createdOn;
        this.direction = $.direction;
        this.enabled = $.enabled;
        this.gcpPubsubServiceAccount = $.gcpPubsubServiceAccount;
        this.gcpPubsubSubscriptionName = $.gcpPubsubSubscriptionName;
        this.name = $.name;
        this.notificationProvider = $.notificationProvider;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationIntegrationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationIntegrationState $;

        public Builder() {
            $ = new NotificationIntegrationState();
        }

        public Builder(NotificationIntegrationState defaults) {
            $ = new NotificationIntegrationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param awsSnsExternalId The external ID that Snowflake will use when assuming the AWS role
         * 
         * @return builder
         * 
         */
        public Builder awsSnsExternalId(@Nullable Output<String> awsSnsExternalId) {
            $.awsSnsExternalId = awsSnsExternalId;
            return this;
        }

        /**
         * @param awsSnsExternalId The external ID that Snowflake will use when assuming the AWS role
         * 
         * @return builder
         * 
         */
        public Builder awsSnsExternalId(String awsSnsExternalId) {
            return awsSnsExternalId(Output.of(awsSnsExternalId));
        }

        /**
         * @param awsSnsIamUserArn The Snowflake user that will attempt to assume the AWS role.
         * 
         * @return builder
         * 
         */
        public Builder awsSnsIamUserArn(@Nullable Output<String> awsSnsIamUserArn) {
            $.awsSnsIamUserArn = awsSnsIamUserArn;
            return this;
        }

        /**
         * @param awsSnsIamUserArn The Snowflake user that will attempt to assume the AWS role.
         * 
         * @return builder
         * 
         */
        public Builder awsSnsIamUserArn(String awsSnsIamUserArn) {
            return awsSnsIamUserArn(Output.of(awsSnsIamUserArn));
        }

        /**
         * @param awsSnsRoleArn AWS IAM role ARN for notification integration to assume
         * 
         * @return builder
         * 
         */
        public Builder awsSnsRoleArn(@Nullable Output<String> awsSnsRoleArn) {
            $.awsSnsRoleArn = awsSnsRoleArn;
            return this;
        }

        /**
         * @param awsSnsRoleArn AWS IAM role ARN for notification integration to assume
         * 
         * @return builder
         * 
         */
        public Builder awsSnsRoleArn(String awsSnsRoleArn) {
            return awsSnsRoleArn(Output.of(awsSnsRoleArn));
        }

        /**
         * @param awsSnsTopicArn AWS SNS Topic ARN for notification integration to connect to
         * 
         * @return builder
         * 
         */
        public Builder awsSnsTopicArn(@Nullable Output<String> awsSnsTopicArn) {
            $.awsSnsTopicArn = awsSnsTopicArn;
            return this;
        }

        /**
         * @param awsSnsTopicArn AWS SNS Topic ARN for notification integration to connect to
         * 
         * @return builder
         * 
         */
        public Builder awsSnsTopicArn(String awsSnsTopicArn) {
            return awsSnsTopicArn(Output.of(awsSnsTopicArn));
        }

        /**
         * @param awsSqsArn AWS SQS queue ARN for notification integration to connect to
         * 
         * @return builder
         * 
         */
        public Builder awsSqsArn(@Nullable Output<String> awsSqsArn) {
            $.awsSqsArn = awsSqsArn;
            return this;
        }

        /**
         * @param awsSqsArn AWS SQS queue ARN for notification integration to connect to
         * 
         * @return builder
         * 
         */
        public Builder awsSqsArn(String awsSqsArn) {
            return awsSqsArn(Output.of(awsSqsArn));
        }

        /**
         * @param awsSqsExternalId The external ID that Snowflake will use when assuming the AWS role
         * 
         * @return builder
         * 
         */
        public Builder awsSqsExternalId(@Nullable Output<String> awsSqsExternalId) {
            $.awsSqsExternalId = awsSqsExternalId;
            return this;
        }

        /**
         * @param awsSqsExternalId The external ID that Snowflake will use when assuming the AWS role
         * 
         * @return builder
         * 
         */
        public Builder awsSqsExternalId(String awsSqsExternalId) {
            return awsSqsExternalId(Output.of(awsSqsExternalId));
        }

        /**
         * @param awsSqsIamUserArn The Snowflake user that will attempt to assume the AWS role.
         * 
         * @return builder
         * 
         */
        public Builder awsSqsIamUserArn(@Nullable Output<String> awsSqsIamUserArn) {
            $.awsSqsIamUserArn = awsSqsIamUserArn;
            return this;
        }

        /**
         * @param awsSqsIamUserArn The Snowflake user that will attempt to assume the AWS role.
         * 
         * @return builder
         * 
         */
        public Builder awsSqsIamUserArn(String awsSqsIamUserArn) {
            return awsSqsIamUserArn(Output.of(awsSqsIamUserArn));
        }

        /**
         * @param awsSqsRoleArn AWS IAM role ARN for notification integration to assume
         * 
         * @return builder
         * 
         */
        public Builder awsSqsRoleArn(@Nullable Output<String> awsSqsRoleArn) {
            $.awsSqsRoleArn = awsSqsRoleArn;
            return this;
        }

        /**
         * @param awsSqsRoleArn AWS IAM role ARN for notification integration to assume
         * 
         * @return builder
         * 
         */
        public Builder awsSqsRoleArn(String awsSqsRoleArn) {
            return awsSqsRoleArn(Output.of(awsSqsRoleArn));
        }

        /**
         * @param azureStorageQueuePrimaryUri The queue ID for the Azure Queue Storage queue created for Event Grid notifications
         * 
         * @return builder
         * 
         */
        public Builder azureStorageQueuePrimaryUri(@Nullable Output<String> azureStorageQueuePrimaryUri) {
            $.azureStorageQueuePrimaryUri = azureStorageQueuePrimaryUri;
            return this;
        }

        /**
         * @param azureStorageQueuePrimaryUri The queue ID for the Azure Queue Storage queue created for Event Grid notifications
         * 
         * @return builder
         * 
         */
        public Builder azureStorageQueuePrimaryUri(String azureStorageQueuePrimaryUri) {
            return azureStorageQueuePrimaryUri(Output.of(azureStorageQueuePrimaryUri));
        }

        /**
         * @param azureTenantId The ID of the Azure Active Directory tenant used for identity management
         * 
         * @return builder
         * 
         */
        public Builder azureTenantId(@Nullable Output<String> azureTenantId) {
            $.azureTenantId = azureTenantId;
            return this;
        }

        /**
         * @param azureTenantId The ID of the Azure Active Directory tenant used for identity management
         * 
         * @return builder
         * 
         */
        public Builder azureTenantId(String azureTenantId) {
            return azureTenantId(Output.of(azureTenantId));
        }

        /**
         * @param comment A comment for the integration
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment A comment for the integration
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param createdOn Date and time when the notification integration was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        /**
         * @param createdOn Date and time when the notification integration was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        /**
         * @param direction Direction of the cloud messaging with respect to Snowflake (required only for error notifications)
         * 
         * @return builder
         * 
         */
        public Builder direction(@Nullable Output<String> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction Direction of the cloud messaging with respect to Snowflake (required only for error notifications)
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            return direction(Output.of(direction));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param gcpPubsubServiceAccount The GCP service account identifier that Snowflake will use when assuming the GCP role
         * 
         * @return builder
         * 
         */
        public Builder gcpPubsubServiceAccount(@Nullable Output<String> gcpPubsubServiceAccount) {
            $.gcpPubsubServiceAccount = gcpPubsubServiceAccount;
            return this;
        }

        /**
         * @param gcpPubsubServiceAccount The GCP service account identifier that Snowflake will use when assuming the GCP role
         * 
         * @return builder
         * 
         */
        public Builder gcpPubsubServiceAccount(String gcpPubsubServiceAccount) {
            return gcpPubsubServiceAccount(Output.of(gcpPubsubServiceAccount));
        }

        /**
         * @param gcpPubsubSubscriptionName The subscription id that Snowflake will listen to when using the GCP_PUBSUB provider.
         * 
         * @return builder
         * 
         */
        public Builder gcpPubsubSubscriptionName(@Nullable Output<String> gcpPubsubSubscriptionName) {
            $.gcpPubsubSubscriptionName = gcpPubsubSubscriptionName;
            return this;
        }

        /**
         * @param gcpPubsubSubscriptionName The subscription id that Snowflake will listen to when using the GCP_PUBSUB provider.
         * 
         * @return builder
         * 
         */
        public Builder gcpPubsubSubscriptionName(String gcpPubsubSubscriptionName) {
            return gcpPubsubSubscriptionName(Output.of(gcpPubsubSubscriptionName));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notificationProvider The third-party cloud message queuing service (e.g. AZURE*STORAGE*QUEUE, AWS*SQS, AWS*SNS)
         * 
         * @return builder
         * 
         */
        public Builder notificationProvider(@Nullable Output<String> notificationProvider) {
            $.notificationProvider = notificationProvider;
            return this;
        }

        /**
         * @param notificationProvider The third-party cloud message queuing service (e.g. AZURE*STORAGE*QUEUE, AWS*SQS, AWS*SNS)
         * 
         * @return builder
         * 
         */
        public Builder notificationProvider(String notificationProvider) {
            return notificationProvider(Output.of(notificationProvider));
        }

        /**
         * @param type A type of integration
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type A type of integration
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public NotificationIntegrationState build() {
            return $;
        }
    }

}
