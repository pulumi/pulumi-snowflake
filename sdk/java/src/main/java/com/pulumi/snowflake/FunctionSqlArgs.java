// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.snowflake.inputs.FunctionSqlArgumentArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FunctionSqlArgs extends com.pulumi.resources.ResourceArgs {

    public static final FunctionSqlArgs Empty = new FunctionSqlArgs();

    /**
     * List of the arguments for the function. Consult the
     * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
     * 
     */
    @Import(name="arguments")
    private @Nullable Output<List<FunctionSqlArgumentArgs>> arguments;

    /**
     * @return List of the arguments for the function. Consult the
     * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
     * 
     */
    public Optional<Output<List<FunctionSqlArgumentArgs>>> arguments() {
        return Optional.ofNullable(this.arguments);
    }

    /**
     * Specifies a comment for the function.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Specifies a comment for the function.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * The database in which to create the function. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="database", required=true)
    private Output<String> database;

    /**
     * @return The database in which to create the function. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> database() {
        return this.database;
    }

    /**
     * Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).
     * For more information, check [ENABLE_CONSOLE_OUTPUT
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
     * 
     */
    @Import(name="enableConsoleOutput")
    private @Nullable Output<Boolean> enableConsoleOutput;

    /**
     * @return Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).
     * For more information, check [ENABLE_CONSOLE_OUTPUT
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
     * 
     */
    public Optional<Output<Boolean>> enableConsoleOutput() {
        return Optional.ofNullable(this.enableConsoleOutput);
    }

    /**
     * Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;
     * do not include them. The `function_definition` value must be SQL source code. For more information, see [Introduction to
     * SQL UDFs](https://docs.snowflake.com/en/developer-guide/udf/sql/udf-sql-introduction). To mitigate permadiff on this
     * field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in
     * case or run of whitespace is semantically significant.
     * 
     */
    @Import(name="functionDefinition", required=true)
    private Output<String> functionDefinition;

    /**
     * @return Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;
     * do not include them. The `function_definition` value must be SQL source code. For more information, see [Introduction to
     * SQL UDFs](https://docs.snowflake.com/en/developer-guide/udf/sql/udf-sql-introduction). To mitigate permadiff on this
     * field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in
     * case or run of whitespace is semantically significant.
     * 
     */
    public Output<String> functionDefinition() {
        return this.functionDefinition;
    }

    @Import(name="isSecure")
    private @Nullable Output<String> isSecure;

    public Optional<Output<String>> isSecure() {
        return Optional.ofNullable(this.isSecure);
    }

    /**
     * LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
     * 
     */
    @Import(name="logLevel")
    private @Nullable Output<String> logLevel;

    /**
     * @return LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
     * 
     */
    public Optional<Output<String>> logLevel() {
        return Optional.ofNullable(this.logLevel);
    }

    /**
     * METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
     * 
     */
    @Import(name="metricLevel")
    private @Nullable Output<String> metricLevel;

    /**
     * @return METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
     * 
     */
    public Optional<Output<String>> metricLevel() {
        return Optional.ofNullable(this.metricLevel);
    }

    /**
     * The name of the function; the identifier does not need to be unique for the schema in which the function is created
     * because UDFs are identified and resolved by the combination of the name and argument types. Check the
     * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations
     * (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the function; the identifier does not need to be unique for the schema in which the function is created
     * because UDFs are identified and resolved by the combination of the name and argument types. Check the
     * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations
     * (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |
     * `IMMUTABLE`.
     * 
     */
    @Import(name="returnResultsBehavior")
    private @Nullable Output<String> returnResultsBehavior;

    /**
     * @return Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |
     * `IMMUTABLE`.
     * 
     */
    public Optional<Output<String>> returnResultsBehavior() {
        return Optional.ofNullable(this.returnResultsBehavior);
    }

    /**
     * Specifies the results returned by the UDF, which determines the UDF type. Use `&lt;result_data_type&gt;` to create a scalar
     * UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a
     * table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult
     * the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
     * 
     */
    @Import(name="returnType", required=true)
    private Output<String> returnType;

    /**
     * @return Specifies the results returned by the UDF, which determines the UDF type. Use `&lt;result_data_type&gt;` to create a scalar
     * UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a
     * table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult
     * the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
     * 
     */
    public Output<String> returnType() {
        return this.returnType;
    }

    /**
     * The schema in which to create the function. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="schema", required=true)
    private Output<String> schema;

    /**
     * @return The schema in which to create the function. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }

    /**
     * Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
     * 
     */
    @Import(name="traceLevel")
    private @Nullable Output<String> traceLevel;

    /**
     * @return Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
     * 
     */
    public Optional<Output<String>> traceLevel() {
        return Optional.ofNullable(this.traceLevel);
    }

    private FunctionSqlArgs() {}

    private FunctionSqlArgs(FunctionSqlArgs $) {
        this.arguments = $.arguments;
        this.comment = $.comment;
        this.database = $.database;
        this.enableConsoleOutput = $.enableConsoleOutput;
        this.functionDefinition = $.functionDefinition;
        this.isSecure = $.isSecure;
        this.logLevel = $.logLevel;
        this.metricLevel = $.metricLevel;
        this.name = $.name;
        this.returnResultsBehavior = $.returnResultsBehavior;
        this.returnType = $.returnType;
        this.schema = $.schema;
        this.traceLevel = $.traceLevel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FunctionSqlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FunctionSqlArgs $;

        public Builder() {
            $ = new FunctionSqlArgs();
        }

        public Builder(FunctionSqlArgs defaults) {
            $ = new FunctionSqlArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arguments List of the arguments for the function. Consult the
         * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
         * 
         * @return builder
         * 
         */
        public Builder arguments(@Nullable Output<List<FunctionSqlArgumentArgs>> arguments) {
            $.arguments = arguments;
            return this;
        }

        /**
         * @param arguments List of the arguments for the function. Consult the
         * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
         * 
         * @return builder
         * 
         */
        public Builder arguments(List<FunctionSqlArgumentArgs> arguments) {
            return arguments(Output.of(arguments));
        }

        /**
         * @param arguments List of the arguments for the function. Consult the
         * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
         * 
         * @return builder
         * 
         */
        public Builder arguments(FunctionSqlArgumentArgs... arguments) {
            return arguments(List.of(arguments));
        }

        /**
         * @param comment Specifies a comment for the function.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Specifies a comment for the function.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param database The database in which to create the function. Due to technical limitations (read more here), avoid using the following
         * characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The database in which to create the function. Due to technical limitations (read more here), avoid using the following
         * characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param enableConsoleOutput Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).
         * For more information, check [ENABLE_CONSOLE_OUTPUT
         * docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
         * 
         * @return builder
         * 
         */
        public Builder enableConsoleOutput(@Nullable Output<Boolean> enableConsoleOutput) {
            $.enableConsoleOutput = enableConsoleOutput;
            return this;
        }

        /**
         * @param enableConsoleOutput Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).
         * For more information, check [ENABLE_CONSOLE_OUTPUT
         * docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
         * 
         * @return builder
         * 
         */
        public Builder enableConsoleOutput(Boolean enableConsoleOutput) {
            return enableConsoleOutput(Output.of(enableConsoleOutput));
        }

        /**
         * @param functionDefinition Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;
         * do not include them. The `function_definition` value must be SQL source code. For more information, see [Introduction to
         * SQL UDFs](https://docs.snowflake.com/en/developer-guide/udf/sql/udf-sql-introduction). To mitigate permadiff on this
         * field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in
         * case or run of whitespace is semantically significant.
         * 
         * @return builder
         * 
         */
        public Builder functionDefinition(Output<String> functionDefinition) {
            $.functionDefinition = functionDefinition;
            return this;
        }

        /**
         * @param functionDefinition Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;
         * do not include them. The `function_definition` value must be SQL source code. For more information, see [Introduction to
         * SQL UDFs](https://docs.snowflake.com/en/developer-guide/udf/sql/udf-sql-introduction). To mitigate permadiff on this
         * field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in
         * case or run of whitespace is semantically significant.
         * 
         * @return builder
         * 
         */
        public Builder functionDefinition(String functionDefinition) {
            return functionDefinition(Output.of(functionDefinition));
        }

        public Builder isSecure(@Nullable Output<String> isSecure) {
            $.isSecure = isSecure;
            return this;
        }

        public Builder isSecure(String isSecure) {
            return isSecure(Output.of(isSecure));
        }

        /**
         * @param logLevel LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
         * docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
         * 
         * @return builder
         * 
         */
        public Builder logLevel(@Nullable Output<String> logLevel) {
            $.logLevel = logLevel;
            return this;
        }

        /**
         * @param logLevel LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
         * docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
         * 
         * @return builder
         * 
         */
        public Builder logLevel(String logLevel) {
            return logLevel(Output.of(logLevel));
        }

        /**
         * @param metricLevel METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
         * docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
         * 
         * @return builder
         * 
         */
        public Builder metricLevel(@Nullable Output<String> metricLevel) {
            $.metricLevel = metricLevel;
            return this;
        }

        /**
         * @param metricLevel METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
         * docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
         * 
         * @return builder
         * 
         */
        public Builder metricLevel(String metricLevel) {
            return metricLevel(Output.of(metricLevel));
        }

        /**
         * @param name The name of the function; the identifier does not need to be unique for the schema in which the function is created
         * because UDFs are identified and resolved by the combination of the name and argument types. Check the
         * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations
         * (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the function; the identifier does not need to be unique for the schema in which the function is created
         * because UDFs are identified and resolved by the combination of the name and argument types. Check the
         * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations
         * (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param returnResultsBehavior Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |
         * `IMMUTABLE`.
         * 
         * @return builder
         * 
         */
        public Builder returnResultsBehavior(@Nullable Output<String> returnResultsBehavior) {
            $.returnResultsBehavior = returnResultsBehavior;
            return this;
        }

        /**
         * @param returnResultsBehavior Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |
         * `IMMUTABLE`.
         * 
         * @return builder
         * 
         */
        public Builder returnResultsBehavior(String returnResultsBehavior) {
            return returnResultsBehavior(Output.of(returnResultsBehavior));
        }

        /**
         * @param returnType Specifies the results returned by the UDF, which determines the UDF type. Use `&lt;result_data_type&gt;` to create a scalar
         * UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a
         * table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult
         * the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
         * 
         * @return builder
         * 
         */
        public Builder returnType(Output<String> returnType) {
            $.returnType = returnType;
            return this;
        }

        /**
         * @param returnType Specifies the results returned by the UDF, which determines the UDF type. Use `&lt;result_data_type&gt;` to create a scalar
         * UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a
         * table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult
         * the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
         * 
         * @return builder
         * 
         */
        public Builder returnType(String returnType) {
            return returnType(Output.of(returnType));
        }

        /**
         * @param schema The schema in which to create the function. Due to technical limitations (read more here), avoid using the following
         * characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder schema(Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The schema in which to create the function. Due to technical limitations (read more here), avoid using the following
         * characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param traceLevel Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
         * docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
         * 
         * @return builder
         * 
         */
        public Builder traceLevel(@Nullable Output<String> traceLevel) {
            $.traceLevel = traceLevel;
            return this;
        }

        /**
         * @param traceLevel Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
         * docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
         * 
         * @return builder
         * 
         */
        public Builder traceLevel(String traceLevel) {
            return traceLevel(Output.of(traceLevel));
        }

        public FunctionSqlArgs build() {
            if ($.database == null) {
                throw new MissingRequiredPropertyException("FunctionSqlArgs", "database");
            }
            if ($.functionDefinition == null) {
                throw new MissingRequiredPropertyException("FunctionSqlArgs", "functionDefinition");
            }
            if ($.returnType == null) {
                throw new MissingRequiredPropertyException("FunctionSqlArgs", "returnType");
            }
            if ($.schema == null) {
                throw new MissingRequiredPropertyException("FunctionSqlArgs", "schema");
            }
            return $;
        }
    }

}
