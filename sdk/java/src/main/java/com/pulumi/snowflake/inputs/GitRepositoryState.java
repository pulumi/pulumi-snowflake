// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.snowflake.inputs.GitRepositoryDescribeOutputArgs;
import com.pulumi.snowflake.inputs.GitRepositoryShowOutputArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitRepositoryState extends com.pulumi.resources.ResourceArgs {

    public static final GitRepositoryState Empty = new GitRepositoryState();

    /**
     * Identifier of API INTEGRATION containing information about the remote Git repository such as allowed credentials and prefixes for target URLs.
     * 
     */
    @Import(name="apiIntegration")
    private @Nullable Output<String> apiIntegration;

    /**
     * @return Identifier of API INTEGRATION containing information about the remote Git repository such as allowed credentials and prefixes for target URLs.
     * 
     */
    public Optional<Output<String>> apiIntegration() {
        return Optional.ofNullable(this.apiIntegration);
    }

    /**
     * Specifies a comment for the git repository.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Specifies a comment for the git repository.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * The database in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="database")
    private @Nullable Output<String> database;

    /**
     * @return The database in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> database() {
        return Optional.ofNullable(this.database);
    }

    /**
     * Outputs the result of `DESCRIBE GIT REPOSITORY` for the given git repository.
     * 
     */
    @Import(name="describeOutputs")
    private @Nullable Output<List<GitRepositoryDescribeOutputArgs>> describeOutputs;

    /**
     * @return Outputs the result of `DESCRIBE GIT REPOSITORY` for the given git repository.
     * 
     */
    public Optional<Output<List<GitRepositoryDescribeOutputArgs>>> describeOutputs() {
        return Optional.ofNullable(this.describeOutputs);
    }

    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    @Import(name="fullyQualifiedName")
    private @Nullable Output<String> fullyQualifiedName;

    /**
     * @return Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    public Optional<Output<String>> fullyQualifiedName() {
        return Optional.ofNullable(this.fullyQualifiedName);
    }

    /**
     * Specifies the Snowflake secret fully qualified name (e.g `&#34;\&#34;&lt;db_name&gt;\&#34;.\&#34;&lt;schema_name&gt;\&#34;.\&#34;&lt;secret_name&gt;\&#34;&#34;`) containing the credentials to use for authenticating with the remote Git repository. Omit this parameter to use the default secret specified by the API integration or if this integration does not require authentication.
     * 
     */
    @Import(name="gitCredentials")
    private @Nullable Output<String> gitCredentials;

    /**
     * @return Specifies the Snowflake secret fully qualified name (e.g `&#34;\&#34;&lt;db_name&gt;\&#34;.\&#34;&lt;schema_name&gt;\&#34;.\&#34;&lt;secret_name&gt;\&#34;&#34;`) containing the credentials to use for authenticating with the remote Git repository. Omit this parameter to use the default secret specified by the API integration or if this integration does not require authentication.
     * 
     */
    public Optional<Output<String>> gitCredentials() {
        return Optional.ofNullable(this.gitCredentials);
    }

    /**
     * Specifies the identifier for the git repository; must be unique for the schema in which the git repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the identifier for the git repository; must be unique for the schema in which the git repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the origin URL of the remote Git repository that this Git repository clone represents. The URL must use HTTPS.
     * 
     */
    @Import(name="origin")
    private @Nullable Output<String> origin;

    /**
     * @return Specifies the origin URL of the remote Git repository that this Git repository clone represents. The URL must use HTTPS.
     * 
     */
    public Optional<Output<String>> origin() {
        return Optional.ofNullable(this.origin);
    }

    /**
     * The schema in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Import(name="schema")
    private @Nullable Output<String> schema;

    /**
     * @return The schema in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Optional<Output<String>> schema() {
        return Optional.ofNullable(this.schema);
    }

    /**
     * Outputs the result of `SHOW GIT REPOSITORIES` for the given git repository.
     * 
     */
    @Import(name="showOutputs")
    private @Nullable Output<List<GitRepositoryShowOutputArgs>> showOutputs;

    /**
     * @return Outputs the result of `SHOW GIT REPOSITORIES` for the given git repository.
     * 
     */
    public Optional<Output<List<GitRepositoryShowOutputArgs>>> showOutputs() {
        return Optional.ofNullable(this.showOutputs);
    }

    private GitRepositoryState() {}

    private GitRepositoryState(GitRepositoryState $) {
        this.apiIntegration = $.apiIntegration;
        this.comment = $.comment;
        this.database = $.database;
        this.describeOutputs = $.describeOutputs;
        this.fullyQualifiedName = $.fullyQualifiedName;
        this.gitCredentials = $.gitCredentials;
        this.name = $.name;
        this.origin = $.origin;
        this.schema = $.schema;
        this.showOutputs = $.showOutputs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitRepositoryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitRepositoryState $;

        public Builder() {
            $ = new GitRepositoryState();
        }

        public Builder(GitRepositoryState defaults) {
            $ = new GitRepositoryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiIntegration Identifier of API INTEGRATION containing information about the remote Git repository such as allowed credentials and prefixes for target URLs.
         * 
         * @return builder
         * 
         */
        public Builder apiIntegration(@Nullable Output<String> apiIntegration) {
            $.apiIntegration = apiIntegration;
            return this;
        }

        /**
         * @param apiIntegration Identifier of API INTEGRATION containing information about the remote Git repository such as allowed credentials and prefixes for target URLs.
         * 
         * @return builder
         * 
         */
        public Builder apiIntegration(String apiIntegration) {
            return apiIntegration(Output.of(apiIntegration));
        }

        /**
         * @param comment Specifies a comment for the git repository.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Specifies a comment for the git repository.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param database The database in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(@Nullable Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The database in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param describeOutputs Outputs the result of `DESCRIBE GIT REPOSITORY` for the given git repository.
         * 
         * @return builder
         * 
         */
        public Builder describeOutputs(@Nullable Output<List<GitRepositoryDescribeOutputArgs>> describeOutputs) {
            $.describeOutputs = describeOutputs;
            return this;
        }

        /**
         * @param describeOutputs Outputs the result of `DESCRIBE GIT REPOSITORY` for the given git repository.
         * 
         * @return builder
         * 
         */
        public Builder describeOutputs(List<GitRepositoryDescribeOutputArgs> describeOutputs) {
            return describeOutputs(Output.of(describeOutputs));
        }

        /**
         * @param describeOutputs Outputs the result of `DESCRIBE GIT REPOSITORY` for the given git repository.
         * 
         * @return builder
         * 
         */
        public Builder describeOutputs(GitRepositoryDescribeOutputArgs... describeOutputs) {
            return describeOutputs(List.of(describeOutputs));
        }

        /**
         * @param fullyQualifiedName Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
         * 
         * @return builder
         * 
         */
        public Builder fullyQualifiedName(@Nullable Output<String> fullyQualifiedName) {
            $.fullyQualifiedName = fullyQualifiedName;
            return this;
        }

        /**
         * @param fullyQualifiedName Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
         * 
         * @return builder
         * 
         */
        public Builder fullyQualifiedName(String fullyQualifiedName) {
            return fullyQualifiedName(Output.of(fullyQualifiedName));
        }

        /**
         * @param gitCredentials Specifies the Snowflake secret fully qualified name (e.g `&#34;\&#34;&lt;db_name&gt;\&#34;.\&#34;&lt;schema_name&gt;\&#34;.\&#34;&lt;secret_name&gt;\&#34;&#34;`) containing the credentials to use for authenticating with the remote Git repository. Omit this parameter to use the default secret specified by the API integration or if this integration does not require authentication.
         * 
         * @return builder
         * 
         */
        public Builder gitCredentials(@Nullable Output<String> gitCredentials) {
            $.gitCredentials = gitCredentials;
            return this;
        }

        /**
         * @param gitCredentials Specifies the Snowflake secret fully qualified name (e.g `&#34;\&#34;&lt;db_name&gt;\&#34;.\&#34;&lt;schema_name&gt;\&#34;.\&#34;&lt;secret_name&gt;\&#34;&#34;`) containing the credentials to use for authenticating with the remote Git repository. Omit this parameter to use the default secret specified by the API integration or if this integration does not require authentication.
         * 
         * @return builder
         * 
         */
        public Builder gitCredentials(String gitCredentials) {
            return gitCredentials(Output.of(gitCredentials));
        }

        /**
         * @param name Specifies the identifier for the git repository; must be unique for the schema in which the git repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the identifier for the git repository; must be unique for the schema in which the git repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param origin Specifies the origin URL of the remote Git repository that this Git repository clone represents. The URL must use HTTPS.
         * 
         * @return builder
         * 
         */
        public Builder origin(@Nullable Output<String> origin) {
            $.origin = origin;
            return this;
        }

        /**
         * @param origin Specifies the origin URL of the remote Git repository that this Git repository clone represents. The URL must use HTTPS.
         * 
         * @return builder
         * 
         */
        public Builder origin(String origin) {
            return origin(Output.of(origin));
        }

        /**
         * @param schema The schema in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder schema(@Nullable Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The schema in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param showOutputs Outputs the result of `SHOW GIT REPOSITORIES` for the given git repository.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(@Nullable Output<List<GitRepositoryShowOutputArgs>> showOutputs) {
            $.showOutputs = showOutputs;
            return this;
        }

        /**
         * @param showOutputs Outputs the result of `SHOW GIT REPOSITORIES` for the given git repository.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(List<GitRepositoryShowOutputArgs> showOutputs) {
            return showOutputs(Output.of(showOutputs));
        }

        /**
         * @param showOutputs Outputs the result of `SHOW GIT REPOSITORIES` for the given git repository.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(GitRepositoryShowOutputArgs... showOutputs) {
            return showOutputs(List.of(showOutputs));
        }

        public GitRepositoryState build() {
            return $;
        }
    }

}
