// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.snowflake.FunctionPythonArgs;
import com.pulumi.snowflake.Utilities;
import com.pulumi.snowflake.inputs.FunctionPythonState;
import com.pulumi.snowflake.outputs.FunctionPythonArgument;
import com.pulumi.snowflake.outputs.FunctionPythonImport;
import com.pulumi.snowflake.outputs.FunctionPythonParameter;
import com.pulumi.snowflake.outputs.FunctionPythonSecret;
import com.pulumi.snowflake.outputs.FunctionPythonShowOutput;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * ```sh
 * $ pulumi import snowflake:index/functionPython:FunctionPython example &#39;&#34;&lt;database_name&gt;&#34;.&#34;&lt;schema_name&gt;&#34;.&#34;&lt;function_name&gt;&#34;(varchar, varchar, varchar)&#39;
 * ```
 * 
 * Note: Snowflake is not returning all information needed to populate the state correctly after import (e.g. data types with attributes like NUMBER(32, 10) are returned as NUMBER, default values for arguments are not returned at all).
 * 
 * Also, `ALTER` for functions is very limited so most of the attributes on this resource are marked as force new. Because of that, in multiple situations plan won&#39;t be empty after importing and manual state operations may be required.
 * 
 */
@ResourceType(type="snowflake:index/functionPython:FunctionPython")
public class FunctionPython extends com.pulumi.resources.CustomResource {
    /**
     * List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
     * 
     */
    @Export(name="arguments", refs={List.class,FunctionPythonArgument.class}, tree="[0,1]")
    private Output</* @Nullable */ List<FunctionPythonArgument>> arguments;

    /**
     * @return List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
     * 
     */
    public Output<Optional<List<FunctionPythonArgument>>> arguments() {
        return Codegen.optional(this.arguments);
    }
    /**
     * (Default: `user-defined function`) Specifies a comment for the function.
     * 
     */
    @Export(name="comment", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> comment;

    /**
     * @return (Default: `user-defined function`) Specifies a comment for the function.
     * 
     */
    public Output<Optional<String>> comment() {
        return Codegen.optional(this.comment);
    }
    /**
     * The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Export(name="database", refs={String.class}, tree="[0]")
    private Output<String> database;

    /**
     * @return The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> database() {
        return this.database;
    }
    /**
     * Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check *CONSOLE_OUTPUT docs[ENABLE](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
     * 
     */
    @Export(name="enableConsoleOutput", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enableConsoleOutput;

    /**
     * @return Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check *CONSOLE_OUTPUT docs[ENABLE](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
     * 
     */
    public Output<Boolean> enableConsoleOutput() {
        return this.enableConsoleOutput;
    }
    /**
     * The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this function’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
     * 
     */
    @Export(name="externalAccessIntegrations", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> externalAccessIntegrations;

    /**
     * @return The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this function’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
     * 
     */
    public Output<Optional<List<String>>> externalAccessIntegrations() {
        return Codegen.optional(this.externalAccessIntegrations);
    }
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    @Export(name="fullyQualifiedName", refs={String.class}, tree="[0]")
    private Output<String> fullyQualifiedName;

    /**
     * @return Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    public Output<String> fullyQualifiedName() {
        return this.fullyQualifiedName;
    }
    /**
     * Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `functionDefinition` value must be Python source code. For more information, see [Introduction to Python UDFs](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
     * 
     */
    @Export(name="functionDefinition", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> functionDefinition;

    /**
     * @return Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `functionDefinition` value must be Python source code. For more information, see [Introduction to Python UDFs](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
     * 
     */
    public Output<Optional<String>> functionDefinition() {
        return Codegen.optional(this.functionDefinition);
    }
    /**
     * Specifies language for the user. Used to detect external changes.
     * 
     */
    @Export(name="functionLanguage", refs={String.class}, tree="[0]")
    private Output<String> functionLanguage;

    /**
     * @return Specifies language for the user. Used to detect external changes.
     * 
     */
    public Output<String> functionLanguage() {
        return this.functionLanguage;
    }
    /**
     * The name of the handler function or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER value should be a function name. If the handler code is in-line with the CREATE FUNCTION statement, you can use the function name alone. When the handler code is referenced at a stage, this value should be qualified with the module name, as in the following form: `my_module.my_function`. If the handler is for a tabular UDF, the HANDLER value should be the name of a handler class.
     * 
     */
    @Export(name="handler", refs={String.class}, tree="[0]")
    private Output<String> handler;

    /**
     * @return The name of the handler function or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER value should be a function name. If the handler code is in-line with the CREATE FUNCTION statement, you can use the function name alone. When the handler code is referenced at a stage, this value should be qualified with the module name, as in the following form: `my_module.my_function`. If the handler is for a tabular UDF, the HANDLER value should be the name of a handler class.
     * 
     */
    public Output<String> handler() {
        return this.handler;
    }
    /**
     * The location (stage), path, and name of the file(s) to import. A file can be a `.py` file or another type of file. Python UDFs can also read non-Python files, such as text files. For an example, see [Reading a file](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-examples.html#label-udf-python-read-files). Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#python).
     * 
     */
    @Export(name="imports", refs={List.class,FunctionPythonImport.class}, tree="[0,1]")
    private Output</* @Nullable */ List<FunctionPythonImport>> imports;

    /**
     * @return The location (stage), path, and name of the file(s) to import. A file can be a `.py` file or another type of file. Python UDFs can also read non-Python files, such as text files. For an example, see [Reading a file](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-examples.html#label-udf-python-read-files). Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#python).
     * 
     */
    public Output<Optional<List<FunctionPythonImport>>> imports() {
        return Codegen.optional(this.imports);
    }
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the function is an aggregate function. For more information about user-defined aggregate functions, see [Python user-defined aggregate functions](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-aggregate-functions). Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
     * 
     */
    @Export(name="isAggregate", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> isAggregate;

    /**
     * @return (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the function is an aggregate function. For more information about user-defined aggregate functions, see [Python user-defined aggregate functions](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-aggregate-functions). Available options are: &#34;true&#34; or &#34;false&#34;. When the value is not set in the configuration the provider will put &#34;default&#34; there which means to use the Snowflake default for this value.
     * 
     */
    public Output<Optional<String>> isAggregate() {
        return Codegen.optional(this.isAggregate);
    }
    @Export(name="isSecure", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> isSecure;

    public Output<Optional<String>> isSecure() {
        return Codegen.optional(this.isSecure);
    }
    /**
     * LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
     * 
     */
    @Export(name="logLevel", refs={String.class}, tree="[0]")
    private Output<String> logLevel;

    /**
     * @return LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
     * 
     */
    public Output<String> logLevel() {
        return this.logLevel;
    }
    /**
     * METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
     * 
     */
    @Export(name="metricLevel", refs={String.class}, tree="[0]")
    private Output<String> metricLevel;

    /**
     * @return METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
     * 
     */
    public Output<String> metricLevel() {
        return this.metricLevel;
    }
    /**
     * The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
     * 
     */
    @Export(name="nullInputBehavior", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> nullInputBehavior;

    /**
     * @return Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
     * 
     */
    public Output<Optional<String>> nullInputBehavior() {
        return Codegen.optional(this.nullInputBehavior);
    }
    /**
     * The name and version number of packages required as dependencies. The value should be of the form `package_name==version_number`.
     * 
     */
    @Export(name="packages", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> packages;

    /**
     * @return The name and version number of packages required as dependencies. The value should be of the form `package_name==version_number`.
     * 
     */
    public Output<Optional<List<String>>> packages() {
        return Codegen.optional(this.packages);
    }
    /**
     * Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.
     * 
     */
    @Export(name="parameters", refs={List.class,FunctionPythonParameter.class}, tree="[0,1]")
    private Output<List<FunctionPythonParameter>> parameters;

    /**
     * @return Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.
     * 
     */
    public Output<List<FunctionPythonParameter>> parameters() {
        return this.parameters;
    }
    /**
     * Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.
     * 
     */
    @Export(name="returnResultsBehavior", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> returnResultsBehavior;

    /**
     * @return Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.
     * 
     */
    public Output<Optional<String>> returnResultsBehavior() {
        return Codegen.optional(this.returnResultsBehavior);
    }
    /**
     * Specifies the results returned by the UDF, which determines the UDF type. Use `&lt;result_data_type&gt;` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
     * 
     */
    @Export(name="returnType", refs={String.class}, tree="[0]")
    private Output<String> returnType;

    /**
     * @return Specifies the results returned by the UDF, which determines the UDF type. Use `&lt;result_data_type&gt;` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
     * 
     */
    public Output<String> returnType() {
        return this.returnType;
    }
    /**
     * Specifies the Python version to use. The supported versions of Python are: 3.9, 3.10, and 3.11.
     * 
     */
    @Export(name="runtimeVersion", refs={String.class}, tree="[0]")
    private Output<String> runtimeVersion;

    /**
     * @return Specifies the Python version to use. The supported versions of Python are: 3.9, 3.10, and 3.11.
     * 
     */
    public Output<String> runtimeVersion() {
        return this.runtimeVersion;
    }
    /**
     * The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    @Export(name="schema", refs={String.class}, tree="[0]")
    private Output<String> schema;

    /**
     * @return The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `&#34;`.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }
    /**
     * Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.
     * 
     */
    @Export(name="secrets", refs={List.class,FunctionPythonSecret.class}, tree="[0,1]")
    private Output</* @Nullable */ List<FunctionPythonSecret>> secrets;

    /**
     * @return Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.
     * 
     */
    public Output<Optional<List<FunctionPythonSecret>>> secrets() {
        return Codegen.optional(this.secrets);
    }
    /**
     * Outputs the result of `SHOW FUNCTION` for the given function.
     * 
     */
    @Export(name="showOutputs", refs={List.class,FunctionPythonShowOutput.class}, tree="[0,1]")
    private Output<List<FunctionPythonShowOutput>> showOutputs;

    /**
     * @return Outputs the result of `SHOW FUNCTION` for the given function.
     * 
     */
    public Output<List<FunctionPythonShowOutput>> showOutputs() {
        return this.showOutputs;
    }
    /**
     * Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
     * 
     */
    @Export(name="traceLevel", refs={String.class}, tree="[0]")
    private Output<String> traceLevel;

    /**
     * @return Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
     * 
     */
    public Output<String> traceLevel() {
        return this.traceLevel;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public FunctionPython(java.lang.String name) {
        this(name, FunctionPythonArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public FunctionPython(java.lang.String name, FunctionPythonArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public FunctionPython(java.lang.String name, FunctionPythonArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("snowflake:index/functionPython:FunctionPython", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private FunctionPython(java.lang.String name, Output<java.lang.String> id, @Nullable FunctionPythonState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("snowflake:index/functionPython:FunctionPython", name, state, makeResourceOptions(options, id), false);
    }

    private static FunctionPythonArgs makeArgs(FunctionPythonArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? FunctionPythonArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static FunctionPython get(java.lang.String name, Output<java.lang.String> id, @Nullable FunctionPythonState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new FunctionPython(name, id, state, options);
    }
}
