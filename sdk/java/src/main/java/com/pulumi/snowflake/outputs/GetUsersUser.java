// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetUsersUser {
    private String comment;
    private String defaultNamespace;
    private String defaultRole;
    private List<String> defaultSecondaryRoles;
    private String defaultWarehouse;
    private Boolean disabled;
    private String displayName;
    private String email;
    private String firstName;
    private Boolean hasRsaPublicKey;
    private String lastName;
    private String loginName;
    private String name;

    private GetUsersUser() {}
    public String comment() {
        return this.comment;
    }
    public String defaultNamespace() {
        return this.defaultNamespace;
    }
    public String defaultRole() {
        return this.defaultRole;
    }
    public List<String> defaultSecondaryRoles() {
        return this.defaultSecondaryRoles;
    }
    public String defaultWarehouse() {
        return this.defaultWarehouse;
    }
    public Boolean disabled() {
        return this.disabled;
    }
    public String displayName() {
        return this.displayName;
    }
    public String email() {
        return this.email;
    }
    public String firstName() {
        return this.firstName;
    }
    public Boolean hasRsaPublicKey() {
        return this.hasRsaPublicKey;
    }
    public String lastName() {
        return this.lastName;
    }
    public String loginName() {
        return this.loginName;
    }
    public String name() {
        return this.name;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUsersUser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String comment;
        private String defaultNamespace;
        private String defaultRole;
        private List<String> defaultSecondaryRoles;
        private String defaultWarehouse;
        private Boolean disabled;
        private String displayName;
        private String email;
        private String firstName;
        private Boolean hasRsaPublicKey;
        private String lastName;
        private String loginName;
        private String name;
        public Builder() {}
        public Builder(GetUsersUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comment = defaults.comment;
    	      this.defaultNamespace = defaults.defaultNamespace;
    	      this.defaultRole = defaults.defaultRole;
    	      this.defaultSecondaryRoles = defaults.defaultSecondaryRoles;
    	      this.defaultWarehouse = defaults.defaultWarehouse;
    	      this.disabled = defaults.disabled;
    	      this.displayName = defaults.displayName;
    	      this.email = defaults.email;
    	      this.firstName = defaults.firstName;
    	      this.hasRsaPublicKey = defaults.hasRsaPublicKey;
    	      this.lastName = defaults.lastName;
    	      this.loginName = defaults.loginName;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder comment(String comment) {
            if (comment == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "comment");
            }
            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder defaultNamespace(String defaultNamespace) {
            if (defaultNamespace == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "defaultNamespace");
            }
            this.defaultNamespace = defaultNamespace;
            return this;
        }
        @CustomType.Setter
        public Builder defaultRole(String defaultRole) {
            if (defaultRole == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "defaultRole");
            }
            this.defaultRole = defaultRole;
            return this;
        }
        @CustomType.Setter
        public Builder defaultSecondaryRoles(List<String> defaultSecondaryRoles) {
            if (defaultSecondaryRoles == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "defaultSecondaryRoles");
            }
            this.defaultSecondaryRoles = defaultSecondaryRoles;
            return this;
        }
        public Builder defaultSecondaryRoles(String... defaultSecondaryRoles) {
            return defaultSecondaryRoles(List.of(defaultSecondaryRoles));
        }
        @CustomType.Setter
        public Builder defaultWarehouse(String defaultWarehouse) {
            if (defaultWarehouse == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "defaultWarehouse");
            }
            this.defaultWarehouse = defaultWarehouse;
            return this;
        }
        @CustomType.Setter
        public Builder disabled(Boolean disabled) {
            if (disabled == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "disabled");
            }
            this.disabled = disabled;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder firstName(String firstName) {
            if (firstName == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "firstName");
            }
            this.firstName = firstName;
            return this;
        }
        @CustomType.Setter
        public Builder hasRsaPublicKey(Boolean hasRsaPublicKey) {
            if (hasRsaPublicKey == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "hasRsaPublicKey");
            }
            this.hasRsaPublicKey = hasRsaPublicKey;
            return this;
        }
        @CustomType.Setter
        public Builder lastName(String lastName) {
            if (lastName == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "lastName");
            }
            this.lastName = lastName;
            return this;
        }
        @CustomType.Setter
        public Builder loginName(String loginName) {
            if (loginName == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "loginName");
            }
            this.loginName = loginName;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "name");
            }
            this.name = name;
            return this;
        }
        public GetUsersUser build() {
            final var _resultValue = new GetUsersUser();
            _resultValue.comment = comment;
            _resultValue.defaultNamespace = defaultNamespace;
            _resultValue.defaultRole = defaultRole;
            _resultValue.defaultSecondaryRoles = defaultSecondaryRoles;
            _resultValue.defaultWarehouse = defaultWarehouse;
            _resultValue.disabled = disabled;
            _resultValue.displayName = displayName;
            _resultValue.email = email;
            _resultValue.firstName = firstName;
            _resultValue.hasRsaPublicKey = hasRsaPublicKey;
            _resultValue.lastName = lastName;
            _resultValue.loginName = loginName;
            _resultValue.name = name;
            return _resultValue;
        }
    }
}
