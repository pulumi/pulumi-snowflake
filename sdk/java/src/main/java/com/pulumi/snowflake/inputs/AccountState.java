// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.snowflake.inputs.AccountShowOutputArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountState extends com.pulumi.resources.ResourceArgs {

    public static final AccountState Empty = new AccountState();

    @Import(name="adminName")
    private @Nullable Output<String> adminName;

    public Optional<Output<String>> adminName() {
        return Optional.ofNullable(this.adminName);
    }

    @Import(name="adminPassword")
    private @Nullable Output<String> adminPassword;

    public Optional<Output<String>> adminPassword() {
        return Optional.ofNullable(this.adminPassword);
    }

    @Import(name="adminRsaPublicKey")
    private @Nullable Output<String> adminRsaPublicKey;

    public Optional<Output<String>> adminRsaPublicKey() {
        return Optional.ofNullable(this.adminRsaPublicKey);
    }

    @Import(name="adminUserType")
    private @Nullable Output<String> adminUserType;

    public Optional<Output<String>> adminUserType() {
        return Optional.ofNullable(this.adminUserType);
    }

    /**
     * Specifies a comment for the account.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Specifies a comment for the account.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * Determines which billing entity is responsible for the account&#39;s consumption-based billing.
     * 
     */
    @Import(name="consumptionBillingEntity")
    private @Nullable Output<String> consumptionBillingEntity;

    /**
     * @return Determines which billing entity is responsible for the account&#39;s consumption-based billing.
     * 
     */
    public Optional<Output<String>> consumptionBillingEntity() {
        return Optional.ofNullable(this.consumptionBillingEntity);
    }

    /**
     * Snowflake Edition of the account. See more about Snowflake Editions in the [official documentation](https://docs.snowflake.com/en/user-guide/intro-editions). Valid options are: `STANDARD` | `ENTERPRISE` | `BUSINESS_CRITICAL`
     * 
     */
    @Import(name="edition")
    private @Nullable Output<String> edition;

    /**
     * @return Snowflake Edition of the account. See more about Snowflake Editions in the [official documentation](https://docs.snowflake.com/en/user-guide/intro-editions). Valid options are: `STANDARD` | `ENTERPRISE` | `BUSINESS_CRITICAL`
     * 
     */
    public Optional<Output<String>> edition() {
        return Optional.ofNullable(this.edition);
    }

    @Import(name="email")
    private @Nullable Output<String> email;

    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    @Import(name="firstName")
    private @Nullable Output<String> firstName;

    public Optional<Output<String>> firstName() {
        return Optional.ofNullable(this.firstName);
    }

    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    @Import(name="fullyQualifiedName")
    private @Nullable Output<String> fullyQualifiedName;

    /**
     * @return Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     * 
     */
    public Optional<Output<String>> fullyQualifiedName() {
        return Optional.ofNullable(this.fullyQualifiedName);
    }

    /**
     * Specifies the number of days during which the account can be restored (“undropped”). The minimum is 3 days and the maximum is 90 days.
     * 
     */
    @Import(name="gracePeriodInDays")
    private @Nullable Output<Integer> gracePeriodInDays;

    /**
     * @return Specifies the number of days during which the account can be restored (“undropped”). The minimum is 3 days and the maximum is 90 days.
     * 
     */
    public Optional<Output<Integer>> gracePeriodInDays() {
        return Optional.ofNullable(this.gracePeriodInDays);
    }

    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Sets an account property that determines whether the ORGADMIN role is enabled in the account. Only an organization administrator (i.e. user with the ORGADMIN role) can set the property.
     * 
     */
    @Import(name="isOrgAdmin")
    private @Nullable Output<String> isOrgAdmin;

    /**
     * @return (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Sets an account property that determines whether the ORGADMIN role is enabled in the account. Only an organization administrator (i.e. user with the ORGADMIN role) can set the property.
     * 
     */
    public Optional<Output<String>> isOrgAdmin() {
        return Optional.ofNullable(this.isOrgAdmin);
    }

    @Import(name="lastName")
    private @Nullable Output<String> lastName;

    public Optional<Output<String>> lastName() {
        return Optional.ofNullable(this.lastName);
    }

    @Import(name="mustChangePassword")
    private @Nullable Output<String> mustChangePassword;

    public Optional<Output<String>> mustChangePassword() {
        return Optional.ofNullable(this.mustChangePassword);
    }

    /**
     * Specifies the identifier (i.e. name) for the account. It must be unique within an organization, regardless of which Snowflake Region the account is in and must start with an alphabetic character and cannot contain spaces or special characters except for underscores (_). Note that if the account name includes underscores, features that do not accept account names with underscores (e.g. Okta SSO or SCIM) can reference a version of the account name that substitutes hyphens (-) for the underscores.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the identifier (i.e. name) for the account. It must be unique within an organization, regardless of which Snowflake Region the account is in and must start with an alphabetic character and cannot contain spaces or special characters except for underscores (_). Note that if the account name includes underscores, features that do not accept account names with underscores (e.g. Okta SSO or SCIM) can reference a version of the account name that substitutes hyphens (-) for the underscores.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * [Snowflake Region ID](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-snowflake-region-ids) of the region where the account is created. If no value is provided, Snowflake creates the account in the same Snowflake Region as the current account (i.e. the account in which the CREATE ACCOUNT statement is executed.)
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return [Snowflake Region ID](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-snowflake-region-ids) of the region where the account is created. If no value is provided, Snowflake creates the account in the same Snowflake Region as the current account (i.e. the account in which the CREATE ACCOUNT statement is executed.)
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * ID of the region group where the account is created. To retrieve the region group ID for existing accounts in your organization, execute the [SHOW REGIONS](https://docs.snowflake.com/en/sql-reference/sql/show-regions) command. For information about when you might need to specify region group, see [Region groups](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-region-groups).
     * 
     */
    @Import(name="regionGroup")
    private @Nullable Output<String> regionGroup;

    /**
     * @return ID of the region group where the account is created. To retrieve the region group ID for existing accounts in your organization, execute the [SHOW REGIONS](https://docs.snowflake.com/en/sql-reference/sql/show-regions) command. For information about when you might need to specify region group, see [Region groups](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-region-groups).
     * 
     */
    public Optional<Output<String>> regionGroup() {
        return Optional.ofNullable(this.regionGroup);
    }

    /**
     * Outputs the result of `SHOW ACCOUNTS` for the given account.
     * 
     */
    @Import(name="showOutputs")
    private @Nullable Output<List<AccountShowOutputArgs>> showOutputs;

    /**
     * @return Outputs the result of `SHOW ACCOUNTS` for the given account.
     * 
     */
    public Optional<Output<List<AccountShowOutputArgs>>> showOutputs() {
        return Optional.ofNullable(this.showOutputs);
    }

    private AccountState() {}

    private AccountState(AccountState $) {
        this.adminName = $.adminName;
        this.adminPassword = $.adminPassword;
        this.adminRsaPublicKey = $.adminRsaPublicKey;
        this.adminUserType = $.adminUserType;
        this.comment = $.comment;
        this.consumptionBillingEntity = $.consumptionBillingEntity;
        this.edition = $.edition;
        this.email = $.email;
        this.firstName = $.firstName;
        this.fullyQualifiedName = $.fullyQualifiedName;
        this.gracePeriodInDays = $.gracePeriodInDays;
        this.isOrgAdmin = $.isOrgAdmin;
        this.lastName = $.lastName;
        this.mustChangePassword = $.mustChangePassword;
        this.name = $.name;
        this.region = $.region;
        this.regionGroup = $.regionGroup;
        this.showOutputs = $.showOutputs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountState $;

        public Builder() {
            $ = new AccountState();
        }

        public Builder(AccountState defaults) {
            $ = new AccountState(Objects.requireNonNull(defaults));
        }

        public Builder adminName(@Nullable Output<String> adminName) {
            $.adminName = adminName;
            return this;
        }

        public Builder adminName(String adminName) {
            return adminName(Output.of(adminName));
        }

        public Builder adminPassword(@Nullable Output<String> adminPassword) {
            $.adminPassword = adminPassword;
            return this;
        }

        public Builder adminPassword(String adminPassword) {
            return adminPassword(Output.of(adminPassword));
        }

        public Builder adminRsaPublicKey(@Nullable Output<String> adminRsaPublicKey) {
            $.adminRsaPublicKey = adminRsaPublicKey;
            return this;
        }

        public Builder adminRsaPublicKey(String adminRsaPublicKey) {
            return adminRsaPublicKey(Output.of(adminRsaPublicKey));
        }

        public Builder adminUserType(@Nullable Output<String> adminUserType) {
            $.adminUserType = adminUserType;
            return this;
        }

        public Builder adminUserType(String adminUserType) {
            return adminUserType(Output.of(adminUserType));
        }

        /**
         * @param comment Specifies a comment for the account.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Specifies a comment for the account.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param consumptionBillingEntity Determines which billing entity is responsible for the account&#39;s consumption-based billing.
         * 
         * @return builder
         * 
         */
        public Builder consumptionBillingEntity(@Nullable Output<String> consumptionBillingEntity) {
            $.consumptionBillingEntity = consumptionBillingEntity;
            return this;
        }

        /**
         * @param consumptionBillingEntity Determines which billing entity is responsible for the account&#39;s consumption-based billing.
         * 
         * @return builder
         * 
         */
        public Builder consumptionBillingEntity(String consumptionBillingEntity) {
            return consumptionBillingEntity(Output.of(consumptionBillingEntity));
        }

        /**
         * @param edition Snowflake Edition of the account. See more about Snowflake Editions in the [official documentation](https://docs.snowflake.com/en/user-guide/intro-editions). Valid options are: `STANDARD` | `ENTERPRISE` | `BUSINESS_CRITICAL`
         * 
         * @return builder
         * 
         */
        public Builder edition(@Nullable Output<String> edition) {
            $.edition = edition;
            return this;
        }

        /**
         * @param edition Snowflake Edition of the account. See more about Snowflake Editions in the [official documentation](https://docs.snowflake.com/en/user-guide/intro-editions). Valid options are: `STANDARD` | `ENTERPRISE` | `BUSINESS_CRITICAL`
         * 
         * @return builder
         * 
         */
        public Builder edition(String edition) {
            return edition(Output.of(edition));
        }

        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        public Builder email(String email) {
            return email(Output.of(email));
        }

        public Builder firstName(@Nullable Output<String> firstName) {
            $.firstName = firstName;
            return this;
        }

        public Builder firstName(String firstName) {
            return firstName(Output.of(firstName));
        }

        /**
         * @param fullyQualifiedName Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
         * 
         * @return builder
         * 
         */
        public Builder fullyQualifiedName(@Nullable Output<String> fullyQualifiedName) {
            $.fullyQualifiedName = fullyQualifiedName;
            return this;
        }

        /**
         * @param fullyQualifiedName Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
         * 
         * @return builder
         * 
         */
        public Builder fullyQualifiedName(String fullyQualifiedName) {
            return fullyQualifiedName(Output.of(fullyQualifiedName));
        }

        /**
         * @param gracePeriodInDays Specifies the number of days during which the account can be restored (“undropped”). The minimum is 3 days and the maximum is 90 days.
         * 
         * @return builder
         * 
         */
        public Builder gracePeriodInDays(@Nullable Output<Integer> gracePeriodInDays) {
            $.gracePeriodInDays = gracePeriodInDays;
            return this;
        }

        /**
         * @param gracePeriodInDays Specifies the number of days during which the account can be restored (“undropped”). The minimum is 3 days and the maximum is 90 days.
         * 
         * @return builder
         * 
         */
        public Builder gracePeriodInDays(Integer gracePeriodInDays) {
            return gracePeriodInDays(Output.of(gracePeriodInDays));
        }

        /**
         * @param isOrgAdmin (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Sets an account property that determines whether the ORGADMIN role is enabled in the account. Only an organization administrator (i.e. user with the ORGADMIN role) can set the property.
         * 
         * @return builder
         * 
         */
        public Builder isOrgAdmin(@Nullable Output<String> isOrgAdmin) {
            $.isOrgAdmin = isOrgAdmin;
            return this;
        }

        /**
         * @param isOrgAdmin (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Sets an account property that determines whether the ORGADMIN role is enabled in the account. Only an organization administrator (i.e. user with the ORGADMIN role) can set the property.
         * 
         * @return builder
         * 
         */
        public Builder isOrgAdmin(String isOrgAdmin) {
            return isOrgAdmin(Output.of(isOrgAdmin));
        }

        public Builder lastName(@Nullable Output<String> lastName) {
            $.lastName = lastName;
            return this;
        }

        public Builder lastName(String lastName) {
            return lastName(Output.of(lastName));
        }

        public Builder mustChangePassword(@Nullable Output<String> mustChangePassword) {
            $.mustChangePassword = mustChangePassword;
            return this;
        }

        public Builder mustChangePassword(String mustChangePassword) {
            return mustChangePassword(Output.of(mustChangePassword));
        }

        /**
         * @param name Specifies the identifier (i.e. name) for the account. It must be unique within an organization, regardless of which Snowflake Region the account is in and must start with an alphabetic character and cannot contain spaces or special characters except for underscores (_). Note that if the account name includes underscores, features that do not accept account names with underscores (e.g. Okta SSO or SCIM) can reference a version of the account name that substitutes hyphens (-) for the underscores.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the identifier (i.e. name) for the account. It must be unique within an organization, regardless of which Snowflake Region the account is in and must start with an alphabetic character and cannot contain spaces or special characters except for underscores (_). Note that if the account name includes underscores, features that do not accept account names with underscores (e.g. Okta SSO or SCIM) can reference a version of the account name that substitutes hyphens (-) for the underscores.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param region [Snowflake Region ID](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-snowflake-region-ids) of the region where the account is created. If no value is provided, Snowflake creates the account in the same Snowflake Region as the current account (i.e. the account in which the CREATE ACCOUNT statement is executed.)
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region [Snowflake Region ID](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-snowflake-region-ids) of the region where the account is created. If no value is provided, Snowflake creates the account in the same Snowflake Region as the current account (i.e. the account in which the CREATE ACCOUNT statement is executed.)
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param regionGroup ID of the region group where the account is created. To retrieve the region group ID for existing accounts in your organization, execute the [SHOW REGIONS](https://docs.snowflake.com/en/sql-reference/sql/show-regions) command. For information about when you might need to specify region group, see [Region groups](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-region-groups).
         * 
         * @return builder
         * 
         */
        public Builder regionGroup(@Nullable Output<String> regionGroup) {
            $.regionGroup = regionGroup;
            return this;
        }

        /**
         * @param regionGroup ID of the region group where the account is created. To retrieve the region group ID for existing accounts in your organization, execute the [SHOW REGIONS](https://docs.snowflake.com/en/sql-reference/sql/show-regions) command. For information about when you might need to specify region group, see [Region groups](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-region-groups).
         * 
         * @return builder
         * 
         */
        public Builder regionGroup(String regionGroup) {
            return regionGroup(Output.of(regionGroup));
        }

        /**
         * @param showOutputs Outputs the result of `SHOW ACCOUNTS` for the given account.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(@Nullable Output<List<AccountShowOutputArgs>> showOutputs) {
            $.showOutputs = showOutputs;
            return this;
        }

        /**
         * @param showOutputs Outputs the result of `SHOW ACCOUNTS` for the given account.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(List<AccountShowOutputArgs> showOutputs) {
            return showOutputs(Output.of(showOutputs));
        }

        /**
         * @param showOutputs Outputs the result of `SHOW ACCOUNTS` for the given account.
         * 
         * @return builder
         * 
         */
        public Builder showOutputs(AccountShowOutputArgs... showOutputs) {
            return showOutputs(List.of(showOutputs));
        }

        public AccountState build() {
            return $;
        }
    }

}
