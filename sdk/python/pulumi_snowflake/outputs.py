# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'AccountRoleShowOutput',
    'AlertAlertSchedule',
    'AlertAlertScheduleCron',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutput',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthType',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputComment',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabled',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidity',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScope',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpoint',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethod',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientId',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrant',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidity',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpoint',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegration',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutput',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutput',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthType',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputComment',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabled',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidity',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScope',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpoint',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethod',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientId',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrant',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidity',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpoint',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegration',
    'ApiAuthenticationIntegrationWithClientCredentialsShowOutput',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutput',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthType',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputComment',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabled',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidity',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScope',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpoint',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethod',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientId',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrant',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidity',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpoint',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegration',
    'ApiAuthenticationIntegrationWithJwtBearerShowOutput',
    'AuthenticationPolicyDescribeOutput',
    'AuthenticationPolicyShowOutput',
    'DatabaseOldReplicationConfiguration',
    'DatabaseReplication',
    'DatabaseReplicationEnableToAccount',
    'DatabaseRoleShowOutput',
    'DynamicTableTargetLag',
    'ExternalFunctionArg',
    'ExternalFunctionHeader',
    'ExternalOauthIntegrationDescribeOutput',
    'ExternalOauthIntegrationDescribeOutputComment',
    'ExternalOauthIntegrationDescribeOutputEnabled',
    'ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesList',
    'ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleMode',
    'ExternalOauthIntegrationDescribeOutputExternalOauthAudienceList',
    'ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesList',
    'ExternalOauthIntegrationDescribeOutputExternalOauthIssuer',
    'ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrl',
    'ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2',
    'ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey',
    'ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiter',
    'ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute',
    'ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaim',
    'ExternalOauthIntegrationRelatedParameter',
    'ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedList',
    'ExternalOauthIntegrationShowOutput',
    'ExternalTableColumn',
    'ExternalTableTag',
    'ExternalVolumeDescribeOutput',
    'ExternalVolumeShowOutput',
    'ExternalVolumeStorageLocation',
    'FailoverGroupFromReplica',
    'FailoverGroupReplicationSchedule',
    'FailoverGroupReplicationScheduleCron',
    'FunctionArgument',
    'GrantOwnershipOn',
    'GrantOwnershipOnAll',
    'GrantOwnershipOnFuture',
    'GrantPrivilegesToAccountRoleOnAccountObject',
    'GrantPrivilegesToAccountRoleOnSchema',
    'GrantPrivilegesToAccountRoleOnSchemaObject',
    'GrantPrivilegesToAccountRoleOnSchemaObjectAll',
    'GrantPrivilegesToAccountRoleOnSchemaObjectFuture',
    'GrantPrivilegesToDatabaseRoleOnSchema',
    'GrantPrivilegesToDatabaseRoleOnSchemaObject',
    'GrantPrivilegesToDatabaseRoleOnSchemaObjectAll',
    'GrantPrivilegesToDatabaseRoleOnSchemaObjectFuture',
    'LegacyServiceUserParameter',
    'LegacyServiceUserParameterAbortDetachedQuery',
    'LegacyServiceUserParameterAutocommit',
    'LegacyServiceUserParameterBinaryInputFormat',
    'LegacyServiceUserParameterBinaryOutputFormat',
    'LegacyServiceUserParameterClientMemoryLimit',
    'LegacyServiceUserParameterClientMetadataRequestUseConnectionCtx',
    'LegacyServiceUserParameterClientPrefetchThread',
    'LegacyServiceUserParameterClientResultChunkSize',
    'LegacyServiceUserParameterClientResultColumnCaseInsensitive',
    'LegacyServiceUserParameterClientSessionKeepAlife',
    'LegacyServiceUserParameterClientSessionKeepAliveHeartbeatFrequency',
    'LegacyServiceUserParameterClientTimestampTypeMapping',
    'LegacyServiceUserParameterDateInputFormat',
    'LegacyServiceUserParameterDateOutputFormat',
    'LegacyServiceUserParameterEnableUnloadPhysicalTypeOptimization',
    'LegacyServiceUserParameterEnableUnredactedQuerySyntaxError',
    'LegacyServiceUserParameterErrorOnNondeterministicMerge',
    'LegacyServiceUserParameterErrorOnNondeterministicUpdate',
    'LegacyServiceUserParameterGeographyOutputFormat',
    'LegacyServiceUserParameterGeometryOutputFormat',
    'LegacyServiceUserParameterJdbcTreatDecimalAsInt',
    'LegacyServiceUserParameterJdbcTreatTimestampNtzAsUtc',
    'LegacyServiceUserParameterJdbcUseSessionTimezone',
    'LegacyServiceUserParameterJsonIndent',
    'LegacyServiceUserParameterLockTimeout',
    'LegacyServiceUserParameterLogLevel',
    'LegacyServiceUserParameterMultiStatementCount',
    'LegacyServiceUserParameterNetworkPolicy',
    'LegacyServiceUserParameterNoorderSequenceAsDefault',
    'LegacyServiceUserParameterOdbcTreatDecimalAsInt',
    'LegacyServiceUserParameterPreventUnloadToInternalStage',
    'LegacyServiceUserParameterQueryTag',
    'LegacyServiceUserParameterQuotedIdentifiersIgnoreCase',
    'LegacyServiceUserParameterRowsPerResultset',
    'LegacyServiceUserParameterS3StageVpceDnsName',
    'LegacyServiceUserParameterSearchPath',
    'LegacyServiceUserParameterSimulatedDataSharingConsumer',
    'LegacyServiceUserParameterStatementQueuedTimeoutInSecond',
    'LegacyServiceUserParameterStatementTimeoutInSecond',
    'LegacyServiceUserParameterStrictJsonOutput',
    'LegacyServiceUserParameterTimeInputFormat',
    'LegacyServiceUserParameterTimeOutputFormat',
    'LegacyServiceUserParameterTimestampDayIsAlways24h',
    'LegacyServiceUserParameterTimestampInputFormat',
    'LegacyServiceUserParameterTimestampLtzOutputFormat',
    'LegacyServiceUserParameterTimestampNtzOutputFormat',
    'LegacyServiceUserParameterTimestampOutputFormat',
    'LegacyServiceUserParameterTimestampTypeMapping',
    'LegacyServiceUserParameterTimestampTzOutputFormat',
    'LegacyServiceUserParameterTimezone',
    'LegacyServiceUserParameterTraceLevel',
    'LegacyServiceUserParameterTransactionAbortOnError',
    'LegacyServiceUserParameterTransactionDefaultIsolationLevel',
    'LegacyServiceUserParameterTwoDigitCenturyStart',
    'LegacyServiceUserParameterUnsupportedDdlAction',
    'LegacyServiceUserParameterUseCachedResult',
    'LegacyServiceUserParameterWeekOfYearPolicy',
    'LegacyServiceUserParameterWeekStart',
    'LegacyServiceUserShowOutput',
    'MaskingPolicyArgument',
    'MaskingPolicyDescribeOutput',
    'MaskingPolicyDescribeOutputSignature',
    'MaskingPolicyShowOutput',
    'MaterializedViewTag',
    'NetworkPolicyDescribeOutput',
    'NetworkPolicyShowOutput',
    'OauthIntegrationForCustomClientsDescribeOutput',
    'OauthIntegrationForCustomClientsDescribeOutputBlockedRolesList',
    'OauthIntegrationForCustomClientsDescribeOutputComment',
    'OauthIntegrationForCustomClientsDescribeOutputEnabled',
    'OauthIntegrationForCustomClientsDescribeOutputNetworkPolicy',
    'OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUri',
    'OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpoint',
    'OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpoint',
    'OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpoint',
    'OauthIntegrationForCustomClientsDescribeOutputOauthClientId',
    'OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2Fp',
    'OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFp',
    'OauthIntegrationForCustomClientsDescribeOutputOauthClientType',
    'OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkce',
    'OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshToken',
    'OauthIntegrationForCustomClientsDescribeOutputOauthRedirectUri',
    'OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidity',
    'OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpoint',
    'OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRole',
    'OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesList',
    'OauthIntegrationForCustomClientsShowOutput',
    'OauthIntegrationForPartnerApplicationsDescribeOutput',
    'OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesList',
    'OauthIntegrationForPartnerApplicationsDescribeOutputComment',
    'OauthIntegrationForPartnerApplicationsDescribeOutputEnabled',
    'OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicy',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUri',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpoint',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpoint',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpoint',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientId',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2Fp',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFp',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientType',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkce',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshToken',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthRedirectUri',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidity',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpoint',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRole',
    'OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesList',
    'OauthIntegrationForPartnerApplicationsShowOutput',
    'ObjectParameterObjectIdentifier',
    'PrimaryConnectionShowOutput',
    'ProcedureArgument',
    'ResourceMonitorShowOutput',
    'RoleShowOutput',
    'RowAccessPolicyArgument',
    'RowAccessPolicyDescribeOutput',
    'RowAccessPolicyDescribeOutputSignature',
    'RowAccessPolicyShowOutput',
    'Saml2IntegrationDescribeOutput',
    'Saml2IntegrationDescribeOutputAllowedEmailPattern',
    'Saml2IntegrationDescribeOutputAllowedUserDomain',
    'Saml2IntegrationDescribeOutputComment',
    'Saml2IntegrationDescribeOutputSaml2DigestMethodsUsed',
    'Saml2IntegrationDescribeOutputSaml2EnableSpInitiated',
    'Saml2IntegrationDescribeOutputSaml2ForceAuthn',
    'Saml2IntegrationDescribeOutputSaml2Issuer',
    'Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrl',
    'Saml2IntegrationDescribeOutputSaml2Provider',
    'Saml2IntegrationDescribeOutputSaml2RequestedNameidFormat',
    'Saml2IntegrationDescribeOutputSaml2SignRequest',
    'Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsed',
    'Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrl',
    'Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrl',
    'Saml2IntegrationDescribeOutputSaml2SnowflakeMetadata',
    'Saml2IntegrationDescribeOutputSaml2SnowflakeX509Cert',
    'Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel',
    'Saml2IntegrationDescribeOutputSaml2SsoUrl',
    'Saml2IntegrationDescribeOutputSaml2X509Cert',
    'Saml2IntegrationShowOutput',
    'SchemaDescribeOutput',
    'SchemaParameter',
    'SchemaParameterCatalog',
    'SchemaParameterDataRetentionTimeInDay',
    'SchemaParameterDefaultDdlCollation',
    'SchemaParameterEnableConsoleOutput',
    'SchemaParameterExternalVolume',
    'SchemaParameterLogLevel',
    'SchemaParameterMaxDataExtensionTimeInDay',
    'SchemaParameterPipeExecutionPaused',
    'SchemaParameterQuotedIdentifiersIgnoreCase',
    'SchemaParameterReplaceInvalidCharacter',
    'SchemaParameterStorageSerializationPolicy',
    'SchemaParameterSuspendTaskAfterNumFailure',
    'SchemaParameterTaskAutoRetryAttempt',
    'SchemaParameterTraceLevel',
    'SchemaParameterUserTaskManagedInitialWarehouseSize',
    'SchemaParameterUserTaskMinimumTriggerIntervalInSecond',
    'SchemaParameterUserTaskTimeoutM',
    'SchemaShowOutput',
    'ScimIntegrationDescribeOutput',
    'ScimIntegrationDescribeOutputComment',
    'ScimIntegrationDescribeOutputEnabled',
    'ScimIntegrationDescribeOutputNetworkPolicy',
    'ScimIntegrationDescribeOutputRunAsRole',
    'ScimIntegrationDescribeOutputSyncPassword',
    'ScimIntegrationShowOutput',
    'SecondaryConnectionShowOutput',
    'SecretWithAuthorizationCodeGrantDescribeOutput',
    'SecretWithAuthorizationCodeGrantShowOutput',
    'SecretWithBasicAuthenticationDescribeOutput',
    'SecretWithBasicAuthenticationShowOutput',
    'SecretWithClientCredentialsDescribeOutput',
    'SecretWithClientCredentialsShowOutput',
    'SecretWithGenericStringDescribeOutput',
    'SecretWithGenericStringShowOutput',
    'ServiceUserParameter',
    'ServiceUserParameterAbortDetachedQuery',
    'ServiceUserParameterAutocommit',
    'ServiceUserParameterBinaryInputFormat',
    'ServiceUserParameterBinaryOutputFormat',
    'ServiceUserParameterClientMemoryLimit',
    'ServiceUserParameterClientMetadataRequestUseConnectionCtx',
    'ServiceUserParameterClientPrefetchThread',
    'ServiceUserParameterClientResultChunkSize',
    'ServiceUserParameterClientResultColumnCaseInsensitive',
    'ServiceUserParameterClientSessionKeepAlife',
    'ServiceUserParameterClientSessionKeepAliveHeartbeatFrequency',
    'ServiceUserParameterClientTimestampTypeMapping',
    'ServiceUserParameterDateInputFormat',
    'ServiceUserParameterDateOutputFormat',
    'ServiceUserParameterEnableUnloadPhysicalTypeOptimization',
    'ServiceUserParameterEnableUnredactedQuerySyntaxError',
    'ServiceUserParameterErrorOnNondeterministicMerge',
    'ServiceUserParameterErrorOnNondeterministicUpdate',
    'ServiceUserParameterGeographyOutputFormat',
    'ServiceUserParameterGeometryOutputFormat',
    'ServiceUserParameterJdbcTreatDecimalAsInt',
    'ServiceUserParameterJdbcTreatTimestampNtzAsUtc',
    'ServiceUserParameterJdbcUseSessionTimezone',
    'ServiceUserParameterJsonIndent',
    'ServiceUserParameterLockTimeout',
    'ServiceUserParameterLogLevel',
    'ServiceUserParameterMultiStatementCount',
    'ServiceUserParameterNetworkPolicy',
    'ServiceUserParameterNoorderSequenceAsDefault',
    'ServiceUserParameterOdbcTreatDecimalAsInt',
    'ServiceUserParameterPreventUnloadToInternalStage',
    'ServiceUserParameterQueryTag',
    'ServiceUserParameterQuotedIdentifiersIgnoreCase',
    'ServiceUserParameterRowsPerResultset',
    'ServiceUserParameterS3StageVpceDnsName',
    'ServiceUserParameterSearchPath',
    'ServiceUserParameterSimulatedDataSharingConsumer',
    'ServiceUserParameterStatementQueuedTimeoutInSecond',
    'ServiceUserParameterStatementTimeoutInSecond',
    'ServiceUserParameterStrictJsonOutput',
    'ServiceUserParameterTimeInputFormat',
    'ServiceUserParameterTimeOutputFormat',
    'ServiceUserParameterTimestampDayIsAlways24h',
    'ServiceUserParameterTimestampInputFormat',
    'ServiceUserParameterTimestampLtzOutputFormat',
    'ServiceUserParameterTimestampNtzOutputFormat',
    'ServiceUserParameterTimestampOutputFormat',
    'ServiceUserParameterTimestampTypeMapping',
    'ServiceUserParameterTimestampTzOutputFormat',
    'ServiceUserParameterTimezone',
    'ServiceUserParameterTraceLevel',
    'ServiceUserParameterTransactionAbortOnError',
    'ServiceUserParameterTransactionDefaultIsolationLevel',
    'ServiceUserParameterTwoDigitCenturyStart',
    'ServiceUserParameterUnsupportedDdlAction',
    'ServiceUserParameterUseCachedResult',
    'ServiceUserParameterWeekOfYearPolicy',
    'ServiceUserParameterWeekStart',
    'ServiceUserShowOutput',
    'StageTag',
    'StreamOnDirectoryTableDescribeOutput',
    'StreamOnDirectoryTableShowOutput',
    'StreamOnExternalTableAt',
    'StreamOnExternalTableBefore',
    'StreamOnExternalTableDescribeOutput',
    'StreamOnExternalTableShowOutput',
    'StreamOnTableAt',
    'StreamOnTableBefore',
    'StreamOnTableDescribeOutput',
    'StreamOnTableShowOutput',
    'StreamOnViewAt',
    'StreamOnViewBefore',
    'StreamOnViewDescribeOutput',
    'StreamOnViewShowOutput',
    'StreamlitDescribeOutput',
    'StreamlitShowOutput',
    'TableColumn',
    'TableColumnDefault',
    'TableColumnIdentity',
    'TableConstraintForeignKeyProperties',
    'TableConstraintForeignKeyPropertiesReferences',
    'TablePrimaryKey',
    'TableTag',
    'TagAssociationObjectIdentifier',
    'TagShowOutput',
    'TaskParameter',
    'TaskParameterAbortDetachedQuery',
    'TaskParameterAutocommit',
    'TaskParameterBinaryInputFormat',
    'TaskParameterBinaryOutputFormat',
    'TaskParameterClientMemoryLimit',
    'TaskParameterClientMetadataRequestUseConnectionCtx',
    'TaskParameterClientPrefetchThread',
    'TaskParameterClientResultChunkSize',
    'TaskParameterClientResultColumnCaseInsensitive',
    'TaskParameterClientSessionKeepAlife',
    'TaskParameterClientSessionKeepAliveHeartbeatFrequency',
    'TaskParameterClientTimestampTypeMapping',
    'TaskParameterDateInputFormat',
    'TaskParameterDateOutputFormat',
    'TaskParameterEnableUnloadPhysicalTypeOptimization',
    'TaskParameterErrorOnNondeterministicMerge',
    'TaskParameterErrorOnNondeterministicUpdate',
    'TaskParameterGeographyOutputFormat',
    'TaskParameterGeometryOutputFormat',
    'TaskParameterJdbcTreatTimestampNtzAsUtc',
    'TaskParameterJdbcUseSessionTimezone',
    'TaskParameterJsonIndent',
    'TaskParameterLockTimeout',
    'TaskParameterLogLevel',
    'TaskParameterMultiStatementCount',
    'TaskParameterNoorderSequenceAsDefault',
    'TaskParameterOdbcTreatDecimalAsInt',
    'TaskParameterQueryTag',
    'TaskParameterQuotedIdentifiersIgnoreCase',
    'TaskParameterRowsPerResultset',
    'TaskParameterS3StageVpceDnsName',
    'TaskParameterSearchPath',
    'TaskParameterStatementQueuedTimeoutInSecond',
    'TaskParameterStatementTimeoutInSecond',
    'TaskParameterStrictJsonOutput',
    'TaskParameterSuspendTaskAfterNumFailure',
    'TaskParameterTaskAutoRetryAttempt',
    'TaskParameterTimeInputFormat',
    'TaskParameterTimeOutputFormat',
    'TaskParameterTimestampDayIsAlways24h',
    'TaskParameterTimestampInputFormat',
    'TaskParameterTimestampLtzOutputFormat',
    'TaskParameterTimestampNtzOutputFormat',
    'TaskParameterTimestampOutputFormat',
    'TaskParameterTimestampTypeMapping',
    'TaskParameterTimestampTzOutputFormat',
    'TaskParameterTimezone',
    'TaskParameterTraceLevel',
    'TaskParameterTransactionAbortOnError',
    'TaskParameterTransactionDefaultIsolationLevel',
    'TaskParameterTwoDigitCenturyStart',
    'TaskParameterUnsupportedDdlAction',
    'TaskParameterUseCachedResult',
    'TaskParameterUserTaskManagedInitialWarehouseSize',
    'TaskParameterUserTaskMinimumTriggerIntervalInSecond',
    'TaskParameterUserTaskTimeoutM',
    'TaskParameterWeekOfYearPolicy',
    'TaskParameterWeekStart',
    'TaskSchedule',
    'TaskShowOutput',
    'TaskShowOutputTaskRelation',
    'UserParameter',
    'UserParameterAbortDetachedQuery',
    'UserParameterAutocommit',
    'UserParameterBinaryInputFormat',
    'UserParameterBinaryOutputFormat',
    'UserParameterClientMemoryLimit',
    'UserParameterClientMetadataRequestUseConnectionCtx',
    'UserParameterClientPrefetchThread',
    'UserParameterClientResultChunkSize',
    'UserParameterClientResultColumnCaseInsensitive',
    'UserParameterClientSessionKeepAlife',
    'UserParameterClientSessionKeepAliveHeartbeatFrequency',
    'UserParameterClientTimestampTypeMapping',
    'UserParameterDateInputFormat',
    'UserParameterDateOutputFormat',
    'UserParameterEnableUnloadPhysicalTypeOptimization',
    'UserParameterEnableUnredactedQuerySyntaxError',
    'UserParameterErrorOnNondeterministicMerge',
    'UserParameterErrorOnNondeterministicUpdate',
    'UserParameterGeographyOutputFormat',
    'UserParameterGeometryOutputFormat',
    'UserParameterJdbcTreatDecimalAsInt',
    'UserParameterJdbcTreatTimestampNtzAsUtc',
    'UserParameterJdbcUseSessionTimezone',
    'UserParameterJsonIndent',
    'UserParameterLockTimeout',
    'UserParameterLogLevel',
    'UserParameterMultiStatementCount',
    'UserParameterNetworkPolicy',
    'UserParameterNoorderSequenceAsDefault',
    'UserParameterOdbcTreatDecimalAsInt',
    'UserParameterPreventUnloadToInternalStage',
    'UserParameterQueryTag',
    'UserParameterQuotedIdentifiersIgnoreCase',
    'UserParameterRowsPerResultset',
    'UserParameterS3StageVpceDnsName',
    'UserParameterSearchPath',
    'UserParameterSimulatedDataSharingConsumer',
    'UserParameterStatementQueuedTimeoutInSecond',
    'UserParameterStatementTimeoutInSecond',
    'UserParameterStrictJsonOutput',
    'UserParameterTimeInputFormat',
    'UserParameterTimeOutputFormat',
    'UserParameterTimestampDayIsAlways24h',
    'UserParameterTimestampInputFormat',
    'UserParameterTimestampLtzOutputFormat',
    'UserParameterTimestampNtzOutputFormat',
    'UserParameterTimestampOutputFormat',
    'UserParameterTimestampTypeMapping',
    'UserParameterTimestampTzOutputFormat',
    'UserParameterTimezone',
    'UserParameterTraceLevel',
    'UserParameterTransactionAbortOnError',
    'UserParameterTransactionDefaultIsolationLevel',
    'UserParameterTwoDigitCenturyStart',
    'UserParameterUnsupportedDdlAction',
    'UserParameterUseCachedResult',
    'UserParameterWeekOfYearPolicy',
    'UserParameterWeekStart',
    'UserShowOutput',
    'ViewAggregationPolicy',
    'ViewColumn',
    'ViewColumnMaskingPolicy',
    'ViewColumnProjectionPolicy',
    'ViewDataMetricFunction',
    'ViewDataMetricSchedule',
    'ViewDescribeOutput',
    'ViewRowAccessPolicy',
    'ViewShowOutput',
    'WarehouseParameter',
    'WarehouseParameterMaxConcurrencyLevel',
    'WarehouseParameterStatementQueuedTimeoutInSecond',
    'WarehouseParameterStatementTimeoutInSecond',
    'WarehouseShowOutput',
    'GetAccountsAccountResult',
    'GetAlertsAlertResult',
    'GetConnectionsConnectionResult',
    'GetConnectionsConnectionShowOutputResult',
    'GetCortexSearchServicesCortexSearchServiceResult',
    'GetCortexSearchServicesInResult',
    'GetCortexSearchServicesLimitResult',
    'GetDatabaseRolesDatabaseRoleResult',
    'GetDatabaseRolesDatabaseRoleShowOutputResult',
    'GetDatabaseRolesLimitResult',
    'GetDatabasesDatabaseResult',
    'GetDatabasesDatabaseDescribeOutputResult',
    'GetDatabasesDatabaseParameterResult',
    'GetDatabasesDatabaseParameterCatalogResult',
    'GetDatabasesDatabaseParameterDataRetentionTimeInDayResult',
    'GetDatabasesDatabaseParameterDefaultDdlCollationResult',
    'GetDatabasesDatabaseParameterEnableConsoleOutputResult',
    'GetDatabasesDatabaseParameterExternalVolumeResult',
    'GetDatabasesDatabaseParameterLogLevelResult',
    'GetDatabasesDatabaseParameterMaxDataExtensionTimeInDayResult',
    'GetDatabasesDatabaseParameterQuotedIdentifiersIgnoreCaseResult',
    'GetDatabasesDatabaseParameterReplaceInvalidCharacterResult',
    'GetDatabasesDatabaseParameterStorageSerializationPolicyResult',
    'GetDatabasesDatabaseParameterSuspendTaskAfterNumFailureResult',
    'GetDatabasesDatabaseParameterTaskAutoRetryAttemptResult',
    'GetDatabasesDatabaseParameterTraceLevelResult',
    'GetDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSizeResult',
    'GetDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecondResult',
    'GetDatabasesDatabaseParameterUserTaskTimeoutMResult',
    'GetDatabasesDatabaseShowOutputResult',
    'GetDatabasesLimitResult',
    'GetDynamicTablesInResult',
    'GetDynamicTablesLikeResult',
    'GetDynamicTablesLimitResult',
    'GetDynamicTablesRecordResult',
    'GetExternalFunctionsExternalFunctionResult',
    'GetExternalTablesExternalTableResult',
    'GetFailoverGroupsFailoverGroupResult',
    'GetFileFormatsFileFormatResult',
    'GetFunctionsFunctionResult',
    'GetGrantsFutureGrantsInResult',
    'GetGrantsFutureGrantsToResult',
    'GetGrantsGrantResult',
    'GetGrantsGrantsOfResult',
    'GetGrantsGrantsOnResult',
    'GetGrantsGrantsToResult',
    'GetGrantsGrantsToShareResult',
    'GetMaskingPoliciesInResult',
    'GetMaskingPoliciesLimitResult',
    'GetMaskingPoliciesMaskingPolicyResult',
    'GetMaskingPoliciesMaskingPolicyDescribeOutputResult',
    'GetMaskingPoliciesMaskingPolicyDescribeOutputSignatureResult',
    'GetMaskingPoliciesMaskingPolicyShowOutputResult',
    'GetMaterializedViewsMaterializedViewResult',
    'GetNetworkPoliciesNetworkPolicyResult',
    'GetNetworkPoliciesNetworkPolicyDescribeOutputResult',
    'GetNetworkPoliciesNetworkPolicyShowOutputResult',
    'GetParametersParameterResult',
    'GetPipesPipeResult',
    'GetProceduresProcedureResult',
    'GetResourceMonitorsResourceMonitorResult',
    'GetResourceMonitorsResourceMonitorShowOutputResult',
    'GetRolesRoleResult',
    'GetRolesRoleShowOutputResult',
    'GetRowAccessPoliciesInResult',
    'GetRowAccessPoliciesLimitResult',
    'GetRowAccessPoliciesRowAccessPolicyResult',
    'GetRowAccessPoliciesRowAccessPolicyDescribeOutputResult',
    'GetRowAccessPoliciesRowAccessPolicyDescribeOutputSignatureResult',
    'GetRowAccessPoliciesRowAccessPolicyShowOutputResult',
    'GetSchemasInResult',
    'GetSchemasLimitResult',
    'GetSchemasSchemaResult',
    'GetSchemasSchemaDescribeOutputResult',
    'GetSchemasSchemaParameterResult',
    'GetSchemasSchemaParameterCatalogResult',
    'GetSchemasSchemaParameterDataRetentionTimeInDayResult',
    'GetSchemasSchemaParameterDefaultDdlCollationResult',
    'GetSchemasSchemaParameterEnableConsoleOutputResult',
    'GetSchemasSchemaParameterExternalVolumeResult',
    'GetSchemasSchemaParameterLogLevelResult',
    'GetSchemasSchemaParameterMaxDataExtensionTimeInDayResult',
    'GetSchemasSchemaParameterPipeExecutionPausedResult',
    'GetSchemasSchemaParameterQuotedIdentifiersIgnoreCaseResult',
    'GetSchemasSchemaParameterReplaceInvalidCharacterResult',
    'GetSchemasSchemaParameterStorageSerializationPolicyResult',
    'GetSchemasSchemaParameterSuspendTaskAfterNumFailureResult',
    'GetSchemasSchemaParameterTaskAutoRetryAttemptResult',
    'GetSchemasSchemaParameterTraceLevelResult',
    'GetSchemasSchemaParameterUserTaskManagedInitialWarehouseSizeResult',
    'GetSchemasSchemaParameterUserTaskMinimumTriggerIntervalInSecondResult',
    'GetSchemasSchemaParameterUserTaskTimeoutMResult',
    'GetSchemasSchemaShowOutputResult',
    'GetSecretsInResult',
    'GetSecretsSecretResult',
    'GetSecretsSecretDescribeOutputResult',
    'GetSecretsSecretShowOutputResult',
    'GetSecurityIntegrationsSecurityIntegrationResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedEmailPatternResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedUserDomainResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputAuthTypeResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputBlockedRolesListResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputCommentResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputEnabledResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAllowedRolesListResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAnyRoleModeResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAudienceListResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthBlockedRolesListResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthIssuerResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthJwsKeysUrlResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey2Result',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKeyResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthScopeDelimiterResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttributeResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthTokenUserMappingClaimResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputNetworkPolicyResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAccessTokenValidityResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowNonTlsRedirectUriResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedAuthorizationEndpointResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedScopeResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedTokenEndpointResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAuthorizationEndpointResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientAuthMethodResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientIdResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKey2FpResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKeyFpResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientTypeResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthEnforcePkceResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthGrantResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthIssueRefreshTokenResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRedirectUriResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRefreshTokenValidityResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthTokenEndpointResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthUseSecondaryRoleResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputParentIntegrationResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputPreAuthorizedRolesListResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputRunAsRoleResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2DigestMethodsUsedResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2EnableSpInitiatedResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2ForceAuthnResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2IssuerResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2PostLogoutRedirectUrlResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2ProviderResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2RequestedNameidFormatResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignRequestResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignatureMethodsUsedResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeAcsUrlResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeIssuerUrlResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeMetadataResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeX509CertResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SpInitiatedLoginPageLabelResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SsoUrlResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2X509CertResult',
    'GetSecurityIntegrationsSecurityIntegrationDescribeOutputSyncPasswordResult',
    'GetSecurityIntegrationsSecurityIntegrationShowOutputResult',
    'GetSequencesSequenceResult',
    'GetSharesShareResult',
    'GetStagesStageResult',
    'GetStorageIntegrationsStorageIntegrationResult',
    'GetStreamlitsInResult',
    'GetStreamlitsLimitResult',
    'GetStreamlitsStreamlitResult',
    'GetStreamlitsStreamlitDescribeOutputResult',
    'GetStreamlitsStreamlitShowOutputResult',
    'GetStreamsInResult',
    'GetStreamsLimitResult',
    'GetStreamsStreamResult',
    'GetStreamsStreamDescribeOutputResult',
    'GetStreamsStreamShowOutputResult',
    'GetTablesTableResult',
    'GetTagsInResult',
    'GetTagsTagResult',
    'GetTagsTagShowOutputResult',
    'GetTasksInResult',
    'GetTasksLimitResult',
    'GetTasksTaskResult',
    'GetTasksTaskParameterResult',
    'GetTasksTaskParameterAbortDetachedQueryResult',
    'GetTasksTaskParameterAutocommitResult',
    'GetTasksTaskParameterBinaryInputFormatResult',
    'GetTasksTaskParameterBinaryOutputFormatResult',
    'GetTasksTaskParameterClientMemoryLimitResult',
    'GetTasksTaskParameterClientMetadataRequestUseConnectionCtxResult',
    'GetTasksTaskParameterClientPrefetchThreadResult',
    'GetTasksTaskParameterClientResultChunkSizeResult',
    'GetTasksTaskParameterClientResultColumnCaseInsensitiveResult',
    'GetTasksTaskParameterClientSessionKeepAlifeResult',
    'GetTasksTaskParameterClientSessionKeepAliveHeartbeatFrequencyResult',
    'GetTasksTaskParameterClientTimestampTypeMappingResult',
    'GetTasksTaskParameterDateInputFormatResult',
    'GetTasksTaskParameterDateOutputFormatResult',
    'GetTasksTaskParameterEnableUnloadPhysicalTypeOptimizationResult',
    'GetTasksTaskParameterErrorOnNondeterministicMergeResult',
    'GetTasksTaskParameterErrorOnNondeterministicUpdateResult',
    'GetTasksTaskParameterGeographyOutputFormatResult',
    'GetTasksTaskParameterGeometryOutputFormatResult',
    'GetTasksTaskParameterJdbcTreatTimestampNtzAsUtcResult',
    'GetTasksTaskParameterJdbcUseSessionTimezoneResult',
    'GetTasksTaskParameterJsonIndentResult',
    'GetTasksTaskParameterLockTimeoutResult',
    'GetTasksTaskParameterLogLevelResult',
    'GetTasksTaskParameterMultiStatementCountResult',
    'GetTasksTaskParameterNoorderSequenceAsDefaultResult',
    'GetTasksTaskParameterOdbcTreatDecimalAsIntResult',
    'GetTasksTaskParameterQueryTagResult',
    'GetTasksTaskParameterQuotedIdentifiersIgnoreCaseResult',
    'GetTasksTaskParameterRowsPerResultsetResult',
    'GetTasksTaskParameterS3StageVpceDnsNameResult',
    'GetTasksTaskParameterSearchPathResult',
    'GetTasksTaskParameterStatementQueuedTimeoutInSecondResult',
    'GetTasksTaskParameterStatementTimeoutInSecondResult',
    'GetTasksTaskParameterStrictJsonOutputResult',
    'GetTasksTaskParameterSuspendTaskAfterNumFailureResult',
    'GetTasksTaskParameterTaskAutoRetryAttemptResult',
    'GetTasksTaskParameterTimeInputFormatResult',
    'GetTasksTaskParameterTimeOutputFormatResult',
    'GetTasksTaskParameterTimestampDayIsAlways24hResult',
    'GetTasksTaskParameterTimestampInputFormatResult',
    'GetTasksTaskParameterTimestampLtzOutputFormatResult',
    'GetTasksTaskParameterTimestampNtzOutputFormatResult',
    'GetTasksTaskParameterTimestampOutputFormatResult',
    'GetTasksTaskParameterTimestampTypeMappingResult',
    'GetTasksTaskParameterTimestampTzOutputFormatResult',
    'GetTasksTaskParameterTimezoneResult',
    'GetTasksTaskParameterTraceLevelResult',
    'GetTasksTaskParameterTransactionAbortOnErrorResult',
    'GetTasksTaskParameterTransactionDefaultIsolationLevelResult',
    'GetTasksTaskParameterTwoDigitCenturyStartResult',
    'GetTasksTaskParameterUnsupportedDdlActionResult',
    'GetTasksTaskParameterUseCachedResultResult',
    'GetTasksTaskParameterUserTaskManagedInitialWarehouseSizeResult',
    'GetTasksTaskParameterUserTaskMinimumTriggerIntervalInSecondResult',
    'GetTasksTaskParameterUserTaskTimeoutMResult',
    'GetTasksTaskParameterWeekOfYearPolicyResult',
    'GetTasksTaskParameterWeekStartResult',
    'GetTasksTaskShowOutputResult',
    'GetTasksTaskShowOutputTaskRelationResult',
    'GetUsersLimitResult',
    'GetUsersUserResult',
    'GetUsersUserDescribeOutputResult',
    'GetUsersUserParameterResult',
    'GetUsersUserParameterAbortDetachedQueryResult',
    'GetUsersUserParameterAutocommitResult',
    'GetUsersUserParameterBinaryInputFormatResult',
    'GetUsersUserParameterBinaryOutputFormatResult',
    'GetUsersUserParameterClientMemoryLimitResult',
    'GetUsersUserParameterClientMetadataRequestUseConnectionCtxResult',
    'GetUsersUserParameterClientPrefetchThreadResult',
    'GetUsersUserParameterClientResultChunkSizeResult',
    'GetUsersUserParameterClientResultColumnCaseInsensitiveResult',
    'GetUsersUserParameterClientSessionKeepAlifeResult',
    'GetUsersUserParameterClientSessionKeepAliveHeartbeatFrequencyResult',
    'GetUsersUserParameterClientTimestampTypeMappingResult',
    'GetUsersUserParameterDateInputFormatResult',
    'GetUsersUserParameterDateOutputFormatResult',
    'GetUsersUserParameterEnableUnloadPhysicalTypeOptimizationResult',
    'GetUsersUserParameterEnableUnredactedQuerySyntaxErrorResult',
    'GetUsersUserParameterErrorOnNondeterministicMergeResult',
    'GetUsersUserParameterErrorOnNondeterministicUpdateResult',
    'GetUsersUserParameterGeographyOutputFormatResult',
    'GetUsersUserParameterGeometryOutputFormatResult',
    'GetUsersUserParameterJdbcTreatDecimalAsIntResult',
    'GetUsersUserParameterJdbcTreatTimestampNtzAsUtcResult',
    'GetUsersUserParameterJdbcUseSessionTimezoneResult',
    'GetUsersUserParameterJsonIndentResult',
    'GetUsersUserParameterLockTimeoutResult',
    'GetUsersUserParameterLogLevelResult',
    'GetUsersUserParameterMultiStatementCountResult',
    'GetUsersUserParameterNetworkPolicyResult',
    'GetUsersUserParameterNoorderSequenceAsDefaultResult',
    'GetUsersUserParameterOdbcTreatDecimalAsIntResult',
    'GetUsersUserParameterPreventUnloadToInternalStageResult',
    'GetUsersUserParameterQueryTagResult',
    'GetUsersUserParameterQuotedIdentifiersIgnoreCaseResult',
    'GetUsersUserParameterRowsPerResultsetResult',
    'GetUsersUserParameterS3StageVpceDnsNameResult',
    'GetUsersUserParameterSearchPathResult',
    'GetUsersUserParameterSimulatedDataSharingConsumerResult',
    'GetUsersUserParameterStatementQueuedTimeoutInSecondResult',
    'GetUsersUserParameterStatementTimeoutInSecondResult',
    'GetUsersUserParameterStrictJsonOutputResult',
    'GetUsersUserParameterTimeInputFormatResult',
    'GetUsersUserParameterTimeOutputFormatResult',
    'GetUsersUserParameterTimestampDayIsAlways24hResult',
    'GetUsersUserParameterTimestampInputFormatResult',
    'GetUsersUserParameterTimestampLtzOutputFormatResult',
    'GetUsersUserParameterTimestampNtzOutputFormatResult',
    'GetUsersUserParameterTimestampOutputFormatResult',
    'GetUsersUserParameterTimestampTypeMappingResult',
    'GetUsersUserParameterTimestampTzOutputFormatResult',
    'GetUsersUserParameterTimezoneResult',
    'GetUsersUserParameterTraceLevelResult',
    'GetUsersUserParameterTransactionAbortOnErrorResult',
    'GetUsersUserParameterTransactionDefaultIsolationLevelResult',
    'GetUsersUserParameterTwoDigitCenturyStartResult',
    'GetUsersUserParameterUnsupportedDdlActionResult',
    'GetUsersUserParameterUseCachedResultResult',
    'GetUsersUserParameterWeekOfYearPolicyResult',
    'GetUsersUserParameterWeekStartResult',
    'GetUsersUserShowOutputResult',
    'GetViewsInResult',
    'GetViewsLimitResult',
    'GetViewsViewResult',
    'GetViewsViewDescribeOutputResult',
    'GetViewsViewShowOutputResult',
    'GetWarehousesWarehouseResult',
    'GetWarehousesWarehouseDescribeOutputResult',
    'GetWarehousesWarehouseParameterResult',
    'GetWarehousesWarehouseParameterMaxConcurrencyLevelResult',
    'GetWarehousesWarehouseParameterStatementQueuedTimeoutInSecondResult',
    'GetWarehousesWarehouseParameterStatementTimeoutInSecondResult',
    'GetWarehousesWarehouseShowOutputResult',
]

@pulumi.output_type
class AccountRoleShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignedToUsers":
            suggest = "assigned_to_users"
        elif key == "createdOn":
            suggest = "created_on"
        elif key == "grantedRoles":
            suggest = "granted_roles"
        elif key == "grantedToRoles":
            suggest = "granted_to_roles"
        elif key == "isCurrent":
            suggest = "is_current"
        elif key == "isDefault":
            suggest = "is_default"
        elif key == "isInherited":
            suggest = "is_inherited"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccountRoleShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccountRoleShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccountRoleShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assigned_to_users: Optional[int] = None,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 granted_roles: Optional[int] = None,
                 granted_to_roles: Optional[int] = None,
                 is_current: Optional[bool] = None,
                 is_default: Optional[bool] = None,
                 is_inherited: Optional[bool] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None):
        if assigned_to_users is not None:
            pulumi.set(__self__, "assigned_to_users", assigned_to_users)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if granted_roles is not None:
            pulumi.set(__self__, "granted_roles", granted_roles)
        if granted_to_roles is not None:
            pulumi.set(__self__, "granted_to_roles", granted_to_roles)
        if is_current is not None:
            pulumi.set(__self__, "is_current", is_current)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if is_inherited is not None:
            pulumi.set(__self__, "is_inherited", is_inherited)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)

    @property
    @pulumi.getter(name="assignedToUsers")
    def assigned_to_users(self) -> Optional[int]:
        return pulumi.get(self, "assigned_to_users")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="grantedRoles")
    def granted_roles(self) -> Optional[int]:
        return pulumi.get(self, "granted_roles")

    @property
    @pulumi.getter(name="grantedToRoles")
    def granted_to_roles(self) -> Optional[int]:
        return pulumi.get(self, "granted_to_roles")

    @property
    @pulumi.getter(name="isCurrent")
    def is_current(self) -> Optional[bool]:
        return pulumi.get(self, "is_current")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isInherited")
    def is_inherited(self) -> Optional[bool]:
        return pulumi.get(self, "is_inherited")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")


@pulumi.output_type
class AlertAlertSchedule(dict):
    def __init__(__self__, *,
                 cron: Optional['outputs.AlertAlertScheduleCron'] = None,
                 interval: Optional[int] = None):
        """
        :param 'AlertAlertScheduleCronArgs' cron: Specifies the cron expression for the alert. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
        :param int interval: Specifies the interval in minutes for the alert schedule. The interval must be greater than 0 and less than 1440 (24 hours).
        """
        if cron is not None:
            pulumi.set(__self__, "cron", cron)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def cron(self) -> Optional['outputs.AlertAlertScheduleCron']:
        """
        Specifies the cron expression for the alert. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
        """
        return pulumi.get(self, "cron")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        Specifies the interval in minutes for the alert schedule. The interval must be greater than 0 and less than 1440 (24 hours).
        """
        return pulumi.get(self, "interval")


@pulumi.output_type
class AlertAlertScheduleCron(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertAlertScheduleCron. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertAlertScheduleCron.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertAlertScheduleCron.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: str,
                 time_zone: str):
        """
        :param str expression: Specifies the cron expression for the alert. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
        :param str time_zone: Specifies the time zone for alert refresh.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Specifies the cron expression for the alert. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> str:
        """
        Specifies the time zone for alert refresh.
        """
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authTypes":
            suggest = "auth_types"
        elif key == "oauthAccessTokenValidities":
            suggest = "oauth_access_token_validities"
        elif key == "oauthAllowedScopes":
            suggest = "oauth_allowed_scopes"
        elif key == "oauthAuthorizationEndpoints":
            suggest = "oauth_authorization_endpoints"
        elif key == "oauthClientAuthMethods":
            suggest = "oauth_client_auth_methods"
        elif key == "oauthClientIds":
            suggest = "oauth_client_ids"
        elif key == "oauthGrants":
            suggest = "oauth_grants"
        elif key == "oauthRefreshTokenValidities":
            suggest = "oauth_refresh_token_validities"
        elif key == "oauthTokenEndpoints":
            suggest = "oauth_token_endpoints"
        elif key == "parentIntegrations":
            suggest = "parent_integrations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_types: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthType']] = None,
                 comments: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputComment']] = None,
                 enableds: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabled']] = None,
                 oauth_access_token_validities: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidity']] = None,
                 oauth_allowed_scopes: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScope']] = None,
                 oauth_authorization_endpoints: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpoint']] = None,
                 oauth_client_auth_methods: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethod']] = None,
                 oauth_client_ids: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientId']] = None,
                 oauth_grants: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrant']] = None,
                 oauth_refresh_token_validities: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidity']] = None,
                 oauth_token_endpoints: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpoint']] = None,
                 parent_integrations: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegration']] = None):
        if auth_types is not None:
            pulumi.set(__self__, "auth_types", auth_types)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if enableds is not None:
            pulumi.set(__self__, "enableds", enableds)
        if oauth_access_token_validities is not None:
            pulumi.set(__self__, "oauth_access_token_validities", oauth_access_token_validities)
        if oauth_allowed_scopes is not None:
            pulumi.set(__self__, "oauth_allowed_scopes", oauth_allowed_scopes)
        if oauth_authorization_endpoints is not None:
            pulumi.set(__self__, "oauth_authorization_endpoints", oauth_authorization_endpoints)
        if oauth_client_auth_methods is not None:
            pulumi.set(__self__, "oauth_client_auth_methods", oauth_client_auth_methods)
        if oauth_client_ids is not None:
            pulumi.set(__self__, "oauth_client_ids", oauth_client_ids)
        if oauth_grants is not None:
            pulumi.set(__self__, "oauth_grants", oauth_grants)
        if oauth_refresh_token_validities is not None:
            pulumi.set(__self__, "oauth_refresh_token_validities", oauth_refresh_token_validities)
        if oauth_token_endpoints is not None:
            pulumi.set(__self__, "oauth_token_endpoints", oauth_token_endpoints)
        if parent_integrations is not None:
            pulumi.set(__self__, "parent_integrations", parent_integrations)

    @property
    @pulumi.getter(name="authTypes")
    def auth_types(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthType']]:
        return pulumi.get(self, "auth_types")

    @property
    @pulumi.getter
    def comments(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputComment']]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def enableds(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabled']]:
        return pulumi.get(self, "enableds")

    @property
    @pulumi.getter(name="oauthAccessTokenValidities")
    def oauth_access_token_validities(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidity']]:
        return pulumi.get(self, "oauth_access_token_validities")

    @property
    @pulumi.getter(name="oauthAllowedScopes")
    def oauth_allowed_scopes(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScope']]:
        return pulumi.get(self, "oauth_allowed_scopes")

    @property
    @pulumi.getter(name="oauthAuthorizationEndpoints")
    def oauth_authorization_endpoints(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpoint']]:
        return pulumi.get(self, "oauth_authorization_endpoints")

    @property
    @pulumi.getter(name="oauthClientAuthMethods")
    def oauth_client_auth_methods(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethod']]:
        return pulumi.get(self, "oauth_client_auth_methods")

    @property
    @pulumi.getter(name="oauthClientIds")
    def oauth_client_ids(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientId']]:
        return pulumi.get(self, "oauth_client_ids")

    @property
    @pulumi.getter(name="oauthGrants")
    def oauth_grants(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrant']]:
        return pulumi.get(self, "oauth_grants")

    @property
    @pulumi.getter(name="oauthRefreshTokenValidities")
    def oauth_refresh_token_validities(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidity']]:
        return pulumi.get(self, "oauth_refresh_token_validities")

    @property
    @pulumi.getter(name="oauthTokenEndpoints")
    def oauth_token_endpoints(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpoint']]:
        return pulumi.get(self, "oauth_token_endpoints")

    @property
    @pulumi.getter(name="parentIntegrations")
    def parent_integrations(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegration']]:
        return pulumi.get(self, "parent_integrations")


@pulumi.output_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthType(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputComment(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabled(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidity(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScope(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpoint(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethod(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientId(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrant(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidity(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpoint(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegration(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "integrationType":
            suggest = "integration_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 integration_type: Optional[str] = None,
                 name: Optional[str] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if integration_type is not None:
            pulumi.set(__self__, "integration_type", integration_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> Optional[str]:
        return pulumi.get(self, "integration_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authTypes":
            suggest = "auth_types"
        elif key == "oauthAccessTokenValidities":
            suggest = "oauth_access_token_validities"
        elif key == "oauthAllowedScopes":
            suggest = "oauth_allowed_scopes"
        elif key == "oauthAuthorizationEndpoints":
            suggest = "oauth_authorization_endpoints"
        elif key == "oauthClientAuthMethods":
            suggest = "oauth_client_auth_methods"
        elif key == "oauthClientIds":
            suggest = "oauth_client_ids"
        elif key == "oauthGrants":
            suggest = "oauth_grants"
        elif key == "oauthRefreshTokenValidities":
            suggest = "oauth_refresh_token_validities"
        elif key == "oauthTokenEndpoints":
            suggest = "oauth_token_endpoints"
        elif key == "parentIntegrations":
            suggest = "parent_integrations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiAuthenticationIntegrationWithClientCredentialsDescribeOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiAuthenticationIntegrationWithClientCredentialsDescribeOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiAuthenticationIntegrationWithClientCredentialsDescribeOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_types: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthType']] = None,
                 comments: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputComment']] = None,
                 enableds: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabled']] = None,
                 oauth_access_token_validities: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidity']] = None,
                 oauth_allowed_scopes: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScope']] = None,
                 oauth_authorization_endpoints: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpoint']] = None,
                 oauth_client_auth_methods: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethod']] = None,
                 oauth_client_ids: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientId']] = None,
                 oauth_grants: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrant']] = None,
                 oauth_refresh_token_validities: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidity']] = None,
                 oauth_token_endpoints: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpoint']] = None,
                 parent_integrations: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegration']] = None):
        if auth_types is not None:
            pulumi.set(__self__, "auth_types", auth_types)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if enableds is not None:
            pulumi.set(__self__, "enableds", enableds)
        if oauth_access_token_validities is not None:
            pulumi.set(__self__, "oauth_access_token_validities", oauth_access_token_validities)
        if oauth_allowed_scopes is not None:
            pulumi.set(__self__, "oauth_allowed_scopes", oauth_allowed_scopes)
        if oauth_authorization_endpoints is not None:
            pulumi.set(__self__, "oauth_authorization_endpoints", oauth_authorization_endpoints)
        if oauth_client_auth_methods is not None:
            pulumi.set(__self__, "oauth_client_auth_methods", oauth_client_auth_methods)
        if oauth_client_ids is not None:
            pulumi.set(__self__, "oauth_client_ids", oauth_client_ids)
        if oauth_grants is not None:
            pulumi.set(__self__, "oauth_grants", oauth_grants)
        if oauth_refresh_token_validities is not None:
            pulumi.set(__self__, "oauth_refresh_token_validities", oauth_refresh_token_validities)
        if oauth_token_endpoints is not None:
            pulumi.set(__self__, "oauth_token_endpoints", oauth_token_endpoints)
        if parent_integrations is not None:
            pulumi.set(__self__, "parent_integrations", parent_integrations)

    @property
    @pulumi.getter(name="authTypes")
    def auth_types(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthType']]:
        return pulumi.get(self, "auth_types")

    @property
    @pulumi.getter
    def comments(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputComment']]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def enableds(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabled']]:
        return pulumi.get(self, "enableds")

    @property
    @pulumi.getter(name="oauthAccessTokenValidities")
    def oauth_access_token_validities(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidity']]:
        return pulumi.get(self, "oauth_access_token_validities")

    @property
    @pulumi.getter(name="oauthAllowedScopes")
    def oauth_allowed_scopes(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScope']]:
        return pulumi.get(self, "oauth_allowed_scopes")

    @property
    @pulumi.getter(name="oauthAuthorizationEndpoints")
    def oauth_authorization_endpoints(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpoint']]:
        return pulumi.get(self, "oauth_authorization_endpoints")

    @property
    @pulumi.getter(name="oauthClientAuthMethods")
    def oauth_client_auth_methods(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethod']]:
        return pulumi.get(self, "oauth_client_auth_methods")

    @property
    @pulumi.getter(name="oauthClientIds")
    def oauth_client_ids(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientId']]:
        return pulumi.get(self, "oauth_client_ids")

    @property
    @pulumi.getter(name="oauthGrants")
    def oauth_grants(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrant']]:
        return pulumi.get(self, "oauth_grants")

    @property
    @pulumi.getter(name="oauthRefreshTokenValidities")
    def oauth_refresh_token_validities(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidity']]:
        return pulumi.get(self, "oauth_refresh_token_validities")

    @property
    @pulumi.getter(name="oauthTokenEndpoints")
    def oauth_token_endpoints(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpoint']]:
        return pulumi.get(self, "oauth_token_endpoints")

    @property
    @pulumi.getter(name="parentIntegrations")
    def parent_integrations(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegration']]:
        return pulumi.get(self, "parent_integrations")


@pulumi.output_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthType(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputComment(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabled(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidity(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScope(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpoint(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethod(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientId(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrant(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidity(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpoint(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegration(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithClientCredentialsShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "integrationType":
            suggest = "integration_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiAuthenticationIntegrationWithClientCredentialsShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiAuthenticationIntegrationWithClientCredentialsShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiAuthenticationIntegrationWithClientCredentialsShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 integration_type: Optional[str] = None,
                 name: Optional[str] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if integration_type is not None:
            pulumi.set(__self__, "integration_type", integration_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> Optional[str]:
        return pulumi.get(self, "integration_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authTypes":
            suggest = "auth_types"
        elif key == "oauthAccessTokenValidities":
            suggest = "oauth_access_token_validities"
        elif key == "oauthAllowedScopes":
            suggest = "oauth_allowed_scopes"
        elif key == "oauthAuthorizationEndpoints":
            suggest = "oauth_authorization_endpoints"
        elif key == "oauthClientAuthMethods":
            suggest = "oauth_client_auth_methods"
        elif key == "oauthClientIds":
            suggest = "oauth_client_ids"
        elif key == "oauthGrants":
            suggest = "oauth_grants"
        elif key == "oauthRefreshTokenValidities":
            suggest = "oauth_refresh_token_validities"
        elif key == "oauthTokenEndpoints":
            suggest = "oauth_token_endpoints"
        elif key == "parentIntegrations":
            suggest = "parent_integrations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiAuthenticationIntegrationWithJwtBearerDescribeOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiAuthenticationIntegrationWithJwtBearerDescribeOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiAuthenticationIntegrationWithJwtBearerDescribeOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_types: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthType']] = None,
                 comments: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputComment']] = None,
                 enableds: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabled']] = None,
                 oauth_access_token_validities: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidity']] = None,
                 oauth_allowed_scopes: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScope']] = None,
                 oauth_authorization_endpoints: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpoint']] = None,
                 oauth_client_auth_methods: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethod']] = None,
                 oauth_client_ids: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientId']] = None,
                 oauth_grants: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrant']] = None,
                 oauth_refresh_token_validities: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidity']] = None,
                 oauth_token_endpoints: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpoint']] = None,
                 parent_integrations: Optional[Sequence['outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegration']] = None):
        if auth_types is not None:
            pulumi.set(__self__, "auth_types", auth_types)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if enableds is not None:
            pulumi.set(__self__, "enableds", enableds)
        if oauth_access_token_validities is not None:
            pulumi.set(__self__, "oauth_access_token_validities", oauth_access_token_validities)
        if oauth_allowed_scopes is not None:
            pulumi.set(__self__, "oauth_allowed_scopes", oauth_allowed_scopes)
        if oauth_authorization_endpoints is not None:
            pulumi.set(__self__, "oauth_authorization_endpoints", oauth_authorization_endpoints)
        if oauth_client_auth_methods is not None:
            pulumi.set(__self__, "oauth_client_auth_methods", oauth_client_auth_methods)
        if oauth_client_ids is not None:
            pulumi.set(__self__, "oauth_client_ids", oauth_client_ids)
        if oauth_grants is not None:
            pulumi.set(__self__, "oauth_grants", oauth_grants)
        if oauth_refresh_token_validities is not None:
            pulumi.set(__self__, "oauth_refresh_token_validities", oauth_refresh_token_validities)
        if oauth_token_endpoints is not None:
            pulumi.set(__self__, "oauth_token_endpoints", oauth_token_endpoints)
        if parent_integrations is not None:
            pulumi.set(__self__, "parent_integrations", parent_integrations)

    @property
    @pulumi.getter(name="authTypes")
    def auth_types(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthType']]:
        return pulumi.get(self, "auth_types")

    @property
    @pulumi.getter
    def comments(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputComment']]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def enableds(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabled']]:
        return pulumi.get(self, "enableds")

    @property
    @pulumi.getter(name="oauthAccessTokenValidities")
    def oauth_access_token_validities(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidity']]:
        return pulumi.get(self, "oauth_access_token_validities")

    @property
    @pulumi.getter(name="oauthAllowedScopes")
    def oauth_allowed_scopes(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScope']]:
        return pulumi.get(self, "oauth_allowed_scopes")

    @property
    @pulumi.getter(name="oauthAuthorizationEndpoints")
    def oauth_authorization_endpoints(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpoint']]:
        return pulumi.get(self, "oauth_authorization_endpoints")

    @property
    @pulumi.getter(name="oauthClientAuthMethods")
    def oauth_client_auth_methods(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethod']]:
        return pulumi.get(self, "oauth_client_auth_methods")

    @property
    @pulumi.getter(name="oauthClientIds")
    def oauth_client_ids(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientId']]:
        return pulumi.get(self, "oauth_client_ids")

    @property
    @pulumi.getter(name="oauthGrants")
    def oauth_grants(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrant']]:
        return pulumi.get(self, "oauth_grants")

    @property
    @pulumi.getter(name="oauthRefreshTokenValidities")
    def oauth_refresh_token_validities(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidity']]:
        return pulumi.get(self, "oauth_refresh_token_validities")

    @property
    @pulumi.getter(name="oauthTokenEndpoints")
    def oauth_token_endpoints(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpoint']]:
        return pulumi.get(self, "oauth_token_endpoints")

    @property
    @pulumi.getter(name="parentIntegrations")
    def parent_integrations(self) -> Optional[Sequence['outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegration']]:
        return pulumi.get(self, "parent_integrations")


@pulumi.output_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthType(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputComment(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabled(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidity(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScope(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpoint(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethod(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientId(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrant(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidity(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpoint(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegration(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApiAuthenticationIntegrationWithJwtBearerShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "integrationType":
            suggest = "integration_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiAuthenticationIntegrationWithJwtBearerShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiAuthenticationIntegrationWithJwtBearerShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiAuthenticationIntegrationWithJwtBearerShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 integration_type: Optional[str] = None,
                 name: Optional[str] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if integration_type is not None:
            pulumi.set(__self__, "integration_type", integration_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> Optional[str]:
        return pulumi.get(self, "integration_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class AuthenticationPolicyDescribeOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationMethods":
            suggest = "authentication_methods"
        elif key == "clientTypes":
            suggest = "client_types"
        elif key == "mfaAuthenticationMethods":
            suggest = "mfa_authentication_methods"
        elif key == "mfaEnrollment":
            suggest = "mfa_enrollment"
        elif key == "securityIntegrations":
            suggest = "security_integrations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuthenticationPolicyDescribeOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuthenticationPolicyDescribeOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuthenticationPolicyDescribeOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_methods: Optional[str] = None,
                 client_types: Optional[str] = None,
                 comment: Optional[str] = None,
                 mfa_authentication_methods: Optional[str] = None,
                 mfa_enrollment: Optional[str] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 security_integrations: Optional[str] = None):
        if authentication_methods is not None:
            pulumi.set(__self__, "authentication_methods", authentication_methods)
        if client_types is not None:
            pulumi.set(__self__, "client_types", client_types)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if mfa_authentication_methods is not None:
            pulumi.set(__self__, "mfa_authentication_methods", mfa_authentication_methods)
        if mfa_enrollment is not None:
            pulumi.set(__self__, "mfa_enrollment", mfa_enrollment)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if security_integrations is not None:
            pulumi.set(__self__, "security_integrations", security_integrations)

    @property
    @pulumi.getter(name="authenticationMethods")
    def authentication_methods(self) -> Optional[str]:
        return pulumi.get(self, "authentication_methods")

    @property
    @pulumi.getter(name="clientTypes")
    def client_types(self) -> Optional[str]:
        return pulumi.get(self, "client_types")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="mfaAuthenticationMethods")
    def mfa_authentication_methods(self) -> Optional[str]:
        return pulumi.get(self, "mfa_authentication_methods")

    @property
    @pulumi.getter(name="mfaEnrollment")
    def mfa_enrollment(self) -> Optional[str]:
        return pulumi.get(self, "mfa_enrollment")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="securityIntegrations")
    def security_integrations(self) -> Optional[str]:
        return pulumi.get(self, "security_integrations")


@pulumi.output_type
class AuthenticationPolicyShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "ownerRoleType":
            suggest = "owner_role_type"
        elif key == "schemaName":
            suggest = "schema_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuthenticationPolicyShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuthenticationPolicyShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuthenticationPolicyShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 name: Optional[str] = None,
                 options: Optional[str] = None,
                 owner: Optional[str] = None,
                 owner_role_type: Optional[str] = None,
                 schema_name: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[str]:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class DatabaseOldReplicationConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreEditionCheck":
            suggest = "ignore_edition_check"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseOldReplicationConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseOldReplicationConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseOldReplicationConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accounts: Sequence[str],
                 ignore_edition_check: Optional[bool] = None):
        pulumi.set(__self__, "accounts", accounts)
        if ignore_edition_check is not None:
            pulumi.set(__self__, "ignore_edition_check", ignore_edition_check)

    @property
    @pulumi.getter
    def accounts(self) -> Sequence[str]:
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="ignoreEditionCheck")
    def ignore_edition_check(self) -> Optional[bool]:
        return pulumi.get(self, "ignore_edition_check")


@pulumi.output_type
class DatabaseReplication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableToAccounts":
            suggest = "enable_to_accounts"
        elif key == "ignoreEditionCheck":
            suggest = "ignore_edition_check"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseReplication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseReplication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseReplication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_to_accounts: Sequence['outputs.DatabaseReplicationEnableToAccount'],
                 ignore_edition_check: Optional[bool] = None):
        """
        :param Sequence['DatabaseReplicationEnableToAccountArgs'] enable_to_accounts: Entry to enable replication and optionally failover for a given account identifier.
        :param bool ignore_edition_check: Allows replicating data to accounts on lower editions in either of the following scenarios: 1. The primary database is in a Business Critical (or higher) account but one or more of the accounts approved for replication are on lower editions. Business Critical Edition is intended for Snowflake accounts with extremely sensitive data. 2. The primary database is in a Business Critical (or higher) account and a signed business associate agreement is in place to store PHI data in the account per HIPAA and HITRUST regulations, but no such agreement is in place for one or more of the accounts approved for replication, regardless if they are Business Critical (or higher) accounts. Both scenarios are prohibited by default in an effort to help prevent account administrators for Business Critical (or higher) accounts from inadvertently replicating sensitive data to accounts on lower editions.
        """
        pulumi.set(__self__, "enable_to_accounts", enable_to_accounts)
        if ignore_edition_check is not None:
            pulumi.set(__self__, "ignore_edition_check", ignore_edition_check)

    @property
    @pulumi.getter(name="enableToAccounts")
    def enable_to_accounts(self) -> Sequence['outputs.DatabaseReplicationEnableToAccount']:
        """
        Entry to enable replication and optionally failover for a given account identifier.
        """
        return pulumi.get(self, "enable_to_accounts")

    @property
    @pulumi.getter(name="ignoreEditionCheck")
    def ignore_edition_check(self) -> Optional[bool]:
        """
        Allows replicating data to accounts on lower editions in either of the following scenarios: 1. The primary database is in a Business Critical (or higher) account but one or more of the accounts approved for replication are on lower editions. Business Critical Edition is intended for Snowflake accounts with extremely sensitive data. 2. The primary database is in a Business Critical (or higher) account and a signed business associate agreement is in place to store PHI data in the account per HIPAA and HITRUST regulations, but no such agreement is in place for one or more of the accounts approved for replication, regardless if they are Business Critical (or higher) accounts. Both scenarios are prohibited by default in an effort to help prevent account administrators for Business Critical (or higher) accounts from inadvertently replicating sensitive data to accounts on lower editions.
        """
        return pulumi.get(self, "ignore_edition_check")


@pulumi.output_type
class DatabaseReplicationEnableToAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountIdentifier":
            suggest = "account_identifier"
        elif key == "withFailover":
            suggest = "with_failover"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseReplicationEnableToAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseReplicationEnableToAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseReplicationEnableToAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_identifier: str,
                 with_failover: Optional[bool] = None):
        """
        :param str account_identifier: Specifies account identifier for which replication should be enabled. The account identifiers should be in the form of `"<organization_name>"."<account_name>"`.
        :param bool with_failover: Specifies if failover should be enabled for the specified account identifier
        """
        pulumi.set(__self__, "account_identifier", account_identifier)
        if with_failover is not None:
            pulumi.set(__self__, "with_failover", with_failover)

    @property
    @pulumi.getter(name="accountIdentifier")
    def account_identifier(self) -> str:
        """
        Specifies account identifier for which replication should be enabled. The account identifiers should be in the form of `"<organization_name>"."<account_name>"`.
        """
        return pulumi.get(self, "account_identifier")

    @property
    @pulumi.getter(name="withFailover")
    def with_failover(self) -> Optional[bool]:
        """
        Specifies if failover should be enabled for the specified account identifier
        """
        return pulumi.get(self, "with_failover")


@pulumi.output_type
class DatabaseRoleShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "grantedDatabaseRoles":
            suggest = "granted_database_roles"
        elif key == "grantedToDatabaseRoles":
            suggest = "granted_to_database_roles"
        elif key == "grantedToRoles":
            suggest = "granted_to_roles"
        elif key == "isCurrent":
            suggest = "is_current"
        elif key == "isDefault":
            suggest = "is_default"
        elif key == "isInherited":
            suggest = "is_inherited"
        elif key == "ownerRoleType":
            suggest = "owner_role_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseRoleShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseRoleShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseRoleShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 granted_database_roles: Optional[int] = None,
                 granted_to_database_roles: Optional[int] = None,
                 granted_to_roles: Optional[int] = None,
                 is_current: Optional[bool] = None,
                 is_default: Optional[bool] = None,
                 is_inherited: Optional[bool] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 owner_role_type: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if granted_database_roles is not None:
            pulumi.set(__self__, "granted_database_roles", granted_database_roles)
        if granted_to_database_roles is not None:
            pulumi.set(__self__, "granted_to_database_roles", granted_to_database_roles)
        if granted_to_roles is not None:
            pulumi.set(__self__, "granted_to_roles", granted_to_roles)
        if is_current is not None:
            pulumi.set(__self__, "is_current", is_current)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if is_inherited is not None:
            pulumi.set(__self__, "is_inherited", is_inherited)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="grantedDatabaseRoles")
    def granted_database_roles(self) -> Optional[int]:
        return pulumi.get(self, "granted_database_roles")

    @property
    @pulumi.getter(name="grantedToDatabaseRoles")
    def granted_to_database_roles(self) -> Optional[int]:
        return pulumi.get(self, "granted_to_database_roles")

    @property
    @pulumi.getter(name="grantedToRoles")
    def granted_to_roles(self) -> Optional[int]:
        return pulumi.get(self, "granted_to_roles")

    @property
    @pulumi.getter(name="isCurrent")
    def is_current(self) -> Optional[bool]:
        return pulumi.get(self, "is_current")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isInherited")
    def is_inherited(self) -> Optional[bool]:
        return pulumi.get(self, "is_inherited")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[str]:
        return pulumi.get(self, "owner_role_type")


@pulumi.output_type
class DynamicTableTargetLag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maximumDuration":
            suggest = "maximum_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DynamicTableTargetLag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DynamicTableTargetLag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DynamicTableTargetLag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 downstream: Optional[bool] = None,
                 maximum_duration: Optional[str] = None):
        """
        :param bool downstream: Specifies whether the target lag time is downstream.
        :param str maximum_duration: Specifies the maximum target lag time for the dynamic table.
        """
        if downstream is not None:
            pulumi.set(__self__, "downstream", downstream)
        if maximum_duration is not None:
            pulumi.set(__self__, "maximum_duration", maximum_duration)

    @property
    @pulumi.getter
    def downstream(self) -> Optional[bool]:
        """
        Specifies whether the target lag time is downstream.
        """
        return pulumi.get(self, "downstream")

    @property
    @pulumi.getter(name="maximumDuration")
    def maximum_duration(self) -> Optional[str]:
        """
        Specifies the maximum target lag time for the dynamic table.
        """
        return pulumi.get(self, "maximum_duration")


@pulumi.output_type
class ExternalFunctionArg(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str):
        """
        :param str name: Argument name
        :param str type: Argument type, e.g. VARCHAR
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Argument name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Argument type, e.g. VARCHAR
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ExternalFunctionHeader(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Header name
        :param str value: Header value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Header name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Header value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ExternalOauthIntegrationDescribeOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalOauthAllowedRolesLists":
            suggest = "external_oauth_allowed_roles_lists"
        elif key == "externalOauthAnyRoleModes":
            suggest = "external_oauth_any_role_modes"
        elif key == "externalOauthAudienceLists":
            suggest = "external_oauth_audience_lists"
        elif key == "externalOauthBlockedRolesLists":
            suggest = "external_oauth_blocked_roles_lists"
        elif key == "externalOauthIssuers":
            suggest = "external_oauth_issuers"
        elif key == "externalOauthJwsKeysUrls":
            suggest = "external_oauth_jws_keys_urls"
        elif key == "externalOauthRsaPublicKey2s":
            suggest = "external_oauth_rsa_public_key2s"
        elif key == "externalOauthRsaPublicKeys":
            suggest = "external_oauth_rsa_public_keys"
        elif key == "externalOauthScopeDelimiters":
            suggest = "external_oauth_scope_delimiters"
        elif key == "externalOauthSnowflakeUserMappingAttributes":
            suggest = "external_oauth_snowflake_user_mapping_attributes"
        elif key == "externalOauthTokenUserMappingClaims":
            suggest = "external_oauth_token_user_mapping_claims"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalOauthIntegrationDescribeOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalOauthIntegrationDescribeOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalOauthIntegrationDescribeOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comments: Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputComment']] = None,
                 enableds: Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputEnabled']] = None,
                 external_oauth_allowed_roles_lists: Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesList']] = None,
                 external_oauth_any_role_modes: Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleMode']] = None,
                 external_oauth_audience_lists: Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputExternalOauthAudienceList']] = None,
                 external_oauth_blocked_roles_lists: Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesList']] = None,
                 external_oauth_issuers: Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputExternalOauthIssuer']] = None,
                 external_oauth_jws_keys_urls: Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrl']] = None,
                 external_oauth_rsa_public_key2s: Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2']] = None,
                 external_oauth_rsa_public_keys: Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey']] = None,
                 external_oauth_scope_delimiters: Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiter']] = None,
                 external_oauth_snowflake_user_mapping_attributes: Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute']] = None,
                 external_oauth_token_user_mapping_claims: Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaim']] = None):
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if enableds is not None:
            pulumi.set(__self__, "enableds", enableds)
        if external_oauth_allowed_roles_lists is not None:
            pulumi.set(__self__, "external_oauth_allowed_roles_lists", external_oauth_allowed_roles_lists)
        if external_oauth_any_role_modes is not None:
            pulumi.set(__self__, "external_oauth_any_role_modes", external_oauth_any_role_modes)
        if external_oauth_audience_lists is not None:
            pulumi.set(__self__, "external_oauth_audience_lists", external_oauth_audience_lists)
        if external_oauth_blocked_roles_lists is not None:
            pulumi.set(__self__, "external_oauth_blocked_roles_lists", external_oauth_blocked_roles_lists)
        if external_oauth_issuers is not None:
            pulumi.set(__self__, "external_oauth_issuers", external_oauth_issuers)
        if external_oauth_jws_keys_urls is not None:
            pulumi.set(__self__, "external_oauth_jws_keys_urls", external_oauth_jws_keys_urls)
        if external_oauth_rsa_public_key2s is not None:
            pulumi.set(__self__, "external_oauth_rsa_public_key2s", external_oauth_rsa_public_key2s)
        if external_oauth_rsa_public_keys is not None:
            pulumi.set(__self__, "external_oauth_rsa_public_keys", external_oauth_rsa_public_keys)
        if external_oauth_scope_delimiters is not None:
            pulumi.set(__self__, "external_oauth_scope_delimiters", external_oauth_scope_delimiters)
        if external_oauth_snowflake_user_mapping_attributes is not None:
            pulumi.set(__self__, "external_oauth_snowflake_user_mapping_attributes", external_oauth_snowflake_user_mapping_attributes)
        if external_oauth_token_user_mapping_claims is not None:
            pulumi.set(__self__, "external_oauth_token_user_mapping_claims", external_oauth_token_user_mapping_claims)

    @property
    @pulumi.getter
    def comments(self) -> Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputComment']]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def enableds(self) -> Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputEnabled']]:
        return pulumi.get(self, "enableds")

    @property
    @pulumi.getter(name="externalOauthAllowedRolesLists")
    def external_oauth_allowed_roles_lists(self) -> Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesList']]:
        return pulumi.get(self, "external_oauth_allowed_roles_lists")

    @property
    @pulumi.getter(name="externalOauthAnyRoleModes")
    def external_oauth_any_role_modes(self) -> Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleMode']]:
        return pulumi.get(self, "external_oauth_any_role_modes")

    @property
    @pulumi.getter(name="externalOauthAudienceLists")
    def external_oauth_audience_lists(self) -> Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputExternalOauthAudienceList']]:
        return pulumi.get(self, "external_oauth_audience_lists")

    @property
    @pulumi.getter(name="externalOauthBlockedRolesLists")
    def external_oauth_blocked_roles_lists(self) -> Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesList']]:
        return pulumi.get(self, "external_oauth_blocked_roles_lists")

    @property
    @pulumi.getter(name="externalOauthIssuers")
    def external_oauth_issuers(self) -> Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputExternalOauthIssuer']]:
        return pulumi.get(self, "external_oauth_issuers")

    @property
    @pulumi.getter(name="externalOauthJwsKeysUrls")
    def external_oauth_jws_keys_urls(self) -> Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrl']]:
        return pulumi.get(self, "external_oauth_jws_keys_urls")

    @property
    @pulumi.getter(name="externalOauthRsaPublicKey2s")
    def external_oauth_rsa_public_key2s(self) -> Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2']]:
        return pulumi.get(self, "external_oauth_rsa_public_key2s")

    @property
    @pulumi.getter(name="externalOauthRsaPublicKeys")
    def external_oauth_rsa_public_keys(self) -> Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey']]:
        return pulumi.get(self, "external_oauth_rsa_public_keys")

    @property
    @pulumi.getter(name="externalOauthScopeDelimiters")
    def external_oauth_scope_delimiters(self) -> Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiter']]:
        return pulumi.get(self, "external_oauth_scope_delimiters")

    @property
    @pulumi.getter(name="externalOauthSnowflakeUserMappingAttributes")
    def external_oauth_snowflake_user_mapping_attributes(self) -> Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute']]:
        return pulumi.get(self, "external_oauth_snowflake_user_mapping_attributes")

    @property
    @pulumi.getter(name="externalOauthTokenUserMappingClaims")
    def external_oauth_token_user_mapping_claims(self) -> Optional[Sequence['outputs.ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaim']]:
        return pulumi.get(self, "external_oauth_token_user_mapping_claims")


@pulumi.output_type
class ExternalOauthIntegrationDescribeOutputComment(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ExternalOauthIntegrationDescribeOutputEnabled(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesList(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleMode(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ExternalOauthIntegrationDescribeOutputExternalOauthAudienceList(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesList(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ExternalOauthIntegrationDescribeOutputExternalOauthIssuer(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrl(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiter(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaim(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ExternalOauthIntegrationRelatedParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalOauthAddPrivilegedRolesToBlockedLists":
            suggest = "external_oauth_add_privileged_roles_to_blocked_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalOauthIntegrationRelatedParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalOauthIntegrationRelatedParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalOauthIntegrationRelatedParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_oauth_add_privileged_roles_to_blocked_lists: Optional[Sequence['outputs.ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedList']] = None):
        if external_oauth_add_privileged_roles_to_blocked_lists is not None:
            pulumi.set(__self__, "external_oauth_add_privileged_roles_to_blocked_lists", external_oauth_add_privileged_roles_to_blocked_lists)

    @property
    @pulumi.getter(name="externalOauthAddPrivilegedRolesToBlockedLists")
    def external_oauth_add_privileged_roles_to_blocked_lists(self) -> Optional[Sequence['outputs.ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedList']]:
        return pulumi.get(self, "external_oauth_add_privileged_roles_to_blocked_lists")


@pulumi.output_type
class ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedList(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ExternalOauthIntegrationShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "integrationType":
            suggest = "integration_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalOauthIntegrationShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalOauthIntegrationShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalOauthIntegrationShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 integration_type: Optional[str] = None,
                 name: Optional[str] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if integration_type is not None:
            pulumi.set(__self__, "integration_type", integration_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> Optional[str]:
        return pulumi.get(self, "integration_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ExternalTableColumn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "as":
            suggest = "as_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalTableColumn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalTableColumn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalTableColumn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_: str,
                 name: str,
                 type: str):
        """
        :param str as_: String that specifies the expression for the column. When queried, the column returns results derived from this expression.
        :param str name: Column name
        :param str type: Column type, e.g. VARIANT
        """
        pulumi.set(__self__, "as_", as_)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="as")
    def as_(self) -> str:
        """
        String that specifies the expression for the column. When queried, the column returns results derived from this expression.
        """
        return pulumi.get(self, "as_")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Column name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Column type, e.g. VARIANT
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ExternalTableTag(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param str name: Tag name, e.g. department.
        :param str value: Tag value, e.g. marketing_info.
        :param str database: Name of the database that the tag was created in.
        :param str schema: Name of the schema that the tag was created in.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Tag name, e.g. department.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag value, e.g. marketing_info.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Name of the database that the tag was created in.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Name of the schema that the tag was created in.
        """
        return pulumi.get(self, "schema")


@pulumi.output_type
class ExternalVolumeDescribeOutput(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 parent: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ExternalVolumeShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowWrites":
            suggest = "allow_writes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalVolumeShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalVolumeShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalVolumeShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_writes: Optional[bool] = None,
                 comment: Optional[str] = None,
                 name: Optional[str] = None):
        if allow_writes is not None:
            pulumi.set(__self__, "allow_writes", allow_writes)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="allowWrites")
    def allow_writes(self) -> Optional[bool]:
        return pulumi.get(self, "allow_writes")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ExternalVolumeStorageLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageBaseUrl":
            suggest = "storage_base_url"
        elif key == "storageLocationName":
            suggest = "storage_location_name"
        elif key == "storageProvider":
            suggest = "storage_provider"
        elif key == "azureTenantId":
            suggest = "azure_tenant_id"
        elif key == "encryptionKmsKeyId":
            suggest = "encryption_kms_key_id"
        elif key == "encryptionType":
            suggest = "encryption_type"
        elif key == "storageAwsExternalId":
            suggest = "storage_aws_external_id"
        elif key == "storageAwsRoleArn":
            suggest = "storage_aws_role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalVolumeStorageLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalVolumeStorageLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalVolumeStorageLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage_base_url: str,
                 storage_location_name: str,
                 storage_provider: str,
                 azure_tenant_id: Optional[str] = None,
                 encryption_kms_key_id: Optional[str] = None,
                 encryption_type: Optional[str] = None,
                 storage_aws_external_id: Optional[str] = None,
                 storage_aws_role_arn: Optional[str] = None):
        """
        :param str storage_base_url: Specifies the base URL for your cloud storage location.
        :param str storage_provider: Specifies the cloud storage provider that stores your data files. Valid values are (case-insensitive): `GCS` | `AZURE` | `S3` | `S3GOV`.
        :param str azure_tenant_id: Specifies the ID for your Office 365 tenant that the allowed and blocked storage accounts belong to.
        :param str encryption_kms_key_id: Specifies the ID for the KMS-managed key used to encrypt files.
        :param str encryption_type: Specifies the encryption type used.
        :param str storage_aws_external_id: External ID that Snowflake uses to establish a trust relationship with AWS.
        :param str storage_aws_role_arn: Specifies the case-sensitive Amazon Resource Name (ARN) of the AWS identity and access management (IAM) role that grants privileges on the S3 bucket containing your data files.
        """
        pulumi.set(__self__, "storage_base_url", storage_base_url)
        pulumi.set(__self__, "storage_location_name", storage_location_name)
        pulumi.set(__self__, "storage_provider", storage_provider)
        if azure_tenant_id is not None:
            pulumi.set(__self__, "azure_tenant_id", azure_tenant_id)
        if encryption_kms_key_id is not None:
            pulumi.set(__self__, "encryption_kms_key_id", encryption_kms_key_id)
        if encryption_type is not None:
            pulumi.set(__self__, "encryption_type", encryption_type)
        if storage_aws_external_id is not None:
            pulumi.set(__self__, "storage_aws_external_id", storage_aws_external_id)
        if storage_aws_role_arn is not None:
            pulumi.set(__self__, "storage_aws_role_arn", storage_aws_role_arn)

    @property
    @pulumi.getter(name="storageBaseUrl")
    def storage_base_url(self) -> str:
        """
        Specifies the base URL for your cloud storage location.
        """
        return pulumi.get(self, "storage_base_url")

    @property
    @pulumi.getter(name="storageLocationName")
    def storage_location_name(self) -> str:
        return pulumi.get(self, "storage_location_name")

    @property
    @pulumi.getter(name="storageProvider")
    def storage_provider(self) -> str:
        """
        Specifies the cloud storage provider that stores your data files. Valid values are (case-insensitive): `GCS` | `AZURE` | `S3` | `S3GOV`.
        """
        return pulumi.get(self, "storage_provider")

    @property
    @pulumi.getter(name="azureTenantId")
    def azure_tenant_id(self) -> Optional[str]:
        """
        Specifies the ID for your Office 365 tenant that the allowed and blocked storage accounts belong to.
        """
        return pulumi.get(self, "azure_tenant_id")

    @property
    @pulumi.getter(name="encryptionKmsKeyId")
    def encryption_kms_key_id(self) -> Optional[str]:
        """
        Specifies the ID for the KMS-managed key used to encrypt files.
        """
        return pulumi.get(self, "encryption_kms_key_id")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        """
        Specifies the encryption type used.
        """
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter(name="storageAwsExternalId")
    def storage_aws_external_id(self) -> Optional[str]:
        """
        External ID that Snowflake uses to establish a trust relationship with AWS.
        """
        return pulumi.get(self, "storage_aws_external_id")

    @property
    @pulumi.getter(name="storageAwsRoleArn")
    def storage_aws_role_arn(self) -> Optional[str]:
        """
        Specifies the case-sensitive Amazon Resource Name (ARN) of the AWS identity and access management (IAM) role that grants privileges on the S3 bucket containing your data files.
        """
        return pulumi.get(self, "storage_aws_role_arn")


@pulumi.output_type
class FailoverGroupFromReplica(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "organizationName":
            suggest = "organization_name"
        elif key == "sourceAccountName":
            suggest = "source_account_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FailoverGroupFromReplica. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FailoverGroupFromReplica.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FailoverGroupFromReplica.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 organization_name: str,
                 source_account_name: str):
        """
        :param str name: Identifier for the primary failover group in the source account.
        :param str organization_name: Name of your Snowflake organization.
        :param str source_account_name: Source account from which you are enabling replication and failover of the specified objects.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "source_account_name", source_account_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Identifier for the primary failover group in the source account.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        """
        Name of your Snowflake organization.
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="sourceAccountName")
    def source_account_name(self) -> str:
        """
        Source account from which you are enabling replication and failover of the specified objects.
        """
        return pulumi.get(self, "source_account_name")


@pulumi.output_type
class FailoverGroupReplicationSchedule(dict):
    def __init__(__self__, *,
                 cron: Optional['outputs.FailoverGroupReplicationScheduleCron'] = None,
                 interval: Optional[int] = None):
        """
        :param 'FailoverGroupReplicationScheduleCronArgs' cron: Specifies the cron expression for the replication schedule. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
        :param int interval: Specifies the interval in minutes for the replication schedule. The interval must be greater than 0 and less than 1440 (24 hours).
        """
        if cron is not None:
            pulumi.set(__self__, "cron", cron)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def cron(self) -> Optional['outputs.FailoverGroupReplicationScheduleCron']:
        """
        Specifies the cron expression for the replication schedule. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
        """
        return pulumi.get(self, "cron")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        Specifies the interval in minutes for the replication schedule. The interval must be greater than 0 and less than 1440 (24 hours).
        """
        return pulumi.get(self, "interval")


@pulumi.output_type
class FailoverGroupReplicationScheduleCron(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FailoverGroupReplicationScheduleCron. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FailoverGroupReplicationScheduleCron.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FailoverGroupReplicationScheduleCron.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: str,
                 time_zone: str):
        """
        :param str expression: Specifies the cron expression for the replication schedule. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
        :param str time_zone: Specifies the time zone for secondary group refresh.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Specifies the cron expression for the replication schedule. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> str:
        """
        Specifies the time zone for secondary group refresh.
        """
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class FunctionArgument(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str):
        """
        :param str name: The argument name
        :param str type: The argument type
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The argument name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The argument type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GrantOwnershipOn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectName":
            suggest = "object_name"
        elif key == "objectType":
            suggest = "object_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GrantOwnershipOn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GrantOwnershipOn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GrantOwnershipOn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 all: Optional['outputs.GrantOwnershipOnAll'] = None,
                 future: Optional['outputs.GrantOwnershipOnFuture'] = None,
                 object_name: Optional[str] = None,
                 object_type: Optional[str] = None):
        """
        :param 'GrantOwnershipOnAllArgs' all: Configures the privilege to be granted on all objects in either a database or schema.
        :param 'GrantOwnershipOnFutureArgs' future: Configures the privilege to be granted on all objects in either a database or schema.
        :param str object_name: Specifies the identifier for the object on which you are transferring ownership.
        :param str object_type: Specifies the type of object on which you are transferring ownership. Available values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | COMPUTE POOL | DATA METRIC FUNCTION | DATABASE | DATABASE ROLE | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | EXTERNAL VOLUME | FAILOVER GROUP | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | ICEBERG TABLE | IMAGE REPOSITORY | INTEGRATION | MATERIALIZED VIEW | NETWORK POLICY | NETWORK RULE | PACKAGES POLICY | PIPE | PROCEDURE | MASKING POLICY | PASSWORD POLICY | PROJECTION POLICY | REPLICATION GROUP | ROLE | ROW ACCESS POLICY | SCHEMA | SESSION POLICY | SECRET | SEQUENCE | STAGE | STREAM | TABLE | TAG | TASK | USER | VIEW | WAREHOUSE
        """
        if all is not None:
            pulumi.set(__self__, "all", all)
        if future is not None:
            pulumi.set(__self__, "future", future)
        if object_name is not None:
            pulumi.set(__self__, "object_name", object_name)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter
    def all(self) -> Optional['outputs.GrantOwnershipOnAll']:
        """
        Configures the privilege to be granted on all objects in either a database or schema.
        """
        return pulumi.get(self, "all")

    @property
    @pulumi.getter
    def future(self) -> Optional['outputs.GrantOwnershipOnFuture']:
        """
        Configures the privilege to be granted on all objects in either a database or schema.
        """
        return pulumi.get(self, "future")

    @property
    @pulumi.getter(name="objectName")
    def object_name(self) -> Optional[str]:
        """
        Specifies the identifier for the object on which you are transferring ownership.
        """
        return pulumi.get(self, "object_name")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        """
        Specifies the type of object on which you are transferring ownership. Available values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | COMPUTE POOL | DATA METRIC FUNCTION | DATABASE | DATABASE ROLE | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | EXTERNAL VOLUME | FAILOVER GROUP | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | ICEBERG TABLE | IMAGE REPOSITORY | INTEGRATION | MATERIALIZED VIEW | NETWORK POLICY | NETWORK RULE | PACKAGES POLICY | PIPE | PROCEDURE | MASKING POLICY | PASSWORD POLICY | PROJECTION POLICY | REPLICATION GROUP | ROLE | ROW ACCESS POLICY | SCHEMA | SESSION POLICY | SECRET | SEQUENCE | STAGE | STREAM | TABLE | TAG | TASK | USER | VIEW | WAREHOUSE
        """
        return pulumi.get(self, "object_type")


@pulumi.output_type
class GrantOwnershipOnAll(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectTypePlural":
            suggest = "object_type_plural"
        elif key == "inDatabase":
            suggest = "in_database"
        elif key == "inSchema":
            suggest = "in_schema"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GrantOwnershipOnAll. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GrantOwnershipOnAll.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GrantOwnershipOnAll.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_type_plural: str,
                 in_database: Optional[str] = None,
                 in_schema: Optional[str] = None):
        """
        :param str object_type_plural: Specifies the type of object in plural form on which you are transferring ownership. Available values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | COMPUTE POOLS | DATA METRIC FUNCTIONS | DATABASES | DATABASE ROLES | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | EXTERNAL VOLUMES | FAILOVER GROUPS | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | IMAGE REPOSITORIES | INTEGRATIONS | MATERIALIZED VIEWS | NETWORK POLICIES | NETWORK RULES | PACKAGES POLICIES | PIPES | PROCEDURES | MASKING POLICIES | PASSWORD POLICIES | PROJECTION POLICIES | REPLICATION GROUPS | ROLES | ROW ACCESS POLICIES | SCHEMAS | SESSION POLICIES | SECRETS | SEQUENCES | STAGES | STREAMS | TABLES | TAGS | TASKS | USERS | VIEWS | WAREHOUSES. For more information head over to [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#required-parameters).
        :param str in_database: The fully qualified name of the database.
        :param str in_schema: The fully qualified name of the schema.
        """
        pulumi.set(__self__, "object_type_plural", object_type_plural)
        if in_database is not None:
            pulumi.set(__self__, "in_database", in_database)
        if in_schema is not None:
            pulumi.set(__self__, "in_schema", in_schema)

    @property
    @pulumi.getter(name="objectTypePlural")
    def object_type_plural(self) -> str:
        """
        Specifies the type of object in plural form on which you are transferring ownership. Available values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | COMPUTE POOLS | DATA METRIC FUNCTIONS | DATABASES | DATABASE ROLES | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | EXTERNAL VOLUMES | FAILOVER GROUPS | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | IMAGE REPOSITORIES | INTEGRATIONS | MATERIALIZED VIEWS | NETWORK POLICIES | NETWORK RULES | PACKAGES POLICIES | PIPES | PROCEDURES | MASKING POLICIES | PASSWORD POLICIES | PROJECTION POLICIES | REPLICATION GROUPS | ROLES | ROW ACCESS POLICIES | SCHEMAS | SESSION POLICIES | SECRETS | SEQUENCES | STAGES | STREAMS | TABLES | TAGS | TASKS | USERS | VIEWS | WAREHOUSES. For more information head over to [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#required-parameters).
        """
        return pulumi.get(self, "object_type_plural")

    @property
    @pulumi.getter(name="inDatabase")
    def in_database(self) -> Optional[str]:
        """
        The fully qualified name of the database.
        """
        return pulumi.get(self, "in_database")

    @property
    @pulumi.getter(name="inSchema")
    def in_schema(self) -> Optional[str]:
        """
        The fully qualified name of the schema.
        """
        return pulumi.get(self, "in_schema")


@pulumi.output_type
class GrantOwnershipOnFuture(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectTypePlural":
            suggest = "object_type_plural"
        elif key == "inDatabase":
            suggest = "in_database"
        elif key == "inSchema":
            suggest = "in_schema"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GrantOwnershipOnFuture. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GrantOwnershipOnFuture.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GrantOwnershipOnFuture.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_type_plural: str,
                 in_database: Optional[str] = None,
                 in_schema: Optional[str] = None):
        """
        :param str object_type_plural: Specifies the type of object in plural form on which you are transferring ownership. Available values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | COMPUTE POOLS | DATA METRIC FUNCTIONS | DATABASES | DATABASE ROLES | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | EXTERNAL VOLUMES | FAILOVER GROUPS | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | IMAGE REPOSITORIES | INTEGRATIONS | MATERIALIZED VIEWS | NETWORK POLICIES | NETWORK RULES | PACKAGES POLICIES | PIPES | PROCEDURES | MASKING POLICIES | PASSWORD POLICIES | PROJECTION POLICIES | REPLICATION GROUPS | ROLES | ROW ACCESS POLICIES | SCHEMAS | SESSION POLICIES | SECRETS | SEQUENCES | STAGES | STREAMS | TABLES | TAGS | TASKS | USERS | VIEWS | WAREHOUSES. For more information head over to [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#required-parameters).
        :param str in_database: The fully qualified name of the database.
        :param str in_schema: The fully qualified name of the schema.
        """
        pulumi.set(__self__, "object_type_plural", object_type_plural)
        if in_database is not None:
            pulumi.set(__self__, "in_database", in_database)
        if in_schema is not None:
            pulumi.set(__self__, "in_schema", in_schema)

    @property
    @pulumi.getter(name="objectTypePlural")
    def object_type_plural(self) -> str:
        """
        Specifies the type of object in plural form on which you are transferring ownership. Available values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | COMPUTE POOLS | DATA METRIC FUNCTIONS | DATABASES | DATABASE ROLES | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | EXTERNAL VOLUMES | FAILOVER GROUPS | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | IMAGE REPOSITORIES | INTEGRATIONS | MATERIALIZED VIEWS | NETWORK POLICIES | NETWORK RULES | PACKAGES POLICIES | PIPES | PROCEDURES | MASKING POLICIES | PASSWORD POLICIES | PROJECTION POLICIES | REPLICATION GROUPS | ROLES | ROW ACCESS POLICIES | SCHEMAS | SESSION POLICIES | SECRETS | SEQUENCES | STAGES | STREAMS | TABLES | TAGS | TASKS | USERS | VIEWS | WAREHOUSES. For more information head over to [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#required-parameters).
        """
        return pulumi.get(self, "object_type_plural")

    @property
    @pulumi.getter(name="inDatabase")
    def in_database(self) -> Optional[str]:
        """
        The fully qualified name of the database.
        """
        return pulumi.get(self, "in_database")

    @property
    @pulumi.getter(name="inSchema")
    def in_schema(self) -> Optional[str]:
        """
        The fully qualified name of the schema.
        """
        return pulumi.get(self, "in_schema")


@pulumi.output_type
class GrantPrivilegesToAccountRoleOnAccountObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectName":
            suggest = "object_name"
        elif key == "objectType":
            suggest = "object_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GrantPrivilegesToAccountRoleOnAccountObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GrantPrivilegesToAccountRoleOnAccountObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GrantPrivilegesToAccountRoleOnAccountObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_name: str,
                 object_type: str):
        """
        :param str object_name: The fully qualified name of the object on which privileges will be granted.
        :param str object_type: The object type of the account object on which privileges will be granted. Valid values are: USER | RESOURCE MONITOR | WAREHOUSE | COMPUTE POOL | DATABASE | INTEGRATION | FAILOVER GROUP | REPLICATION GROUP | EXTERNAL VOLUME
        """
        pulumi.set(__self__, "object_name", object_name)
        pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectName")
    def object_name(self) -> str:
        """
        The fully qualified name of the object on which privileges will be granted.
        """
        return pulumi.get(self, "object_name")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        """
        The object type of the account object on which privileges will be granted. Valid values are: USER | RESOURCE MONITOR | WAREHOUSE | COMPUTE POOL | DATABASE | INTEGRATION | FAILOVER GROUP | REPLICATION GROUP | EXTERNAL VOLUME
        """
        return pulumi.get(self, "object_type")


@pulumi.output_type
class GrantPrivilegesToAccountRoleOnSchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allSchemasInDatabase":
            suggest = "all_schemas_in_database"
        elif key == "futureSchemasInDatabase":
            suggest = "future_schemas_in_database"
        elif key == "schemaName":
            suggest = "schema_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GrantPrivilegesToAccountRoleOnSchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GrantPrivilegesToAccountRoleOnSchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GrantPrivilegesToAccountRoleOnSchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 all_schemas_in_database: Optional[str] = None,
                 future_schemas_in_database: Optional[str] = None,
                 schema_name: Optional[str] = None):
        """
        :param str all_schemas_in_database: The fully qualified name of the database.
        :param str future_schemas_in_database: The fully qualified name of the database.
        :param str schema_name: The fully qualified name of the schema.
        """
        if all_schemas_in_database is not None:
            pulumi.set(__self__, "all_schemas_in_database", all_schemas_in_database)
        if future_schemas_in_database is not None:
            pulumi.set(__self__, "future_schemas_in_database", future_schemas_in_database)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="allSchemasInDatabase")
    def all_schemas_in_database(self) -> Optional[str]:
        """
        The fully qualified name of the database.
        """
        return pulumi.get(self, "all_schemas_in_database")

    @property
    @pulumi.getter(name="futureSchemasInDatabase")
    def future_schemas_in_database(self) -> Optional[str]:
        """
        The fully qualified name of the database.
        """
        return pulumi.get(self, "future_schemas_in_database")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        """
        The fully qualified name of the schema.
        """
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GrantPrivilegesToAccountRoleOnSchemaObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectName":
            suggest = "object_name"
        elif key == "objectType":
            suggest = "object_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GrantPrivilegesToAccountRoleOnSchemaObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GrantPrivilegesToAccountRoleOnSchemaObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GrantPrivilegesToAccountRoleOnSchemaObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 all: Optional['outputs.GrantPrivilegesToAccountRoleOnSchemaObjectAll'] = None,
                 future: Optional['outputs.GrantPrivilegesToAccountRoleOnSchemaObjectFuture'] = None,
                 object_name: Optional[str] = None,
                 object_type: Optional[str] = None):
        """
        :param 'GrantPrivilegesToAccountRoleOnSchemaObjectAllArgs' all: Configures the privilege to be granted on all objects in either a database or schema.
        :param 'GrantPrivilegesToAccountRoleOnSchemaObjectFutureArgs' future: Configures the privilege to be granted on future objects in either a database or schema.
        :param str object_name: The fully qualified name of the object on which privileges will be granted.
        :param str object_type: The object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | CORTEX SEARCH SERVICE | DATA METRIC FUNCTION | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | IMAGE REPOSITORY | ICEBERG TABLE | MASKING POLICY | MATERIALIZED VIEW | MODEL | NETWORK RULE | NOTEBOOK | PACKAGES POLICY | PASSWORD POLICY | PIPE | PROCEDURE | PROJECTION POLICY | ROW ACCESS POLICY | SECRET | SERVICE | SESSION POLICY | SEQUENCE | SNAPSHOT | STAGE | STREAM | TABLE | TAG | TASK | VIEW | STREAMLIT | DATASET
        """
        if all is not None:
            pulumi.set(__self__, "all", all)
        if future is not None:
            pulumi.set(__self__, "future", future)
        if object_name is not None:
            pulumi.set(__self__, "object_name", object_name)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter
    def all(self) -> Optional['outputs.GrantPrivilegesToAccountRoleOnSchemaObjectAll']:
        """
        Configures the privilege to be granted on all objects in either a database or schema.
        """
        return pulumi.get(self, "all")

    @property
    @pulumi.getter
    def future(self) -> Optional['outputs.GrantPrivilegesToAccountRoleOnSchemaObjectFuture']:
        """
        Configures the privilege to be granted on future objects in either a database or schema.
        """
        return pulumi.get(self, "future")

    @property
    @pulumi.getter(name="objectName")
    def object_name(self) -> Optional[str]:
        """
        The fully qualified name of the object on which privileges will be granted.
        """
        return pulumi.get(self, "object_name")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        """
        The object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | CORTEX SEARCH SERVICE | DATA METRIC FUNCTION | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | IMAGE REPOSITORY | ICEBERG TABLE | MASKING POLICY | MATERIALIZED VIEW | MODEL | NETWORK RULE | NOTEBOOK | PACKAGES POLICY | PASSWORD POLICY | PIPE | PROCEDURE | PROJECTION POLICY | ROW ACCESS POLICY | SECRET | SERVICE | SESSION POLICY | SEQUENCE | SNAPSHOT | STAGE | STREAM | TABLE | TAG | TASK | VIEW | STREAMLIT | DATASET
        """
        return pulumi.get(self, "object_type")


@pulumi.output_type
class GrantPrivilegesToAccountRoleOnSchemaObjectAll(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectTypePlural":
            suggest = "object_type_plural"
        elif key == "inDatabase":
            suggest = "in_database"
        elif key == "inSchema":
            suggest = "in_schema"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GrantPrivilegesToAccountRoleOnSchemaObjectAll. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GrantPrivilegesToAccountRoleOnSchemaObjectAll.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GrantPrivilegesToAccountRoleOnSchemaObjectAll.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_type_plural: str,
                 in_database: Optional[str] = None,
                 in_schema: Optional[str] = None):
        """
        :param str object_type_plural: The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.
        """
        pulumi.set(__self__, "object_type_plural", object_type_plural)
        if in_database is not None:
            pulumi.set(__self__, "in_database", in_database)
        if in_schema is not None:
            pulumi.set(__self__, "in_schema", in_schema)

    @property
    @pulumi.getter(name="objectTypePlural")
    def object_type_plural(self) -> str:
        """
        The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.
        """
        return pulumi.get(self, "object_type_plural")

    @property
    @pulumi.getter(name="inDatabase")
    def in_database(self) -> Optional[str]:
        return pulumi.get(self, "in_database")

    @property
    @pulumi.getter(name="inSchema")
    def in_schema(self) -> Optional[str]:
        return pulumi.get(self, "in_schema")


@pulumi.output_type
class GrantPrivilegesToAccountRoleOnSchemaObjectFuture(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectTypePlural":
            suggest = "object_type_plural"
        elif key == "inDatabase":
            suggest = "in_database"
        elif key == "inSchema":
            suggest = "in_schema"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GrantPrivilegesToAccountRoleOnSchemaObjectFuture. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GrantPrivilegesToAccountRoleOnSchemaObjectFuture.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GrantPrivilegesToAccountRoleOnSchemaObjectFuture.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_type_plural: str,
                 in_database: Optional[str] = None,
                 in_schema: Optional[str] = None):
        """
        :param str object_type_plural: The plural object type of the schema object on which privileges will be granted. Valid values are: ALERTS | AUTHENTICATION POLICIES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PASSWORD POLICIES | PIPES | PROCEDURES | SECRETS | SERVICES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TASKS | VIEWS | DATASETS.
        """
        pulumi.set(__self__, "object_type_plural", object_type_plural)
        if in_database is not None:
            pulumi.set(__self__, "in_database", in_database)
        if in_schema is not None:
            pulumi.set(__self__, "in_schema", in_schema)

    @property
    @pulumi.getter(name="objectTypePlural")
    def object_type_plural(self) -> str:
        """
        The plural object type of the schema object on which privileges will be granted. Valid values are: ALERTS | AUTHENTICATION POLICIES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PASSWORD POLICIES | PIPES | PROCEDURES | SECRETS | SERVICES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TASKS | VIEWS | DATASETS.
        """
        return pulumi.get(self, "object_type_plural")

    @property
    @pulumi.getter(name="inDatabase")
    def in_database(self) -> Optional[str]:
        return pulumi.get(self, "in_database")

    @property
    @pulumi.getter(name="inSchema")
    def in_schema(self) -> Optional[str]:
        return pulumi.get(self, "in_schema")


@pulumi.output_type
class GrantPrivilegesToDatabaseRoleOnSchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allSchemasInDatabase":
            suggest = "all_schemas_in_database"
        elif key == "futureSchemasInDatabase":
            suggest = "future_schemas_in_database"
        elif key == "schemaName":
            suggest = "schema_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GrantPrivilegesToDatabaseRoleOnSchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GrantPrivilegesToDatabaseRoleOnSchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GrantPrivilegesToDatabaseRoleOnSchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 all_schemas_in_database: Optional[str] = None,
                 future_schemas_in_database: Optional[str] = None,
                 schema_name: Optional[str] = None):
        """
        :param str all_schemas_in_database: The fully qualified name of the database.
        :param str future_schemas_in_database: The fully qualified name of the database.
        :param str schema_name: The fully qualified name of the schema.
        """
        if all_schemas_in_database is not None:
            pulumi.set(__self__, "all_schemas_in_database", all_schemas_in_database)
        if future_schemas_in_database is not None:
            pulumi.set(__self__, "future_schemas_in_database", future_schemas_in_database)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="allSchemasInDatabase")
    def all_schemas_in_database(self) -> Optional[str]:
        """
        The fully qualified name of the database.
        """
        return pulumi.get(self, "all_schemas_in_database")

    @property
    @pulumi.getter(name="futureSchemasInDatabase")
    def future_schemas_in_database(self) -> Optional[str]:
        """
        The fully qualified name of the database.
        """
        return pulumi.get(self, "future_schemas_in_database")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        """
        The fully qualified name of the schema.
        """
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GrantPrivilegesToDatabaseRoleOnSchemaObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectName":
            suggest = "object_name"
        elif key == "objectType":
            suggest = "object_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GrantPrivilegesToDatabaseRoleOnSchemaObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GrantPrivilegesToDatabaseRoleOnSchemaObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GrantPrivilegesToDatabaseRoleOnSchemaObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 all: Optional['outputs.GrantPrivilegesToDatabaseRoleOnSchemaObjectAll'] = None,
                 future: Optional['outputs.GrantPrivilegesToDatabaseRoleOnSchemaObjectFuture'] = None,
                 object_name: Optional[str] = None,
                 object_type: Optional[str] = None):
        """
        :param 'GrantPrivilegesToDatabaseRoleOnSchemaObjectAllArgs' all: Configures the privilege to be granted on all objects in either a database or schema.
        :param 'GrantPrivilegesToDatabaseRoleOnSchemaObjectFutureArgs' future: Configures the privilege to be granted on future objects in either a database or schema.
        :param str object_name: The fully qualified name of the object on which privileges will be granted.
        :param str object_type: The object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | CORTEX SEARCH SERVICE | DATA METRIC FUNCTION | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | IMAGE REPOSITORY | ICEBERG TABLE | MASKING POLICY | MATERIALIZED VIEW | MODEL | NETWORK RULE | NOTEBOOK | PACKAGES POLICY | PASSWORD POLICY | PIPE | PROCEDURE | PROJECTION POLICY | ROW ACCESS POLICY | SECRET | SERVICE | SESSION POLICY | SEQUENCE | SNAPSHOT | STAGE | STREAM | TABLE | TAG | TASK | VIEW | STREAMLIT | DATASET
        """
        if all is not None:
            pulumi.set(__self__, "all", all)
        if future is not None:
            pulumi.set(__self__, "future", future)
        if object_name is not None:
            pulumi.set(__self__, "object_name", object_name)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter
    def all(self) -> Optional['outputs.GrantPrivilegesToDatabaseRoleOnSchemaObjectAll']:
        """
        Configures the privilege to be granted on all objects in either a database or schema.
        """
        return pulumi.get(self, "all")

    @property
    @pulumi.getter
    def future(self) -> Optional['outputs.GrantPrivilegesToDatabaseRoleOnSchemaObjectFuture']:
        """
        Configures the privilege to be granted on future objects in either a database or schema.
        """
        return pulumi.get(self, "future")

    @property
    @pulumi.getter(name="objectName")
    def object_name(self) -> Optional[str]:
        """
        The fully qualified name of the object on which privileges will be granted.
        """
        return pulumi.get(self, "object_name")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        """
        The object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | CORTEX SEARCH SERVICE | DATA METRIC FUNCTION | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | IMAGE REPOSITORY | ICEBERG TABLE | MASKING POLICY | MATERIALIZED VIEW | MODEL | NETWORK RULE | NOTEBOOK | PACKAGES POLICY | PASSWORD POLICY | PIPE | PROCEDURE | PROJECTION POLICY | ROW ACCESS POLICY | SECRET | SERVICE | SESSION POLICY | SEQUENCE | SNAPSHOT | STAGE | STREAM | TABLE | TAG | TASK | VIEW | STREAMLIT | DATASET
        """
        return pulumi.get(self, "object_type")


@pulumi.output_type
class GrantPrivilegesToDatabaseRoleOnSchemaObjectAll(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectTypePlural":
            suggest = "object_type_plural"
        elif key == "inDatabase":
            suggest = "in_database"
        elif key == "inSchema":
            suggest = "in_schema"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GrantPrivilegesToDatabaseRoleOnSchemaObjectAll. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GrantPrivilegesToDatabaseRoleOnSchemaObjectAll.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GrantPrivilegesToDatabaseRoleOnSchemaObjectAll.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_type_plural: str,
                 in_database: Optional[str] = None,
                 in_schema: Optional[str] = None):
        """
        :param str object_type_plural: The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.
        :param str in_database: The fully qualified name of the database.
        :param str in_schema: The fully qualified name of the schema.
        """
        pulumi.set(__self__, "object_type_plural", object_type_plural)
        if in_database is not None:
            pulumi.set(__self__, "in_database", in_database)
        if in_schema is not None:
            pulumi.set(__self__, "in_schema", in_schema)

    @property
    @pulumi.getter(name="objectTypePlural")
    def object_type_plural(self) -> str:
        """
        The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.
        """
        return pulumi.get(self, "object_type_plural")

    @property
    @pulumi.getter(name="inDatabase")
    def in_database(self) -> Optional[str]:
        """
        The fully qualified name of the database.
        """
        return pulumi.get(self, "in_database")

    @property
    @pulumi.getter(name="inSchema")
    def in_schema(self) -> Optional[str]:
        """
        The fully qualified name of the schema.
        """
        return pulumi.get(self, "in_schema")


@pulumi.output_type
class GrantPrivilegesToDatabaseRoleOnSchemaObjectFuture(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectTypePlural":
            suggest = "object_type_plural"
        elif key == "inDatabase":
            suggest = "in_database"
        elif key == "inSchema":
            suggest = "in_schema"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GrantPrivilegesToDatabaseRoleOnSchemaObjectFuture. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GrantPrivilegesToDatabaseRoleOnSchemaObjectFuture.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GrantPrivilegesToDatabaseRoleOnSchemaObjectFuture.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_type_plural: str,
                 in_database: Optional[str] = None,
                 in_schema: Optional[str] = None):
        """
        :param str object_type_plural: The plural object type of the schema object on which privileges will be granted. Valid values are: ALERTS | AUTHENTICATION POLICIES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PASSWORD POLICIES | PIPES | PROCEDURES | SECRETS | SERVICES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TASKS | VIEWS | DATASETS.
        :param str in_database: The fully qualified name of the database.
        :param str in_schema: The fully qualified name of the schema.
        """
        pulumi.set(__self__, "object_type_plural", object_type_plural)
        if in_database is not None:
            pulumi.set(__self__, "in_database", in_database)
        if in_schema is not None:
            pulumi.set(__self__, "in_schema", in_schema)

    @property
    @pulumi.getter(name="objectTypePlural")
    def object_type_plural(self) -> str:
        """
        The plural object type of the schema object on which privileges will be granted. Valid values are: ALERTS | AUTHENTICATION POLICIES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PASSWORD POLICIES | PIPES | PROCEDURES | SECRETS | SERVICES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TASKS | VIEWS | DATASETS.
        """
        return pulumi.get(self, "object_type_plural")

    @property
    @pulumi.getter(name="inDatabase")
    def in_database(self) -> Optional[str]:
        """
        The fully qualified name of the database.
        """
        return pulumi.get(self, "in_database")

    @property
    @pulumi.getter(name="inSchema")
    def in_schema(self) -> Optional[str]:
        """
        The fully qualified name of the schema.
        """
        return pulumi.get(self, "in_schema")


@pulumi.output_type
class LegacyServiceUserParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "abortDetachedQueries":
            suggest = "abort_detached_queries"
        elif key == "binaryInputFormats":
            suggest = "binary_input_formats"
        elif key == "binaryOutputFormats":
            suggest = "binary_output_formats"
        elif key == "clientMemoryLimits":
            suggest = "client_memory_limits"
        elif key == "clientMetadataRequestUseConnectionCtxes":
            suggest = "client_metadata_request_use_connection_ctxes"
        elif key == "clientPrefetchThreads":
            suggest = "client_prefetch_threads"
        elif key == "clientResultChunkSizes":
            suggest = "client_result_chunk_sizes"
        elif key == "clientResultColumnCaseInsensitives":
            suggest = "client_result_column_case_insensitives"
        elif key == "clientSessionKeepAliveHeartbeatFrequencies":
            suggest = "client_session_keep_alive_heartbeat_frequencies"
        elif key == "clientSessionKeepAlives":
            suggest = "client_session_keep_alives"
        elif key == "clientTimestampTypeMappings":
            suggest = "client_timestamp_type_mappings"
        elif key == "dateInputFormats":
            suggest = "date_input_formats"
        elif key == "dateOutputFormats":
            suggest = "date_output_formats"
        elif key == "enableUnloadPhysicalTypeOptimizations":
            suggest = "enable_unload_physical_type_optimizations"
        elif key == "enableUnredactedQuerySyntaxErrors":
            suggest = "enable_unredacted_query_syntax_errors"
        elif key == "errorOnNondeterministicMerges":
            suggest = "error_on_nondeterministic_merges"
        elif key == "errorOnNondeterministicUpdates":
            suggest = "error_on_nondeterministic_updates"
        elif key == "geographyOutputFormats":
            suggest = "geography_output_formats"
        elif key == "geometryOutputFormats":
            suggest = "geometry_output_formats"
        elif key == "jdbcTreatDecimalAsInts":
            suggest = "jdbc_treat_decimal_as_ints"
        elif key == "jdbcTreatTimestampNtzAsUtcs":
            suggest = "jdbc_treat_timestamp_ntz_as_utcs"
        elif key == "jdbcUseSessionTimezones":
            suggest = "jdbc_use_session_timezones"
        elif key == "jsonIndents":
            suggest = "json_indents"
        elif key == "lockTimeouts":
            suggest = "lock_timeouts"
        elif key == "logLevels":
            suggest = "log_levels"
        elif key == "multiStatementCounts":
            suggest = "multi_statement_counts"
        elif key == "networkPolicies":
            suggest = "network_policies"
        elif key == "noorderSequenceAsDefaults":
            suggest = "noorder_sequence_as_defaults"
        elif key == "odbcTreatDecimalAsInts":
            suggest = "odbc_treat_decimal_as_ints"
        elif key == "preventUnloadToInternalStages":
            suggest = "prevent_unload_to_internal_stages"
        elif key == "queryTags":
            suggest = "query_tags"
        elif key == "quotedIdentifiersIgnoreCases":
            suggest = "quoted_identifiers_ignore_cases"
        elif key == "rowsPerResultsets":
            suggest = "rows_per_resultsets"
        elif key == "s3StageVpceDnsNames":
            suggest = "s3_stage_vpce_dns_names"
        elif key == "searchPaths":
            suggest = "search_paths"
        elif key == "simulatedDataSharingConsumers":
            suggest = "simulated_data_sharing_consumers"
        elif key == "statementQueuedTimeoutInSeconds":
            suggest = "statement_queued_timeout_in_seconds"
        elif key == "statementTimeoutInSeconds":
            suggest = "statement_timeout_in_seconds"
        elif key == "strictJsonOutputs":
            suggest = "strict_json_outputs"
        elif key == "timeInputFormats":
            suggest = "time_input_formats"
        elif key == "timeOutputFormats":
            suggest = "time_output_formats"
        elif key == "timestampDayIsAlways24hs":
            suggest = "timestamp_day_is_always24hs"
        elif key == "timestampInputFormats":
            suggest = "timestamp_input_formats"
        elif key == "timestampLtzOutputFormats":
            suggest = "timestamp_ltz_output_formats"
        elif key == "timestampNtzOutputFormats":
            suggest = "timestamp_ntz_output_formats"
        elif key == "timestampOutputFormats":
            suggest = "timestamp_output_formats"
        elif key == "timestampTypeMappings":
            suggest = "timestamp_type_mappings"
        elif key == "timestampTzOutputFormats":
            suggest = "timestamp_tz_output_formats"
        elif key == "traceLevels":
            suggest = "trace_levels"
        elif key == "transactionAbortOnErrors":
            suggest = "transaction_abort_on_errors"
        elif key == "transactionDefaultIsolationLevels":
            suggest = "transaction_default_isolation_levels"
        elif key == "twoDigitCenturyStarts":
            suggest = "two_digit_century_starts"
        elif key == "unsupportedDdlActions":
            suggest = "unsupported_ddl_actions"
        elif key == "useCachedResults":
            suggest = "use_cached_results"
        elif key == "weekOfYearPolicies":
            suggest = "week_of_year_policies"
        elif key == "weekStarts":
            suggest = "week_starts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LegacyServiceUserParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LegacyServiceUserParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LegacyServiceUserParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 abort_detached_queries: Optional[Sequence['outputs.LegacyServiceUserParameterAbortDetachedQuery']] = None,
                 autocommits: Optional[Sequence['outputs.LegacyServiceUserParameterAutocommit']] = None,
                 binary_input_formats: Optional[Sequence['outputs.LegacyServiceUserParameterBinaryInputFormat']] = None,
                 binary_output_formats: Optional[Sequence['outputs.LegacyServiceUserParameterBinaryOutputFormat']] = None,
                 client_memory_limits: Optional[Sequence['outputs.LegacyServiceUserParameterClientMemoryLimit']] = None,
                 client_metadata_request_use_connection_ctxes: Optional[Sequence['outputs.LegacyServiceUserParameterClientMetadataRequestUseConnectionCtx']] = None,
                 client_prefetch_threads: Optional[Sequence['outputs.LegacyServiceUserParameterClientPrefetchThread']] = None,
                 client_result_chunk_sizes: Optional[Sequence['outputs.LegacyServiceUserParameterClientResultChunkSize']] = None,
                 client_result_column_case_insensitives: Optional[Sequence['outputs.LegacyServiceUserParameterClientResultColumnCaseInsensitive']] = None,
                 client_session_keep_alive_heartbeat_frequencies: Optional[Sequence['outputs.LegacyServiceUserParameterClientSessionKeepAliveHeartbeatFrequency']] = None,
                 client_session_keep_alives: Optional[Sequence['outputs.LegacyServiceUserParameterClientSessionKeepAlife']] = None,
                 client_timestamp_type_mappings: Optional[Sequence['outputs.LegacyServiceUserParameterClientTimestampTypeMapping']] = None,
                 date_input_formats: Optional[Sequence['outputs.LegacyServiceUserParameterDateInputFormat']] = None,
                 date_output_formats: Optional[Sequence['outputs.LegacyServiceUserParameterDateOutputFormat']] = None,
                 enable_unload_physical_type_optimizations: Optional[Sequence['outputs.LegacyServiceUserParameterEnableUnloadPhysicalTypeOptimization']] = None,
                 enable_unredacted_query_syntax_errors: Optional[Sequence['outputs.LegacyServiceUserParameterEnableUnredactedQuerySyntaxError']] = None,
                 error_on_nondeterministic_merges: Optional[Sequence['outputs.LegacyServiceUserParameterErrorOnNondeterministicMerge']] = None,
                 error_on_nondeterministic_updates: Optional[Sequence['outputs.LegacyServiceUserParameterErrorOnNondeterministicUpdate']] = None,
                 geography_output_formats: Optional[Sequence['outputs.LegacyServiceUserParameterGeographyOutputFormat']] = None,
                 geometry_output_formats: Optional[Sequence['outputs.LegacyServiceUserParameterGeometryOutputFormat']] = None,
                 jdbc_treat_decimal_as_ints: Optional[Sequence['outputs.LegacyServiceUserParameterJdbcTreatDecimalAsInt']] = None,
                 jdbc_treat_timestamp_ntz_as_utcs: Optional[Sequence['outputs.LegacyServiceUserParameterJdbcTreatTimestampNtzAsUtc']] = None,
                 jdbc_use_session_timezones: Optional[Sequence['outputs.LegacyServiceUserParameterJdbcUseSessionTimezone']] = None,
                 json_indents: Optional[Sequence['outputs.LegacyServiceUserParameterJsonIndent']] = None,
                 lock_timeouts: Optional[Sequence['outputs.LegacyServiceUserParameterLockTimeout']] = None,
                 log_levels: Optional[Sequence['outputs.LegacyServiceUserParameterLogLevel']] = None,
                 multi_statement_counts: Optional[Sequence['outputs.LegacyServiceUserParameterMultiStatementCount']] = None,
                 network_policies: Optional[Sequence['outputs.LegacyServiceUserParameterNetworkPolicy']] = None,
                 noorder_sequence_as_defaults: Optional[Sequence['outputs.LegacyServiceUserParameterNoorderSequenceAsDefault']] = None,
                 odbc_treat_decimal_as_ints: Optional[Sequence['outputs.LegacyServiceUserParameterOdbcTreatDecimalAsInt']] = None,
                 prevent_unload_to_internal_stages: Optional[Sequence['outputs.LegacyServiceUserParameterPreventUnloadToInternalStage']] = None,
                 query_tags: Optional[Sequence['outputs.LegacyServiceUserParameterQueryTag']] = None,
                 quoted_identifiers_ignore_cases: Optional[Sequence['outputs.LegacyServiceUserParameterQuotedIdentifiersIgnoreCase']] = None,
                 rows_per_resultsets: Optional[Sequence['outputs.LegacyServiceUserParameterRowsPerResultset']] = None,
                 s3_stage_vpce_dns_names: Optional[Sequence['outputs.LegacyServiceUserParameterS3StageVpceDnsName']] = None,
                 search_paths: Optional[Sequence['outputs.LegacyServiceUserParameterSearchPath']] = None,
                 simulated_data_sharing_consumers: Optional[Sequence['outputs.LegacyServiceUserParameterSimulatedDataSharingConsumer']] = None,
                 statement_queued_timeout_in_seconds: Optional[Sequence['outputs.LegacyServiceUserParameterStatementQueuedTimeoutInSecond']] = None,
                 statement_timeout_in_seconds: Optional[Sequence['outputs.LegacyServiceUserParameterStatementTimeoutInSecond']] = None,
                 strict_json_outputs: Optional[Sequence['outputs.LegacyServiceUserParameterStrictJsonOutput']] = None,
                 time_input_formats: Optional[Sequence['outputs.LegacyServiceUserParameterTimeInputFormat']] = None,
                 time_output_formats: Optional[Sequence['outputs.LegacyServiceUserParameterTimeOutputFormat']] = None,
                 timestamp_day_is_always24hs: Optional[Sequence['outputs.LegacyServiceUserParameterTimestampDayIsAlways24h']] = None,
                 timestamp_input_formats: Optional[Sequence['outputs.LegacyServiceUserParameterTimestampInputFormat']] = None,
                 timestamp_ltz_output_formats: Optional[Sequence['outputs.LegacyServiceUserParameterTimestampLtzOutputFormat']] = None,
                 timestamp_ntz_output_formats: Optional[Sequence['outputs.LegacyServiceUserParameterTimestampNtzOutputFormat']] = None,
                 timestamp_output_formats: Optional[Sequence['outputs.LegacyServiceUserParameterTimestampOutputFormat']] = None,
                 timestamp_type_mappings: Optional[Sequence['outputs.LegacyServiceUserParameterTimestampTypeMapping']] = None,
                 timestamp_tz_output_formats: Optional[Sequence['outputs.LegacyServiceUserParameterTimestampTzOutputFormat']] = None,
                 timezones: Optional[Sequence['outputs.LegacyServiceUserParameterTimezone']] = None,
                 trace_levels: Optional[Sequence['outputs.LegacyServiceUserParameterTraceLevel']] = None,
                 transaction_abort_on_errors: Optional[Sequence['outputs.LegacyServiceUserParameterTransactionAbortOnError']] = None,
                 transaction_default_isolation_levels: Optional[Sequence['outputs.LegacyServiceUserParameterTransactionDefaultIsolationLevel']] = None,
                 two_digit_century_starts: Optional[Sequence['outputs.LegacyServiceUserParameterTwoDigitCenturyStart']] = None,
                 unsupported_ddl_actions: Optional[Sequence['outputs.LegacyServiceUserParameterUnsupportedDdlAction']] = None,
                 use_cached_results: Optional[Sequence['outputs.LegacyServiceUserParameterUseCachedResult']] = None,
                 week_of_year_policies: Optional[Sequence['outputs.LegacyServiceUserParameterWeekOfYearPolicy']] = None,
                 week_starts: Optional[Sequence['outputs.LegacyServiceUserParameterWeekStart']] = None):
        if abort_detached_queries is not None:
            pulumi.set(__self__, "abort_detached_queries", abort_detached_queries)
        if autocommits is not None:
            pulumi.set(__self__, "autocommits", autocommits)
        if binary_input_formats is not None:
            pulumi.set(__self__, "binary_input_formats", binary_input_formats)
        if binary_output_formats is not None:
            pulumi.set(__self__, "binary_output_formats", binary_output_formats)
        if client_memory_limits is not None:
            pulumi.set(__self__, "client_memory_limits", client_memory_limits)
        if client_metadata_request_use_connection_ctxes is not None:
            pulumi.set(__self__, "client_metadata_request_use_connection_ctxes", client_metadata_request_use_connection_ctxes)
        if client_prefetch_threads is not None:
            pulumi.set(__self__, "client_prefetch_threads", client_prefetch_threads)
        if client_result_chunk_sizes is not None:
            pulumi.set(__self__, "client_result_chunk_sizes", client_result_chunk_sizes)
        if client_result_column_case_insensitives is not None:
            pulumi.set(__self__, "client_result_column_case_insensitives", client_result_column_case_insensitives)
        if client_session_keep_alive_heartbeat_frequencies is not None:
            pulumi.set(__self__, "client_session_keep_alive_heartbeat_frequencies", client_session_keep_alive_heartbeat_frequencies)
        if client_session_keep_alives is not None:
            pulumi.set(__self__, "client_session_keep_alives", client_session_keep_alives)
        if client_timestamp_type_mappings is not None:
            pulumi.set(__self__, "client_timestamp_type_mappings", client_timestamp_type_mappings)
        if date_input_formats is not None:
            pulumi.set(__self__, "date_input_formats", date_input_formats)
        if date_output_formats is not None:
            pulumi.set(__self__, "date_output_formats", date_output_formats)
        if enable_unload_physical_type_optimizations is not None:
            pulumi.set(__self__, "enable_unload_physical_type_optimizations", enable_unload_physical_type_optimizations)
        if enable_unredacted_query_syntax_errors is not None:
            pulumi.set(__self__, "enable_unredacted_query_syntax_errors", enable_unredacted_query_syntax_errors)
        if error_on_nondeterministic_merges is not None:
            pulumi.set(__self__, "error_on_nondeterministic_merges", error_on_nondeterministic_merges)
        if error_on_nondeterministic_updates is not None:
            pulumi.set(__self__, "error_on_nondeterministic_updates", error_on_nondeterministic_updates)
        if geography_output_formats is not None:
            pulumi.set(__self__, "geography_output_formats", geography_output_formats)
        if geometry_output_formats is not None:
            pulumi.set(__self__, "geometry_output_formats", geometry_output_formats)
        if jdbc_treat_decimal_as_ints is not None:
            pulumi.set(__self__, "jdbc_treat_decimal_as_ints", jdbc_treat_decimal_as_ints)
        if jdbc_treat_timestamp_ntz_as_utcs is not None:
            pulumi.set(__self__, "jdbc_treat_timestamp_ntz_as_utcs", jdbc_treat_timestamp_ntz_as_utcs)
        if jdbc_use_session_timezones is not None:
            pulumi.set(__self__, "jdbc_use_session_timezones", jdbc_use_session_timezones)
        if json_indents is not None:
            pulumi.set(__self__, "json_indents", json_indents)
        if lock_timeouts is not None:
            pulumi.set(__self__, "lock_timeouts", lock_timeouts)
        if log_levels is not None:
            pulumi.set(__self__, "log_levels", log_levels)
        if multi_statement_counts is not None:
            pulumi.set(__self__, "multi_statement_counts", multi_statement_counts)
        if network_policies is not None:
            pulumi.set(__self__, "network_policies", network_policies)
        if noorder_sequence_as_defaults is not None:
            pulumi.set(__self__, "noorder_sequence_as_defaults", noorder_sequence_as_defaults)
        if odbc_treat_decimal_as_ints is not None:
            pulumi.set(__self__, "odbc_treat_decimal_as_ints", odbc_treat_decimal_as_ints)
        if prevent_unload_to_internal_stages is not None:
            pulumi.set(__self__, "prevent_unload_to_internal_stages", prevent_unload_to_internal_stages)
        if query_tags is not None:
            pulumi.set(__self__, "query_tags", query_tags)
        if quoted_identifiers_ignore_cases is not None:
            pulumi.set(__self__, "quoted_identifiers_ignore_cases", quoted_identifiers_ignore_cases)
        if rows_per_resultsets is not None:
            pulumi.set(__self__, "rows_per_resultsets", rows_per_resultsets)
        if s3_stage_vpce_dns_names is not None:
            pulumi.set(__self__, "s3_stage_vpce_dns_names", s3_stage_vpce_dns_names)
        if search_paths is not None:
            pulumi.set(__self__, "search_paths", search_paths)
        if simulated_data_sharing_consumers is not None:
            pulumi.set(__self__, "simulated_data_sharing_consumers", simulated_data_sharing_consumers)
        if statement_queued_timeout_in_seconds is not None:
            pulumi.set(__self__, "statement_queued_timeout_in_seconds", statement_queued_timeout_in_seconds)
        if statement_timeout_in_seconds is not None:
            pulumi.set(__self__, "statement_timeout_in_seconds", statement_timeout_in_seconds)
        if strict_json_outputs is not None:
            pulumi.set(__self__, "strict_json_outputs", strict_json_outputs)
        if time_input_formats is not None:
            pulumi.set(__self__, "time_input_formats", time_input_formats)
        if time_output_formats is not None:
            pulumi.set(__self__, "time_output_formats", time_output_formats)
        if timestamp_day_is_always24hs is not None:
            pulumi.set(__self__, "timestamp_day_is_always24hs", timestamp_day_is_always24hs)
        if timestamp_input_formats is not None:
            pulumi.set(__self__, "timestamp_input_formats", timestamp_input_formats)
        if timestamp_ltz_output_formats is not None:
            pulumi.set(__self__, "timestamp_ltz_output_formats", timestamp_ltz_output_formats)
        if timestamp_ntz_output_formats is not None:
            pulumi.set(__self__, "timestamp_ntz_output_formats", timestamp_ntz_output_formats)
        if timestamp_output_formats is not None:
            pulumi.set(__self__, "timestamp_output_formats", timestamp_output_formats)
        if timestamp_type_mappings is not None:
            pulumi.set(__self__, "timestamp_type_mappings", timestamp_type_mappings)
        if timestamp_tz_output_formats is not None:
            pulumi.set(__self__, "timestamp_tz_output_formats", timestamp_tz_output_formats)
        if timezones is not None:
            pulumi.set(__self__, "timezones", timezones)
        if trace_levels is not None:
            pulumi.set(__self__, "trace_levels", trace_levels)
        if transaction_abort_on_errors is not None:
            pulumi.set(__self__, "transaction_abort_on_errors", transaction_abort_on_errors)
        if transaction_default_isolation_levels is not None:
            pulumi.set(__self__, "transaction_default_isolation_levels", transaction_default_isolation_levels)
        if two_digit_century_starts is not None:
            pulumi.set(__self__, "two_digit_century_starts", two_digit_century_starts)
        if unsupported_ddl_actions is not None:
            pulumi.set(__self__, "unsupported_ddl_actions", unsupported_ddl_actions)
        if use_cached_results is not None:
            pulumi.set(__self__, "use_cached_results", use_cached_results)
        if week_of_year_policies is not None:
            pulumi.set(__self__, "week_of_year_policies", week_of_year_policies)
        if week_starts is not None:
            pulumi.set(__self__, "week_starts", week_starts)

    @property
    @pulumi.getter(name="abortDetachedQueries")
    def abort_detached_queries(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterAbortDetachedQuery']]:
        return pulumi.get(self, "abort_detached_queries")

    @property
    @pulumi.getter
    def autocommits(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterAutocommit']]:
        return pulumi.get(self, "autocommits")

    @property
    @pulumi.getter(name="binaryInputFormats")
    def binary_input_formats(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterBinaryInputFormat']]:
        return pulumi.get(self, "binary_input_formats")

    @property
    @pulumi.getter(name="binaryOutputFormats")
    def binary_output_formats(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterBinaryOutputFormat']]:
        return pulumi.get(self, "binary_output_formats")

    @property
    @pulumi.getter(name="clientMemoryLimits")
    def client_memory_limits(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterClientMemoryLimit']]:
        return pulumi.get(self, "client_memory_limits")

    @property
    @pulumi.getter(name="clientMetadataRequestUseConnectionCtxes")
    def client_metadata_request_use_connection_ctxes(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterClientMetadataRequestUseConnectionCtx']]:
        return pulumi.get(self, "client_metadata_request_use_connection_ctxes")

    @property
    @pulumi.getter(name="clientPrefetchThreads")
    def client_prefetch_threads(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterClientPrefetchThread']]:
        return pulumi.get(self, "client_prefetch_threads")

    @property
    @pulumi.getter(name="clientResultChunkSizes")
    def client_result_chunk_sizes(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterClientResultChunkSize']]:
        return pulumi.get(self, "client_result_chunk_sizes")

    @property
    @pulumi.getter(name="clientResultColumnCaseInsensitives")
    def client_result_column_case_insensitives(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterClientResultColumnCaseInsensitive']]:
        return pulumi.get(self, "client_result_column_case_insensitives")

    @property
    @pulumi.getter(name="clientSessionKeepAliveHeartbeatFrequencies")
    def client_session_keep_alive_heartbeat_frequencies(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterClientSessionKeepAliveHeartbeatFrequency']]:
        return pulumi.get(self, "client_session_keep_alive_heartbeat_frequencies")

    @property
    @pulumi.getter(name="clientSessionKeepAlives")
    def client_session_keep_alives(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterClientSessionKeepAlife']]:
        return pulumi.get(self, "client_session_keep_alives")

    @property
    @pulumi.getter(name="clientTimestampTypeMappings")
    def client_timestamp_type_mappings(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterClientTimestampTypeMapping']]:
        return pulumi.get(self, "client_timestamp_type_mappings")

    @property
    @pulumi.getter(name="dateInputFormats")
    def date_input_formats(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterDateInputFormat']]:
        return pulumi.get(self, "date_input_formats")

    @property
    @pulumi.getter(name="dateOutputFormats")
    def date_output_formats(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterDateOutputFormat']]:
        return pulumi.get(self, "date_output_formats")

    @property
    @pulumi.getter(name="enableUnloadPhysicalTypeOptimizations")
    def enable_unload_physical_type_optimizations(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterEnableUnloadPhysicalTypeOptimization']]:
        return pulumi.get(self, "enable_unload_physical_type_optimizations")

    @property
    @pulumi.getter(name="enableUnredactedQuerySyntaxErrors")
    def enable_unredacted_query_syntax_errors(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterEnableUnredactedQuerySyntaxError']]:
        return pulumi.get(self, "enable_unredacted_query_syntax_errors")

    @property
    @pulumi.getter(name="errorOnNondeterministicMerges")
    def error_on_nondeterministic_merges(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterErrorOnNondeterministicMerge']]:
        return pulumi.get(self, "error_on_nondeterministic_merges")

    @property
    @pulumi.getter(name="errorOnNondeterministicUpdates")
    def error_on_nondeterministic_updates(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterErrorOnNondeterministicUpdate']]:
        return pulumi.get(self, "error_on_nondeterministic_updates")

    @property
    @pulumi.getter(name="geographyOutputFormats")
    def geography_output_formats(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterGeographyOutputFormat']]:
        return pulumi.get(self, "geography_output_formats")

    @property
    @pulumi.getter(name="geometryOutputFormats")
    def geometry_output_formats(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterGeometryOutputFormat']]:
        return pulumi.get(self, "geometry_output_formats")

    @property
    @pulumi.getter(name="jdbcTreatDecimalAsInts")
    def jdbc_treat_decimal_as_ints(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterJdbcTreatDecimalAsInt']]:
        return pulumi.get(self, "jdbc_treat_decimal_as_ints")

    @property
    @pulumi.getter(name="jdbcTreatTimestampNtzAsUtcs")
    def jdbc_treat_timestamp_ntz_as_utcs(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterJdbcTreatTimestampNtzAsUtc']]:
        return pulumi.get(self, "jdbc_treat_timestamp_ntz_as_utcs")

    @property
    @pulumi.getter(name="jdbcUseSessionTimezones")
    def jdbc_use_session_timezones(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterJdbcUseSessionTimezone']]:
        return pulumi.get(self, "jdbc_use_session_timezones")

    @property
    @pulumi.getter(name="jsonIndents")
    def json_indents(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterJsonIndent']]:
        return pulumi.get(self, "json_indents")

    @property
    @pulumi.getter(name="lockTimeouts")
    def lock_timeouts(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterLockTimeout']]:
        return pulumi.get(self, "lock_timeouts")

    @property
    @pulumi.getter(name="logLevels")
    def log_levels(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterLogLevel']]:
        return pulumi.get(self, "log_levels")

    @property
    @pulumi.getter(name="multiStatementCounts")
    def multi_statement_counts(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterMultiStatementCount']]:
        return pulumi.get(self, "multi_statement_counts")

    @property
    @pulumi.getter(name="networkPolicies")
    def network_policies(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterNetworkPolicy']]:
        return pulumi.get(self, "network_policies")

    @property
    @pulumi.getter(name="noorderSequenceAsDefaults")
    def noorder_sequence_as_defaults(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterNoorderSequenceAsDefault']]:
        return pulumi.get(self, "noorder_sequence_as_defaults")

    @property
    @pulumi.getter(name="odbcTreatDecimalAsInts")
    def odbc_treat_decimal_as_ints(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterOdbcTreatDecimalAsInt']]:
        return pulumi.get(self, "odbc_treat_decimal_as_ints")

    @property
    @pulumi.getter(name="preventUnloadToInternalStages")
    def prevent_unload_to_internal_stages(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterPreventUnloadToInternalStage']]:
        return pulumi.get(self, "prevent_unload_to_internal_stages")

    @property
    @pulumi.getter(name="queryTags")
    def query_tags(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterQueryTag']]:
        return pulumi.get(self, "query_tags")

    @property
    @pulumi.getter(name="quotedIdentifiersIgnoreCases")
    def quoted_identifiers_ignore_cases(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterQuotedIdentifiersIgnoreCase']]:
        return pulumi.get(self, "quoted_identifiers_ignore_cases")

    @property
    @pulumi.getter(name="rowsPerResultsets")
    def rows_per_resultsets(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterRowsPerResultset']]:
        return pulumi.get(self, "rows_per_resultsets")

    @property
    @pulumi.getter(name="s3StageVpceDnsNames")
    def s3_stage_vpce_dns_names(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterS3StageVpceDnsName']]:
        return pulumi.get(self, "s3_stage_vpce_dns_names")

    @property
    @pulumi.getter(name="searchPaths")
    def search_paths(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterSearchPath']]:
        return pulumi.get(self, "search_paths")

    @property
    @pulumi.getter(name="simulatedDataSharingConsumers")
    def simulated_data_sharing_consumers(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterSimulatedDataSharingConsumer']]:
        return pulumi.get(self, "simulated_data_sharing_consumers")

    @property
    @pulumi.getter(name="statementQueuedTimeoutInSeconds")
    def statement_queued_timeout_in_seconds(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterStatementQueuedTimeoutInSecond']]:
        return pulumi.get(self, "statement_queued_timeout_in_seconds")

    @property
    @pulumi.getter(name="statementTimeoutInSeconds")
    def statement_timeout_in_seconds(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterStatementTimeoutInSecond']]:
        return pulumi.get(self, "statement_timeout_in_seconds")

    @property
    @pulumi.getter(name="strictJsonOutputs")
    def strict_json_outputs(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterStrictJsonOutput']]:
        return pulumi.get(self, "strict_json_outputs")

    @property
    @pulumi.getter(name="timeInputFormats")
    def time_input_formats(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterTimeInputFormat']]:
        return pulumi.get(self, "time_input_formats")

    @property
    @pulumi.getter(name="timeOutputFormats")
    def time_output_formats(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterTimeOutputFormat']]:
        return pulumi.get(self, "time_output_formats")

    @property
    @pulumi.getter(name="timestampDayIsAlways24hs")
    def timestamp_day_is_always24hs(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterTimestampDayIsAlways24h']]:
        return pulumi.get(self, "timestamp_day_is_always24hs")

    @property
    @pulumi.getter(name="timestampInputFormats")
    def timestamp_input_formats(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterTimestampInputFormat']]:
        return pulumi.get(self, "timestamp_input_formats")

    @property
    @pulumi.getter(name="timestampLtzOutputFormats")
    def timestamp_ltz_output_formats(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterTimestampLtzOutputFormat']]:
        return pulumi.get(self, "timestamp_ltz_output_formats")

    @property
    @pulumi.getter(name="timestampNtzOutputFormats")
    def timestamp_ntz_output_formats(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterTimestampNtzOutputFormat']]:
        return pulumi.get(self, "timestamp_ntz_output_formats")

    @property
    @pulumi.getter(name="timestampOutputFormats")
    def timestamp_output_formats(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterTimestampOutputFormat']]:
        return pulumi.get(self, "timestamp_output_formats")

    @property
    @pulumi.getter(name="timestampTypeMappings")
    def timestamp_type_mappings(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterTimestampTypeMapping']]:
        return pulumi.get(self, "timestamp_type_mappings")

    @property
    @pulumi.getter(name="timestampTzOutputFormats")
    def timestamp_tz_output_formats(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterTimestampTzOutputFormat']]:
        return pulumi.get(self, "timestamp_tz_output_formats")

    @property
    @pulumi.getter
    def timezones(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterTimezone']]:
        return pulumi.get(self, "timezones")

    @property
    @pulumi.getter(name="traceLevels")
    def trace_levels(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterTraceLevel']]:
        return pulumi.get(self, "trace_levels")

    @property
    @pulumi.getter(name="transactionAbortOnErrors")
    def transaction_abort_on_errors(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterTransactionAbortOnError']]:
        return pulumi.get(self, "transaction_abort_on_errors")

    @property
    @pulumi.getter(name="transactionDefaultIsolationLevels")
    def transaction_default_isolation_levels(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterTransactionDefaultIsolationLevel']]:
        return pulumi.get(self, "transaction_default_isolation_levels")

    @property
    @pulumi.getter(name="twoDigitCenturyStarts")
    def two_digit_century_starts(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterTwoDigitCenturyStart']]:
        return pulumi.get(self, "two_digit_century_starts")

    @property
    @pulumi.getter(name="unsupportedDdlActions")
    def unsupported_ddl_actions(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterUnsupportedDdlAction']]:
        return pulumi.get(self, "unsupported_ddl_actions")

    @property
    @pulumi.getter(name="useCachedResults")
    def use_cached_results(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterUseCachedResult']]:
        return pulumi.get(self, "use_cached_results")

    @property
    @pulumi.getter(name="weekOfYearPolicies")
    def week_of_year_policies(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterWeekOfYearPolicy']]:
        return pulumi.get(self, "week_of_year_policies")

    @property
    @pulumi.getter(name="weekStarts")
    def week_starts(self) -> Optional[Sequence['outputs.LegacyServiceUserParameterWeekStart']]:
        return pulumi.get(self, "week_starts")


@pulumi.output_type
class LegacyServiceUserParameterAbortDetachedQuery(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterAutocommit(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterBinaryInputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterBinaryOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterClientMemoryLimit(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterClientMetadataRequestUseConnectionCtx(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterClientPrefetchThread(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterClientResultChunkSize(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterClientResultColumnCaseInsensitive(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterClientSessionKeepAlife(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterClientSessionKeepAliveHeartbeatFrequency(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterClientTimestampTypeMapping(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterDateInputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterDateOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterEnableUnloadPhysicalTypeOptimization(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterEnableUnredactedQuerySyntaxError(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterErrorOnNondeterministicMerge(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterErrorOnNondeterministicUpdate(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterGeographyOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterGeometryOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterJdbcTreatDecimalAsInt(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterJdbcTreatTimestampNtzAsUtc(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterJdbcUseSessionTimezone(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterJsonIndent(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterLockTimeout(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterLogLevel(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterMultiStatementCount(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterNetworkPolicy(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterNoorderSequenceAsDefault(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterOdbcTreatDecimalAsInt(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterPreventUnloadToInternalStage(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterQueryTag(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterQuotedIdentifiersIgnoreCase(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterRowsPerResultset(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterS3StageVpceDnsName(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterSearchPath(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterSimulatedDataSharingConsumer(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterStatementQueuedTimeoutInSecond(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterStatementTimeoutInSecond(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterStrictJsonOutput(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterTimeInputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterTimeOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterTimestampDayIsAlways24h(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterTimestampInputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterTimestampLtzOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterTimestampNtzOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterTimestampOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterTimestampTypeMapping(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterTimestampTzOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterTimezone(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterTraceLevel(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterTransactionAbortOnError(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterTransactionDefaultIsolationLevel(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterTwoDigitCenturyStart(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterUnsupportedDdlAction(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterUseCachedResult(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterWeekOfYearPolicy(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserParameterWeekStart(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LegacyServiceUserShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "daysToExpiry":
            suggest = "days_to_expiry"
        elif key == "defaultNamespace":
            suggest = "default_namespace"
        elif key == "defaultRole":
            suggest = "default_role"
        elif key == "defaultSecondaryRoles":
            suggest = "default_secondary_roles"
        elif key == "defaultWarehouse":
            suggest = "default_warehouse"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "expiresAtTime":
            suggest = "expires_at_time"
        elif key == "extAuthnDuo":
            suggest = "ext_authn_duo"
        elif key == "extAuthnUid":
            suggest = "ext_authn_uid"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "hasMfa":
            suggest = "has_mfa"
        elif key == "hasPassword":
            suggest = "has_password"
        elif key == "hasRsaPublicKey":
            suggest = "has_rsa_public_key"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "lastSuccessLogin":
            suggest = "last_success_login"
        elif key == "lockedUntilTime":
            suggest = "locked_until_time"
        elif key == "loginName":
            suggest = "login_name"
        elif key == "minsToBypassMfa":
            suggest = "mins_to_bypass_mfa"
        elif key == "minsToUnlock":
            suggest = "mins_to_unlock"
        elif key == "mustChangePassword":
            suggest = "must_change_password"
        elif key == "snowflakeLock":
            suggest = "snowflake_lock"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LegacyServiceUserShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LegacyServiceUserShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LegacyServiceUserShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 days_to_expiry: Optional[str] = None,
                 default_namespace: Optional[str] = None,
                 default_role: Optional[str] = None,
                 default_secondary_roles: Optional[str] = None,
                 default_warehouse: Optional[str] = None,
                 disabled: Optional[bool] = None,
                 display_name: Optional[str] = None,
                 email: Optional[str] = None,
                 expires_at_time: Optional[str] = None,
                 ext_authn_duo: Optional[bool] = None,
                 ext_authn_uid: Optional[str] = None,
                 first_name: Optional[str] = None,
                 has_mfa: Optional[bool] = None,
                 has_password: Optional[bool] = None,
                 has_rsa_public_key: Optional[bool] = None,
                 last_name: Optional[str] = None,
                 last_success_login: Optional[str] = None,
                 locked_until_time: Optional[str] = None,
                 login_name: Optional[str] = None,
                 mins_to_bypass_mfa: Optional[str] = None,
                 mins_to_unlock: Optional[str] = None,
                 must_change_password: Optional[bool] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 snowflake_lock: Optional[bool] = None,
                 type: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if days_to_expiry is not None:
            pulumi.set(__self__, "days_to_expiry", days_to_expiry)
        if default_namespace is not None:
            pulumi.set(__self__, "default_namespace", default_namespace)
        if default_role is not None:
            pulumi.set(__self__, "default_role", default_role)
        if default_secondary_roles is not None:
            pulumi.set(__self__, "default_secondary_roles", default_secondary_roles)
        if default_warehouse is not None:
            pulumi.set(__self__, "default_warehouse", default_warehouse)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if expires_at_time is not None:
            pulumi.set(__self__, "expires_at_time", expires_at_time)
        if ext_authn_duo is not None:
            pulumi.set(__self__, "ext_authn_duo", ext_authn_duo)
        if ext_authn_uid is not None:
            pulumi.set(__self__, "ext_authn_uid", ext_authn_uid)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if has_mfa is not None:
            pulumi.set(__self__, "has_mfa", has_mfa)
        if has_password is not None:
            pulumi.set(__self__, "has_password", has_password)
        if has_rsa_public_key is not None:
            pulumi.set(__self__, "has_rsa_public_key", has_rsa_public_key)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if last_success_login is not None:
            pulumi.set(__self__, "last_success_login", last_success_login)
        if locked_until_time is not None:
            pulumi.set(__self__, "locked_until_time", locked_until_time)
        if login_name is not None:
            pulumi.set(__self__, "login_name", login_name)
        if mins_to_bypass_mfa is not None:
            pulumi.set(__self__, "mins_to_bypass_mfa", mins_to_bypass_mfa)
        if mins_to_unlock is not None:
            pulumi.set(__self__, "mins_to_unlock", mins_to_unlock)
        if must_change_password is not None:
            pulumi.set(__self__, "must_change_password", must_change_password)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if snowflake_lock is not None:
            pulumi.set(__self__, "snowflake_lock", snowflake_lock)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="daysToExpiry")
    def days_to_expiry(self) -> Optional[str]:
        return pulumi.get(self, "days_to_expiry")

    @property
    @pulumi.getter(name="defaultNamespace")
    def default_namespace(self) -> Optional[str]:
        return pulumi.get(self, "default_namespace")

    @property
    @pulumi.getter(name="defaultRole")
    def default_role(self) -> Optional[str]:
        return pulumi.get(self, "default_role")

    @property
    @pulumi.getter(name="defaultSecondaryRoles")
    def default_secondary_roles(self) -> Optional[str]:
        return pulumi.get(self, "default_secondary_roles")

    @property
    @pulumi.getter(name="defaultWarehouse")
    def default_warehouse(self) -> Optional[str]:
        return pulumi.get(self, "default_warehouse")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="expiresAtTime")
    def expires_at_time(self) -> Optional[str]:
        return pulumi.get(self, "expires_at_time")

    @property
    @pulumi.getter(name="extAuthnDuo")
    def ext_authn_duo(self) -> Optional[bool]:
        return pulumi.get(self, "ext_authn_duo")

    @property
    @pulumi.getter(name="extAuthnUid")
    def ext_authn_uid(self) -> Optional[str]:
        return pulumi.get(self, "ext_authn_uid")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="hasMfa")
    def has_mfa(self) -> Optional[bool]:
        return pulumi.get(self, "has_mfa")

    @property
    @pulumi.getter(name="hasPassword")
    def has_password(self) -> Optional[bool]:
        return pulumi.get(self, "has_password")

    @property
    @pulumi.getter(name="hasRsaPublicKey")
    def has_rsa_public_key(self) -> Optional[bool]:
        return pulumi.get(self, "has_rsa_public_key")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="lastSuccessLogin")
    def last_success_login(self) -> Optional[str]:
        return pulumi.get(self, "last_success_login")

    @property
    @pulumi.getter(name="lockedUntilTime")
    def locked_until_time(self) -> Optional[str]:
        return pulumi.get(self, "locked_until_time")

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> Optional[str]:
        return pulumi.get(self, "login_name")

    @property
    @pulumi.getter(name="minsToBypassMfa")
    def mins_to_bypass_mfa(self) -> Optional[str]:
        return pulumi.get(self, "mins_to_bypass_mfa")

    @property
    @pulumi.getter(name="minsToUnlock")
    def mins_to_unlock(self) -> Optional[str]:
        return pulumi.get(self, "mins_to_unlock")

    @property
    @pulumi.getter(name="mustChangePassword")
    def must_change_password(self) -> Optional[bool]:
        return pulumi.get(self, "must_change_password")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="snowflakeLock")
    def snowflake_lock(self) -> Optional[bool]:
        return pulumi.get(self, "snowflake_lock")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class MaskingPolicyArgument(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str):
        """
        :param str name: The argument name
        :param str type: The argument type. VECTOR data types are not yet supported. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The argument name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The argument type. VECTOR data types are not yet supported. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class MaskingPolicyDescribeOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "returnType":
            suggest = "return_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MaskingPolicyDescribeOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MaskingPolicyDescribeOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MaskingPolicyDescribeOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 body: Optional[str] = None,
                 name: Optional[str] = None,
                 return_type: Optional[str] = None,
                 signatures: Optional[Sequence['outputs.MaskingPolicyDescribeOutputSignature']] = None):
        if body is not None:
            pulumi.set(__self__, "body", body)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if return_type is not None:
            pulumi.set(__self__, "return_type", return_type)
        if signatures is not None:
            pulumi.set(__self__, "signatures", signatures)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="returnType")
    def return_type(self) -> Optional[str]:
        return pulumi.get(self, "return_type")

    @property
    @pulumi.getter
    def signatures(self) -> Optional[Sequence['outputs.MaskingPolicyDescribeOutputSignature']]:
        return pulumi.get(self, "signatures")


@pulumi.output_type
class MaskingPolicyDescribeOutputSignature(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class MaskingPolicyShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "exemptOtherPolicies":
            suggest = "exempt_other_policies"
        elif key == "ownerRoleType":
            suggest = "owner_role_type"
        elif key == "schemaName":
            suggest = "schema_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MaskingPolicyShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MaskingPolicyShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MaskingPolicyShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 exempt_other_policies: Optional[bool] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 owner_role_type: Optional[str] = None,
                 schema_name: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if exempt_other_policies is not None:
            pulumi.set(__self__, "exempt_other_policies", exempt_other_policies)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="exemptOtherPolicies")
    def exempt_other_policies(self) -> Optional[bool]:
        return pulumi.get(self, "exempt_other_policies")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[str]:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class MaterializedViewTag(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param str name: Tag name, e.g. department.
        :param str value: Tag value, e.g. marketing_info.
        :param str database: Name of the database that the tag was created in.
        :param str schema: Name of the schema that the tag was created in.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Tag name, e.g. department.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag value, e.g. marketing_info.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Name of the database that the tag was created in.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Name of the schema that the tag was created in.
        """
        return pulumi.get(self, "schema")


@pulumi.output_type
class NetworkPolicyDescribeOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedIpList":
            suggest = "allowed_ip_list"
        elif key == "allowedNetworkRuleList":
            suggest = "allowed_network_rule_list"
        elif key == "blockedIpList":
            suggest = "blocked_ip_list"
        elif key == "blockedNetworkRuleList":
            suggest = "blocked_network_rule_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkPolicyDescribeOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkPolicyDescribeOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkPolicyDescribeOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_ip_list: Optional[str] = None,
                 allowed_network_rule_list: Optional[str] = None,
                 blocked_ip_list: Optional[str] = None,
                 blocked_network_rule_list: Optional[str] = None):
        if allowed_ip_list is not None:
            pulumi.set(__self__, "allowed_ip_list", allowed_ip_list)
        if allowed_network_rule_list is not None:
            pulumi.set(__self__, "allowed_network_rule_list", allowed_network_rule_list)
        if blocked_ip_list is not None:
            pulumi.set(__self__, "blocked_ip_list", blocked_ip_list)
        if blocked_network_rule_list is not None:
            pulumi.set(__self__, "blocked_network_rule_list", blocked_network_rule_list)

    @property
    @pulumi.getter(name="allowedIpList")
    def allowed_ip_list(self) -> Optional[str]:
        return pulumi.get(self, "allowed_ip_list")

    @property
    @pulumi.getter(name="allowedNetworkRuleList")
    def allowed_network_rule_list(self) -> Optional[str]:
        return pulumi.get(self, "allowed_network_rule_list")

    @property
    @pulumi.getter(name="blockedIpList")
    def blocked_ip_list(self) -> Optional[str]:
        return pulumi.get(self, "blocked_ip_list")

    @property
    @pulumi.getter(name="blockedNetworkRuleList")
    def blocked_network_rule_list(self) -> Optional[str]:
        return pulumi.get(self, "blocked_network_rule_list")


@pulumi.output_type
class NetworkPolicyShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "entriesInAllowedIpList":
            suggest = "entries_in_allowed_ip_list"
        elif key == "entriesInAllowedNetworkRules":
            suggest = "entries_in_allowed_network_rules"
        elif key == "entriesInBlockedIpList":
            suggest = "entries_in_blocked_ip_list"
        elif key == "entriesInBlockedNetworkRules":
            suggest = "entries_in_blocked_network_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkPolicyShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkPolicyShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkPolicyShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 entries_in_allowed_ip_list: Optional[int] = None,
                 entries_in_allowed_network_rules: Optional[int] = None,
                 entries_in_blocked_ip_list: Optional[int] = None,
                 entries_in_blocked_network_rules: Optional[int] = None,
                 name: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if entries_in_allowed_ip_list is not None:
            pulumi.set(__self__, "entries_in_allowed_ip_list", entries_in_allowed_ip_list)
        if entries_in_allowed_network_rules is not None:
            pulumi.set(__self__, "entries_in_allowed_network_rules", entries_in_allowed_network_rules)
        if entries_in_blocked_ip_list is not None:
            pulumi.set(__self__, "entries_in_blocked_ip_list", entries_in_blocked_ip_list)
        if entries_in_blocked_network_rules is not None:
            pulumi.set(__self__, "entries_in_blocked_network_rules", entries_in_blocked_network_rules)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="entriesInAllowedIpList")
    def entries_in_allowed_ip_list(self) -> Optional[int]:
        return pulumi.get(self, "entries_in_allowed_ip_list")

    @property
    @pulumi.getter(name="entriesInAllowedNetworkRules")
    def entries_in_allowed_network_rules(self) -> Optional[int]:
        return pulumi.get(self, "entries_in_allowed_network_rules")

    @property
    @pulumi.getter(name="entriesInBlockedIpList")
    def entries_in_blocked_ip_list(self) -> Optional[int]:
        return pulumi.get(self, "entries_in_blocked_ip_list")

    @property
    @pulumi.getter(name="entriesInBlockedNetworkRules")
    def entries_in_blocked_network_rules(self) -> Optional[int]:
        return pulumi.get(self, "entries_in_blocked_network_rules")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class OauthIntegrationForCustomClientsDescribeOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockedRolesLists":
            suggest = "blocked_roles_lists"
        elif key == "networkPolicies":
            suggest = "network_policies"
        elif key == "oauthAllowNonTlsRedirectUris":
            suggest = "oauth_allow_non_tls_redirect_uris"
        elif key == "oauthAllowedAuthorizationEndpoints":
            suggest = "oauth_allowed_authorization_endpoints"
        elif key == "oauthAllowedTokenEndpoints":
            suggest = "oauth_allowed_token_endpoints"
        elif key == "oauthAuthorizationEndpoints":
            suggest = "oauth_authorization_endpoints"
        elif key == "oauthClientIds":
            suggest = "oauth_client_ids"
        elif key == "oauthClientRsaPublicKey2Fps":
            suggest = "oauth_client_rsa_public_key2_fps"
        elif key == "oauthClientRsaPublicKeyFps":
            suggest = "oauth_client_rsa_public_key_fps"
        elif key == "oauthClientTypes":
            suggest = "oauth_client_types"
        elif key == "oauthEnforcePkces":
            suggest = "oauth_enforce_pkces"
        elif key == "oauthIssueRefreshTokens":
            suggest = "oauth_issue_refresh_tokens"
        elif key == "oauthRedirectUris":
            suggest = "oauth_redirect_uris"
        elif key == "oauthRefreshTokenValidities":
            suggest = "oauth_refresh_token_validities"
        elif key == "oauthTokenEndpoints":
            suggest = "oauth_token_endpoints"
        elif key == "oauthUseSecondaryRoles":
            suggest = "oauth_use_secondary_roles"
        elif key == "preAuthorizedRolesLists":
            suggest = "pre_authorized_roles_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OauthIntegrationForCustomClientsDescribeOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OauthIntegrationForCustomClientsDescribeOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OauthIntegrationForCustomClientsDescribeOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blocked_roles_lists: Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputBlockedRolesList']] = None,
                 comments: Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputComment']] = None,
                 enableds: Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputEnabled']] = None,
                 network_policies: Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputNetworkPolicy']] = None,
                 oauth_allow_non_tls_redirect_uris: Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUri']] = None,
                 oauth_allowed_authorization_endpoints: Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpoint']] = None,
                 oauth_allowed_token_endpoints: Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpoint']] = None,
                 oauth_authorization_endpoints: Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpoint']] = None,
                 oauth_client_ids: Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthClientId']] = None,
                 oauth_client_rsa_public_key2_fps: Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2Fp']] = None,
                 oauth_client_rsa_public_key_fps: Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFp']] = None,
                 oauth_client_types: Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthClientType']] = None,
                 oauth_enforce_pkces: Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkce']] = None,
                 oauth_issue_refresh_tokens: Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshToken']] = None,
                 oauth_redirect_uris: Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthRedirectUri']] = None,
                 oauth_refresh_token_validities: Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidity']] = None,
                 oauth_token_endpoints: Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpoint']] = None,
                 oauth_use_secondary_roles: Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRole']] = None,
                 pre_authorized_roles_lists: Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesList']] = None):
        if blocked_roles_lists is not None:
            pulumi.set(__self__, "blocked_roles_lists", blocked_roles_lists)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if enableds is not None:
            pulumi.set(__self__, "enableds", enableds)
        if network_policies is not None:
            pulumi.set(__self__, "network_policies", network_policies)
        if oauth_allow_non_tls_redirect_uris is not None:
            pulumi.set(__self__, "oauth_allow_non_tls_redirect_uris", oauth_allow_non_tls_redirect_uris)
        if oauth_allowed_authorization_endpoints is not None:
            pulumi.set(__self__, "oauth_allowed_authorization_endpoints", oauth_allowed_authorization_endpoints)
        if oauth_allowed_token_endpoints is not None:
            pulumi.set(__self__, "oauth_allowed_token_endpoints", oauth_allowed_token_endpoints)
        if oauth_authorization_endpoints is not None:
            pulumi.set(__self__, "oauth_authorization_endpoints", oauth_authorization_endpoints)
        if oauth_client_ids is not None:
            pulumi.set(__self__, "oauth_client_ids", oauth_client_ids)
        if oauth_client_rsa_public_key2_fps is not None:
            pulumi.set(__self__, "oauth_client_rsa_public_key2_fps", oauth_client_rsa_public_key2_fps)
        if oauth_client_rsa_public_key_fps is not None:
            pulumi.set(__self__, "oauth_client_rsa_public_key_fps", oauth_client_rsa_public_key_fps)
        if oauth_client_types is not None:
            pulumi.set(__self__, "oauth_client_types", oauth_client_types)
        if oauth_enforce_pkces is not None:
            pulumi.set(__self__, "oauth_enforce_pkces", oauth_enforce_pkces)
        if oauth_issue_refresh_tokens is not None:
            pulumi.set(__self__, "oauth_issue_refresh_tokens", oauth_issue_refresh_tokens)
        if oauth_redirect_uris is not None:
            pulumi.set(__self__, "oauth_redirect_uris", oauth_redirect_uris)
        if oauth_refresh_token_validities is not None:
            pulumi.set(__self__, "oauth_refresh_token_validities", oauth_refresh_token_validities)
        if oauth_token_endpoints is not None:
            pulumi.set(__self__, "oauth_token_endpoints", oauth_token_endpoints)
        if oauth_use_secondary_roles is not None:
            pulumi.set(__self__, "oauth_use_secondary_roles", oauth_use_secondary_roles)
        if pre_authorized_roles_lists is not None:
            pulumi.set(__self__, "pre_authorized_roles_lists", pre_authorized_roles_lists)

    @property
    @pulumi.getter(name="blockedRolesLists")
    def blocked_roles_lists(self) -> Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputBlockedRolesList']]:
        return pulumi.get(self, "blocked_roles_lists")

    @property
    @pulumi.getter
    def comments(self) -> Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputComment']]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def enableds(self) -> Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputEnabled']]:
        return pulumi.get(self, "enableds")

    @property
    @pulumi.getter(name="networkPolicies")
    def network_policies(self) -> Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputNetworkPolicy']]:
        return pulumi.get(self, "network_policies")

    @property
    @pulumi.getter(name="oauthAllowNonTlsRedirectUris")
    def oauth_allow_non_tls_redirect_uris(self) -> Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUri']]:
        return pulumi.get(self, "oauth_allow_non_tls_redirect_uris")

    @property
    @pulumi.getter(name="oauthAllowedAuthorizationEndpoints")
    def oauth_allowed_authorization_endpoints(self) -> Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpoint']]:
        return pulumi.get(self, "oauth_allowed_authorization_endpoints")

    @property
    @pulumi.getter(name="oauthAllowedTokenEndpoints")
    def oauth_allowed_token_endpoints(self) -> Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpoint']]:
        return pulumi.get(self, "oauth_allowed_token_endpoints")

    @property
    @pulumi.getter(name="oauthAuthorizationEndpoints")
    def oauth_authorization_endpoints(self) -> Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpoint']]:
        return pulumi.get(self, "oauth_authorization_endpoints")

    @property
    @pulumi.getter(name="oauthClientIds")
    def oauth_client_ids(self) -> Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthClientId']]:
        return pulumi.get(self, "oauth_client_ids")

    @property
    @pulumi.getter(name="oauthClientRsaPublicKey2Fps")
    def oauth_client_rsa_public_key2_fps(self) -> Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2Fp']]:
        return pulumi.get(self, "oauth_client_rsa_public_key2_fps")

    @property
    @pulumi.getter(name="oauthClientRsaPublicKeyFps")
    def oauth_client_rsa_public_key_fps(self) -> Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFp']]:
        return pulumi.get(self, "oauth_client_rsa_public_key_fps")

    @property
    @pulumi.getter(name="oauthClientTypes")
    def oauth_client_types(self) -> Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthClientType']]:
        return pulumi.get(self, "oauth_client_types")

    @property
    @pulumi.getter(name="oauthEnforcePkces")
    def oauth_enforce_pkces(self) -> Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkce']]:
        return pulumi.get(self, "oauth_enforce_pkces")

    @property
    @pulumi.getter(name="oauthIssueRefreshTokens")
    def oauth_issue_refresh_tokens(self) -> Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshToken']]:
        return pulumi.get(self, "oauth_issue_refresh_tokens")

    @property
    @pulumi.getter(name="oauthRedirectUris")
    def oauth_redirect_uris(self) -> Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthRedirectUri']]:
        return pulumi.get(self, "oauth_redirect_uris")

    @property
    @pulumi.getter(name="oauthRefreshTokenValidities")
    def oauth_refresh_token_validities(self) -> Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidity']]:
        return pulumi.get(self, "oauth_refresh_token_validities")

    @property
    @pulumi.getter(name="oauthTokenEndpoints")
    def oauth_token_endpoints(self) -> Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpoint']]:
        return pulumi.get(self, "oauth_token_endpoints")

    @property
    @pulumi.getter(name="oauthUseSecondaryRoles")
    def oauth_use_secondary_roles(self) -> Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRole']]:
        return pulumi.get(self, "oauth_use_secondary_roles")

    @property
    @pulumi.getter(name="preAuthorizedRolesLists")
    def pre_authorized_roles_lists(self) -> Optional[Sequence['outputs.OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesList']]:
        return pulumi.get(self, "pre_authorized_roles_lists")


@pulumi.output_type
class OauthIntegrationForCustomClientsDescribeOutputBlockedRolesList(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForCustomClientsDescribeOutputComment(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForCustomClientsDescribeOutputEnabled(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForCustomClientsDescribeOutputNetworkPolicy(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUri(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpoint(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpoint(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpoint(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForCustomClientsDescribeOutputOauthClientId(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2Fp(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFp(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForCustomClientsDescribeOutputOauthClientType(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkce(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshToken(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForCustomClientsDescribeOutputOauthRedirectUri(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidity(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpoint(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRole(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesList(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForCustomClientsShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "integrationType":
            suggest = "integration_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OauthIntegrationForCustomClientsShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OauthIntegrationForCustomClientsShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OauthIntegrationForCustomClientsShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 integration_type: Optional[str] = None,
                 name: Optional[str] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if integration_type is not None:
            pulumi.set(__self__, "integration_type", integration_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> Optional[str]:
        return pulumi.get(self, "integration_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class OauthIntegrationForPartnerApplicationsDescribeOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockedRolesLists":
            suggest = "blocked_roles_lists"
        elif key == "networkPolicies":
            suggest = "network_policies"
        elif key == "oauthAllowNonTlsRedirectUris":
            suggest = "oauth_allow_non_tls_redirect_uris"
        elif key == "oauthAllowedAuthorizationEndpoints":
            suggest = "oauth_allowed_authorization_endpoints"
        elif key == "oauthAllowedTokenEndpoints":
            suggest = "oauth_allowed_token_endpoints"
        elif key == "oauthAuthorizationEndpoints":
            suggest = "oauth_authorization_endpoints"
        elif key == "oauthClientIds":
            suggest = "oauth_client_ids"
        elif key == "oauthClientRsaPublicKey2Fps":
            suggest = "oauth_client_rsa_public_key2_fps"
        elif key == "oauthClientRsaPublicKeyFps":
            suggest = "oauth_client_rsa_public_key_fps"
        elif key == "oauthClientTypes":
            suggest = "oauth_client_types"
        elif key == "oauthEnforcePkces":
            suggest = "oauth_enforce_pkces"
        elif key == "oauthIssueRefreshTokens":
            suggest = "oauth_issue_refresh_tokens"
        elif key == "oauthRedirectUris":
            suggest = "oauth_redirect_uris"
        elif key == "oauthRefreshTokenValidities":
            suggest = "oauth_refresh_token_validities"
        elif key == "oauthTokenEndpoints":
            suggest = "oauth_token_endpoints"
        elif key == "oauthUseSecondaryRoles":
            suggest = "oauth_use_secondary_roles"
        elif key == "preAuthorizedRolesLists":
            suggest = "pre_authorized_roles_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OauthIntegrationForPartnerApplicationsDescribeOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OauthIntegrationForPartnerApplicationsDescribeOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OauthIntegrationForPartnerApplicationsDescribeOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blocked_roles_lists: Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesList']] = None,
                 comments: Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputComment']] = None,
                 enableds: Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputEnabled']] = None,
                 network_policies: Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicy']] = None,
                 oauth_allow_non_tls_redirect_uris: Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUri']] = None,
                 oauth_allowed_authorization_endpoints: Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpoint']] = None,
                 oauth_allowed_token_endpoints: Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpoint']] = None,
                 oauth_authorization_endpoints: Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpoint']] = None,
                 oauth_client_ids: Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientId']] = None,
                 oauth_client_rsa_public_key2_fps: Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2Fp']] = None,
                 oauth_client_rsa_public_key_fps: Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFp']] = None,
                 oauth_client_types: Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientType']] = None,
                 oauth_enforce_pkces: Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkce']] = None,
                 oauth_issue_refresh_tokens: Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshToken']] = None,
                 oauth_redirect_uris: Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthRedirectUri']] = None,
                 oauth_refresh_token_validities: Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidity']] = None,
                 oauth_token_endpoints: Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpoint']] = None,
                 oauth_use_secondary_roles: Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRole']] = None,
                 pre_authorized_roles_lists: Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesList']] = None):
        if blocked_roles_lists is not None:
            pulumi.set(__self__, "blocked_roles_lists", blocked_roles_lists)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if enableds is not None:
            pulumi.set(__self__, "enableds", enableds)
        if network_policies is not None:
            pulumi.set(__self__, "network_policies", network_policies)
        if oauth_allow_non_tls_redirect_uris is not None:
            pulumi.set(__self__, "oauth_allow_non_tls_redirect_uris", oauth_allow_non_tls_redirect_uris)
        if oauth_allowed_authorization_endpoints is not None:
            pulumi.set(__self__, "oauth_allowed_authorization_endpoints", oauth_allowed_authorization_endpoints)
        if oauth_allowed_token_endpoints is not None:
            pulumi.set(__self__, "oauth_allowed_token_endpoints", oauth_allowed_token_endpoints)
        if oauth_authorization_endpoints is not None:
            pulumi.set(__self__, "oauth_authorization_endpoints", oauth_authorization_endpoints)
        if oauth_client_ids is not None:
            pulumi.set(__self__, "oauth_client_ids", oauth_client_ids)
        if oauth_client_rsa_public_key2_fps is not None:
            pulumi.set(__self__, "oauth_client_rsa_public_key2_fps", oauth_client_rsa_public_key2_fps)
        if oauth_client_rsa_public_key_fps is not None:
            pulumi.set(__self__, "oauth_client_rsa_public_key_fps", oauth_client_rsa_public_key_fps)
        if oauth_client_types is not None:
            pulumi.set(__self__, "oauth_client_types", oauth_client_types)
        if oauth_enforce_pkces is not None:
            pulumi.set(__self__, "oauth_enforce_pkces", oauth_enforce_pkces)
        if oauth_issue_refresh_tokens is not None:
            pulumi.set(__self__, "oauth_issue_refresh_tokens", oauth_issue_refresh_tokens)
        if oauth_redirect_uris is not None:
            pulumi.set(__self__, "oauth_redirect_uris", oauth_redirect_uris)
        if oauth_refresh_token_validities is not None:
            pulumi.set(__self__, "oauth_refresh_token_validities", oauth_refresh_token_validities)
        if oauth_token_endpoints is not None:
            pulumi.set(__self__, "oauth_token_endpoints", oauth_token_endpoints)
        if oauth_use_secondary_roles is not None:
            pulumi.set(__self__, "oauth_use_secondary_roles", oauth_use_secondary_roles)
        if pre_authorized_roles_lists is not None:
            pulumi.set(__self__, "pre_authorized_roles_lists", pre_authorized_roles_lists)

    @property
    @pulumi.getter(name="blockedRolesLists")
    def blocked_roles_lists(self) -> Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesList']]:
        return pulumi.get(self, "blocked_roles_lists")

    @property
    @pulumi.getter
    def comments(self) -> Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputComment']]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def enableds(self) -> Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputEnabled']]:
        return pulumi.get(self, "enableds")

    @property
    @pulumi.getter(name="networkPolicies")
    def network_policies(self) -> Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicy']]:
        return pulumi.get(self, "network_policies")

    @property
    @pulumi.getter(name="oauthAllowNonTlsRedirectUris")
    def oauth_allow_non_tls_redirect_uris(self) -> Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUri']]:
        return pulumi.get(self, "oauth_allow_non_tls_redirect_uris")

    @property
    @pulumi.getter(name="oauthAllowedAuthorizationEndpoints")
    def oauth_allowed_authorization_endpoints(self) -> Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpoint']]:
        return pulumi.get(self, "oauth_allowed_authorization_endpoints")

    @property
    @pulumi.getter(name="oauthAllowedTokenEndpoints")
    def oauth_allowed_token_endpoints(self) -> Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpoint']]:
        return pulumi.get(self, "oauth_allowed_token_endpoints")

    @property
    @pulumi.getter(name="oauthAuthorizationEndpoints")
    def oauth_authorization_endpoints(self) -> Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpoint']]:
        return pulumi.get(self, "oauth_authorization_endpoints")

    @property
    @pulumi.getter(name="oauthClientIds")
    def oauth_client_ids(self) -> Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientId']]:
        return pulumi.get(self, "oauth_client_ids")

    @property
    @pulumi.getter(name="oauthClientRsaPublicKey2Fps")
    def oauth_client_rsa_public_key2_fps(self) -> Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2Fp']]:
        return pulumi.get(self, "oauth_client_rsa_public_key2_fps")

    @property
    @pulumi.getter(name="oauthClientRsaPublicKeyFps")
    def oauth_client_rsa_public_key_fps(self) -> Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFp']]:
        return pulumi.get(self, "oauth_client_rsa_public_key_fps")

    @property
    @pulumi.getter(name="oauthClientTypes")
    def oauth_client_types(self) -> Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientType']]:
        return pulumi.get(self, "oauth_client_types")

    @property
    @pulumi.getter(name="oauthEnforcePkces")
    def oauth_enforce_pkces(self) -> Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkce']]:
        return pulumi.get(self, "oauth_enforce_pkces")

    @property
    @pulumi.getter(name="oauthIssueRefreshTokens")
    def oauth_issue_refresh_tokens(self) -> Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshToken']]:
        return pulumi.get(self, "oauth_issue_refresh_tokens")

    @property
    @pulumi.getter(name="oauthRedirectUris")
    def oauth_redirect_uris(self) -> Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthRedirectUri']]:
        return pulumi.get(self, "oauth_redirect_uris")

    @property
    @pulumi.getter(name="oauthRefreshTokenValidities")
    def oauth_refresh_token_validities(self) -> Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidity']]:
        return pulumi.get(self, "oauth_refresh_token_validities")

    @property
    @pulumi.getter(name="oauthTokenEndpoints")
    def oauth_token_endpoints(self) -> Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpoint']]:
        return pulumi.get(self, "oauth_token_endpoints")

    @property
    @pulumi.getter(name="oauthUseSecondaryRoles")
    def oauth_use_secondary_roles(self) -> Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRole']]:
        return pulumi.get(self, "oauth_use_secondary_roles")

    @property
    @pulumi.getter(name="preAuthorizedRolesLists")
    def pre_authorized_roles_lists(self) -> Optional[Sequence['outputs.OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesList']]:
        return pulumi.get(self, "pre_authorized_roles_lists")


@pulumi.output_type
class OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesList(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForPartnerApplicationsDescribeOutputComment(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForPartnerApplicationsDescribeOutputEnabled(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicy(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUri(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpoint(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpoint(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpoint(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientId(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2Fp(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFp(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientType(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkce(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshToken(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthRedirectUri(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidity(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpoint(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRole(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesList(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OauthIntegrationForPartnerApplicationsShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "integrationType":
            suggest = "integration_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OauthIntegrationForPartnerApplicationsShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OauthIntegrationForPartnerApplicationsShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OauthIntegrationForPartnerApplicationsShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 integration_type: Optional[str] = None,
                 name: Optional[str] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if integration_type is not None:
            pulumi.set(__self__, "integration_type", integration_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> Optional[str]:
        return pulumi.get(self, "integration_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ObjectParameterObjectIdentifier(dict):
    def __init__(__self__, *,
                 name: str,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param str name: Name of the object to set the parameter for.
        :param str database: Name of the database that the object was created in.
        :param str schema: Name of the schema that the object was created in.
        """
        pulumi.set(__self__, "name", name)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the object to set the parameter for.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Name of the database that the object was created in.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Name of the schema that the object was created in.
        """
        return pulumi.get(self, "schema")


@pulumi.output_type
class PrimaryConnectionShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountLocator":
            suggest = "account_locator"
        elif key == "accountName":
            suggest = "account_name"
        elif key == "connectionUrl":
            suggest = "connection_url"
        elif key == "createdOn":
            suggest = "created_on"
        elif key == "failoverAllowedToAccounts":
            suggest = "failover_allowed_to_accounts"
        elif key == "isPrimary":
            suggest = "is_primary"
        elif key == "organizationName":
            suggest = "organization_name"
        elif key == "regionGroup":
            suggest = "region_group"
        elif key == "snowflakeRegion":
            suggest = "snowflake_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrimaryConnectionShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrimaryConnectionShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrimaryConnectionShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_locator: Optional[str] = None,
                 account_name: Optional[str] = None,
                 comment: Optional[str] = None,
                 connection_url: Optional[str] = None,
                 created_on: Optional[str] = None,
                 failover_allowed_to_accounts: Optional[Sequence[str]] = None,
                 is_primary: Optional[bool] = None,
                 name: Optional[str] = None,
                 organization_name: Optional[str] = None,
                 primary: Optional[str] = None,
                 region_group: Optional[str] = None,
                 snowflake_region: Optional[str] = None):
        if account_locator is not None:
            pulumi.set(__self__, "account_locator", account_locator)
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if connection_url is not None:
            pulumi.set(__self__, "connection_url", connection_url)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if failover_allowed_to_accounts is not None:
            pulumi.set(__self__, "failover_allowed_to_accounts", failover_allowed_to_accounts)
        if is_primary is not None:
            pulumi.set(__self__, "is_primary", is_primary)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization_name is not None:
            pulumi.set(__self__, "organization_name", organization_name)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if region_group is not None:
            pulumi.set(__self__, "region_group", region_group)
        if snowflake_region is not None:
            pulumi.set(__self__, "snowflake_region", snowflake_region)

    @property
    @pulumi.getter(name="accountLocator")
    def account_locator(self) -> Optional[str]:
        return pulumi.get(self, "account_locator")

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[str]:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="connectionUrl")
    def connection_url(self) -> Optional[str]:
        return pulumi.get(self, "connection_url")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="failoverAllowedToAccounts")
    def failover_allowed_to_accounts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "failover_allowed_to_accounts")

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> Optional[bool]:
        return pulumi.get(self, "is_primary")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> Optional[str]:
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter
    def primary(self) -> Optional[str]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter(name="regionGroup")
    def region_group(self) -> Optional[str]:
        return pulumi.get(self, "region_group")

    @property
    @pulumi.getter(name="snowflakeRegion")
    def snowflake_region(self) -> Optional[str]:
        return pulumi.get(self, "snowflake_region")


@pulumi.output_type
class ProcedureArgument(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str):
        """
        :param str name: The argument name
        :param str type: The argument type
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The argument name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The argument type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ResourceMonitorShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "creditQuota":
            suggest = "credit_quota"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "remainingCredits":
            suggest = "remaining_credits"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "suspendAt":
            suggest = "suspend_at"
        elif key == "suspendImmediateAt":
            suggest = "suspend_immediate_at"
        elif key == "usedCredits":
            suggest = "used_credits"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceMonitorShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceMonitorShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceMonitorShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 credit_quota: Optional[float] = None,
                 end_time: Optional[str] = None,
                 frequency: Optional[str] = None,
                 level: Optional[str] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 remaining_credits: Optional[float] = None,
                 start_time: Optional[str] = None,
                 suspend_at: Optional[int] = None,
                 suspend_immediate_at: Optional[int] = None,
                 used_credits: Optional[float] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if credit_quota is not None:
            pulumi.set(__self__, "credit_quota", credit_quota)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if remaining_credits is not None:
            pulumi.set(__self__, "remaining_credits", remaining_credits)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if suspend_at is not None:
            pulumi.set(__self__, "suspend_at", suspend_at)
        if suspend_immediate_at is not None:
            pulumi.set(__self__, "suspend_immediate_at", suspend_immediate_at)
        if used_credits is not None:
            pulumi.set(__self__, "used_credits", used_credits)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="creditQuota")
    def credit_quota(self) -> Optional[float]:
        return pulumi.get(self, "credit_quota")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def frequency(self) -> Optional[str]:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="remainingCredits")
    def remaining_credits(self) -> Optional[float]:
        return pulumi.get(self, "remaining_credits")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="suspendAt")
    def suspend_at(self) -> Optional[int]:
        return pulumi.get(self, "suspend_at")

    @property
    @pulumi.getter(name="suspendImmediateAt")
    def suspend_immediate_at(self) -> Optional[int]:
        return pulumi.get(self, "suspend_immediate_at")

    @property
    @pulumi.getter(name="usedCredits")
    def used_credits(self) -> Optional[float]:
        return pulumi.get(self, "used_credits")


@pulumi.output_type
class RoleShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignedToUsers":
            suggest = "assigned_to_users"
        elif key == "createdOn":
            suggest = "created_on"
        elif key == "grantedRoles":
            suggest = "granted_roles"
        elif key == "grantedToRoles":
            suggest = "granted_to_roles"
        elif key == "isCurrent":
            suggest = "is_current"
        elif key == "isDefault":
            suggest = "is_default"
        elif key == "isInherited":
            suggest = "is_inherited"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoleShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoleShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoleShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assigned_to_users: Optional[int] = None,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 granted_roles: Optional[int] = None,
                 granted_to_roles: Optional[int] = None,
                 is_current: Optional[bool] = None,
                 is_default: Optional[bool] = None,
                 is_inherited: Optional[bool] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None):
        if assigned_to_users is not None:
            pulumi.set(__self__, "assigned_to_users", assigned_to_users)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if granted_roles is not None:
            pulumi.set(__self__, "granted_roles", granted_roles)
        if granted_to_roles is not None:
            pulumi.set(__self__, "granted_to_roles", granted_to_roles)
        if is_current is not None:
            pulumi.set(__self__, "is_current", is_current)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if is_inherited is not None:
            pulumi.set(__self__, "is_inherited", is_inherited)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)

    @property
    @pulumi.getter(name="assignedToUsers")
    def assigned_to_users(self) -> Optional[int]:
        return pulumi.get(self, "assigned_to_users")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="grantedRoles")
    def granted_roles(self) -> Optional[int]:
        return pulumi.get(self, "granted_roles")

    @property
    @pulumi.getter(name="grantedToRoles")
    def granted_to_roles(self) -> Optional[int]:
        return pulumi.get(self, "granted_to_roles")

    @property
    @pulumi.getter(name="isCurrent")
    def is_current(self) -> Optional[bool]:
        return pulumi.get(self, "is_current")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isInherited")
    def is_inherited(self) -> Optional[bool]:
        return pulumi.get(self, "is_inherited")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")


@pulumi.output_type
class RowAccessPolicyArgument(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str):
        """
        :param str name: The argument name
        :param str type: The argument type. VECTOR data types are not yet supported. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The argument name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The argument type. VECTOR data types are not yet supported. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RowAccessPolicyDescribeOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "returnType":
            suggest = "return_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RowAccessPolicyDescribeOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RowAccessPolicyDescribeOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RowAccessPolicyDescribeOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 body: Optional[str] = None,
                 name: Optional[str] = None,
                 return_type: Optional[str] = None,
                 signatures: Optional[Sequence['outputs.RowAccessPolicyDescribeOutputSignature']] = None):
        if body is not None:
            pulumi.set(__self__, "body", body)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if return_type is not None:
            pulumi.set(__self__, "return_type", return_type)
        if signatures is not None:
            pulumi.set(__self__, "signatures", signatures)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="returnType")
    def return_type(self) -> Optional[str]:
        return pulumi.get(self, "return_type")

    @property
    @pulumi.getter
    def signatures(self) -> Optional[Sequence['outputs.RowAccessPolicyDescribeOutputSignature']]:
        return pulumi.get(self, "signatures")


@pulumi.output_type
class RowAccessPolicyDescribeOutputSignature(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class RowAccessPolicyShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "ownerRoleType":
            suggest = "owner_role_type"
        elif key == "schemaName":
            suggest = "schema_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RowAccessPolicyShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RowAccessPolicyShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RowAccessPolicyShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 options: Optional[str] = None,
                 owner: Optional[str] = None,
                 owner_role_type: Optional[str] = None,
                 schema_name: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[str]:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class Saml2IntegrationDescribeOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedEmailPatterns":
            suggest = "allowed_email_patterns"
        elif key == "allowedUserDomains":
            suggest = "allowed_user_domains"
        elif key == "saml2DigestMethodsUseds":
            suggest = "saml2_digest_methods_useds"
        elif key == "saml2EnableSpInitiateds":
            suggest = "saml2_enable_sp_initiateds"
        elif key == "saml2ForceAuthns":
            suggest = "saml2_force_authns"
        elif key == "saml2Issuers":
            suggest = "saml2_issuers"
        elif key == "saml2PostLogoutRedirectUrls":
            suggest = "saml2_post_logout_redirect_urls"
        elif key == "saml2Providers":
            suggest = "saml2_providers"
        elif key == "saml2RequestedNameidFormats":
            suggest = "saml2_requested_nameid_formats"
        elif key == "saml2SignRequests":
            suggest = "saml2_sign_requests"
        elif key == "saml2SignatureMethodsUseds":
            suggest = "saml2_signature_methods_useds"
        elif key == "saml2SnowflakeAcsUrls":
            suggest = "saml2_snowflake_acs_urls"
        elif key == "saml2SnowflakeIssuerUrls":
            suggest = "saml2_snowflake_issuer_urls"
        elif key == "saml2SnowflakeMetadatas":
            suggest = "saml2_snowflake_metadatas"
        elif key == "saml2SnowflakeX509Certs":
            suggest = "saml2_snowflake_x509_certs"
        elif key == "saml2SpInitiatedLoginPageLabels":
            suggest = "saml2_sp_initiated_login_page_labels"
        elif key == "saml2SsoUrls":
            suggest = "saml2_sso_urls"
        elif key == "saml2X509Certs":
            suggest = "saml2_x509_certs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Saml2IntegrationDescribeOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Saml2IntegrationDescribeOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Saml2IntegrationDescribeOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_email_patterns: Optional[Sequence['outputs.Saml2IntegrationDescribeOutputAllowedEmailPattern']] = None,
                 allowed_user_domains: Optional[Sequence['outputs.Saml2IntegrationDescribeOutputAllowedUserDomain']] = None,
                 comments: Optional[Sequence['outputs.Saml2IntegrationDescribeOutputComment']] = None,
                 saml2_digest_methods_useds: Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2DigestMethodsUsed']] = None,
                 saml2_enable_sp_initiateds: Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2EnableSpInitiated']] = None,
                 saml2_force_authns: Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2ForceAuthn']] = None,
                 saml2_issuers: Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2Issuer']] = None,
                 saml2_post_logout_redirect_urls: Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrl']] = None,
                 saml2_providers: Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2Provider']] = None,
                 saml2_requested_nameid_formats: Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2RequestedNameidFormat']] = None,
                 saml2_sign_requests: Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2SignRequest']] = None,
                 saml2_signature_methods_useds: Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsed']] = None,
                 saml2_snowflake_acs_urls: Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrl']] = None,
                 saml2_snowflake_issuer_urls: Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrl']] = None,
                 saml2_snowflake_metadatas: Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2SnowflakeMetadata']] = None,
                 saml2_snowflake_x509_certs: Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2SnowflakeX509Cert']] = None,
                 saml2_sp_initiated_login_page_labels: Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel']] = None,
                 saml2_sso_urls: Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2SsoUrl']] = None,
                 saml2_x509_certs: Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2X509Cert']] = None):
        if allowed_email_patterns is not None:
            pulumi.set(__self__, "allowed_email_patterns", allowed_email_patterns)
        if allowed_user_domains is not None:
            pulumi.set(__self__, "allowed_user_domains", allowed_user_domains)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if saml2_digest_methods_useds is not None:
            pulumi.set(__self__, "saml2_digest_methods_useds", saml2_digest_methods_useds)
        if saml2_enable_sp_initiateds is not None:
            pulumi.set(__self__, "saml2_enable_sp_initiateds", saml2_enable_sp_initiateds)
        if saml2_force_authns is not None:
            pulumi.set(__self__, "saml2_force_authns", saml2_force_authns)
        if saml2_issuers is not None:
            pulumi.set(__self__, "saml2_issuers", saml2_issuers)
        if saml2_post_logout_redirect_urls is not None:
            pulumi.set(__self__, "saml2_post_logout_redirect_urls", saml2_post_logout_redirect_urls)
        if saml2_providers is not None:
            pulumi.set(__self__, "saml2_providers", saml2_providers)
        if saml2_requested_nameid_formats is not None:
            pulumi.set(__self__, "saml2_requested_nameid_formats", saml2_requested_nameid_formats)
        if saml2_sign_requests is not None:
            pulumi.set(__self__, "saml2_sign_requests", saml2_sign_requests)
        if saml2_signature_methods_useds is not None:
            pulumi.set(__self__, "saml2_signature_methods_useds", saml2_signature_methods_useds)
        if saml2_snowflake_acs_urls is not None:
            pulumi.set(__self__, "saml2_snowflake_acs_urls", saml2_snowflake_acs_urls)
        if saml2_snowflake_issuer_urls is not None:
            pulumi.set(__self__, "saml2_snowflake_issuer_urls", saml2_snowflake_issuer_urls)
        if saml2_snowflake_metadatas is not None:
            pulumi.set(__self__, "saml2_snowflake_metadatas", saml2_snowflake_metadatas)
        if saml2_snowflake_x509_certs is not None:
            pulumi.set(__self__, "saml2_snowflake_x509_certs", saml2_snowflake_x509_certs)
        if saml2_sp_initiated_login_page_labels is not None:
            pulumi.set(__self__, "saml2_sp_initiated_login_page_labels", saml2_sp_initiated_login_page_labels)
        if saml2_sso_urls is not None:
            pulumi.set(__self__, "saml2_sso_urls", saml2_sso_urls)
        if saml2_x509_certs is not None:
            pulumi.set(__self__, "saml2_x509_certs", saml2_x509_certs)

    @property
    @pulumi.getter(name="allowedEmailPatterns")
    def allowed_email_patterns(self) -> Optional[Sequence['outputs.Saml2IntegrationDescribeOutputAllowedEmailPattern']]:
        return pulumi.get(self, "allowed_email_patterns")

    @property
    @pulumi.getter(name="allowedUserDomains")
    def allowed_user_domains(self) -> Optional[Sequence['outputs.Saml2IntegrationDescribeOutputAllowedUserDomain']]:
        return pulumi.get(self, "allowed_user_domains")

    @property
    @pulumi.getter
    def comments(self) -> Optional[Sequence['outputs.Saml2IntegrationDescribeOutputComment']]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="saml2DigestMethodsUseds")
    def saml2_digest_methods_useds(self) -> Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2DigestMethodsUsed']]:
        return pulumi.get(self, "saml2_digest_methods_useds")

    @property
    @pulumi.getter(name="saml2EnableSpInitiateds")
    def saml2_enable_sp_initiateds(self) -> Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2EnableSpInitiated']]:
        return pulumi.get(self, "saml2_enable_sp_initiateds")

    @property
    @pulumi.getter(name="saml2ForceAuthns")
    def saml2_force_authns(self) -> Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2ForceAuthn']]:
        return pulumi.get(self, "saml2_force_authns")

    @property
    @pulumi.getter(name="saml2Issuers")
    def saml2_issuers(self) -> Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2Issuer']]:
        return pulumi.get(self, "saml2_issuers")

    @property
    @pulumi.getter(name="saml2PostLogoutRedirectUrls")
    def saml2_post_logout_redirect_urls(self) -> Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrl']]:
        return pulumi.get(self, "saml2_post_logout_redirect_urls")

    @property
    @pulumi.getter(name="saml2Providers")
    def saml2_providers(self) -> Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2Provider']]:
        return pulumi.get(self, "saml2_providers")

    @property
    @pulumi.getter(name="saml2RequestedNameidFormats")
    def saml2_requested_nameid_formats(self) -> Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2RequestedNameidFormat']]:
        return pulumi.get(self, "saml2_requested_nameid_formats")

    @property
    @pulumi.getter(name="saml2SignRequests")
    def saml2_sign_requests(self) -> Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2SignRequest']]:
        return pulumi.get(self, "saml2_sign_requests")

    @property
    @pulumi.getter(name="saml2SignatureMethodsUseds")
    def saml2_signature_methods_useds(self) -> Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsed']]:
        return pulumi.get(self, "saml2_signature_methods_useds")

    @property
    @pulumi.getter(name="saml2SnowflakeAcsUrls")
    def saml2_snowflake_acs_urls(self) -> Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrl']]:
        return pulumi.get(self, "saml2_snowflake_acs_urls")

    @property
    @pulumi.getter(name="saml2SnowflakeIssuerUrls")
    def saml2_snowflake_issuer_urls(self) -> Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrl']]:
        return pulumi.get(self, "saml2_snowflake_issuer_urls")

    @property
    @pulumi.getter(name="saml2SnowflakeMetadatas")
    def saml2_snowflake_metadatas(self) -> Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2SnowflakeMetadata']]:
        return pulumi.get(self, "saml2_snowflake_metadatas")

    @property
    @pulumi.getter(name="saml2SnowflakeX509Certs")
    def saml2_snowflake_x509_certs(self) -> Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2SnowflakeX509Cert']]:
        return pulumi.get(self, "saml2_snowflake_x509_certs")

    @property
    @pulumi.getter(name="saml2SpInitiatedLoginPageLabels")
    def saml2_sp_initiated_login_page_labels(self) -> Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel']]:
        return pulumi.get(self, "saml2_sp_initiated_login_page_labels")

    @property
    @pulumi.getter(name="saml2SsoUrls")
    def saml2_sso_urls(self) -> Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2SsoUrl']]:
        return pulumi.get(self, "saml2_sso_urls")

    @property
    @pulumi.getter(name="saml2X509Certs")
    def saml2_x509_certs(self) -> Optional[Sequence['outputs.Saml2IntegrationDescribeOutputSaml2X509Cert']]:
        return pulumi.get(self, "saml2_x509_certs")


@pulumi.output_type
class Saml2IntegrationDescribeOutputAllowedEmailPattern(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Saml2IntegrationDescribeOutputAllowedUserDomain(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Saml2IntegrationDescribeOutputComment(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Saml2IntegrationDescribeOutputSaml2DigestMethodsUsed(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Saml2IntegrationDescribeOutputSaml2EnableSpInitiated(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Saml2IntegrationDescribeOutputSaml2ForceAuthn(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Saml2IntegrationDescribeOutputSaml2Issuer(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrl(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Saml2IntegrationDescribeOutputSaml2Provider(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Saml2IntegrationDescribeOutputSaml2RequestedNameidFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Saml2IntegrationDescribeOutputSaml2SignRequest(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsed(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrl(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrl(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Saml2IntegrationDescribeOutputSaml2SnowflakeMetadata(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Saml2IntegrationDescribeOutputSaml2SnowflakeX509Cert(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Saml2IntegrationDescribeOutputSaml2SsoUrl(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Saml2IntegrationDescribeOutputSaml2X509Cert(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Saml2IntegrationShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "integrationType":
            suggest = "integration_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Saml2IntegrationShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Saml2IntegrationShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Saml2IntegrationShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 integration_type: Optional[str] = None,
                 name: Optional[str] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if integration_type is not None:
            pulumi.set(__self__, "integration_type", integration_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> Optional[str]:
        return pulumi.get(self, "integration_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SchemaDescribeOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SchemaDescribeOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SchemaDescribeOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SchemaDescribeOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_on: Optional[str] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SchemaParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataRetentionTimeInDays":
            suggest = "data_retention_time_in_days"
        elif key == "defaultDdlCollations":
            suggest = "default_ddl_collations"
        elif key == "enableConsoleOutputs":
            suggest = "enable_console_outputs"
        elif key == "externalVolumes":
            suggest = "external_volumes"
        elif key == "logLevels":
            suggest = "log_levels"
        elif key == "maxDataExtensionTimeInDays":
            suggest = "max_data_extension_time_in_days"
        elif key == "pipeExecutionPauseds":
            suggest = "pipe_execution_pauseds"
        elif key == "quotedIdentifiersIgnoreCases":
            suggest = "quoted_identifiers_ignore_cases"
        elif key == "replaceInvalidCharacters":
            suggest = "replace_invalid_characters"
        elif key == "storageSerializationPolicies":
            suggest = "storage_serialization_policies"
        elif key == "suspendTaskAfterNumFailures":
            suggest = "suspend_task_after_num_failures"
        elif key == "taskAutoRetryAttempts":
            suggest = "task_auto_retry_attempts"
        elif key == "traceLevels":
            suggest = "trace_levels"
        elif key == "userTaskManagedInitialWarehouseSizes":
            suggest = "user_task_managed_initial_warehouse_sizes"
        elif key == "userTaskMinimumTriggerIntervalInSeconds":
            suggest = "user_task_minimum_trigger_interval_in_seconds"
        elif key == "userTaskTimeoutMs":
            suggest = "user_task_timeout_ms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SchemaParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SchemaParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SchemaParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalogs: Optional[Sequence['outputs.SchemaParameterCatalog']] = None,
                 data_retention_time_in_days: Optional[Sequence['outputs.SchemaParameterDataRetentionTimeInDay']] = None,
                 default_ddl_collations: Optional[Sequence['outputs.SchemaParameterDefaultDdlCollation']] = None,
                 enable_console_outputs: Optional[Sequence['outputs.SchemaParameterEnableConsoleOutput']] = None,
                 external_volumes: Optional[Sequence['outputs.SchemaParameterExternalVolume']] = None,
                 log_levels: Optional[Sequence['outputs.SchemaParameterLogLevel']] = None,
                 max_data_extension_time_in_days: Optional[Sequence['outputs.SchemaParameterMaxDataExtensionTimeInDay']] = None,
                 pipe_execution_pauseds: Optional[Sequence['outputs.SchemaParameterPipeExecutionPaused']] = None,
                 quoted_identifiers_ignore_cases: Optional[Sequence['outputs.SchemaParameterQuotedIdentifiersIgnoreCase']] = None,
                 replace_invalid_characters: Optional[Sequence['outputs.SchemaParameterReplaceInvalidCharacter']] = None,
                 storage_serialization_policies: Optional[Sequence['outputs.SchemaParameterStorageSerializationPolicy']] = None,
                 suspend_task_after_num_failures: Optional[Sequence['outputs.SchemaParameterSuspendTaskAfterNumFailure']] = None,
                 task_auto_retry_attempts: Optional[Sequence['outputs.SchemaParameterTaskAutoRetryAttempt']] = None,
                 trace_levels: Optional[Sequence['outputs.SchemaParameterTraceLevel']] = None,
                 user_task_managed_initial_warehouse_sizes: Optional[Sequence['outputs.SchemaParameterUserTaskManagedInitialWarehouseSize']] = None,
                 user_task_minimum_trigger_interval_in_seconds: Optional[Sequence['outputs.SchemaParameterUserTaskMinimumTriggerIntervalInSecond']] = None,
                 user_task_timeout_ms: Optional[Sequence['outputs.SchemaParameterUserTaskTimeoutM']] = None):
        if catalogs is not None:
            pulumi.set(__self__, "catalogs", catalogs)
        if data_retention_time_in_days is not None:
            pulumi.set(__self__, "data_retention_time_in_days", data_retention_time_in_days)
        if default_ddl_collations is not None:
            pulumi.set(__self__, "default_ddl_collations", default_ddl_collations)
        if enable_console_outputs is not None:
            pulumi.set(__self__, "enable_console_outputs", enable_console_outputs)
        if external_volumes is not None:
            pulumi.set(__self__, "external_volumes", external_volumes)
        if log_levels is not None:
            pulumi.set(__self__, "log_levels", log_levels)
        if max_data_extension_time_in_days is not None:
            pulumi.set(__self__, "max_data_extension_time_in_days", max_data_extension_time_in_days)
        if pipe_execution_pauseds is not None:
            pulumi.set(__self__, "pipe_execution_pauseds", pipe_execution_pauseds)
        if quoted_identifiers_ignore_cases is not None:
            pulumi.set(__self__, "quoted_identifiers_ignore_cases", quoted_identifiers_ignore_cases)
        if replace_invalid_characters is not None:
            pulumi.set(__self__, "replace_invalid_characters", replace_invalid_characters)
        if storage_serialization_policies is not None:
            pulumi.set(__self__, "storage_serialization_policies", storage_serialization_policies)
        if suspend_task_after_num_failures is not None:
            pulumi.set(__self__, "suspend_task_after_num_failures", suspend_task_after_num_failures)
        if task_auto_retry_attempts is not None:
            pulumi.set(__self__, "task_auto_retry_attempts", task_auto_retry_attempts)
        if trace_levels is not None:
            pulumi.set(__self__, "trace_levels", trace_levels)
        if user_task_managed_initial_warehouse_sizes is not None:
            pulumi.set(__self__, "user_task_managed_initial_warehouse_sizes", user_task_managed_initial_warehouse_sizes)
        if user_task_minimum_trigger_interval_in_seconds is not None:
            pulumi.set(__self__, "user_task_minimum_trigger_interval_in_seconds", user_task_minimum_trigger_interval_in_seconds)
        if user_task_timeout_ms is not None:
            pulumi.set(__self__, "user_task_timeout_ms", user_task_timeout_ms)

    @property
    @pulumi.getter
    def catalogs(self) -> Optional[Sequence['outputs.SchemaParameterCatalog']]:
        return pulumi.get(self, "catalogs")

    @property
    @pulumi.getter(name="dataRetentionTimeInDays")
    def data_retention_time_in_days(self) -> Optional[Sequence['outputs.SchemaParameterDataRetentionTimeInDay']]:
        return pulumi.get(self, "data_retention_time_in_days")

    @property
    @pulumi.getter(name="defaultDdlCollations")
    def default_ddl_collations(self) -> Optional[Sequence['outputs.SchemaParameterDefaultDdlCollation']]:
        return pulumi.get(self, "default_ddl_collations")

    @property
    @pulumi.getter(name="enableConsoleOutputs")
    def enable_console_outputs(self) -> Optional[Sequence['outputs.SchemaParameterEnableConsoleOutput']]:
        return pulumi.get(self, "enable_console_outputs")

    @property
    @pulumi.getter(name="externalVolumes")
    def external_volumes(self) -> Optional[Sequence['outputs.SchemaParameterExternalVolume']]:
        return pulumi.get(self, "external_volumes")

    @property
    @pulumi.getter(name="logLevels")
    def log_levels(self) -> Optional[Sequence['outputs.SchemaParameterLogLevel']]:
        return pulumi.get(self, "log_levels")

    @property
    @pulumi.getter(name="maxDataExtensionTimeInDays")
    def max_data_extension_time_in_days(self) -> Optional[Sequence['outputs.SchemaParameterMaxDataExtensionTimeInDay']]:
        return pulumi.get(self, "max_data_extension_time_in_days")

    @property
    @pulumi.getter(name="pipeExecutionPauseds")
    def pipe_execution_pauseds(self) -> Optional[Sequence['outputs.SchemaParameterPipeExecutionPaused']]:
        return pulumi.get(self, "pipe_execution_pauseds")

    @property
    @pulumi.getter(name="quotedIdentifiersIgnoreCases")
    def quoted_identifiers_ignore_cases(self) -> Optional[Sequence['outputs.SchemaParameterQuotedIdentifiersIgnoreCase']]:
        return pulumi.get(self, "quoted_identifiers_ignore_cases")

    @property
    @pulumi.getter(name="replaceInvalidCharacters")
    def replace_invalid_characters(self) -> Optional[Sequence['outputs.SchemaParameterReplaceInvalidCharacter']]:
        return pulumi.get(self, "replace_invalid_characters")

    @property
    @pulumi.getter(name="storageSerializationPolicies")
    def storage_serialization_policies(self) -> Optional[Sequence['outputs.SchemaParameterStorageSerializationPolicy']]:
        return pulumi.get(self, "storage_serialization_policies")

    @property
    @pulumi.getter(name="suspendTaskAfterNumFailures")
    def suspend_task_after_num_failures(self) -> Optional[Sequence['outputs.SchemaParameterSuspendTaskAfterNumFailure']]:
        return pulumi.get(self, "suspend_task_after_num_failures")

    @property
    @pulumi.getter(name="taskAutoRetryAttempts")
    def task_auto_retry_attempts(self) -> Optional[Sequence['outputs.SchemaParameterTaskAutoRetryAttempt']]:
        return pulumi.get(self, "task_auto_retry_attempts")

    @property
    @pulumi.getter(name="traceLevels")
    def trace_levels(self) -> Optional[Sequence['outputs.SchemaParameterTraceLevel']]:
        return pulumi.get(self, "trace_levels")

    @property
    @pulumi.getter(name="userTaskManagedInitialWarehouseSizes")
    def user_task_managed_initial_warehouse_sizes(self) -> Optional[Sequence['outputs.SchemaParameterUserTaskManagedInitialWarehouseSize']]:
        return pulumi.get(self, "user_task_managed_initial_warehouse_sizes")

    @property
    @pulumi.getter(name="userTaskMinimumTriggerIntervalInSeconds")
    def user_task_minimum_trigger_interval_in_seconds(self) -> Optional[Sequence['outputs.SchemaParameterUserTaskMinimumTriggerIntervalInSecond']]:
        return pulumi.get(self, "user_task_minimum_trigger_interval_in_seconds")

    @property
    @pulumi.getter(name="userTaskTimeoutMs")
    def user_task_timeout_ms(self) -> Optional[Sequence['outputs.SchemaParameterUserTaskTimeoutM']]:
        return pulumi.get(self, "user_task_timeout_ms")


@pulumi.output_type
class SchemaParameterCatalog(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SchemaParameterDataRetentionTimeInDay(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SchemaParameterDefaultDdlCollation(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SchemaParameterEnableConsoleOutput(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SchemaParameterExternalVolume(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SchemaParameterLogLevel(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SchemaParameterMaxDataExtensionTimeInDay(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SchemaParameterPipeExecutionPaused(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SchemaParameterQuotedIdentifiersIgnoreCase(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SchemaParameterReplaceInvalidCharacter(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SchemaParameterStorageSerializationPolicy(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SchemaParameterSuspendTaskAfterNumFailure(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SchemaParameterTaskAutoRetryAttempt(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SchemaParameterTraceLevel(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SchemaParameterUserTaskManagedInitialWarehouseSize(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SchemaParameterUserTaskMinimumTriggerIntervalInSecond(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SchemaParameterUserTaskTimeoutM(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SchemaShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "droppedOn":
            suggest = "dropped_on"
        elif key == "isCurrent":
            suggest = "is_current"
        elif key == "isDefault":
            suggest = "is_default"
        elif key == "ownerRoleType":
            suggest = "owner_role_type"
        elif key == "retentionTime":
            suggest = "retention_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SchemaShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SchemaShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SchemaShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 dropped_on: Optional[str] = None,
                 is_current: Optional[bool] = None,
                 is_default: Optional[bool] = None,
                 name: Optional[str] = None,
                 options: Optional[str] = None,
                 owner: Optional[str] = None,
                 owner_role_type: Optional[str] = None,
                 retention_time: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if dropped_on is not None:
            pulumi.set(__self__, "dropped_on", dropped_on)
        if is_current is not None:
            pulumi.set(__self__, "is_current", is_current)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if retention_time is not None:
            pulumi.set(__self__, "retention_time", retention_time)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="droppedOn")
    def dropped_on(self) -> Optional[str]:
        return pulumi.get(self, "dropped_on")

    @property
    @pulumi.getter(name="isCurrent")
    def is_current(self) -> Optional[bool]:
        return pulumi.get(self, "is_current")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[str]:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="retentionTime")
    def retention_time(self) -> Optional[str]:
        return pulumi.get(self, "retention_time")


@pulumi.output_type
class ScimIntegrationDescribeOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkPolicies":
            suggest = "network_policies"
        elif key == "runAsRoles":
            suggest = "run_as_roles"
        elif key == "syncPasswords":
            suggest = "sync_passwords"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScimIntegrationDescribeOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScimIntegrationDescribeOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScimIntegrationDescribeOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comments: Optional[Sequence['outputs.ScimIntegrationDescribeOutputComment']] = None,
                 enableds: Optional[Sequence['outputs.ScimIntegrationDescribeOutputEnabled']] = None,
                 network_policies: Optional[Sequence['outputs.ScimIntegrationDescribeOutputNetworkPolicy']] = None,
                 run_as_roles: Optional[Sequence['outputs.ScimIntegrationDescribeOutputRunAsRole']] = None,
                 sync_passwords: Optional[Sequence['outputs.ScimIntegrationDescribeOutputSyncPassword']] = None):
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if enableds is not None:
            pulumi.set(__self__, "enableds", enableds)
        if network_policies is not None:
            pulumi.set(__self__, "network_policies", network_policies)
        if run_as_roles is not None:
            pulumi.set(__self__, "run_as_roles", run_as_roles)
        if sync_passwords is not None:
            pulumi.set(__self__, "sync_passwords", sync_passwords)

    @property
    @pulumi.getter
    def comments(self) -> Optional[Sequence['outputs.ScimIntegrationDescribeOutputComment']]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def enableds(self) -> Optional[Sequence['outputs.ScimIntegrationDescribeOutputEnabled']]:
        return pulumi.get(self, "enableds")

    @property
    @pulumi.getter(name="networkPolicies")
    def network_policies(self) -> Optional[Sequence['outputs.ScimIntegrationDescribeOutputNetworkPolicy']]:
        return pulumi.get(self, "network_policies")

    @property
    @pulumi.getter(name="runAsRoles")
    def run_as_roles(self) -> Optional[Sequence['outputs.ScimIntegrationDescribeOutputRunAsRole']]:
        return pulumi.get(self, "run_as_roles")

    @property
    @pulumi.getter(name="syncPasswords")
    def sync_passwords(self) -> Optional[Sequence['outputs.ScimIntegrationDescribeOutputSyncPassword']]:
        return pulumi.get(self, "sync_passwords")


@pulumi.output_type
class ScimIntegrationDescribeOutputComment(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ScimIntegrationDescribeOutputEnabled(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ScimIntegrationDescribeOutputNetworkPolicy(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ScimIntegrationDescribeOutputRunAsRole(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ScimIntegrationDescribeOutputSyncPassword(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ScimIntegrationShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "integrationType":
            suggest = "integration_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScimIntegrationShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScimIntegrationShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScimIntegrationShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 integration_type: Optional[str] = None,
                 name: Optional[str] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if integration_type is not None:
            pulumi.set(__self__, "integration_type", integration_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> Optional[str]:
        return pulumi.get(self, "integration_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SecondaryConnectionShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountLocator":
            suggest = "account_locator"
        elif key == "accountName":
            suggest = "account_name"
        elif key == "connectionUrl":
            suggest = "connection_url"
        elif key == "createdOn":
            suggest = "created_on"
        elif key == "failoverAllowedToAccounts":
            suggest = "failover_allowed_to_accounts"
        elif key == "isPrimary":
            suggest = "is_primary"
        elif key == "organizationName":
            suggest = "organization_name"
        elif key == "regionGroup":
            suggest = "region_group"
        elif key == "snowflakeRegion":
            suggest = "snowflake_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecondaryConnectionShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecondaryConnectionShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecondaryConnectionShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_locator: Optional[str] = None,
                 account_name: Optional[str] = None,
                 comment: Optional[str] = None,
                 connection_url: Optional[str] = None,
                 created_on: Optional[str] = None,
                 failover_allowed_to_accounts: Optional[Sequence[str]] = None,
                 is_primary: Optional[bool] = None,
                 name: Optional[str] = None,
                 organization_name: Optional[str] = None,
                 primary: Optional[str] = None,
                 region_group: Optional[str] = None,
                 snowflake_region: Optional[str] = None):
        if account_locator is not None:
            pulumi.set(__self__, "account_locator", account_locator)
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if connection_url is not None:
            pulumi.set(__self__, "connection_url", connection_url)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if failover_allowed_to_accounts is not None:
            pulumi.set(__self__, "failover_allowed_to_accounts", failover_allowed_to_accounts)
        if is_primary is not None:
            pulumi.set(__self__, "is_primary", is_primary)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization_name is not None:
            pulumi.set(__self__, "organization_name", organization_name)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if region_group is not None:
            pulumi.set(__self__, "region_group", region_group)
        if snowflake_region is not None:
            pulumi.set(__self__, "snowflake_region", snowflake_region)

    @property
    @pulumi.getter(name="accountLocator")
    def account_locator(self) -> Optional[str]:
        return pulumi.get(self, "account_locator")

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[str]:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="connectionUrl")
    def connection_url(self) -> Optional[str]:
        return pulumi.get(self, "connection_url")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="failoverAllowedToAccounts")
    def failover_allowed_to_accounts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "failover_allowed_to_accounts")

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> Optional[bool]:
        return pulumi.get(self, "is_primary")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> Optional[str]:
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter
    def primary(self) -> Optional[str]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter(name="regionGroup")
    def region_group(self) -> Optional[str]:
        return pulumi.get(self, "region_group")

    @property
    @pulumi.getter(name="snowflakeRegion")
    def snowflake_region(self) -> Optional[str]:
        return pulumi.get(self, "snowflake_region")


@pulumi.output_type
class SecretWithAuthorizationCodeGrantDescribeOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "integrationName":
            suggest = "integration_name"
        elif key == "oauthAccessTokenExpiryTime":
            suggest = "oauth_access_token_expiry_time"
        elif key == "oauthRefreshTokenExpiryTime":
            suggest = "oauth_refresh_token_expiry_time"
        elif key == "oauthScopes":
            suggest = "oauth_scopes"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "secretType":
            suggest = "secret_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretWithAuthorizationCodeGrantDescribeOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretWithAuthorizationCodeGrantDescribeOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretWithAuthorizationCodeGrantDescribeOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 integration_name: Optional[str] = None,
                 name: Optional[str] = None,
                 oauth_access_token_expiry_time: Optional[str] = None,
                 oauth_refresh_token_expiry_time: Optional[str] = None,
                 oauth_scopes: Optional[Sequence[str]] = None,
                 owner: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 secret_type: Optional[str] = None,
                 username: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if integration_name is not None:
            pulumi.set(__self__, "integration_name", integration_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth_access_token_expiry_time is not None:
            pulumi.set(__self__, "oauth_access_token_expiry_time", oauth_access_token_expiry_time)
        if oauth_refresh_token_expiry_time is not None:
            pulumi.set(__self__, "oauth_refresh_token_expiry_time", oauth_refresh_token_expiry_time)
        if oauth_scopes is not None:
            pulumi.set(__self__, "oauth_scopes", oauth_scopes)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="integrationName")
    def integration_name(self) -> Optional[str]:
        return pulumi.get(self, "integration_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oauthAccessTokenExpiryTime")
    def oauth_access_token_expiry_time(self) -> Optional[str]:
        return pulumi.get(self, "oauth_access_token_expiry_time")

    @property
    @pulumi.getter(name="oauthRefreshTokenExpiryTime")
    def oauth_refresh_token_expiry_time(self) -> Optional[str]:
        return pulumi.get(self, "oauth_refresh_token_expiry_time")

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "oauth_scopes")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[str]:
        return pulumi.get(self, "secret_type")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class SecretWithAuthorizationCodeGrantShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "oauthScopes":
            suggest = "oauth_scopes"
        elif key == "ownerRoleType":
            suggest = "owner_role_type"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "secretType":
            suggest = "secret_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretWithAuthorizationCodeGrantShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretWithAuthorizationCodeGrantShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretWithAuthorizationCodeGrantShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 name: Optional[str] = None,
                 oauth_scopes: Optional[Sequence[str]] = None,
                 owner: Optional[str] = None,
                 owner_role_type: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 secret_type: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth_scopes is not None:
            pulumi.set(__self__, "oauth_scopes", oauth_scopes)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "oauth_scopes")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[str]:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[str]:
        return pulumi.get(self, "secret_type")


@pulumi.output_type
class SecretWithBasicAuthenticationDescribeOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "integrationName":
            suggest = "integration_name"
        elif key == "oauthAccessTokenExpiryTime":
            suggest = "oauth_access_token_expiry_time"
        elif key == "oauthRefreshTokenExpiryTime":
            suggest = "oauth_refresh_token_expiry_time"
        elif key == "oauthScopes":
            suggest = "oauth_scopes"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "secretType":
            suggest = "secret_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretWithBasicAuthenticationDescribeOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretWithBasicAuthenticationDescribeOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretWithBasicAuthenticationDescribeOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 integration_name: Optional[str] = None,
                 name: Optional[str] = None,
                 oauth_access_token_expiry_time: Optional[str] = None,
                 oauth_refresh_token_expiry_time: Optional[str] = None,
                 oauth_scopes: Optional[Sequence[str]] = None,
                 owner: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 secret_type: Optional[str] = None,
                 username: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if integration_name is not None:
            pulumi.set(__self__, "integration_name", integration_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth_access_token_expiry_time is not None:
            pulumi.set(__self__, "oauth_access_token_expiry_time", oauth_access_token_expiry_time)
        if oauth_refresh_token_expiry_time is not None:
            pulumi.set(__self__, "oauth_refresh_token_expiry_time", oauth_refresh_token_expiry_time)
        if oauth_scopes is not None:
            pulumi.set(__self__, "oauth_scopes", oauth_scopes)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="integrationName")
    def integration_name(self) -> Optional[str]:
        return pulumi.get(self, "integration_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oauthAccessTokenExpiryTime")
    def oauth_access_token_expiry_time(self) -> Optional[str]:
        return pulumi.get(self, "oauth_access_token_expiry_time")

    @property
    @pulumi.getter(name="oauthRefreshTokenExpiryTime")
    def oauth_refresh_token_expiry_time(self) -> Optional[str]:
        return pulumi.get(self, "oauth_refresh_token_expiry_time")

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "oauth_scopes")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[str]:
        return pulumi.get(self, "secret_type")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class SecretWithBasicAuthenticationShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "oauthScopes":
            suggest = "oauth_scopes"
        elif key == "ownerRoleType":
            suggest = "owner_role_type"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "secretType":
            suggest = "secret_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretWithBasicAuthenticationShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretWithBasicAuthenticationShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretWithBasicAuthenticationShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 name: Optional[str] = None,
                 oauth_scopes: Optional[Sequence[str]] = None,
                 owner: Optional[str] = None,
                 owner_role_type: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 secret_type: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth_scopes is not None:
            pulumi.set(__self__, "oauth_scopes", oauth_scopes)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "oauth_scopes")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[str]:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[str]:
        return pulumi.get(self, "secret_type")


@pulumi.output_type
class SecretWithClientCredentialsDescribeOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "integrationName":
            suggest = "integration_name"
        elif key == "oauthAccessTokenExpiryTime":
            suggest = "oauth_access_token_expiry_time"
        elif key == "oauthRefreshTokenExpiryTime":
            suggest = "oauth_refresh_token_expiry_time"
        elif key == "oauthScopes":
            suggest = "oauth_scopes"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "secretType":
            suggest = "secret_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretWithClientCredentialsDescribeOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretWithClientCredentialsDescribeOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretWithClientCredentialsDescribeOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 integration_name: Optional[str] = None,
                 name: Optional[str] = None,
                 oauth_access_token_expiry_time: Optional[str] = None,
                 oauth_refresh_token_expiry_time: Optional[str] = None,
                 oauth_scopes: Optional[Sequence[str]] = None,
                 owner: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 secret_type: Optional[str] = None,
                 username: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if integration_name is not None:
            pulumi.set(__self__, "integration_name", integration_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth_access_token_expiry_time is not None:
            pulumi.set(__self__, "oauth_access_token_expiry_time", oauth_access_token_expiry_time)
        if oauth_refresh_token_expiry_time is not None:
            pulumi.set(__self__, "oauth_refresh_token_expiry_time", oauth_refresh_token_expiry_time)
        if oauth_scopes is not None:
            pulumi.set(__self__, "oauth_scopes", oauth_scopes)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="integrationName")
    def integration_name(self) -> Optional[str]:
        return pulumi.get(self, "integration_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oauthAccessTokenExpiryTime")
    def oauth_access_token_expiry_time(self) -> Optional[str]:
        return pulumi.get(self, "oauth_access_token_expiry_time")

    @property
    @pulumi.getter(name="oauthRefreshTokenExpiryTime")
    def oauth_refresh_token_expiry_time(self) -> Optional[str]:
        return pulumi.get(self, "oauth_refresh_token_expiry_time")

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "oauth_scopes")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[str]:
        return pulumi.get(self, "secret_type")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class SecretWithClientCredentialsShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "oauthScopes":
            suggest = "oauth_scopes"
        elif key == "ownerRoleType":
            suggest = "owner_role_type"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "secretType":
            suggest = "secret_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretWithClientCredentialsShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretWithClientCredentialsShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretWithClientCredentialsShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 name: Optional[str] = None,
                 oauth_scopes: Optional[Sequence[str]] = None,
                 owner: Optional[str] = None,
                 owner_role_type: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 secret_type: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth_scopes is not None:
            pulumi.set(__self__, "oauth_scopes", oauth_scopes)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "oauth_scopes")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[str]:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[str]:
        return pulumi.get(self, "secret_type")


@pulumi.output_type
class SecretWithGenericStringDescribeOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "integrationName":
            suggest = "integration_name"
        elif key == "oauthAccessTokenExpiryTime":
            suggest = "oauth_access_token_expiry_time"
        elif key == "oauthRefreshTokenExpiryTime":
            suggest = "oauth_refresh_token_expiry_time"
        elif key == "oauthScopes":
            suggest = "oauth_scopes"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "secretType":
            suggest = "secret_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretWithGenericStringDescribeOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretWithGenericStringDescribeOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretWithGenericStringDescribeOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 integration_name: Optional[str] = None,
                 name: Optional[str] = None,
                 oauth_access_token_expiry_time: Optional[str] = None,
                 oauth_refresh_token_expiry_time: Optional[str] = None,
                 oauth_scopes: Optional[Sequence[str]] = None,
                 owner: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 secret_type: Optional[str] = None,
                 username: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if integration_name is not None:
            pulumi.set(__self__, "integration_name", integration_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth_access_token_expiry_time is not None:
            pulumi.set(__self__, "oauth_access_token_expiry_time", oauth_access_token_expiry_time)
        if oauth_refresh_token_expiry_time is not None:
            pulumi.set(__self__, "oauth_refresh_token_expiry_time", oauth_refresh_token_expiry_time)
        if oauth_scopes is not None:
            pulumi.set(__self__, "oauth_scopes", oauth_scopes)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="integrationName")
    def integration_name(self) -> Optional[str]:
        return pulumi.get(self, "integration_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oauthAccessTokenExpiryTime")
    def oauth_access_token_expiry_time(self) -> Optional[str]:
        return pulumi.get(self, "oauth_access_token_expiry_time")

    @property
    @pulumi.getter(name="oauthRefreshTokenExpiryTime")
    def oauth_refresh_token_expiry_time(self) -> Optional[str]:
        return pulumi.get(self, "oauth_refresh_token_expiry_time")

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "oauth_scopes")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[str]:
        return pulumi.get(self, "secret_type")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class SecretWithGenericStringShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "oauthScopes":
            suggest = "oauth_scopes"
        elif key == "ownerRoleType":
            suggest = "owner_role_type"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "secretType":
            suggest = "secret_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretWithGenericStringShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretWithGenericStringShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretWithGenericStringShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 name: Optional[str] = None,
                 oauth_scopes: Optional[Sequence[str]] = None,
                 owner: Optional[str] = None,
                 owner_role_type: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 secret_type: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth_scopes is not None:
            pulumi.set(__self__, "oauth_scopes", oauth_scopes)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "oauth_scopes")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[str]:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[str]:
        return pulumi.get(self, "secret_type")


@pulumi.output_type
class ServiceUserParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "abortDetachedQueries":
            suggest = "abort_detached_queries"
        elif key == "binaryInputFormats":
            suggest = "binary_input_formats"
        elif key == "binaryOutputFormats":
            suggest = "binary_output_formats"
        elif key == "clientMemoryLimits":
            suggest = "client_memory_limits"
        elif key == "clientMetadataRequestUseConnectionCtxes":
            suggest = "client_metadata_request_use_connection_ctxes"
        elif key == "clientPrefetchThreads":
            suggest = "client_prefetch_threads"
        elif key == "clientResultChunkSizes":
            suggest = "client_result_chunk_sizes"
        elif key == "clientResultColumnCaseInsensitives":
            suggest = "client_result_column_case_insensitives"
        elif key == "clientSessionKeepAliveHeartbeatFrequencies":
            suggest = "client_session_keep_alive_heartbeat_frequencies"
        elif key == "clientSessionKeepAlives":
            suggest = "client_session_keep_alives"
        elif key == "clientTimestampTypeMappings":
            suggest = "client_timestamp_type_mappings"
        elif key == "dateInputFormats":
            suggest = "date_input_formats"
        elif key == "dateOutputFormats":
            suggest = "date_output_formats"
        elif key == "enableUnloadPhysicalTypeOptimizations":
            suggest = "enable_unload_physical_type_optimizations"
        elif key == "enableUnredactedQuerySyntaxErrors":
            suggest = "enable_unredacted_query_syntax_errors"
        elif key == "errorOnNondeterministicMerges":
            suggest = "error_on_nondeterministic_merges"
        elif key == "errorOnNondeterministicUpdates":
            suggest = "error_on_nondeterministic_updates"
        elif key == "geographyOutputFormats":
            suggest = "geography_output_formats"
        elif key == "geometryOutputFormats":
            suggest = "geometry_output_formats"
        elif key == "jdbcTreatDecimalAsInts":
            suggest = "jdbc_treat_decimal_as_ints"
        elif key == "jdbcTreatTimestampNtzAsUtcs":
            suggest = "jdbc_treat_timestamp_ntz_as_utcs"
        elif key == "jdbcUseSessionTimezones":
            suggest = "jdbc_use_session_timezones"
        elif key == "jsonIndents":
            suggest = "json_indents"
        elif key == "lockTimeouts":
            suggest = "lock_timeouts"
        elif key == "logLevels":
            suggest = "log_levels"
        elif key == "multiStatementCounts":
            suggest = "multi_statement_counts"
        elif key == "networkPolicies":
            suggest = "network_policies"
        elif key == "noorderSequenceAsDefaults":
            suggest = "noorder_sequence_as_defaults"
        elif key == "odbcTreatDecimalAsInts":
            suggest = "odbc_treat_decimal_as_ints"
        elif key == "preventUnloadToInternalStages":
            suggest = "prevent_unload_to_internal_stages"
        elif key == "queryTags":
            suggest = "query_tags"
        elif key == "quotedIdentifiersIgnoreCases":
            suggest = "quoted_identifiers_ignore_cases"
        elif key == "rowsPerResultsets":
            suggest = "rows_per_resultsets"
        elif key == "s3StageVpceDnsNames":
            suggest = "s3_stage_vpce_dns_names"
        elif key == "searchPaths":
            suggest = "search_paths"
        elif key == "simulatedDataSharingConsumers":
            suggest = "simulated_data_sharing_consumers"
        elif key == "statementQueuedTimeoutInSeconds":
            suggest = "statement_queued_timeout_in_seconds"
        elif key == "statementTimeoutInSeconds":
            suggest = "statement_timeout_in_seconds"
        elif key == "strictJsonOutputs":
            suggest = "strict_json_outputs"
        elif key == "timeInputFormats":
            suggest = "time_input_formats"
        elif key == "timeOutputFormats":
            suggest = "time_output_formats"
        elif key == "timestampDayIsAlways24hs":
            suggest = "timestamp_day_is_always24hs"
        elif key == "timestampInputFormats":
            suggest = "timestamp_input_formats"
        elif key == "timestampLtzOutputFormats":
            suggest = "timestamp_ltz_output_formats"
        elif key == "timestampNtzOutputFormats":
            suggest = "timestamp_ntz_output_formats"
        elif key == "timestampOutputFormats":
            suggest = "timestamp_output_formats"
        elif key == "timestampTypeMappings":
            suggest = "timestamp_type_mappings"
        elif key == "timestampTzOutputFormats":
            suggest = "timestamp_tz_output_formats"
        elif key == "traceLevels":
            suggest = "trace_levels"
        elif key == "transactionAbortOnErrors":
            suggest = "transaction_abort_on_errors"
        elif key == "transactionDefaultIsolationLevels":
            suggest = "transaction_default_isolation_levels"
        elif key == "twoDigitCenturyStarts":
            suggest = "two_digit_century_starts"
        elif key == "unsupportedDdlActions":
            suggest = "unsupported_ddl_actions"
        elif key == "useCachedResults":
            suggest = "use_cached_results"
        elif key == "weekOfYearPolicies":
            suggest = "week_of_year_policies"
        elif key == "weekStarts":
            suggest = "week_starts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceUserParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceUserParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceUserParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 abort_detached_queries: Optional[Sequence['outputs.ServiceUserParameterAbortDetachedQuery']] = None,
                 autocommits: Optional[Sequence['outputs.ServiceUserParameterAutocommit']] = None,
                 binary_input_formats: Optional[Sequence['outputs.ServiceUserParameterBinaryInputFormat']] = None,
                 binary_output_formats: Optional[Sequence['outputs.ServiceUserParameterBinaryOutputFormat']] = None,
                 client_memory_limits: Optional[Sequence['outputs.ServiceUserParameterClientMemoryLimit']] = None,
                 client_metadata_request_use_connection_ctxes: Optional[Sequence['outputs.ServiceUserParameterClientMetadataRequestUseConnectionCtx']] = None,
                 client_prefetch_threads: Optional[Sequence['outputs.ServiceUserParameterClientPrefetchThread']] = None,
                 client_result_chunk_sizes: Optional[Sequence['outputs.ServiceUserParameterClientResultChunkSize']] = None,
                 client_result_column_case_insensitives: Optional[Sequence['outputs.ServiceUserParameterClientResultColumnCaseInsensitive']] = None,
                 client_session_keep_alive_heartbeat_frequencies: Optional[Sequence['outputs.ServiceUserParameterClientSessionKeepAliveHeartbeatFrequency']] = None,
                 client_session_keep_alives: Optional[Sequence['outputs.ServiceUserParameterClientSessionKeepAlife']] = None,
                 client_timestamp_type_mappings: Optional[Sequence['outputs.ServiceUserParameterClientTimestampTypeMapping']] = None,
                 date_input_formats: Optional[Sequence['outputs.ServiceUserParameterDateInputFormat']] = None,
                 date_output_formats: Optional[Sequence['outputs.ServiceUserParameterDateOutputFormat']] = None,
                 enable_unload_physical_type_optimizations: Optional[Sequence['outputs.ServiceUserParameterEnableUnloadPhysicalTypeOptimization']] = None,
                 enable_unredacted_query_syntax_errors: Optional[Sequence['outputs.ServiceUserParameterEnableUnredactedQuerySyntaxError']] = None,
                 error_on_nondeterministic_merges: Optional[Sequence['outputs.ServiceUserParameterErrorOnNondeterministicMerge']] = None,
                 error_on_nondeterministic_updates: Optional[Sequence['outputs.ServiceUserParameterErrorOnNondeterministicUpdate']] = None,
                 geography_output_formats: Optional[Sequence['outputs.ServiceUserParameterGeographyOutputFormat']] = None,
                 geometry_output_formats: Optional[Sequence['outputs.ServiceUserParameterGeometryOutputFormat']] = None,
                 jdbc_treat_decimal_as_ints: Optional[Sequence['outputs.ServiceUserParameterJdbcTreatDecimalAsInt']] = None,
                 jdbc_treat_timestamp_ntz_as_utcs: Optional[Sequence['outputs.ServiceUserParameterJdbcTreatTimestampNtzAsUtc']] = None,
                 jdbc_use_session_timezones: Optional[Sequence['outputs.ServiceUserParameterJdbcUseSessionTimezone']] = None,
                 json_indents: Optional[Sequence['outputs.ServiceUserParameterJsonIndent']] = None,
                 lock_timeouts: Optional[Sequence['outputs.ServiceUserParameterLockTimeout']] = None,
                 log_levels: Optional[Sequence['outputs.ServiceUserParameterLogLevel']] = None,
                 multi_statement_counts: Optional[Sequence['outputs.ServiceUserParameterMultiStatementCount']] = None,
                 network_policies: Optional[Sequence['outputs.ServiceUserParameterNetworkPolicy']] = None,
                 noorder_sequence_as_defaults: Optional[Sequence['outputs.ServiceUserParameterNoorderSequenceAsDefault']] = None,
                 odbc_treat_decimal_as_ints: Optional[Sequence['outputs.ServiceUserParameterOdbcTreatDecimalAsInt']] = None,
                 prevent_unload_to_internal_stages: Optional[Sequence['outputs.ServiceUserParameterPreventUnloadToInternalStage']] = None,
                 query_tags: Optional[Sequence['outputs.ServiceUserParameterQueryTag']] = None,
                 quoted_identifiers_ignore_cases: Optional[Sequence['outputs.ServiceUserParameterQuotedIdentifiersIgnoreCase']] = None,
                 rows_per_resultsets: Optional[Sequence['outputs.ServiceUserParameterRowsPerResultset']] = None,
                 s3_stage_vpce_dns_names: Optional[Sequence['outputs.ServiceUserParameterS3StageVpceDnsName']] = None,
                 search_paths: Optional[Sequence['outputs.ServiceUserParameterSearchPath']] = None,
                 simulated_data_sharing_consumers: Optional[Sequence['outputs.ServiceUserParameterSimulatedDataSharingConsumer']] = None,
                 statement_queued_timeout_in_seconds: Optional[Sequence['outputs.ServiceUserParameterStatementQueuedTimeoutInSecond']] = None,
                 statement_timeout_in_seconds: Optional[Sequence['outputs.ServiceUserParameterStatementTimeoutInSecond']] = None,
                 strict_json_outputs: Optional[Sequence['outputs.ServiceUserParameterStrictJsonOutput']] = None,
                 time_input_formats: Optional[Sequence['outputs.ServiceUserParameterTimeInputFormat']] = None,
                 time_output_formats: Optional[Sequence['outputs.ServiceUserParameterTimeOutputFormat']] = None,
                 timestamp_day_is_always24hs: Optional[Sequence['outputs.ServiceUserParameterTimestampDayIsAlways24h']] = None,
                 timestamp_input_formats: Optional[Sequence['outputs.ServiceUserParameterTimestampInputFormat']] = None,
                 timestamp_ltz_output_formats: Optional[Sequence['outputs.ServiceUserParameterTimestampLtzOutputFormat']] = None,
                 timestamp_ntz_output_formats: Optional[Sequence['outputs.ServiceUserParameterTimestampNtzOutputFormat']] = None,
                 timestamp_output_formats: Optional[Sequence['outputs.ServiceUserParameterTimestampOutputFormat']] = None,
                 timestamp_type_mappings: Optional[Sequence['outputs.ServiceUserParameterTimestampTypeMapping']] = None,
                 timestamp_tz_output_formats: Optional[Sequence['outputs.ServiceUserParameterTimestampTzOutputFormat']] = None,
                 timezones: Optional[Sequence['outputs.ServiceUserParameterTimezone']] = None,
                 trace_levels: Optional[Sequence['outputs.ServiceUserParameterTraceLevel']] = None,
                 transaction_abort_on_errors: Optional[Sequence['outputs.ServiceUserParameterTransactionAbortOnError']] = None,
                 transaction_default_isolation_levels: Optional[Sequence['outputs.ServiceUserParameterTransactionDefaultIsolationLevel']] = None,
                 two_digit_century_starts: Optional[Sequence['outputs.ServiceUserParameterTwoDigitCenturyStart']] = None,
                 unsupported_ddl_actions: Optional[Sequence['outputs.ServiceUserParameterUnsupportedDdlAction']] = None,
                 use_cached_results: Optional[Sequence['outputs.ServiceUserParameterUseCachedResult']] = None,
                 week_of_year_policies: Optional[Sequence['outputs.ServiceUserParameterWeekOfYearPolicy']] = None,
                 week_starts: Optional[Sequence['outputs.ServiceUserParameterWeekStart']] = None):
        if abort_detached_queries is not None:
            pulumi.set(__self__, "abort_detached_queries", abort_detached_queries)
        if autocommits is not None:
            pulumi.set(__self__, "autocommits", autocommits)
        if binary_input_formats is not None:
            pulumi.set(__self__, "binary_input_formats", binary_input_formats)
        if binary_output_formats is not None:
            pulumi.set(__self__, "binary_output_formats", binary_output_formats)
        if client_memory_limits is not None:
            pulumi.set(__self__, "client_memory_limits", client_memory_limits)
        if client_metadata_request_use_connection_ctxes is not None:
            pulumi.set(__self__, "client_metadata_request_use_connection_ctxes", client_metadata_request_use_connection_ctxes)
        if client_prefetch_threads is not None:
            pulumi.set(__self__, "client_prefetch_threads", client_prefetch_threads)
        if client_result_chunk_sizes is not None:
            pulumi.set(__self__, "client_result_chunk_sizes", client_result_chunk_sizes)
        if client_result_column_case_insensitives is not None:
            pulumi.set(__self__, "client_result_column_case_insensitives", client_result_column_case_insensitives)
        if client_session_keep_alive_heartbeat_frequencies is not None:
            pulumi.set(__self__, "client_session_keep_alive_heartbeat_frequencies", client_session_keep_alive_heartbeat_frequencies)
        if client_session_keep_alives is not None:
            pulumi.set(__self__, "client_session_keep_alives", client_session_keep_alives)
        if client_timestamp_type_mappings is not None:
            pulumi.set(__self__, "client_timestamp_type_mappings", client_timestamp_type_mappings)
        if date_input_formats is not None:
            pulumi.set(__self__, "date_input_formats", date_input_formats)
        if date_output_formats is not None:
            pulumi.set(__self__, "date_output_formats", date_output_formats)
        if enable_unload_physical_type_optimizations is not None:
            pulumi.set(__self__, "enable_unload_physical_type_optimizations", enable_unload_physical_type_optimizations)
        if enable_unredacted_query_syntax_errors is not None:
            pulumi.set(__self__, "enable_unredacted_query_syntax_errors", enable_unredacted_query_syntax_errors)
        if error_on_nondeterministic_merges is not None:
            pulumi.set(__self__, "error_on_nondeterministic_merges", error_on_nondeterministic_merges)
        if error_on_nondeterministic_updates is not None:
            pulumi.set(__self__, "error_on_nondeterministic_updates", error_on_nondeterministic_updates)
        if geography_output_formats is not None:
            pulumi.set(__self__, "geography_output_formats", geography_output_formats)
        if geometry_output_formats is not None:
            pulumi.set(__self__, "geometry_output_formats", geometry_output_formats)
        if jdbc_treat_decimal_as_ints is not None:
            pulumi.set(__self__, "jdbc_treat_decimal_as_ints", jdbc_treat_decimal_as_ints)
        if jdbc_treat_timestamp_ntz_as_utcs is not None:
            pulumi.set(__self__, "jdbc_treat_timestamp_ntz_as_utcs", jdbc_treat_timestamp_ntz_as_utcs)
        if jdbc_use_session_timezones is not None:
            pulumi.set(__self__, "jdbc_use_session_timezones", jdbc_use_session_timezones)
        if json_indents is not None:
            pulumi.set(__self__, "json_indents", json_indents)
        if lock_timeouts is not None:
            pulumi.set(__self__, "lock_timeouts", lock_timeouts)
        if log_levels is not None:
            pulumi.set(__self__, "log_levels", log_levels)
        if multi_statement_counts is not None:
            pulumi.set(__self__, "multi_statement_counts", multi_statement_counts)
        if network_policies is not None:
            pulumi.set(__self__, "network_policies", network_policies)
        if noorder_sequence_as_defaults is not None:
            pulumi.set(__self__, "noorder_sequence_as_defaults", noorder_sequence_as_defaults)
        if odbc_treat_decimal_as_ints is not None:
            pulumi.set(__self__, "odbc_treat_decimal_as_ints", odbc_treat_decimal_as_ints)
        if prevent_unload_to_internal_stages is not None:
            pulumi.set(__self__, "prevent_unload_to_internal_stages", prevent_unload_to_internal_stages)
        if query_tags is not None:
            pulumi.set(__self__, "query_tags", query_tags)
        if quoted_identifiers_ignore_cases is not None:
            pulumi.set(__self__, "quoted_identifiers_ignore_cases", quoted_identifiers_ignore_cases)
        if rows_per_resultsets is not None:
            pulumi.set(__self__, "rows_per_resultsets", rows_per_resultsets)
        if s3_stage_vpce_dns_names is not None:
            pulumi.set(__self__, "s3_stage_vpce_dns_names", s3_stage_vpce_dns_names)
        if search_paths is not None:
            pulumi.set(__self__, "search_paths", search_paths)
        if simulated_data_sharing_consumers is not None:
            pulumi.set(__self__, "simulated_data_sharing_consumers", simulated_data_sharing_consumers)
        if statement_queued_timeout_in_seconds is not None:
            pulumi.set(__self__, "statement_queued_timeout_in_seconds", statement_queued_timeout_in_seconds)
        if statement_timeout_in_seconds is not None:
            pulumi.set(__self__, "statement_timeout_in_seconds", statement_timeout_in_seconds)
        if strict_json_outputs is not None:
            pulumi.set(__self__, "strict_json_outputs", strict_json_outputs)
        if time_input_formats is not None:
            pulumi.set(__self__, "time_input_formats", time_input_formats)
        if time_output_formats is not None:
            pulumi.set(__self__, "time_output_formats", time_output_formats)
        if timestamp_day_is_always24hs is not None:
            pulumi.set(__self__, "timestamp_day_is_always24hs", timestamp_day_is_always24hs)
        if timestamp_input_formats is not None:
            pulumi.set(__self__, "timestamp_input_formats", timestamp_input_formats)
        if timestamp_ltz_output_formats is not None:
            pulumi.set(__self__, "timestamp_ltz_output_formats", timestamp_ltz_output_formats)
        if timestamp_ntz_output_formats is not None:
            pulumi.set(__self__, "timestamp_ntz_output_formats", timestamp_ntz_output_formats)
        if timestamp_output_formats is not None:
            pulumi.set(__self__, "timestamp_output_formats", timestamp_output_formats)
        if timestamp_type_mappings is not None:
            pulumi.set(__self__, "timestamp_type_mappings", timestamp_type_mappings)
        if timestamp_tz_output_formats is not None:
            pulumi.set(__self__, "timestamp_tz_output_formats", timestamp_tz_output_formats)
        if timezones is not None:
            pulumi.set(__self__, "timezones", timezones)
        if trace_levels is not None:
            pulumi.set(__self__, "trace_levels", trace_levels)
        if transaction_abort_on_errors is not None:
            pulumi.set(__self__, "transaction_abort_on_errors", transaction_abort_on_errors)
        if transaction_default_isolation_levels is not None:
            pulumi.set(__self__, "transaction_default_isolation_levels", transaction_default_isolation_levels)
        if two_digit_century_starts is not None:
            pulumi.set(__self__, "two_digit_century_starts", two_digit_century_starts)
        if unsupported_ddl_actions is not None:
            pulumi.set(__self__, "unsupported_ddl_actions", unsupported_ddl_actions)
        if use_cached_results is not None:
            pulumi.set(__self__, "use_cached_results", use_cached_results)
        if week_of_year_policies is not None:
            pulumi.set(__self__, "week_of_year_policies", week_of_year_policies)
        if week_starts is not None:
            pulumi.set(__self__, "week_starts", week_starts)

    @property
    @pulumi.getter(name="abortDetachedQueries")
    def abort_detached_queries(self) -> Optional[Sequence['outputs.ServiceUserParameterAbortDetachedQuery']]:
        return pulumi.get(self, "abort_detached_queries")

    @property
    @pulumi.getter
    def autocommits(self) -> Optional[Sequence['outputs.ServiceUserParameterAutocommit']]:
        return pulumi.get(self, "autocommits")

    @property
    @pulumi.getter(name="binaryInputFormats")
    def binary_input_formats(self) -> Optional[Sequence['outputs.ServiceUserParameterBinaryInputFormat']]:
        return pulumi.get(self, "binary_input_formats")

    @property
    @pulumi.getter(name="binaryOutputFormats")
    def binary_output_formats(self) -> Optional[Sequence['outputs.ServiceUserParameterBinaryOutputFormat']]:
        return pulumi.get(self, "binary_output_formats")

    @property
    @pulumi.getter(name="clientMemoryLimits")
    def client_memory_limits(self) -> Optional[Sequence['outputs.ServiceUserParameterClientMemoryLimit']]:
        return pulumi.get(self, "client_memory_limits")

    @property
    @pulumi.getter(name="clientMetadataRequestUseConnectionCtxes")
    def client_metadata_request_use_connection_ctxes(self) -> Optional[Sequence['outputs.ServiceUserParameterClientMetadataRequestUseConnectionCtx']]:
        return pulumi.get(self, "client_metadata_request_use_connection_ctxes")

    @property
    @pulumi.getter(name="clientPrefetchThreads")
    def client_prefetch_threads(self) -> Optional[Sequence['outputs.ServiceUserParameterClientPrefetchThread']]:
        return pulumi.get(self, "client_prefetch_threads")

    @property
    @pulumi.getter(name="clientResultChunkSizes")
    def client_result_chunk_sizes(self) -> Optional[Sequence['outputs.ServiceUserParameterClientResultChunkSize']]:
        return pulumi.get(self, "client_result_chunk_sizes")

    @property
    @pulumi.getter(name="clientResultColumnCaseInsensitives")
    def client_result_column_case_insensitives(self) -> Optional[Sequence['outputs.ServiceUserParameterClientResultColumnCaseInsensitive']]:
        return pulumi.get(self, "client_result_column_case_insensitives")

    @property
    @pulumi.getter(name="clientSessionKeepAliveHeartbeatFrequencies")
    def client_session_keep_alive_heartbeat_frequencies(self) -> Optional[Sequence['outputs.ServiceUserParameterClientSessionKeepAliveHeartbeatFrequency']]:
        return pulumi.get(self, "client_session_keep_alive_heartbeat_frequencies")

    @property
    @pulumi.getter(name="clientSessionKeepAlives")
    def client_session_keep_alives(self) -> Optional[Sequence['outputs.ServiceUserParameterClientSessionKeepAlife']]:
        return pulumi.get(self, "client_session_keep_alives")

    @property
    @pulumi.getter(name="clientTimestampTypeMappings")
    def client_timestamp_type_mappings(self) -> Optional[Sequence['outputs.ServiceUserParameterClientTimestampTypeMapping']]:
        return pulumi.get(self, "client_timestamp_type_mappings")

    @property
    @pulumi.getter(name="dateInputFormats")
    def date_input_formats(self) -> Optional[Sequence['outputs.ServiceUserParameterDateInputFormat']]:
        return pulumi.get(self, "date_input_formats")

    @property
    @pulumi.getter(name="dateOutputFormats")
    def date_output_formats(self) -> Optional[Sequence['outputs.ServiceUserParameterDateOutputFormat']]:
        return pulumi.get(self, "date_output_formats")

    @property
    @pulumi.getter(name="enableUnloadPhysicalTypeOptimizations")
    def enable_unload_physical_type_optimizations(self) -> Optional[Sequence['outputs.ServiceUserParameterEnableUnloadPhysicalTypeOptimization']]:
        return pulumi.get(self, "enable_unload_physical_type_optimizations")

    @property
    @pulumi.getter(name="enableUnredactedQuerySyntaxErrors")
    def enable_unredacted_query_syntax_errors(self) -> Optional[Sequence['outputs.ServiceUserParameterEnableUnredactedQuerySyntaxError']]:
        return pulumi.get(self, "enable_unredacted_query_syntax_errors")

    @property
    @pulumi.getter(name="errorOnNondeterministicMerges")
    def error_on_nondeterministic_merges(self) -> Optional[Sequence['outputs.ServiceUserParameterErrorOnNondeterministicMerge']]:
        return pulumi.get(self, "error_on_nondeterministic_merges")

    @property
    @pulumi.getter(name="errorOnNondeterministicUpdates")
    def error_on_nondeterministic_updates(self) -> Optional[Sequence['outputs.ServiceUserParameterErrorOnNondeterministicUpdate']]:
        return pulumi.get(self, "error_on_nondeterministic_updates")

    @property
    @pulumi.getter(name="geographyOutputFormats")
    def geography_output_formats(self) -> Optional[Sequence['outputs.ServiceUserParameterGeographyOutputFormat']]:
        return pulumi.get(self, "geography_output_formats")

    @property
    @pulumi.getter(name="geometryOutputFormats")
    def geometry_output_formats(self) -> Optional[Sequence['outputs.ServiceUserParameterGeometryOutputFormat']]:
        return pulumi.get(self, "geometry_output_formats")

    @property
    @pulumi.getter(name="jdbcTreatDecimalAsInts")
    def jdbc_treat_decimal_as_ints(self) -> Optional[Sequence['outputs.ServiceUserParameterJdbcTreatDecimalAsInt']]:
        return pulumi.get(self, "jdbc_treat_decimal_as_ints")

    @property
    @pulumi.getter(name="jdbcTreatTimestampNtzAsUtcs")
    def jdbc_treat_timestamp_ntz_as_utcs(self) -> Optional[Sequence['outputs.ServiceUserParameterJdbcTreatTimestampNtzAsUtc']]:
        return pulumi.get(self, "jdbc_treat_timestamp_ntz_as_utcs")

    @property
    @pulumi.getter(name="jdbcUseSessionTimezones")
    def jdbc_use_session_timezones(self) -> Optional[Sequence['outputs.ServiceUserParameterJdbcUseSessionTimezone']]:
        return pulumi.get(self, "jdbc_use_session_timezones")

    @property
    @pulumi.getter(name="jsonIndents")
    def json_indents(self) -> Optional[Sequence['outputs.ServiceUserParameterJsonIndent']]:
        return pulumi.get(self, "json_indents")

    @property
    @pulumi.getter(name="lockTimeouts")
    def lock_timeouts(self) -> Optional[Sequence['outputs.ServiceUserParameterLockTimeout']]:
        return pulumi.get(self, "lock_timeouts")

    @property
    @pulumi.getter(name="logLevels")
    def log_levels(self) -> Optional[Sequence['outputs.ServiceUserParameterLogLevel']]:
        return pulumi.get(self, "log_levels")

    @property
    @pulumi.getter(name="multiStatementCounts")
    def multi_statement_counts(self) -> Optional[Sequence['outputs.ServiceUserParameterMultiStatementCount']]:
        return pulumi.get(self, "multi_statement_counts")

    @property
    @pulumi.getter(name="networkPolicies")
    def network_policies(self) -> Optional[Sequence['outputs.ServiceUserParameterNetworkPolicy']]:
        return pulumi.get(self, "network_policies")

    @property
    @pulumi.getter(name="noorderSequenceAsDefaults")
    def noorder_sequence_as_defaults(self) -> Optional[Sequence['outputs.ServiceUserParameterNoorderSequenceAsDefault']]:
        return pulumi.get(self, "noorder_sequence_as_defaults")

    @property
    @pulumi.getter(name="odbcTreatDecimalAsInts")
    def odbc_treat_decimal_as_ints(self) -> Optional[Sequence['outputs.ServiceUserParameterOdbcTreatDecimalAsInt']]:
        return pulumi.get(self, "odbc_treat_decimal_as_ints")

    @property
    @pulumi.getter(name="preventUnloadToInternalStages")
    def prevent_unload_to_internal_stages(self) -> Optional[Sequence['outputs.ServiceUserParameterPreventUnloadToInternalStage']]:
        return pulumi.get(self, "prevent_unload_to_internal_stages")

    @property
    @pulumi.getter(name="queryTags")
    def query_tags(self) -> Optional[Sequence['outputs.ServiceUserParameterQueryTag']]:
        return pulumi.get(self, "query_tags")

    @property
    @pulumi.getter(name="quotedIdentifiersIgnoreCases")
    def quoted_identifiers_ignore_cases(self) -> Optional[Sequence['outputs.ServiceUserParameterQuotedIdentifiersIgnoreCase']]:
        return pulumi.get(self, "quoted_identifiers_ignore_cases")

    @property
    @pulumi.getter(name="rowsPerResultsets")
    def rows_per_resultsets(self) -> Optional[Sequence['outputs.ServiceUserParameterRowsPerResultset']]:
        return pulumi.get(self, "rows_per_resultsets")

    @property
    @pulumi.getter(name="s3StageVpceDnsNames")
    def s3_stage_vpce_dns_names(self) -> Optional[Sequence['outputs.ServiceUserParameterS3StageVpceDnsName']]:
        return pulumi.get(self, "s3_stage_vpce_dns_names")

    @property
    @pulumi.getter(name="searchPaths")
    def search_paths(self) -> Optional[Sequence['outputs.ServiceUserParameterSearchPath']]:
        return pulumi.get(self, "search_paths")

    @property
    @pulumi.getter(name="simulatedDataSharingConsumers")
    def simulated_data_sharing_consumers(self) -> Optional[Sequence['outputs.ServiceUserParameterSimulatedDataSharingConsumer']]:
        return pulumi.get(self, "simulated_data_sharing_consumers")

    @property
    @pulumi.getter(name="statementQueuedTimeoutInSeconds")
    def statement_queued_timeout_in_seconds(self) -> Optional[Sequence['outputs.ServiceUserParameterStatementQueuedTimeoutInSecond']]:
        return pulumi.get(self, "statement_queued_timeout_in_seconds")

    @property
    @pulumi.getter(name="statementTimeoutInSeconds")
    def statement_timeout_in_seconds(self) -> Optional[Sequence['outputs.ServiceUserParameterStatementTimeoutInSecond']]:
        return pulumi.get(self, "statement_timeout_in_seconds")

    @property
    @pulumi.getter(name="strictJsonOutputs")
    def strict_json_outputs(self) -> Optional[Sequence['outputs.ServiceUserParameterStrictJsonOutput']]:
        return pulumi.get(self, "strict_json_outputs")

    @property
    @pulumi.getter(name="timeInputFormats")
    def time_input_formats(self) -> Optional[Sequence['outputs.ServiceUserParameterTimeInputFormat']]:
        return pulumi.get(self, "time_input_formats")

    @property
    @pulumi.getter(name="timeOutputFormats")
    def time_output_formats(self) -> Optional[Sequence['outputs.ServiceUserParameterTimeOutputFormat']]:
        return pulumi.get(self, "time_output_formats")

    @property
    @pulumi.getter(name="timestampDayIsAlways24hs")
    def timestamp_day_is_always24hs(self) -> Optional[Sequence['outputs.ServiceUserParameterTimestampDayIsAlways24h']]:
        return pulumi.get(self, "timestamp_day_is_always24hs")

    @property
    @pulumi.getter(name="timestampInputFormats")
    def timestamp_input_formats(self) -> Optional[Sequence['outputs.ServiceUserParameterTimestampInputFormat']]:
        return pulumi.get(self, "timestamp_input_formats")

    @property
    @pulumi.getter(name="timestampLtzOutputFormats")
    def timestamp_ltz_output_formats(self) -> Optional[Sequence['outputs.ServiceUserParameterTimestampLtzOutputFormat']]:
        return pulumi.get(self, "timestamp_ltz_output_formats")

    @property
    @pulumi.getter(name="timestampNtzOutputFormats")
    def timestamp_ntz_output_formats(self) -> Optional[Sequence['outputs.ServiceUserParameterTimestampNtzOutputFormat']]:
        return pulumi.get(self, "timestamp_ntz_output_formats")

    @property
    @pulumi.getter(name="timestampOutputFormats")
    def timestamp_output_formats(self) -> Optional[Sequence['outputs.ServiceUserParameterTimestampOutputFormat']]:
        return pulumi.get(self, "timestamp_output_formats")

    @property
    @pulumi.getter(name="timestampTypeMappings")
    def timestamp_type_mappings(self) -> Optional[Sequence['outputs.ServiceUserParameterTimestampTypeMapping']]:
        return pulumi.get(self, "timestamp_type_mappings")

    @property
    @pulumi.getter(name="timestampTzOutputFormats")
    def timestamp_tz_output_formats(self) -> Optional[Sequence['outputs.ServiceUserParameterTimestampTzOutputFormat']]:
        return pulumi.get(self, "timestamp_tz_output_formats")

    @property
    @pulumi.getter
    def timezones(self) -> Optional[Sequence['outputs.ServiceUserParameterTimezone']]:
        return pulumi.get(self, "timezones")

    @property
    @pulumi.getter(name="traceLevels")
    def trace_levels(self) -> Optional[Sequence['outputs.ServiceUserParameterTraceLevel']]:
        return pulumi.get(self, "trace_levels")

    @property
    @pulumi.getter(name="transactionAbortOnErrors")
    def transaction_abort_on_errors(self) -> Optional[Sequence['outputs.ServiceUserParameterTransactionAbortOnError']]:
        return pulumi.get(self, "transaction_abort_on_errors")

    @property
    @pulumi.getter(name="transactionDefaultIsolationLevels")
    def transaction_default_isolation_levels(self) -> Optional[Sequence['outputs.ServiceUserParameterTransactionDefaultIsolationLevel']]:
        return pulumi.get(self, "transaction_default_isolation_levels")

    @property
    @pulumi.getter(name="twoDigitCenturyStarts")
    def two_digit_century_starts(self) -> Optional[Sequence['outputs.ServiceUserParameterTwoDigitCenturyStart']]:
        return pulumi.get(self, "two_digit_century_starts")

    @property
    @pulumi.getter(name="unsupportedDdlActions")
    def unsupported_ddl_actions(self) -> Optional[Sequence['outputs.ServiceUserParameterUnsupportedDdlAction']]:
        return pulumi.get(self, "unsupported_ddl_actions")

    @property
    @pulumi.getter(name="useCachedResults")
    def use_cached_results(self) -> Optional[Sequence['outputs.ServiceUserParameterUseCachedResult']]:
        return pulumi.get(self, "use_cached_results")

    @property
    @pulumi.getter(name="weekOfYearPolicies")
    def week_of_year_policies(self) -> Optional[Sequence['outputs.ServiceUserParameterWeekOfYearPolicy']]:
        return pulumi.get(self, "week_of_year_policies")

    @property
    @pulumi.getter(name="weekStarts")
    def week_starts(self) -> Optional[Sequence['outputs.ServiceUserParameterWeekStart']]:
        return pulumi.get(self, "week_starts")


@pulumi.output_type
class ServiceUserParameterAbortDetachedQuery(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterAutocommit(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterBinaryInputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterBinaryOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterClientMemoryLimit(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterClientMetadataRequestUseConnectionCtx(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterClientPrefetchThread(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterClientResultChunkSize(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterClientResultColumnCaseInsensitive(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterClientSessionKeepAlife(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterClientSessionKeepAliveHeartbeatFrequency(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterClientTimestampTypeMapping(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterDateInputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterDateOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterEnableUnloadPhysicalTypeOptimization(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterEnableUnredactedQuerySyntaxError(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterErrorOnNondeterministicMerge(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterErrorOnNondeterministicUpdate(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterGeographyOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterGeometryOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterJdbcTreatDecimalAsInt(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterJdbcTreatTimestampNtzAsUtc(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterJdbcUseSessionTimezone(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterJsonIndent(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterLockTimeout(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterLogLevel(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterMultiStatementCount(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterNetworkPolicy(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterNoorderSequenceAsDefault(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterOdbcTreatDecimalAsInt(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterPreventUnloadToInternalStage(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterQueryTag(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterQuotedIdentifiersIgnoreCase(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterRowsPerResultset(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterS3StageVpceDnsName(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterSearchPath(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterSimulatedDataSharingConsumer(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterStatementQueuedTimeoutInSecond(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterStatementTimeoutInSecond(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterStrictJsonOutput(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterTimeInputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterTimeOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterTimestampDayIsAlways24h(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterTimestampInputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterTimestampLtzOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterTimestampNtzOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterTimestampOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterTimestampTypeMapping(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterTimestampTzOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterTimezone(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterTraceLevel(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterTransactionAbortOnError(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterTransactionDefaultIsolationLevel(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterTwoDigitCenturyStart(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterUnsupportedDdlAction(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterUseCachedResult(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterWeekOfYearPolicy(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserParameterWeekStart(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceUserShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "daysToExpiry":
            suggest = "days_to_expiry"
        elif key == "defaultNamespace":
            suggest = "default_namespace"
        elif key == "defaultRole":
            suggest = "default_role"
        elif key == "defaultSecondaryRoles":
            suggest = "default_secondary_roles"
        elif key == "defaultWarehouse":
            suggest = "default_warehouse"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "expiresAtTime":
            suggest = "expires_at_time"
        elif key == "extAuthnDuo":
            suggest = "ext_authn_duo"
        elif key == "extAuthnUid":
            suggest = "ext_authn_uid"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "hasMfa":
            suggest = "has_mfa"
        elif key == "hasPassword":
            suggest = "has_password"
        elif key == "hasRsaPublicKey":
            suggest = "has_rsa_public_key"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "lastSuccessLogin":
            suggest = "last_success_login"
        elif key == "lockedUntilTime":
            suggest = "locked_until_time"
        elif key == "loginName":
            suggest = "login_name"
        elif key == "minsToBypassMfa":
            suggest = "mins_to_bypass_mfa"
        elif key == "minsToUnlock":
            suggest = "mins_to_unlock"
        elif key == "mustChangePassword":
            suggest = "must_change_password"
        elif key == "snowflakeLock":
            suggest = "snowflake_lock"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceUserShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceUserShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceUserShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 days_to_expiry: Optional[str] = None,
                 default_namespace: Optional[str] = None,
                 default_role: Optional[str] = None,
                 default_secondary_roles: Optional[str] = None,
                 default_warehouse: Optional[str] = None,
                 disabled: Optional[bool] = None,
                 display_name: Optional[str] = None,
                 email: Optional[str] = None,
                 expires_at_time: Optional[str] = None,
                 ext_authn_duo: Optional[bool] = None,
                 ext_authn_uid: Optional[str] = None,
                 first_name: Optional[str] = None,
                 has_mfa: Optional[bool] = None,
                 has_password: Optional[bool] = None,
                 has_rsa_public_key: Optional[bool] = None,
                 last_name: Optional[str] = None,
                 last_success_login: Optional[str] = None,
                 locked_until_time: Optional[str] = None,
                 login_name: Optional[str] = None,
                 mins_to_bypass_mfa: Optional[str] = None,
                 mins_to_unlock: Optional[str] = None,
                 must_change_password: Optional[bool] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 snowflake_lock: Optional[bool] = None,
                 type: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if days_to_expiry is not None:
            pulumi.set(__self__, "days_to_expiry", days_to_expiry)
        if default_namespace is not None:
            pulumi.set(__self__, "default_namespace", default_namespace)
        if default_role is not None:
            pulumi.set(__self__, "default_role", default_role)
        if default_secondary_roles is not None:
            pulumi.set(__self__, "default_secondary_roles", default_secondary_roles)
        if default_warehouse is not None:
            pulumi.set(__self__, "default_warehouse", default_warehouse)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if expires_at_time is not None:
            pulumi.set(__self__, "expires_at_time", expires_at_time)
        if ext_authn_duo is not None:
            pulumi.set(__self__, "ext_authn_duo", ext_authn_duo)
        if ext_authn_uid is not None:
            pulumi.set(__self__, "ext_authn_uid", ext_authn_uid)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if has_mfa is not None:
            pulumi.set(__self__, "has_mfa", has_mfa)
        if has_password is not None:
            pulumi.set(__self__, "has_password", has_password)
        if has_rsa_public_key is not None:
            pulumi.set(__self__, "has_rsa_public_key", has_rsa_public_key)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if last_success_login is not None:
            pulumi.set(__self__, "last_success_login", last_success_login)
        if locked_until_time is not None:
            pulumi.set(__self__, "locked_until_time", locked_until_time)
        if login_name is not None:
            pulumi.set(__self__, "login_name", login_name)
        if mins_to_bypass_mfa is not None:
            pulumi.set(__self__, "mins_to_bypass_mfa", mins_to_bypass_mfa)
        if mins_to_unlock is not None:
            pulumi.set(__self__, "mins_to_unlock", mins_to_unlock)
        if must_change_password is not None:
            pulumi.set(__self__, "must_change_password", must_change_password)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if snowflake_lock is not None:
            pulumi.set(__self__, "snowflake_lock", snowflake_lock)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="daysToExpiry")
    def days_to_expiry(self) -> Optional[str]:
        return pulumi.get(self, "days_to_expiry")

    @property
    @pulumi.getter(name="defaultNamespace")
    def default_namespace(self) -> Optional[str]:
        return pulumi.get(self, "default_namespace")

    @property
    @pulumi.getter(name="defaultRole")
    def default_role(self) -> Optional[str]:
        return pulumi.get(self, "default_role")

    @property
    @pulumi.getter(name="defaultSecondaryRoles")
    def default_secondary_roles(self) -> Optional[str]:
        return pulumi.get(self, "default_secondary_roles")

    @property
    @pulumi.getter(name="defaultWarehouse")
    def default_warehouse(self) -> Optional[str]:
        return pulumi.get(self, "default_warehouse")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="expiresAtTime")
    def expires_at_time(self) -> Optional[str]:
        return pulumi.get(self, "expires_at_time")

    @property
    @pulumi.getter(name="extAuthnDuo")
    def ext_authn_duo(self) -> Optional[bool]:
        return pulumi.get(self, "ext_authn_duo")

    @property
    @pulumi.getter(name="extAuthnUid")
    def ext_authn_uid(self) -> Optional[str]:
        return pulumi.get(self, "ext_authn_uid")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="hasMfa")
    def has_mfa(self) -> Optional[bool]:
        return pulumi.get(self, "has_mfa")

    @property
    @pulumi.getter(name="hasPassword")
    def has_password(self) -> Optional[bool]:
        return pulumi.get(self, "has_password")

    @property
    @pulumi.getter(name="hasRsaPublicKey")
    def has_rsa_public_key(self) -> Optional[bool]:
        return pulumi.get(self, "has_rsa_public_key")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="lastSuccessLogin")
    def last_success_login(self) -> Optional[str]:
        return pulumi.get(self, "last_success_login")

    @property
    @pulumi.getter(name="lockedUntilTime")
    def locked_until_time(self) -> Optional[str]:
        return pulumi.get(self, "locked_until_time")

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> Optional[str]:
        return pulumi.get(self, "login_name")

    @property
    @pulumi.getter(name="minsToBypassMfa")
    def mins_to_bypass_mfa(self) -> Optional[str]:
        return pulumi.get(self, "mins_to_bypass_mfa")

    @property
    @pulumi.getter(name="minsToUnlock")
    def mins_to_unlock(self) -> Optional[str]:
        return pulumi.get(self, "mins_to_unlock")

    @property
    @pulumi.getter(name="mustChangePassword")
    def must_change_password(self) -> Optional[bool]:
        return pulumi.get(self, "must_change_password")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="snowflakeLock")
    def snowflake_lock(self) -> Optional[bool]:
        return pulumi.get(self, "snowflake_lock")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class StageTag(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param str name: Tag name, e.g. department.
        :param str value: Tag value, e.g. marketing_info.
        :param str database: Name of the database that the tag was created in.
        :param str schema: Name of the schema that the tag was created in.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Tag name, e.g. department.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag value, e.g. marketing_info.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Name of the database that the tag was created in.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Name of the schema that the tag was created in.
        """
        return pulumi.get(self, "schema")


@pulumi.output_type
class StreamOnDirectoryTableDescribeOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseTables":
            suggest = "base_tables"
        elif key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "invalidReason":
            suggest = "invalid_reason"
        elif key == "ownerRoleType":
            suggest = "owner_role_type"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "staleAfter":
            suggest = "stale_after"
        elif key == "tableName":
            suggest = "table_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamOnDirectoryTableDescribeOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamOnDirectoryTableDescribeOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamOnDirectoryTableDescribeOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_tables: Optional[Sequence[str]] = None,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 invalid_reason: Optional[str] = None,
                 mode: Optional[str] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 owner_role_type: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 source_type: Optional[str] = None,
                 stale: Optional[bool] = None,
                 stale_after: Optional[str] = None,
                 table_name: Optional[str] = None,
                 type: Optional[str] = None):
        if base_tables is not None:
            pulumi.set(__self__, "base_tables", base_tables)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if invalid_reason is not None:
            pulumi.set(__self__, "invalid_reason", invalid_reason)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if stale is not None:
            pulumi.set(__self__, "stale", stale)
        if stale_after is not None:
            pulumi.set(__self__, "stale_after", stale_after)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="baseTables")
    def base_tables(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "base_tables")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="invalidReason")
    def invalid_reason(self) -> Optional[str]:
        return pulumi.get(self, "invalid_reason")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[str]:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def stale(self) -> Optional[bool]:
        return pulumi.get(self, "stale")

    @property
    @pulumi.getter(name="staleAfter")
    def stale_after(self) -> Optional[str]:
        return pulumi.get(self, "stale_after")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class StreamOnDirectoryTableShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseTables":
            suggest = "base_tables"
        elif key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "invalidReason":
            suggest = "invalid_reason"
        elif key == "ownerRoleType":
            suggest = "owner_role_type"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "staleAfter":
            suggest = "stale_after"
        elif key == "tableName":
            suggest = "table_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamOnDirectoryTableShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamOnDirectoryTableShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamOnDirectoryTableShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_tables: Optional[Sequence[str]] = None,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 invalid_reason: Optional[str] = None,
                 mode: Optional[str] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 owner_role_type: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 source_type: Optional[str] = None,
                 stale: Optional[bool] = None,
                 stale_after: Optional[str] = None,
                 table_name: Optional[str] = None,
                 type: Optional[str] = None):
        if base_tables is not None:
            pulumi.set(__self__, "base_tables", base_tables)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if invalid_reason is not None:
            pulumi.set(__self__, "invalid_reason", invalid_reason)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if stale is not None:
            pulumi.set(__self__, "stale", stale)
        if stale_after is not None:
            pulumi.set(__self__, "stale_after", stale_after)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="baseTables")
    def base_tables(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "base_tables")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="invalidReason")
    def invalid_reason(self) -> Optional[str]:
        return pulumi.get(self, "invalid_reason")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[str]:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def stale(self) -> Optional[bool]:
        return pulumi.get(self, "stale")

    @property
    @pulumi.getter(name="staleAfter")
    def stale_after(self) -> Optional[str]:
        return pulumi.get(self, "stale_after")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class StreamOnExternalTableAt(dict):
    def __init__(__self__, *,
                 offset: Optional[str] = None,
                 statement: Optional[str] = None,
                 stream: Optional[str] = None,
                 timestamp: Optional[str] = None):
        """
        :param str offset: Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        :param str statement: Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        :param str stream: Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        :param str timestamp: Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if statement is not None:
            pulumi.set(__self__, "statement", statement)
        if stream is not None:
            pulumi.set(__self__, "stream", stream)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def offset(self) -> Optional[str]:
        """
        Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def statement(self) -> Optional[str]:
        """
        Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        """
        return pulumi.get(self, "statement")

    @property
    @pulumi.getter
    def stream(self) -> Optional[str]:
        """
        Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        """
        return pulumi.get(self, "stream")

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[str]:
        """
        Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class StreamOnExternalTableBefore(dict):
    def __init__(__self__, *,
                 offset: Optional[str] = None,
                 statement: Optional[str] = None,
                 stream: Optional[str] = None,
                 timestamp: Optional[str] = None):
        """
        :param str offset: Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        :param str statement: Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        :param str stream: Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        :param str timestamp: Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if statement is not None:
            pulumi.set(__self__, "statement", statement)
        if stream is not None:
            pulumi.set(__self__, "stream", stream)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def offset(self) -> Optional[str]:
        """
        Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def statement(self) -> Optional[str]:
        """
        Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        """
        return pulumi.get(self, "statement")

    @property
    @pulumi.getter
    def stream(self) -> Optional[str]:
        """
        Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        """
        return pulumi.get(self, "stream")

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[str]:
        """
        Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class StreamOnExternalTableDescribeOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseTables":
            suggest = "base_tables"
        elif key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "invalidReason":
            suggest = "invalid_reason"
        elif key == "ownerRoleType":
            suggest = "owner_role_type"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "staleAfter":
            suggest = "stale_after"
        elif key == "tableName":
            suggest = "table_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamOnExternalTableDescribeOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamOnExternalTableDescribeOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamOnExternalTableDescribeOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_tables: Optional[Sequence[str]] = None,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 invalid_reason: Optional[str] = None,
                 mode: Optional[str] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 owner_role_type: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 source_type: Optional[str] = None,
                 stale: Optional[bool] = None,
                 stale_after: Optional[str] = None,
                 table_name: Optional[str] = None,
                 type: Optional[str] = None):
        if base_tables is not None:
            pulumi.set(__self__, "base_tables", base_tables)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if invalid_reason is not None:
            pulumi.set(__self__, "invalid_reason", invalid_reason)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if stale is not None:
            pulumi.set(__self__, "stale", stale)
        if stale_after is not None:
            pulumi.set(__self__, "stale_after", stale_after)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="baseTables")
    def base_tables(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "base_tables")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="invalidReason")
    def invalid_reason(self) -> Optional[str]:
        return pulumi.get(self, "invalid_reason")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[str]:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def stale(self) -> Optional[bool]:
        return pulumi.get(self, "stale")

    @property
    @pulumi.getter(name="staleAfter")
    def stale_after(self) -> Optional[str]:
        return pulumi.get(self, "stale_after")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class StreamOnExternalTableShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseTables":
            suggest = "base_tables"
        elif key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "invalidReason":
            suggest = "invalid_reason"
        elif key == "ownerRoleType":
            suggest = "owner_role_type"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "staleAfter":
            suggest = "stale_after"
        elif key == "tableName":
            suggest = "table_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamOnExternalTableShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamOnExternalTableShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamOnExternalTableShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_tables: Optional[Sequence[str]] = None,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 invalid_reason: Optional[str] = None,
                 mode: Optional[str] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 owner_role_type: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 source_type: Optional[str] = None,
                 stale: Optional[bool] = None,
                 stale_after: Optional[str] = None,
                 table_name: Optional[str] = None,
                 type: Optional[str] = None):
        if base_tables is not None:
            pulumi.set(__self__, "base_tables", base_tables)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if invalid_reason is not None:
            pulumi.set(__self__, "invalid_reason", invalid_reason)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if stale is not None:
            pulumi.set(__self__, "stale", stale)
        if stale_after is not None:
            pulumi.set(__self__, "stale_after", stale_after)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="baseTables")
    def base_tables(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "base_tables")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="invalidReason")
    def invalid_reason(self) -> Optional[str]:
        return pulumi.get(self, "invalid_reason")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[str]:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def stale(self) -> Optional[bool]:
        return pulumi.get(self, "stale")

    @property
    @pulumi.getter(name="staleAfter")
    def stale_after(self) -> Optional[str]:
        return pulumi.get(self, "stale_after")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class StreamOnTableAt(dict):
    def __init__(__self__, *,
                 offset: Optional[str] = None,
                 statement: Optional[str] = None,
                 stream: Optional[str] = None,
                 timestamp: Optional[str] = None):
        """
        :param str offset: Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        :param str statement: Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        :param str stream: Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        :param str timestamp: Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if statement is not None:
            pulumi.set(__self__, "statement", statement)
        if stream is not None:
            pulumi.set(__self__, "stream", stream)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def offset(self) -> Optional[str]:
        """
        Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def statement(self) -> Optional[str]:
        """
        Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        """
        return pulumi.get(self, "statement")

    @property
    @pulumi.getter
    def stream(self) -> Optional[str]:
        """
        Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        """
        return pulumi.get(self, "stream")

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[str]:
        """
        Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class StreamOnTableBefore(dict):
    def __init__(__self__, *,
                 offset: Optional[str] = None,
                 statement: Optional[str] = None,
                 stream: Optional[str] = None,
                 timestamp: Optional[str] = None):
        """
        :param str offset: Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        :param str statement: Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        :param str stream: Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        :param str timestamp: Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if statement is not None:
            pulumi.set(__self__, "statement", statement)
        if stream is not None:
            pulumi.set(__self__, "stream", stream)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def offset(self) -> Optional[str]:
        """
        Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def statement(self) -> Optional[str]:
        """
        Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        """
        return pulumi.get(self, "statement")

    @property
    @pulumi.getter
    def stream(self) -> Optional[str]:
        """
        Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        """
        return pulumi.get(self, "stream")

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[str]:
        """
        Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class StreamOnTableDescribeOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseTables":
            suggest = "base_tables"
        elif key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "invalidReason":
            suggest = "invalid_reason"
        elif key == "ownerRoleType":
            suggest = "owner_role_type"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "staleAfter":
            suggest = "stale_after"
        elif key == "tableName":
            suggest = "table_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamOnTableDescribeOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamOnTableDescribeOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamOnTableDescribeOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_tables: Optional[Sequence[str]] = None,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 invalid_reason: Optional[str] = None,
                 mode: Optional[str] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 owner_role_type: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 source_type: Optional[str] = None,
                 stale: Optional[bool] = None,
                 stale_after: Optional[str] = None,
                 table_name: Optional[str] = None,
                 type: Optional[str] = None):
        if base_tables is not None:
            pulumi.set(__self__, "base_tables", base_tables)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if invalid_reason is not None:
            pulumi.set(__self__, "invalid_reason", invalid_reason)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if stale is not None:
            pulumi.set(__self__, "stale", stale)
        if stale_after is not None:
            pulumi.set(__self__, "stale_after", stale_after)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="baseTables")
    def base_tables(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "base_tables")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="invalidReason")
    def invalid_reason(self) -> Optional[str]:
        return pulumi.get(self, "invalid_reason")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[str]:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def stale(self) -> Optional[bool]:
        return pulumi.get(self, "stale")

    @property
    @pulumi.getter(name="staleAfter")
    def stale_after(self) -> Optional[str]:
        return pulumi.get(self, "stale_after")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class StreamOnTableShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseTables":
            suggest = "base_tables"
        elif key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "invalidReason":
            suggest = "invalid_reason"
        elif key == "ownerRoleType":
            suggest = "owner_role_type"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "staleAfter":
            suggest = "stale_after"
        elif key == "tableName":
            suggest = "table_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamOnTableShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamOnTableShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamOnTableShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_tables: Optional[Sequence[str]] = None,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 invalid_reason: Optional[str] = None,
                 mode: Optional[str] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 owner_role_type: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 source_type: Optional[str] = None,
                 stale: Optional[bool] = None,
                 stale_after: Optional[str] = None,
                 table_name: Optional[str] = None,
                 type: Optional[str] = None):
        if base_tables is not None:
            pulumi.set(__self__, "base_tables", base_tables)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if invalid_reason is not None:
            pulumi.set(__self__, "invalid_reason", invalid_reason)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if stale is not None:
            pulumi.set(__self__, "stale", stale)
        if stale_after is not None:
            pulumi.set(__self__, "stale_after", stale_after)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="baseTables")
    def base_tables(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "base_tables")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="invalidReason")
    def invalid_reason(self) -> Optional[str]:
        return pulumi.get(self, "invalid_reason")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[str]:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def stale(self) -> Optional[bool]:
        return pulumi.get(self, "stale")

    @property
    @pulumi.getter(name="staleAfter")
    def stale_after(self) -> Optional[str]:
        return pulumi.get(self, "stale_after")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class StreamOnViewAt(dict):
    def __init__(__self__, *,
                 offset: Optional[str] = None,
                 statement: Optional[str] = None,
                 stream: Optional[str] = None,
                 timestamp: Optional[str] = None):
        """
        :param str offset: Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        :param str statement: Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        :param str stream: Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        :param str timestamp: Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if statement is not None:
            pulumi.set(__self__, "statement", statement)
        if stream is not None:
            pulumi.set(__self__, "stream", stream)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def offset(self) -> Optional[str]:
        """
        Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def statement(self) -> Optional[str]:
        """
        Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        """
        return pulumi.get(self, "statement")

    @property
    @pulumi.getter
    def stream(self) -> Optional[str]:
        """
        Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        """
        return pulumi.get(self, "stream")

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[str]:
        """
        Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class StreamOnViewBefore(dict):
    def __init__(__self__, *,
                 offset: Optional[str] = None,
                 statement: Optional[str] = None,
                 stream: Optional[str] = None,
                 timestamp: Optional[str] = None):
        """
        :param str offset: Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        :param str statement: Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        :param str stream: Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        :param str timestamp: Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if statement is not None:
            pulumi.set(__self__, "statement", statement)
        if stream is not None:
            pulumi.set(__self__, "stream", stream)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def offset(self) -> Optional[str]:
        """
        Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def statement(self) -> Optional[str]:
        """
        Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        """
        return pulumi.get(self, "statement")

    @property
    @pulumi.getter
    def stream(self) -> Optional[str]:
        """
        Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        """
        return pulumi.get(self, "stream")

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[str]:
        """
        Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class StreamOnViewDescribeOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseTables":
            suggest = "base_tables"
        elif key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "invalidReason":
            suggest = "invalid_reason"
        elif key == "ownerRoleType":
            suggest = "owner_role_type"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "staleAfter":
            suggest = "stale_after"
        elif key == "tableName":
            suggest = "table_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamOnViewDescribeOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamOnViewDescribeOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamOnViewDescribeOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_tables: Optional[Sequence[str]] = None,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 invalid_reason: Optional[str] = None,
                 mode: Optional[str] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 owner_role_type: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 source_type: Optional[str] = None,
                 stale: Optional[bool] = None,
                 stale_after: Optional[str] = None,
                 table_name: Optional[str] = None,
                 type: Optional[str] = None):
        if base_tables is not None:
            pulumi.set(__self__, "base_tables", base_tables)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if invalid_reason is not None:
            pulumi.set(__self__, "invalid_reason", invalid_reason)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if stale is not None:
            pulumi.set(__self__, "stale", stale)
        if stale_after is not None:
            pulumi.set(__self__, "stale_after", stale_after)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="baseTables")
    def base_tables(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "base_tables")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="invalidReason")
    def invalid_reason(self) -> Optional[str]:
        return pulumi.get(self, "invalid_reason")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[str]:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def stale(self) -> Optional[bool]:
        return pulumi.get(self, "stale")

    @property
    @pulumi.getter(name="staleAfter")
    def stale_after(self) -> Optional[str]:
        return pulumi.get(self, "stale_after")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class StreamOnViewShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseTables":
            suggest = "base_tables"
        elif key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "invalidReason":
            suggest = "invalid_reason"
        elif key == "ownerRoleType":
            suggest = "owner_role_type"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "staleAfter":
            suggest = "stale_after"
        elif key == "tableName":
            suggest = "table_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamOnViewShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamOnViewShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamOnViewShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_tables: Optional[Sequence[str]] = None,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 invalid_reason: Optional[str] = None,
                 mode: Optional[str] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 owner_role_type: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 source_type: Optional[str] = None,
                 stale: Optional[bool] = None,
                 stale_after: Optional[str] = None,
                 table_name: Optional[str] = None,
                 type: Optional[str] = None):
        if base_tables is not None:
            pulumi.set(__self__, "base_tables", base_tables)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if invalid_reason is not None:
            pulumi.set(__self__, "invalid_reason", invalid_reason)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if stale is not None:
            pulumi.set(__self__, "stale", stale)
        if stale_after is not None:
            pulumi.set(__self__, "stale_after", stale_after)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="baseTables")
    def base_tables(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "base_tables")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="invalidReason")
    def invalid_reason(self) -> Optional[str]:
        return pulumi.get(self, "invalid_reason")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[str]:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def stale(self) -> Optional[bool]:
        return pulumi.get(self, "stale")

    @property
    @pulumi.getter(name="staleAfter")
    def stale_after(self) -> Optional[str]:
        return pulumi.get(self, "stale_after")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class StreamlitDescribeOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultPackages":
            suggest = "default_packages"
        elif key == "externalAccessIntegrations":
            suggest = "external_access_integrations"
        elif key == "externalAccessSecrets":
            suggest = "external_access_secrets"
        elif key == "importUrls":
            suggest = "import_urls"
        elif key == "mainFile":
            suggest = "main_file"
        elif key == "queryWarehouse":
            suggest = "query_warehouse"
        elif key == "rootLocation":
            suggest = "root_location"
        elif key == "urlId":
            suggest = "url_id"
        elif key == "userPackages":
            suggest = "user_packages"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamlitDescribeOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamlitDescribeOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamlitDescribeOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_packages: Optional[str] = None,
                 external_access_integrations: Optional[Sequence[str]] = None,
                 external_access_secrets: Optional[str] = None,
                 import_urls: Optional[Sequence[str]] = None,
                 main_file: Optional[str] = None,
                 name: Optional[str] = None,
                 query_warehouse: Optional[str] = None,
                 root_location: Optional[str] = None,
                 title: Optional[str] = None,
                 url_id: Optional[str] = None,
                 user_packages: Optional[Sequence[str]] = None):
        if default_packages is not None:
            pulumi.set(__self__, "default_packages", default_packages)
        if external_access_integrations is not None:
            pulumi.set(__self__, "external_access_integrations", external_access_integrations)
        if external_access_secrets is not None:
            pulumi.set(__self__, "external_access_secrets", external_access_secrets)
        if import_urls is not None:
            pulumi.set(__self__, "import_urls", import_urls)
        if main_file is not None:
            pulumi.set(__self__, "main_file", main_file)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if query_warehouse is not None:
            pulumi.set(__self__, "query_warehouse", query_warehouse)
        if root_location is not None:
            pulumi.set(__self__, "root_location", root_location)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if url_id is not None:
            pulumi.set(__self__, "url_id", url_id)
        if user_packages is not None:
            pulumi.set(__self__, "user_packages", user_packages)

    @property
    @pulumi.getter(name="defaultPackages")
    def default_packages(self) -> Optional[str]:
        return pulumi.get(self, "default_packages")

    @property
    @pulumi.getter(name="externalAccessIntegrations")
    def external_access_integrations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "external_access_integrations")

    @property
    @pulumi.getter(name="externalAccessSecrets")
    def external_access_secrets(self) -> Optional[str]:
        return pulumi.get(self, "external_access_secrets")

    @property
    @pulumi.getter(name="importUrls")
    def import_urls(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "import_urls")

    @property
    @pulumi.getter(name="mainFile")
    def main_file(self) -> Optional[str]:
        return pulumi.get(self, "main_file")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="queryWarehouse")
    def query_warehouse(self) -> Optional[str]:
        return pulumi.get(self, "query_warehouse")

    @property
    @pulumi.getter(name="rootLocation")
    def root_location(self) -> Optional[str]:
        return pulumi.get(self, "root_location")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="urlId")
    def url_id(self) -> Optional[str]:
        return pulumi.get(self, "url_id")

    @property
    @pulumi.getter(name="userPackages")
    def user_packages(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_packages")


@pulumi.output_type
class StreamlitShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "ownerRoleType":
            suggest = "owner_role_type"
        elif key == "queryWarehouse":
            suggest = "query_warehouse"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "urlId":
            suggest = "url_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamlitShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamlitShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamlitShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 owner_role_type: Optional[str] = None,
                 query_warehouse: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 title: Optional[str] = None,
                 url_id: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if query_warehouse is not None:
            pulumi.set(__self__, "query_warehouse", query_warehouse)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if url_id is not None:
            pulumi.set(__self__, "url_id", url_id)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[str]:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="queryWarehouse")
    def query_warehouse(self) -> Optional[str]:
        return pulumi.get(self, "query_warehouse")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="urlId")
    def url_id(self) -> Optional[str]:
        return pulumi.get(self, "url_id")


@pulumi.output_type
class TableColumn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maskingPolicy":
            suggest = "masking_policy"
        elif key == "schemaEvolutionRecord":
            suggest = "schema_evolution_record"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableColumn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableColumn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableColumn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 type: str,
                 collate: Optional[str] = None,
                 comment: Optional[str] = None,
                 default: Optional['outputs.TableColumnDefault'] = None,
                 identity: Optional['outputs.TableColumnIdentity'] = None,
                 masking_policy: Optional[str] = None,
                 nullable: Optional[bool] = None,
                 schema_evolution_record: Optional[str] = None):
        """
        :param str name: Column name
        :param str type: Column type, e.g. VARIANT. For a full list of column types, see [Summary of Data Types](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
        :param str collate: Column collation, e.g. utf8
        :param str comment: Column comment
        :param 'TableColumnDefaultArgs' default: Defines the column default value; note due to limitations of Snowflake's ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied
        :param 'TableColumnIdentityArgs' identity: Defines the identity start/step values for a column. **Note** Identity/default are mutually exclusive.
        :param str masking_policy: Masking policy to apply on column. It has to be a fully qualified name.
        :param bool nullable: Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
        :param str schema_evolution_record: Record of schema evolution.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if collate is not None:
            pulumi.set(__self__, "collate", collate)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)
        if masking_policy is not None:
            pulumi.set(__self__, "masking_policy", masking_policy)
        if nullable is not None:
            pulumi.set(__self__, "nullable", nullable)
        if schema_evolution_record is not None:
            pulumi.set(__self__, "schema_evolution_record", schema_evolution_record)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Column name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Column type, e.g. VARIANT. For a full list of column types, see [Summary of Data Types](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def collate(self) -> Optional[str]:
        """
        Column collation, e.g. utf8
        """
        return pulumi.get(self, "collate")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        Column comment
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def default(self) -> Optional['outputs.TableColumnDefault']:
        """
        Defines the column default value; note due to limitations of Snowflake's ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def identity(self) -> Optional['outputs.TableColumnIdentity']:
        """
        Defines the identity start/step values for a column. **Note** Identity/default are mutually exclusive.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter(name="maskingPolicy")
    def masking_policy(self) -> Optional[str]:
        """
        Masking policy to apply on column. It has to be a fully qualified name.
        """
        return pulumi.get(self, "masking_policy")

    @property
    @pulumi.getter
    def nullable(self) -> Optional[bool]:
        """
        Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
        """
        return pulumi.get(self, "nullable")

    @property
    @pulumi.getter(name="schemaEvolutionRecord")
    def schema_evolution_record(self) -> Optional[str]:
        """
        Record of schema evolution.
        """
        return pulumi.get(self, "schema_evolution_record")


@pulumi.output_type
class TableColumnDefault(dict):
    def __init__(__self__, *,
                 constant: Optional[str] = None,
                 expression: Optional[str] = None,
                 sequence: Optional[str] = None):
        """
        :param str constant: The default constant value for the column
        :param str expression: The default expression value for the column
        :param str sequence: The default sequence to use for the column
        """
        if constant is not None:
            pulumi.set(__self__, "constant", constant)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if sequence is not None:
            pulumi.set(__self__, "sequence", sequence)

    @property
    @pulumi.getter
    def constant(self) -> Optional[str]:
        """
        The default constant value for the column
        """
        return pulumi.get(self, "constant")

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        """
        The default expression value for the column
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def sequence(self) -> Optional[str]:
        """
        The default sequence to use for the column
        """
        return pulumi.get(self, "sequence")


@pulumi.output_type
class TableColumnIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startNum":
            suggest = "start_num"
        elif key == "stepNum":
            suggest = "step_num"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableColumnIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableColumnIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableColumnIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_num: Optional[int] = None,
                 step_num: Optional[int] = None):
        """
        :param int start_num: The number to start incrementing at.
        :param int step_num: Step size to increment by.
        """
        if start_num is not None:
            pulumi.set(__self__, "start_num", start_num)
        if step_num is not None:
            pulumi.set(__self__, "step_num", step_num)

    @property
    @pulumi.getter(name="startNum")
    def start_num(self) -> Optional[int]:
        """
        The number to start incrementing at.
        """
        return pulumi.get(self, "start_num")

    @property
    @pulumi.getter(name="stepNum")
    def step_num(self) -> Optional[int]:
        """
        Step size to increment by.
        """
        return pulumi.get(self, "step_num")


@pulumi.output_type
class TableConstraintForeignKeyProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "onDelete":
            suggest = "on_delete"
        elif key == "onUpdate":
            suggest = "on_update"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableConstraintForeignKeyProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableConstraintForeignKeyProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableConstraintForeignKeyProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 references: 'outputs.TableConstraintForeignKeyPropertiesReferences',
                 match: Optional[str] = None,
                 on_delete: Optional[str] = None,
                 on_update: Optional[str] = None):
        """
        :param 'TableConstraintForeignKeyPropertiesReferencesArgs' references: The table and columns that the foreign key references.
        :param str match: The match type for the foreign key. Not applicable for primary/unique keys
        :param str on_delete: Specifies the action performed when the primary/unique key for the foreign key is deleted. Not applicable for primary/unique keys
        :param str on_update: Specifies the action performed when the primary/unique key for the foreign key is updated. Not applicable for primary/unique keys
        """
        pulumi.set(__self__, "references", references)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if on_delete is not None:
            pulumi.set(__self__, "on_delete", on_delete)
        if on_update is not None:
            pulumi.set(__self__, "on_update", on_update)

    @property
    @pulumi.getter
    def references(self) -> 'outputs.TableConstraintForeignKeyPropertiesReferences':
        """
        The table and columns that the foreign key references.
        """
        return pulumi.get(self, "references")

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        """
        The match type for the foreign key. Not applicable for primary/unique keys
        """
        return pulumi.get(self, "match")

    @property
    @pulumi.getter(name="onDelete")
    def on_delete(self) -> Optional[str]:
        """
        Specifies the action performed when the primary/unique key for the foreign key is deleted. Not applicable for primary/unique keys
        """
        return pulumi.get(self, "on_delete")

    @property
    @pulumi.getter(name="onUpdate")
    def on_update(self) -> Optional[str]:
        """
        Specifies the action performed when the primary/unique key for the foreign key is updated. Not applicable for primary/unique keys
        """
        return pulumi.get(self, "on_update")


@pulumi.output_type
class TableConstraintForeignKeyPropertiesReferences(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tableId":
            suggest = "table_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableConstraintForeignKeyPropertiesReferences. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableConstraintForeignKeyPropertiesReferences.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableConstraintForeignKeyPropertiesReferences.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 columns: Sequence[str],
                 table_id: str):
        """
        :param Sequence[str] columns: Columns to use in foreign key reference
        :param str table_id: Name of constraint
        """
        pulumi.set(__self__, "columns", columns)
        pulumi.set(__self__, "table_id", table_id)

    @property
    @pulumi.getter
    def columns(self) -> Sequence[str]:
        """
        Columns to use in foreign key reference
        """
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter(name="tableId")
    def table_id(self) -> str:
        """
        Name of constraint
        """
        return pulumi.get(self, "table_id")


@pulumi.output_type
class TablePrimaryKey(dict):
    def __init__(__self__, *,
                 keys: Sequence[str],
                 name: Optional[str] = None):
        """
        :param Sequence[str] keys: Columns to use in primary key
        :param str name: Name of constraint
        """
        pulumi.set(__self__, "keys", keys)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def keys(self) -> Sequence[str]:
        """
        Columns to use in primary key
        """
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of constraint
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class TableTag(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param str name: Tag name, e.g. department.
        :param str value: Tag value, e.g. marketing_info.
        :param str database: Name of the database that the tag was created in.
        :param str schema: Name of the schema that the tag was created in.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Tag name, e.g. department.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag value, e.g. marketing_info.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Name of the database that the tag was created in.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Name of the schema that the tag was created in.
        """
        return pulumi.get(self, "schema")


@pulumi.output_type
class TagAssociationObjectIdentifier(dict):
    def __init__(__self__, *,
                 name: str,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param str name: Name of the object to associate the tag with.
        :param str database: Name of the database that the object was created in.
        :param str schema: Name of the schema that the object was created in.
        """
        pulumi.set(__self__, "name", name)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the object to associate the tag with.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Name of the database that the object was created in.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Name of the schema that the object was created in.
        """
        return pulumi.get(self, "schema")


@pulumi.output_type
class TagShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedValues":
            suggest = "allowed_values"
        elif key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "ownerRoleType":
            suggest = "owner_role_type"
        elif key == "schemaName":
            suggest = "schema_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TagShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TagShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TagShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_values: Optional[Sequence[str]] = None,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 owner_role_type: Optional[str] = None,
                 schema_name: Optional[str] = None):
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[str]:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class TaskParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "abortDetachedQueries":
            suggest = "abort_detached_queries"
        elif key == "binaryInputFormats":
            suggest = "binary_input_formats"
        elif key == "binaryOutputFormats":
            suggest = "binary_output_formats"
        elif key == "clientMemoryLimits":
            suggest = "client_memory_limits"
        elif key == "clientMetadataRequestUseConnectionCtxes":
            suggest = "client_metadata_request_use_connection_ctxes"
        elif key == "clientPrefetchThreads":
            suggest = "client_prefetch_threads"
        elif key == "clientResultChunkSizes":
            suggest = "client_result_chunk_sizes"
        elif key == "clientResultColumnCaseInsensitives":
            suggest = "client_result_column_case_insensitives"
        elif key == "clientSessionKeepAliveHeartbeatFrequencies":
            suggest = "client_session_keep_alive_heartbeat_frequencies"
        elif key == "clientSessionKeepAlives":
            suggest = "client_session_keep_alives"
        elif key == "clientTimestampTypeMappings":
            suggest = "client_timestamp_type_mappings"
        elif key == "dateInputFormats":
            suggest = "date_input_formats"
        elif key == "dateOutputFormats":
            suggest = "date_output_formats"
        elif key == "enableUnloadPhysicalTypeOptimizations":
            suggest = "enable_unload_physical_type_optimizations"
        elif key == "errorOnNondeterministicMerges":
            suggest = "error_on_nondeterministic_merges"
        elif key == "errorOnNondeterministicUpdates":
            suggest = "error_on_nondeterministic_updates"
        elif key == "geographyOutputFormats":
            suggest = "geography_output_formats"
        elif key == "geometryOutputFormats":
            suggest = "geometry_output_formats"
        elif key == "jdbcTreatTimestampNtzAsUtcs":
            suggest = "jdbc_treat_timestamp_ntz_as_utcs"
        elif key == "jdbcUseSessionTimezones":
            suggest = "jdbc_use_session_timezones"
        elif key == "jsonIndents":
            suggest = "json_indents"
        elif key == "lockTimeouts":
            suggest = "lock_timeouts"
        elif key == "logLevels":
            suggest = "log_levels"
        elif key == "multiStatementCounts":
            suggest = "multi_statement_counts"
        elif key == "noorderSequenceAsDefaults":
            suggest = "noorder_sequence_as_defaults"
        elif key == "odbcTreatDecimalAsInts":
            suggest = "odbc_treat_decimal_as_ints"
        elif key == "queryTags":
            suggest = "query_tags"
        elif key == "quotedIdentifiersIgnoreCases":
            suggest = "quoted_identifiers_ignore_cases"
        elif key == "rowsPerResultsets":
            suggest = "rows_per_resultsets"
        elif key == "s3StageVpceDnsNames":
            suggest = "s3_stage_vpce_dns_names"
        elif key == "searchPaths":
            suggest = "search_paths"
        elif key == "statementQueuedTimeoutInSeconds":
            suggest = "statement_queued_timeout_in_seconds"
        elif key == "statementTimeoutInSeconds":
            suggest = "statement_timeout_in_seconds"
        elif key == "strictJsonOutputs":
            suggest = "strict_json_outputs"
        elif key == "suspendTaskAfterNumFailures":
            suggest = "suspend_task_after_num_failures"
        elif key == "taskAutoRetryAttempts":
            suggest = "task_auto_retry_attempts"
        elif key == "timeInputFormats":
            suggest = "time_input_formats"
        elif key == "timeOutputFormats":
            suggest = "time_output_formats"
        elif key == "timestampDayIsAlways24hs":
            suggest = "timestamp_day_is_always24hs"
        elif key == "timestampInputFormats":
            suggest = "timestamp_input_formats"
        elif key == "timestampLtzOutputFormats":
            suggest = "timestamp_ltz_output_formats"
        elif key == "timestampNtzOutputFormats":
            suggest = "timestamp_ntz_output_formats"
        elif key == "timestampOutputFormats":
            suggest = "timestamp_output_formats"
        elif key == "timestampTypeMappings":
            suggest = "timestamp_type_mappings"
        elif key == "timestampTzOutputFormats":
            suggest = "timestamp_tz_output_formats"
        elif key == "traceLevels":
            suggest = "trace_levels"
        elif key == "transactionAbortOnErrors":
            suggest = "transaction_abort_on_errors"
        elif key == "transactionDefaultIsolationLevels":
            suggest = "transaction_default_isolation_levels"
        elif key == "twoDigitCenturyStarts":
            suggest = "two_digit_century_starts"
        elif key == "unsupportedDdlActions":
            suggest = "unsupported_ddl_actions"
        elif key == "useCachedResults":
            suggest = "use_cached_results"
        elif key == "userTaskManagedInitialWarehouseSizes":
            suggest = "user_task_managed_initial_warehouse_sizes"
        elif key == "userTaskMinimumTriggerIntervalInSeconds":
            suggest = "user_task_minimum_trigger_interval_in_seconds"
        elif key == "userTaskTimeoutMs":
            suggest = "user_task_timeout_ms"
        elif key == "weekOfYearPolicies":
            suggest = "week_of_year_policies"
        elif key == "weekStarts":
            suggest = "week_starts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 abort_detached_queries: Optional[Sequence['outputs.TaskParameterAbortDetachedQuery']] = None,
                 autocommits: Optional[Sequence['outputs.TaskParameterAutocommit']] = None,
                 binary_input_formats: Optional[Sequence['outputs.TaskParameterBinaryInputFormat']] = None,
                 binary_output_formats: Optional[Sequence['outputs.TaskParameterBinaryOutputFormat']] = None,
                 client_memory_limits: Optional[Sequence['outputs.TaskParameterClientMemoryLimit']] = None,
                 client_metadata_request_use_connection_ctxes: Optional[Sequence['outputs.TaskParameterClientMetadataRequestUseConnectionCtx']] = None,
                 client_prefetch_threads: Optional[Sequence['outputs.TaskParameterClientPrefetchThread']] = None,
                 client_result_chunk_sizes: Optional[Sequence['outputs.TaskParameterClientResultChunkSize']] = None,
                 client_result_column_case_insensitives: Optional[Sequence['outputs.TaskParameterClientResultColumnCaseInsensitive']] = None,
                 client_session_keep_alive_heartbeat_frequencies: Optional[Sequence['outputs.TaskParameterClientSessionKeepAliveHeartbeatFrequency']] = None,
                 client_session_keep_alives: Optional[Sequence['outputs.TaskParameterClientSessionKeepAlife']] = None,
                 client_timestamp_type_mappings: Optional[Sequence['outputs.TaskParameterClientTimestampTypeMapping']] = None,
                 date_input_formats: Optional[Sequence['outputs.TaskParameterDateInputFormat']] = None,
                 date_output_formats: Optional[Sequence['outputs.TaskParameterDateOutputFormat']] = None,
                 enable_unload_physical_type_optimizations: Optional[Sequence['outputs.TaskParameterEnableUnloadPhysicalTypeOptimization']] = None,
                 error_on_nondeterministic_merges: Optional[Sequence['outputs.TaskParameterErrorOnNondeterministicMerge']] = None,
                 error_on_nondeterministic_updates: Optional[Sequence['outputs.TaskParameterErrorOnNondeterministicUpdate']] = None,
                 geography_output_formats: Optional[Sequence['outputs.TaskParameterGeographyOutputFormat']] = None,
                 geometry_output_formats: Optional[Sequence['outputs.TaskParameterGeometryOutputFormat']] = None,
                 jdbc_treat_timestamp_ntz_as_utcs: Optional[Sequence['outputs.TaskParameterJdbcTreatTimestampNtzAsUtc']] = None,
                 jdbc_use_session_timezones: Optional[Sequence['outputs.TaskParameterJdbcUseSessionTimezone']] = None,
                 json_indents: Optional[Sequence['outputs.TaskParameterJsonIndent']] = None,
                 lock_timeouts: Optional[Sequence['outputs.TaskParameterLockTimeout']] = None,
                 log_levels: Optional[Sequence['outputs.TaskParameterLogLevel']] = None,
                 multi_statement_counts: Optional[Sequence['outputs.TaskParameterMultiStatementCount']] = None,
                 noorder_sequence_as_defaults: Optional[Sequence['outputs.TaskParameterNoorderSequenceAsDefault']] = None,
                 odbc_treat_decimal_as_ints: Optional[Sequence['outputs.TaskParameterOdbcTreatDecimalAsInt']] = None,
                 query_tags: Optional[Sequence['outputs.TaskParameterQueryTag']] = None,
                 quoted_identifiers_ignore_cases: Optional[Sequence['outputs.TaskParameterQuotedIdentifiersIgnoreCase']] = None,
                 rows_per_resultsets: Optional[Sequence['outputs.TaskParameterRowsPerResultset']] = None,
                 s3_stage_vpce_dns_names: Optional[Sequence['outputs.TaskParameterS3StageVpceDnsName']] = None,
                 search_paths: Optional[Sequence['outputs.TaskParameterSearchPath']] = None,
                 statement_queued_timeout_in_seconds: Optional[Sequence['outputs.TaskParameterStatementQueuedTimeoutInSecond']] = None,
                 statement_timeout_in_seconds: Optional[Sequence['outputs.TaskParameterStatementTimeoutInSecond']] = None,
                 strict_json_outputs: Optional[Sequence['outputs.TaskParameterStrictJsonOutput']] = None,
                 suspend_task_after_num_failures: Optional[Sequence['outputs.TaskParameterSuspendTaskAfterNumFailure']] = None,
                 task_auto_retry_attempts: Optional[Sequence['outputs.TaskParameterTaskAutoRetryAttempt']] = None,
                 time_input_formats: Optional[Sequence['outputs.TaskParameterTimeInputFormat']] = None,
                 time_output_formats: Optional[Sequence['outputs.TaskParameterTimeOutputFormat']] = None,
                 timestamp_day_is_always24hs: Optional[Sequence['outputs.TaskParameterTimestampDayIsAlways24h']] = None,
                 timestamp_input_formats: Optional[Sequence['outputs.TaskParameterTimestampInputFormat']] = None,
                 timestamp_ltz_output_formats: Optional[Sequence['outputs.TaskParameterTimestampLtzOutputFormat']] = None,
                 timestamp_ntz_output_formats: Optional[Sequence['outputs.TaskParameterTimestampNtzOutputFormat']] = None,
                 timestamp_output_formats: Optional[Sequence['outputs.TaskParameterTimestampOutputFormat']] = None,
                 timestamp_type_mappings: Optional[Sequence['outputs.TaskParameterTimestampTypeMapping']] = None,
                 timestamp_tz_output_formats: Optional[Sequence['outputs.TaskParameterTimestampTzOutputFormat']] = None,
                 timezones: Optional[Sequence['outputs.TaskParameterTimezone']] = None,
                 trace_levels: Optional[Sequence['outputs.TaskParameterTraceLevel']] = None,
                 transaction_abort_on_errors: Optional[Sequence['outputs.TaskParameterTransactionAbortOnError']] = None,
                 transaction_default_isolation_levels: Optional[Sequence['outputs.TaskParameterTransactionDefaultIsolationLevel']] = None,
                 two_digit_century_starts: Optional[Sequence['outputs.TaskParameterTwoDigitCenturyStart']] = None,
                 unsupported_ddl_actions: Optional[Sequence['outputs.TaskParameterUnsupportedDdlAction']] = None,
                 use_cached_results: Optional[Sequence['outputs.TaskParameterUseCachedResult']] = None,
                 user_task_managed_initial_warehouse_sizes: Optional[Sequence['outputs.TaskParameterUserTaskManagedInitialWarehouseSize']] = None,
                 user_task_minimum_trigger_interval_in_seconds: Optional[Sequence['outputs.TaskParameterUserTaskMinimumTriggerIntervalInSecond']] = None,
                 user_task_timeout_ms: Optional[Sequence['outputs.TaskParameterUserTaskTimeoutM']] = None,
                 week_of_year_policies: Optional[Sequence['outputs.TaskParameterWeekOfYearPolicy']] = None,
                 week_starts: Optional[Sequence['outputs.TaskParameterWeekStart']] = None):
        if abort_detached_queries is not None:
            pulumi.set(__self__, "abort_detached_queries", abort_detached_queries)
        if autocommits is not None:
            pulumi.set(__self__, "autocommits", autocommits)
        if binary_input_formats is not None:
            pulumi.set(__self__, "binary_input_formats", binary_input_formats)
        if binary_output_formats is not None:
            pulumi.set(__self__, "binary_output_formats", binary_output_formats)
        if client_memory_limits is not None:
            pulumi.set(__self__, "client_memory_limits", client_memory_limits)
        if client_metadata_request_use_connection_ctxes is not None:
            pulumi.set(__self__, "client_metadata_request_use_connection_ctxes", client_metadata_request_use_connection_ctxes)
        if client_prefetch_threads is not None:
            pulumi.set(__self__, "client_prefetch_threads", client_prefetch_threads)
        if client_result_chunk_sizes is not None:
            pulumi.set(__self__, "client_result_chunk_sizes", client_result_chunk_sizes)
        if client_result_column_case_insensitives is not None:
            pulumi.set(__self__, "client_result_column_case_insensitives", client_result_column_case_insensitives)
        if client_session_keep_alive_heartbeat_frequencies is not None:
            pulumi.set(__self__, "client_session_keep_alive_heartbeat_frequencies", client_session_keep_alive_heartbeat_frequencies)
        if client_session_keep_alives is not None:
            pulumi.set(__self__, "client_session_keep_alives", client_session_keep_alives)
        if client_timestamp_type_mappings is not None:
            pulumi.set(__self__, "client_timestamp_type_mappings", client_timestamp_type_mappings)
        if date_input_formats is not None:
            pulumi.set(__self__, "date_input_formats", date_input_formats)
        if date_output_formats is not None:
            pulumi.set(__self__, "date_output_formats", date_output_formats)
        if enable_unload_physical_type_optimizations is not None:
            pulumi.set(__self__, "enable_unload_physical_type_optimizations", enable_unload_physical_type_optimizations)
        if error_on_nondeterministic_merges is not None:
            pulumi.set(__self__, "error_on_nondeterministic_merges", error_on_nondeterministic_merges)
        if error_on_nondeterministic_updates is not None:
            pulumi.set(__self__, "error_on_nondeterministic_updates", error_on_nondeterministic_updates)
        if geography_output_formats is not None:
            pulumi.set(__self__, "geography_output_formats", geography_output_formats)
        if geometry_output_formats is not None:
            pulumi.set(__self__, "geometry_output_formats", geometry_output_formats)
        if jdbc_treat_timestamp_ntz_as_utcs is not None:
            pulumi.set(__self__, "jdbc_treat_timestamp_ntz_as_utcs", jdbc_treat_timestamp_ntz_as_utcs)
        if jdbc_use_session_timezones is not None:
            pulumi.set(__self__, "jdbc_use_session_timezones", jdbc_use_session_timezones)
        if json_indents is not None:
            pulumi.set(__self__, "json_indents", json_indents)
        if lock_timeouts is not None:
            pulumi.set(__self__, "lock_timeouts", lock_timeouts)
        if log_levels is not None:
            pulumi.set(__self__, "log_levels", log_levels)
        if multi_statement_counts is not None:
            pulumi.set(__self__, "multi_statement_counts", multi_statement_counts)
        if noorder_sequence_as_defaults is not None:
            pulumi.set(__self__, "noorder_sequence_as_defaults", noorder_sequence_as_defaults)
        if odbc_treat_decimal_as_ints is not None:
            pulumi.set(__self__, "odbc_treat_decimal_as_ints", odbc_treat_decimal_as_ints)
        if query_tags is not None:
            pulumi.set(__self__, "query_tags", query_tags)
        if quoted_identifiers_ignore_cases is not None:
            pulumi.set(__self__, "quoted_identifiers_ignore_cases", quoted_identifiers_ignore_cases)
        if rows_per_resultsets is not None:
            pulumi.set(__self__, "rows_per_resultsets", rows_per_resultsets)
        if s3_stage_vpce_dns_names is not None:
            pulumi.set(__self__, "s3_stage_vpce_dns_names", s3_stage_vpce_dns_names)
        if search_paths is not None:
            pulumi.set(__self__, "search_paths", search_paths)
        if statement_queued_timeout_in_seconds is not None:
            pulumi.set(__self__, "statement_queued_timeout_in_seconds", statement_queued_timeout_in_seconds)
        if statement_timeout_in_seconds is not None:
            pulumi.set(__self__, "statement_timeout_in_seconds", statement_timeout_in_seconds)
        if strict_json_outputs is not None:
            pulumi.set(__self__, "strict_json_outputs", strict_json_outputs)
        if suspend_task_after_num_failures is not None:
            pulumi.set(__self__, "suspend_task_after_num_failures", suspend_task_after_num_failures)
        if task_auto_retry_attempts is not None:
            pulumi.set(__self__, "task_auto_retry_attempts", task_auto_retry_attempts)
        if time_input_formats is not None:
            pulumi.set(__self__, "time_input_formats", time_input_formats)
        if time_output_formats is not None:
            pulumi.set(__self__, "time_output_formats", time_output_formats)
        if timestamp_day_is_always24hs is not None:
            pulumi.set(__self__, "timestamp_day_is_always24hs", timestamp_day_is_always24hs)
        if timestamp_input_formats is not None:
            pulumi.set(__self__, "timestamp_input_formats", timestamp_input_formats)
        if timestamp_ltz_output_formats is not None:
            pulumi.set(__self__, "timestamp_ltz_output_formats", timestamp_ltz_output_formats)
        if timestamp_ntz_output_formats is not None:
            pulumi.set(__self__, "timestamp_ntz_output_formats", timestamp_ntz_output_formats)
        if timestamp_output_formats is not None:
            pulumi.set(__self__, "timestamp_output_formats", timestamp_output_formats)
        if timestamp_type_mappings is not None:
            pulumi.set(__self__, "timestamp_type_mappings", timestamp_type_mappings)
        if timestamp_tz_output_formats is not None:
            pulumi.set(__self__, "timestamp_tz_output_formats", timestamp_tz_output_formats)
        if timezones is not None:
            pulumi.set(__self__, "timezones", timezones)
        if trace_levels is not None:
            pulumi.set(__self__, "trace_levels", trace_levels)
        if transaction_abort_on_errors is not None:
            pulumi.set(__self__, "transaction_abort_on_errors", transaction_abort_on_errors)
        if transaction_default_isolation_levels is not None:
            pulumi.set(__self__, "transaction_default_isolation_levels", transaction_default_isolation_levels)
        if two_digit_century_starts is not None:
            pulumi.set(__self__, "two_digit_century_starts", two_digit_century_starts)
        if unsupported_ddl_actions is not None:
            pulumi.set(__self__, "unsupported_ddl_actions", unsupported_ddl_actions)
        if use_cached_results is not None:
            pulumi.set(__self__, "use_cached_results", use_cached_results)
        if user_task_managed_initial_warehouse_sizes is not None:
            pulumi.set(__self__, "user_task_managed_initial_warehouse_sizes", user_task_managed_initial_warehouse_sizes)
        if user_task_minimum_trigger_interval_in_seconds is not None:
            pulumi.set(__self__, "user_task_minimum_trigger_interval_in_seconds", user_task_minimum_trigger_interval_in_seconds)
        if user_task_timeout_ms is not None:
            pulumi.set(__self__, "user_task_timeout_ms", user_task_timeout_ms)
        if week_of_year_policies is not None:
            pulumi.set(__self__, "week_of_year_policies", week_of_year_policies)
        if week_starts is not None:
            pulumi.set(__self__, "week_starts", week_starts)

    @property
    @pulumi.getter(name="abortDetachedQueries")
    def abort_detached_queries(self) -> Optional[Sequence['outputs.TaskParameterAbortDetachedQuery']]:
        return pulumi.get(self, "abort_detached_queries")

    @property
    @pulumi.getter
    def autocommits(self) -> Optional[Sequence['outputs.TaskParameterAutocommit']]:
        return pulumi.get(self, "autocommits")

    @property
    @pulumi.getter(name="binaryInputFormats")
    def binary_input_formats(self) -> Optional[Sequence['outputs.TaskParameterBinaryInputFormat']]:
        return pulumi.get(self, "binary_input_formats")

    @property
    @pulumi.getter(name="binaryOutputFormats")
    def binary_output_formats(self) -> Optional[Sequence['outputs.TaskParameterBinaryOutputFormat']]:
        return pulumi.get(self, "binary_output_formats")

    @property
    @pulumi.getter(name="clientMemoryLimits")
    def client_memory_limits(self) -> Optional[Sequence['outputs.TaskParameterClientMemoryLimit']]:
        return pulumi.get(self, "client_memory_limits")

    @property
    @pulumi.getter(name="clientMetadataRequestUseConnectionCtxes")
    def client_metadata_request_use_connection_ctxes(self) -> Optional[Sequence['outputs.TaskParameterClientMetadataRequestUseConnectionCtx']]:
        return pulumi.get(self, "client_metadata_request_use_connection_ctxes")

    @property
    @pulumi.getter(name="clientPrefetchThreads")
    def client_prefetch_threads(self) -> Optional[Sequence['outputs.TaskParameterClientPrefetchThread']]:
        return pulumi.get(self, "client_prefetch_threads")

    @property
    @pulumi.getter(name="clientResultChunkSizes")
    def client_result_chunk_sizes(self) -> Optional[Sequence['outputs.TaskParameterClientResultChunkSize']]:
        return pulumi.get(self, "client_result_chunk_sizes")

    @property
    @pulumi.getter(name="clientResultColumnCaseInsensitives")
    def client_result_column_case_insensitives(self) -> Optional[Sequence['outputs.TaskParameterClientResultColumnCaseInsensitive']]:
        return pulumi.get(self, "client_result_column_case_insensitives")

    @property
    @pulumi.getter(name="clientSessionKeepAliveHeartbeatFrequencies")
    def client_session_keep_alive_heartbeat_frequencies(self) -> Optional[Sequence['outputs.TaskParameterClientSessionKeepAliveHeartbeatFrequency']]:
        return pulumi.get(self, "client_session_keep_alive_heartbeat_frequencies")

    @property
    @pulumi.getter(name="clientSessionKeepAlives")
    def client_session_keep_alives(self) -> Optional[Sequence['outputs.TaskParameterClientSessionKeepAlife']]:
        return pulumi.get(self, "client_session_keep_alives")

    @property
    @pulumi.getter(name="clientTimestampTypeMappings")
    def client_timestamp_type_mappings(self) -> Optional[Sequence['outputs.TaskParameterClientTimestampTypeMapping']]:
        return pulumi.get(self, "client_timestamp_type_mappings")

    @property
    @pulumi.getter(name="dateInputFormats")
    def date_input_formats(self) -> Optional[Sequence['outputs.TaskParameterDateInputFormat']]:
        return pulumi.get(self, "date_input_formats")

    @property
    @pulumi.getter(name="dateOutputFormats")
    def date_output_formats(self) -> Optional[Sequence['outputs.TaskParameterDateOutputFormat']]:
        return pulumi.get(self, "date_output_formats")

    @property
    @pulumi.getter(name="enableUnloadPhysicalTypeOptimizations")
    def enable_unload_physical_type_optimizations(self) -> Optional[Sequence['outputs.TaskParameterEnableUnloadPhysicalTypeOptimization']]:
        return pulumi.get(self, "enable_unload_physical_type_optimizations")

    @property
    @pulumi.getter(name="errorOnNondeterministicMerges")
    def error_on_nondeterministic_merges(self) -> Optional[Sequence['outputs.TaskParameterErrorOnNondeterministicMerge']]:
        return pulumi.get(self, "error_on_nondeterministic_merges")

    @property
    @pulumi.getter(name="errorOnNondeterministicUpdates")
    def error_on_nondeterministic_updates(self) -> Optional[Sequence['outputs.TaskParameterErrorOnNondeterministicUpdate']]:
        return pulumi.get(self, "error_on_nondeterministic_updates")

    @property
    @pulumi.getter(name="geographyOutputFormats")
    def geography_output_formats(self) -> Optional[Sequence['outputs.TaskParameterGeographyOutputFormat']]:
        return pulumi.get(self, "geography_output_formats")

    @property
    @pulumi.getter(name="geometryOutputFormats")
    def geometry_output_formats(self) -> Optional[Sequence['outputs.TaskParameterGeometryOutputFormat']]:
        return pulumi.get(self, "geometry_output_formats")

    @property
    @pulumi.getter(name="jdbcTreatTimestampNtzAsUtcs")
    def jdbc_treat_timestamp_ntz_as_utcs(self) -> Optional[Sequence['outputs.TaskParameterJdbcTreatTimestampNtzAsUtc']]:
        return pulumi.get(self, "jdbc_treat_timestamp_ntz_as_utcs")

    @property
    @pulumi.getter(name="jdbcUseSessionTimezones")
    def jdbc_use_session_timezones(self) -> Optional[Sequence['outputs.TaskParameterJdbcUseSessionTimezone']]:
        return pulumi.get(self, "jdbc_use_session_timezones")

    @property
    @pulumi.getter(name="jsonIndents")
    def json_indents(self) -> Optional[Sequence['outputs.TaskParameterJsonIndent']]:
        return pulumi.get(self, "json_indents")

    @property
    @pulumi.getter(name="lockTimeouts")
    def lock_timeouts(self) -> Optional[Sequence['outputs.TaskParameterLockTimeout']]:
        return pulumi.get(self, "lock_timeouts")

    @property
    @pulumi.getter(name="logLevels")
    def log_levels(self) -> Optional[Sequence['outputs.TaskParameterLogLevel']]:
        return pulumi.get(self, "log_levels")

    @property
    @pulumi.getter(name="multiStatementCounts")
    def multi_statement_counts(self) -> Optional[Sequence['outputs.TaskParameterMultiStatementCount']]:
        return pulumi.get(self, "multi_statement_counts")

    @property
    @pulumi.getter(name="noorderSequenceAsDefaults")
    def noorder_sequence_as_defaults(self) -> Optional[Sequence['outputs.TaskParameterNoorderSequenceAsDefault']]:
        return pulumi.get(self, "noorder_sequence_as_defaults")

    @property
    @pulumi.getter(name="odbcTreatDecimalAsInts")
    def odbc_treat_decimal_as_ints(self) -> Optional[Sequence['outputs.TaskParameterOdbcTreatDecimalAsInt']]:
        return pulumi.get(self, "odbc_treat_decimal_as_ints")

    @property
    @pulumi.getter(name="queryTags")
    def query_tags(self) -> Optional[Sequence['outputs.TaskParameterQueryTag']]:
        return pulumi.get(self, "query_tags")

    @property
    @pulumi.getter(name="quotedIdentifiersIgnoreCases")
    def quoted_identifiers_ignore_cases(self) -> Optional[Sequence['outputs.TaskParameterQuotedIdentifiersIgnoreCase']]:
        return pulumi.get(self, "quoted_identifiers_ignore_cases")

    @property
    @pulumi.getter(name="rowsPerResultsets")
    def rows_per_resultsets(self) -> Optional[Sequence['outputs.TaskParameterRowsPerResultset']]:
        return pulumi.get(self, "rows_per_resultsets")

    @property
    @pulumi.getter(name="s3StageVpceDnsNames")
    def s3_stage_vpce_dns_names(self) -> Optional[Sequence['outputs.TaskParameterS3StageVpceDnsName']]:
        return pulumi.get(self, "s3_stage_vpce_dns_names")

    @property
    @pulumi.getter(name="searchPaths")
    def search_paths(self) -> Optional[Sequence['outputs.TaskParameterSearchPath']]:
        return pulumi.get(self, "search_paths")

    @property
    @pulumi.getter(name="statementQueuedTimeoutInSeconds")
    def statement_queued_timeout_in_seconds(self) -> Optional[Sequence['outputs.TaskParameterStatementQueuedTimeoutInSecond']]:
        return pulumi.get(self, "statement_queued_timeout_in_seconds")

    @property
    @pulumi.getter(name="statementTimeoutInSeconds")
    def statement_timeout_in_seconds(self) -> Optional[Sequence['outputs.TaskParameterStatementTimeoutInSecond']]:
        return pulumi.get(self, "statement_timeout_in_seconds")

    @property
    @pulumi.getter(name="strictJsonOutputs")
    def strict_json_outputs(self) -> Optional[Sequence['outputs.TaskParameterStrictJsonOutput']]:
        return pulumi.get(self, "strict_json_outputs")

    @property
    @pulumi.getter(name="suspendTaskAfterNumFailures")
    def suspend_task_after_num_failures(self) -> Optional[Sequence['outputs.TaskParameterSuspendTaskAfterNumFailure']]:
        return pulumi.get(self, "suspend_task_after_num_failures")

    @property
    @pulumi.getter(name="taskAutoRetryAttempts")
    def task_auto_retry_attempts(self) -> Optional[Sequence['outputs.TaskParameterTaskAutoRetryAttempt']]:
        return pulumi.get(self, "task_auto_retry_attempts")

    @property
    @pulumi.getter(name="timeInputFormats")
    def time_input_formats(self) -> Optional[Sequence['outputs.TaskParameterTimeInputFormat']]:
        return pulumi.get(self, "time_input_formats")

    @property
    @pulumi.getter(name="timeOutputFormats")
    def time_output_formats(self) -> Optional[Sequence['outputs.TaskParameterTimeOutputFormat']]:
        return pulumi.get(self, "time_output_formats")

    @property
    @pulumi.getter(name="timestampDayIsAlways24hs")
    def timestamp_day_is_always24hs(self) -> Optional[Sequence['outputs.TaskParameterTimestampDayIsAlways24h']]:
        return pulumi.get(self, "timestamp_day_is_always24hs")

    @property
    @pulumi.getter(name="timestampInputFormats")
    def timestamp_input_formats(self) -> Optional[Sequence['outputs.TaskParameterTimestampInputFormat']]:
        return pulumi.get(self, "timestamp_input_formats")

    @property
    @pulumi.getter(name="timestampLtzOutputFormats")
    def timestamp_ltz_output_formats(self) -> Optional[Sequence['outputs.TaskParameterTimestampLtzOutputFormat']]:
        return pulumi.get(self, "timestamp_ltz_output_formats")

    @property
    @pulumi.getter(name="timestampNtzOutputFormats")
    def timestamp_ntz_output_formats(self) -> Optional[Sequence['outputs.TaskParameterTimestampNtzOutputFormat']]:
        return pulumi.get(self, "timestamp_ntz_output_formats")

    @property
    @pulumi.getter(name="timestampOutputFormats")
    def timestamp_output_formats(self) -> Optional[Sequence['outputs.TaskParameterTimestampOutputFormat']]:
        return pulumi.get(self, "timestamp_output_formats")

    @property
    @pulumi.getter(name="timestampTypeMappings")
    def timestamp_type_mappings(self) -> Optional[Sequence['outputs.TaskParameterTimestampTypeMapping']]:
        return pulumi.get(self, "timestamp_type_mappings")

    @property
    @pulumi.getter(name="timestampTzOutputFormats")
    def timestamp_tz_output_formats(self) -> Optional[Sequence['outputs.TaskParameterTimestampTzOutputFormat']]:
        return pulumi.get(self, "timestamp_tz_output_formats")

    @property
    @pulumi.getter
    def timezones(self) -> Optional[Sequence['outputs.TaskParameterTimezone']]:
        return pulumi.get(self, "timezones")

    @property
    @pulumi.getter(name="traceLevels")
    def trace_levels(self) -> Optional[Sequence['outputs.TaskParameterTraceLevel']]:
        return pulumi.get(self, "trace_levels")

    @property
    @pulumi.getter(name="transactionAbortOnErrors")
    def transaction_abort_on_errors(self) -> Optional[Sequence['outputs.TaskParameterTransactionAbortOnError']]:
        return pulumi.get(self, "transaction_abort_on_errors")

    @property
    @pulumi.getter(name="transactionDefaultIsolationLevels")
    def transaction_default_isolation_levels(self) -> Optional[Sequence['outputs.TaskParameterTransactionDefaultIsolationLevel']]:
        return pulumi.get(self, "transaction_default_isolation_levels")

    @property
    @pulumi.getter(name="twoDigitCenturyStarts")
    def two_digit_century_starts(self) -> Optional[Sequence['outputs.TaskParameterTwoDigitCenturyStart']]:
        return pulumi.get(self, "two_digit_century_starts")

    @property
    @pulumi.getter(name="unsupportedDdlActions")
    def unsupported_ddl_actions(self) -> Optional[Sequence['outputs.TaskParameterUnsupportedDdlAction']]:
        return pulumi.get(self, "unsupported_ddl_actions")

    @property
    @pulumi.getter(name="useCachedResults")
    def use_cached_results(self) -> Optional[Sequence['outputs.TaskParameterUseCachedResult']]:
        return pulumi.get(self, "use_cached_results")

    @property
    @pulumi.getter(name="userTaskManagedInitialWarehouseSizes")
    def user_task_managed_initial_warehouse_sizes(self) -> Optional[Sequence['outputs.TaskParameterUserTaskManagedInitialWarehouseSize']]:
        return pulumi.get(self, "user_task_managed_initial_warehouse_sizes")

    @property
    @pulumi.getter(name="userTaskMinimumTriggerIntervalInSeconds")
    def user_task_minimum_trigger_interval_in_seconds(self) -> Optional[Sequence['outputs.TaskParameterUserTaskMinimumTriggerIntervalInSecond']]:
        return pulumi.get(self, "user_task_minimum_trigger_interval_in_seconds")

    @property
    @pulumi.getter(name="userTaskTimeoutMs")
    def user_task_timeout_ms(self) -> Optional[Sequence['outputs.TaskParameterUserTaskTimeoutM']]:
        return pulumi.get(self, "user_task_timeout_ms")

    @property
    @pulumi.getter(name="weekOfYearPolicies")
    def week_of_year_policies(self) -> Optional[Sequence['outputs.TaskParameterWeekOfYearPolicy']]:
        return pulumi.get(self, "week_of_year_policies")

    @property
    @pulumi.getter(name="weekStarts")
    def week_starts(self) -> Optional[Sequence['outputs.TaskParameterWeekStart']]:
        return pulumi.get(self, "week_starts")


@pulumi.output_type
class TaskParameterAbortDetachedQuery(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterAutocommit(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterBinaryInputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterBinaryOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterClientMemoryLimit(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterClientMetadataRequestUseConnectionCtx(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterClientPrefetchThread(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterClientResultChunkSize(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterClientResultColumnCaseInsensitive(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterClientSessionKeepAlife(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterClientSessionKeepAliveHeartbeatFrequency(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterClientTimestampTypeMapping(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterDateInputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterDateOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterEnableUnloadPhysicalTypeOptimization(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterErrorOnNondeterministicMerge(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterErrorOnNondeterministicUpdate(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterGeographyOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterGeometryOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterJdbcTreatTimestampNtzAsUtc(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterJdbcUseSessionTimezone(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterJsonIndent(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterLockTimeout(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterLogLevel(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterMultiStatementCount(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterNoorderSequenceAsDefault(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterOdbcTreatDecimalAsInt(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterQueryTag(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterQuotedIdentifiersIgnoreCase(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterRowsPerResultset(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterS3StageVpceDnsName(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterSearchPath(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterStatementQueuedTimeoutInSecond(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterStatementTimeoutInSecond(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterStrictJsonOutput(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterSuspendTaskAfterNumFailure(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterTaskAutoRetryAttempt(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterTimeInputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterTimeOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterTimestampDayIsAlways24h(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterTimestampInputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterTimestampLtzOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterTimestampNtzOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterTimestampOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterTimestampTypeMapping(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterTimestampTzOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterTimezone(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterTraceLevel(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterTransactionAbortOnError(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterTransactionDefaultIsolationLevel(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterTwoDigitCenturyStart(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterUnsupportedDdlAction(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterUseCachedResult(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterUserTaskManagedInitialWarehouseSize(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterUserTaskMinimumTriggerIntervalInSecond(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterUserTaskTimeoutM(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterWeekOfYearPolicy(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskParameterWeekStart(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "usingCron":
            suggest = "using_cron"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 minutes: Optional[int] = None,
                 using_cron: Optional[str] = None):
        """
        :param int minutes: Specifies an interval (in minutes) of wait time inserted between runs of the task. Accepts positive integers only. (conflicts with `using_cron`)
        :param str using_cron: Specifies a cron expression and time zone for periodically running the task. Supports a subset of standard cron utility syntax. (conflicts with `minutes`)
        """
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if using_cron is not None:
            pulumi.set(__self__, "using_cron", using_cron)

    @property
    @pulumi.getter
    def minutes(self) -> Optional[int]:
        """
        Specifies an interval (in minutes) of wait time inserted between runs of the task. Accepts positive integers only. (conflicts with `using_cron`)
        """
        return pulumi.get(self, "minutes")

    @property
    @pulumi.getter(name="usingCron")
    def using_cron(self) -> Optional[str]:
        """
        Specifies a cron expression and time zone for periodically running the task. Supports a subset of standard cron utility syntax. (conflicts with `minutes`)
        """
        return pulumi.get(self, "using_cron")


@pulumi.output_type
class TaskShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowOverlappingExecution":
            suggest = "allow_overlapping_execution"
        elif key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "errorIntegration":
            suggest = "error_integration"
        elif key == "lastCommittedOn":
            suggest = "last_committed_on"
        elif key == "lastSuspendedOn":
            suggest = "last_suspended_on"
        elif key == "lastSuspendedReason":
            suggest = "last_suspended_reason"
        elif key == "ownerRoleType":
            suggest = "owner_role_type"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "taskRelations":
            suggest = "task_relations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_overlapping_execution: Optional[bool] = None,
                 budget: Optional[str] = None,
                 comment: Optional[str] = None,
                 condition: Optional[str] = None,
                 config: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 definition: Optional[str] = None,
                 error_integration: Optional[str] = None,
                 id: Optional[str] = None,
                 last_committed_on: Optional[str] = None,
                 last_suspended_on: Optional[str] = None,
                 last_suspended_reason: Optional[str] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 owner_role_type: Optional[str] = None,
                 predecessors: Optional[Sequence[str]] = None,
                 schedule: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 state: Optional[str] = None,
                 task_relations: Optional[Sequence['outputs.TaskShowOutputTaskRelation']] = None,
                 warehouse: Optional[str] = None):
        if allow_overlapping_execution is not None:
            pulumi.set(__self__, "allow_overlapping_execution", allow_overlapping_execution)
        if budget is not None:
            pulumi.set(__self__, "budget", budget)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if definition is not None:
            pulumi.set(__self__, "definition", definition)
        if error_integration is not None:
            pulumi.set(__self__, "error_integration", error_integration)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_committed_on is not None:
            pulumi.set(__self__, "last_committed_on", last_committed_on)
        if last_suspended_on is not None:
            pulumi.set(__self__, "last_suspended_on", last_suspended_on)
        if last_suspended_reason is not None:
            pulumi.set(__self__, "last_suspended_reason", last_suspended_reason)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if predecessors is not None:
            pulumi.set(__self__, "predecessors", predecessors)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if task_relations is not None:
            pulumi.set(__self__, "task_relations", task_relations)
        if warehouse is not None:
            pulumi.set(__self__, "warehouse", warehouse)

    @property
    @pulumi.getter(name="allowOverlappingExecution")
    def allow_overlapping_execution(self) -> Optional[bool]:
        return pulumi.get(self, "allow_overlapping_execution")

    @property
    @pulumi.getter
    def budget(self) -> Optional[str]:
        return pulumi.get(self, "budget")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def config(self) -> Optional[str]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def definition(self) -> Optional[str]:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="errorIntegration")
    def error_integration(self) -> Optional[str]:
        return pulumi.get(self, "error_integration")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastCommittedOn")
    def last_committed_on(self) -> Optional[str]:
        return pulumi.get(self, "last_committed_on")

    @property
    @pulumi.getter(name="lastSuspendedOn")
    def last_suspended_on(self) -> Optional[str]:
        return pulumi.get(self, "last_suspended_on")

    @property
    @pulumi.getter(name="lastSuspendedReason")
    def last_suspended_reason(self) -> Optional[str]:
        return pulumi.get(self, "last_suspended_reason")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[str]:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter
    def predecessors(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "predecessors")

    @property
    @pulumi.getter
    def schedule(self) -> Optional[str]:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskRelations")
    def task_relations(self) -> Optional[Sequence['outputs.TaskShowOutputTaskRelation']]:
        return pulumi.get(self, "task_relations")

    @property
    @pulumi.getter
    def warehouse(self) -> Optional[str]:
        return pulumi.get(self, "warehouse")


@pulumi.output_type
class TaskShowOutputTaskRelation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "finalizedRootTask":
            suggest = "finalized_root_task"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskShowOutputTaskRelation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskShowOutputTaskRelation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskShowOutputTaskRelation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 finalized_root_task: Optional[str] = None,
                 finalizer: Optional[str] = None,
                 predecessors: Optional[Sequence[str]] = None):
        if finalized_root_task is not None:
            pulumi.set(__self__, "finalized_root_task", finalized_root_task)
        if finalizer is not None:
            pulumi.set(__self__, "finalizer", finalizer)
        if predecessors is not None:
            pulumi.set(__self__, "predecessors", predecessors)

    @property
    @pulumi.getter(name="finalizedRootTask")
    def finalized_root_task(self) -> Optional[str]:
        return pulumi.get(self, "finalized_root_task")

    @property
    @pulumi.getter
    def finalizer(self) -> Optional[str]:
        return pulumi.get(self, "finalizer")

    @property
    @pulumi.getter
    def predecessors(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "predecessors")


@pulumi.output_type
class UserParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "abortDetachedQueries":
            suggest = "abort_detached_queries"
        elif key == "binaryInputFormats":
            suggest = "binary_input_formats"
        elif key == "binaryOutputFormats":
            suggest = "binary_output_formats"
        elif key == "clientMemoryLimits":
            suggest = "client_memory_limits"
        elif key == "clientMetadataRequestUseConnectionCtxes":
            suggest = "client_metadata_request_use_connection_ctxes"
        elif key == "clientPrefetchThreads":
            suggest = "client_prefetch_threads"
        elif key == "clientResultChunkSizes":
            suggest = "client_result_chunk_sizes"
        elif key == "clientResultColumnCaseInsensitives":
            suggest = "client_result_column_case_insensitives"
        elif key == "clientSessionKeepAliveHeartbeatFrequencies":
            suggest = "client_session_keep_alive_heartbeat_frequencies"
        elif key == "clientSessionKeepAlives":
            suggest = "client_session_keep_alives"
        elif key == "clientTimestampTypeMappings":
            suggest = "client_timestamp_type_mappings"
        elif key == "dateInputFormats":
            suggest = "date_input_formats"
        elif key == "dateOutputFormats":
            suggest = "date_output_formats"
        elif key == "enableUnloadPhysicalTypeOptimizations":
            suggest = "enable_unload_physical_type_optimizations"
        elif key == "enableUnredactedQuerySyntaxErrors":
            suggest = "enable_unredacted_query_syntax_errors"
        elif key == "errorOnNondeterministicMerges":
            suggest = "error_on_nondeterministic_merges"
        elif key == "errorOnNondeterministicUpdates":
            suggest = "error_on_nondeterministic_updates"
        elif key == "geographyOutputFormats":
            suggest = "geography_output_formats"
        elif key == "geometryOutputFormats":
            suggest = "geometry_output_formats"
        elif key == "jdbcTreatDecimalAsInts":
            suggest = "jdbc_treat_decimal_as_ints"
        elif key == "jdbcTreatTimestampNtzAsUtcs":
            suggest = "jdbc_treat_timestamp_ntz_as_utcs"
        elif key == "jdbcUseSessionTimezones":
            suggest = "jdbc_use_session_timezones"
        elif key == "jsonIndents":
            suggest = "json_indents"
        elif key == "lockTimeouts":
            suggest = "lock_timeouts"
        elif key == "logLevels":
            suggest = "log_levels"
        elif key == "multiStatementCounts":
            suggest = "multi_statement_counts"
        elif key == "networkPolicies":
            suggest = "network_policies"
        elif key == "noorderSequenceAsDefaults":
            suggest = "noorder_sequence_as_defaults"
        elif key == "odbcTreatDecimalAsInts":
            suggest = "odbc_treat_decimal_as_ints"
        elif key == "preventUnloadToInternalStages":
            suggest = "prevent_unload_to_internal_stages"
        elif key == "queryTags":
            suggest = "query_tags"
        elif key == "quotedIdentifiersIgnoreCases":
            suggest = "quoted_identifiers_ignore_cases"
        elif key == "rowsPerResultsets":
            suggest = "rows_per_resultsets"
        elif key == "s3StageVpceDnsNames":
            suggest = "s3_stage_vpce_dns_names"
        elif key == "searchPaths":
            suggest = "search_paths"
        elif key == "simulatedDataSharingConsumers":
            suggest = "simulated_data_sharing_consumers"
        elif key == "statementQueuedTimeoutInSeconds":
            suggest = "statement_queued_timeout_in_seconds"
        elif key == "statementTimeoutInSeconds":
            suggest = "statement_timeout_in_seconds"
        elif key == "strictJsonOutputs":
            suggest = "strict_json_outputs"
        elif key == "timeInputFormats":
            suggest = "time_input_formats"
        elif key == "timeOutputFormats":
            suggest = "time_output_formats"
        elif key == "timestampDayIsAlways24hs":
            suggest = "timestamp_day_is_always24hs"
        elif key == "timestampInputFormats":
            suggest = "timestamp_input_formats"
        elif key == "timestampLtzOutputFormats":
            suggest = "timestamp_ltz_output_formats"
        elif key == "timestampNtzOutputFormats":
            suggest = "timestamp_ntz_output_formats"
        elif key == "timestampOutputFormats":
            suggest = "timestamp_output_formats"
        elif key == "timestampTypeMappings":
            suggest = "timestamp_type_mappings"
        elif key == "timestampTzOutputFormats":
            suggest = "timestamp_tz_output_formats"
        elif key == "traceLevels":
            suggest = "trace_levels"
        elif key == "transactionAbortOnErrors":
            suggest = "transaction_abort_on_errors"
        elif key == "transactionDefaultIsolationLevels":
            suggest = "transaction_default_isolation_levels"
        elif key == "twoDigitCenturyStarts":
            suggest = "two_digit_century_starts"
        elif key == "unsupportedDdlActions":
            suggest = "unsupported_ddl_actions"
        elif key == "useCachedResults":
            suggest = "use_cached_results"
        elif key == "weekOfYearPolicies":
            suggest = "week_of_year_policies"
        elif key == "weekStarts":
            suggest = "week_starts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 abort_detached_queries: Optional[Sequence['outputs.UserParameterAbortDetachedQuery']] = None,
                 autocommits: Optional[Sequence['outputs.UserParameterAutocommit']] = None,
                 binary_input_formats: Optional[Sequence['outputs.UserParameterBinaryInputFormat']] = None,
                 binary_output_formats: Optional[Sequence['outputs.UserParameterBinaryOutputFormat']] = None,
                 client_memory_limits: Optional[Sequence['outputs.UserParameterClientMemoryLimit']] = None,
                 client_metadata_request_use_connection_ctxes: Optional[Sequence['outputs.UserParameterClientMetadataRequestUseConnectionCtx']] = None,
                 client_prefetch_threads: Optional[Sequence['outputs.UserParameterClientPrefetchThread']] = None,
                 client_result_chunk_sizes: Optional[Sequence['outputs.UserParameterClientResultChunkSize']] = None,
                 client_result_column_case_insensitives: Optional[Sequence['outputs.UserParameterClientResultColumnCaseInsensitive']] = None,
                 client_session_keep_alive_heartbeat_frequencies: Optional[Sequence['outputs.UserParameterClientSessionKeepAliveHeartbeatFrequency']] = None,
                 client_session_keep_alives: Optional[Sequence['outputs.UserParameterClientSessionKeepAlife']] = None,
                 client_timestamp_type_mappings: Optional[Sequence['outputs.UserParameterClientTimestampTypeMapping']] = None,
                 date_input_formats: Optional[Sequence['outputs.UserParameterDateInputFormat']] = None,
                 date_output_formats: Optional[Sequence['outputs.UserParameterDateOutputFormat']] = None,
                 enable_unload_physical_type_optimizations: Optional[Sequence['outputs.UserParameterEnableUnloadPhysicalTypeOptimization']] = None,
                 enable_unredacted_query_syntax_errors: Optional[Sequence['outputs.UserParameterEnableUnredactedQuerySyntaxError']] = None,
                 error_on_nondeterministic_merges: Optional[Sequence['outputs.UserParameterErrorOnNondeterministicMerge']] = None,
                 error_on_nondeterministic_updates: Optional[Sequence['outputs.UserParameterErrorOnNondeterministicUpdate']] = None,
                 geography_output_formats: Optional[Sequence['outputs.UserParameterGeographyOutputFormat']] = None,
                 geometry_output_formats: Optional[Sequence['outputs.UserParameterGeometryOutputFormat']] = None,
                 jdbc_treat_decimal_as_ints: Optional[Sequence['outputs.UserParameterJdbcTreatDecimalAsInt']] = None,
                 jdbc_treat_timestamp_ntz_as_utcs: Optional[Sequence['outputs.UserParameterJdbcTreatTimestampNtzAsUtc']] = None,
                 jdbc_use_session_timezones: Optional[Sequence['outputs.UserParameterJdbcUseSessionTimezone']] = None,
                 json_indents: Optional[Sequence['outputs.UserParameterJsonIndent']] = None,
                 lock_timeouts: Optional[Sequence['outputs.UserParameterLockTimeout']] = None,
                 log_levels: Optional[Sequence['outputs.UserParameterLogLevel']] = None,
                 multi_statement_counts: Optional[Sequence['outputs.UserParameterMultiStatementCount']] = None,
                 network_policies: Optional[Sequence['outputs.UserParameterNetworkPolicy']] = None,
                 noorder_sequence_as_defaults: Optional[Sequence['outputs.UserParameterNoorderSequenceAsDefault']] = None,
                 odbc_treat_decimal_as_ints: Optional[Sequence['outputs.UserParameterOdbcTreatDecimalAsInt']] = None,
                 prevent_unload_to_internal_stages: Optional[Sequence['outputs.UserParameterPreventUnloadToInternalStage']] = None,
                 query_tags: Optional[Sequence['outputs.UserParameterQueryTag']] = None,
                 quoted_identifiers_ignore_cases: Optional[Sequence['outputs.UserParameterQuotedIdentifiersIgnoreCase']] = None,
                 rows_per_resultsets: Optional[Sequence['outputs.UserParameterRowsPerResultset']] = None,
                 s3_stage_vpce_dns_names: Optional[Sequence['outputs.UserParameterS3StageVpceDnsName']] = None,
                 search_paths: Optional[Sequence['outputs.UserParameterSearchPath']] = None,
                 simulated_data_sharing_consumers: Optional[Sequence['outputs.UserParameterSimulatedDataSharingConsumer']] = None,
                 statement_queued_timeout_in_seconds: Optional[Sequence['outputs.UserParameterStatementQueuedTimeoutInSecond']] = None,
                 statement_timeout_in_seconds: Optional[Sequence['outputs.UserParameterStatementTimeoutInSecond']] = None,
                 strict_json_outputs: Optional[Sequence['outputs.UserParameterStrictJsonOutput']] = None,
                 time_input_formats: Optional[Sequence['outputs.UserParameterTimeInputFormat']] = None,
                 time_output_formats: Optional[Sequence['outputs.UserParameterTimeOutputFormat']] = None,
                 timestamp_day_is_always24hs: Optional[Sequence['outputs.UserParameterTimestampDayIsAlways24h']] = None,
                 timestamp_input_formats: Optional[Sequence['outputs.UserParameterTimestampInputFormat']] = None,
                 timestamp_ltz_output_formats: Optional[Sequence['outputs.UserParameterTimestampLtzOutputFormat']] = None,
                 timestamp_ntz_output_formats: Optional[Sequence['outputs.UserParameterTimestampNtzOutputFormat']] = None,
                 timestamp_output_formats: Optional[Sequence['outputs.UserParameterTimestampOutputFormat']] = None,
                 timestamp_type_mappings: Optional[Sequence['outputs.UserParameterTimestampTypeMapping']] = None,
                 timestamp_tz_output_formats: Optional[Sequence['outputs.UserParameterTimestampTzOutputFormat']] = None,
                 timezones: Optional[Sequence['outputs.UserParameterTimezone']] = None,
                 trace_levels: Optional[Sequence['outputs.UserParameterTraceLevel']] = None,
                 transaction_abort_on_errors: Optional[Sequence['outputs.UserParameterTransactionAbortOnError']] = None,
                 transaction_default_isolation_levels: Optional[Sequence['outputs.UserParameterTransactionDefaultIsolationLevel']] = None,
                 two_digit_century_starts: Optional[Sequence['outputs.UserParameterTwoDigitCenturyStart']] = None,
                 unsupported_ddl_actions: Optional[Sequence['outputs.UserParameterUnsupportedDdlAction']] = None,
                 use_cached_results: Optional[Sequence['outputs.UserParameterUseCachedResult']] = None,
                 week_of_year_policies: Optional[Sequence['outputs.UserParameterWeekOfYearPolicy']] = None,
                 week_starts: Optional[Sequence['outputs.UserParameterWeekStart']] = None):
        if abort_detached_queries is not None:
            pulumi.set(__self__, "abort_detached_queries", abort_detached_queries)
        if autocommits is not None:
            pulumi.set(__self__, "autocommits", autocommits)
        if binary_input_formats is not None:
            pulumi.set(__self__, "binary_input_formats", binary_input_formats)
        if binary_output_formats is not None:
            pulumi.set(__self__, "binary_output_formats", binary_output_formats)
        if client_memory_limits is not None:
            pulumi.set(__self__, "client_memory_limits", client_memory_limits)
        if client_metadata_request_use_connection_ctxes is not None:
            pulumi.set(__self__, "client_metadata_request_use_connection_ctxes", client_metadata_request_use_connection_ctxes)
        if client_prefetch_threads is not None:
            pulumi.set(__self__, "client_prefetch_threads", client_prefetch_threads)
        if client_result_chunk_sizes is not None:
            pulumi.set(__self__, "client_result_chunk_sizes", client_result_chunk_sizes)
        if client_result_column_case_insensitives is not None:
            pulumi.set(__self__, "client_result_column_case_insensitives", client_result_column_case_insensitives)
        if client_session_keep_alive_heartbeat_frequencies is not None:
            pulumi.set(__self__, "client_session_keep_alive_heartbeat_frequencies", client_session_keep_alive_heartbeat_frequencies)
        if client_session_keep_alives is not None:
            pulumi.set(__self__, "client_session_keep_alives", client_session_keep_alives)
        if client_timestamp_type_mappings is not None:
            pulumi.set(__self__, "client_timestamp_type_mappings", client_timestamp_type_mappings)
        if date_input_formats is not None:
            pulumi.set(__self__, "date_input_formats", date_input_formats)
        if date_output_formats is not None:
            pulumi.set(__self__, "date_output_formats", date_output_formats)
        if enable_unload_physical_type_optimizations is not None:
            pulumi.set(__self__, "enable_unload_physical_type_optimizations", enable_unload_physical_type_optimizations)
        if enable_unredacted_query_syntax_errors is not None:
            pulumi.set(__self__, "enable_unredacted_query_syntax_errors", enable_unredacted_query_syntax_errors)
        if error_on_nondeterministic_merges is not None:
            pulumi.set(__self__, "error_on_nondeterministic_merges", error_on_nondeterministic_merges)
        if error_on_nondeterministic_updates is not None:
            pulumi.set(__self__, "error_on_nondeterministic_updates", error_on_nondeterministic_updates)
        if geography_output_formats is not None:
            pulumi.set(__self__, "geography_output_formats", geography_output_formats)
        if geometry_output_formats is not None:
            pulumi.set(__self__, "geometry_output_formats", geometry_output_formats)
        if jdbc_treat_decimal_as_ints is not None:
            pulumi.set(__self__, "jdbc_treat_decimal_as_ints", jdbc_treat_decimal_as_ints)
        if jdbc_treat_timestamp_ntz_as_utcs is not None:
            pulumi.set(__self__, "jdbc_treat_timestamp_ntz_as_utcs", jdbc_treat_timestamp_ntz_as_utcs)
        if jdbc_use_session_timezones is not None:
            pulumi.set(__self__, "jdbc_use_session_timezones", jdbc_use_session_timezones)
        if json_indents is not None:
            pulumi.set(__self__, "json_indents", json_indents)
        if lock_timeouts is not None:
            pulumi.set(__self__, "lock_timeouts", lock_timeouts)
        if log_levels is not None:
            pulumi.set(__self__, "log_levels", log_levels)
        if multi_statement_counts is not None:
            pulumi.set(__self__, "multi_statement_counts", multi_statement_counts)
        if network_policies is not None:
            pulumi.set(__self__, "network_policies", network_policies)
        if noorder_sequence_as_defaults is not None:
            pulumi.set(__self__, "noorder_sequence_as_defaults", noorder_sequence_as_defaults)
        if odbc_treat_decimal_as_ints is not None:
            pulumi.set(__self__, "odbc_treat_decimal_as_ints", odbc_treat_decimal_as_ints)
        if prevent_unload_to_internal_stages is not None:
            pulumi.set(__self__, "prevent_unload_to_internal_stages", prevent_unload_to_internal_stages)
        if query_tags is not None:
            pulumi.set(__self__, "query_tags", query_tags)
        if quoted_identifiers_ignore_cases is not None:
            pulumi.set(__self__, "quoted_identifiers_ignore_cases", quoted_identifiers_ignore_cases)
        if rows_per_resultsets is not None:
            pulumi.set(__self__, "rows_per_resultsets", rows_per_resultsets)
        if s3_stage_vpce_dns_names is not None:
            pulumi.set(__self__, "s3_stage_vpce_dns_names", s3_stage_vpce_dns_names)
        if search_paths is not None:
            pulumi.set(__self__, "search_paths", search_paths)
        if simulated_data_sharing_consumers is not None:
            pulumi.set(__self__, "simulated_data_sharing_consumers", simulated_data_sharing_consumers)
        if statement_queued_timeout_in_seconds is not None:
            pulumi.set(__self__, "statement_queued_timeout_in_seconds", statement_queued_timeout_in_seconds)
        if statement_timeout_in_seconds is not None:
            pulumi.set(__self__, "statement_timeout_in_seconds", statement_timeout_in_seconds)
        if strict_json_outputs is not None:
            pulumi.set(__self__, "strict_json_outputs", strict_json_outputs)
        if time_input_formats is not None:
            pulumi.set(__self__, "time_input_formats", time_input_formats)
        if time_output_formats is not None:
            pulumi.set(__self__, "time_output_formats", time_output_formats)
        if timestamp_day_is_always24hs is not None:
            pulumi.set(__self__, "timestamp_day_is_always24hs", timestamp_day_is_always24hs)
        if timestamp_input_formats is not None:
            pulumi.set(__self__, "timestamp_input_formats", timestamp_input_formats)
        if timestamp_ltz_output_formats is not None:
            pulumi.set(__self__, "timestamp_ltz_output_formats", timestamp_ltz_output_formats)
        if timestamp_ntz_output_formats is not None:
            pulumi.set(__self__, "timestamp_ntz_output_formats", timestamp_ntz_output_formats)
        if timestamp_output_formats is not None:
            pulumi.set(__self__, "timestamp_output_formats", timestamp_output_formats)
        if timestamp_type_mappings is not None:
            pulumi.set(__self__, "timestamp_type_mappings", timestamp_type_mappings)
        if timestamp_tz_output_formats is not None:
            pulumi.set(__self__, "timestamp_tz_output_formats", timestamp_tz_output_formats)
        if timezones is not None:
            pulumi.set(__self__, "timezones", timezones)
        if trace_levels is not None:
            pulumi.set(__self__, "trace_levels", trace_levels)
        if transaction_abort_on_errors is not None:
            pulumi.set(__self__, "transaction_abort_on_errors", transaction_abort_on_errors)
        if transaction_default_isolation_levels is not None:
            pulumi.set(__self__, "transaction_default_isolation_levels", transaction_default_isolation_levels)
        if two_digit_century_starts is not None:
            pulumi.set(__self__, "two_digit_century_starts", two_digit_century_starts)
        if unsupported_ddl_actions is not None:
            pulumi.set(__self__, "unsupported_ddl_actions", unsupported_ddl_actions)
        if use_cached_results is not None:
            pulumi.set(__self__, "use_cached_results", use_cached_results)
        if week_of_year_policies is not None:
            pulumi.set(__self__, "week_of_year_policies", week_of_year_policies)
        if week_starts is not None:
            pulumi.set(__self__, "week_starts", week_starts)

    @property
    @pulumi.getter(name="abortDetachedQueries")
    def abort_detached_queries(self) -> Optional[Sequence['outputs.UserParameterAbortDetachedQuery']]:
        return pulumi.get(self, "abort_detached_queries")

    @property
    @pulumi.getter
    def autocommits(self) -> Optional[Sequence['outputs.UserParameterAutocommit']]:
        return pulumi.get(self, "autocommits")

    @property
    @pulumi.getter(name="binaryInputFormats")
    def binary_input_formats(self) -> Optional[Sequence['outputs.UserParameterBinaryInputFormat']]:
        return pulumi.get(self, "binary_input_formats")

    @property
    @pulumi.getter(name="binaryOutputFormats")
    def binary_output_formats(self) -> Optional[Sequence['outputs.UserParameterBinaryOutputFormat']]:
        return pulumi.get(self, "binary_output_formats")

    @property
    @pulumi.getter(name="clientMemoryLimits")
    def client_memory_limits(self) -> Optional[Sequence['outputs.UserParameterClientMemoryLimit']]:
        return pulumi.get(self, "client_memory_limits")

    @property
    @pulumi.getter(name="clientMetadataRequestUseConnectionCtxes")
    def client_metadata_request_use_connection_ctxes(self) -> Optional[Sequence['outputs.UserParameterClientMetadataRequestUseConnectionCtx']]:
        return pulumi.get(self, "client_metadata_request_use_connection_ctxes")

    @property
    @pulumi.getter(name="clientPrefetchThreads")
    def client_prefetch_threads(self) -> Optional[Sequence['outputs.UserParameterClientPrefetchThread']]:
        return pulumi.get(self, "client_prefetch_threads")

    @property
    @pulumi.getter(name="clientResultChunkSizes")
    def client_result_chunk_sizes(self) -> Optional[Sequence['outputs.UserParameterClientResultChunkSize']]:
        return pulumi.get(self, "client_result_chunk_sizes")

    @property
    @pulumi.getter(name="clientResultColumnCaseInsensitives")
    def client_result_column_case_insensitives(self) -> Optional[Sequence['outputs.UserParameterClientResultColumnCaseInsensitive']]:
        return pulumi.get(self, "client_result_column_case_insensitives")

    @property
    @pulumi.getter(name="clientSessionKeepAliveHeartbeatFrequencies")
    def client_session_keep_alive_heartbeat_frequencies(self) -> Optional[Sequence['outputs.UserParameterClientSessionKeepAliveHeartbeatFrequency']]:
        return pulumi.get(self, "client_session_keep_alive_heartbeat_frequencies")

    @property
    @pulumi.getter(name="clientSessionKeepAlives")
    def client_session_keep_alives(self) -> Optional[Sequence['outputs.UserParameterClientSessionKeepAlife']]:
        return pulumi.get(self, "client_session_keep_alives")

    @property
    @pulumi.getter(name="clientTimestampTypeMappings")
    def client_timestamp_type_mappings(self) -> Optional[Sequence['outputs.UserParameterClientTimestampTypeMapping']]:
        return pulumi.get(self, "client_timestamp_type_mappings")

    @property
    @pulumi.getter(name="dateInputFormats")
    def date_input_formats(self) -> Optional[Sequence['outputs.UserParameterDateInputFormat']]:
        return pulumi.get(self, "date_input_formats")

    @property
    @pulumi.getter(name="dateOutputFormats")
    def date_output_formats(self) -> Optional[Sequence['outputs.UserParameterDateOutputFormat']]:
        return pulumi.get(self, "date_output_formats")

    @property
    @pulumi.getter(name="enableUnloadPhysicalTypeOptimizations")
    def enable_unload_physical_type_optimizations(self) -> Optional[Sequence['outputs.UserParameterEnableUnloadPhysicalTypeOptimization']]:
        return pulumi.get(self, "enable_unload_physical_type_optimizations")

    @property
    @pulumi.getter(name="enableUnredactedQuerySyntaxErrors")
    def enable_unredacted_query_syntax_errors(self) -> Optional[Sequence['outputs.UserParameterEnableUnredactedQuerySyntaxError']]:
        return pulumi.get(self, "enable_unredacted_query_syntax_errors")

    @property
    @pulumi.getter(name="errorOnNondeterministicMerges")
    def error_on_nondeterministic_merges(self) -> Optional[Sequence['outputs.UserParameterErrorOnNondeterministicMerge']]:
        return pulumi.get(self, "error_on_nondeterministic_merges")

    @property
    @pulumi.getter(name="errorOnNondeterministicUpdates")
    def error_on_nondeterministic_updates(self) -> Optional[Sequence['outputs.UserParameterErrorOnNondeterministicUpdate']]:
        return pulumi.get(self, "error_on_nondeterministic_updates")

    @property
    @pulumi.getter(name="geographyOutputFormats")
    def geography_output_formats(self) -> Optional[Sequence['outputs.UserParameterGeographyOutputFormat']]:
        return pulumi.get(self, "geography_output_formats")

    @property
    @pulumi.getter(name="geometryOutputFormats")
    def geometry_output_formats(self) -> Optional[Sequence['outputs.UserParameterGeometryOutputFormat']]:
        return pulumi.get(self, "geometry_output_formats")

    @property
    @pulumi.getter(name="jdbcTreatDecimalAsInts")
    def jdbc_treat_decimal_as_ints(self) -> Optional[Sequence['outputs.UserParameterJdbcTreatDecimalAsInt']]:
        return pulumi.get(self, "jdbc_treat_decimal_as_ints")

    @property
    @pulumi.getter(name="jdbcTreatTimestampNtzAsUtcs")
    def jdbc_treat_timestamp_ntz_as_utcs(self) -> Optional[Sequence['outputs.UserParameterJdbcTreatTimestampNtzAsUtc']]:
        return pulumi.get(self, "jdbc_treat_timestamp_ntz_as_utcs")

    @property
    @pulumi.getter(name="jdbcUseSessionTimezones")
    def jdbc_use_session_timezones(self) -> Optional[Sequence['outputs.UserParameterJdbcUseSessionTimezone']]:
        return pulumi.get(self, "jdbc_use_session_timezones")

    @property
    @pulumi.getter(name="jsonIndents")
    def json_indents(self) -> Optional[Sequence['outputs.UserParameterJsonIndent']]:
        return pulumi.get(self, "json_indents")

    @property
    @pulumi.getter(name="lockTimeouts")
    def lock_timeouts(self) -> Optional[Sequence['outputs.UserParameterLockTimeout']]:
        return pulumi.get(self, "lock_timeouts")

    @property
    @pulumi.getter(name="logLevels")
    def log_levels(self) -> Optional[Sequence['outputs.UserParameterLogLevel']]:
        return pulumi.get(self, "log_levels")

    @property
    @pulumi.getter(name="multiStatementCounts")
    def multi_statement_counts(self) -> Optional[Sequence['outputs.UserParameterMultiStatementCount']]:
        return pulumi.get(self, "multi_statement_counts")

    @property
    @pulumi.getter(name="networkPolicies")
    def network_policies(self) -> Optional[Sequence['outputs.UserParameterNetworkPolicy']]:
        return pulumi.get(self, "network_policies")

    @property
    @pulumi.getter(name="noorderSequenceAsDefaults")
    def noorder_sequence_as_defaults(self) -> Optional[Sequence['outputs.UserParameterNoorderSequenceAsDefault']]:
        return pulumi.get(self, "noorder_sequence_as_defaults")

    @property
    @pulumi.getter(name="odbcTreatDecimalAsInts")
    def odbc_treat_decimal_as_ints(self) -> Optional[Sequence['outputs.UserParameterOdbcTreatDecimalAsInt']]:
        return pulumi.get(self, "odbc_treat_decimal_as_ints")

    @property
    @pulumi.getter(name="preventUnloadToInternalStages")
    def prevent_unload_to_internal_stages(self) -> Optional[Sequence['outputs.UserParameterPreventUnloadToInternalStage']]:
        return pulumi.get(self, "prevent_unload_to_internal_stages")

    @property
    @pulumi.getter(name="queryTags")
    def query_tags(self) -> Optional[Sequence['outputs.UserParameterQueryTag']]:
        return pulumi.get(self, "query_tags")

    @property
    @pulumi.getter(name="quotedIdentifiersIgnoreCases")
    def quoted_identifiers_ignore_cases(self) -> Optional[Sequence['outputs.UserParameterQuotedIdentifiersIgnoreCase']]:
        return pulumi.get(self, "quoted_identifiers_ignore_cases")

    @property
    @pulumi.getter(name="rowsPerResultsets")
    def rows_per_resultsets(self) -> Optional[Sequence['outputs.UserParameterRowsPerResultset']]:
        return pulumi.get(self, "rows_per_resultsets")

    @property
    @pulumi.getter(name="s3StageVpceDnsNames")
    def s3_stage_vpce_dns_names(self) -> Optional[Sequence['outputs.UserParameterS3StageVpceDnsName']]:
        return pulumi.get(self, "s3_stage_vpce_dns_names")

    @property
    @pulumi.getter(name="searchPaths")
    def search_paths(self) -> Optional[Sequence['outputs.UserParameterSearchPath']]:
        return pulumi.get(self, "search_paths")

    @property
    @pulumi.getter(name="simulatedDataSharingConsumers")
    def simulated_data_sharing_consumers(self) -> Optional[Sequence['outputs.UserParameterSimulatedDataSharingConsumer']]:
        return pulumi.get(self, "simulated_data_sharing_consumers")

    @property
    @pulumi.getter(name="statementQueuedTimeoutInSeconds")
    def statement_queued_timeout_in_seconds(self) -> Optional[Sequence['outputs.UserParameterStatementQueuedTimeoutInSecond']]:
        return pulumi.get(self, "statement_queued_timeout_in_seconds")

    @property
    @pulumi.getter(name="statementTimeoutInSeconds")
    def statement_timeout_in_seconds(self) -> Optional[Sequence['outputs.UserParameterStatementTimeoutInSecond']]:
        return pulumi.get(self, "statement_timeout_in_seconds")

    @property
    @pulumi.getter(name="strictJsonOutputs")
    def strict_json_outputs(self) -> Optional[Sequence['outputs.UserParameterStrictJsonOutput']]:
        return pulumi.get(self, "strict_json_outputs")

    @property
    @pulumi.getter(name="timeInputFormats")
    def time_input_formats(self) -> Optional[Sequence['outputs.UserParameterTimeInputFormat']]:
        return pulumi.get(self, "time_input_formats")

    @property
    @pulumi.getter(name="timeOutputFormats")
    def time_output_formats(self) -> Optional[Sequence['outputs.UserParameterTimeOutputFormat']]:
        return pulumi.get(self, "time_output_formats")

    @property
    @pulumi.getter(name="timestampDayIsAlways24hs")
    def timestamp_day_is_always24hs(self) -> Optional[Sequence['outputs.UserParameterTimestampDayIsAlways24h']]:
        return pulumi.get(self, "timestamp_day_is_always24hs")

    @property
    @pulumi.getter(name="timestampInputFormats")
    def timestamp_input_formats(self) -> Optional[Sequence['outputs.UserParameterTimestampInputFormat']]:
        return pulumi.get(self, "timestamp_input_formats")

    @property
    @pulumi.getter(name="timestampLtzOutputFormats")
    def timestamp_ltz_output_formats(self) -> Optional[Sequence['outputs.UserParameterTimestampLtzOutputFormat']]:
        return pulumi.get(self, "timestamp_ltz_output_formats")

    @property
    @pulumi.getter(name="timestampNtzOutputFormats")
    def timestamp_ntz_output_formats(self) -> Optional[Sequence['outputs.UserParameterTimestampNtzOutputFormat']]:
        return pulumi.get(self, "timestamp_ntz_output_formats")

    @property
    @pulumi.getter(name="timestampOutputFormats")
    def timestamp_output_formats(self) -> Optional[Sequence['outputs.UserParameterTimestampOutputFormat']]:
        return pulumi.get(self, "timestamp_output_formats")

    @property
    @pulumi.getter(name="timestampTypeMappings")
    def timestamp_type_mappings(self) -> Optional[Sequence['outputs.UserParameterTimestampTypeMapping']]:
        return pulumi.get(self, "timestamp_type_mappings")

    @property
    @pulumi.getter(name="timestampTzOutputFormats")
    def timestamp_tz_output_formats(self) -> Optional[Sequence['outputs.UserParameterTimestampTzOutputFormat']]:
        return pulumi.get(self, "timestamp_tz_output_formats")

    @property
    @pulumi.getter
    def timezones(self) -> Optional[Sequence['outputs.UserParameterTimezone']]:
        return pulumi.get(self, "timezones")

    @property
    @pulumi.getter(name="traceLevels")
    def trace_levels(self) -> Optional[Sequence['outputs.UserParameterTraceLevel']]:
        return pulumi.get(self, "trace_levels")

    @property
    @pulumi.getter(name="transactionAbortOnErrors")
    def transaction_abort_on_errors(self) -> Optional[Sequence['outputs.UserParameterTransactionAbortOnError']]:
        return pulumi.get(self, "transaction_abort_on_errors")

    @property
    @pulumi.getter(name="transactionDefaultIsolationLevels")
    def transaction_default_isolation_levels(self) -> Optional[Sequence['outputs.UserParameterTransactionDefaultIsolationLevel']]:
        return pulumi.get(self, "transaction_default_isolation_levels")

    @property
    @pulumi.getter(name="twoDigitCenturyStarts")
    def two_digit_century_starts(self) -> Optional[Sequence['outputs.UserParameterTwoDigitCenturyStart']]:
        return pulumi.get(self, "two_digit_century_starts")

    @property
    @pulumi.getter(name="unsupportedDdlActions")
    def unsupported_ddl_actions(self) -> Optional[Sequence['outputs.UserParameterUnsupportedDdlAction']]:
        return pulumi.get(self, "unsupported_ddl_actions")

    @property
    @pulumi.getter(name="useCachedResults")
    def use_cached_results(self) -> Optional[Sequence['outputs.UserParameterUseCachedResult']]:
        return pulumi.get(self, "use_cached_results")

    @property
    @pulumi.getter(name="weekOfYearPolicies")
    def week_of_year_policies(self) -> Optional[Sequence['outputs.UserParameterWeekOfYearPolicy']]:
        return pulumi.get(self, "week_of_year_policies")

    @property
    @pulumi.getter(name="weekStarts")
    def week_starts(self) -> Optional[Sequence['outputs.UserParameterWeekStart']]:
        return pulumi.get(self, "week_starts")


@pulumi.output_type
class UserParameterAbortDetachedQuery(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterAutocommit(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterBinaryInputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterBinaryOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterClientMemoryLimit(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterClientMetadataRequestUseConnectionCtx(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterClientPrefetchThread(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterClientResultChunkSize(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterClientResultColumnCaseInsensitive(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterClientSessionKeepAlife(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterClientSessionKeepAliveHeartbeatFrequency(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterClientTimestampTypeMapping(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterDateInputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterDateOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterEnableUnloadPhysicalTypeOptimization(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterEnableUnredactedQuerySyntaxError(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterErrorOnNondeterministicMerge(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterErrorOnNondeterministicUpdate(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterGeographyOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterGeometryOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterJdbcTreatDecimalAsInt(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterJdbcTreatTimestampNtzAsUtc(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterJdbcUseSessionTimezone(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterJsonIndent(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterLockTimeout(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterLogLevel(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterMultiStatementCount(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterNetworkPolicy(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterNoorderSequenceAsDefault(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterOdbcTreatDecimalAsInt(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterPreventUnloadToInternalStage(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterQueryTag(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterQuotedIdentifiersIgnoreCase(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterRowsPerResultset(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterS3StageVpceDnsName(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterSearchPath(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterSimulatedDataSharingConsumer(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterStatementQueuedTimeoutInSecond(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterStatementTimeoutInSecond(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterStrictJsonOutput(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterTimeInputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterTimeOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterTimestampDayIsAlways24h(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterTimestampInputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterTimestampLtzOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterTimestampNtzOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterTimestampOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterTimestampTypeMapping(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterTimestampTzOutputFormat(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterTimezone(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterTraceLevel(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterTransactionAbortOnError(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterTransactionDefaultIsolationLevel(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterTwoDigitCenturyStart(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterUnsupportedDdlAction(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterUseCachedResult(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterWeekOfYearPolicy(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserParameterWeekStart(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdOn":
            suggest = "created_on"
        elif key == "daysToExpiry":
            suggest = "days_to_expiry"
        elif key == "defaultNamespace":
            suggest = "default_namespace"
        elif key == "defaultRole":
            suggest = "default_role"
        elif key == "defaultSecondaryRoles":
            suggest = "default_secondary_roles"
        elif key == "defaultWarehouse":
            suggest = "default_warehouse"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "expiresAtTime":
            suggest = "expires_at_time"
        elif key == "extAuthnDuo":
            suggest = "ext_authn_duo"
        elif key == "extAuthnUid":
            suggest = "ext_authn_uid"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "hasMfa":
            suggest = "has_mfa"
        elif key == "hasPassword":
            suggest = "has_password"
        elif key == "hasRsaPublicKey":
            suggest = "has_rsa_public_key"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "lastSuccessLogin":
            suggest = "last_success_login"
        elif key == "lockedUntilTime":
            suggest = "locked_until_time"
        elif key == "loginName":
            suggest = "login_name"
        elif key == "minsToBypassMfa":
            suggest = "mins_to_bypass_mfa"
        elif key == "minsToUnlock":
            suggest = "mins_to_unlock"
        elif key == "mustChangePassword":
            suggest = "must_change_password"
        elif key == "snowflakeLock":
            suggest = "snowflake_lock"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 days_to_expiry: Optional[str] = None,
                 default_namespace: Optional[str] = None,
                 default_role: Optional[str] = None,
                 default_secondary_roles: Optional[str] = None,
                 default_warehouse: Optional[str] = None,
                 disabled: Optional[bool] = None,
                 display_name: Optional[str] = None,
                 email: Optional[str] = None,
                 expires_at_time: Optional[str] = None,
                 ext_authn_duo: Optional[bool] = None,
                 ext_authn_uid: Optional[str] = None,
                 first_name: Optional[str] = None,
                 has_mfa: Optional[bool] = None,
                 has_password: Optional[bool] = None,
                 has_rsa_public_key: Optional[bool] = None,
                 last_name: Optional[str] = None,
                 last_success_login: Optional[str] = None,
                 locked_until_time: Optional[str] = None,
                 login_name: Optional[str] = None,
                 mins_to_bypass_mfa: Optional[str] = None,
                 mins_to_unlock: Optional[str] = None,
                 must_change_password: Optional[bool] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 snowflake_lock: Optional[bool] = None,
                 type: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if days_to_expiry is not None:
            pulumi.set(__self__, "days_to_expiry", days_to_expiry)
        if default_namespace is not None:
            pulumi.set(__self__, "default_namespace", default_namespace)
        if default_role is not None:
            pulumi.set(__self__, "default_role", default_role)
        if default_secondary_roles is not None:
            pulumi.set(__self__, "default_secondary_roles", default_secondary_roles)
        if default_warehouse is not None:
            pulumi.set(__self__, "default_warehouse", default_warehouse)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if expires_at_time is not None:
            pulumi.set(__self__, "expires_at_time", expires_at_time)
        if ext_authn_duo is not None:
            pulumi.set(__self__, "ext_authn_duo", ext_authn_duo)
        if ext_authn_uid is not None:
            pulumi.set(__self__, "ext_authn_uid", ext_authn_uid)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if has_mfa is not None:
            pulumi.set(__self__, "has_mfa", has_mfa)
        if has_password is not None:
            pulumi.set(__self__, "has_password", has_password)
        if has_rsa_public_key is not None:
            pulumi.set(__self__, "has_rsa_public_key", has_rsa_public_key)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if last_success_login is not None:
            pulumi.set(__self__, "last_success_login", last_success_login)
        if locked_until_time is not None:
            pulumi.set(__self__, "locked_until_time", locked_until_time)
        if login_name is not None:
            pulumi.set(__self__, "login_name", login_name)
        if mins_to_bypass_mfa is not None:
            pulumi.set(__self__, "mins_to_bypass_mfa", mins_to_bypass_mfa)
        if mins_to_unlock is not None:
            pulumi.set(__self__, "mins_to_unlock", mins_to_unlock)
        if must_change_password is not None:
            pulumi.set(__self__, "must_change_password", must_change_password)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if snowflake_lock is not None:
            pulumi.set(__self__, "snowflake_lock", snowflake_lock)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="daysToExpiry")
    def days_to_expiry(self) -> Optional[str]:
        return pulumi.get(self, "days_to_expiry")

    @property
    @pulumi.getter(name="defaultNamespace")
    def default_namespace(self) -> Optional[str]:
        return pulumi.get(self, "default_namespace")

    @property
    @pulumi.getter(name="defaultRole")
    def default_role(self) -> Optional[str]:
        return pulumi.get(self, "default_role")

    @property
    @pulumi.getter(name="defaultSecondaryRoles")
    def default_secondary_roles(self) -> Optional[str]:
        return pulumi.get(self, "default_secondary_roles")

    @property
    @pulumi.getter(name="defaultWarehouse")
    def default_warehouse(self) -> Optional[str]:
        return pulumi.get(self, "default_warehouse")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="expiresAtTime")
    def expires_at_time(self) -> Optional[str]:
        return pulumi.get(self, "expires_at_time")

    @property
    @pulumi.getter(name="extAuthnDuo")
    def ext_authn_duo(self) -> Optional[bool]:
        return pulumi.get(self, "ext_authn_duo")

    @property
    @pulumi.getter(name="extAuthnUid")
    def ext_authn_uid(self) -> Optional[str]:
        return pulumi.get(self, "ext_authn_uid")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="hasMfa")
    def has_mfa(self) -> Optional[bool]:
        return pulumi.get(self, "has_mfa")

    @property
    @pulumi.getter(name="hasPassword")
    def has_password(self) -> Optional[bool]:
        return pulumi.get(self, "has_password")

    @property
    @pulumi.getter(name="hasRsaPublicKey")
    def has_rsa_public_key(self) -> Optional[bool]:
        return pulumi.get(self, "has_rsa_public_key")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="lastSuccessLogin")
    def last_success_login(self) -> Optional[str]:
        return pulumi.get(self, "last_success_login")

    @property
    @pulumi.getter(name="lockedUntilTime")
    def locked_until_time(self) -> Optional[str]:
        return pulumi.get(self, "locked_until_time")

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> Optional[str]:
        return pulumi.get(self, "login_name")

    @property
    @pulumi.getter(name="minsToBypassMfa")
    def mins_to_bypass_mfa(self) -> Optional[str]:
        return pulumi.get(self, "mins_to_bypass_mfa")

    @property
    @pulumi.getter(name="minsToUnlock")
    def mins_to_unlock(self) -> Optional[str]:
        return pulumi.get(self, "mins_to_unlock")

    @property
    @pulumi.getter(name="mustChangePassword")
    def must_change_password(self) -> Optional[bool]:
        return pulumi.get(self, "must_change_password")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="snowflakeLock")
    def snowflake_lock(self) -> Optional[bool]:
        return pulumi.get(self, "snowflake_lock")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ViewAggregationPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyName":
            suggest = "policy_name"
        elif key == "entityKeys":
            suggest = "entity_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ViewAggregationPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ViewAggregationPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ViewAggregationPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_name: str,
                 entity_keys: Optional[Sequence[str]] = None):
        """
        :param str policy_name: Aggregation policy name.
        :param Sequence[str] entity_keys: Defines which columns uniquely identify an entity within the view.
        """
        pulumi.set(__self__, "policy_name", policy_name)
        if entity_keys is not None:
            pulumi.set(__self__, "entity_keys", entity_keys)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        """
        Aggregation policy name.
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="entityKeys")
    def entity_keys(self) -> Optional[Sequence[str]]:
        """
        Defines which columns uniquely identify an entity within the view.
        """
        return pulumi.get(self, "entity_keys")


@pulumi.output_type
class ViewColumn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"
        elif key == "maskingPolicy":
            suggest = "masking_policy"
        elif key == "projectionPolicy":
            suggest = "projection_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ViewColumn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ViewColumn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ViewColumn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_name: str,
                 comment: Optional[str] = None,
                 masking_policy: Optional['outputs.ViewColumnMaskingPolicy'] = None,
                 projection_policy: Optional['outputs.ViewColumnProjectionPolicy'] = None):
        """
        :param str column_name: Specifies affected column name.
        :param str comment: Specifies a comment for the column.
        """
        pulumi.set(__self__, "column_name", column_name)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if masking_policy is not None:
            pulumi.set(__self__, "masking_policy", masking_policy)
        if projection_policy is not None:
            pulumi.set(__self__, "projection_policy", projection_policy)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        """
        Specifies affected column name.
        """
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        Specifies a comment for the column.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="maskingPolicy")
    def masking_policy(self) -> Optional['outputs.ViewColumnMaskingPolicy']:
        return pulumi.get(self, "masking_policy")

    @property
    @pulumi.getter(name="projectionPolicy")
    def projection_policy(self) -> Optional['outputs.ViewColumnProjectionPolicy']:
        return pulumi.get(self, "projection_policy")


@pulumi.output_type
class ViewColumnMaskingPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyName":
            suggest = "policy_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ViewColumnMaskingPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ViewColumnMaskingPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ViewColumnMaskingPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_name: str,
                 usings: Optional[Sequence[str]] = None):
        """
        :param str policy_name: Specifies the masking policy to set on a column.
        :param Sequence[str] usings: Specifies the arguments to pass into the conditional masking policy SQL expression. The first column in the list specifies the column for the policy conditions to mask or tokenize the data and must match the column to which the masking policy is set. The additional columns specify the columns to evaluate to determine whether to mask or tokenize the data in each row of the query result when a query is made on the first column. If the USING clause is omitted, Snowflake treats the conditional masking policy as a normal masking policy.
        """
        pulumi.set(__self__, "policy_name", policy_name)
        if usings is not None:
            pulumi.set(__self__, "usings", usings)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        """
        Specifies the masking policy to set on a column.
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter
    def usings(self) -> Optional[Sequence[str]]:
        """
        Specifies the arguments to pass into the conditional masking policy SQL expression. The first column in the list specifies the column for the policy conditions to mask or tokenize the data and must match the column to which the masking policy is set. The additional columns specify the columns to evaluate to determine whether to mask or tokenize the data in each row of the query result when a query is made on the first column. If the USING clause is omitted, Snowflake treats the conditional masking policy as a normal masking policy.
        """
        return pulumi.get(self, "usings")


@pulumi.output_type
class ViewColumnProjectionPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyName":
            suggest = "policy_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ViewColumnProjectionPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ViewColumnProjectionPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ViewColumnProjectionPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_name: str):
        """
        :param str policy_name: Specifies the projection policy to set on a column.
        """
        pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        """
        Specifies the projection policy to set on a column.
        """
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class ViewDataMetricFunction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "functionName":
            suggest = "function_name"
        elif key == "scheduleStatus":
            suggest = "schedule_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ViewDataMetricFunction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ViewDataMetricFunction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ViewDataMetricFunction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 function_name: str,
                 ons: Sequence[str],
                 schedule_status: str):
        """
        :param str function_name: Identifier of the data metric function to add to the table or view or drop from the table or view. This function identifier must be provided without arguments in parenthesis.
        :param Sequence[str] ons: The table or view columns on which to associate the data metric function. The data types of the columns must match the data types of the columns specified in the data metric function definition.
        :param str schedule_status: The status of the metrics association. Valid values are: `STARTED` | `SUSPENDED`. When status of a data metric function is changed, it is being reassigned with `DROP DATA METRIC FUNCTION` and `ADD DATA METRIC FUNCTION`, and then its status is changed by `MODIFY DATA METRIC FUNCTION`
        """
        pulumi.set(__self__, "function_name", function_name)
        pulumi.set(__self__, "ons", ons)
        pulumi.set(__self__, "schedule_status", schedule_status)

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> str:
        """
        Identifier of the data metric function to add to the table or view or drop from the table or view. This function identifier must be provided without arguments in parenthesis.
        """
        return pulumi.get(self, "function_name")

    @property
    @pulumi.getter
    def ons(self) -> Sequence[str]:
        """
        The table or view columns on which to associate the data metric function. The data types of the columns must match the data types of the columns specified in the data metric function definition.
        """
        return pulumi.get(self, "ons")

    @property
    @pulumi.getter(name="scheduleStatus")
    def schedule_status(self) -> str:
        """
        The status of the metrics association. Valid values are: `STARTED` | `SUSPENDED`. When status of a data metric function is changed, it is being reassigned with `DROP DATA METRIC FUNCTION` and `ADD DATA METRIC FUNCTION`, and then its status is changed by `MODIFY DATA METRIC FUNCTION`
        """
        return pulumi.get(self, "schedule_status")


@pulumi.output_type
class ViewDataMetricSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "usingCron":
            suggest = "using_cron"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ViewDataMetricSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ViewDataMetricSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ViewDataMetricSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 minutes: Optional[int] = None,
                 using_cron: Optional[str] = None):
        """
        :param int minutes: Specifies an interval (in minutes) of wait time inserted between runs of the data metric function. Conflicts with `using_cron`. Valid values are: `5` | `15` | `30` | `60` | `720` | `1440`. Due to Snowflake limitations, changes in this field are not managed by the provider. Please consider using taint command, `using_cron` field, or replace*triggered*by metadata argument.
        :param str using_cron: Specifies a cron expression and time zone for periodically running the data metric function. Supports a subset of standard cron utility syntax. Conflicts with `minutes`.
        """
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if using_cron is not None:
            pulumi.set(__self__, "using_cron", using_cron)

    @property
    @pulumi.getter
    def minutes(self) -> Optional[int]:
        """
        Specifies an interval (in minutes) of wait time inserted between runs of the data metric function. Conflicts with `using_cron`. Valid values are: `5` | `15` | `30` | `60` | `720` | `1440`. Due to Snowflake limitations, changes in this field are not managed by the provider. Please consider using taint command, `using_cron` field, or replace*triggered*by metadata argument.
        """
        return pulumi.get(self, "minutes")

    @property
    @pulumi.getter(name="usingCron")
    def using_cron(self) -> Optional[str]:
        """
        Specifies a cron expression and time zone for periodically running the data metric function. Supports a subset of standard cron utility syntax. Conflicts with `minutes`.
        """
        return pulumi.get(self, "using_cron")


@pulumi.output_type
class ViewDescribeOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isNullable":
            suggest = "is_nullable"
        elif key == "isPrimary":
            suggest = "is_primary"
        elif key == "isUnique":
            suggest = "is_unique"
        elif key == "policyName":
            suggest = "policy_name"
        elif key == "privacyDomain":
            suggest = "privacy_domain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ViewDescribeOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ViewDescribeOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ViewDescribeOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 check: Optional[str] = None,
                 comment: Optional[str] = None,
                 default: Optional[str] = None,
                 expression: Optional[str] = None,
                 is_nullable: Optional[bool] = None,
                 is_primary: Optional[bool] = None,
                 is_unique: Optional[bool] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 policy_name: Optional[str] = None,
                 privacy_domain: Optional[str] = None,
                 type: Optional[str] = None):
        if check is not None:
            pulumi.set(__self__, "check", check)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if is_nullable is not None:
            pulumi.set(__self__, "is_nullable", is_nullable)
        if is_primary is not None:
            pulumi.set(__self__, "is_primary", is_primary)
        if is_unique is not None:
            pulumi.set(__self__, "is_unique", is_unique)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if privacy_domain is not None:
            pulumi.set(__self__, "privacy_domain", privacy_domain)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def check(self) -> Optional[str]:
        return pulumi.get(self, "check")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="isNullable")
    def is_nullable(self) -> Optional[bool]:
        return pulumi.get(self, "is_nullable")

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> Optional[bool]:
        return pulumi.get(self, "is_primary")

    @property
    @pulumi.getter(name="isUnique")
    def is_unique(self) -> Optional[bool]:
        return pulumi.get(self, "is_unique")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[str]:
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="privacyDomain")
    def privacy_domain(self) -> Optional[str]:
        return pulumi.get(self, "privacy_domain")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ViewRowAccessPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyName":
            suggest = "policy_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ViewRowAccessPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ViewRowAccessPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ViewRowAccessPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ons: Sequence[str],
                 policy_name: str):
        """
        :param Sequence[str] ons: Defines which columns are affected by the policy.
        :param str policy_name: Row access policy name.
        """
        pulumi.set(__self__, "ons", ons)
        pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter
    def ons(self) -> Sequence[str]:
        """
        Defines which columns are affected by the policy.
        """
        return pulumi.get(self, "ons")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        """
        Row access policy name.
        """
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class ViewShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "changeTracking":
            suggest = "change_tracking"
        elif key == "createdOn":
            suggest = "created_on"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "isMaterialized":
            suggest = "is_materialized"
        elif key == "isSecure":
            suggest = "is_secure"
        elif key == "ownerRoleType":
            suggest = "owner_role_type"
        elif key == "schemaName":
            suggest = "schema_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ViewShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ViewShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ViewShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 change_tracking: Optional[str] = None,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 database_name: Optional[str] = None,
                 is_materialized: Optional[bool] = None,
                 is_secure: Optional[bool] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 owner_role_type: Optional[str] = None,
                 reserved: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 text: Optional[str] = None):
        if change_tracking is not None:
            pulumi.set(__self__, "change_tracking", change_tracking)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if is_materialized is not None:
            pulumi.set(__self__, "is_materialized", is_materialized)
        if is_secure is not None:
            pulumi.set(__self__, "is_secure", is_secure)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if reserved is not None:
            pulumi.set(__self__, "reserved", reserved)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter(name="changeTracking")
    def change_tracking(self) -> Optional[str]:
        return pulumi.get(self, "change_tracking")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="isMaterialized")
    def is_materialized(self) -> Optional[bool]:
        return pulumi.get(self, "is_materialized")

    @property
    @pulumi.getter(name="isSecure")
    def is_secure(self) -> Optional[bool]:
        return pulumi.get(self, "is_secure")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[str]:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter
    def reserved(self) -> Optional[str]:
        return pulumi.get(self, "reserved")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        return pulumi.get(self, "text")


@pulumi.output_type
class WarehouseParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxConcurrencyLevels":
            suggest = "max_concurrency_levels"
        elif key == "statementQueuedTimeoutInSeconds":
            suggest = "statement_queued_timeout_in_seconds"
        elif key == "statementTimeoutInSeconds":
            suggest = "statement_timeout_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WarehouseParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WarehouseParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WarehouseParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_concurrency_levels: Optional[Sequence['outputs.WarehouseParameterMaxConcurrencyLevel']] = None,
                 statement_queued_timeout_in_seconds: Optional[Sequence['outputs.WarehouseParameterStatementQueuedTimeoutInSecond']] = None,
                 statement_timeout_in_seconds: Optional[Sequence['outputs.WarehouseParameterStatementTimeoutInSecond']] = None):
        if max_concurrency_levels is not None:
            pulumi.set(__self__, "max_concurrency_levels", max_concurrency_levels)
        if statement_queued_timeout_in_seconds is not None:
            pulumi.set(__self__, "statement_queued_timeout_in_seconds", statement_queued_timeout_in_seconds)
        if statement_timeout_in_seconds is not None:
            pulumi.set(__self__, "statement_timeout_in_seconds", statement_timeout_in_seconds)

    @property
    @pulumi.getter(name="maxConcurrencyLevels")
    def max_concurrency_levels(self) -> Optional[Sequence['outputs.WarehouseParameterMaxConcurrencyLevel']]:
        return pulumi.get(self, "max_concurrency_levels")

    @property
    @pulumi.getter(name="statementQueuedTimeoutInSeconds")
    def statement_queued_timeout_in_seconds(self) -> Optional[Sequence['outputs.WarehouseParameterStatementQueuedTimeoutInSecond']]:
        return pulumi.get(self, "statement_queued_timeout_in_seconds")

    @property
    @pulumi.getter(name="statementTimeoutInSeconds")
    def statement_timeout_in_seconds(self) -> Optional[Sequence['outputs.WarehouseParameterStatementTimeoutInSecond']]:
        return pulumi.get(self, "statement_timeout_in_seconds")


@pulumi.output_type
class WarehouseParameterMaxConcurrencyLevel(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class WarehouseParameterStatementQueuedTimeoutInSecond(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class WarehouseParameterStatementTimeoutInSecond(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 level: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class WarehouseShowOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoResume":
            suggest = "auto_resume"
        elif key == "autoSuspend":
            suggest = "auto_suspend"
        elif key == "createdOn":
            suggest = "created_on"
        elif key == "enableQueryAcceleration":
            suggest = "enable_query_acceleration"
        elif key == "isCurrent":
            suggest = "is_current"
        elif key == "isDefault":
            suggest = "is_default"
        elif key == "maxClusterCount":
            suggest = "max_cluster_count"
        elif key == "minClusterCount":
            suggest = "min_cluster_count"
        elif key == "ownerRoleType":
            suggest = "owner_role_type"
        elif key == "queryAccelerationMaxScaleFactor":
            suggest = "query_acceleration_max_scale_factor"
        elif key == "resourceMonitor":
            suggest = "resource_monitor"
        elif key == "resumedOn":
            suggest = "resumed_on"
        elif key == "scalingPolicy":
            suggest = "scaling_policy"
        elif key == "startedClusters":
            suggest = "started_clusters"
        elif key == "updatedOn":
            suggest = "updated_on"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WarehouseShowOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WarehouseShowOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WarehouseShowOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_resume: Optional[bool] = None,
                 auto_suspend: Optional[int] = None,
                 available: Optional[float] = None,
                 comment: Optional[str] = None,
                 created_on: Optional[str] = None,
                 enable_query_acceleration: Optional[bool] = None,
                 is_current: Optional[bool] = None,
                 is_default: Optional[bool] = None,
                 max_cluster_count: Optional[int] = None,
                 min_cluster_count: Optional[int] = None,
                 name: Optional[str] = None,
                 other: Optional[float] = None,
                 owner: Optional[str] = None,
                 owner_role_type: Optional[str] = None,
                 provisioning: Optional[float] = None,
                 query_acceleration_max_scale_factor: Optional[int] = None,
                 queued: Optional[int] = None,
                 quiescing: Optional[float] = None,
                 resource_monitor: Optional[str] = None,
                 resumed_on: Optional[str] = None,
                 running: Optional[int] = None,
                 scaling_policy: Optional[str] = None,
                 size: Optional[str] = None,
                 started_clusters: Optional[int] = None,
                 state: Optional[str] = None,
                 type: Optional[str] = None,
                 updated_on: Optional[str] = None):
        if auto_resume is not None:
            pulumi.set(__self__, "auto_resume", auto_resume)
        if auto_suspend is not None:
            pulumi.set(__self__, "auto_suspend", auto_suspend)
        if available is not None:
            pulumi.set(__self__, "available", available)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if enable_query_acceleration is not None:
            pulumi.set(__self__, "enable_query_acceleration", enable_query_acceleration)
        if is_current is not None:
            pulumi.set(__self__, "is_current", is_current)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if max_cluster_count is not None:
            pulumi.set(__self__, "max_cluster_count", max_cluster_count)
        if min_cluster_count is not None:
            pulumi.set(__self__, "min_cluster_count", min_cluster_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if other is not None:
            pulumi.set(__self__, "other", other)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if query_acceleration_max_scale_factor is not None:
            pulumi.set(__self__, "query_acceleration_max_scale_factor", query_acceleration_max_scale_factor)
        if queued is not None:
            pulumi.set(__self__, "queued", queued)
        if quiescing is not None:
            pulumi.set(__self__, "quiescing", quiescing)
        if resource_monitor is not None:
            pulumi.set(__self__, "resource_monitor", resource_monitor)
        if resumed_on is not None:
            pulumi.set(__self__, "resumed_on", resumed_on)
        if running is not None:
            pulumi.set(__self__, "running", running)
        if scaling_policy is not None:
            pulumi.set(__self__, "scaling_policy", scaling_policy)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if started_clusters is not None:
            pulumi.set(__self__, "started_clusters", started_clusters)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_on is not None:
            pulumi.set(__self__, "updated_on", updated_on)

    @property
    @pulumi.getter(name="autoResume")
    def auto_resume(self) -> Optional[bool]:
        return pulumi.get(self, "auto_resume")

    @property
    @pulumi.getter(name="autoSuspend")
    def auto_suspend(self) -> Optional[int]:
        return pulumi.get(self, "auto_suspend")

    @property
    @pulumi.getter
    def available(self) -> Optional[float]:
        return pulumi.get(self, "available")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="enableQueryAcceleration")
    def enable_query_acceleration(self) -> Optional[bool]:
        return pulumi.get(self, "enable_query_acceleration")

    @property
    @pulumi.getter(name="isCurrent")
    def is_current(self) -> Optional[bool]:
        return pulumi.get(self, "is_current")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="maxClusterCount")
    def max_cluster_count(self) -> Optional[int]:
        return pulumi.get(self, "max_cluster_count")

    @property
    @pulumi.getter(name="minClusterCount")
    def min_cluster_count(self) -> Optional[int]:
        return pulumi.get(self, "min_cluster_count")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def other(self) -> Optional[float]:
        return pulumi.get(self, "other")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[str]:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[float]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter(name="queryAccelerationMaxScaleFactor")
    def query_acceleration_max_scale_factor(self) -> Optional[int]:
        return pulumi.get(self, "query_acceleration_max_scale_factor")

    @property
    @pulumi.getter
    def queued(self) -> Optional[int]:
        return pulumi.get(self, "queued")

    @property
    @pulumi.getter
    def quiescing(self) -> Optional[float]:
        return pulumi.get(self, "quiescing")

    @property
    @pulumi.getter(name="resourceMonitor")
    def resource_monitor(self) -> Optional[str]:
        return pulumi.get(self, "resource_monitor")

    @property
    @pulumi.getter(name="resumedOn")
    def resumed_on(self) -> Optional[str]:
        return pulumi.get(self, "resumed_on")

    @property
    @pulumi.getter
    def running(self) -> Optional[int]:
        return pulumi.get(self, "running")

    @property
    @pulumi.getter(name="scalingPolicy")
    def scaling_policy(self) -> Optional[str]:
        return pulumi.get(self, "scaling_policy")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="startedClusters")
    def started_clusters(self) -> Optional[int]:
        return pulumi.get(self, "started_clusters")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedOn")
    def updated_on(self) -> Optional[str]:
        return pulumi.get(self, "updated_on")


@pulumi.output_type
class GetAccountsAccountResult(dict):
    def __init__(__self__, *,
                 account_locator: str,
                 account_locator_url: str,
                 account_name: str,
                 account_url: str,
                 comment: str,
                 consumption_billing_entity_name: str,
                 created_on: str,
                 edition: str,
                 is_org_admin: bool,
                 managed_accounts: int,
                 marketplace_consumer_billing_entity_name: str,
                 marketplace_provider_billing_entity_name: str,
                 old_account_url: str,
                 organization_name: str,
                 region_group: str,
                 snowflake_region: str):
        """
        :param str account_locator: System-assigned identifier of the acccount.
        :param str account_locator_url: Legacy Snowflake access URL syntax that includes the region_name and account_locator.
        :param str account_name: User-defined name that identifies an account within the organization.
        :param str account_url: Preferred Snowflake access URL that includes the values of organization_name and account_name.
        :param str comment: Comment for the account.
        :param str consumption_billing_entity_name: Name of the consumption billing entity.
        :param str created_on: Date and time when the account was created.
        :param str edition: Snowflake Edition of the account.
        :param bool is_org_admin: Indicates whether the ORGADMIN role is enabled in an account. If TRUE, the role is enabled.
        :param int managed_accounts: Indicates how many managed accounts have been created by the account.
        :param str marketplace_consumer_billing_entity_name: Name of the marketplace consumer billing entity.
        :param str marketplace_provider_billing_entity_name: Name of the marketplace provider billing entity.
        :param str old_account_url: The previous account URL for a given account.
        :param str organization_name: Name of the organization.
        :param str region_group: Region group where the account is located. Note: this column is only visible to organizations that span multiple Region Groups.
        :param str snowflake_region: Snowflake Region where the account is located. A Snowflake Region is a distinct location within a cloud platform region that is isolated from other Snowflake Regions. A Snowflake Region can be either multi-tenant or single-tenant (for a Virtual Private Snowflake account).
        """
        pulumi.set(__self__, "account_locator", account_locator)
        pulumi.set(__self__, "account_locator_url", account_locator_url)
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_url", account_url)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "consumption_billing_entity_name", consumption_billing_entity_name)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "edition", edition)
        pulumi.set(__self__, "is_org_admin", is_org_admin)
        pulumi.set(__self__, "managed_accounts", managed_accounts)
        pulumi.set(__self__, "marketplace_consumer_billing_entity_name", marketplace_consumer_billing_entity_name)
        pulumi.set(__self__, "marketplace_provider_billing_entity_name", marketplace_provider_billing_entity_name)
        pulumi.set(__self__, "old_account_url", old_account_url)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "region_group", region_group)
        pulumi.set(__self__, "snowflake_region", snowflake_region)

    @property
    @pulumi.getter(name="accountLocator")
    def account_locator(self) -> str:
        """
        System-assigned identifier of the acccount.
        """
        return pulumi.get(self, "account_locator")

    @property
    @pulumi.getter(name="accountLocatorUrl")
    def account_locator_url(self) -> str:
        """
        Legacy Snowflake access URL syntax that includes the region_name and account_locator.
        """
        return pulumi.get(self, "account_locator_url")

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        User-defined name that identifies an account within the organization.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountUrl")
    def account_url(self) -> str:
        """
        Preferred Snowflake access URL that includes the values of organization_name and account_name.
        """
        return pulumi.get(self, "account_url")

    @property
    @pulumi.getter
    def comment(self) -> str:
        """
        Comment for the account.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="consumptionBillingEntityName")
    def consumption_billing_entity_name(self) -> str:
        """
        Name of the consumption billing entity.
        """
        return pulumi.get(self, "consumption_billing_entity_name")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        """
        Date and time when the account was created.
        """
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def edition(self) -> str:
        """
        Snowflake Edition of the account.
        """
        return pulumi.get(self, "edition")

    @property
    @pulumi.getter(name="isOrgAdmin")
    def is_org_admin(self) -> bool:
        """
        Indicates whether the ORGADMIN role is enabled in an account. If TRUE, the role is enabled.
        """
        return pulumi.get(self, "is_org_admin")

    @property
    @pulumi.getter(name="managedAccounts")
    def managed_accounts(self) -> int:
        """
        Indicates how many managed accounts have been created by the account.
        """
        return pulumi.get(self, "managed_accounts")

    @property
    @pulumi.getter(name="marketplaceConsumerBillingEntityName")
    def marketplace_consumer_billing_entity_name(self) -> str:
        """
        Name of the marketplace consumer billing entity.
        """
        return pulumi.get(self, "marketplace_consumer_billing_entity_name")

    @property
    @pulumi.getter(name="marketplaceProviderBillingEntityName")
    def marketplace_provider_billing_entity_name(self) -> str:
        """
        Name of the marketplace provider billing entity.
        """
        return pulumi.get(self, "marketplace_provider_billing_entity_name")

    @property
    @pulumi.getter(name="oldAccountUrl")
    def old_account_url(self) -> str:
        """
        The previous account URL for a given account.
        """
        return pulumi.get(self, "old_account_url")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        """
        Name of the organization.
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="regionGroup")
    def region_group(self) -> str:
        """
        Region group where the account is located. Note: this column is only visible to organizations that span multiple Region Groups.
        """
        return pulumi.get(self, "region_group")

    @property
    @pulumi.getter(name="snowflakeRegion")
    def snowflake_region(self) -> str:
        """
        Snowflake Region where the account is located. A Snowflake Region is a distinct location within a cloud platform region that is isolated from other Snowflake Regions. A Snowflake Region can be either multi-tenant or single-tenant (for a Virtual Private Snowflake account).
        """
        return pulumi.get(self, "snowflake_region")


@pulumi.output_type
class GetAlertsAlertResult(dict):
    def __init__(__self__, *,
                 action: str,
                 comment: str,
                 condition: str,
                 database_name: str,
                 name: str,
                 owner: str,
                 schema_name: str):
        """
        :param str action: The text of the SQL statement that should be executed when the alert is triggered.
        :param str comment: Comment for the alert.
        :param str condition: The text of the SQL statement that serves as the condition when the alert should be triggered.
        :param str database_name: Database in which the alert is stored.
        :param str name: Name of the alert.
        :param str owner: Role that owns the alert (i.e. has the OWNERSHIP privilege on the alert)
        :param str schema_name: Schema in which the alert is stored.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        The text of the SQL statement that should be executed when the alert is triggered.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def comment(self) -> str:
        """
        Comment for the alert.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        The text of the SQL statement that serves as the condition when the alert should be triggered.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        Database in which the alert is stored.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the alert.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Role that owns the alert (i.e. has the OWNERSHIP privilege on the alert)
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        """
        Schema in which the alert is stored.
        """
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetConnectionsConnectionResult(dict):
    def __init__(__self__, *,
                 show_outputs: Sequence['outputs.GetConnectionsConnectionShowOutputResult']):
        """
        :param Sequence['GetConnectionsConnectionShowOutputArgs'] show_outputs: Holds the output of SHOW CONNECTIONS.
        """
        pulumi.set(__self__, "show_outputs", show_outputs)

    @property
    @pulumi.getter(name="showOutputs")
    def show_outputs(self) -> Sequence['outputs.GetConnectionsConnectionShowOutputResult']:
        """
        Holds the output of SHOW CONNECTIONS.
        """
        return pulumi.get(self, "show_outputs")


@pulumi.output_type
class GetConnectionsConnectionShowOutputResult(dict):
    def __init__(__self__, *,
                 account_locator: str,
                 account_name: str,
                 comment: str,
                 connection_url: str,
                 created_on: str,
                 failover_allowed_to_accounts: Sequence[str],
                 is_primary: bool,
                 name: str,
                 organization_name: str,
                 primary: str,
                 region_group: str,
                 snowflake_region: str):
        pulumi.set(__self__, "account_locator", account_locator)
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "connection_url", connection_url)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "failover_allowed_to_accounts", failover_allowed_to_accounts)
        pulumi.set(__self__, "is_primary", is_primary)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "region_group", region_group)
        pulumi.set(__self__, "snowflake_region", snowflake_region)

    @property
    @pulumi.getter(name="accountLocator")
    def account_locator(self) -> str:
        return pulumi.get(self, "account_locator")

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="connectionUrl")
    def connection_url(self) -> str:
        return pulumi.get(self, "connection_url")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="failoverAllowedToAccounts")
    def failover_allowed_to_accounts(self) -> Sequence[str]:
        return pulumi.get(self, "failover_allowed_to_accounts")

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> bool:
        return pulumi.get(self, "is_primary")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter
    def primary(self) -> str:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter(name="regionGroup")
    def region_group(self) -> str:
        return pulumi.get(self, "region_group")

    @property
    @pulumi.getter(name="snowflakeRegion")
    def snowflake_region(self) -> str:
        return pulumi.get(self, "snowflake_region")


@pulumi.output_type
class GetCortexSearchServicesCortexSearchServiceResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 created_on: str,
                 database_name: str,
                 name: str,
                 schema_name: str):
        """
        :param str comment: Comment for the cortex search service.
        :param str created_on: Date and time when the cortex search service was created.
        :param str database_name: Database in which the cortex search service is stored.
        :param str name: Name of the cortex search service.
        :param str schema_name: Schema in which the cortex search service is stored.
        """
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def comment(self) -> str:
        """
        Comment for the cortex search service.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        """
        Date and time when the cortex search service was created.
        """
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        Database in which the cortex search service is stored.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the cortex search service.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        """
        Schema in which the cortex search service is stored.
        """
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetCortexSearchServicesInResult(dict):
    def __init__(__self__, *,
                 account: Optional[bool] = None,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param bool account: Returns records for the entire account.
        :param str database: Returns records for the current database in use or for a specified database (db_name).
        :param str schema: Returns records for the current schema in use or a specified schema (schema_name).
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def account(self) -> Optional[bool]:
        """
        Returns records for the entire account.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Returns records for the current database in use or for a specified database (db_name).
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Returns records for the current schema in use or a specified schema (schema_name).
        """
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetCortexSearchServicesLimitResult(dict):
    def __init__(__self__, *,
                 rows: int,
                 from_: Optional[str] = None):
        """
        :param int rows: The maximum number of rows to return.
        :param str from_: Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        pulumi.set(__self__, "rows", rows)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)

    @property
    @pulumi.getter
    def rows(self) -> int:
        """
        The maximum number of rows to return.
        """
        return pulumi.get(self, "rows")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        return pulumi.get(self, "from_")


@pulumi.output_type
class GetDatabaseRolesDatabaseRoleResult(dict):
    def __init__(__self__, *,
                 show_outputs: Sequence['outputs.GetDatabaseRolesDatabaseRoleShowOutputResult']):
        """
        :param Sequence['GetDatabaseRolesDatabaseRoleShowOutputArgs'] show_outputs: Holds the output of SHOW DATABASE ROLES.
        """
        pulumi.set(__self__, "show_outputs", show_outputs)

    @property
    @pulumi.getter(name="showOutputs")
    def show_outputs(self) -> Sequence['outputs.GetDatabaseRolesDatabaseRoleShowOutputResult']:
        """
        Holds the output of SHOW DATABASE ROLES.
        """
        return pulumi.get(self, "show_outputs")


@pulumi.output_type
class GetDatabaseRolesDatabaseRoleShowOutputResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 created_on: str,
                 database_name: str,
                 granted_database_roles: int,
                 granted_to_database_roles: int,
                 granted_to_roles: int,
                 is_current: bool,
                 is_default: bool,
                 is_inherited: bool,
                 name: str,
                 owner: str,
                 owner_role_type: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "granted_database_roles", granted_database_roles)
        pulumi.set(__self__, "granted_to_database_roles", granted_to_database_roles)
        pulumi.set(__self__, "granted_to_roles", granted_to_roles)
        pulumi.set(__self__, "is_current", is_current)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "is_inherited", is_inherited)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "owner_role_type", owner_role_type)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="grantedDatabaseRoles")
    def granted_database_roles(self) -> int:
        return pulumi.get(self, "granted_database_roles")

    @property
    @pulumi.getter(name="grantedToDatabaseRoles")
    def granted_to_database_roles(self) -> int:
        return pulumi.get(self, "granted_to_database_roles")

    @property
    @pulumi.getter(name="grantedToRoles")
    def granted_to_roles(self) -> int:
        return pulumi.get(self, "granted_to_roles")

    @property
    @pulumi.getter(name="isCurrent")
    def is_current(self) -> bool:
        return pulumi.get(self, "is_current")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isInherited")
    def is_inherited(self) -> bool:
        return pulumi.get(self, "is_inherited")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> str:
        return pulumi.get(self, "owner_role_type")


@pulumi.output_type
class GetDatabaseRolesLimitResult(dict):
    def __init__(__self__, *,
                 rows: int,
                 from_: Optional[str] = None):
        """
        :param int rows: The maximum number of rows to return.
        :param str from_: Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        pulumi.set(__self__, "rows", rows)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)

    @property
    @pulumi.getter
    def rows(self) -> int:
        """
        The maximum number of rows to return.
        """
        return pulumi.get(self, "rows")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        return pulumi.get(self, "from_")


@pulumi.output_type
class GetDatabasesDatabaseResult(dict):
    def __init__(__self__, *,
                 describe_outputs: Sequence['outputs.GetDatabasesDatabaseDescribeOutputResult'],
                 parameters: Sequence['outputs.GetDatabasesDatabaseParameterResult'],
                 show_outputs: Sequence['outputs.GetDatabasesDatabaseShowOutputResult']):
        """
        :param Sequence['GetDatabasesDatabaseDescribeOutputArgs'] describe_outputs: Holds the output of DESCRIBE DATABASE.
        :param Sequence['GetDatabasesDatabaseParameterArgs'] parameters: Holds the output of SHOW PARAMETERS FOR DATABASE.
        :param Sequence['GetDatabasesDatabaseShowOutputArgs'] show_outputs: Holds the output of SHOW DATABASES.
        """
        pulumi.set(__self__, "describe_outputs", describe_outputs)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "show_outputs", show_outputs)

    @property
    @pulumi.getter(name="describeOutputs")
    def describe_outputs(self) -> Sequence['outputs.GetDatabasesDatabaseDescribeOutputResult']:
        """
        Holds the output of DESCRIBE DATABASE.
        """
        return pulumi.get(self, "describe_outputs")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetDatabasesDatabaseParameterResult']:
        """
        Holds the output of SHOW PARAMETERS FOR DATABASE.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="showOutputs")
    def show_outputs(self) -> Sequence['outputs.GetDatabasesDatabaseShowOutputResult']:
        """
        Holds the output of SHOW DATABASES.
        """
        return pulumi.get(self, "show_outputs")


@pulumi.output_type
class GetDatabasesDatabaseDescribeOutputResult(dict):
    def __init__(__self__, *,
                 created_on: str,
                 kind: str,
                 name: str):
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDatabasesDatabaseParameterResult(dict):
    def __init__(__self__, *,
                 catalogs: Sequence['outputs.GetDatabasesDatabaseParameterCatalogResult'],
                 data_retention_time_in_days: Sequence['outputs.GetDatabasesDatabaseParameterDataRetentionTimeInDayResult'],
                 default_ddl_collations: Sequence['outputs.GetDatabasesDatabaseParameterDefaultDdlCollationResult'],
                 enable_console_outputs: Sequence['outputs.GetDatabasesDatabaseParameterEnableConsoleOutputResult'],
                 external_volumes: Sequence['outputs.GetDatabasesDatabaseParameterExternalVolumeResult'],
                 log_levels: Sequence['outputs.GetDatabasesDatabaseParameterLogLevelResult'],
                 max_data_extension_time_in_days: Sequence['outputs.GetDatabasesDatabaseParameterMaxDataExtensionTimeInDayResult'],
                 quoted_identifiers_ignore_cases: Sequence['outputs.GetDatabasesDatabaseParameterQuotedIdentifiersIgnoreCaseResult'],
                 replace_invalid_characters: Sequence['outputs.GetDatabasesDatabaseParameterReplaceInvalidCharacterResult'],
                 storage_serialization_policies: Sequence['outputs.GetDatabasesDatabaseParameterStorageSerializationPolicyResult'],
                 suspend_task_after_num_failures: Sequence['outputs.GetDatabasesDatabaseParameterSuspendTaskAfterNumFailureResult'],
                 task_auto_retry_attempts: Sequence['outputs.GetDatabasesDatabaseParameterTaskAutoRetryAttemptResult'],
                 trace_levels: Sequence['outputs.GetDatabasesDatabaseParameterTraceLevelResult'],
                 user_task_managed_initial_warehouse_sizes: Sequence['outputs.GetDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSizeResult'],
                 user_task_minimum_trigger_interval_in_seconds: Sequence['outputs.GetDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecondResult'],
                 user_task_timeout_ms: Sequence['outputs.GetDatabasesDatabaseParameterUserTaskTimeoutMResult']):
        pulumi.set(__self__, "catalogs", catalogs)
        pulumi.set(__self__, "data_retention_time_in_days", data_retention_time_in_days)
        pulumi.set(__self__, "default_ddl_collations", default_ddl_collations)
        pulumi.set(__self__, "enable_console_outputs", enable_console_outputs)
        pulumi.set(__self__, "external_volumes", external_volumes)
        pulumi.set(__self__, "log_levels", log_levels)
        pulumi.set(__self__, "max_data_extension_time_in_days", max_data_extension_time_in_days)
        pulumi.set(__self__, "quoted_identifiers_ignore_cases", quoted_identifiers_ignore_cases)
        pulumi.set(__self__, "replace_invalid_characters", replace_invalid_characters)
        pulumi.set(__self__, "storage_serialization_policies", storage_serialization_policies)
        pulumi.set(__self__, "suspend_task_after_num_failures", suspend_task_after_num_failures)
        pulumi.set(__self__, "task_auto_retry_attempts", task_auto_retry_attempts)
        pulumi.set(__self__, "trace_levels", trace_levels)
        pulumi.set(__self__, "user_task_managed_initial_warehouse_sizes", user_task_managed_initial_warehouse_sizes)
        pulumi.set(__self__, "user_task_minimum_trigger_interval_in_seconds", user_task_minimum_trigger_interval_in_seconds)
        pulumi.set(__self__, "user_task_timeout_ms", user_task_timeout_ms)

    @property
    @pulumi.getter
    def catalogs(self) -> Sequence['outputs.GetDatabasesDatabaseParameterCatalogResult']:
        return pulumi.get(self, "catalogs")

    @property
    @pulumi.getter(name="dataRetentionTimeInDays")
    def data_retention_time_in_days(self) -> Sequence['outputs.GetDatabasesDatabaseParameterDataRetentionTimeInDayResult']:
        return pulumi.get(self, "data_retention_time_in_days")

    @property
    @pulumi.getter(name="defaultDdlCollations")
    def default_ddl_collations(self) -> Sequence['outputs.GetDatabasesDatabaseParameterDefaultDdlCollationResult']:
        return pulumi.get(self, "default_ddl_collations")

    @property
    @pulumi.getter(name="enableConsoleOutputs")
    def enable_console_outputs(self) -> Sequence['outputs.GetDatabasesDatabaseParameterEnableConsoleOutputResult']:
        return pulumi.get(self, "enable_console_outputs")

    @property
    @pulumi.getter(name="externalVolumes")
    def external_volumes(self) -> Sequence['outputs.GetDatabasesDatabaseParameterExternalVolumeResult']:
        return pulumi.get(self, "external_volumes")

    @property
    @pulumi.getter(name="logLevels")
    def log_levels(self) -> Sequence['outputs.GetDatabasesDatabaseParameterLogLevelResult']:
        return pulumi.get(self, "log_levels")

    @property
    @pulumi.getter(name="maxDataExtensionTimeInDays")
    def max_data_extension_time_in_days(self) -> Sequence['outputs.GetDatabasesDatabaseParameterMaxDataExtensionTimeInDayResult']:
        return pulumi.get(self, "max_data_extension_time_in_days")

    @property
    @pulumi.getter(name="quotedIdentifiersIgnoreCases")
    def quoted_identifiers_ignore_cases(self) -> Sequence['outputs.GetDatabasesDatabaseParameterQuotedIdentifiersIgnoreCaseResult']:
        return pulumi.get(self, "quoted_identifiers_ignore_cases")

    @property
    @pulumi.getter(name="replaceInvalidCharacters")
    def replace_invalid_characters(self) -> Sequence['outputs.GetDatabasesDatabaseParameterReplaceInvalidCharacterResult']:
        return pulumi.get(self, "replace_invalid_characters")

    @property
    @pulumi.getter(name="storageSerializationPolicies")
    def storage_serialization_policies(self) -> Sequence['outputs.GetDatabasesDatabaseParameterStorageSerializationPolicyResult']:
        return pulumi.get(self, "storage_serialization_policies")

    @property
    @pulumi.getter(name="suspendTaskAfterNumFailures")
    def suspend_task_after_num_failures(self) -> Sequence['outputs.GetDatabasesDatabaseParameterSuspendTaskAfterNumFailureResult']:
        return pulumi.get(self, "suspend_task_after_num_failures")

    @property
    @pulumi.getter(name="taskAutoRetryAttempts")
    def task_auto_retry_attempts(self) -> Sequence['outputs.GetDatabasesDatabaseParameterTaskAutoRetryAttemptResult']:
        return pulumi.get(self, "task_auto_retry_attempts")

    @property
    @pulumi.getter(name="traceLevels")
    def trace_levels(self) -> Sequence['outputs.GetDatabasesDatabaseParameterTraceLevelResult']:
        return pulumi.get(self, "trace_levels")

    @property
    @pulumi.getter(name="userTaskManagedInitialWarehouseSizes")
    def user_task_managed_initial_warehouse_sizes(self) -> Sequence['outputs.GetDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSizeResult']:
        return pulumi.get(self, "user_task_managed_initial_warehouse_sizes")

    @property
    @pulumi.getter(name="userTaskMinimumTriggerIntervalInSeconds")
    def user_task_minimum_trigger_interval_in_seconds(self) -> Sequence['outputs.GetDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecondResult']:
        return pulumi.get(self, "user_task_minimum_trigger_interval_in_seconds")

    @property
    @pulumi.getter(name="userTaskTimeoutMs")
    def user_task_timeout_ms(self) -> Sequence['outputs.GetDatabasesDatabaseParameterUserTaskTimeoutMResult']:
        return pulumi.get(self, "user_task_timeout_ms")


@pulumi.output_type
class GetDatabasesDatabaseParameterCatalogResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDatabasesDatabaseParameterDataRetentionTimeInDayResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDatabasesDatabaseParameterDefaultDdlCollationResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDatabasesDatabaseParameterEnableConsoleOutputResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDatabasesDatabaseParameterExternalVolumeResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDatabasesDatabaseParameterLogLevelResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDatabasesDatabaseParameterMaxDataExtensionTimeInDayResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDatabasesDatabaseParameterQuotedIdentifiersIgnoreCaseResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDatabasesDatabaseParameterReplaceInvalidCharacterResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDatabasesDatabaseParameterStorageSerializationPolicyResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDatabasesDatabaseParameterSuspendTaskAfterNumFailureResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDatabasesDatabaseParameterTaskAutoRetryAttemptResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDatabasesDatabaseParameterTraceLevelResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSizeResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecondResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDatabasesDatabaseParameterUserTaskTimeoutMResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDatabasesDatabaseShowOutputResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 created_on: str,
                 dropped_on: str,
                 is_current: bool,
                 is_default: bool,
                 kind: str,
                 name: str,
                 options: str,
                 origin: str,
                 owner: str,
                 owner_role_type: str,
                 resource_group: str,
                 retention_time: int,
                 transient: bool):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "dropped_on", dropped_on)
        pulumi.set(__self__, "is_current", is_current)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "options", options)
        pulumi.set(__self__, "origin", origin)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "owner_role_type", owner_role_type)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "retention_time", retention_time)
        pulumi.set(__self__, "transient", transient)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="droppedOn")
    def dropped_on(self) -> str:
        return pulumi.get(self, "dropped_on")

    @property
    @pulumi.getter(name="isCurrent")
    def is_current(self) -> bool:
        return pulumi.get(self, "is_current")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def options(self) -> str:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def origin(self) -> str:
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> str:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="retentionTime")
    def retention_time(self) -> int:
        return pulumi.get(self, "retention_time")

    @property
    @pulumi.getter
    def transient(self) -> bool:
        return pulumi.get(self, "transient")


@pulumi.output_type
class GetDatabasesLimitResult(dict):
    def __init__(__self__, *,
                 rows: int,
                 from_: Optional[str] = None):
        """
        :param int rows: The maximum number of rows to return.
        :param str from_: Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        pulumi.set(__self__, "rows", rows)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)

    @property
    @pulumi.getter
    def rows(self) -> int:
        """
        The maximum number of rows to return.
        """
        return pulumi.get(self, "rows")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        return pulumi.get(self, "from_")


@pulumi.output_type
class GetDynamicTablesInResult(dict):
    def __init__(__self__, *,
                 account: Optional[bool] = None,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param bool account: Returns records for the entire account.
        :param str database: Returns records for the current database in use or for a specified database (db_name).
        :param str schema: Returns records for the current schema in use or a specified schema (schema_name).
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def account(self) -> Optional[bool]:
        """
        Returns records for the entire account.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Returns records for the current database in use or for a specified database (db_name).
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Returns records for the current schema in use or a specified schema (schema_name).
        """
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetDynamicTablesLikeResult(dict):
    def __init__(__self__, *,
                 pattern: str):
        """
        :param str pattern: Filters the command output by object name. The filter uses case-insensitive pattern matching with support for SQL wildcard characters (% and _).
        """
        pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def pattern(self) -> str:
        """
        Filters the command output by object name. The filter uses case-insensitive pattern matching with support for SQL wildcard characters (% and _).
        """
        return pulumi.get(self, "pattern")


@pulumi.output_type
class GetDynamicTablesLimitResult(dict):
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 rows: Optional[int] = None):
        """
        :param str from_: The optional FROM 'name_string' subclause effectively serves as a “cursor” for the results. This enables fetching the specified number of rows following the first row whose object name matches the specified string
        :param int rows: Specifies the maximum number of rows to return.
        """
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if rows is not None:
            pulumi.set(__self__, "rows", rows)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        The optional FROM 'name_string' subclause effectively serves as a “cursor” for the results. This enables fetching the specified number of rows following the first row whose object name matches the specified string
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def rows(self) -> Optional[int]:
        """
        Specifies the maximum number of rows to return.
        """
        return pulumi.get(self, "rows")


@pulumi.output_type
class GetDynamicTablesRecordResult(dict):
    def __init__(__self__, *,
                 automatic_clustering: bool,
                 bytes: int,
                 cluster_by: str,
                 comment: str,
                 created_on: str,
                 data_timestamp: str,
                 database_name: str,
                 is_clone: bool,
                 is_replica: bool,
                 last_suspended_on: str,
                 name: str,
                 owner: str,
                 refresh_mode: str,
                 refresh_mode_reason: str,
                 rows: int,
                 scheduling_state: str,
                 schema_name: str,
                 target_lag: str,
                 text: str,
                 warehouse: str):
        """
        :param bool automatic_clustering: Whether auto-clustering is enabled on the dynamic table. Not currently supported for dynamic tables.
        :param int bytes: Number of bytes that will be scanned if the entire dynamic table is scanned in a query.
        :param str cluster_by: The clustering key for the dynamic table.
        :param str comment: Comment for the dynamic table.
        :param str created_on: Date and time when the dynamic table was created.
        :param str data_timestamp: Timestamp of the data in the base object(s) that is included in the dynamic table.
        :param str database_name: Database in which the dynamic table is stored.
        :param bool is_clone: TRUE if the dynamic table has been cloned, else FALSE.
        :param bool is_replica: TRUE if the dynamic table is a replica. else FALSE.
        :param str last_suspended_on: Timestamp of last suspension.
        :param str name: Name of the dynamic table.
        :param str owner: Role that owns the dynamic table.
        :param str refresh_mode: INCREMENTAL if the dynamic table will use incremental refreshes, or FULL if it will recompute the whole table on every refresh.
        :param str refresh_mode_reason: Explanation for why FULL refresh mode was chosen. NULL if refresh mode is not FULL.
        :param int rows: Number of rows in the table.
        :param str scheduling_state: Displays RUNNING for dynamic tables that are actively scheduling refreshes and SUSPENDED for suspended dynamic tables.
        :param str schema_name: Schema in which the dynamic table is stored.
        :param str target_lag: The maximum duration that the dynamic table’s content should lag behind real time.
        :param str text: The text of the command that created this dynamic table (e.g. CREATE DYNAMIC TABLE ...).
        :param str warehouse: Warehouse that provides the required resources to perform the incremental refreshes.
        """
        pulumi.set(__self__, "automatic_clustering", automatic_clustering)
        pulumi.set(__self__, "bytes", bytes)
        pulumi.set(__self__, "cluster_by", cluster_by)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "data_timestamp", data_timestamp)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "is_clone", is_clone)
        pulumi.set(__self__, "is_replica", is_replica)
        pulumi.set(__self__, "last_suspended_on", last_suspended_on)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "refresh_mode", refresh_mode)
        pulumi.set(__self__, "refresh_mode_reason", refresh_mode_reason)
        pulumi.set(__self__, "rows", rows)
        pulumi.set(__self__, "scheduling_state", scheduling_state)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "target_lag", target_lag)
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "warehouse", warehouse)

    @property
    @pulumi.getter(name="automaticClustering")
    def automatic_clustering(self) -> bool:
        """
        Whether auto-clustering is enabled on the dynamic table. Not currently supported for dynamic tables.
        """
        return pulumi.get(self, "automatic_clustering")

    @property
    @pulumi.getter
    def bytes(self) -> int:
        """
        Number of bytes that will be scanned if the entire dynamic table is scanned in a query.
        """
        return pulumi.get(self, "bytes")

    @property
    @pulumi.getter(name="clusterBy")
    def cluster_by(self) -> str:
        """
        The clustering key for the dynamic table.
        """
        return pulumi.get(self, "cluster_by")

    @property
    @pulumi.getter
    def comment(self) -> str:
        """
        Comment for the dynamic table.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        """
        Date and time when the dynamic table was created.
        """
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="dataTimestamp")
    def data_timestamp(self) -> str:
        """
        Timestamp of the data in the base object(s) that is included in the dynamic table.
        """
        return pulumi.get(self, "data_timestamp")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        Database in which the dynamic table is stored.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="isClone")
    def is_clone(self) -> bool:
        """
        TRUE if the dynamic table has been cloned, else FALSE.
        """
        return pulumi.get(self, "is_clone")

    @property
    @pulumi.getter(name="isReplica")
    def is_replica(self) -> bool:
        """
        TRUE if the dynamic table is a replica. else FALSE.
        """
        return pulumi.get(self, "is_replica")

    @property
    @pulumi.getter(name="lastSuspendedOn")
    def last_suspended_on(self) -> str:
        """
        Timestamp of last suspension.
        """
        return pulumi.get(self, "last_suspended_on")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the dynamic table.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Role that owns the dynamic table.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="refreshMode")
    def refresh_mode(self) -> str:
        """
        INCREMENTAL if the dynamic table will use incremental refreshes, or FULL if it will recompute the whole table on every refresh.
        """
        return pulumi.get(self, "refresh_mode")

    @property
    @pulumi.getter(name="refreshModeReason")
    def refresh_mode_reason(self) -> str:
        """
        Explanation for why FULL refresh mode was chosen. NULL if refresh mode is not FULL.
        """
        return pulumi.get(self, "refresh_mode_reason")

    @property
    @pulumi.getter
    def rows(self) -> int:
        """
        Number of rows in the table.
        """
        return pulumi.get(self, "rows")

    @property
    @pulumi.getter(name="schedulingState")
    def scheduling_state(self) -> str:
        """
        Displays RUNNING for dynamic tables that are actively scheduling refreshes and SUSPENDED for suspended dynamic tables.
        """
        return pulumi.get(self, "scheduling_state")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        """
        Schema in which the dynamic table is stored.
        """
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="targetLag")
    def target_lag(self) -> str:
        """
        The maximum duration that the dynamic table’s content should lag behind real time.
        """
        return pulumi.get(self, "target_lag")

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        The text of the command that created this dynamic table (e.g. CREATE DYNAMIC TABLE ...).
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def warehouse(self) -> str:
        """
        Warehouse that provides the required resources to perform the incremental refreshes.
        """
        return pulumi.get(self, "warehouse")


@pulumi.output_type
class GetExternalFunctionsExternalFunctionResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 database: str,
                 language: str,
                 name: str,
                 schema: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "language", language)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def language(self) -> str:
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetExternalTablesExternalTableResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 database: str,
                 name: str,
                 schema: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetFailoverGroupsFailoverGroupResult(dict):
    def __init__(__self__, *,
                 account_locator: str,
                 account_name: str,
                 allowed_accounts: Sequence[Any],
                 allowed_integration_types: Sequence[Any],
                 comment: str,
                 created_on: str,
                 is_primary: bool,
                 next_scheduled_refresh: str,
                 object_types: Sequence[Any],
                 organization_name: str,
                 owner: str,
                 primary: str,
                 region_group: str,
                 replication_schedule: str,
                 secondary_state: str,
                 snowflake_region: str,
                 type: str):
        """
        :param str account_locator: Account locator in a region.
        :param str account_name: Name of the account.
        :param Sequence[Any] allowed_accounts: List of accounts enabled for replication and failover.
        :param Sequence[Any] allowed_integration_types: A list of integration types that are enabled for replication.
        :param str comment: Comment string.
        :param str created_on: Date and time failover group was created.
        :param bool is_primary: Indicates whether the failover group is the primary group.
        :param str next_scheduled_refresh: Date and time of the next scheduled refresh.
        :param Sequence[Any] object_types: List of specified object types enabled for replication and failover.
        :param str organization_name: Name of your Snowflake organization.
        :param str owner: Name of the role with the OWNERSHIP privilege on the failover group. NULL if the failover group is in a different region.
        :param str primary: Name of the primary group.
        :param str region_group: Region group where the account is located. Note: this column is only visible to organizations that span multiple Region Groups.
        :param str replication_schedule: Scheduled interval for refresh; NULL if no replication schedule is set.
        :param str secondary_state: Current state of scheduled refresh. Valid values are started or suspended. NULL if no replication schedule is set.
        :param str snowflake_region: Snowflake Region where the account is located. A Snowflake Region is a distinct location within a cloud platform region that is isolated from other Snowflake Regions. A Snowflake Region can be either multi-tenant or single-tenant (for a Virtual Private Snowflake account).
        :param str type: Type of group. Valid value is FAILOVER.
        """
        pulumi.set(__self__, "account_locator", account_locator)
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "allowed_accounts", allowed_accounts)
        pulumi.set(__self__, "allowed_integration_types", allowed_integration_types)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "is_primary", is_primary)
        pulumi.set(__self__, "next_scheduled_refresh", next_scheduled_refresh)
        pulumi.set(__self__, "object_types", object_types)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "region_group", region_group)
        pulumi.set(__self__, "replication_schedule", replication_schedule)
        pulumi.set(__self__, "secondary_state", secondary_state)
        pulumi.set(__self__, "snowflake_region", snowflake_region)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accountLocator")
    def account_locator(self) -> str:
        """
        Account locator in a region.
        """
        return pulumi.get(self, "account_locator")

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Name of the account.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="allowedAccounts")
    def allowed_accounts(self) -> Sequence[Any]:
        """
        List of accounts enabled for replication and failover.
        """
        return pulumi.get(self, "allowed_accounts")

    @property
    @pulumi.getter(name="allowedIntegrationTypes")
    def allowed_integration_types(self) -> Sequence[Any]:
        """
        A list of integration types that are enabled for replication.
        """
        return pulumi.get(self, "allowed_integration_types")

    @property
    @pulumi.getter
    def comment(self) -> str:
        """
        Comment string.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        """
        Date and time failover group was created.
        """
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> bool:
        """
        Indicates whether the failover group is the primary group.
        """
        return pulumi.get(self, "is_primary")

    @property
    @pulumi.getter(name="nextScheduledRefresh")
    def next_scheduled_refresh(self) -> str:
        """
        Date and time of the next scheduled refresh.
        """
        return pulumi.get(self, "next_scheduled_refresh")

    @property
    @pulumi.getter(name="objectTypes")
    def object_types(self) -> Sequence[Any]:
        """
        List of specified object types enabled for replication and failover.
        """
        return pulumi.get(self, "object_types")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        """
        Name of your Snowflake organization.
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Name of the role with the OWNERSHIP privilege on the failover group. NULL if the failover group is in a different region.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def primary(self) -> str:
        """
        Name of the primary group.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter(name="regionGroup")
    def region_group(self) -> str:
        """
        Region group where the account is located. Note: this column is only visible to organizations that span multiple Region Groups.
        """
        return pulumi.get(self, "region_group")

    @property
    @pulumi.getter(name="replicationSchedule")
    def replication_schedule(self) -> str:
        """
        Scheduled interval for refresh; NULL if no replication schedule is set.
        """
        return pulumi.get(self, "replication_schedule")

    @property
    @pulumi.getter(name="secondaryState")
    def secondary_state(self) -> str:
        """
        Current state of scheduled refresh. Valid values are started or suspended. NULL if no replication schedule is set.
        """
        return pulumi.get(self, "secondary_state")

    @property
    @pulumi.getter(name="snowflakeRegion")
    def snowflake_region(self) -> str:
        """
        Snowflake Region where the account is located. A Snowflake Region is a distinct location within a cloud platform region that is isolated from other Snowflake Regions. A Snowflake Region can be either multi-tenant or single-tenant (for a Virtual Private Snowflake account).
        """
        return pulumi.get(self, "snowflake_region")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of group. Valid value is FAILOVER.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetFileFormatsFileFormatResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 database: str,
                 format_type: str,
                 name: str,
                 schema: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "format_type", format_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetFunctionsFunctionResult(dict):
    def __init__(__self__, *,
                 argument_types: Sequence[str],
                 comment: str,
                 database: str,
                 name: str,
                 return_type: str,
                 schema: str):
        pulumi.set(__self__, "argument_types", argument_types)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "return_type", return_type)
        pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter(name="argumentTypes")
    def argument_types(self) -> Sequence[str]:
        return pulumi.get(self, "argument_types")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="returnType")
    def return_type(self) -> str:
        return pulumi.get(self, "return_type")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetGrantsFutureGrantsInResult(dict):
    def __init__(__self__, *,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param str database: Lists all privileges on new (i.e. future) objects of a specified type in the database granted to a role.
        :param str schema: Lists all privileges on new (i.e. future) objects of a specified type in the schema granted to a role. Schema must be a fully qualified name ("&lt;db*name&gt;"."&lt;schema*name&gt;").
        """
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Lists all privileges on new (i.e. future) objects of a specified type in the database granted to a role.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Lists all privileges on new (i.e. future) objects of a specified type in the schema granted to a role. Schema must be a fully qualified name ("&lt;db*name&gt;"."&lt;schema*name&gt;").
        """
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetGrantsFutureGrantsToResult(dict):
    def __init__(__self__, *,
                 account_role: Optional[str] = None,
                 database_role: Optional[str] = None):
        """
        :param str account_role: Lists all privileges on new (i.e. future) objects of a specified type in a database or schema granted to the account role.
        :param str database_role: Lists all privileges on new (i.e. future) objects granted to the database role. Must be a fully qualified name ("&lt;db*name&gt;"."&lt;database*role_name&gt;").
        """
        if account_role is not None:
            pulumi.set(__self__, "account_role", account_role)
        if database_role is not None:
            pulumi.set(__self__, "database_role", database_role)

    @property
    @pulumi.getter(name="accountRole")
    def account_role(self) -> Optional[str]:
        """
        Lists all privileges on new (i.e. future) objects of a specified type in a database or schema granted to the account role.
        """
        return pulumi.get(self, "account_role")

    @property
    @pulumi.getter(name="databaseRole")
    def database_role(self) -> Optional[str]:
        """
        Lists all privileges on new (i.e. future) objects granted to the database role. Must be a fully qualified name ("&lt;db*name&gt;"."&lt;database*role_name&gt;").
        """
        return pulumi.get(self, "database_role")


@pulumi.output_type
class GetGrantsGrantResult(dict):
    def __init__(__self__, *,
                 created_on: str,
                 grant_option: bool,
                 granted_by: str,
                 granted_on: str,
                 granted_to: str,
                 grantee_name: str,
                 name: str,
                 privilege: str):
        """
        :param str created_on: The date and time the grant was created.
        :param bool grant_option: Whether the grantee can grant the privilege to others.
        :param str granted_by: The role that granted the privilege.
        :param str granted_on: The object on which the privilege was granted.
        :param str granted_to: The role to which the privilege was granted.
        :param str grantee_name: The name of the role to which the privilege was granted.
        :param str name: The name of the object on which the privilege was granted.
        :param str privilege: The privilege granted.
        """
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "grant_option", grant_option)
        pulumi.set(__self__, "granted_by", granted_by)
        pulumi.set(__self__, "granted_on", granted_on)
        pulumi.set(__self__, "granted_to", granted_to)
        pulumi.set(__self__, "grantee_name", grantee_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "privilege", privilege)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        """
        The date and time the grant was created.
        """
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="grantOption")
    def grant_option(self) -> bool:
        """
        Whether the grantee can grant the privilege to others.
        """
        return pulumi.get(self, "grant_option")

    @property
    @pulumi.getter(name="grantedBy")
    def granted_by(self) -> str:
        """
        The role that granted the privilege.
        """
        return pulumi.get(self, "granted_by")

    @property
    @pulumi.getter(name="grantedOn")
    def granted_on(self) -> str:
        """
        The object on which the privilege was granted.
        """
        return pulumi.get(self, "granted_on")

    @property
    @pulumi.getter(name="grantedTo")
    def granted_to(self) -> str:
        """
        The role to which the privilege was granted.
        """
        return pulumi.get(self, "granted_to")

    @property
    @pulumi.getter(name="granteeName")
    def grantee_name(self) -> str:
        """
        The name of the role to which the privilege was granted.
        """
        return pulumi.get(self, "grantee_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the object on which the privilege was granted.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def privilege(self) -> str:
        """
        The privilege granted.
        """
        return pulumi.get(self, "privilege")


@pulumi.output_type
class GetGrantsGrantsOfResult(dict):
    def __init__(__self__, *,
                 account_role: Optional[str] = None,
                 application_role: Optional[str] = None,
                 database_role: Optional[str] = None,
                 share: Optional[str] = None):
        """
        :param str account_role: Lists all users and roles to which the account role has been granted.
        :param str application_role: Lists all the users and roles to which the application role has been granted. Must be a fully qualified name ("&lt;db*name&gt;"."&lt;database*role_name&gt;").
        :param str database_role: Lists all users and roles to which the database role has been granted. Must be a fully qualified name ("&lt;db*name&gt;"."&lt;database*role_name&gt;").
        :param str share: Lists all the accounts for the share and indicates the accounts that are using the share.
        """
        if account_role is not None:
            pulumi.set(__self__, "account_role", account_role)
        if application_role is not None:
            pulumi.set(__self__, "application_role", application_role)
        if database_role is not None:
            pulumi.set(__self__, "database_role", database_role)
        if share is not None:
            pulumi.set(__self__, "share", share)

    @property
    @pulumi.getter(name="accountRole")
    def account_role(self) -> Optional[str]:
        """
        Lists all users and roles to which the account role has been granted.
        """
        return pulumi.get(self, "account_role")

    @property
    @pulumi.getter(name="applicationRole")
    def application_role(self) -> Optional[str]:
        """
        Lists all the users and roles to which the application role has been granted. Must be a fully qualified name ("&lt;db*name&gt;"."&lt;database*role_name&gt;").
        """
        return pulumi.get(self, "application_role")

    @property
    @pulumi.getter(name="databaseRole")
    def database_role(self) -> Optional[str]:
        """
        Lists all users and roles to which the database role has been granted. Must be a fully qualified name ("&lt;db*name&gt;"."&lt;database*role_name&gt;").
        """
        return pulumi.get(self, "database_role")

    @property
    @pulumi.getter
    def share(self) -> Optional[str]:
        """
        Lists all the accounts for the share and indicates the accounts that are using the share.
        """
        return pulumi.get(self, "share")


@pulumi.output_type
class GetGrantsGrantsOnResult(dict):
    def __init__(__self__, *,
                 account: Optional[bool] = None,
                 object_name: Optional[str] = None,
                 object_type: Optional[str] = None):
        """
        :param bool account: Object hierarchy to list privileges on. The only valid value is: ACCOUNT. Setting this attribute lists all the account-level (i.e. global) privileges that have been granted to roles.
        :param str object_name: Name of object to list privileges on.
        :param str object_type: Type of object to list privileges on.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if object_name is not None:
            pulumi.set(__self__, "object_name", object_name)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter
    def account(self) -> Optional[bool]:
        """
        Object hierarchy to list privileges on. The only valid value is: ACCOUNT. Setting this attribute lists all the account-level (i.e. global) privileges that have been granted to roles.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="objectName")
    def object_name(self) -> Optional[str]:
        """
        Name of object to list privileges on.
        """
        return pulumi.get(self, "object_name")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        """
        Type of object to list privileges on.
        """
        return pulumi.get(self, "object_type")


@pulumi.output_type
class GetGrantsGrantsToResult(dict):
    def __init__(__self__, *,
                 account_role: Optional[str] = None,
                 application: Optional[str] = None,
                 application_role: Optional[str] = None,
                 database_role: Optional[str] = None,
                 share: Optional['outputs.GetGrantsGrantsToShareResult'] = None,
                 user: Optional[str] = None):
        """
        :param str account_role: Lists all privileges and roles granted to the role.
        :param str application: Lists all the privileges and roles granted to the application.
        :param str application_role: Lists all the privileges and roles granted to the application role. Must be a fully qualified name ("&lt;app*name&gt;"."&lt;app*role_name&gt;").
        :param str database_role: Lists all privileges and roles granted to the database role. Must be a fully qualified name ("&lt;db*name&gt;"."&lt;database*role_name&gt;").
        :param 'GetGrantsGrantsToShareArgs' share: Lists all the privileges granted to the share.
        :param str user: Lists all the roles granted to the user. Note that the PUBLIC role, which is automatically available to every user, is not listed.
        """
        if account_role is not None:
            pulumi.set(__self__, "account_role", account_role)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if application_role is not None:
            pulumi.set(__self__, "application_role", application_role)
        if database_role is not None:
            pulumi.set(__self__, "database_role", database_role)
        if share is not None:
            pulumi.set(__self__, "share", share)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="accountRole")
    def account_role(self) -> Optional[str]:
        """
        Lists all privileges and roles granted to the role.
        """
        return pulumi.get(self, "account_role")

    @property
    @pulumi.getter
    def application(self) -> Optional[str]:
        """
        Lists all the privileges and roles granted to the application.
        """
        return pulumi.get(self, "application")

    @property
    @pulumi.getter(name="applicationRole")
    def application_role(self) -> Optional[str]:
        """
        Lists all the privileges and roles granted to the application role. Must be a fully qualified name ("&lt;app*name&gt;"."&lt;app*role_name&gt;").
        """
        return pulumi.get(self, "application_role")

    @property
    @pulumi.getter(name="databaseRole")
    def database_role(self) -> Optional[str]:
        """
        Lists all privileges and roles granted to the database role. Must be a fully qualified name ("&lt;db*name&gt;"."&lt;database*role_name&gt;").
        """
        return pulumi.get(self, "database_role")

    @property
    @pulumi.getter
    def share(self) -> Optional['outputs.GetGrantsGrantsToShareResult']:
        """
        Lists all the privileges granted to the share.
        """
        return pulumi.get(self, "share")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        Lists all the roles granted to the user. Note that the PUBLIC role, which is automatically available to every user, is not listed.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class GetGrantsGrantsToShareResult(dict):
    def __init__(__self__, *,
                 share_name: str):
        """
        :param str share_name: Lists all of the privileges and roles granted to the specified share.
        """
        pulumi.set(__self__, "share_name", share_name)

    @property
    @pulumi.getter(name="shareName")
    def share_name(self) -> str:
        """
        Lists all of the privileges and roles granted to the specified share.
        """
        return pulumi.get(self, "share_name")


@pulumi.output_type
class GetMaskingPoliciesInResult(dict):
    def __init__(__self__, *,
                 account: Optional[bool] = None,
                 application: Optional[str] = None,
                 application_package: Optional[str] = None,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param bool account: Returns records for the entire account.
        :param str application: Returns records for the specified application.
        :param str application_package: Returns records for the specified application package.
        :param str database: Returns records for the current database in use or for a specified database.
        :param str schema: Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if application_package is not None:
            pulumi.set(__self__, "application_package", application_package)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def account(self) -> Optional[bool]:
        """
        Returns records for the entire account.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter
    def application(self) -> Optional[str]:
        """
        Returns records for the specified application.
        """
        return pulumi.get(self, "application")

    @property
    @pulumi.getter(name="applicationPackage")
    def application_package(self) -> Optional[str]:
        """
        Returns records for the specified application package.
        """
        return pulumi.get(self, "application_package")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Returns records for the current database in use or for a specified database.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetMaskingPoliciesLimitResult(dict):
    def __init__(__self__, *,
                 rows: int,
                 from_: Optional[str] = None):
        """
        :param int rows: The maximum number of rows to return.
        :param str from_: Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        pulumi.set(__self__, "rows", rows)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)

    @property
    @pulumi.getter
    def rows(self) -> int:
        """
        The maximum number of rows to return.
        """
        return pulumi.get(self, "rows")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        return pulumi.get(self, "from_")


@pulumi.output_type
class GetMaskingPoliciesMaskingPolicyResult(dict):
    def __init__(__self__, *,
                 describe_outputs: Sequence['outputs.GetMaskingPoliciesMaskingPolicyDescribeOutputResult'],
                 show_outputs: Sequence['outputs.GetMaskingPoliciesMaskingPolicyShowOutputResult']):
        """
        :param Sequence['GetMaskingPoliciesMaskingPolicyDescribeOutputArgs'] describe_outputs: Holds the output of DESCRIBE MASKING POLICY.
        :param Sequence['GetMaskingPoliciesMaskingPolicyShowOutputArgs'] show_outputs: Holds the output of SHOW MASKING POLICIES.
        """
        pulumi.set(__self__, "describe_outputs", describe_outputs)
        pulumi.set(__self__, "show_outputs", show_outputs)

    @property
    @pulumi.getter(name="describeOutputs")
    def describe_outputs(self) -> Sequence['outputs.GetMaskingPoliciesMaskingPolicyDescribeOutputResult']:
        """
        Holds the output of DESCRIBE MASKING POLICY.
        """
        return pulumi.get(self, "describe_outputs")

    @property
    @pulumi.getter(name="showOutputs")
    def show_outputs(self) -> Sequence['outputs.GetMaskingPoliciesMaskingPolicyShowOutputResult']:
        """
        Holds the output of SHOW MASKING POLICIES.
        """
        return pulumi.get(self, "show_outputs")


@pulumi.output_type
class GetMaskingPoliciesMaskingPolicyDescribeOutputResult(dict):
    def __init__(__self__, *,
                 body: str,
                 name: str,
                 return_type: str,
                 signatures: Sequence['outputs.GetMaskingPoliciesMaskingPolicyDescribeOutputSignatureResult']):
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "return_type", return_type)
        pulumi.set(__self__, "signatures", signatures)

    @property
    @pulumi.getter
    def body(self) -> str:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="returnType")
    def return_type(self) -> str:
        return pulumi.get(self, "return_type")

    @property
    @pulumi.getter
    def signatures(self) -> Sequence['outputs.GetMaskingPoliciesMaskingPolicyDescribeOutputSignatureResult']:
        return pulumi.get(self, "signatures")


@pulumi.output_type
class GetMaskingPoliciesMaskingPolicyDescribeOutputSignatureResult(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMaskingPoliciesMaskingPolicyShowOutputResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 created_on: str,
                 database_name: str,
                 exempt_other_policies: bool,
                 kind: str,
                 name: str,
                 owner: str,
                 owner_role_type: str,
                 schema_name: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "exempt_other_policies", exempt_other_policies)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "owner_role_type", owner_role_type)
        pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="exemptOtherPolicies")
    def exempt_other_policies(self) -> bool:
        return pulumi.get(self, "exempt_other_policies")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> str:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetMaterializedViewsMaterializedViewResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 database: str,
                 name: str,
                 schema: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetNetworkPoliciesNetworkPolicyResult(dict):
    def __init__(__self__, *,
                 describe_outputs: Sequence['outputs.GetNetworkPoliciesNetworkPolicyDescribeOutputResult'],
                 show_outputs: Sequence['outputs.GetNetworkPoliciesNetworkPolicyShowOutputResult']):
        """
        :param Sequence['GetNetworkPoliciesNetworkPolicyDescribeOutputArgs'] describe_outputs: Holds the output of DESCRIBE NETWORK POLICIES.
        :param Sequence['GetNetworkPoliciesNetworkPolicyShowOutputArgs'] show_outputs: Holds the output of SHOW NETWORK POLICIES.
        """
        pulumi.set(__self__, "describe_outputs", describe_outputs)
        pulumi.set(__self__, "show_outputs", show_outputs)

    @property
    @pulumi.getter(name="describeOutputs")
    def describe_outputs(self) -> Sequence['outputs.GetNetworkPoliciesNetworkPolicyDescribeOutputResult']:
        """
        Holds the output of DESCRIBE NETWORK POLICIES.
        """
        return pulumi.get(self, "describe_outputs")

    @property
    @pulumi.getter(name="showOutputs")
    def show_outputs(self) -> Sequence['outputs.GetNetworkPoliciesNetworkPolicyShowOutputResult']:
        """
        Holds the output of SHOW NETWORK POLICIES.
        """
        return pulumi.get(self, "show_outputs")


@pulumi.output_type
class GetNetworkPoliciesNetworkPolicyDescribeOutputResult(dict):
    def __init__(__self__, *,
                 allowed_ip_list: str,
                 allowed_network_rule_list: str,
                 blocked_ip_list: str,
                 blocked_network_rule_list: str):
        pulumi.set(__self__, "allowed_ip_list", allowed_ip_list)
        pulumi.set(__self__, "allowed_network_rule_list", allowed_network_rule_list)
        pulumi.set(__self__, "blocked_ip_list", blocked_ip_list)
        pulumi.set(__self__, "blocked_network_rule_list", blocked_network_rule_list)

    @property
    @pulumi.getter(name="allowedIpList")
    def allowed_ip_list(self) -> str:
        return pulumi.get(self, "allowed_ip_list")

    @property
    @pulumi.getter(name="allowedNetworkRuleList")
    def allowed_network_rule_list(self) -> str:
        return pulumi.get(self, "allowed_network_rule_list")

    @property
    @pulumi.getter(name="blockedIpList")
    def blocked_ip_list(self) -> str:
        return pulumi.get(self, "blocked_ip_list")

    @property
    @pulumi.getter(name="blockedNetworkRuleList")
    def blocked_network_rule_list(self) -> str:
        return pulumi.get(self, "blocked_network_rule_list")


@pulumi.output_type
class GetNetworkPoliciesNetworkPolicyShowOutputResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 created_on: str,
                 entries_in_allowed_ip_list: int,
                 entries_in_allowed_network_rules: int,
                 entries_in_blocked_ip_list: int,
                 entries_in_blocked_network_rules: int,
                 name: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "entries_in_allowed_ip_list", entries_in_allowed_ip_list)
        pulumi.set(__self__, "entries_in_allowed_network_rules", entries_in_allowed_network_rules)
        pulumi.set(__self__, "entries_in_blocked_ip_list", entries_in_blocked_ip_list)
        pulumi.set(__self__, "entries_in_blocked_network_rules", entries_in_blocked_network_rules)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="entriesInAllowedIpList")
    def entries_in_allowed_ip_list(self) -> int:
        return pulumi.get(self, "entries_in_allowed_ip_list")

    @property
    @pulumi.getter(name="entriesInAllowedNetworkRules")
    def entries_in_allowed_network_rules(self) -> int:
        return pulumi.get(self, "entries_in_allowed_network_rules")

    @property
    @pulumi.getter(name="entriesInBlockedIpList")
    def entries_in_blocked_ip_list(self) -> int:
        return pulumi.get(self, "entries_in_blocked_ip_list")

    @property
    @pulumi.getter(name="entriesInBlockedNetworkRules")
    def entries_in_blocked_network_rules(self) -> int:
        return pulumi.get(self, "entries_in_blocked_network_rules")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetParametersParameterResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        """
        :param str default: The default value of the parameter
        :param str description: The description of the parameter
        :param str key: The name of the parameter
        :param str level: The level of the parameter
        :param str value: The value of the parameter
        """
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        """
        The default value of the parameter
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the parameter
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The name of the parameter
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        The level of the parameter
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the parameter
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPipesPipeResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 database: str,
                 integration: str,
                 name: str,
                 schema: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "integration", integration)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def integration(self) -> str:
        return pulumi.get(self, "integration")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetProceduresProcedureResult(dict):
    def __init__(__self__, *,
                 argument_types: Sequence[str],
                 comment: str,
                 database: str,
                 name: str,
                 return_type: str,
                 schema: str):
        pulumi.set(__self__, "argument_types", argument_types)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "return_type", return_type)
        pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter(name="argumentTypes")
    def argument_types(self) -> Sequence[str]:
        return pulumi.get(self, "argument_types")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="returnType")
    def return_type(self) -> str:
        return pulumi.get(self, "return_type")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetResourceMonitorsResourceMonitorResult(dict):
    def __init__(__self__, *,
                 show_outputs: Sequence['outputs.GetResourceMonitorsResourceMonitorShowOutputResult']):
        """
        :param Sequence['GetResourceMonitorsResourceMonitorShowOutputArgs'] show_outputs: Holds the output of SHOW RESOURCE MONITORS.
        """
        pulumi.set(__self__, "show_outputs", show_outputs)

    @property
    @pulumi.getter(name="showOutputs")
    def show_outputs(self) -> Sequence['outputs.GetResourceMonitorsResourceMonitorShowOutputResult']:
        """
        Holds the output of SHOW RESOURCE MONITORS.
        """
        return pulumi.get(self, "show_outputs")


@pulumi.output_type
class GetResourceMonitorsResourceMonitorShowOutputResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 created_on: str,
                 credit_quota: float,
                 end_time: str,
                 frequency: str,
                 level: str,
                 name: str,
                 owner: str,
                 remaining_credits: float,
                 start_time: str,
                 suspend_at: int,
                 suspend_immediate_at: int,
                 used_credits: float):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "credit_quota", credit_quota)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "remaining_credits", remaining_credits)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "suspend_at", suspend_at)
        pulumi.set(__self__, "suspend_immediate_at", suspend_immediate_at)
        pulumi.set(__self__, "used_credits", used_credits)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="creditQuota")
    def credit_quota(self) -> float:
        return pulumi.get(self, "credit_quota")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def frequency(self) -> str:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="remainingCredits")
    def remaining_credits(self) -> float:
        return pulumi.get(self, "remaining_credits")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="suspendAt")
    def suspend_at(self) -> int:
        return pulumi.get(self, "suspend_at")

    @property
    @pulumi.getter(name="suspendImmediateAt")
    def suspend_immediate_at(self) -> int:
        return pulumi.get(self, "suspend_immediate_at")

    @property
    @pulumi.getter(name="usedCredits")
    def used_credits(self) -> float:
        return pulumi.get(self, "used_credits")


@pulumi.output_type
class GetRolesRoleResult(dict):
    def __init__(__self__, *,
                 show_outputs: Sequence['outputs.GetRolesRoleShowOutputResult']):
        """
        :param Sequence['GetRolesRoleShowOutputArgs'] show_outputs: Holds the output of SHOW ROLES.
        """
        pulumi.set(__self__, "show_outputs", show_outputs)

    @property
    @pulumi.getter(name="showOutputs")
    def show_outputs(self) -> Sequence['outputs.GetRolesRoleShowOutputResult']:
        """
        Holds the output of SHOW ROLES.
        """
        return pulumi.get(self, "show_outputs")


@pulumi.output_type
class GetRolesRoleShowOutputResult(dict):
    def __init__(__self__, *,
                 assigned_to_users: int,
                 comment: str,
                 created_on: str,
                 granted_roles: int,
                 granted_to_roles: int,
                 is_current: bool,
                 is_default: bool,
                 is_inherited: bool,
                 name: str,
                 owner: str):
        pulumi.set(__self__, "assigned_to_users", assigned_to_users)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "granted_roles", granted_roles)
        pulumi.set(__self__, "granted_to_roles", granted_to_roles)
        pulumi.set(__self__, "is_current", is_current)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "is_inherited", is_inherited)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)

    @property
    @pulumi.getter(name="assignedToUsers")
    def assigned_to_users(self) -> int:
        return pulumi.get(self, "assigned_to_users")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="grantedRoles")
    def granted_roles(self) -> int:
        return pulumi.get(self, "granted_roles")

    @property
    @pulumi.getter(name="grantedToRoles")
    def granted_to_roles(self) -> int:
        return pulumi.get(self, "granted_to_roles")

    @property
    @pulumi.getter(name="isCurrent")
    def is_current(self) -> bool:
        return pulumi.get(self, "is_current")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isInherited")
    def is_inherited(self) -> bool:
        return pulumi.get(self, "is_inherited")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")


@pulumi.output_type
class GetRowAccessPoliciesInResult(dict):
    def __init__(__self__, *,
                 account: Optional[bool] = None,
                 application: Optional[str] = None,
                 application_package: Optional[str] = None,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param bool account: Returns records for the entire account.
        :param str application: Returns records for the specified application.
        :param str application_package: Returns records for the specified application package.
        :param str database: Returns records for the current database in use or for a specified database.
        :param str schema: Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if application_package is not None:
            pulumi.set(__self__, "application_package", application_package)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def account(self) -> Optional[bool]:
        """
        Returns records for the entire account.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter
    def application(self) -> Optional[str]:
        """
        Returns records for the specified application.
        """
        return pulumi.get(self, "application")

    @property
    @pulumi.getter(name="applicationPackage")
    def application_package(self) -> Optional[str]:
        """
        Returns records for the specified application package.
        """
        return pulumi.get(self, "application_package")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Returns records for the current database in use or for a specified database.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetRowAccessPoliciesLimitResult(dict):
    def __init__(__self__, *,
                 rows: int,
                 from_: Optional[str] = None):
        """
        :param int rows: The maximum number of rows to return.
        :param str from_: Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        pulumi.set(__self__, "rows", rows)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)

    @property
    @pulumi.getter
    def rows(self) -> int:
        """
        The maximum number of rows to return.
        """
        return pulumi.get(self, "rows")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        return pulumi.get(self, "from_")


@pulumi.output_type
class GetRowAccessPoliciesRowAccessPolicyResult(dict):
    def __init__(__self__, *,
                 describe_outputs: Sequence['outputs.GetRowAccessPoliciesRowAccessPolicyDescribeOutputResult'],
                 show_outputs: Sequence['outputs.GetRowAccessPoliciesRowAccessPolicyShowOutputResult']):
        """
        :param Sequence['GetRowAccessPoliciesRowAccessPolicyDescribeOutputArgs'] describe_outputs: Holds the output of DESCRIBE ROW ACCESS POLICY.
        :param Sequence['GetRowAccessPoliciesRowAccessPolicyShowOutputArgs'] show_outputs: Holds the output of SHOW ROW ACCESS POLICIES.
        """
        pulumi.set(__self__, "describe_outputs", describe_outputs)
        pulumi.set(__self__, "show_outputs", show_outputs)

    @property
    @pulumi.getter(name="describeOutputs")
    def describe_outputs(self) -> Sequence['outputs.GetRowAccessPoliciesRowAccessPolicyDescribeOutputResult']:
        """
        Holds the output of DESCRIBE ROW ACCESS POLICY.
        """
        return pulumi.get(self, "describe_outputs")

    @property
    @pulumi.getter(name="showOutputs")
    def show_outputs(self) -> Sequence['outputs.GetRowAccessPoliciesRowAccessPolicyShowOutputResult']:
        """
        Holds the output of SHOW ROW ACCESS POLICIES.
        """
        return pulumi.get(self, "show_outputs")


@pulumi.output_type
class GetRowAccessPoliciesRowAccessPolicyDescribeOutputResult(dict):
    def __init__(__self__, *,
                 body: str,
                 name: str,
                 return_type: str,
                 signatures: Sequence['outputs.GetRowAccessPoliciesRowAccessPolicyDescribeOutputSignatureResult']):
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "return_type", return_type)
        pulumi.set(__self__, "signatures", signatures)

    @property
    @pulumi.getter
    def body(self) -> str:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="returnType")
    def return_type(self) -> str:
        return pulumi.get(self, "return_type")

    @property
    @pulumi.getter
    def signatures(self) -> Sequence['outputs.GetRowAccessPoliciesRowAccessPolicyDescribeOutputSignatureResult']:
        return pulumi.get(self, "signatures")


@pulumi.output_type
class GetRowAccessPoliciesRowAccessPolicyDescribeOutputSignatureResult(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRowAccessPoliciesRowAccessPolicyShowOutputResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 created_on: str,
                 database_name: str,
                 kind: str,
                 name: str,
                 options: str,
                 owner: str,
                 owner_role_type: str,
                 schema_name: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "options", options)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "owner_role_type", owner_role_type)
        pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def options(self) -> str:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> str:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetSchemasInResult(dict):
    def __init__(__self__, *,
                 account: Optional[bool] = None,
                 application: Optional[str] = None,
                 application_package: Optional[str] = None,
                 database: Optional[str] = None):
        """
        :param bool account: Returns records for the entire account.
        :param str application: Returns records for the specified application.
        :param str application_package: Returns records for the specified application package.
        :param str database: Returns records for the current database in use or for a specified database (db_name).
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if application_package is not None:
            pulumi.set(__self__, "application_package", application_package)
        if database is not None:
            pulumi.set(__self__, "database", database)

    @property
    @pulumi.getter
    def account(self) -> Optional[bool]:
        """
        Returns records for the entire account.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter
    def application(self) -> Optional[str]:
        """
        Returns records for the specified application.
        """
        return pulumi.get(self, "application")

    @property
    @pulumi.getter(name="applicationPackage")
    def application_package(self) -> Optional[str]:
        """
        Returns records for the specified application package.
        """
        return pulumi.get(self, "application_package")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Returns records for the current database in use or for a specified database (db_name).
        """
        return pulumi.get(self, "database")


@pulumi.output_type
class GetSchemasLimitResult(dict):
    def __init__(__self__, *,
                 rows: int,
                 from_: Optional[str] = None):
        """
        :param int rows: The maximum number of rows to return.
        :param str from_: Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        pulumi.set(__self__, "rows", rows)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)

    @property
    @pulumi.getter
    def rows(self) -> int:
        """
        The maximum number of rows to return.
        """
        return pulumi.get(self, "rows")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        return pulumi.get(self, "from_")


@pulumi.output_type
class GetSchemasSchemaResult(dict):
    def __init__(__self__, *,
                 describe_outputs: Sequence['outputs.GetSchemasSchemaDescribeOutputResult'],
                 parameters: Sequence['outputs.GetSchemasSchemaParameterResult'],
                 show_outputs: Sequence['outputs.GetSchemasSchemaShowOutputResult']):
        """
        :param Sequence['GetSchemasSchemaDescribeOutputArgs'] describe_outputs: Holds the output of DESCRIBE SCHEMA.
        :param Sequence['GetSchemasSchemaParameterArgs'] parameters: Holds the output of SHOW PARAMETERS FOR SCHEMA.
        :param Sequence['GetSchemasSchemaShowOutputArgs'] show_outputs: Holds the output of SHOW SCHEMAS.
        """
        pulumi.set(__self__, "describe_outputs", describe_outputs)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "show_outputs", show_outputs)

    @property
    @pulumi.getter(name="describeOutputs")
    def describe_outputs(self) -> Sequence['outputs.GetSchemasSchemaDescribeOutputResult']:
        """
        Holds the output of DESCRIBE SCHEMA.
        """
        return pulumi.get(self, "describe_outputs")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetSchemasSchemaParameterResult']:
        """
        Holds the output of SHOW PARAMETERS FOR SCHEMA.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="showOutputs")
    def show_outputs(self) -> Sequence['outputs.GetSchemasSchemaShowOutputResult']:
        """
        Holds the output of SHOW SCHEMAS.
        """
        return pulumi.get(self, "show_outputs")


@pulumi.output_type
class GetSchemasSchemaDescribeOutputResult(dict):
    def __init__(__self__, *,
                 created_on: str,
                 kind: str,
                 name: str):
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSchemasSchemaParameterResult(dict):
    def __init__(__self__, *,
                 catalogs: Sequence['outputs.GetSchemasSchemaParameterCatalogResult'],
                 data_retention_time_in_days: Sequence['outputs.GetSchemasSchemaParameterDataRetentionTimeInDayResult'],
                 default_ddl_collations: Sequence['outputs.GetSchemasSchemaParameterDefaultDdlCollationResult'],
                 enable_console_outputs: Sequence['outputs.GetSchemasSchemaParameterEnableConsoleOutputResult'],
                 external_volumes: Sequence['outputs.GetSchemasSchemaParameterExternalVolumeResult'],
                 log_levels: Sequence['outputs.GetSchemasSchemaParameterLogLevelResult'],
                 max_data_extension_time_in_days: Sequence['outputs.GetSchemasSchemaParameterMaxDataExtensionTimeInDayResult'],
                 pipe_execution_pauseds: Sequence['outputs.GetSchemasSchemaParameterPipeExecutionPausedResult'],
                 quoted_identifiers_ignore_cases: Sequence['outputs.GetSchemasSchemaParameterQuotedIdentifiersIgnoreCaseResult'],
                 replace_invalid_characters: Sequence['outputs.GetSchemasSchemaParameterReplaceInvalidCharacterResult'],
                 storage_serialization_policies: Sequence['outputs.GetSchemasSchemaParameterStorageSerializationPolicyResult'],
                 suspend_task_after_num_failures: Sequence['outputs.GetSchemasSchemaParameterSuspendTaskAfterNumFailureResult'],
                 task_auto_retry_attempts: Sequence['outputs.GetSchemasSchemaParameterTaskAutoRetryAttemptResult'],
                 trace_levels: Sequence['outputs.GetSchemasSchemaParameterTraceLevelResult'],
                 user_task_managed_initial_warehouse_sizes: Sequence['outputs.GetSchemasSchemaParameterUserTaskManagedInitialWarehouseSizeResult'],
                 user_task_minimum_trigger_interval_in_seconds: Sequence['outputs.GetSchemasSchemaParameterUserTaskMinimumTriggerIntervalInSecondResult'],
                 user_task_timeout_ms: Sequence['outputs.GetSchemasSchemaParameterUserTaskTimeoutMResult']):
        pulumi.set(__self__, "catalogs", catalogs)
        pulumi.set(__self__, "data_retention_time_in_days", data_retention_time_in_days)
        pulumi.set(__self__, "default_ddl_collations", default_ddl_collations)
        pulumi.set(__self__, "enable_console_outputs", enable_console_outputs)
        pulumi.set(__self__, "external_volumes", external_volumes)
        pulumi.set(__self__, "log_levels", log_levels)
        pulumi.set(__self__, "max_data_extension_time_in_days", max_data_extension_time_in_days)
        pulumi.set(__self__, "pipe_execution_pauseds", pipe_execution_pauseds)
        pulumi.set(__self__, "quoted_identifiers_ignore_cases", quoted_identifiers_ignore_cases)
        pulumi.set(__self__, "replace_invalid_characters", replace_invalid_characters)
        pulumi.set(__self__, "storage_serialization_policies", storage_serialization_policies)
        pulumi.set(__self__, "suspend_task_after_num_failures", suspend_task_after_num_failures)
        pulumi.set(__self__, "task_auto_retry_attempts", task_auto_retry_attempts)
        pulumi.set(__self__, "trace_levels", trace_levels)
        pulumi.set(__self__, "user_task_managed_initial_warehouse_sizes", user_task_managed_initial_warehouse_sizes)
        pulumi.set(__self__, "user_task_minimum_trigger_interval_in_seconds", user_task_minimum_trigger_interval_in_seconds)
        pulumi.set(__self__, "user_task_timeout_ms", user_task_timeout_ms)

    @property
    @pulumi.getter
    def catalogs(self) -> Sequence['outputs.GetSchemasSchemaParameterCatalogResult']:
        return pulumi.get(self, "catalogs")

    @property
    @pulumi.getter(name="dataRetentionTimeInDays")
    def data_retention_time_in_days(self) -> Sequence['outputs.GetSchemasSchemaParameterDataRetentionTimeInDayResult']:
        return pulumi.get(self, "data_retention_time_in_days")

    @property
    @pulumi.getter(name="defaultDdlCollations")
    def default_ddl_collations(self) -> Sequence['outputs.GetSchemasSchemaParameterDefaultDdlCollationResult']:
        return pulumi.get(self, "default_ddl_collations")

    @property
    @pulumi.getter(name="enableConsoleOutputs")
    def enable_console_outputs(self) -> Sequence['outputs.GetSchemasSchemaParameterEnableConsoleOutputResult']:
        return pulumi.get(self, "enable_console_outputs")

    @property
    @pulumi.getter(name="externalVolumes")
    def external_volumes(self) -> Sequence['outputs.GetSchemasSchemaParameterExternalVolumeResult']:
        return pulumi.get(self, "external_volumes")

    @property
    @pulumi.getter(name="logLevels")
    def log_levels(self) -> Sequence['outputs.GetSchemasSchemaParameterLogLevelResult']:
        return pulumi.get(self, "log_levels")

    @property
    @pulumi.getter(name="maxDataExtensionTimeInDays")
    def max_data_extension_time_in_days(self) -> Sequence['outputs.GetSchemasSchemaParameterMaxDataExtensionTimeInDayResult']:
        return pulumi.get(self, "max_data_extension_time_in_days")

    @property
    @pulumi.getter(name="pipeExecutionPauseds")
    def pipe_execution_pauseds(self) -> Sequence['outputs.GetSchemasSchemaParameterPipeExecutionPausedResult']:
        return pulumi.get(self, "pipe_execution_pauseds")

    @property
    @pulumi.getter(name="quotedIdentifiersIgnoreCases")
    def quoted_identifiers_ignore_cases(self) -> Sequence['outputs.GetSchemasSchemaParameterQuotedIdentifiersIgnoreCaseResult']:
        return pulumi.get(self, "quoted_identifiers_ignore_cases")

    @property
    @pulumi.getter(name="replaceInvalidCharacters")
    def replace_invalid_characters(self) -> Sequence['outputs.GetSchemasSchemaParameterReplaceInvalidCharacterResult']:
        return pulumi.get(self, "replace_invalid_characters")

    @property
    @pulumi.getter(name="storageSerializationPolicies")
    def storage_serialization_policies(self) -> Sequence['outputs.GetSchemasSchemaParameterStorageSerializationPolicyResult']:
        return pulumi.get(self, "storage_serialization_policies")

    @property
    @pulumi.getter(name="suspendTaskAfterNumFailures")
    def suspend_task_after_num_failures(self) -> Sequence['outputs.GetSchemasSchemaParameterSuspendTaskAfterNumFailureResult']:
        return pulumi.get(self, "suspend_task_after_num_failures")

    @property
    @pulumi.getter(name="taskAutoRetryAttempts")
    def task_auto_retry_attempts(self) -> Sequence['outputs.GetSchemasSchemaParameterTaskAutoRetryAttemptResult']:
        return pulumi.get(self, "task_auto_retry_attempts")

    @property
    @pulumi.getter(name="traceLevels")
    def trace_levels(self) -> Sequence['outputs.GetSchemasSchemaParameterTraceLevelResult']:
        return pulumi.get(self, "trace_levels")

    @property
    @pulumi.getter(name="userTaskManagedInitialWarehouseSizes")
    def user_task_managed_initial_warehouse_sizes(self) -> Sequence['outputs.GetSchemasSchemaParameterUserTaskManagedInitialWarehouseSizeResult']:
        return pulumi.get(self, "user_task_managed_initial_warehouse_sizes")

    @property
    @pulumi.getter(name="userTaskMinimumTriggerIntervalInSeconds")
    def user_task_minimum_trigger_interval_in_seconds(self) -> Sequence['outputs.GetSchemasSchemaParameterUserTaskMinimumTriggerIntervalInSecondResult']:
        return pulumi.get(self, "user_task_minimum_trigger_interval_in_seconds")

    @property
    @pulumi.getter(name="userTaskTimeoutMs")
    def user_task_timeout_ms(self) -> Sequence['outputs.GetSchemasSchemaParameterUserTaskTimeoutMResult']:
        return pulumi.get(self, "user_task_timeout_ms")


@pulumi.output_type
class GetSchemasSchemaParameterCatalogResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSchemasSchemaParameterDataRetentionTimeInDayResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSchemasSchemaParameterDefaultDdlCollationResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSchemasSchemaParameterEnableConsoleOutputResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSchemasSchemaParameterExternalVolumeResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSchemasSchemaParameterLogLevelResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSchemasSchemaParameterMaxDataExtensionTimeInDayResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSchemasSchemaParameterPipeExecutionPausedResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSchemasSchemaParameterQuotedIdentifiersIgnoreCaseResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSchemasSchemaParameterReplaceInvalidCharacterResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSchemasSchemaParameterStorageSerializationPolicyResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSchemasSchemaParameterSuspendTaskAfterNumFailureResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSchemasSchemaParameterTaskAutoRetryAttemptResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSchemasSchemaParameterTraceLevelResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSchemasSchemaParameterUserTaskManagedInitialWarehouseSizeResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSchemasSchemaParameterUserTaskMinimumTriggerIntervalInSecondResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSchemasSchemaParameterUserTaskTimeoutMResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSchemasSchemaShowOutputResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 created_on: str,
                 database_name: str,
                 dropped_on: str,
                 is_current: bool,
                 is_default: bool,
                 name: str,
                 options: str,
                 owner: str,
                 owner_role_type: str,
                 retention_time: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "dropped_on", dropped_on)
        pulumi.set(__self__, "is_current", is_current)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "options", options)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "owner_role_type", owner_role_type)
        pulumi.set(__self__, "retention_time", retention_time)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="droppedOn")
    def dropped_on(self) -> str:
        return pulumi.get(self, "dropped_on")

    @property
    @pulumi.getter(name="isCurrent")
    def is_current(self) -> bool:
        return pulumi.get(self, "is_current")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def options(self) -> str:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> str:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="retentionTime")
    def retention_time(self) -> str:
        return pulumi.get(self, "retention_time")


@pulumi.output_type
class GetSecretsInResult(dict):
    def __init__(__self__, *,
                 account: Optional[bool] = None,
                 application: Optional[str] = None,
                 application_package: Optional[str] = None,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param bool account: Returns records for the entire account.
        :param str application: Returns records for the specified application.
        :param str application_package: Returns records for the specified application package.
        :param str database: Returns records for the current database in use or for a specified database.
        :param str schema: Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if application_package is not None:
            pulumi.set(__self__, "application_package", application_package)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def account(self) -> Optional[bool]:
        """
        Returns records for the entire account.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter
    def application(self) -> Optional[str]:
        """
        Returns records for the specified application.
        """
        return pulumi.get(self, "application")

    @property
    @pulumi.getter(name="applicationPackage")
    def application_package(self) -> Optional[str]:
        """
        Returns records for the specified application package.
        """
        return pulumi.get(self, "application_package")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Returns records for the current database in use or for a specified database.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetSecretsSecretResult(dict):
    def __init__(__self__, *,
                 describe_outputs: Sequence['outputs.GetSecretsSecretDescribeOutputResult'],
                 show_outputs: Sequence['outputs.GetSecretsSecretShowOutputResult']):
        """
        :param Sequence['GetSecretsSecretDescribeOutputArgs'] describe_outputs: Holds the output of DESCRIBE SECRET.
        :param Sequence['GetSecretsSecretShowOutputArgs'] show_outputs: Holds the output of SHOW SECRETS.
        """
        pulumi.set(__self__, "describe_outputs", describe_outputs)
        pulumi.set(__self__, "show_outputs", show_outputs)

    @property
    @pulumi.getter(name="describeOutputs")
    def describe_outputs(self) -> Sequence['outputs.GetSecretsSecretDescribeOutputResult']:
        """
        Holds the output of DESCRIBE SECRET.
        """
        return pulumi.get(self, "describe_outputs")

    @property
    @pulumi.getter(name="showOutputs")
    def show_outputs(self) -> Sequence['outputs.GetSecretsSecretShowOutputResult']:
        """
        Holds the output of SHOW SECRETS.
        """
        return pulumi.get(self, "show_outputs")


@pulumi.output_type
class GetSecretsSecretDescribeOutputResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 created_on: str,
                 database_name: str,
                 integration_name: str,
                 name: str,
                 oauth_access_token_expiry_time: str,
                 oauth_refresh_token_expiry_time: str,
                 oauth_scopes: Sequence[str],
                 owner: str,
                 schema_name: str,
                 secret_type: str,
                 username: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "integration_name", integration_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "oauth_access_token_expiry_time", oauth_access_token_expiry_time)
        pulumi.set(__self__, "oauth_refresh_token_expiry_time", oauth_refresh_token_expiry_time)
        pulumi.set(__self__, "oauth_scopes", oauth_scopes)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "secret_type", secret_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="integrationName")
    def integration_name(self) -> str:
        return pulumi.get(self, "integration_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oauthAccessTokenExpiryTime")
    def oauth_access_token_expiry_time(self) -> str:
        return pulumi.get(self, "oauth_access_token_expiry_time")

    @property
    @pulumi.getter(name="oauthRefreshTokenExpiryTime")
    def oauth_refresh_token_expiry_time(self) -> str:
        return pulumi.get(self, "oauth_refresh_token_expiry_time")

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Sequence[str]:
        return pulumi.get(self, "oauth_scopes")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> str:
        return pulumi.get(self, "secret_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSecretsSecretShowOutputResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 created_on: str,
                 database_name: str,
                 name: str,
                 oauth_scopes: Sequence[str],
                 owner: str,
                 owner_role_type: str,
                 schema_name: str,
                 secret_type: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "oauth_scopes", oauth_scopes)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "owner_role_type", owner_role_type)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "secret_type", secret_type)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Sequence[str]:
        return pulumi.get(self, "oauth_scopes")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> str:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> str:
        return pulumi.get(self, "secret_type")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationResult(dict):
    def __init__(__self__, *,
                 describe_outputs: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputResult'],
                 show_outputs: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationShowOutputResult']):
        """
        :param Sequence['GetSecurityIntegrationsSecurityIntegrationDescribeOutputArgs'] describe_outputs: Holds the output of DESCRIBE SECURITY INTEGRATIONS.
        :param Sequence['GetSecurityIntegrationsSecurityIntegrationShowOutputArgs'] show_outputs: Holds the output of SHOW SECURITY INTEGRATIONS.
        """
        pulumi.set(__self__, "describe_outputs", describe_outputs)
        pulumi.set(__self__, "show_outputs", show_outputs)

    @property
    @pulumi.getter(name="describeOutputs")
    def describe_outputs(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputResult']:
        """
        Holds the output of DESCRIBE SECURITY INTEGRATIONS.
        """
        return pulumi.get(self, "describe_outputs")

    @property
    @pulumi.getter(name="showOutputs")
    def show_outputs(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationShowOutputResult']:
        """
        Holds the output of SHOW SECURITY INTEGRATIONS.
        """
        return pulumi.get(self, "show_outputs")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputResult(dict):
    def __init__(__self__, *,
                 allowed_email_patterns: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedEmailPatternResult'],
                 allowed_user_domains: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedUserDomainResult'],
                 auth_types: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputAuthTypeResult'],
                 blocked_roles_lists: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputBlockedRolesListResult'],
                 comments: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputCommentResult'],
                 enableds: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputEnabledResult'],
                 external_oauth_allowed_roles_lists: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAllowedRolesListResult'],
                 external_oauth_any_role_modes: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAnyRoleModeResult'],
                 external_oauth_audience_lists: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAudienceListResult'],
                 external_oauth_blocked_roles_lists: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthBlockedRolesListResult'],
                 external_oauth_issuers: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthIssuerResult'],
                 external_oauth_jws_keys_urls: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthJwsKeysUrlResult'],
                 external_oauth_rsa_public_key2s: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey2Result'],
                 external_oauth_rsa_public_keys: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKeyResult'],
                 external_oauth_scope_delimiters: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthScopeDelimiterResult'],
                 external_oauth_snowflake_user_mapping_attributes: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttributeResult'],
                 external_oauth_token_user_mapping_claims: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthTokenUserMappingClaimResult'],
                 network_policies: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputNetworkPolicyResult'],
                 oauth_access_token_validities: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAccessTokenValidityResult'],
                 oauth_allow_non_tls_redirect_uris: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowNonTlsRedirectUriResult'],
                 oauth_allowed_authorization_endpoints: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedAuthorizationEndpointResult'],
                 oauth_allowed_scopes: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedScopeResult'],
                 oauth_allowed_token_endpoints: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedTokenEndpointResult'],
                 oauth_authorization_endpoints: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAuthorizationEndpointResult'],
                 oauth_client_auth_methods: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientAuthMethodResult'],
                 oauth_client_ids: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientIdResult'],
                 oauth_client_rsa_public_key2_fps: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKey2FpResult'],
                 oauth_client_rsa_public_key_fps: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKeyFpResult'],
                 oauth_client_types: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientTypeResult'],
                 oauth_enforce_pkces: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthEnforcePkceResult'],
                 oauth_grants: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthGrantResult'],
                 oauth_issue_refresh_tokens: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthIssueRefreshTokenResult'],
                 oauth_redirect_uris: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRedirectUriResult'],
                 oauth_refresh_token_validities: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRefreshTokenValidityResult'],
                 oauth_token_endpoints: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthTokenEndpointResult'],
                 oauth_use_secondary_roles: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthUseSecondaryRoleResult'],
                 parent_integrations: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputParentIntegrationResult'],
                 pre_authorized_roles_lists: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputPreAuthorizedRolesListResult'],
                 run_as_roles: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputRunAsRoleResult'],
                 saml2_digest_methods_useds: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2DigestMethodsUsedResult'],
                 saml2_enable_sp_initiateds: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2EnableSpInitiatedResult'],
                 saml2_force_authns: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2ForceAuthnResult'],
                 saml2_issuers: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2IssuerResult'],
                 saml2_post_logout_redirect_urls: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2PostLogoutRedirectUrlResult'],
                 saml2_providers: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2ProviderResult'],
                 saml2_requested_nameid_formats: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2RequestedNameidFormatResult'],
                 saml2_sign_requests: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignRequestResult'],
                 saml2_signature_methods_useds: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignatureMethodsUsedResult'],
                 saml2_snowflake_acs_urls: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeAcsUrlResult'],
                 saml2_snowflake_issuer_urls: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeIssuerUrlResult'],
                 saml2_snowflake_metadatas: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeMetadataResult'],
                 saml2_snowflake_x509_certs: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeX509CertResult'],
                 saml2_sp_initiated_login_page_labels: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SpInitiatedLoginPageLabelResult'],
                 saml2_sso_urls: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SsoUrlResult'],
                 saml2_x509_certs: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2X509CertResult'],
                 sync_passwords: Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSyncPasswordResult']):
        pulumi.set(__self__, "allowed_email_patterns", allowed_email_patterns)
        pulumi.set(__self__, "allowed_user_domains", allowed_user_domains)
        pulumi.set(__self__, "auth_types", auth_types)
        pulumi.set(__self__, "blocked_roles_lists", blocked_roles_lists)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "enableds", enableds)
        pulumi.set(__self__, "external_oauth_allowed_roles_lists", external_oauth_allowed_roles_lists)
        pulumi.set(__self__, "external_oauth_any_role_modes", external_oauth_any_role_modes)
        pulumi.set(__self__, "external_oauth_audience_lists", external_oauth_audience_lists)
        pulumi.set(__self__, "external_oauth_blocked_roles_lists", external_oauth_blocked_roles_lists)
        pulumi.set(__self__, "external_oauth_issuers", external_oauth_issuers)
        pulumi.set(__self__, "external_oauth_jws_keys_urls", external_oauth_jws_keys_urls)
        pulumi.set(__self__, "external_oauth_rsa_public_key2s", external_oauth_rsa_public_key2s)
        pulumi.set(__self__, "external_oauth_rsa_public_keys", external_oauth_rsa_public_keys)
        pulumi.set(__self__, "external_oauth_scope_delimiters", external_oauth_scope_delimiters)
        pulumi.set(__self__, "external_oauth_snowflake_user_mapping_attributes", external_oauth_snowflake_user_mapping_attributes)
        pulumi.set(__self__, "external_oauth_token_user_mapping_claims", external_oauth_token_user_mapping_claims)
        pulumi.set(__self__, "network_policies", network_policies)
        pulumi.set(__self__, "oauth_access_token_validities", oauth_access_token_validities)
        pulumi.set(__self__, "oauth_allow_non_tls_redirect_uris", oauth_allow_non_tls_redirect_uris)
        pulumi.set(__self__, "oauth_allowed_authorization_endpoints", oauth_allowed_authorization_endpoints)
        pulumi.set(__self__, "oauth_allowed_scopes", oauth_allowed_scopes)
        pulumi.set(__self__, "oauth_allowed_token_endpoints", oauth_allowed_token_endpoints)
        pulumi.set(__self__, "oauth_authorization_endpoints", oauth_authorization_endpoints)
        pulumi.set(__self__, "oauth_client_auth_methods", oauth_client_auth_methods)
        pulumi.set(__self__, "oauth_client_ids", oauth_client_ids)
        pulumi.set(__self__, "oauth_client_rsa_public_key2_fps", oauth_client_rsa_public_key2_fps)
        pulumi.set(__self__, "oauth_client_rsa_public_key_fps", oauth_client_rsa_public_key_fps)
        pulumi.set(__self__, "oauth_client_types", oauth_client_types)
        pulumi.set(__self__, "oauth_enforce_pkces", oauth_enforce_pkces)
        pulumi.set(__self__, "oauth_grants", oauth_grants)
        pulumi.set(__self__, "oauth_issue_refresh_tokens", oauth_issue_refresh_tokens)
        pulumi.set(__self__, "oauth_redirect_uris", oauth_redirect_uris)
        pulumi.set(__self__, "oauth_refresh_token_validities", oauth_refresh_token_validities)
        pulumi.set(__self__, "oauth_token_endpoints", oauth_token_endpoints)
        pulumi.set(__self__, "oauth_use_secondary_roles", oauth_use_secondary_roles)
        pulumi.set(__self__, "parent_integrations", parent_integrations)
        pulumi.set(__self__, "pre_authorized_roles_lists", pre_authorized_roles_lists)
        pulumi.set(__self__, "run_as_roles", run_as_roles)
        pulumi.set(__self__, "saml2_digest_methods_useds", saml2_digest_methods_useds)
        pulumi.set(__self__, "saml2_enable_sp_initiateds", saml2_enable_sp_initiateds)
        pulumi.set(__self__, "saml2_force_authns", saml2_force_authns)
        pulumi.set(__self__, "saml2_issuers", saml2_issuers)
        pulumi.set(__self__, "saml2_post_logout_redirect_urls", saml2_post_logout_redirect_urls)
        pulumi.set(__self__, "saml2_providers", saml2_providers)
        pulumi.set(__self__, "saml2_requested_nameid_formats", saml2_requested_nameid_formats)
        pulumi.set(__self__, "saml2_sign_requests", saml2_sign_requests)
        pulumi.set(__self__, "saml2_signature_methods_useds", saml2_signature_methods_useds)
        pulumi.set(__self__, "saml2_snowflake_acs_urls", saml2_snowflake_acs_urls)
        pulumi.set(__self__, "saml2_snowflake_issuer_urls", saml2_snowflake_issuer_urls)
        pulumi.set(__self__, "saml2_snowflake_metadatas", saml2_snowflake_metadatas)
        pulumi.set(__self__, "saml2_snowflake_x509_certs", saml2_snowflake_x509_certs)
        pulumi.set(__self__, "saml2_sp_initiated_login_page_labels", saml2_sp_initiated_login_page_labels)
        pulumi.set(__self__, "saml2_sso_urls", saml2_sso_urls)
        pulumi.set(__self__, "saml2_x509_certs", saml2_x509_certs)
        pulumi.set(__self__, "sync_passwords", sync_passwords)

    @property
    @pulumi.getter(name="allowedEmailPatterns")
    def allowed_email_patterns(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedEmailPatternResult']:
        return pulumi.get(self, "allowed_email_patterns")

    @property
    @pulumi.getter(name="allowedUserDomains")
    def allowed_user_domains(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedUserDomainResult']:
        return pulumi.get(self, "allowed_user_domains")

    @property
    @pulumi.getter(name="authTypes")
    def auth_types(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputAuthTypeResult']:
        return pulumi.get(self, "auth_types")

    @property
    @pulumi.getter(name="blockedRolesLists")
    def blocked_roles_lists(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputBlockedRolesListResult']:
        return pulumi.get(self, "blocked_roles_lists")

    @property
    @pulumi.getter
    def comments(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputCommentResult']:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def enableds(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputEnabledResult']:
        return pulumi.get(self, "enableds")

    @property
    @pulumi.getter(name="externalOauthAllowedRolesLists")
    def external_oauth_allowed_roles_lists(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAllowedRolesListResult']:
        return pulumi.get(self, "external_oauth_allowed_roles_lists")

    @property
    @pulumi.getter(name="externalOauthAnyRoleModes")
    def external_oauth_any_role_modes(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAnyRoleModeResult']:
        return pulumi.get(self, "external_oauth_any_role_modes")

    @property
    @pulumi.getter(name="externalOauthAudienceLists")
    def external_oauth_audience_lists(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAudienceListResult']:
        return pulumi.get(self, "external_oauth_audience_lists")

    @property
    @pulumi.getter(name="externalOauthBlockedRolesLists")
    def external_oauth_blocked_roles_lists(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthBlockedRolesListResult']:
        return pulumi.get(self, "external_oauth_blocked_roles_lists")

    @property
    @pulumi.getter(name="externalOauthIssuers")
    def external_oauth_issuers(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthIssuerResult']:
        return pulumi.get(self, "external_oauth_issuers")

    @property
    @pulumi.getter(name="externalOauthJwsKeysUrls")
    def external_oauth_jws_keys_urls(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthJwsKeysUrlResult']:
        return pulumi.get(self, "external_oauth_jws_keys_urls")

    @property
    @pulumi.getter(name="externalOauthRsaPublicKey2s")
    def external_oauth_rsa_public_key2s(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey2Result']:
        return pulumi.get(self, "external_oauth_rsa_public_key2s")

    @property
    @pulumi.getter(name="externalOauthRsaPublicKeys")
    def external_oauth_rsa_public_keys(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKeyResult']:
        return pulumi.get(self, "external_oauth_rsa_public_keys")

    @property
    @pulumi.getter(name="externalOauthScopeDelimiters")
    def external_oauth_scope_delimiters(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthScopeDelimiterResult']:
        return pulumi.get(self, "external_oauth_scope_delimiters")

    @property
    @pulumi.getter(name="externalOauthSnowflakeUserMappingAttributes")
    def external_oauth_snowflake_user_mapping_attributes(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttributeResult']:
        return pulumi.get(self, "external_oauth_snowflake_user_mapping_attributes")

    @property
    @pulumi.getter(name="externalOauthTokenUserMappingClaims")
    def external_oauth_token_user_mapping_claims(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthTokenUserMappingClaimResult']:
        return pulumi.get(self, "external_oauth_token_user_mapping_claims")

    @property
    @pulumi.getter(name="networkPolicies")
    def network_policies(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputNetworkPolicyResult']:
        return pulumi.get(self, "network_policies")

    @property
    @pulumi.getter(name="oauthAccessTokenValidities")
    def oauth_access_token_validities(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAccessTokenValidityResult']:
        return pulumi.get(self, "oauth_access_token_validities")

    @property
    @pulumi.getter(name="oauthAllowNonTlsRedirectUris")
    def oauth_allow_non_tls_redirect_uris(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowNonTlsRedirectUriResult']:
        return pulumi.get(self, "oauth_allow_non_tls_redirect_uris")

    @property
    @pulumi.getter(name="oauthAllowedAuthorizationEndpoints")
    def oauth_allowed_authorization_endpoints(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedAuthorizationEndpointResult']:
        return pulumi.get(self, "oauth_allowed_authorization_endpoints")

    @property
    @pulumi.getter(name="oauthAllowedScopes")
    def oauth_allowed_scopes(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedScopeResult']:
        return pulumi.get(self, "oauth_allowed_scopes")

    @property
    @pulumi.getter(name="oauthAllowedTokenEndpoints")
    def oauth_allowed_token_endpoints(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedTokenEndpointResult']:
        return pulumi.get(self, "oauth_allowed_token_endpoints")

    @property
    @pulumi.getter(name="oauthAuthorizationEndpoints")
    def oauth_authorization_endpoints(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAuthorizationEndpointResult']:
        return pulumi.get(self, "oauth_authorization_endpoints")

    @property
    @pulumi.getter(name="oauthClientAuthMethods")
    def oauth_client_auth_methods(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientAuthMethodResult']:
        return pulumi.get(self, "oauth_client_auth_methods")

    @property
    @pulumi.getter(name="oauthClientIds")
    def oauth_client_ids(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientIdResult']:
        return pulumi.get(self, "oauth_client_ids")

    @property
    @pulumi.getter(name="oauthClientRsaPublicKey2Fps")
    def oauth_client_rsa_public_key2_fps(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKey2FpResult']:
        return pulumi.get(self, "oauth_client_rsa_public_key2_fps")

    @property
    @pulumi.getter(name="oauthClientRsaPublicKeyFps")
    def oauth_client_rsa_public_key_fps(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKeyFpResult']:
        return pulumi.get(self, "oauth_client_rsa_public_key_fps")

    @property
    @pulumi.getter(name="oauthClientTypes")
    def oauth_client_types(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientTypeResult']:
        return pulumi.get(self, "oauth_client_types")

    @property
    @pulumi.getter(name="oauthEnforcePkces")
    def oauth_enforce_pkces(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthEnforcePkceResult']:
        return pulumi.get(self, "oauth_enforce_pkces")

    @property
    @pulumi.getter(name="oauthGrants")
    def oauth_grants(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthGrantResult']:
        return pulumi.get(self, "oauth_grants")

    @property
    @pulumi.getter(name="oauthIssueRefreshTokens")
    def oauth_issue_refresh_tokens(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthIssueRefreshTokenResult']:
        return pulumi.get(self, "oauth_issue_refresh_tokens")

    @property
    @pulumi.getter(name="oauthRedirectUris")
    def oauth_redirect_uris(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRedirectUriResult']:
        return pulumi.get(self, "oauth_redirect_uris")

    @property
    @pulumi.getter(name="oauthRefreshTokenValidities")
    def oauth_refresh_token_validities(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRefreshTokenValidityResult']:
        return pulumi.get(self, "oauth_refresh_token_validities")

    @property
    @pulumi.getter(name="oauthTokenEndpoints")
    def oauth_token_endpoints(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthTokenEndpointResult']:
        return pulumi.get(self, "oauth_token_endpoints")

    @property
    @pulumi.getter(name="oauthUseSecondaryRoles")
    def oauth_use_secondary_roles(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthUseSecondaryRoleResult']:
        return pulumi.get(self, "oauth_use_secondary_roles")

    @property
    @pulumi.getter(name="parentIntegrations")
    def parent_integrations(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputParentIntegrationResult']:
        return pulumi.get(self, "parent_integrations")

    @property
    @pulumi.getter(name="preAuthorizedRolesLists")
    def pre_authorized_roles_lists(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputPreAuthorizedRolesListResult']:
        return pulumi.get(self, "pre_authorized_roles_lists")

    @property
    @pulumi.getter(name="runAsRoles")
    def run_as_roles(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputRunAsRoleResult']:
        return pulumi.get(self, "run_as_roles")

    @property
    @pulumi.getter(name="saml2DigestMethodsUseds")
    def saml2_digest_methods_useds(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2DigestMethodsUsedResult']:
        return pulumi.get(self, "saml2_digest_methods_useds")

    @property
    @pulumi.getter(name="saml2EnableSpInitiateds")
    def saml2_enable_sp_initiateds(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2EnableSpInitiatedResult']:
        return pulumi.get(self, "saml2_enable_sp_initiateds")

    @property
    @pulumi.getter(name="saml2ForceAuthns")
    def saml2_force_authns(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2ForceAuthnResult']:
        return pulumi.get(self, "saml2_force_authns")

    @property
    @pulumi.getter(name="saml2Issuers")
    def saml2_issuers(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2IssuerResult']:
        return pulumi.get(self, "saml2_issuers")

    @property
    @pulumi.getter(name="saml2PostLogoutRedirectUrls")
    def saml2_post_logout_redirect_urls(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2PostLogoutRedirectUrlResult']:
        return pulumi.get(self, "saml2_post_logout_redirect_urls")

    @property
    @pulumi.getter(name="saml2Providers")
    def saml2_providers(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2ProviderResult']:
        return pulumi.get(self, "saml2_providers")

    @property
    @pulumi.getter(name="saml2RequestedNameidFormats")
    def saml2_requested_nameid_formats(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2RequestedNameidFormatResult']:
        return pulumi.get(self, "saml2_requested_nameid_formats")

    @property
    @pulumi.getter(name="saml2SignRequests")
    def saml2_sign_requests(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignRequestResult']:
        return pulumi.get(self, "saml2_sign_requests")

    @property
    @pulumi.getter(name="saml2SignatureMethodsUseds")
    def saml2_signature_methods_useds(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignatureMethodsUsedResult']:
        return pulumi.get(self, "saml2_signature_methods_useds")

    @property
    @pulumi.getter(name="saml2SnowflakeAcsUrls")
    def saml2_snowflake_acs_urls(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeAcsUrlResult']:
        return pulumi.get(self, "saml2_snowflake_acs_urls")

    @property
    @pulumi.getter(name="saml2SnowflakeIssuerUrls")
    def saml2_snowflake_issuer_urls(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeIssuerUrlResult']:
        return pulumi.get(self, "saml2_snowflake_issuer_urls")

    @property
    @pulumi.getter(name="saml2SnowflakeMetadatas")
    def saml2_snowflake_metadatas(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeMetadataResult']:
        return pulumi.get(self, "saml2_snowflake_metadatas")

    @property
    @pulumi.getter(name="saml2SnowflakeX509Certs")
    def saml2_snowflake_x509_certs(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeX509CertResult']:
        return pulumi.get(self, "saml2_snowflake_x509_certs")

    @property
    @pulumi.getter(name="saml2SpInitiatedLoginPageLabels")
    def saml2_sp_initiated_login_page_labels(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SpInitiatedLoginPageLabelResult']:
        return pulumi.get(self, "saml2_sp_initiated_login_page_labels")

    @property
    @pulumi.getter(name="saml2SsoUrls")
    def saml2_sso_urls(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SsoUrlResult']:
        return pulumi.get(self, "saml2_sso_urls")

    @property
    @pulumi.getter(name="saml2X509Certs")
    def saml2_x509_certs(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2X509CertResult']:
        return pulumi.get(self, "saml2_x509_certs")

    @property
    @pulumi.getter(name="syncPasswords")
    def sync_passwords(self) -> Sequence['outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSyncPasswordResult']:
        return pulumi.get(self, "sync_passwords")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedEmailPatternResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedUserDomainResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputAuthTypeResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputBlockedRolesListResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputCommentResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputEnabledResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAllowedRolesListResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAnyRoleModeResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAudienceListResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthBlockedRolesListResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthIssuerResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthJwsKeysUrlResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey2Result(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKeyResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthScopeDelimiterResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttributeResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthTokenUserMappingClaimResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputNetworkPolicyResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAccessTokenValidityResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowNonTlsRedirectUriResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedAuthorizationEndpointResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedScopeResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedTokenEndpointResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAuthorizationEndpointResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientAuthMethodResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientIdResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKey2FpResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKeyFpResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientTypeResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthEnforcePkceResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthGrantResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthIssueRefreshTokenResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRedirectUriResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRefreshTokenValidityResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthTokenEndpointResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthUseSecondaryRoleResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputParentIntegrationResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputPreAuthorizedRolesListResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputRunAsRoleResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2DigestMethodsUsedResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2EnableSpInitiatedResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2ForceAuthnResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2IssuerResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2PostLogoutRedirectUrlResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2ProviderResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2RequestedNameidFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignRequestResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignatureMethodsUsedResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeAcsUrlResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeIssuerUrlResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeMetadataResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeX509CertResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SpInitiatedLoginPageLabelResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SsoUrlResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2X509CertResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationDescribeOutputSyncPasswordResult(dict):
    def __init__(__self__, *,
                 default: str,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityIntegrationsSecurityIntegrationShowOutputResult(dict):
    def __init__(__self__, *,
                 category: str,
                 comment: str,
                 created_on: str,
                 enabled: bool,
                 integration_type: str,
                 name: str):
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "integration_type", integration_type)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def category(self) -> str:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> str:
        return pulumi.get(self, "integration_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSequencesSequenceResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 database: str,
                 name: str,
                 schema: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetSharesShareResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 kind: str,
                 name: str,
                 owner: str,
                 tos: Sequence[Any]):
        """
        :param str comment: The comment on the share.
        :param str kind: The kind of the share.
        :param str name: Identifier for the share.
        :param str owner: The owner of the share.
        :param Sequence[Any] tos: For the OUTBOUND share, list of consumers.
        """
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "tos", tos)

    @property
    @pulumi.getter
    def comment(self) -> str:
        """
        The comment on the share.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        The kind of the share.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Identifier for the share.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        The owner of the share.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def tos(self) -> Sequence[Any]:
        """
        For the OUTBOUND share, list of consumers.
        """
        return pulumi.get(self, "tos")


@pulumi.output_type
class GetStagesStageResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 database: str,
                 name: str,
                 schema: str,
                 storage_integration: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "storage_integration", storage_integration)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="storageIntegration")
    def storage_integration(self) -> str:
        return pulumi.get(self, "storage_integration")


@pulumi.output_type
class GetStorageIntegrationsStorageIntegrationResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 enabled: bool,
                 name: str,
                 type: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetStreamlitsInResult(dict):
    def __init__(__self__, *,
                 account: Optional[bool] = None,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param bool account: Returns records for the entire account.
        :param str database: Returns records for the current database in use or for a specified database (db_name).
        :param str schema: Returns records for the current schema in use or a specified schema (schema_name).
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def account(self) -> Optional[bool]:
        """
        Returns records for the entire account.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Returns records for the current database in use or for a specified database (db_name).
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Returns records for the current schema in use or a specified schema (schema_name).
        """
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetStreamlitsLimitResult(dict):
    def __init__(__self__, *,
                 rows: int,
                 from_: Optional[str] = None):
        """
        :param int rows: The maximum number of rows to return.
        :param str from_: Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        pulumi.set(__self__, "rows", rows)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)

    @property
    @pulumi.getter
    def rows(self) -> int:
        """
        The maximum number of rows to return.
        """
        return pulumi.get(self, "rows")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        return pulumi.get(self, "from_")


@pulumi.output_type
class GetStreamlitsStreamlitResult(dict):
    def __init__(__self__, *,
                 describe_outputs: Sequence['outputs.GetStreamlitsStreamlitDescribeOutputResult'],
                 show_outputs: Sequence['outputs.GetStreamlitsStreamlitShowOutputResult']):
        """
        :param Sequence['GetStreamlitsStreamlitDescribeOutputArgs'] describe_outputs: Holds the output of DESCRIBE STREAMLIT.
        :param Sequence['GetStreamlitsStreamlitShowOutputArgs'] show_outputs: Holds the output of SHOW STREAMLITS.
        """
        pulumi.set(__self__, "describe_outputs", describe_outputs)
        pulumi.set(__self__, "show_outputs", show_outputs)

    @property
    @pulumi.getter(name="describeOutputs")
    def describe_outputs(self) -> Sequence['outputs.GetStreamlitsStreamlitDescribeOutputResult']:
        """
        Holds the output of DESCRIBE STREAMLIT.
        """
        return pulumi.get(self, "describe_outputs")

    @property
    @pulumi.getter(name="showOutputs")
    def show_outputs(self) -> Sequence['outputs.GetStreamlitsStreamlitShowOutputResult']:
        """
        Holds the output of SHOW STREAMLITS.
        """
        return pulumi.get(self, "show_outputs")


@pulumi.output_type
class GetStreamlitsStreamlitDescribeOutputResult(dict):
    def __init__(__self__, *,
                 default_packages: str,
                 external_access_integrations: Sequence[str],
                 external_access_secrets: str,
                 import_urls: Sequence[str],
                 main_file: str,
                 name: str,
                 query_warehouse: str,
                 root_location: str,
                 title: str,
                 url_id: str,
                 user_packages: Sequence[str]):
        pulumi.set(__self__, "default_packages", default_packages)
        pulumi.set(__self__, "external_access_integrations", external_access_integrations)
        pulumi.set(__self__, "external_access_secrets", external_access_secrets)
        pulumi.set(__self__, "import_urls", import_urls)
        pulumi.set(__self__, "main_file", main_file)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query_warehouse", query_warehouse)
        pulumi.set(__self__, "root_location", root_location)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "url_id", url_id)
        pulumi.set(__self__, "user_packages", user_packages)

    @property
    @pulumi.getter(name="defaultPackages")
    def default_packages(self) -> str:
        return pulumi.get(self, "default_packages")

    @property
    @pulumi.getter(name="externalAccessIntegrations")
    def external_access_integrations(self) -> Sequence[str]:
        return pulumi.get(self, "external_access_integrations")

    @property
    @pulumi.getter(name="externalAccessSecrets")
    def external_access_secrets(self) -> str:
        return pulumi.get(self, "external_access_secrets")

    @property
    @pulumi.getter(name="importUrls")
    def import_urls(self) -> Sequence[str]:
        return pulumi.get(self, "import_urls")

    @property
    @pulumi.getter(name="mainFile")
    def main_file(self) -> str:
        return pulumi.get(self, "main_file")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="queryWarehouse")
    def query_warehouse(self) -> str:
        return pulumi.get(self, "query_warehouse")

    @property
    @pulumi.getter(name="rootLocation")
    def root_location(self) -> str:
        return pulumi.get(self, "root_location")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="urlId")
    def url_id(self) -> str:
        return pulumi.get(self, "url_id")

    @property
    @pulumi.getter(name="userPackages")
    def user_packages(self) -> Sequence[str]:
        return pulumi.get(self, "user_packages")


@pulumi.output_type
class GetStreamlitsStreamlitShowOutputResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 created_on: str,
                 database_name: str,
                 name: str,
                 owner: str,
                 owner_role_type: str,
                 query_warehouse: str,
                 schema_name: str,
                 title: str,
                 url_id: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "owner_role_type", owner_role_type)
        pulumi.set(__self__, "query_warehouse", query_warehouse)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "url_id", url_id)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> str:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="queryWarehouse")
    def query_warehouse(self) -> str:
        return pulumi.get(self, "query_warehouse")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="urlId")
    def url_id(self) -> str:
        return pulumi.get(self, "url_id")


@pulumi.output_type
class GetStreamsInResult(dict):
    def __init__(__self__, *,
                 account: Optional[bool] = None,
                 application: Optional[str] = None,
                 application_package: Optional[str] = None,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param bool account: Returns records for the entire account.
        :param str application: Returns records for the specified application.
        :param str application_package: Returns records for the specified application package.
        :param str database: Returns records for the current database in use or for a specified database.
        :param str schema: Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if application_package is not None:
            pulumi.set(__self__, "application_package", application_package)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def account(self) -> Optional[bool]:
        """
        Returns records for the entire account.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter
    def application(self) -> Optional[str]:
        """
        Returns records for the specified application.
        """
        return pulumi.get(self, "application")

    @property
    @pulumi.getter(name="applicationPackage")
    def application_package(self) -> Optional[str]:
        """
        Returns records for the specified application package.
        """
        return pulumi.get(self, "application_package")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Returns records for the current database in use or for a specified database.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetStreamsLimitResult(dict):
    def __init__(__self__, *,
                 rows: int,
                 from_: Optional[str] = None):
        """
        :param int rows: The maximum number of rows to return.
        :param str from_: Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        pulumi.set(__self__, "rows", rows)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)

    @property
    @pulumi.getter
    def rows(self) -> int:
        """
        The maximum number of rows to return.
        """
        return pulumi.get(self, "rows")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        return pulumi.get(self, "from_")


@pulumi.output_type
class GetStreamsStreamResult(dict):
    def __init__(__self__, *,
                 describe_outputs: Sequence['outputs.GetStreamsStreamDescribeOutputResult'],
                 show_outputs: Sequence['outputs.GetStreamsStreamShowOutputResult']):
        """
        :param Sequence['GetStreamsStreamDescribeOutputArgs'] describe_outputs: Holds the output of DESCRIBE STREAM.
        :param Sequence['GetStreamsStreamShowOutputArgs'] show_outputs: Holds the output of SHOW STREAMS.
        """
        pulumi.set(__self__, "describe_outputs", describe_outputs)
        pulumi.set(__self__, "show_outputs", show_outputs)

    @property
    @pulumi.getter(name="describeOutputs")
    def describe_outputs(self) -> Sequence['outputs.GetStreamsStreamDescribeOutputResult']:
        """
        Holds the output of DESCRIBE STREAM.
        """
        return pulumi.get(self, "describe_outputs")

    @property
    @pulumi.getter(name="showOutputs")
    def show_outputs(self) -> Sequence['outputs.GetStreamsStreamShowOutputResult']:
        """
        Holds the output of SHOW STREAMS.
        """
        return pulumi.get(self, "show_outputs")


@pulumi.output_type
class GetStreamsStreamDescribeOutputResult(dict):
    def __init__(__self__, *,
                 base_tables: Sequence[str],
                 comment: str,
                 created_on: str,
                 database_name: str,
                 invalid_reason: str,
                 mode: str,
                 name: str,
                 owner: str,
                 owner_role_type: str,
                 schema_name: str,
                 source_type: str,
                 stale: bool,
                 stale_after: str,
                 table_name: str,
                 type: str):
        pulumi.set(__self__, "base_tables", base_tables)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "invalid_reason", invalid_reason)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "owner_role_type", owner_role_type)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "stale", stale)
        pulumi.set(__self__, "stale_after", stale_after)
        pulumi.set(__self__, "table_name", table_name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="baseTables")
    def base_tables(self) -> Sequence[str]:
        return pulumi.get(self, "base_tables")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="invalidReason")
    def invalid_reason(self) -> str:
        return pulumi.get(self, "invalid_reason")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> str:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def stale(self) -> bool:
        return pulumi.get(self, "stale")

    @property
    @pulumi.getter(name="staleAfter")
    def stale_after(self) -> str:
        return pulumi.get(self, "stale_after")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetStreamsStreamShowOutputResult(dict):
    def __init__(__self__, *,
                 base_tables: Sequence[str],
                 comment: str,
                 created_on: str,
                 database_name: str,
                 invalid_reason: str,
                 mode: str,
                 name: str,
                 owner: str,
                 owner_role_type: str,
                 schema_name: str,
                 source_type: str,
                 stale: bool,
                 stale_after: str,
                 table_name: str,
                 type: str):
        pulumi.set(__self__, "base_tables", base_tables)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "invalid_reason", invalid_reason)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "owner_role_type", owner_role_type)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "stale", stale)
        pulumi.set(__self__, "stale_after", stale_after)
        pulumi.set(__self__, "table_name", table_name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="baseTables")
    def base_tables(self) -> Sequence[str]:
        return pulumi.get(self, "base_tables")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="invalidReason")
    def invalid_reason(self) -> str:
        return pulumi.get(self, "invalid_reason")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> str:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def stale(self) -> bool:
        return pulumi.get(self, "stale")

    @property
    @pulumi.getter(name="staleAfter")
    def stale_after(self) -> str:
        return pulumi.get(self, "stale_after")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTablesTableResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 database: str,
                 name: str,
                 schema: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetTagsInResult(dict):
    def __init__(__self__, *,
                 account: Optional[bool] = None,
                 application: Optional[str] = None,
                 application_package: Optional[str] = None,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param bool account: Returns records for the entire account.
        :param str application: Returns records for the specified application.
        :param str application_package: Returns records for the specified application package.
        :param str database: Returns records for the current database in use or for a specified database.
        :param str schema: Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if application_package is not None:
            pulumi.set(__self__, "application_package", application_package)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def account(self) -> Optional[bool]:
        """
        Returns records for the entire account.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter
    def application(self) -> Optional[str]:
        """
        Returns records for the specified application.
        """
        return pulumi.get(self, "application")

    @property
    @pulumi.getter(name="applicationPackage")
    def application_package(self) -> Optional[str]:
        """
        Returns records for the specified application package.
        """
        return pulumi.get(self, "application_package")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Returns records for the current database in use or for a specified database.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetTagsTagResult(dict):
    def __init__(__self__, *,
                 show_outputs: Sequence['outputs.GetTagsTagShowOutputResult']):
        """
        :param Sequence['GetTagsTagShowOutputArgs'] show_outputs: Holds the output of SHOW TAGS.
        """
        pulumi.set(__self__, "show_outputs", show_outputs)

    @property
    @pulumi.getter(name="showOutputs")
    def show_outputs(self) -> Sequence['outputs.GetTagsTagShowOutputResult']:
        """
        Holds the output of SHOW TAGS.
        """
        return pulumi.get(self, "show_outputs")


@pulumi.output_type
class GetTagsTagShowOutputResult(dict):
    def __init__(__self__, *,
                 allowed_values: Sequence[str],
                 comment: str,
                 created_on: str,
                 database_name: str,
                 name: str,
                 owner: str,
                 owner_role_type: str,
                 schema_name: str):
        pulumi.set(__self__, "allowed_values", allowed_values)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "owner_role_type", owner_role_type)
        pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Sequence[str]:
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> str:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetTasksInResult(dict):
    def __init__(__self__, *,
                 account: Optional[bool] = None,
                 application: Optional[str] = None,
                 application_package: Optional[str] = None,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param bool account: Returns records for the entire account.
        :param str application: Returns records for the specified application.
        :param str application_package: Returns records for the specified application package.
        :param str database: Returns records for the current database in use or for a specified database.
        :param str schema: Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if application_package is not None:
            pulumi.set(__self__, "application_package", application_package)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def account(self) -> Optional[bool]:
        """
        Returns records for the entire account.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter
    def application(self) -> Optional[str]:
        """
        Returns records for the specified application.
        """
        return pulumi.get(self, "application")

    @property
    @pulumi.getter(name="applicationPackage")
    def application_package(self) -> Optional[str]:
        """
        Returns records for the specified application package.
        """
        return pulumi.get(self, "application_package")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Returns records for the current database in use or for a specified database.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetTasksLimitResult(dict):
    def __init__(__self__, *,
                 rows: int,
                 from_: Optional[str] = None):
        """
        :param int rows: The maximum number of rows to return.
        :param str from_: Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        pulumi.set(__self__, "rows", rows)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)

    @property
    @pulumi.getter
    def rows(self) -> int:
        """
        The maximum number of rows to return.
        """
        return pulumi.get(self, "rows")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        return pulumi.get(self, "from_")


@pulumi.output_type
class GetTasksTaskResult(dict):
    def __init__(__self__, *,
                 parameters: Sequence['outputs.GetTasksTaskParameterResult'],
                 show_outputs: Sequence['outputs.GetTasksTaskShowOutputResult']):
        """
        :param Sequence['GetTasksTaskParameterArgs'] parameters: Holds the output of SHOW PARAMETERS FOR TASK.
        :param Sequence['GetTasksTaskShowOutputArgs'] show_outputs: Holds the output of SHOW TASKS.
        """
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "show_outputs", show_outputs)

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetTasksTaskParameterResult']:
        """
        Holds the output of SHOW PARAMETERS FOR TASK.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="showOutputs")
    def show_outputs(self) -> Sequence['outputs.GetTasksTaskShowOutputResult']:
        """
        Holds the output of SHOW TASKS.
        """
        return pulumi.get(self, "show_outputs")


@pulumi.output_type
class GetTasksTaskParameterResult(dict):
    def __init__(__self__, *,
                 abort_detached_queries: Sequence['outputs.GetTasksTaskParameterAbortDetachedQueryResult'],
                 autocommits: Sequence['outputs.GetTasksTaskParameterAutocommitResult'],
                 binary_input_formats: Sequence['outputs.GetTasksTaskParameterBinaryInputFormatResult'],
                 binary_output_formats: Sequence['outputs.GetTasksTaskParameterBinaryOutputFormatResult'],
                 client_memory_limits: Sequence['outputs.GetTasksTaskParameterClientMemoryLimitResult'],
                 client_metadata_request_use_connection_ctxes: Sequence['outputs.GetTasksTaskParameterClientMetadataRequestUseConnectionCtxResult'],
                 client_prefetch_threads: Sequence['outputs.GetTasksTaskParameterClientPrefetchThreadResult'],
                 client_result_chunk_sizes: Sequence['outputs.GetTasksTaskParameterClientResultChunkSizeResult'],
                 client_result_column_case_insensitives: Sequence['outputs.GetTasksTaskParameterClientResultColumnCaseInsensitiveResult'],
                 client_session_keep_alive_heartbeat_frequencies: Sequence['outputs.GetTasksTaskParameterClientSessionKeepAliveHeartbeatFrequencyResult'],
                 client_session_keep_alives: Sequence['outputs.GetTasksTaskParameterClientSessionKeepAlifeResult'],
                 client_timestamp_type_mappings: Sequence['outputs.GetTasksTaskParameterClientTimestampTypeMappingResult'],
                 date_input_formats: Sequence['outputs.GetTasksTaskParameterDateInputFormatResult'],
                 date_output_formats: Sequence['outputs.GetTasksTaskParameterDateOutputFormatResult'],
                 enable_unload_physical_type_optimizations: Sequence['outputs.GetTasksTaskParameterEnableUnloadPhysicalTypeOptimizationResult'],
                 error_on_nondeterministic_merges: Sequence['outputs.GetTasksTaskParameterErrorOnNondeterministicMergeResult'],
                 error_on_nondeterministic_updates: Sequence['outputs.GetTasksTaskParameterErrorOnNondeterministicUpdateResult'],
                 geography_output_formats: Sequence['outputs.GetTasksTaskParameterGeographyOutputFormatResult'],
                 geometry_output_formats: Sequence['outputs.GetTasksTaskParameterGeometryOutputFormatResult'],
                 jdbc_treat_timestamp_ntz_as_utcs: Sequence['outputs.GetTasksTaskParameterJdbcTreatTimestampNtzAsUtcResult'],
                 jdbc_use_session_timezones: Sequence['outputs.GetTasksTaskParameterJdbcUseSessionTimezoneResult'],
                 json_indents: Sequence['outputs.GetTasksTaskParameterJsonIndentResult'],
                 lock_timeouts: Sequence['outputs.GetTasksTaskParameterLockTimeoutResult'],
                 log_levels: Sequence['outputs.GetTasksTaskParameterLogLevelResult'],
                 multi_statement_counts: Sequence['outputs.GetTasksTaskParameterMultiStatementCountResult'],
                 noorder_sequence_as_defaults: Sequence['outputs.GetTasksTaskParameterNoorderSequenceAsDefaultResult'],
                 odbc_treat_decimal_as_ints: Sequence['outputs.GetTasksTaskParameterOdbcTreatDecimalAsIntResult'],
                 query_tags: Sequence['outputs.GetTasksTaskParameterQueryTagResult'],
                 quoted_identifiers_ignore_cases: Sequence['outputs.GetTasksTaskParameterQuotedIdentifiersIgnoreCaseResult'],
                 rows_per_resultsets: Sequence['outputs.GetTasksTaskParameterRowsPerResultsetResult'],
                 s3_stage_vpce_dns_names: Sequence['outputs.GetTasksTaskParameterS3StageVpceDnsNameResult'],
                 search_paths: Sequence['outputs.GetTasksTaskParameterSearchPathResult'],
                 statement_queued_timeout_in_seconds: Sequence['outputs.GetTasksTaskParameterStatementQueuedTimeoutInSecondResult'],
                 statement_timeout_in_seconds: Sequence['outputs.GetTasksTaskParameterStatementTimeoutInSecondResult'],
                 strict_json_outputs: Sequence['outputs.GetTasksTaskParameterStrictJsonOutputResult'],
                 suspend_task_after_num_failures: Sequence['outputs.GetTasksTaskParameterSuspendTaskAfterNumFailureResult'],
                 task_auto_retry_attempts: Sequence['outputs.GetTasksTaskParameterTaskAutoRetryAttemptResult'],
                 time_input_formats: Sequence['outputs.GetTasksTaskParameterTimeInputFormatResult'],
                 time_output_formats: Sequence['outputs.GetTasksTaskParameterTimeOutputFormatResult'],
                 timestamp_day_is_always24hs: Sequence['outputs.GetTasksTaskParameterTimestampDayIsAlways24hResult'],
                 timestamp_input_formats: Sequence['outputs.GetTasksTaskParameterTimestampInputFormatResult'],
                 timestamp_ltz_output_formats: Sequence['outputs.GetTasksTaskParameterTimestampLtzOutputFormatResult'],
                 timestamp_ntz_output_formats: Sequence['outputs.GetTasksTaskParameterTimestampNtzOutputFormatResult'],
                 timestamp_output_formats: Sequence['outputs.GetTasksTaskParameterTimestampOutputFormatResult'],
                 timestamp_type_mappings: Sequence['outputs.GetTasksTaskParameterTimestampTypeMappingResult'],
                 timestamp_tz_output_formats: Sequence['outputs.GetTasksTaskParameterTimestampTzOutputFormatResult'],
                 timezones: Sequence['outputs.GetTasksTaskParameterTimezoneResult'],
                 trace_levels: Sequence['outputs.GetTasksTaskParameterTraceLevelResult'],
                 transaction_abort_on_errors: Sequence['outputs.GetTasksTaskParameterTransactionAbortOnErrorResult'],
                 transaction_default_isolation_levels: Sequence['outputs.GetTasksTaskParameterTransactionDefaultIsolationLevelResult'],
                 two_digit_century_starts: Sequence['outputs.GetTasksTaskParameterTwoDigitCenturyStartResult'],
                 unsupported_ddl_actions: Sequence['outputs.GetTasksTaskParameterUnsupportedDdlActionResult'],
                 use_cached_results: Sequence['outputs.GetTasksTaskParameterUseCachedResultResult'],
                 user_task_managed_initial_warehouse_sizes: Sequence['outputs.GetTasksTaskParameterUserTaskManagedInitialWarehouseSizeResult'],
                 user_task_minimum_trigger_interval_in_seconds: Sequence['outputs.GetTasksTaskParameterUserTaskMinimumTriggerIntervalInSecondResult'],
                 user_task_timeout_ms: Sequence['outputs.GetTasksTaskParameterUserTaskTimeoutMResult'],
                 week_of_year_policies: Sequence['outputs.GetTasksTaskParameterWeekOfYearPolicyResult'],
                 week_starts: Sequence['outputs.GetTasksTaskParameterWeekStartResult']):
        pulumi.set(__self__, "abort_detached_queries", abort_detached_queries)
        pulumi.set(__self__, "autocommits", autocommits)
        pulumi.set(__self__, "binary_input_formats", binary_input_formats)
        pulumi.set(__self__, "binary_output_formats", binary_output_formats)
        pulumi.set(__self__, "client_memory_limits", client_memory_limits)
        pulumi.set(__self__, "client_metadata_request_use_connection_ctxes", client_metadata_request_use_connection_ctxes)
        pulumi.set(__self__, "client_prefetch_threads", client_prefetch_threads)
        pulumi.set(__self__, "client_result_chunk_sizes", client_result_chunk_sizes)
        pulumi.set(__self__, "client_result_column_case_insensitives", client_result_column_case_insensitives)
        pulumi.set(__self__, "client_session_keep_alive_heartbeat_frequencies", client_session_keep_alive_heartbeat_frequencies)
        pulumi.set(__self__, "client_session_keep_alives", client_session_keep_alives)
        pulumi.set(__self__, "client_timestamp_type_mappings", client_timestamp_type_mappings)
        pulumi.set(__self__, "date_input_formats", date_input_formats)
        pulumi.set(__self__, "date_output_formats", date_output_formats)
        pulumi.set(__self__, "enable_unload_physical_type_optimizations", enable_unload_physical_type_optimizations)
        pulumi.set(__self__, "error_on_nondeterministic_merges", error_on_nondeterministic_merges)
        pulumi.set(__self__, "error_on_nondeterministic_updates", error_on_nondeterministic_updates)
        pulumi.set(__self__, "geography_output_formats", geography_output_formats)
        pulumi.set(__self__, "geometry_output_formats", geometry_output_formats)
        pulumi.set(__self__, "jdbc_treat_timestamp_ntz_as_utcs", jdbc_treat_timestamp_ntz_as_utcs)
        pulumi.set(__self__, "jdbc_use_session_timezones", jdbc_use_session_timezones)
        pulumi.set(__self__, "json_indents", json_indents)
        pulumi.set(__self__, "lock_timeouts", lock_timeouts)
        pulumi.set(__self__, "log_levels", log_levels)
        pulumi.set(__self__, "multi_statement_counts", multi_statement_counts)
        pulumi.set(__self__, "noorder_sequence_as_defaults", noorder_sequence_as_defaults)
        pulumi.set(__self__, "odbc_treat_decimal_as_ints", odbc_treat_decimal_as_ints)
        pulumi.set(__self__, "query_tags", query_tags)
        pulumi.set(__self__, "quoted_identifiers_ignore_cases", quoted_identifiers_ignore_cases)
        pulumi.set(__self__, "rows_per_resultsets", rows_per_resultsets)
        pulumi.set(__self__, "s3_stage_vpce_dns_names", s3_stage_vpce_dns_names)
        pulumi.set(__self__, "search_paths", search_paths)
        pulumi.set(__self__, "statement_queued_timeout_in_seconds", statement_queued_timeout_in_seconds)
        pulumi.set(__self__, "statement_timeout_in_seconds", statement_timeout_in_seconds)
        pulumi.set(__self__, "strict_json_outputs", strict_json_outputs)
        pulumi.set(__self__, "suspend_task_after_num_failures", suspend_task_after_num_failures)
        pulumi.set(__self__, "task_auto_retry_attempts", task_auto_retry_attempts)
        pulumi.set(__self__, "time_input_formats", time_input_formats)
        pulumi.set(__self__, "time_output_formats", time_output_formats)
        pulumi.set(__self__, "timestamp_day_is_always24hs", timestamp_day_is_always24hs)
        pulumi.set(__self__, "timestamp_input_formats", timestamp_input_formats)
        pulumi.set(__self__, "timestamp_ltz_output_formats", timestamp_ltz_output_formats)
        pulumi.set(__self__, "timestamp_ntz_output_formats", timestamp_ntz_output_formats)
        pulumi.set(__self__, "timestamp_output_formats", timestamp_output_formats)
        pulumi.set(__self__, "timestamp_type_mappings", timestamp_type_mappings)
        pulumi.set(__self__, "timestamp_tz_output_formats", timestamp_tz_output_formats)
        pulumi.set(__self__, "timezones", timezones)
        pulumi.set(__self__, "trace_levels", trace_levels)
        pulumi.set(__self__, "transaction_abort_on_errors", transaction_abort_on_errors)
        pulumi.set(__self__, "transaction_default_isolation_levels", transaction_default_isolation_levels)
        pulumi.set(__self__, "two_digit_century_starts", two_digit_century_starts)
        pulumi.set(__self__, "unsupported_ddl_actions", unsupported_ddl_actions)
        pulumi.set(__self__, "use_cached_results", use_cached_results)
        pulumi.set(__self__, "user_task_managed_initial_warehouse_sizes", user_task_managed_initial_warehouse_sizes)
        pulumi.set(__self__, "user_task_minimum_trigger_interval_in_seconds", user_task_minimum_trigger_interval_in_seconds)
        pulumi.set(__self__, "user_task_timeout_ms", user_task_timeout_ms)
        pulumi.set(__self__, "week_of_year_policies", week_of_year_policies)
        pulumi.set(__self__, "week_starts", week_starts)

    @property
    @pulumi.getter(name="abortDetachedQueries")
    def abort_detached_queries(self) -> Sequence['outputs.GetTasksTaskParameterAbortDetachedQueryResult']:
        return pulumi.get(self, "abort_detached_queries")

    @property
    @pulumi.getter
    def autocommits(self) -> Sequence['outputs.GetTasksTaskParameterAutocommitResult']:
        return pulumi.get(self, "autocommits")

    @property
    @pulumi.getter(name="binaryInputFormats")
    def binary_input_formats(self) -> Sequence['outputs.GetTasksTaskParameterBinaryInputFormatResult']:
        return pulumi.get(self, "binary_input_formats")

    @property
    @pulumi.getter(name="binaryOutputFormats")
    def binary_output_formats(self) -> Sequence['outputs.GetTasksTaskParameterBinaryOutputFormatResult']:
        return pulumi.get(self, "binary_output_formats")

    @property
    @pulumi.getter(name="clientMemoryLimits")
    def client_memory_limits(self) -> Sequence['outputs.GetTasksTaskParameterClientMemoryLimitResult']:
        return pulumi.get(self, "client_memory_limits")

    @property
    @pulumi.getter(name="clientMetadataRequestUseConnectionCtxes")
    def client_metadata_request_use_connection_ctxes(self) -> Sequence['outputs.GetTasksTaskParameterClientMetadataRequestUseConnectionCtxResult']:
        return pulumi.get(self, "client_metadata_request_use_connection_ctxes")

    @property
    @pulumi.getter(name="clientPrefetchThreads")
    def client_prefetch_threads(self) -> Sequence['outputs.GetTasksTaskParameterClientPrefetchThreadResult']:
        return pulumi.get(self, "client_prefetch_threads")

    @property
    @pulumi.getter(name="clientResultChunkSizes")
    def client_result_chunk_sizes(self) -> Sequence['outputs.GetTasksTaskParameterClientResultChunkSizeResult']:
        return pulumi.get(self, "client_result_chunk_sizes")

    @property
    @pulumi.getter(name="clientResultColumnCaseInsensitives")
    def client_result_column_case_insensitives(self) -> Sequence['outputs.GetTasksTaskParameterClientResultColumnCaseInsensitiveResult']:
        return pulumi.get(self, "client_result_column_case_insensitives")

    @property
    @pulumi.getter(name="clientSessionKeepAliveHeartbeatFrequencies")
    def client_session_keep_alive_heartbeat_frequencies(self) -> Sequence['outputs.GetTasksTaskParameterClientSessionKeepAliveHeartbeatFrequencyResult']:
        return pulumi.get(self, "client_session_keep_alive_heartbeat_frequencies")

    @property
    @pulumi.getter(name="clientSessionKeepAlives")
    def client_session_keep_alives(self) -> Sequence['outputs.GetTasksTaskParameterClientSessionKeepAlifeResult']:
        return pulumi.get(self, "client_session_keep_alives")

    @property
    @pulumi.getter(name="clientTimestampTypeMappings")
    def client_timestamp_type_mappings(self) -> Sequence['outputs.GetTasksTaskParameterClientTimestampTypeMappingResult']:
        return pulumi.get(self, "client_timestamp_type_mappings")

    @property
    @pulumi.getter(name="dateInputFormats")
    def date_input_formats(self) -> Sequence['outputs.GetTasksTaskParameterDateInputFormatResult']:
        return pulumi.get(self, "date_input_formats")

    @property
    @pulumi.getter(name="dateOutputFormats")
    def date_output_formats(self) -> Sequence['outputs.GetTasksTaskParameterDateOutputFormatResult']:
        return pulumi.get(self, "date_output_formats")

    @property
    @pulumi.getter(name="enableUnloadPhysicalTypeOptimizations")
    def enable_unload_physical_type_optimizations(self) -> Sequence['outputs.GetTasksTaskParameterEnableUnloadPhysicalTypeOptimizationResult']:
        return pulumi.get(self, "enable_unload_physical_type_optimizations")

    @property
    @pulumi.getter(name="errorOnNondeterministicMerges")
    def error_on_nondeterministic_merges(self) -> Sequence['outputs.GetTasksTaskParameterErrorOnNondeterministicMergeResult']:
        return pulumi.get(self, "error_on_nondeterministic_merges")

    @property
    @pulumi.getter(name="errorOnNondeterministicUpdates")
    def error_on_nondeterministic_updates(self) -> Sequence['outputs.GetTasksTaskParameterErrorOnNondeterministicUpdateResult']:
        return pulumi.get(self, "error_on_nondeterministic_updates")

    @property
    @pulumi.getter(name="geographyOutputFormats")
    def geography_output_formats(self) -> Sequence['outputs.GetTasksTaskParameterGeographyOutputFormatResult']:
        return pulumi.get(self, "geography_output_formats")

    @property
    @pulumi.getter(name="geometryOutputFormats")
    def geometry_output_formats(self) -> Sequence['outputs.GetTasksTaskParameterGeometryOutputFormatResult']:
        return pulumi.get(self, "geometry_output_formats")

    @property
    @pulumi.getter(name="jdbcTreatTimestampNtzAsUtcs")
    def jdbc_treat_timestamp_ntz_as_utcs(self) -> Sequence['outputs.GetTasksTaskParameterJdbcTreatTimestampNtzAsUtcResult']:
        return pulumi.get(self, "jdbc_treat_timestamp_ntz_as_utcs")

    @property
    @pulumi.getter(name="jdbcUseSessionTimezones")
    def jdbc_use_session_timezones(self) -> Sequence['outputs.GetTasksTaskParameterJdbcUseSessionTimezoneResult']:
        return pulumi.get(self, "jdbc_use_session_timezones")

    @property
    @pulumi.getter(name="jsonIndents")
    def json_indents(self) -> Sequence['outputs.GetTasksTaskParameterJsonIndentResult']:
        return pulumi.get(self, "json_indents")

    @property
    @pulumi.getter(name="lockTimeouts")
    def lock_timeouts(self) -> Sequence['outputs.GetTasksTaskParameterLockTimeoutResult']:
        return pulumi.get(self, "lock_timeouts")

    @property
    @pulumi.getter(name="logLevels")
    def log_levels(self) -> Sequence['outputs.GetTasksTaskParameterLogLevelResult']:
        return pulumi.get(self, "log_levels")

    @property
    @pulumi.getter(name="multiStatementCounts")
    def multi_statement_counts(self) -> Sequence['outputs.GetTasksTaskParameterMultiStatementCountResult']:
        return pulumi.get(self, "multi_statement_counts")

    @property
    @pulumi.getter(name="noorderSequenceAsDefaults")
    def noorder_sequence_as_defaults(self) -> Sequence['outputs.GetTasksTaskParameterNoorderSequenceAsDefaultResult']:
        return pulumi.get(self, "noorder_sequence_as_defaults")

    @property
    @pulumi.getter(name="odbcTreatDecimalAsInts")
    def odbc_treat_decimal_as_ints(self) -> Sequence['outputs.GetTasksTaskParameterOdbcTreatDecimalAsIntResult']:
        return pulumi.get(self, "odbc_treat_decimal_as_ints")

    @property
    @pulumi.getter(name="queryTags")
    def query_tags(self) -> Sequence['outputs.GetTasksTaskParameterQueryTagResult']:
        return pulumi.get(self, "query_tags")

    @property
    @pulumi.getter(name="quotedIdentifiersIgnoreCases")
    def quoted_identifiers_ignore_cases(self) -> Sequence['outputs.GetTasksTaskParameterQuotedIdentifiersIgnoreCaseResult']:
        return pulumi.get(self, "quoted_identifiers_ignore_cases")

    @property
    @pulumi.getter(name="rowsPerResultsets")
    def rows_per_resultsets(self) -> Sequence['outputs.GetTasksTaskParameterRowsPerResultsetResult']:
        return pulumi.get(self, "rows_per_resultsets")

    @property
    @pulumi.getter(name="s3StageVpceDnsNames")
    def s3_stage_vpce_dns_names(self) -> Sequence['outputs.GetTasksTaskParameterS3StageVpceDnsNameResult']:
        return pulumi.get(self, "s3_stage_vpce_dns_names")

    @property
    @pulumi.getter(name="searchPaths")
    def search_paths(self) -> Sequence['outputs.GetTasksTaskParameterSearchPathResult']:
        return pulumi.get(self, "search_paths")

    @property
    @pulumi.getter(name="statementQueuedTimeoutInSeconds")
    def statement_queued_timeout_in_seconds(self) -> Sequence['outputs.GetTasksTaskParameterStatementQueuedTimeoutInSecondResult']:
        return pulumi.get(self, "statement_queued_timeout_in_seconds")

    @property
    @pulumi.getter(name="statementTimeoutInSeconds")
    def statement_timeout_in_seconds(self) -> Sequence['outputs.GetTasksTaskParameterStatementTimeoutInSecondResult']:
        return pulumi.get(self, "statement_timeout_in_seconds")

    @property
    @pulumi.getter(name="strictJsonOutputs")
    def strict_json_outputs(self) -> Sequence['outputs.GetTasksTaskParameterStrictJsonOutputResult']:
        return pulumi.get(self, "strict_json_outputs")

    @property
    @pulumi.getter(name="suspendTaskAfterNumFailures")
    def suspend_task_after_num_failures(self) -> Sequence['outputs.GetTasksTaskParameterSuspendTaskAfterNumFailureResult']:
        return pulumi.get(self, "suspend_task_after_num_failures")

    @property
    @pulumi.getter(name="taskAutoRetryAttempts")
    def task_auto_retry_attempts(self) -> Sequence['outputs.GetTasksTaskParameterTaskAutoRetryAttemptResult']:
        return pulumi.get(self, "task_auto_retry_attempts")

    @property
    @pulumi.getter(name="timeInputFormats")
    def time_input_formats(self) -> Sequence['outputs.GetTasksTaskParameterTimeInputFormatResult']:
        return pulumi.get(self, "time_input_formats")

    @property
    @pulumi.getter(name="timeOutputFormats")
    def time_output_formats(self) -> Sequence['outputs.GetTasksTaskParameterTimeOutputFormatResult']:
        return pulumi.get(self, "time_output_formats")

    @property
    @pulumi.getter(name="timestampDayIsAlways24hs")
    def timestamp_day_is_always24hs(self) -> Sequence['outputs.GetTasksTaskParameterTimestampDayIsAlways24hResult']:
        return pulumi.get(self, "timestamp_day_is_always24hs")

    @property
    @pulumi.getter(name="timestampInputFormats")
    def timestamp_input_formats(self) -> Sequence['outputs.GetTasksTaskParameterTimestampInputFormatResult']:
        return pulumi.get(self, "timestamp_input_formats")

    @property
    @pulumi.getter(name="timestampLtzOutputFormats")
    def timestamp_ltz_output_formats(self) -> Sequence['outputs.GetTasksTaskParameterTimestampLtzOutputFormatResult']:
        return pulumi.get(self, "timestamp_ltz_output_formats")

    @property
    @pulumi.getter(name="timestampNtzOutputFormats")
    def timestamp_ntz_output_formats(self) -> Sequence['outputs.GetTasksTaskParameterTimestampNtzOutputFormatResult']:
        return pulumi.get(self, "timestamp_ntz_output_formats")

    @property
    @pulumi.getter(name="timestampOutputFormats")
    def timestamp_output_formats(self) -> Sequence['outputs.GetTasksTaskParameterTimestampOutputFormatResult']:
        return pulumi.get(self, "timestamp_output_formats")

    @property
    @pulumi.getter(name="timestampTypeMappings")
    def timestamp_type_mappings(self) -> Sequence['outputs.GetTasksTaskParameterTimestampTypeMappingResult']:
        return pulumi.get(self, "timestamp_type_mappings")

    @property
    @pulumi.getter(name="timestampTzOutputFormats")
    def timestamp_tz_output_formats(self) -> Sequence['outputs.GetTasksTaskParameterTimestampTzOutputFormatResult']:
        return pulumi.get(self, "timestamp_tz_output_formats")

    @property
    @pulumi.getter
    def timezones(self) -> Sequence['outputs.GetTasksTaskParameterTimezoneResult']:
        return pulumi.get(self, "timezones")

    @property
    @pulumi.getter(name="traceLevels")
    def trace_levels(self) -> Sequence['outputs.GetTasksTaskParameterTraceLevelResult']:
        return pulumi.get(self, "trace_levels")

    @property
    @pulumi.getter(name="transactionAbortOnErrors")
    def transaction_abort_on_errors(self) -> Sequence['outputs.GetTasksTaskParameterTransactionAbortOnErrorResult']:
        return pulumi.get(self, "transaction_abort_on_errors")

    @property
    @pulumi.getter(name="transactionDefaultIsolationLevels")
    def transaction_default_isolation_levels(self) -> Sequence['outputs.GetTasksTaskParameterTransactionDefaultIsolationLevelResult']:
        return pulumi.get(self, "transaction_default_isolation_levels")

    @property
    @pulumi.getter(name="twoDigitCenturyStarts")
    def two_digit_century_starts(self) -> Sequence['outputs.GetTasksTaskParameterTwoDigitCenturyStartResult']:
        return pulumi.get(self, "two_digit_century_starts")

    @property
    @pulumi.getter(name="unsupportedDdlActions")
    def unsupported_ddl_actions(self) -> Sequence['outputs.GetTasksTaskParameterUnsupportedDdlActionResult']:
        return pulumi.get(self, "unsupported_ddl_actions")

    @property
    @pulumi.getter(name="useCachedResults")
    def use_cached_results(self) -> Sequence['outputs.GetTasksTaskParameterUseCachedResultResult']:
        return pulumi.get(self, "use_cached_results")

    @property
    @pulumi.getter(name="userTaskManagedInitialWarehouseSizes")
    def user_task_managed_initial_warehouse_sizes(self) -> Sequence['outputs.GetTasksTaskParameterUserTaskManagedInitialWarehouseSizeResult']:
        return pulumi.get(self, "user_task_managed_initial_warehouse_sizes")

    @property
    @pulumi.getter(name="userTaskMinimumTriggerIntervalInSeconds")
    def user_task_minimum_trigger_interval_in_seconds(self) -> Sequence['outputs.GetTasksTaskParameterUserTaskMinimumTriggerIntervalInSecondResult']:
        return pulumi.get(self, "user_task_minimum_trigger_interval_in_seconds")

    @property
    @pulumi.getter(name="userTaskTimeoutMs")
    def user_task_timeout_ms(self) -> Sequence['outputs.GetTasksTaskParameterUserTaskTimeoutMResult']:
        return pulumi.get(self, "user_task_timeout_ms")

    @property
    @pulumi.getter(name="weekOfYearPolicies")
    def week_of_year_policies(self) -> Sequence['outputs.GetTasksTaskParameterWeekOfYearPolicyResult']:
        return pulumi.get(self, "week_of_year_policies")

    @property
    @pulumi.getter(name="weekStarts")
    def week_starts(self) -> Sequence['outputs.GetTasksTaskParameterWeekStartResult']:
        return pulumi.get(self, "week_starts")


@pulumi.output_type
class GetTasksTaskParameterAbortDetachedQueryResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterAutocommitResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterBinaryInputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterBinaryOutputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterClientMemoryLimitResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterClientMetadataRequestUseConnectionCtxResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterClientPrefetchThreadResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterClientResultChunkSizeResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterClientResultColumnCaseInsensitiveResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterClientSessionKeepAlifeResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterClientSessionKeepAliveHeartbeatFrequencyResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterClientTimestampTypeMappingResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterDateInputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterDateOutputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterEnableUnloadPhysicalTypeOptimizationResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterErrorOnNondeterministicMergeResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterErrorOnNondeterministicUpdateResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterGeographyOutputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterGeometryOutputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterJdbcTreatTimestampNtzAsUtcResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterJdbcUseSessionTimezoneResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterJsonIndentResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterLockTimeoutResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterLogLevelResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterMultiStatementCountResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterNoorderSequenceAsDefaultResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterOdbcTreatDecimalAsIntResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterQueryTagResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterQuotedIdentifiersIgnoreCaseResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterRowsPerResultsetResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterS3StageVpceDnsNameResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterSearchPathResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterStatementQueuedTimeoutInSecondResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterStatementTimeoutInSecondResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterStrictJsonOutputResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterSuspendTaskAfterNumFailureResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterTaskAutoRetryAttemptResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterTimeInputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterTimeOutputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterTimestampDayIsAlways24hResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterTimestampInputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterTimestampLtzOutputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterTimestampNtzOutputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterTimestampOutputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterTimestampTypeMappingResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterTimestampTzOutputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterTimezoneResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterTraceLevelResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterTransactionAbortOnErrorResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterTransactionDefaultIsolationLevelResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterTwoDigitCenturyStartResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterUnsupportedDdlActionResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterUseCachedResultResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterUserTaskManagedInitialWarehouseSizeResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterUserTaskMinimumTriggerIntervalInSecondResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterUserTaskTimeoutMResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterWeekOfYearPolicyResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskParameterWeekStartResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTasksTaskShowOutputResult(dict):
    def __init__(__self__, *,
                 allow_overlapping_execution: bool,
                 budget: str,
                 comment: str,
                 condition: str,
                 config: str,
                 created_on: str,
                 database_name: str,
                 definition: str,
                 error_integration: str,
                 id: str,
                 last_committed_on: str,
                 last_suspended_on: str,
                 last_suspended_reason: str,
                 name: str,
                 owner: str,
                 owner_role_type: str,
                 predecessors: Sequence[str],
                 schedule: str,
                 schema_name: str,
                 state: str,
                 task_relations: Sequence['outputs.GetTasksTaskShowOutputTaskRelationResult'],
                 warehouse: str):
        pulumi.set(__self__, "allow_overlapping_execution", allow_overlapping_execution)
        pulumi.set(__self__, "budget", budget)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "error_integration", error_integration)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_committed_on", last_committed_on)
        pulumi.set(__self__, "last_suspended_on", last_suspended_on)
        pulumi.set(__self__, "last_suspended_reason", last_suspended_reason)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "owner_role_type", owner_role_type)
        pulumi.set(__self__, "predecessors", predecessors)
        pulumi.set(__self__, "schedule", schedule)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "task_relations", task_relations)
        pulumi.set(__self__, "warehouse", warehouse)

    @property
    @pulumi.getter(name="allowOverlappingExecution")
    def allow_overlapping_execution(self) -> bool:
        return pulumi.get(self, "allow_overlapping_execution")

    @property
    @pulumi.getter
    def budget(self) -> str:
        return pulumi.get(self, "budget")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def condition(self) -> str:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def config(self) -> str:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def definition(self) -> str:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="errorIntegration")
    def error_integration(self) -> str:
        return pulumi.get(self, "error_integration")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastCommittedOn")
    def last_committed_on(self) -> str:
        return pulumi.get(self, "last_committed_on")

    @property
    @pulumi.getter(name="lastSuspendedOn")
    def last_suspended_on(self) -> str:
        return pulumi.get(self, "last_suspended_on")

    @property
    @pulumi.getter(name="lastSuspendedReason")
    def last_suspended_reason(self) -> str:
        return pulumi.get(self, "last_suspended_reason")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> str:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter
    def predecessors(self) -> Sequence[str]:
        return pulumi.get(self, "predecessors")

    @property
    @pulumi.getter
    def schedule(self) -> str:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taskRelations")
    def task_relations(self) -> Sequence['outputs.GetTasksTaskShowOutputTaskRelationResult']:
        return pulumi.get(self, "task_relations")

    @property
    @pulumi.getter
    def warehouse(self) -> str:
        return pulumi.get(self, "warehouse")


@pulumi.output_type
class GetTasksTaskShowOutputTaskRelationResult(dict):
    def __init__(__self__, *,
                 finalized_root_task: str,
                 finalizer: str,
                 predecessors: Sequence[str]):
        pulumi.set(__self__, "finalized_root_task", finalized_root_task)
        pulumi.set(__self__, "finalizer", finalizer)
        pulumi.set(__self__, "predecessors", predecessors)

    @property
    @pulumi.getter(name="finalizedRootTask")
    def finalized_root_task(self) -> str:
        return pulumi.get(self, "finalized_root_task")

    @property
    @pulumi.getter
    def finalizer(self) -> str:
        return pulumi.get(self, "finalizer")

    @property
    @pulumi.getter
    def predecessors(self) -> Sequence[str]:
        return pulumi.get(self, "predecessors")


@pulumi.output_type
class GetUsersLimitResult(dict):
    def __init__(__self__, *,
                 rows: int,
                 from_: Optional[str] = None):
        """
        :param int rows: The maximum number of rows to return.
        :param str from_: Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        pulumi.set(__self__, "rows", rows)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)

    @property
    @pulumi.getter
    def rows(self) -> int:
        """
        The maximum number of rows to return.
        """
        return pulumi.get(self, "rows")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        return pulumi.get(self, "from_")


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 describe_outputs: Sequence['outputs.GetUsersUserDescribeOutputResult'],
                 parameters: Sequence['outputs.GetUsersUserParameterResult'],
                 show_outputs: Sequence['outputs.GetUsersUserShowOutputResult']):
        """
        :param Sequence['GetUsersUserDescribeOutputArgs'] describe_outputs: Holds the output of DESCRIBE USER.
        :param Sequence['GetUsersUserParameterArgs'] parameters: Holds the output of SHOW PARAMETERS FOR USER.
        :param Sequence['GetUsersUserShowOutputArgs'] show_outputs: Holds the output of SHOW USERS.
        """
        pulumi.set(__self__, "describe_outputs", describe_outputs)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "show_outputs", show_outputs)

    @property
    @pulumi.getter(name="describeOutputs")
    def describe_outputs(self) -> Sequence['outputs.GetUsersUserDescribeOutputResult']:
        """
        Holds the output of DESCRIBE USER.
        """
        return pulumi.get(self, "describe_outputs")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetUsersUserParameterResult']:
        """
        Holds the output of SHOW PARAMETERS FOR USER.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="showOutputs")
    def show_outputs(self) -> Sequence['outputs.GetUsersUserShowOutputResult']:
        """
        Holds the output of SHOW USERS.
        """
        return pulumi.get(self, "show_outputs")


@pulumi.output_type
class GetUsersUserDescribeOutputResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 custom_landing_page_url: str,
                 custom_landing_page_url_flush_next_ui_load: bool,
                 days_to_expiry: float,
                 default_namespace: str,
                 default_role: str,
                 default_secondary_roles: str,
                 default_warehouse: str,
                 disabled: bool,
                 display_name: str,
                 email: str,
                 ext_authn_duo: bool,
                 ext_authn_uid: str,
                 first_name: str,
                 has_mfa: bool,
                 last_name: str,
                 login_name: str,
                 middle_name: str,
                 mins_to_bypass_mfa: int,
                 mins_to_bypass_network_policy: int,
                 mins_to_unlock: int,
                 must_change_password: bool,
                 name: str,
                 password: str,
                 password_last_set_time: str,
                 rsa_public_key: str,
                 rsa_public_key2: str,
                 rsa_public_key2_fp: str,
                 rsa_public_key_fp: str,
                 snowflake_lock: bool,
                 snowflake_support: bool,
                 type: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "custom_landing_page_url", custom_landing_page_url)
        pulumi.set(__self__, "custom_landing_page_url_flush_next_ui_load", custom_landing_page_url_flush_next_ui_load)
        pulumi.set(__self__, "days_to_expiry", days_to_expiry)
        pulumi.set(__self__, "default_namespace", default_namespace)
        pulumi.set(__self__, "default_role", default_role)
        pulumi.set(__self__, "default_secondary_roles", default_secondary_roles)
        pulumi.set(__self__, "default_warehouse", default_warehouse)
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "ext_authn_duo", ext_authn_duo)
        pulumi.set(__self__, "ext_authn_uid", ext_authn_uid)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "has_mfa", has_mfa)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "login_name", login_name)
        pulumi.set(__self__, "middle_name", middle_name)
        pulumi.set(__self__, "mins_to_bypass_mfa", mins_to_bypass_mfa)
        pulumi.set(__self__, "mins_to_bypass_network_policy", mins_to_bypass_network_policy)
        pulumi.set(__self__, "mins_to_unlock", mins_to_unlock)
        pulumi.set(__self__, "must_change_password", must_change_password)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "password_last_set_time", password_last_set_time)
        pulumi.set(__self__, "rsa_public_key", rsa_public_key)
        pulumi.set(__self__, "rsa_public_key2", rsa_public_key2)
        pulumi.set(__self__, "rsa_public_key2_fp", rsa_public_key2_fp)
        pulumi.set(__self__, "rsa_public_key_fp", rsa_public_key_fp)
        pulumi.set(__self__, "snowflake_lock", snowflake_lock)
        pulumi.set(__self__, "snowflake_support", snowflake_support)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="customLandingPageUrl")
    def custom_landing_page_url(self) -> str:
        return pulumi.get(self, "custom_landing_page_url")

    @property
    @pulumi.getter(name="customLandingPageUrlFlushNextUiLoad")
    def custom_landing_page_url_flush_next_ui_load(self) -> bool:
        return pulumi.get(self, "custom_landing_page_url_flush_next_ui_load")

    @property
    @pulumi.getter(name="daysToExpiry")
    def days_to_expiry(self) -> float:
        return pulumi.get(self, "days_to_expiry")

    @property
    @pulumi.getter(name="defaultNamespace")
    def default_namespace(self) -> str:
        return pulumi.get(self, "default_namespace")

    @property
    @pulumi.getter(name="defaultRole")
    def default_role(self) -> str:
        return pulumi.get(self, "default_role")

    @property
    @pulumi.getter(name="defaultSecondaryRoles")
    def default_secondary_roles(self) -> str:
        return pulumi.get(self, "default_secondary_roles")

    @property
    @pulumi.getter(name="defaultWarehouse")
    def default_warehouse(self) -> str:
        return pulumi.get(self, "default_warehouse")

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="extAuthnDuo")
    def ext_authn_duo(self) -> bool:
        return pulumi.get(self, "ext_authn_duo")

    @property
    @pulumi.getter(name="extAuthnUid")
    def ext_authn_uid(self) -> str:
        return pulumi.get(self, "ext_authn_uid")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="hasMfa")
    def has_mfa(self) -> bool:
        return pulumi.get(self, "has_mfa")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> str:
        return pulumi.get(self, "login_name")

    @property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> str:
        return pulumi.get(self, "middle_name")

    @property
    @pulumi.getter(name="minsToBypassMfa")
    def mins_to_bypass_mfa(self) -> int:
        return pulumi.get(self, "mins_to_bypass_mfa")

    @property
    @pulumi.getter(name="minsToBypassNetworkPolicy")
    def mins_to_bypass_network_policy(self) -> int:
        return pulumi.get(self, "mins_to_bypass_network_policy")

    @property
    @pulumi.getter(name="minsToUnlock")
    def mins_to_unlock(self) -> int:
        return pulumi.get(self, "mins_to_unlock")

    @property
    @pulumi.getter(name="mustChangePassword")
    def must_change_password(self) -> bool:
        return pulumi.get(self, "must_change_password")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordLastSetTime")
    def password_last_set_time(self) -> str:
        return pulumi.get(self, "password_last_set_time")

    @property
    @pulumi.getter(name="rsaPublicKey")
    def rsa_public_key(self) -> str:
        return pulumi.get(self, "rsa_public_key")

    @property
    @pulumi.getter(name="rsaPublicKey2")
    def rsa_public_key2(self) -> str:
        return pulumi.get(self, "rsa_public_key2")

    @property
    @pulumi.getter(name="rsaPublicKey2Fp")
    def rsa_public_key2_fp(self) -> str:
        return pulumi.get(self, "rsa_public_key2_fp")

    @property
    @pulumi.getter(name="rsaPublicKeyFp")
    def rsa_public_key_fp(self) -> str:
        return pulumi.get(self, "rsa_public_key_fp")

    @property
    @pulumi.getter(name="snowflakeLock")
    def snowflake_lock(self) -> bool:
        return pulumi.get(self, "snowflake_lock")

    @property
    @pulumi.getter(name="snowflakeSupport")
    def snowflake_support(self) -> bool:
        return pulumi.get(self, "snowflake_support")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetUsersUserParameterResult(dict):
    def __init__(__self__, *,
                 abort_detached_queries: Sequence['outputs.GetUsersUserParameterAbortDetachedQueryResult'],
                 autocommits: Sequence['outputs.GetUsersUserParameterAutocommitResult'],
                 binary_input_formats: Sequence['outputs.GetUsersUserParameterBinaryInputFormatResult'],
                 binary_output_formats: Sequence['outputs.GetUsersUserParameterBinaryOutputFormatResult'],
                 client_memory_limits: Sequence['outputs.GetUsersUserParameterClientMemoryLimitResult'],
                 client_metadata_request_use_connection_ctxes: Sequence['outputs.GetUsersUserParameterClientMetadataRequestUseConnectionCtxResult'],
                 client_prefetch_threads: Sequence['outputs.GetUsersUserParameterClientPrefetchThreadResult'],
                 client_result_chunk_sizes: Sequence['outputs.GetUsersUserParameterClientResultChunkSizeResult'],
                 client_result_column_case_insensitives: Sequence['outputs.GetUsersUserParameterClientResultColumnCaseInsensitiveResult'],
                 client_session_keep_alive_heartbeat_frequencies: Sequence['outputs.GetUsersUserParameterClientSessionKeepAliveHeartbeatFrequencyResult'],
                 client_session_keep_alives: Sequence['outputs.GetUsersUserParameterClientSessionKeepAlifeResult'],
                 client_timestamp_type_mappings: Sequence['outputs.GetUsersUserParameterClientTimestampTypeMappingResult'],
                 date_input_formats: Sequence['outputs.GetUsersUserParameterDateInputFormatResult'],
                 date_output_formats: Sequence['outputs.GetUsersUserParameterDateOutputFormatResult'],
                 enable_unload_physical_type_optimizations: Sequence['outputs.GetUsersUserParameterEnableUnloadPhysicalTypeOptimizationResult'],
                 enable_unredacted_query_syntax_errors: Sequence['outputs.GetUsersUserParameterEnableUnredactedQuerySyntaxErrorResult'],
                 error_on_nondeterministic_merges: Sequence['outputs.GetUsersUserParameterErrorOnNondeterministicMergeResult'],
                 error_on_nondeterministic_updates: Sequence['outputs.GetUsersUserParameterErrorOnNondeterministicUpdateResult'],
                 geography_output_formats: Sequence['outputs.GetUsersUserParameterGeographyOutputFormatResult'],
                 geometry_output_formats: Sequence['outputs.GetUsersUserParameterGeometryOutputFormatResult'],
                 jdbc_treat_decimal_as_ints: Sequence['outputs.GetUsersUserParameterJdbcTreatDecimalAsIntResult'],
                 jdbc_treat_timestamp_ntz_as_utcs: Sequence['outputs.GetUsersUserParameterJdbcTreatTimestampNtzAsUtcResult'],
                 jdbc_use_session_timezones: Sequence['outputs.GetUsersUserParameterJdbcUseSessionTimezoneResult'],
                 json_indents: Sequence['outputs.GetUsersUserParameterJsonIndentResult'],
                 lock_timeouts: Sequence['outputs.GetUsersUserParameterLockTimeoutResult'],
                 log_levels: Sequence['outputs.GetUsersUserParameterLogLevelResult'],
                 multi_statement_counts: Sequence['outputs.GetUsersUserParameterMultiStatementCountResult'],
                 network_policies: Sequence['outputs.GetUsersUserParameterNetworkPolicyResult'],
                 noorder_sequence_as_defaults: Sequence['outputs.GetUsersUserParameterNoorderSequenceAsDefaultResult'],
                 odbc_treat_decimal_as_ints: Sequence['outputs.GetUsersUserParameterOdbcTreatDecimalAsIntResult'],
                 prevent_unload_to_internal_stages: Sequence['outputs.GetUsersUserParameterPreventUnloadToInternalStageResult'],
                 query_tags: Sequence['outputs.GetUsersUserParameterQueryTagResult'],
                 quoted_identifiers_ignore_cases: Sequence['outputs.GetUsersUserParameterQuotedIdentifiersIgnoreCaseResult'],
                 rows_per_resultsets: Sequence['outputs.GetUsersUserParameterRowsPerResultsetResult'],
                 s3_stage_vpce_dns_names: Sequence['outputs.GetUsersUserParameterS3StageVpceDnsNameResult'],
                 search_paths: Sequence['outputs.GetUsersUserParameterSearchPathResult'],
                 simulated_data_sharing_consumers: Sequence['outputs.GetUsersUserParameterSimulatedDataSharingConsumerResult'],
                 statement_queued_timeout_in_seconds: Sequence['outputs.GetUsersUserParameterStatementQueuedTimeoutInSecondResult'],
                 statement_timeout_in_seconds: Sequence['outputs.GetUsersUserParameterStatementTimeoutInSecondResult'],
                 strict_json_outputs: Sequence['outputs.GetUsersUserParameterStrictJsonOutputResult'],
                 time_input_formats: Sequence['outputs.GetUsersUserParameterTimeInputFormatResult'],
                 time_output_formats: Sequence['outputs.GetUsersUserParameterTimeOutputFormatResult'],
                 timestamp_day_is_always24hs: Sequence['outputs.GetUsersUserParameterTimestampDayIsAlways24hResult'],
                 timestamp_input_formats: Sequence['outputs.GetUsersUserParameterTimestampInputFormatResult'],
                 timestamp_ltz_output_formats: Sequence['outputs.GetUsersUserParameterTimestampLtzOutputFormatResult'],
                 timestamp_ntz_output_formats: Sequence['outputs.GetUsersUserParameterTimestampNtzOutputFormatResult'],
                 timestamp_output_formats: Sequence['outputs.GetUsersUserParameterTimestampOutputFormatResult'],
                 timestamp_type_mappings: Sequence['outputs.GetUsersUserParameterTimestampTypeMappingResult'],
                 timestamp_tz_output_formats: Sequence['outputs.GetUsersUserParameterTimestampTzOutputFormatResult'],
                 timezones: Sequence['outputs.GetUsersUserParameterTimezoneResult'],
                 trace_levels: Sequence['outputs.GetUsersUserParameterTraceLevelResult'],
                 transaction_abort_on_errors: Sequence['outputs.GetUsersUserParameterTransactionAbortOnErrorResult'],
                 transaction_default_isolation_levels: Sequence['outputs.GetUsersUserParameterTransactionDefaultIsolationLevelResult'],
                 two_digit_century_starts: Sequence['outputs.GetUsersUserParameterTwoDigitCenturyStartResult'],
                 unsupported_ddl_actions: Sequence['outputs.GetUsersUserParameterUnsupportedDdlActionResult'],
                 use_cached_results: Sequence['outputs.GetUsersUserParameterUseCachedResultResult'],
                 week_of_year_policies: Sequence['outputs.GetUsersUserParameterWeekOfYearPolicyResult'],
                 week_starts: Sequence['outputs.GetUsersUserParameterWeekStartResult']):
        pulumi.set(__self__, "abort_detached_queries", abort_detached_queries)
        pulumi.set(__self__, "autocommits", autocommits)
        pulumi.set(__self__, "binary_input_formats", binary_input_formats)
        pulumi.set(__self__, "binary_output_formats", binary_output_formats)
        pulumi.set(__self__, "client_memory_limits", client_memory_limits)
        pulumi.set(__self__, "client_metadata_request_use_connection_ctxes", client_metadata_request_use_connection_ctxes)
        pulumi.set(__self__, "client_prefetch_threads", client_prefetch_threads)
        pulumi.set(__self__, "client_result_chunk_sizes", client_result_chunk_sizes)
        pulumi.set(__self__, "client_result_column_case_insensitives", client_result_column_case_insensitives)
        pulumi.set(__self__, "client_session_keep_alive_heartbeat_frequencies", client_session_keep_alive_heartbeat_frequencies)
        pulumi.set(__self__, "client_session_keep_alives", client_session_keep_alives)
        pulumi.set(__self__, "client_timestamp_type_mappings", client_timestamp_type_mappings)
        pulumi.set(__self__, "date_input_formats", date_input_formats)
        pulumi.set(__self__, "date_output_formats", date_output_formats)
        pulumi.set(__self__, "enable_unload_physical_type_optimizations", enable_unload_physical_type_optimizations)
        pulumi.set(__self__, "enable_unredacted_query_syntax_errors", enable_unredacted_query_syntax_errors)
        pulumi.set(__self__, "error_on_nondeterministic_merges", error_on_nondeterministic_merges)
        pulumi.set(__self__, "error_on_nondeterministic_updates", error_on_nondeterministic_updates)
        pulumi.set(__self__, "geography_output_formats", geography_output_formats)
        pulumi.set(__self__, "geometry_output_formats", geometry_output_formats)
        pulumi.set(__self__, "jdbc_treat_decimal_as_ints", jdbc_treat_decimal_as_ints)
        pulumi.set(__self__, "jdbc_treat_timestamp_ntz_as_utcs", jdbc_treat_timestamp_ntz_as_utcs)
        pulumi.set(__self__, "jdbc_use_session_timezones", jdbc_use_session_timezones)
        pulumi.set(__self__, "json_indents", json_indents)
        pulumi.set(__self__, "lock_timeouts", lock_timeouts)
        pulumi.set(__self__, "log_levels", log_levels)
        pulumi.set(__self__, "multi_statement_counts", multi_statement_counts)
        pulumi.set(__self__, "network_policies", network_policies)
        pulumi.set(__self__, "noorder_sequence_as_defaults", noorder_sequence_as_defaults)
        pulumi.set(__self__, "odbc_treat_decimal_as_ints", odbc_treat_decimal_as_ints)
        pulumi.set(__self__, "prevent_unload_to_internal_stages", prevent_unload_to_internal_stages)
        pulumi.set(__self__, "query_tags", query_tags)
        pulumi.set(__self__, "quoted_identifiers_ignore_cases", quoted_identifiers_ignore_cases)
        pulumi.set(__self__, "rows_per_resultsets", rows_per_resultsets)
        pulumi.set(__self__, "s3_stage_vpce_dns_names", s3_stage_vpce_dns_names)
        pulumi.set(__self__, "search_paths", search_paths)
        pulumi.set(__self__, "simulated_data_sharing_consumers", simulated_data_sharing_consumers)
        pulumi.set(__self__, "statement_queued_timeout_in_seconds", statement_queued_timeout_in_seconds)
        pulumi.set(__self__, "statement_timeout_in_seconds", statement_timeout_in_seconds)
        pulumi.set(__self__, "strict_json_outputs", strict_json_outputs)
        pulumi.set(__self__, "time_input_formats", time_input_formats)
        pulumi.set(__self__, "time_output_formats", time_output_formats)
        pulumi.set(__self__, "timestamp_day_is_always24hs", timestamp_day_is_always24hs)
        pulumi.set(__self__, "timestamp_input_formats", timestamp_input_formats)
        pulumi.set(__self__, "timestamp_ltz_output_formats", timestamp_ltz_output_formats)
        pulumi.set(__self__, "timestamp_ntz_output_formats", timestamp_ntz_output_formats)
        pulumi.set(__self__, "timestamp_output_formats", timestamp_output_formats)
        pulumi.set(__self__, "timestamp_type_mappings", timestamp_type_mappings)
        pulumi.set(__self__, "timestamp_tz_output_formats", timestamp_tz_output_formats)
        pulumi.set(__self__, "timezones", timezones)
        pulumi.set(__self__, "trace_levels", trace_levels)
        pulumi.set(__self__, "transaction_abort_on_errors", transaction_abort_on_errors)
        pulumi.set(__self__, "transaction_default_isolation_levels", transaction_default_isolation_levels)
        pulumi.set(__self__, "two_digit_century_starts", two_digit_century_starts)
        pulumi.set(__self__, "unsupported_ddl_actions", unsupported_ddl_actions)
        pulumi.set(__self__, "use_cached_results", use_cached_results)
        pulumi.set(__self__, "week_of_year_policies", week_of_year_policies)
        pulumi.set(__self__, "week_starts", week_starts)

    @property
    @pulumi.getter(name="abortDetachedQueries")
    def abort_detached_queries(self) -> Sequence['outputs.GetUsersUserParameterAbortDetachedQueryResult']:
        return pulumi.get(self, "abort_detached_queries")

    @property
    @pulumi.getter
    def autocommits(self) -> Sequence['outputs.GetUsersUserParameterAutocommitResult']:
        return pulumi.get(self, "autocommits")

    @property
    @pulumi.getter(name="binaryInputFormats")
    def binary_input_formats(self) -> Sequence['outputs.GetUsersUserParameterBinaryInputFormatResult']:
        return pulumi.get(self, "binary_input_formats")

    @property
    @pulumi.getter(name="binaryOutputFormats")
    def binary_output_formats(self) -> Sequence['outputs.GetUsersUserParameterBinaryOutputFormatResult']:
        return pulumi.get(self, "binary_output_formats")

    @property
    @pulumi.getter(name="clientMemoryLimits")
    def client_memory_limits(self) -> Sequence['outputs.GetUsersUserParameterClientMemoryLimitResult']:
        return pulumi.get(self, "client_memory_limits")

    @property
    @pulumi.getter(name="clientMetadataRequestUseConnectionCtxes")
    def client_metadata_request_use_connection_ctxes(self) -> Sequence['outputs.GetUsersUserParameterClientMetadataRequestUseConnectionCtxResult']:
        return pulumi.get(self, "client_metadata_request_use_connection_ctxes")

    @property
    @pulumi.getter(name="clientPrefetchThreads")
    def client_prefetch_threads(self) -> Sequence['outputs.GetUsersUserParameterClientPrefetchThreadResult']:
        return pulumi.get(self, "client_prefetch_threads")

    @property
    @pulumi.getter(name="clientResultChunkSizes")
    def client_result_chunk_sizes(self) -> Sequence['outputs.GetUsersUserParameterClientResultChunkSizeResult']:
        return pulumi.get(self, "client_result_chunk_sizes")

    @property
    @pulumi.getter(name="clientResultColumnCaseInsensitives")
    def client_result_column_case_insensitives(self) -> Sequence['outputs.GetUsersUserParameterClientResultColumnCaseInsensitiveResult']:
        return pulumi.get(self, "client_result_column_case_insensitives")

    @property
    @pulumi.getter(name="clientSessionKeepAliveHeartbeatFrequencies")
    def client_session_keep_alive_heartbeat_frequencies(self) -> Sequence['outputs.GetUsersUserParameterClientSessionKeepAliveHeartbeatFrequencyResult']:
        return pulumi.get(self, "client_session_keep_alive_heartbeat_frequencies")

    @property
    @pulumi.getter(name="clientSessionKeepAlives")
    def client_session_keep_alives(self) -> Sequence['outputs.GetUsersUserParameterClientSessionKeepAlifeResult']:
        return pulumi.get(self, "client_session_keep_alives")

    @property
    @pulumi.getter(name="clientTimestampTypeMappings")
    def client_timestamp_type_mappings(self) -> Sequence['outputs.GetUsersUserParameterClientTimestampTypeMappingResult']:
        return pulumi.get(self, "client_timestamp_type_mappings")

    @property
    @pulumi.getter(name="dateInputFormats")
    def date_input_formats(self) -> Sequence['outputs.GetUsersUserParameterDateInputFormatResult']:
        return pulumi.get(self, "date_input_formats")

    @property
    @pulumi.getter(name="dateOutputFormats")
    def date_output_formats(self) -> Sequence['outputs.GetUsersUserParameterDateOutputFormatResult']:
        return pulumi.get(self, "date_output_formats")

    @property
    @pulumi.getter(name="enableUnloadPhysicalTypeOptimizations")
    def enable_unload_physical_type_optimizations(self) -> Sequence['outputs.GetUsersUserParameterEnableUnloadPhysicalTypeOptimizationResult']:
        return pulumi.get(self, "enable_unload_physical_type_optimizations")

    @property
    @pulumi.getter(name="enableUnredactedQuerySyntaxErrors")
    def enable_unredacted_query_syntax_errors(self) -> Sequence['outputs.GetUsersUserParameterEnableUnredactedQuerySyntaxErrorResult']:
        return pulumi.get(self, "enable_unredacted_query_syntax_errors")

    @property
    @pulumi.getter(name="errorOnNondeterministicMerges")
    def error_on_nondeterministic_merges(self) -> Sequence['outputs.GetUsersUserParameterErrorOnNondeterministicMergeResult']:
        return pulumi.get(self, "error_on_nondeterministic_merges")

    @property
    @pulumi.getter(name="errorOnNondeterministicUpdates")
    def error_on_nondeterministic_updates(self) -> Sequence['outputs.GetUsersUserParameterErrorOnNondeterministicUpdateResult']:
        return pulumi.get(self, "error_on_nondeterministic_updates")

    @property
    @pulumi.getter(name="geographyOutputFormats")
    def geography_output_formats(self) -> Sequence['outputs.GetUsersUserParameterGeographyOutputFormatResult']:
        return pulumi.get(self, "geography_output_formats")

    @property
    @pulumi.getter(name="geometryOutputFormats")
    def geometry_output_formats(self) -> Sequence['outputs.GetUsersUserParameterGeometryOutputFormatResult']:
        return pulumi.get(self, "geometry_output_formats")

    @property
    @pulumi.getter(name="jdbcTreatDecimalAsInts")
    def jdbc_treat_decimal_as_ints(self) -> Sequence['outputs.GetUsersUserParameterJdbcTreatDecimalAsIntResult']:
        return pulumi.get(self, "jdbc_treat_decimal_as_ints")

    @property
    @pulumi.getter(name="jdbcTreatTimestampNtzAsUtcs")
    def jdbc_treat_timestamp_ntz_as_utcs(self) -> Sequence['outputs.GetUsersUserParameterJdbcTreatTimestampNtzAsUtcResult']:
        return pulumi.get(self, "jdbc_treat_timestamp_ntz_as_utcs")

    @property
    @pulumi.getter(name="jdbcUseSessionTimezones")
    def jdbc_use_session_timezones(self) -> Sequence['outputs.GetUsersUserParameterJdbcUseSessionTimezoneResult']:
        return pulumi.get(self, "jdbc_use_session_timezones")

    @property
    @pulumi.getter(name="jsonIndents")
    def json_indents(self) -> Sequence['outputs.GetUsersUserParameterJsonIndentResult']:
        return pulumi.get(self, "json_indents")

    @property
    @pulumi.getter(name="lockTimeouts")
    def lock_timeouts(self) -> Sequence['outputs.GetUsersUserParameterLockTimeoutResult']:
        return pulumi.get(self, "lock_timeouts")

    @property
    @pulumi.getter(name="logLevels")
    def log_levels(self) -> Sequence['outputs.GetUsersUserParameterLogLevelResult']:
        return pulumi.get(self, "log_levels")

    @property
    @pulumi.getter(name="multiStatementCounts")
    def multi_statement_counts(self) -> Sequence['outputs.GetUsersUserParameterMultiStatementCountResult']:
        return pulumi.get(self, "multi_statement_counts")

    @property
    @pulumi.getter(name="networkPolicies")
    def network_policies(self) -> Sequence['outputs.GetUsersUserParameterNetworkPolicyResult']:
        return pulumi.get(self, "network_policies")

    @property
    @pulumi.getter(name="noorderSequenceAsDefaults")
    def noorder_sequence_as_defaults(self) -> Sequence['outputs.GetUsersUserParameterNoorderSequenceAsDefaultResult']:
        return pulumi.get(self, "noorder_sequence_as_defaults")

    @property
    @pulumi.getter(name="odbcTreatDecimalAsInts")
    def odbc_treat_decimal_as_ints(self) -> Sequence['outputs.GetUsersUserParameterOdbcTreatDecimalAsIntResult']:
        return pulumi.get(self, "odbc_treat_decimal_as_ints")

    @property
    @pulumi.getter(name="preventUnloadToInternalStages")
    def prevent_unload_to_internal_stages(self) -> Sequence['outputs.GetUsersUserParameterPreventUnloadToInternalStageResult']:
        return pulumi.get(self, "prevent_unload_to_internal_stages")

    @property
    @pulumi.getter(name="queryTags")
    def query_tags(self) -> Sequence['outputs.GetUsersUserParameterQueryTagResult']:
        return pulumi.get(self, "query_tags")

    @property
    @pulumi.getter(name="quotedIdentifiersIgnoreCases")
    def quoted_identifiers_ignore_cases(self) -> Sequence['outputs.GetUsersUserParameterQuotedIdentifiersIgnoreCaseResult']:
        return pulumi.get(self, "quoted_identifiers_ignore_cases")

    @property
    @pulumi.getter(name="rowsPerResultsets")
    def rows_per_resultsets(self) -> Sequence['outputs.GetUsersUserParameterRowsPerResultsetResult']:
        return pulumi.get(self, "rows_per_resultsets")

    @property
    @pulumi.getter(name="s3StageVpceDnsNames")
    def s3_stage_vpce_dns_names(self) -> Sequence['outputs.GetUsersUserParameterS3StageVpceDnsNameResult']:
        return pulumi.get(self, "s3_stage_vpce_dns_names")

    @property
    @pulumi.getter(name="searchPaths")
    def search_paths(self) -> Sequence['outputs.GetUsersUserParameterSearchPathResult']:
        return pulumi.get(self, "search_paths")

    @property
    @pulumi.getter(name="simulatedDataSharingConsumers")
    def simulated_data_sharing_consumers(self) -> Sequence['outputs.GetUsersUserParameterSimulatedDataSharingConsumerResult']:
        return pulumi.get(self, "simulated_data_sharing_consumers")

    @property
    @pulumi.getter(name="statementQueuedTimeoutInSeconds")
    def statement_queued_timeout_in_seconds(self) -> Sequence['outputs.GetUsersUserParameterStatementQueuedTimeoutInSecondResult']:
        return pulumi.get(self, "statement_queued_timeout_in_seconds")

    @property
    @pulumi.getter(name="statementTimeoutInSeconds")
    def statement_timeout_in_seconds(self) -> Sequence['outputs.GetUsersUserParameterStatementTimeoutInSecondResult']:
        return pulumi.get(self, "statement_timeout_in_seconds")

    @property
    @pulumi.getter(name="strictJsonOutputs")
    def strict_json_outputs(self) -> Sequence['outputs.GetUsersUserParameterStrictJsonOutputResult']:
        return pulumi.get(self, "strict_json_outputs")

    @property
    @pulumi.getter(name="timeInputFormats")
    def time_input_formats(self) -> Sequence['outputs.GetUsersUserParameterTimeInputFormatResult']:
        return pulumi.get(self, "time_input_formats")

    @property
    @pulumi.getter(name="timeOutputFormats")
    def time_output_formats(self) -> Sequence['outputs.GetUsersUserParameterTimeOutputFormatResult']:
        return pulumi.get(self, "time_output_formats")

    @property
    @pulumi.getter(name="timestampDayIsAlways24hs")
    def timestamp_day_is_always24hs(self) -> Sequence['outputs.GetUsersUserParameterTimestampDayIsAlways24hResult']:
        return pulumi.get(self, "timestamp_day_is_always24hs")

    @property
    @pulumi.getter(name="timestampInputFormats")
    def timestamp_input_formats(self) -> Sequence['outputs.GetUsersUserParameterTimestampInputFormatResult']:
        return pulumi.get(self, "timestamp_input_formats")

    @property
    @pulumi.getter(name="timestampLtzOutputFormats")
    def timestamp_ltz_output_formats(self) -> Sequence['outputs.GetUsersUserParameterTimestampLtzOutputFormatResult']:
        return pulumi.get(self, "timestamp_ltz_output_formats")

    @property
    @pulumi.getter(name="timestampNtzOutputFormats")
    def timestamp_ntz_output_formats(self) -> Sequence['outputs.GetUsersUserParameterTimestampNtzOutputFormatResult']:
        return pulumi.get(self, "timestamp_ntz_output_formats")

    @property
    @pulumi.getter(name="timestampOutputFormats")
    def timestamp_output_formats(self) -> Sequence['outputs.GetUsersUserParameterTimestampOutputFormatResult']:
        return pulumi.get(self, "timestamp_output_formats")

    @property
    @pulumi.getter(name="timestampTypeMappings")
    def timestamp_type_mappings(self) -> Sequence['outputs.GetUsersUserParameterTimestampTypeMappingResult']:
        return pulumi.get(self, "timestamp_type_mappings")

    @property
    @pulumi.getter(name="timestampTzOutputFormats")
    def timestamp_tz_output_formats(self) -> Sequence['outputs.GetUsersUserParameterTimestampTzOutputFormatResult']:
        return pulumi.get(self, "timestamp_tz_output_formats")

    @property
    @pulumi.getter
    def timezones(self) -> Sequence['outputs.GetUsersUserParameterTimezoneResult']:
        return pulumi.get(self, "timezones")

    @property
    @pulumi.getter(name="traceLevels")
    def trace_levels(self) -> Sequence['outputs.GetUsersUserParameterTraceLevelResult']:
        return pulumi.get(self, "trace_levels")

    @property
    @pulumi.getter(name="transactionAbortOnErrors")
    def transaction_abort_on_errors(self) -> Sequence['outputs.GetUsersUserParameterTransactionAbortOnErrorResult']:
        return pulumi.get(self, "transaction_abort_on_errors")

    @property
    @pulumi.getter(name="transactionDefaultIsolationLevels")
    def transaction_default_isolation_levels(self) -> Sequence['outputs.GetUsersUserParameterTransactionDefaultIsolationLevelResult']:
        return pulumi.get(self, "transaction_default_isolation_levels")

    @property
    @pulumi.getter(name="twoDigitCenturyStarts")
    def two_digit_century_starts(self) -> Sequence['outputs.GetUsersUserParameterTwoDigitCenturyStartResult']:
        return pulumi.get(self, "two_digit_century_starts")

    @property
    @pulumi.getter(name="unsupportedDdlActions")
    def unsupported_ddl_actions(self) -> Sequence['outputs.GetUsersUserParameterUnsupportedDdlActionResult']:
        return pulumi.get(self, "unsupported_ddl_actions")

    @property
    @pulumi.getter(name="useCachedResults")
    def use_cached_results(self) -> Sequence['outputs.GetUsersUserParameterUseCachedResultResult']:
        return pulumi.get(self, "use_cached_results")

    @property
    @pulumi.getter(name="weekOfYearPolicies")
    def week_of_year_policies(self) -> Sequence['outputs.GetUsersUserParameterWeekOfYearPolicyResult']:
        return pulumi.get(self, "week_of_year_policies")

    @property
    @pulumi.getter(name="weekStarts")
    def week_starts(self) -> Sequence['outputs.GetUsersUserParameterWeekStartResult']:
        return pulumi.get(self, "week_starts")


@pulumi.output_type
class GetUsersUserParameterAbortDetachedQueryResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterAutocommitResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterBinaryInputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterBinaryOutputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterClientMemoryLimitResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterClientMetadataRequestUseConnectionCtxResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterClientPrefetchThreadResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterClientResultChunkSizeResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterClientResultColumnCaseInsensitiveResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterClientSessionKeepAlifeResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterClientSessionKeepAliveHeartbeatFrequencyResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterClientTimestampTypeMappingResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterDateInputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterDateOutputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterEnableUnloadPhysicalTypeOptimizationResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterEnableUnredactedQuerySyntaxErrorResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterErrorOnNondeterministicMergeResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterErrorOnNondeterministicUpdateResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterGeographyOutputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterGeometryOutputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterJdbcTreatDecimalAsIntResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterJdbcTreatTimestampNtzAsUtcResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterJdbcUseSessionTimezoneResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterJsonIndentResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterLockTimeoutResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterLogLevelResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterMultiStatementCountResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterNetworkPolicyResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterNoorderSequenceAsDefaultResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterOdbcTreatDecimalAsIntResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterPreventUnloadToInternalStageResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterQueryTagResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterQuotedIdentifiersIgnoreCaseResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterRowsPerResultsetResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterS3StageVpceDnsNameResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterSearchPathResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterSimulatedDataSharingConsumerResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterStatementQueuedTimeoutInSecondResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterStatementTimeoutInSecondResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterStrictJsonOutputResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterTimeInputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterTimeOutputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterTimestampDayIsAlways24hResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterTimestampInputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterTimestampLtzOutputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterTimestampNtzOutputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterTimestampOutputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterTimestampTypeMappingResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterTimestampTzOutputFormatResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterTimezoneResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterTraceLevelResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterTransactionAbortOnErrorResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterTransactionDefaultIsolationLevelResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterTwoDigitCenturyStartResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterUnsupportedDdlActionResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterUseCachedResultResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterWeekOfYearPolicyResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserParameterWeekStartResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserShowOutputResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 created_on: str,
                 days_to_expiry: str,
                 default_namespace: str,
                 default_role: str,
                 default_secondary_roles: str,
                 default_warehouse: str,
                 disabled: bool,
                 display_name: str,
                 email: str,
                 expires_at_time: str,
                 ext_authn_duo: bool,
                 ext_authn_uid: str,
                 first_name: str,
                 has_mfa: bool,
                 has_password: bool,
                 has_rsa_public_key: bool,
                 last_name: str,
                 last_success_login: str,
                 locked_until_time: str,
                 login_name: str,
                 mins_to_bypass_mfa: str,
                 mins_to_unlock: str,
                 must_change_password: bool,
                 name: str,
                 owner: str,
                 snowflake_lock: bool,
                 type: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "days_to_expiry", days_to_expiry)
        pulumi.set(__self__, "default_namespace", default_namespace)
        pulumi.set(__self__, "default_role", default_role)
        pulumi.set(__self__, "default_secondary_roles", default_secondary_roles)
        pulumi.set(__self__, "default_warehouse", default_warehouse)
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "expires_at_time", expires_at_time)
        pulumi.set(__self__, "ext_authn_duo", ext_authn_duo)
        pulumi.set(__self__, "ext_authn_uid", ext_authn_uid)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "has_mfa", has_mfa)
        pulumi.set(__self__, "has_password", has_password)
        pulumi.set(__self__, "has_rsa_public_key", has_rsa_public_key)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "last_success_login", last_success_login)
        pulumi.set(__self__, "locked_until_time", locked_until_time)
        pulumi.set(__self__, "login_name", login_name)
        pulumi.set(__self__, "mins_to_bypass_mfa", mins_to_bypass_mfa)
        pulumi.set(__self__, "mins_to_unlock", mins_to_unlock)
        pulumi.set(__self__, "must_change_password", must_change_password)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "snowflake_lock", snowflake_lock)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="daysToExpiry")
    def days_to_expiry(self) -> str:
        return pulumi.get(self, "days_to_expiry")

    @property
    @pulumi.getter(name="defaultNamespace")
    def default_namespace(self) -> str:
        return pulumi.get(self, "default_namespace")

    @property
    @pulumi.getter(name="defaultRole")
    def default_role(self) -> str:
        return pulumi.get(self, "default_role")

    @property
    @pulumi.getter(name="defaultSecondaryRoles")
    def default_secondary_roles(self) -> str:
        return pulumi.get(self, "default_secondary_roles")

    @property
    @pulumi.getter(name="defaultWarehouse")
    def default_warehouse(self) -> str:
        return pulumi.get(self, "default_warehouse")

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="expiresAtTime")
    def expires_at_time(self) -> str:
        return pulumi.get(self, "expires_at_time")

    @property
    @pulumi.getter(name="extAuthnDuo")
    def ext_authn_duo(self) -> bool:
        return pulumi.get(self, "ext_authn_duo")

    @property
    @pulumi.getter(name="extAuthnUid")
    def ext_authn_uid(self) -> str:
        return pulumi.get(self, "ext_authn_uid")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="hasMfa")
    def has_mfa(self) -> bool:
        return pulumi.get(self, "has_mfa")

    @property
    @pulumi.getter(name="hasPassword")
    def has_password(self) -> bool:
        return pulumi.get(self, "has_password")

    @property
    @pulumi.getter(name="hasRsaPublicKey")
    def has_rsa_public_key(self) -> bool:
        return pulumi.get(self, "has_rsa_public_key")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="lastSuccessLogin")
    def last_success_login(self) -> str:
        return pulumi.get(self, "last_success_login")

    @property
    @pulumi.getter(name="lockedUntilTime")
    def locked_until_time(self) -> str:
        return pulumi.get(self, "locked_until_time")

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> str:
        return pulumi.get(self, "login_name")

    @property
    @pulumi.getter(name="minsToBypassMfa")
    def mins_to_bypass_mfa(self) -> str:
        return pulumi.get(self, "mins_to_bypass_mfa")

    @property
    @pulumi.getter(name="minsToUnlock")
    def mins_to_unlock(self) -> str:
        return pulumi.get(self, "mins_to_unlock")

    @property
    @pulumi.getter(name="mustChangePassword")
    def must_change_password(self) -> bool:
        return pulumi.get(self, "must_change_password")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="snowflakeLock")
    def snowflake_lock(self) -> bool:
        return pulumi.get(self, "snowflake_lock")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetViewsInResult(dict):
    def __init__(__self__, *,
                 account: Optional[bool] = None,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param bool account: Returns records for the entire account.
        :param str database: Returns records for the current database in use or for a specified database.
        :param str schema: Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def account(self) -> Optional[bool]:
        """
        Returns records for the entire account.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Returns records for the current database in use or for a specified database.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetViewsLimitResult(dict):
    def __init__(__self__, *,
                 rows: int,
                 from_: Optional[str] = None):
        """
        :param int rows: The maximum number of rows to return.
        :param str from_: Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        pulumi.set(__self__, "rows", rows)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)

    @property
    @pulumi.getter
    def rows(self) -> int:
        """
        The maximum number of rows to return.
        """
        return pulumi.get(self, "rows")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        return pulumi.get(self, "from_")


@pulumi.output_type
class GetViewsViewResult(dict):
    def __init__(__self__, *,
                 describe_outputs: Sequence['outputs.GetViewsViewDescribeOutputResult'],
                 show_outputs: Sequence['outputs.GetViewsViewShowOutputResult']):
        """
        :param Sequence['GetViewsViewDescribeOutputArgs'] describe_outputs: Holds the output of DESCRIBE VIEW.
        :param Sequence['GetViewsViewShowOutputArgs'] show_outputs: Holds the output of SHOW VIEWS.
        """
        pulumi.set(__self__, "describe_outputs", describe_outputs)
        pulumi.set(__self__, "show_outputs", show_outputs)

    @property
    @pulumi.getter(name="describeOutputs")
    def describe_outputs(self) -> Sequence['outputs.GetViewsViewDescribeOutputResult']:
        """
        Holds the output of DESCRIBE VIEW.
        """
        return pulumi.get(self, "describe_outputs")

    @property
    @pulumi.getter(name="showOutputs")
    def show_outputs(self) -> Sequence['outputs.GetViewsViewShowOutputResult']:
        """
        Holds the output of SHOW VIEWS.
        """
        return pulumi.get(self, "show_outputs")


@pulumi.output_type
class GetViewsViewDescribeOutputResult(dict):
    def __init__(__self__, *,
                 check: str,
                 comment: str,
                 default: str,
                 expression: str,
                 is_nullable: bool,
                 is_primary: bool,
                 is_unique: bool,
                 kind: str,
                 name: str,
                 policy_name: str,
                 privacy_domain: str,
                 type: str):
        pulumi.set(__self__, "check", check)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "is_nullable", is_nullable)
        pulumi.set(__self__, "is_primary", is_primary)
        pulumi.set(__self__, "is_unique", is_unique)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "privacy_domain", privacy_domain)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def check(self) -> str:
        return pulumi.get(self, "check")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="isNullable")
    def is_nullable(self) -> bool:
        return pulumi.get(self, "is_nullable")

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> bool:
        return pulumi.get(self, "is_primary")

    @property
    @pulumi.getter(name="isUnique")
    def is_unique(self) -> bool:
        return pulumi.get(self, "is_unique")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="privacyDomain")
    def privacy_domain(self) -> str:
        return pulumi.get(self, "privacy_domain")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetViewsViewShowOutputResult(dict):
    def __init__(__self__, *,
                 change_tracking: str,
                 comment: str,
                 created_on: str,
                 database_name: str,
                 is_materialized: bool,
                 is_secure: bool,
                 kind: str,
                 name: str,
                 owner: str,
                 owner_role_type: str,
                 reserved: str,
                 schema_name: str,
                 text: str):
        pulumi.set(__self__, "change_tracking", change_tracking)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "is_materialized", is_materialized)
        pulumi.set(__self__, "is_secure", is_secure)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "owner_role_type", owner_role_type)
        pulumi.set(__self__, "reserved", reserved)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter(name="changeTracking")
    def change_tracking(self) -> str:
        return pulumi.get(self, "change_tracking")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="isMaterialized")
    def is_materialized(self) -> bool:
        return pulumi.get(self, "is_materialized")

    @property
    @pulumi.getter(name="isSecure")
    def is_secure(self) -> bool:
        return pulumi.get(self, "is_secure")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> str:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter
    def reserved(self) -> str:
        return pulumi.get(self, "reserved")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter
    def text(self) -> str:
        return pulumi.get(self, "text")


@pulumi.output_type
class GetWarehousesWarehouseResult(dict):
    def __init__(__self__, *,
                 describe_outputs: Sequence['outputs.GetWarehousesWarehouseDescribeOutputResult'],
                 parameters: Sequence['outputs.GetWarehousesWarehouseParameterResult'],
                 show_outputs: Sequence['outputs.GetWarehousesWarehouseShowOutputResult']):
        """
        :param Sequence['GetWarehousesWarehouseDescribeOutputArgs'] describe_outputs: Holds the output of DESCRIBE WAREHOUSE.
        :param Sequence['GetWarehousesWarehouseParameterArgs'] parameters: Holds the output of SHOW PARAMETERS FOR WAREHOUSE.
        :param Sequence['GetWarehousesWarehouseShowOutputArgs'] show_outputs: Holds the output of SHOW WAREHOUSES.
        """
        pulumi.set(__self__, "describe_outputs", describe_outputs)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "show_outputs", show_outputs)

    @property
    @pulumi.getter(name="describeOutputs")
    def describe_outputs(self) -> Sequence['outputs.GetWarehousesWarehouseDescribeOutputResult']:
        """
        Holds the output of DESCRIBE WAREHOUSE.
        """
        return pulumi.get(self, "describe_outputs")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetWarehousesWarehouseParameterResult']:
        """
        Holds the output of SHOW PARAMETERS FOR WAREHOUSE.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="showOutputs")
    def show_outputs(self) -> Sequence['outputs.GetWarehousesWarehouseShowOutputResult']:
        """
        Holds the output of SHOW WAREHOUSES.
        """
        return pulumi.get(self, "show_outputs")


@pulumi.output_type
class GetWarehousesWarehouseDescribeOutputResult(dict):
    def __init__(__self__, *,
                 created_on: str,
                 kind: str,
                 name: str):
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetWarehousesWarehouseParameterResult(dict):
    def __init__(__self__, *,
                 max_concurrency_levels: Sequence['outputs.GetWarehousesWarehouseParameterMaxConcurrencyLevelResult'],
                 statement_queued_timeout_in_seconds: Sequence['outputs.GetWarehousesWarehouseParameterStatementQueuedTimeoutInSecondResult'],
                 statement_timeout_in_seconds: Sequence['outputs.GetWarehousesWarehouseParameterStatementTimeoutInSecondResult']):
        pulumi.set(__self__, "max_concurrency_levels", max_concurrency_levels)
        pulumi.set(__self__, "statement_queued_timeout_in_seconds", statement_queued_timeout_in_seconds)
        pulumi.set(__self__, "statement_timeout_in_seconds", statement_timeout_in_seconds)

    @property
    @pulumi.getter(name="maxConcurrencyLevels")
    def max_concurrency_levels(self) -> Sequence['outputs.GetWarehousesWarehouseParameterMaxConcurrencyLevelResult']:
        return pulumi.get(self, "max_concurrency_levels")

    @property
    @pulumi.getter(name="statementQueuedTimeoutInSeconds")
    def statement_queued_timeout_in_seconds(self) -> Sequence['outputs.GetWarehousesWarehouseParameterStatementQueuedTimeoutInSecondResult']:
        return pulumi.get(self, "statement_queued_timeout_in_seconds")

    @property
    @pulumi.getter(name="statementTimeoutInSeconds")
    def statement_timeout_in_seconds(self) -> Sequence['outputs.GetWarehousesWarehouseParameterStatementTimeoutInSecondResult']:
        return pulumi.get(self, "statement_timeout_in_seconds")


@pulumi.output_type
class GetWarehousesWarehouseParameterMaxConcurrencyLevelResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetWarehousesWarehouseParameterStatementQueuedTimeoutInSecondResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetWarehousesWarehouseParameterStatementTimeoutInSecondResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 key: str,
                 level: str,
                 value: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetWarehousesWarehouseShowOutputResult(dict):
    def __init__(__self__, *,
                 auto_resume: bool,
                 auto_suspend: int,
                 available: float,
                 comment: str,
                 created_on: str,
                 enable_query_acceleration: bool,
                 is_current: bool,
                 is_default: bool,
                 max_cluster_count: int,
                 min_cluster_count: int,
                 name: str,
                 other: float,
                 owner: str,
                 owner_role_type: str,
                 provisioning: float,
                 query_acceleration_max_scale_factor: int,
                 queued: int,
                 quiescing: float,
                 resource_monitor: str,
                 resumed_on: str,
                 running: int,
                 scaling_policy: str,
                 size: str,
                 started_clusters: int,
                 state: str,
                 type: str,
                 updated_on: str):
        pulumi.set(__self__, "auto_resume", auto_resume)
        pulumi.set(__self__, "auto_suspend", auto_suspend)
        pulumi.set(__self__, "available", available)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "enable_query_acceleration", enable_query_acceleration)
        pulumi.set(__self__, "is_current", is_current)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "max_cluster_count", max_cluster_count)
        pulumi.set(__self__, "min_cluster_count", min_cluster_count)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "other", other)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "owner_role_type", owner_role_type)
        pulumi.set(__self__, "provisioning", provisioning)
        pulumi.set(__self__, "query_acceleration_max_scale_factor", query_acceleration_max_scale_factor)
        pulumi.set(__self__, "queued", queued)
        pulumi.set(__self__, "quiescing", quiescing)
        pulumi.set(__self__, "resource_monitor", resource_monitor)
        pulumi.set(__self__, "resumed_on", resumed_on)
        pulumi.set(__self__, "running", running)
        pulumi.set(__self__, "scaling_policy", scaling_policy)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "started_clusters", started_clusters)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_on", updated_on)

    @property
    @pulumi.getter(name="autoResume")
    def auto_resume(self) -> bool:
        return pulumi.get(self, "auto_resume")

    @property
    @pulumi.getter(name="autoSuspend")
    def auto_suspend(self) -> int:
        return pulumi.get(self, "auto_suspend")

    @property
    @pulumi.getter
    def available(self) -> float:
        return pulumi.get(self, "available")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="enableQueryAcceleration")
    def enable_query_acceleration(self) -> bool:
        return pulumi.get(self, "enable_query_acceleration")

    @property
    @pulumi.getter(name="isCurrent")
    def is_current(self) -> bool:
        return pulumi.get(self, "is_current")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="maxClusterCount")
    def max_cluster_count(self) -> int:
        return pulumi.get(self, "max_cluster_count")

    @property
    @pulumi.getter(name="minClusterCount")
    def min_cluster_count(self) -> int:
        return pulumi.get(self, "min_cluster_count")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def other(self) -> float:
        return pulumi.get(self, "other")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> str:
        return pulumi.get(self, "owner_role_type")

    @property
    @pulumi.getter
    def provisioning(self) -> float:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter(name="queryAccelerationMaxScaleFactor")
    def query_acceleration_max_scale_factor(self) -> int:
        return pulumi.get(self, "query_acceleration_max_scale_factor")

    @property
    @pulumi.getter
    def queued(self) -> int:
        return pulumi.get(self, "queued")

    @property
    @pulumi.getter
    def quiescing(self) -> float:
        return pulumi.get(self, "quiescing")

    @property
    @pulumi.getter(name="resourceMonitor")
    def resource_monitor(self) -> str:
        return pulumi.get(self, "resource_monitor")

    @property
    @pulumi.getter(name="resumedOn")
    def resumed_on(self) -> str:
        return pulumi.get(self, "resumed_on")

    @property
    @pulumi.getter
    def running(self) -> int:
        return pulumi.get(self, "running")

    @property
    @pulumi.getter(name="scalingPolicy")
    def scaling_policy(self) -> str:
        return pulumi.get(self, "scaling_policy")

    @property
    @pulumi.getter
    def size(self) -> str:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="startedClusters")
    def started_clusters(self) -> int:
        return pulumi.get(self, "started_clusters")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedOn")
    def updated_on(self) -> str:
        return pulumi.get(self, "updated_on")


