# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetFailoverGroupsResult',
    'AwaitableGetFailoverGroupsResult',
    'get_failover_groups',
    'get_failover_groups_output',
]

@pulumi.output_type
class GetFailoverGroupsResult:
    """
    A collection of values returned by getFailoverGroups.
    """
    def __init__(__self__, failover_groups=None, id=None, in_account=None):
        if failover_groups and not isinstance(failover_groups, list):
            raise TypeError("Expected argument 'failover_groups' to be a list")
        pulumi.set(__self__, "failover_groups", failover_groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if in_account and not isinstance(in_account, str):
            raise TypeError("Expected argument 'in_account' to be a str")
        pulumi.set(__self__, "in_account", in_account)

    @property
    @pulumi.getter(name="failoverGroups")
    def failover_groups(self) -> Sequence['outputs.GetFailoverGroupsFailoverGroupResult']:
        """
        List of all the failover groups available in the system.
        """
        return pulumi.get(self, "failover_groups")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inAccount")
    def in_account(self) -> Optional[str]:
        """
        Specifies the identifier for the account
        """
        return pulumi.get(self, "in_account")


class AwaitableGetFailoverGroupsResult(GetFailoverGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFailoverGroupsResult(
            failover_groups=self.failover_groups,
            id=self.id,
            in_account=self.in_account)


def get_failover_groups(in_account: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFailoverGroupsResult:
    """
    Use this data source to access information about an existing resource.

    :param str in_account: Specifies the identifier for the account
    """
    __args__ = dict()
    __args__['inAccount'] = in_account
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('snowflake:index/getFailoverGroups:getFailoverGroups', __args__, opts=opts, typ=GetFailoverGroupsResult).value

    return AwaitableGetFailoverGroupsResult(
        failover_groups=pulumi.get(__ret__, 'failover_groups'),
        id=pulumi.get(__ret__, 'id'),
        in_account=pulumi.get(__ret__, 'in_account'))


@_utilities.lift_output_func(get_failover_groups)
def get_failover_groups_output(in_account: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFailoverGroupsResult]:
    """
    Use this data source to access information about an existing resource.

    :param str in_account: Specifies the identifier for the account
    """
    ...
