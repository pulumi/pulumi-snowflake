# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetDatabaseRolesResult',
    'AwaitableGetDatabaseRolesResult',
    'get_database_roles',
    'get_database_roles_output',
]

@pulumi.output_type
class GetDatabaseRolesResult:
    """
    A collection of values returned by getDatabaseRoles.
    """
    def __init__(__self__, database=None, database_roles=None, id=None):
        if database and not isinstance(database, str):
            raise TypeError("Expected argument 'database' to be a str")
        pulumi.set(__self__, "database", database)
        if database_roles and not isinstance(database_roles, list):
            raise TypeError("Expected argument 'database_roles' to be a list")
        pulumi.set(__self__, "database_roles", database_roles)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The database from which to return the database roles from.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="databaseRoles")
    def database_roles(self) -> Sequence['outputs.GetDatabaseRolesDatabaseRoleResult']:
        """
        Lists all the database roles in a specified database.
        """
        return pulumi.get(self, "database_roles")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetDatabaseRolesResult(GetDatabaseRolesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabaseRolesResult(
            database=self.database,
            database_roles=self.database_roles,
            id=self.id)


def get_database_roles(database: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabaseRolesResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_snowflake as snowflake

    db_roles = snowflake.get_database_roles(database="MYDB")
    ```


    :param str database: The database from which to return the database roles from.
    """
    __args__ = dict()
    __args__['database'] = database
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('snowflake:index/getDatabaseRoles:getDatabaseRoles', __args__, opts=opts, typ=GetDatabaseRolesResult).value

    return AwaitableGetDatabaseRolesResult(
        database=pulumi.get(__ret__, 'database'),
        database_roles=pulumi.get(__ret__, 'database_roles'),
        id=pulumi.get(__ret__, 'id'))


@_utilities.lift_output_func(get_database_roles)
def get_database_roles_output(database: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDatabaseRolesResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_snowflake as snowflake

    db_roles = snowflake.get_database_roles(database="MYDB")
    ```


    :param str database: The database from which to return the database roles from.
    """
    ...
