# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetDatabaseRoleResult',
    'AwaitableGetDatabaseRoleResult',
    'get_database_role',
    'get_database_role_output',
]

@pulumi.output_type
class GetDatabaseRoleResult:
    """
    A collection of values returned by getDatabaseRole.
    """
    def __init__(__self__, comment=None, database=None, id=None, name=None, owner=None):
        if comment and not isinstance(comment, str):
            raise TypeError("Expected argument 'comment' to be a str")
        pulumi.set(__self__, "comment", comment)
        if database and not isinstance(database, str):
            raise TypeError("Expected argument 'database' to be a str")
        pulumi.set(__self__, "database", database)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if owner and not isinstance(owner, str):
            raise TypeError("Expected argument 'owner' to be a str")
        pulumi.set(__self__, "owner", owner)

    @property
    @pulumi.getter
    def comment(self) -> str:
        """
        The comment on the role
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The database from which to return the database role from.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Database role name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        The owner of the role
        """
        return pulumi.get(self, "owner")


class AwaitableGetDatabaseRoleResult(GetDatabaseRoleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabaseRoleResult(
            comment=self.comment,
            database=self.database,
            id=self.id,
            name=self.name,
            owner=self.owner)


def get_database_role(database: Optional[str] = None,
                      name: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabaseRoleResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_snowflake as snowflake

    db_role = snowflake.get_database_role(database="MYDB",
        name="DBROLE")
    ```


    :param str database: The database from which to return the database role from.
    :param str name: Database role name.
    """
    __args__ = dict()
    __args__['database'] = database
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('snowflake:index/getDatabaseRole:getDatabaseRole', __args__, opts=opts, typ=GetDatabaseRoleResult).value

    return AwaitableGetDatabaseRoleResult(
        comment=pulumi.get(__ret__, 'comment'),
        database=pulumi.get(__ret__, 'database'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        owner=pulumi.get(__ret__, 'owner'))


@_utilities.lift_output_func(get_database_role)
def get_database_role_output(database: Optional[pulumi.Input[str]] = None,
                             name: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDatabaseRoleResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_snowflake as snowflake

    db_role = snowflake.get_database_role(database="MYDB",
        name="DBROLE")
    ```


    :param str database: The database from which to return the database role from.
    :param str name: Database role name.
    """
    ...
