# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetViewsResult',
    'AwaitableGetViewsResult',
    'get_views',
    'get_views_output',
]

@pulumi.output_type
class GetViewsResult:
    """
    A collection of values returned by getViews.
    """
    def __init__(__self__, id=None, in_=None, like=None, limit=None, starts_with=None, views=None, with_describe=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if in_ and not isinstance(in_, dict):
            raise TypeError("Expected argument 'in_' to be a dict")
        pulumi.set(__self__, "in_", in_)
        if like and not isinstance(like, str):
            raise TypeError("Expected argument 'like' to be a str")
        pulumi.set(__self__, "like", like)
        if limit and not isinstance(limit, dict):
            raise TypeError("Expected argument 'limit' to be a dict")
        pulumi.set(__self__, "limit", limit)
        if starts_with and not isinstance(starts_with, str):
            raise TypeError("Expected argument 'starts_with' to be a str")
        pulumi.set(__self__, "starts_with", starts_with)
        if views and not isinstance(views, list):
            raise TypeError("Expected argument 'views' to be a list")
        pulumi.set(__self__, "views", views)
        if with_describe and not isinstance(with_describe, bool):
            raise TypeError("Expected argument 'with_describe' to be a bool")
        pulumi.set(__self__, "with_describe", with_describe)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="in")
    def in_(self) -> Optional['outputs.GetViewsInResult']:
        return pulumi.get(self, "in_")

    @property
    @pulumi.getter
    def like(self) -> Optional[builtins.str]:
        return pulumi.get(self, "like")

    @property
    @pulumi.getter
    def limit(self) -> Optional['outputs.GetViewsLimitResult']:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="startsWith")
    def starts_with(self) -> Optional[builtins.str]:
        return pulumi.get(self, "starts_with")

    @property
    @pulumi.getter
    def views(self) -> Sequence['outputs.GetViewsViewResult']:
        return pulumi.get(self, "views")

    @property
    @pulumi.getter(name="withDescribe")
    def with_describe(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "with_describe")


class AwaitableGetViewsResult(GetViewsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetViewsResult(
            id=self.id,
            in_=self.in_,
            like=self.like,
            limit=self.limit,
            starts_with=self.starts_with,
            views=self.views,
            with_describe=self.with_describe)


def get_views(in_: Optional[Union['GetViewsInArgs', 'GetViewsInArgsDict']] = None,
              like: Optional[builtins.str] = None,
              limit: Optional[Union['GetViewsLimitArgs', 'GetViewsLimitArgsDict']] = None,
              starts_with: Optional[builtins.str] = None,
              with_describe: Optional[builtins.bool] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetViewsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['in'] = in_
    __args__['like'] = like
    __args__['limit'] = limit
    __args__['startsWith'] = starts_with
    __args__['withDescribe'] = with_describe
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('snowflake:index/getViews:getViews', __args__, opts=opts, typ=GetViewsResult).value

    return AwaitableGetViewsResult(
        id=pulumi.get(__ret__, 'id'),
        in_=pulumi.get(__ret__, 'in_'),
        like=pulumi.get(__ret__, 'like'),
        limit=pulumi.get(__ret__, 'limit'),
        starts_with=pulumi.get(__ret__, 'starts_with'),
        views=pulumi.get(__ret__, 'views'),
        with_describe=pulumi.get(__ret__, 'with_describe'))
def get_views_output(in_: Optional[pulumi.Input[Optional[Union['GetViewsInArgs', 'GetViewsInArgsDict']]]] = None,
                     like: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                     limit: Optional[pulumi.Input[Optional[Union['GetViewsLimitArgs', 'GetViewsLimitArgsDict']]]] = None,
                     starts_with: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                     with_describe: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetViewsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['in'] = in_
    __args__['like'] = like
    __args__['limit'] = limit
    __args__['startsWith'] = starts_with
    __args__['withDescribe'] = with_describe
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('snowflake:index/getViews:getViews', __args__, opts=opts, typ=GetViewsResult)
    return __ret__.apply(lambda __response__: GetViewsResult(
        id=pulumi.get(__response__, 'id'),
        in_=pulumi.get(__response__, 'in_'),
        like=pulumi.get(__response__, 'like'),
        limit=pulumi.get(__response__, 'limit'),
        starts_with=pulumi.get(__response__, 'starts_with'),
        views=pulumi.get(__response__, 'views'),
        with_describe=pulumi.get(__response__, 'with_describe')))
