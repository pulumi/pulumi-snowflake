# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetTasksResult',
    'AwaitableGetTasksResult',
    'get_tasks',
    'get_tasks_output',
]

@pulumi.output_type
class GetTasksResult:
    """
    A collection of values returned by getTasks.
    """
    def __init__(__self__, id=None, in_=None, like=None, limit=None, root_only=None, starts_with=None, tasks=None, with_parameters=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if in_ and not isinstance(in_, dict):
            raise TypeError("Expected argument 'in_' to be a dict")
        pulumi.set(__self__, "in_", in_)
        if like and not isinstance(like, str):
            raise TypeError("Expected argument 'like' to be a str")
        pulumi.set(__self__, "like", like)
        if limit and not isinstance(limit, dict):
            raise TypeError("Expected argument 'limit' to be a dict")
        pulumi.set(__self__, "limit", limit)
        if root_only and not isinstance(root_only, bool):
            raise TypeError("Expected argument 'root_only' to be a bool")
        pulumi.set(__self__, "root_only", root_only)
        if starts_with and not isinstance(starts_with, str):
            raise TypeError("Expected argument 'starts_with' to be a str")
        pulumi.set(__self__, "starts_with", starts_with)
        if tasks and not isinstance(tasks, list):
            raise TypeError("Expected argument 'tasks' to be a list")
        pulumi.set(__self__, "tasks", tasks)
        if with_parameters and not isinstance(with_parameters, bool):
            raise TypeError("Expected argument 'with_parameters' to be a bool")
        pulumi.set(__self__, "with_parameters", with_parameters)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="in")
    def in_(self) -> Optional['outputs.GetTasksInResult']:
        """
        IN clause to filter the list of objects
        """
        return pulumi.get(self, "in_")

    @property
    @pulumi.getter
    def like(self) -> Optional[str]:
        """
        Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
        """
        return pulumi.get(self, "like")

    @property
    @pulumi.getter
    def limit(self) -> Optional['outputs.GetTasksLimitResult']:
        """
        Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="rootOnly")
    def root_only(self) -> Optional[bool]:
        """
        Filters the command output to return only root tasks (tasks with no predecessors).
        """
        return pulumi.get(self, "root_only")

    @property
    @pulumi.getter(name="startsWith")
    def starts_with(self) -> Optional[str]:
        """
        Filters the output with **case-sensitive** characters indicating the beginning of the object name.
        """
        return pulumi.get(self, "starts_with")

    @property
    @pulumi.getter
    def tasks(self) -> Sequence['outputs.GetTasksTaskResult']:
        """
        Holds the aggregated output of all task details queries.
        """
        return pulumi.get(self, "tasks")

    @property
    @pulumi.getter(name="withParameters")
    def with_parameters(self) -> Optional[bool]:
        """
        Runs SHOW PARAMETERS FOR TASK for each task returned by SHOW TASK and saves the output to the parameters field as a map. By default this value is set to true.
        """
        return pulumi.get(self, "with_parameters")


class AwaitableGetTasksResult(GetTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTasksResult(
            id=self.id,
            in_=self.in_,
            like=self.like,
            limit=self.limit,
            root_only=self.root_only,
            starts_with=self.starts_with,
            tasks=self.tasks,
            with_parameters=self.with_parameters)


def get_tasks(in_: Optional[Union['GetTasksInArgs', 'GetTasksInArgsDict']] = None,
              like: Optional[str] = None,
              limit: Optional[Union['GetTasksLimitArgs', 'GetTasksLimitArgsDict']] = None,
              root_only: Optional[bool] = None,
              starts_with: Optional[str] = None,
              with_parameters: Optional[bool] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTasksResult:
    """
    !> **V1 release candidate** This data source was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the data source if needed. Any errors reported will be resolved with a higher priority. We encourage checking this data source out before the V1 release. Please follow the migration guide to use it.

    Data source used to get details of filtered tasks. Filtering is aligned with the current possibilities for [SHOW TASKS](https://docs.snowflake.com/en/sql-reference/sql/show-tasks) query. The results of SHOW and SHOW PARAMETERS IN are encapsulated in one output collection `tasks`.


    :param Union['GetTasksInArgs', 'GetTasksInArgsDict'] in_: IN clause to filter the list of objects
    :param str like: Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
    :param Union['GetTasksLimitArgs', 'GetTasksLimitArgsDict'] limit: Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.
    :param bool root_only: Filters the command output to return only root tasks (tasks with no predecessors).
    :param str starts_with: Filters the output with **case-sensitive** characters indicating the beginning of the object name.
    :param bool with_parameters: Runs SHOW PARAMETERS FOR TASK for each task returned by SHOW TASK and saves the output to the parameters field as a map. By default this value is set to true.
    """
    __args__ = dict()
    __args__['in'] = in_
    __args__['like'] = like
    __args__['limit'] = limit
    __args__['rootOnly'] = root_only
    __args__['startsWith'] = starts_with
    __args__['withParameters'] = with_parameters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('snowflake:index/getTasks:getTasks', __args__, opts=opts, typ=GetTasksResult).value

    return AwaitableGetTasksResult(
        id=pulumi.get(__ret__, 'id'),
        in_=pulumi.get(__ret__, 'in_'),
        like=pulumi.get(__ret__, 'like'),
        limit=pulumi.get(__ret__, 'limit'),
        root_only=pulumi.get(__ret__, 'root_only'),
        starts_with=pulumi.get(__ret__, 'starts_with'),
        tasks=pulumi.get(__ret__, 'tasks'),
        with_parameters=pulumi.get(__ret__, 'with_parameters'))
def get_tasks_output(in_: Optional[pulumi.Input[Optional[Union['GetTasksInArgs', 'GetTasksInArgsDict']]]] = None,
                     like: Optional[pulumi.Input[Optional[str]]] = None,
                     limit: Optional[pulumi.Input[Optional[Union['GetTasksLimitArgs', 'GetTasksLimitArgsDict']]]] = None,
                     root_only: Optional[pulumi.Input[Optional[bool]]] = None,
                     starts_with: Optional[pulumi.Input[Optional[str]]] = None,
                     with_parameters: Optional[pulumi.Input[Optional[bool]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTasksResult]:
    """
    !> **V1 release candidate** This data source was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the data source if needed. Any errors reported will be resolved with a higher priority. We encourage checking this data source out before the V1 release. Please follow the migration guide to use it.

    Data source used to get details of filtered tasks. Filtering is aligned with the current possibilities for [SHOW TASKS](https://docs.snowflake.com/en/sql-reference/sql/show-tasks) query. The results of SHOW and SHOW PARAMETERS IN are encapsulated in one output collection `tasks`.


    :param Union['GetTasksInArgs', 'GetTasksInArgsDict'] in_: IN clause to filter the list of objects
    :param str like: Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
    :param Union['GetTasksLimitArgs', 'GetTasksLimitArgsDict'] limit: Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.
    :param bool root_only: Filters the command output to return only root tasks (tasks with no predecessors).
    :param str starts_with: Filters the output with **case-sensitive** characters indicating the beginning of the object name.
    :param bool with_parameters: Runs SHOW PARAMETERS FOR TASK for each task returned by SHOW TASK and saves the output to the parameters field as a map. By default this value is set to true.
    """
    __args__ = dict()
    __args__['in'] = in_
    __args__['like'] = like
    __args__['limit'] = limit
    __args__['rootOnly'] = root_only
    __args__['startsWith'] = starts_with
    __args__['withParameters'] = with_parameters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('snowflake:index/getTasks:getTasks', __args__, opts=opts, typ=GetTasksResult)
    return __ret__.apply(lambda __response__: GetTasksResult(
        id=pulumi.get(__response__, 'id'),
        in_=pulumi.get(__response__, 'in_'),
        like=pulumi.get(__response__, 'like'),
        limit=pulumi.get(__response__, 'limit'),
        root_only=pulumi.get(__response__, 'root_only'),
        starts_with=pulumi.get(__response__, 'starts_with'),
        tasks=pulumi.get(__response__, 'tasks'),
        with_parameters=pulumi.get(__response__, 'with_parameters')))
