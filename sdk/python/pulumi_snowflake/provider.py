# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._inputs import *

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 account: Optional[pulumi.Input[str]] = None,
                 authenticator: Optional[pulumi.Input[str]] = None,
                 browser_auth: Optional[pulumi.Input[bool]] = None,
                 client_ip: Optional[pulumi.Input[str]] = None,
                 client_request_mfa_token: Optional[pulumi.Input[bool]] = None,
                 client_store_temporary_credential: Optional[pulumi.Input[bool]] = None,
                 client_timeout: Optional[pulumi.Input[int]] = None,
                 disable_query_context_cache: Optional[pulumi.Input[bool]] = None,
                 disable_telemetry: Optional[pulumi.Input[bool]] = None,
                 external_browser_timeout: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 insecure_mode: Optional[pulumi.Input[bool]] = None,
                 jwt_client_timeout: Optional[pulumi.Input[int]] = None,
                 jwt_expire_timeout: Optional[pulumi.Input[int]] = None,
                 keep_session_alive: Optional[pulumi.Input[bool]] = None,
                 login_timeout: Optional[pulumi.Input[int]] = None,
                 oauth_access_token: Optional[pulumi.Input[str]] = None,
                 oauth_client_id: Optional[pulumi.Input[str]] = None,
                 oauth_client_secret: Optional[pulumi.Input[str]] = None,
                 oauth_endpoint: Optional[pulumi.Input[str]] = None,
                 oauth_redirect_url: Optional[pulumi.Input[str]] = None,
                 oauth_refresh_token: Optional[pulumi.Input[str]] = None,
                 okta_url: Optional[pulumi.Input[str]] = None,
                 oscp_fail_open: Optional[pulumi.Input[bool]] = None,
                 params: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 passcode: Optional[pulumi.Input[str]] = None,
                 passcode_in_password: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 private_key_passphrase: Optional[pulumi.Input[str]] = None,
                 private_key_path: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 request_timeout: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 session_params: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 token_accessor: Optional[pulumi.Input['ProviderTokenAccessorArgs']] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 validate_default_parameters: Optional[pulumi.Input[bool]] = None,
                 warehouse: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[str] account: Specifies your Snowflake account identifier assigned, by Snowflake. For information about account identifiers, see the
               [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html). Can also be sourced
               from the `SNOWFLAKE_ACCOUNT` environment variable. Required unless using `profile`.
        :param pulumi.Input[str] authenticator: Specifies the [authentication type](https://pkg.go.dev/github.com/snowflakedb/gosnowflake#AuthType) to use when
               connecting to Snowflake. Valid values include: Snowflake, OAuth, ExternalBrowser, Okta, JWT, TokenAccessor,
               UsernamePasswordMFA. Can also be sourced from the `SNOWFLAKE_AUTHENTICATOR` environment variable.
        :param pulumi.Input[bool] browser_auth: Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_USE_BROWSER_AUTH` environment variable.
        :param pulumi.Input[str] client_ip: IP address for network checks. Can also be sourced from the `SNOWFLAKE_CLIENT_IP` environment variable.
        :param pulumi.Input[bool] client_request_mfa_token: When true the MFA token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also
               be sourced from the `SNOWFLAKE_CLIENT_REQUEST_MFA_TOKEN` environment variable.
        :param pulumi.Input[bool] client_store_temporary_credential: When true the ID token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be
               sourced from the `SNOWFLAKE_CLIENT_STORE_TEMPORARY_CREDENTIAL` environment variable.
        :param pulumi.Input[int] client_timeout: The timeout in seconds for the client to complete the authentication. Default is 900 seconds. Can also be sourced from
               the `SNOWFLAKE_CLIENT_TIMEOUT` environment variable.
        :param pulumi.Input[bool] disable_query_context_cache: Should HTAP query context cache be disabled. Can also be sourced from the `SNOWFLAKE_DISABLE_QUERY_CONTEXT_CACHE`
               environment variable.
        :param pulumi.Input[bool] disable_telemetry: Indicates whether to disable telemetry. Can also be sourced from the `SNOWFLAKE_DISABLE_TELEMETRY` environment variable.
        :param pulumi.Input[int] external_browser_timeout: The timeout in seconds for the external browser to complete the authentication. Default is 120 seconds. Can also be
               sourced from the `SNOWFLAKE_EXTERNAL_BROWSER_TIMEOUT` environment variable.
        :param pulumi.Input[str] host: Supports passing in a custom host value to the snowflake go driver for use with privatelink. Can also be sourced from
               the `SNOWFLAKE_HOST` environment variable.
        :param pulumi.Input[bool] insecure_mode: If true, bypass the Online Certificate Status Protocol (OCSP) certificate revocation check. IMPORTANT: Change the
               default value for testing or emergency situations only. Can also be sourced from the `SNOWFLAKE_INSECURE_MODE`
               environment variable.
        :param pulumi.Input[int] jwt_client_timeout: The timeout in seconds for the JWT client to complete the authentication. Default is 10 seconds. Can also be sourced
               from the `SNOWFLAKE_JWT_CLIENT_TIMEOUT` environment variable.
        :param pulumi.Input[int] jwt_expire_timeout: JWT expire after timeout in seconds. Can also be sourced from the `SNOWFLAKE_JWT_EXPIRE_TIMEOUT` environment variable.
        :param pulumi.Input[bool] keep_session_alive: Enables the session to persist even after the connection is closed. Can also be sourced from the
               `SNOWFLAKE_KEEP_SESSION_ALIVE` environment variable.
        :param pulumi.Input[int] login_timeout: Login retry timeout EXCLUDING network roundtrip and read out http response. Can also be sourced from the
               `SNOWFLAKE_LOGIN_TIMEOUT` environment variable.
        :param pulumi.Input[str] oauth_access_token: Token for use with OAuth. Generating the token is left to other tools. Cannot be used with `browser_auth`,
               `private_key_path`, `oauth_refresh_token` or `password`. Can also be sourced from `SNOWFLAKE_OAUTH_ACCESS_TOKEN`
               environment variable.
        :param pulumi.Input[str] oauth_client_id: Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_CLIENT_ID` environment variable.
        :param pulumi.Input[str] oauth_client_secret: Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_CLIENT_SECRET` environment
               variable.
        :param pulumi.Input[str] oauth_endpoint: Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_ENDPOINT` environment variable.
        :param pulumi.Input[str] oauth_redirect_url: Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_REDIRECT_URL` environment
               variable.
        :param pulumi.Input[str] oauth_refresh_token: Token for use with OAuth. Setup and generation of the token is left to other tools. Should be used in conjunction with
               `oauth_client_id`, `oauth_client_secret`, `oauth_endpoint`, `oauth_redirect_url`. Cannot be used with `browser_auth`,
               `private_key_path`, `oauth_access_token` or `password`. Can also be sourced from `SNOWFLAKE_OAUTH_REFRESH_TOKEN`
               environment variable.
        :param pulumi.Input[str] okta_url: The URL of the Okta server. e.g. https://example.okta.com. Can also be sourced from the `SNOWFLAKE_OKTA_URL` environment
               variable.
        :param pulumi.Input[bool] oscp_fail_open: True represents OCSP fail open mode. False represents OCSP fail closed mode. Fail open true by default. Can also be
               sourced from the `SNOWFLAKE_OCSP_FAIL_OPEN` environment variable.
        :param pulumi.Input[Mapping[str, Any]] params: Sets other connection (i.e. session) parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters)
        :param pulumi.Input[str] passcode: Specifies the passcode provided by Duo when using multi-factor authentication (MFA) for login. Can also be sourced from
               the `SNOWFLAKE_PASSCODE` environment variable.
        :param pulumi.Input[bool] passcode_in_password: False by default. Set to true if the MFA passcode is embedded in the login password. Appends the MFA passcode to the end
               of the password. Can also be sourced from the `SNOWFLAKE_PASSCODE_IN_PASSWORD` environment variable.
        :param pulumi.Input[str] password: Password for username+password auth. Cannot be used with `browser_auth` or `private_key_path`. Can also be sourced from
               the `SNOWFLAKE_PASSWORD` environment variable.
        :param pulumi.Input[int] port: Support custom port values to snowflake go driver for use with privatelink. Can also be sourced from the
               `SNOWFLAKE_PORT` environment variable.
        :param pulumi.Input[str] private_key: Private Key for username+private-key auth. Cannot be used with `browser_auth` or `password`. Can also be sourced from
               `SNOWFLAKE_PRIVATE_KEY` environment variable.
        :param pulumi.Input[str] private_key_passphrase: Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and
               des-ede3-cbc. Can also be sourced from `SNOWFLAKE_PRIVATE_KEY_PASSPHRASE` environment variable.
        :param pulumi.Input[str] private_key_path: Path to a private key for using keypair authentication. Cannot be used with `browser_auth`, `oauth_access_token` or
               `password`. Can also be sourced from `SNOWFLAKE_PRIVATE_KEY_PATH` environment variable.
        :param pulumi.Input[str] profile: Sets the profile to read from ~/.snowflake/config file. Can also be sourced from the `SNOWFLAKE_PROFILE` environment
               variable.
        :param pulumi.Input[str] protocol: Either http or https, defaults to https. Can also be sourced from the `SNOWFLAKE_PROTOCOL` environment variable.
        :param pulumi.Input[str] region: Snowflake region, such as "eu-central-1", with this parameter. However, since this parameter is deprecated, it is best
               to specify the region as part of the account parameter. For details, see the description of the account parameter.
               [Snowflake region](https://docs.snowflake.com/en/user-guide/intro-regions.html) to use. Required if using the [legacy
               format for the `account`
               identifier](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#format-2-legacy-account-locator-in-a-region)
               in the form of `<cloud_region_id>.<cloud>`. Can also be sourced from the `SNOWFLAKE_REGION` environment variable.
        :param pulumi.Input[int] request_timeout: request retry timeout EXCLUDING network roundtrip and read out http response. Can also be sourced from the
               `SNOWFLAKE_REQUEST_TIMEOUT` environment variable.
        :param pulumi.Input[str] role: Specifies the role to use by default for accessing Snowflake objects in the client session. Can also be sourced from the
               `SNOWFLAKE_ROLE` environment variable. .
        :param pulumi.Input[Mapping[str, Any]] session_params: Sets session parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters)
        :param pulumi.Input[str] token: Token to use for OAuth and other forms of token based auth. Can also be sourced from the `SNOWFLAKE_TOKEN` environment
               variable.
        :param pulumi.Input[str] user: Username. Can also be sourced from the `SNOWFLAKE_USER` environment variable. Required unless using `profile`.
        :param pulumi.Input[str] username: Username for username+password authentication. Can also be sourced from the `SNOWFLAKE_USERNAME` environment variable.
               Required unless using `profile`.
        :param pulumi.Input[bool] validate_default_parameters: If true, disables the validation checks for Database, Schema, Warehouse and Role at the time a connection is
               established. Can also be sourced from the `SNOWFLAKE_VALIDATE_DEFAULT_PARAMETERS` environment variable.
        :param pulumi.Input[str] warehouse: Specifies the virtual warehouse to use by default for queries, loading, etc. in the client session. Can also be sourced
               from the `SNOWFLAKE_WAREHOUSE` environment variable.
        """
        if account is None:
            account = _utilities.get_env('SNOWFLAKE_ACCOUNT')
        if account is not None:
            pulumi.set(__self__, "account", account)
        if authenticator is not None:
            pulumi.set(__self__, "authenticator", authenticator)
        if browser_auth is not None:
            warnings.warn("""Use `authenticator` instead""", DeprecationWarning)
            pulumi.log.warn("""browser_auth is deprecated: Use `authenticator` instead""")
        if browser_auth is None:
            browser_auth = _utilities.get_env_bool('SNOWFLAKE_USE_BROWSER_AUTH')
        if browser_auth is not None:
            pulumi.set(__self__, "browser_auth", browser_auth)
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if client_request_mfa_token is not None:
            pulumi.set(__self__, "client_request_mfa_token", client_request_mfa_token)
        if client_store_temporary_credential is not None:
            pulumi.set(__self__, "client_store_temporary_credential", client_store_temporary_credential)
        if client_timeout is not None:
            pulumi.set(__self__, "client_timeout", client_timeout)
        if disable_query_context_cache is not None:
            pulumi.set(__self__, "disable_query_context_cache", disable_query_context_cache)
        if disable_telemetry is not None:
            pulumi.set(__self__, "disable_telemetry", disable_telemetry)
        if external_browser_timeout is not None:
            pulumi.set(__self__, "external_browser_timeout", external_browser_timeout)
        if host is None:
            host = _utilities.get_env('SNOWFLAKE_HOST')
        if host is not None:
            pulumi.set(__self__, "host", host)
        if insecure_mode is not None:
            pulumi.set(__self__, "insecure_mode", insecure_mode)
        if jwt_client_timeout is not None:
            pulumi.set(__self__, "jwt_client_timeout", jwt_client_timeout)
        if jwt_expire_timeout is not None:
            pulumi.set(__self__, "jwt_expire_timeout", jwt_expire_timeout)
        if keep_session_alive is not None:
            pulumi.set(__self__, "keep_session_alive", keep_session_alive)
        if login_timeout is not None:
            pulumi.set(__self__, "login_timeout", login_timeout)
        if oauth_access_token is not None:
            warnings.warn("""Use `token` instead""", DeprecationWarning)
            pulumi.log.warn("""oauth_access_token is deprecated: Use `token` instead""")
        if oauth_access_token is None:
            oauth_access_token = _utilities.get_env('SNOWFLAKE_OAUTH_ACCESS_TOKEN')
        if oauth_access_token is not None:
            pulumi.set(__self__, "oauth_access_token", oauth_access_token)
        if oauth_client_id is not None:
            warnings.warn("""Use `token_accessor.0.client_id` instead""", DeprecationWarning)
            pulumi.log.warn("""oauth_client_id is deprecated: Use `token_accessor.0.client_id` instead""")
        if oauth_client_id is None:
            oauth_client_id = _utilities.get_env('SNOWFLAKE_OAUTH_CLIENT_ID')
        if oauth_client_id is not None:
            pulumi.set(__self__, "oauth_client_id", oauth_client_id)
        if oauth_client_secret is not None:
            warnings.warn("""Use `token_accessor.0.client_secret` instead""", DeprecationWarning)
            pulumi.log.warn("""oauth_client_secret is deprecated: Use `token_accessor.0.client_secret` instead""")
        if oauth_client_secret is None:
            oauth_client_secret = _utilities.get_env('SNOWFLAKE_OAUTH_CLIENT_SECRET')
        if oauth_client_secret is not None:
            pulumi.set(__self__, "oauth_client_secret", oauth_client_secret)
        if oauth_endpoint is not None:
            warnings.warn("""Use `token_accessor.0.token_endpoint` instead""", DeprecationWarning)
            pulumi.log.warn("""oauth_endpoint is deprecated: Use `token_accessor.0.token_endpoint` instead""")
        if oauth_endpoint is None:
            oauth_endpoint = _utilities.get_env('SNOWFLAKE_OAUTH_ENDPOINT')
        if oauth_endpoint is not None:
            pulumi.set(__self__, "oauth_endpoint", oauth_endpoint)
        if oauth_redirect_url is not None:
            warnings.warn("""Use `token_accessor.0.redirect_uri` instead""", DeprecationWarning)
            pulumi.log.warn("""oauth_redirect_url is deprecated: Use `token_accessor.0.redirect_uri` instead""")
        if oauth_redirect_url is None:
            oauth_redirect_url = _utilities.get_env('SNOWFLAKE_OAUTH_REDIRECT_URL')
        if oauth_redirect_url is not None:
            pulumi.set(__self__, "oauth_redirect_url", oauth_redirect_url)
        if oauth_refresh_token is not None:
            warnings.warn("""Use `token_accessor.0.refresh_token` instead""", DeprecationWarning)
            pulumi.log.warn("""oauth_refresh_token is deprecated: Use `token_accessor.0.refresh_token` instead""")
        if oauth_refresh_token is None:
            oauth_refresh_token = _utilities.get_env('SNOWFLAKE_OAUTH_REFRESH_TOKEN')
        if oauth_refresh_token is not None:
            pulumi.set(__self__, "oauth_refresh_token", oauth_refresh_token)
        if okta_url is not None:
            pulumi.set(__self__, "okta_url", okta_url)
        if oscp_fail_open is not None:
            pulumi.set(__self__, "oscp_fail_open", oscp_fail_open)
        if params is not None:
            pulumi.set(__self__, "params", params)
        if passcode is not None:
            pulumi.set(__self__, "passcode", passcode)
        if passcode_in_password is not None:
            pulumi.set(__self__, "passcode_in_password", passcode_in_password)
        if password is None:
            password = _utilities.get_env('SNOWFLAKE_PASSWORD')
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is None:
            port = _utilities.get_env_int('SNOWFLAKE_PORT')
        if port is not None:
            pulumi.set(__self__, "port", port)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if private_key_passphrase is None:
            private_key_passphrase = _utilities.get_env('SNOWFLAKE_PRIVATE_KEY_PASSPHRASE')
        if private_key_passphrase is not None:
            pulumi.set(__self__, "private_key_passphrase", private_key_passphrase)
        if private_key_path is not None:
            warnings.warn("""use the [file Function](https://developer.hashicorp.com/terraform/language/functions/file) instead""", DeprecationWarning)
            pulumi.log.warn("""private_key_path is deprecated: use the [file Function](https://developer.hashicorp.com/terraform/language/functions/file) instead""")
        if private_key_path is None:
            private_key_path = _utilities.get_env('SNOWFLAKE_PRIVATE_KEY_PATH')
        if private_key_path is not None:
            pulumi.set(__self__, "private_key_path", private_key_path)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if protocol is None:
            protocol = _utilities.get_env('SNOWFLAKE_PROTOCOL')
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if region is not None:
            warnings.warn("""Specify the region as part of the account parameter""", DeprecationWarning)
            pulumi.log.warn("""region is deprecated: Specify the region as part of the account parameter""")
        if region is None:
            region = _utilities.get_env('SNOWFLAKE_REGION')
        if region is not None:
            pulumi.set(__self__, "region", region)
        if request_timeout is not None:
            pulumi.set(__self__, "request_timeout", request_timeout)
        if role is None:
            role = _utilities.get_env('SNOWFLAKE_ROLE')
        if role is not None:
            pulumi.set(__self__, "role", role)
        if session_params is not None:
            warnings.warn("""Use `params` instead""", DeprecationWarning)
            pulumi.log.warn("""session_params is deprecated: Use `params` instead""")
        if session_params is not None:
            pulumi.set(__self__, "session_params", session_params)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if token_accessor is not None:
            pulumi.set(__self__, "token_accessor", token_accessor)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if username is not None:
            warnings.warn("""Use `user` instead of `username`""", DeprecationWarning)
            pulumi.log.warn("""username is deprecated: Use `user` instead of `username`""")
        if username is None:
            username = _utilities.get_env('SNOWFLAKE_USER')
        if username is not None:
            pulumi.set(__self__, "username", username)
        if validate_default_parameters is not None:
            pulumi.set(__self__, "validate_default_parameters", validate_default_parameters)
        if warehouse is None:
            warehouse = _utilities.get_env('SNOWFLAKE_WAREHOUSE')
        if warehouse is not None:
            pulumi.set(__self__, "warehouse", warehouse)

    @property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies your Snowflake account identifier assigned, by Snowflake. For information about account identifiers, see the
        [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html). Can also be sourced
        from the `SNOWFLAKE_ACCOUNT` environment variable. Required unless using `profile`.
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter
    def authenticator(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the [authentication type](https://pkg.go.dev/github.com/snowflakedb/gosnowflake#AuthType) to use when
        connecting to Snowflake. Valid values include: Snowflake, OAuth, ExternalBrowser, Okta, JWT, TokenAccessor,
        UsernamePasswordMFA. Can also be sourced from the `SNOWFLAKE_AUTHENTICATOR` environment variable.
        """
        return pulumi.get(self, "authenticator")

    @authenticator.setter
    def authenticator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authenticator", value)

    @property
    @pulumi.getter(name="browserAuth")
    def browser_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_USE_BROWSER_AUTH` environment variable.
        """
        warnings.warn("""Use `authenticator` instead""", DeprecationWarning)
        pulumi.log.warn("""browser_auth is deprecated: Use `authenticator` instead""")

        return pulumi.get(self, "browser_auth")

    @browser_auth.setter
    def browser_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "browser_auth", value)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address for network checks. Can also be sourced from the `SNOWFLAKE_CLIENT_IP` environment variable.
        """
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ip", value)

    @property
    @pulumi.getter(name="clientRequestMfaToken")
    def client_request_mfa_token(self) -> Optional[pulumi.Input[bool]]:
        """
        When true the MFA token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also
        be sourced from the `SNOWFLAKE_CLIENT_REQUEST_MFA_TOKEN` environment variable.
        """
        return pulumi.get(self, "client_request_mfa_token")

    @client_request_mfa_token.setter
    def client_request_mfa_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "client_request_mfa_token", value)

    @property
    @pulumi.getter(name="clientStoreTemporaryCredential")
    def client_store_temporary_credential(self) -> Optional[pulumi.Input[bool]]:
        """
        When true the ID token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be
        sourced from the `SNOWFLAKE_CLIENT_STORE_TEMPORARY_CREDENTIAL` environment variable.
        """
        return pulumi.get(self, "client_store_temporary_credential")

    @client_store_temporary_credential.setter
    def client_store_temporary_credential(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "client_store_temporary_credential", value)

    @property
    @pulumi.getter(name="clientTimeout")
    def client_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The timeout in seconds for the client to complete the authentication. Default is 900 seconds. Can also be sourced from
        the `SNOWFLAKE_CLIENT_TIMEOUT` environment variable.
        """
        return pulumi.get(self, "client_timeout")

    @client_timeout.setter
    def client_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_timeout", value)

    @property
    @pulumi.getter(name="disableQueryContextCache")
    def disable_query_context_cache(self) -> Optional[pulumi.Input[bool]]:
        """
        Should HTAP query context cache be disabled. Can also be sourced from the `SNOWFLAKE_DISABLE_QUERY_CONTEXT_CACHE`
        environment variable.
        """
        return pulumi.get(self, "disable_query_context_cache")

    @disable_query_context_cache.setter
    def disable_query_context_cache(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_query_context_cache", value)

    @property
    @pulumi.getter(name="disableTelemetry")
    def disable_telemetry(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to disable telemetry. Can also be sourced from the `SNOWFLAKE_DISABLE_TELEMETRY` environment variable.
        """
        return pulumi.get(self, "disable_telemetry")

    @disable_telemetry.setter
    def disable_telemetry(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_telemetry", value)

    @property
    @pulumi.getter(name="externalBrowserTimeout")
    def external_browser_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The timeout in seconds for the external browser to complete the authentication. Default is 120 seconds. Can also be
        sourced from the `SNOWFLAKE_EXTERNAL_BROWSER_TIMEOUT` environment variable.
        """
        return pulumi.get(self, "external_browser_timeout")

    @external_browser_timeout.setter
    def external_browser_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "external_browser_timeout", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Supports passing in a custom host value to the snowflake go driver for use with privatelink. Can also be sourced from
        the `SNOWFLAKE_HOST` environment variable.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="insecureMode")
    def insecure_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, bypass the Online Certificate Status Protocol (OCSP) certificate revocation check. IMPORTANT: Change the
        default value for testing or emergency situations only. Can also be sourced from the `SNOWFLAKE_INSECURE_MODE`
        environment variable.
        """
        return pulumi.get(self, "insecure_mode")

    @insecure_mode.setter
    def insecure_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure_mode", value)

    @property
    @pulumi.getter(name="jwtClientTimeout")
    def jwt_client_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The timeout in seconds for the JWT client to complete the authentication. Default is 10 seconds. Can also be sourced
        from the `SNOWFLAKE_JWT_CLIENT_TIMEOUT` environment variable.
        """
        return pulumi.get(self, "jwt_client_timeout")

    @jwt_client_timeout.setter
    def jwt_client_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "jwt_client_timeout", value)

    @property
    @pulumi.getter(name="jwtExpireTimeout")
    def jwt_expire_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        JWT expire after timeout in seconds. Can also be sourced from the `SNOWFLAKE_JWT_EXPIRE_TIMEOUT` environment variable.
        """
        return pulumi.get(self, "jwt_expire_timeout")

    @jwt_expire_timeout.setter
    def jwt_expire_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "jwt_expire_timeout", value)

    @property
    @pulumi.getter(name="keepSessionAlive")
    def keep_session_alive(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables the session to persist even after the connection is closed. Can also be sourced from the
        `SNOWFLAKE_KEEP_SESSION_ALIVE` environment variable.
        """
        return pulumi.get(self, "keep_session_alive")

    @keep_session_alive.setter
    def keep_session_alive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keep_session_alive", value)

    @property
    @pulumi.getter(name="loginTimeout")
    def login_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Login retry timeout EXCLUDING network roundtrip and read out http response. Can also be sourced from the
        `SNOWFLAKE_LOGIN_TIMEOUT` environment variable.
        """
        return pulumi.get(self, "login_timeout")

    @login_timeout.setter
    def login_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "login_timeout", value)

    @property
    @pulumi.getter(name="oauthAccessToken")
    def oauth_access_token(self) -> Optional[pulumi.Input[str]]:
        """
        Token for use with OAuth. Generating the token is left to other tools. Cannot be used with `browser_auth`,
        `private_key_path`, `oauth_refresh_token` or `password`. Can also be sourced from `SNOWFLAKE_OAUTH_ACCESS_TOKEN`
        environment variable.
        """
        warnings.warn("""Use `token` instead""", DeprecationWarning)
        pulumi.log.warn("""oauth_access_token is deprecated: Use `token` instead""")

        return pulumi.get(self, "oauth_access_token")

    @oauth_access_token.setter
    def oauth_access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_access_token", value)

    @property
    @pulumi.getter(name="oauthClientId")
    def oauth_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_CLIENT_ID` environment variable.
        """
        warnings.warn("""Use `token_accessor.0.client_id` instead""", DeprecationWarning)
        pulumi.log.warn("""oauth_client_id is deprecated: Use `token_accessor.0.client_id` instead""")

        return pulumi.get(self, "oauth_client_id")

    @oauth_client_id.setter
    def oauth_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_client_id", value)

    @property
    @pulumi.getter(name="oauthClientSecret")
    def oauth_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_CLIENT_SECRET` environment
        variable.
        """
        warnings.warn("""Use `token_accessor.0.client_secret` instead""", DeprecationWarning)
        pulumi.log.warn("""oauth_client_secret is deprecated: Use `token_accessor.0.client_secret` instead""")

        return pulumi.get(self, "oauth_client_secret")

    @oauth_client_secret.setter
    def oauth_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_client_secret", value)

    @property
    @pulumi.getter(name="oauthEndpoint")
    def oauth_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_ENDPOINT` environment variable.
        """
        warnings.warn("""Use `token_accessor.0.token_endpoint` instead""", DeprecationWarning)
        pulumi.log.warn("""oauth_endpoint is deprecated: Use `token_accessor.0.token_endpoint` instead""")

        return pulumi.get(self, "oauth_endpoint")

    @oauth_endpoint.setter
    def oauth_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_endpoint", value)

    @property
    @pulumi.getter(name="oauthRedirectUrl")
    def oauth_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_REDIRECT_URL` environment
        variable.
        """
        warnings.warn("""Use `token_accessor.0.redirect_uri` instead""", DeprecationWarning)
        pulumi.log.warn("""oauth_redirect_url is deprecated: Use `token_accessor.0.redirect_uri` instead""")

        return pulumi.get(self, "oauth_redirect_url")

    @oauth_redirect_url.setter
    def oauth_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_redirect_url", value)

    @property
    @pulumi.getter(name="oauthRefreshToken")
    def oauth_refresh_token(self) -> Optional[pulumi.Input[str]]:
        """
        Token for use with OAuth. Setup and generation of the token is left to other tools. Should be used in conjunction with
        `oauth_client_id`, `oauth_client_secret`, `oauth_endpoint`, `oauth_redirect_url`. Cannot be used with `browser_auth`,
        `private_key_path`, `oauth_access_token` or `password`. Can also be sourced from `SNOWFLAKE_OAUTH_REFRESH_TOKEN`
        environment variable.
        """
        warnings.warn("""Use `token_accessor.0.refresh_token` instead""", DeprecationWarning)
        pulumi.log.warn("""oauth_refresh_token is deprecated: Use `token_accessor.0.refresh_token` instead""")

        return pulumi.get(self, "oauth_refresh_token")

    @oauth_refresh_token.setter
    def oauth_refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_refresh_token", value)

    @property
    @pulumi.getter(name="oktaUrl")
    def okta_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the Okta server. e.g. https://example.okta.com. Can also be sourced from the `SNOWFLAKE_OKTA_URL` environment
        variable.
        """
        return pulumi.get(self, "okta_url")

    @okta_url.setter
    def okta_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "okta_url", value)

    @property
    @pulumi.getter(name="oscpFailOpen")
    def oscp_fail_open(self) -> Optional[pulumi.Input[bool]]:
        """
        True represents OCSP fail open mode. False represents OCSP fail closed mode. Fail open true by default. Can also be
        sourced from the `SNOWFLAKE_OCSP_FAIL_OPEN` environment variable.
        """
        return pulumi.get(self, "oscp_fail_open")

    @oscp_fail_open.setter
    def oscp_fail_open(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "oscp_fail_open", value)

    @property
    @pulumi.getter
    def params(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Sets other connection (i.e. session) parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters)
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "params", value)

    @property
    @pulumi.getter
    def passcode(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the passcode provided by Duo when using multi-factor authentication (MFA) for login. Can also be sourced from
        the `SNOWFLAKE_PASSCODE` environment variable.
        """
        return pulumi.get(self, "passcode")

    @passcode.setter
    def passcode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passcode", value)

    @property
    @pulumi.getter(name="passcodeInPassword")
    def passcode_in_password(self) -> Optional[pulumi.Input[bool]]:
        """
        False by default. Set to true if the MFA passcode is embedded in the login password. Appends the MFA passcode to the end
        of the password. Can also be sourced from the `SNOWFLAKE_PASSCODE_IN_PASSWORD` environment variable.
        """
        return pulumi.get(self, "passcode_in_password")

    @passcode_in_password.setter
    def passcode_in_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "passcode_in_password", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for username+password auth. Cannot be used with `browser_auth` or `private_key_path`. Can also be sourced from
        the `SNOWFLAKE_PASSWORD` environment variable.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Support custom port values to snowflake go driver for use with privatelink. Can also be sourced from the
        `SNOWFLAKE_PORT` environment variable.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        """
        Private Key for username+private-key auth. Cannot be used with `browser_auth` or `password`. Can also be sourced from
        `SNOWFLAKE_PRIVATE_KEY` environment variable.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="privateKeyPassphrase")
    def private_key_passphrase(self) -> Optional[pulumi.Input[str]]:
        """
        Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and
        des-ede3-cbc. Can also be sourced from `SNOWFLAKE_PRIVATE_KEY_PASSPHRASE` environment variable.
        """
        return pulumi.get(self, "private_key_passphrase")

    @private_key_passphrase.setter
    def private_key_passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key_passphrase", value)

    @property
    @pulumi.getter(name="privateKeyPath")
    def private_key_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to a private key for using keypair authentication. Cannot be used with `browser_auth`, `oauth_access_token` or
        `password`. Can also be sourced from `SNOWFLAKE_PRIVATE_KEY_PATH` environment variable.
        """
        warnings.warn("""use the [file Function](https://developer.hashicorp.com/terraform/language/functions/file) instead""", DeprecationWarning)
        pulumi.log.warn("""private_key_path is deprecated: use the [file Function](https://developer.hashicorp.com/terraform/language/functions/file) instead""")

        return pulumi.get(self, "private_key_path")

    @private_key_path.setter
    def private_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key_path", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        """
        Sets the profile to read from ~/.snowflake/config file. Can also be sourced from the `SNOWFLAKE_PROFILE` environment
        variable.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Either http or https, defaults to https. Can also be sourced from the `SNOWFLAKE_PROTOCOL` environment variable.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Snowflake region, such as "eu-central-1", with this parameter. However, since this parameter is deprecated, it is best
        to specify the region as part of the account parameter. For details, see the description of the account parameter.
        [Snowflake region](https://docs.snowflake.com/en/user-guide/intro-regions.html) to use. Required if using the [legacy
        format for the `account`
        identifier](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#format-2-legacy-account-locator-in-a-region)
        in the form of `<cloud_region_id>.<cloud>`. Can also be sourced from the `SNOWFLAKE_REGION` environment variable.
        """
        warnings.warn("""Specify the region as part of the account parameter""", DeprecationWarning)
        pulumi.log.warn("""region is deprecated: Specify the region as part of the account parameter""")

        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="requestTimeout")
    def request_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        request retry timeout EXCLUDING network roundtrip and read out http response. Can also be sourced from the
        `SNOWFLAKE_REQUEST_TIMEOUT` environment variable.
        """
        return pulumi.get(self, "request_timeout")

    @request_timeout.setter
    def request_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "request_timeout", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the role to use by default for accessing Snowflake objects in the client session. Can also be sourced from the
        `SNOWFLAKE_ROLE` environment variable. .
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="sessionParams")
    def session_params(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Sets session parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters)
        """
        warnings.warn("""Use `params` instead""", DeprecationWarning)
        pulumi.log.warn("""session_params is deprecated: Use `params` instead""")

        return pulumi.get(self, "session_params")

    @session_params.setter
    def session_params(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "session_params", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        Token to use for OAuth and other forms of token based auth. Can also be sourced from the `SNOWFLAKE_TOKEN` environment
        variable.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="tokenAccessor")
    def token_accessor(self) -> Optional[pulumi.Input['ProviderTokenAccessorArgs']]:
        return pulumi.get(self, "token_accessor")

    @token_accessor.setter
    def token_accessor(self, value: Optional[pulumi.Input['ProviderTokenAccessorArgs']]):
        pulumi.set(self, "token_accessor", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        Username. Can also be sourced from the `SNOWFLAKE_USER` environment variable. Required unless using `profile`.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for username+password authentication. Can also be sourced from the `SNOWFLAKE_USERNAME` environment variable.
        Required unless using `profile`.
        """
        warnings.warn("""Use `user` instead of `username`""", DeprecationWarning)
        pulumi.log.warn("""username is deprecated: Use `user` instead of `username`""")

        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="validateDefaultParameters")
    def validate_default_parameters(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, disables the validation checks for Database, Schema, Warehouse and Role at the time a connection is
        established. Can also be sourced from the `SNOWFLAKE_VALIDATE_DEFAULT_PARAMETERS` environment variable.
        """
        return pulumi.get(self, "validate_default_parameters")

    @validate_default_parameters.setter
    def validate_default_parameters(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "validate_default_parameters", value)

    @property
    @pulumi.getter
    def warehouse(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the virtual warehouse to use by default for queries, loading, etc. in the client session. Can also be sourced
        from the `SNOWFLAKE_WAREHOUSE` environment variable.
        """
        return pulumi.get(self, "warehouse")

    @warehouse.setter
    def warehouse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warehouse", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account: Optional[pulumi.Input[str]] = None,
                 authenticator: Optional[pulumi.Input[str]] = None,
                 browser_auth: Optional[pulumi.Input[bool]] = None,
                 client_ip: Optional[pulumi.Input[str]] = None,
                 client_request_mfa_token: Optional[pulumi.Input[bool]] = None,
                 client_store_temporary_credential: Optional[pulumi.Input[bool]] = None,
                 client_timeout: Optional[pulumi.Input[int]] = None,
                 disable_query_context_cache: Optional[pulumi.Input[bool]] = None,
                 disable_telemetry: Optional[pulumi.Input[bool]] = None,
                 external_browser_timeout: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 insecure_mode: Optional[pulumi.Input[bool]] = None,
                 jwt_client_timeout: Optional[pulumi.Input[int]] = None,
                 jwt_expire_timeout: Optional[pulumi.Input[int]] = None,
                 keep_session_alive: Optional[pulumi.Input[bool]] = None,
                 login_timeout: Optional[pulumi.Input[int]] = None,
                 oauth_access_token: Optional[pulumi.Input[str]] = None,
                 oauth_client_id: Optional[pulumi.Input[str]] = None,
                 oauth_client_secret: Optional[pulumi.Input[str]] = None,
                 oauth_endpoint: Optional[pulumi.Input[str]] = None,
                 oauth_redirect_url: Optional[pulumi.Input[str]] = None,
                 oauth_refresh_token: Optional[pulumi.Input[str]] = None,
                 okta_url: Optional[pulumi.Input[str]] = None,
                 oscp_fail_open: Optional[pulumi.Input[bool]] = None,
                 params: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 passcode: Optional[pulumi.Input[str]] = None,
                 passcode_in_password: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 private_key_passphrase: Optional[pulumi.Input[str]] = None,
                 private_key_path: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 request_timeout: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 session_params: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 token_accessor: Optional[pulumi.Input[pulumi.InputType['ProviderTokenAccessorArgs']]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 validate_default_parameters: Optional[pulumi.Input[bool]] = None,
                 warehouse: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The provider type for the snowflake package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account: Specifies your Snowflake account identifier assigned, by Snowflake. For information about account identifiers, see the
               [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html). Can also be sourced
               from the `SNOWFLAKE_ACCOUNT` environment variable. Required unless using `profile`.
        :param pulumi.Input[str] authenticator: Specifies the [authentication type](https://pkg.go.dev/github.com/snowflakedb/gosnowflake#AuthType) to use when
               connecting to Snowflake. Valid values include: Snowflake, OAuth, ExternalBrowser, Okta, JWT, TokenAccessor,
               UsernamePasswordMFA. Can also be sourced from the `SNOWFLAKE_AUTHENTICATOR` environment variable.
        :param pulumi.Input[bool] browser_auth: Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_USE_BROWSER_AUTH` environment variable.
        :param pulumi.Input[str] client_ip: IP address for network checks. Can also be sourced from the `SNOWFLAKE_CLIENT_IP` environment variable.
        :param pulumi.Input[bool] client_request_mfa_token: When true the MFA token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also
               be sourced from the `SNOWFLAKE_CLIENT_REQUEST_MFA_TOKEN` environment variable.
        :param pulumi.Input[bool] client_store_temporary_credential: When true the ID token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be
               sourced from the `SNOWFLAKE_CLIENT_STORE_TEMPORARY_CREDENTIAL` environment variable.
        :param pulumi.Input[int] client_timeout: The timeout in seconds for the client to complete the authentication. Default is 900 seconds. Can also be sourced from
               the `SNOWFLAKE_CLIENT_TIMEOUT` environment variable.
        :param pulumi.Input[bool] disable_query_context_cache: Should HTAP query context cache be disabled. Can also be sourced from the `SNOWFLAKE_DISABLE_QUERY_CONTEXT_CACHE`
               environment variable.
        :param pulumi.Input[bool] disable_telemetry: Indicates whether to disable telemetry. Can also be sourced from the `SNOWFLAKE_DISABLE_TELEMETRY` environment variable.
        :param pulumi.Input[int] external_browser_timeout: The timeout in seconds for the external browser to complete the authentication. Default is 120 seconds. Can also be
               sourced from the `SNOWFLAKE_EXTERNAL_BROWSER_TIMEOUT` environment variable.
        :param pulumi.Input[str] host: Supports passing in a custom host value to the snowflake go driver for use with privatelink. Can also be sourced from
               the `SNOWFLAKE_HOST` environment variable.
        :param pulumi.Input[bool] insecure_mode: If true, bypass the Online Certificate Status Protocol (OCSP) certificate revocation check. IMPORTANT: Change the
               default value for testing or emergency situations only. Can also be sourced from the `SNOWFLAKE_INSECURE_MODE`
               environment variable.
        :param pulumi.Input[int] jwt_client_timeout: The timeout in seconds for the JWT client to complete the authentication. Default is 10 seconds. Can also be sourced
               from the `SNOWFLAKE_JWT_CLIENT_TIMEOUT` environment variable.
        :param pulumi.Input[int] jwt_expire_timeout: JWT expire after timeout in seconds. Can also be sourced from the `SNOWFLAKE_JWT_EXPIRE_TIMEOUT` environment variable.
        :param pulumi.Input[bool] keep_session_alive: Enables the session to persist even after the connection is closed. Can also be sourced from the
               `SNOWFLAKE_KEEP_SESSION_ALIVE` environment variable.
        :param pulumi.Input[int] login_timeout: Login retry timeout EXCLUDING network roundtrip and read out http response. Can also be sourced from the
               `SNOWFLAKE_LOGIN_TIMEOUT` environment variable.
        :param pulumi.Input[str] oauth_access_token: Token for use with OAuth. Generating the token is left to other tools. Cannot be used with `browser_auth`,
               `private_key_path`, `oauth_refresh_token` or `password`. Can also be sourced from `SNOWFLAKE_OAUTH_ACCESS_TOKEN`
               environment variable.
        :param pulumi.Input[str] oauth_client_id: Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_CLIENT_ID` environment variable.
        :param pulumi.Input[str] oauth_client_secret: Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_CLIENT_SECRET` environment
               variable.
        :param pulumi.Input[str] oauth_endpoint: Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_ENDPOINT` environment variable.
        :param pulumi.Input[str] oauth_redirect_url: Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_REDIRECT_URL` environment
               variable.
        :param pulumi.Input[str] oauth_refresh_token: Token for use with OAuth. Setup and generation of the token is left to other tools. Should be used in conjunction with
               `oauth_client_id`, `oauth_client_secret`, `oauth_endpoint`, `oauth_redirect_url`. Cannot be used with `browser_auth`,
               `private_key_path`, `oauth_access_token` or `password`. Can also be sourced from `SNOWFLAKE_OAUTH_REFRESH_TOKEN`
               environment variable.
        :param pulumi.Input[str] okta_url: The URL of the Okta server. e.g. https://example.okta.com. Can also be sourced from the `SNOWFLAKE_OKTA_URL` environment
               variable.
        :param pulumi.Input[bool] oscp_fail_open: True represents OCSP fail open mode. False represents OCSP fail closed mode. Fail open true by default. Can also be
               sourced from the `SNOWFLAKE_OCSP_FAIL_OPEN` environment variable.
        :param pulumi.Input[Mapping[str, Any]] params: Sets other connection (i.e. session) parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters)
        :param pulumi.Input[str] passcode: Specifies the passcode provided by Duo when using multi-factor authentication (MFA) for login. Can also be sourced from
               the `SNOWFLAKE_PASSCODE` environment variable.
        :param pulumi.Input[bool] passcode_in_password: False by default. Set to true if the MFA passcode is embedded in the login password. Appends the MFA passcode to the end
               of the password. Can also be sourced from the `SNOWFLAKE_PASSCODE_IN_PASSWORD` environment variable.
        :param pulumi.Input[str] password: Password for username+password auth. Cannot be used with `browser_auth` or `private_key_path`. Can also be sourced from
               the `SNOWFLAKE_PASSWORD` environment variable.
        :param pulumi.Input[int] port: Support custom port values to snowflake go driver for use with privatelink. Can also be sourced from the
               `SNOWFLAKE_PORT` environment variable.
        :param pulumi.Input[str] private_key: Private Key for username+private-key auth. Cannot be used with `browser_auth` or `password`. Can also be sourced from
               `SNOWFLAKE_PRIVATE_KEY` environment variable.
        :param pulumi.Input[str] private_key_passphrase: Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and
               des-ede3-cbc. Can also be sourced from `SNOWFLAKE_PRIVATE_KEY_PASSPHRASE` environment variable.
        :param pulumi.Input[str] private_key_path: Path to a private key for using keypair authentication. Cannot be used with `browser_auth`, `oauth_access_token` or
               `password`. Can also be sourced from `SNOWFLAKE_PRIVATE_KEY_PATH` environment variable.
        :param pulumi.Input[str] profile: Sets the profile to read from ~/.snowflake/config file. Can also be sourced from the `SNOWFLAKE_PROFILE` environment
               variable.
        :param pulumi.Input[str] protocol: Either http or https, defaults to https. Can also be sourced from the `SNOWFLAKE_PROTOCOL` environment variable.
        :param pulumi.Input[str] region: Snowflake region, such as "eu-central-1", with this parameter. However, since this parameter is deprecated, it is best
               to specify the region as part of the account parameter. For details, see the description of the account parameter.
               [Snowflake region](https://docs.snowflake.com/en/user-guide/intro-regions.html) to use. Required if using the [legacy
               format for the `account`
               identifier](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#format-2-legacy-account-locator-in-a-region)
               in the form of `<cloud_region_id>.<cloud>`. Can also be sourced from the `SNOWFLAKE_REGION` environment variable.
        :param pulumi.Input[int] request_timeout: request retry timeout EXCLUDING network roundtrip and read out http response. Can also be sourced from the
               `SNOWFLAKE_REQUEST_TIMEOUT` environment variable.
        :param pulumi.Input[str] role: Specifies the role to use by default for accessing Snowflake objects in the client session. Can also be sourced from the
               `SNOWFLAKE_ROLE` environment variable. .
        :param pulumi.Input[Mapping[str, Any]] session_params: Sets session parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters)
        :param pulumi.Input[str] token: Token to use for OAuth and other forms of token based auth. Can also be sourced from the `SNOWFLAKE_TOKEN` environment
               variable.
        :param pulumi.Input[str] user: Username. Can also be sourced from the `SNOWFLAKE_USER` environment variable. Required unless using `profile`.
        :param pulumi.Input[str] username: Username for username+password authentication. Can also be sourced from the `SNOWFLAKE_USERNAME` environment variable.
               Required unless using `profile`.
        :param pulumi.Input[bool] validate_default_parameters: If true, disables the validation checks for Database, Schema, Warehouse and Role at the time a connection is
               established. Can also be sourced from the `SNOWFLAKE_VALIDATE_DEFAULT_PARAMETERS` environment variable.
        :param pulumi.Input[str] warehouse: Specifies the virtual warehouse to use by default for queries, loading, etc. in the client session. Can also be sourced
               from the `SNOWFLAKE_WAREHOUSE` environment variable.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the snowflake package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account: Optional[pulumi.Input[str]] = None,
                 authenticator: Optional[pulumi.Input[str]] = None,
                 browser_auth: Optional[pulumi.Input[bool]] = None,
                 client_ip: Optional[pulumi.Input[str]] = None,
                 client_request_mfa_token: Optional[pulumi.Input[bool]] = None,
                 client_store_temporary_credential: Optional[pulumi.Input[bool]] = None,
                 client_timeout: Optional[pulumi.Input[int]] = None,
                 disable_query_context_cache: Optional[pulumi.Input[bool]] = None,
                 disable_telemetry: Optional[pulumi.Input[bool]] = None,
                 external_browser_timeout: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 insecure_mode: Optional[pulumi.Input[bool]] = None,
                 jwt_client_timeout: Optional[pulumi.Input[int]] = None,
                 jwt_expire_timeout: Optional[pulumi.Input[int]] = None,
                 keep_session_alive: Optional[pulumi.Input[bool]] = None,
                 login_timeout: Optional[pulumi.Input[int]] = None,
                 oauth_access_token: Optional[pulumi.Input[str]] = None,
                 oauth_client_id: Optional[pulumi.Input[str]] = None,
                 oauth_client_secret: Optional[pulumi.Input[str]] = None,
                 oauth_endpoint: Optional[pulumi.Input[str]] = None,
                 oauth_redirect_url: Optional[pulumi.Input[str]] = None,
                 oauth_refresh_token: Optional[pulumi.Input[str]] = None,
                 okta_url: Optional[pulumi.Input[str]] = None,
                 oscp_fail_open: Optional[pulumi.Input[bool]] = None,
                 params: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 passcode: Optional[pulumi.Input[str]] = None,
                 passcode_in_password: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 private_key_passphrase: Optional[pulumi.Input[str]] = None,
                 private_key_path: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 request_timeout: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 session_params: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 token_accessor: Optional[pulumi.Input[pulumi.InputType['ProviderTokenAccessorArgs']]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 validate_default_parameters: Optional[pulumi.Input[bool]] = None,
                 warehouse: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            if account is None:
                account = _utilities.get_env('SNOWFLAKE_ACCOUNT')
            __props__.__dict__["account"] = account
            __props__.__dict__["authenticator"] = authenticator
            if browser_auth is None:
                browser_auth = _utilities.get_env_bool('SNOWFLAKE_USE_BROWSER_AUTH')
            __props__.__dict__["browser_auth"] = pulumi.Output.from_input(browser_auth).apply(pulumi.runtime.to_json) if browser_auth is not None else None
            __props__.__dict__["client_ip"] = client_ip
            __props__.__dict__["client_request_mfa_token"] = pulumi.Output.from_input(client_request_mfa_token).apply(pulumi.runtime.to_json) if client_request_mfa_token is not None else None
            __props__.__dict__["client_store_temporary_credential"] = pulumi.Output.from_input(client_store_temporary_credential).apply(pulumi.runtime.to_json) if client_store_temporary_credential is not None else None
            __props__.__dict__["client_timeout"] = pulumi.Output.from_input(client_timeout).apply(pulumi.runtime.to_json) if client_timeout is not None else None
            __props__.__dict__["disable_query_context_cache"] = pulumi.Output.from_input(disable_query_context_cache).apply(pulumi.runtime.to_json) if disable_query_context_cache is not None else None
            __props__.__dict__["disable_telemetry"] = pulumi.Output.from_input(disable_telemetry).apply(pulumi.runtime.to_json) if disable_telemetry is not None else None
            __props__.__dict__["external_browser_timeout"] = pulumi.Output.from_input(external_browser_timeout).apply(pulumi.runtime.to_json) if external_browser_timeout is not None else None
            if host is None:
                host = _utilities.get_env('SNOWFLAKE_HOST')
            __props__.__dict__["host"] = host
            __props__.__dict__["insecure_mode"] = pulumi.Output.from_input(insecure_mode).apply(pulumi.runtime.to_json) if insecure_mode is not None else None
            __props__.__dict__["jwt_client_timeout"] = pulumi.Output.from_input(jwt_client_timeout).apply(pulumi.runtime.to_json) if jwt_client_timeout is not None else None
            __props__.__dict__["jwt_expire_timeout"] = pulumi.Output.from_input(jwt_expire_timeout).apply(pulumi.runtime.to_json) if jwt_expire_timeout is not None else None
            __props__.__dict__["keep_session_alive"] = pulumi.Output.from_input(keep_session_alive).apply(pulumi.runtime.to_json) if keep_session_alive is not None else None
            __props__.__dict__["login_timeout"] = pulumi.Output.from_input(login_timeout).apply(pulumi.runtime.to_json) if login_timeout is not None else None
            if oauth_access_token is None:
                oauth_access_token = _utilities.get_env('SNOWFLAKE_OAUTH_ACCESS_TOKEN')
            __props__.__dict__["oauth_access_token"] = None if oauth_access_token is None else pulumi.Output.secret(oauth_access_token)
            if oauth_client_id is None:
                oauth_client_id = _utilities.get_env('SNOWFLAKE_OAUTH_CLIENT_ID')
            __props__.__dict__["oauth_client_id"] = None if oauth_client_id is None else pulumi.Output.secret(oauth_client_id)
            if oauth_client_secret is None:
                oauth_client_secret = _utilities.get_env('SNOWFLAKE_OAUTH_CLIENT_SECRET')
            __props__.__dict__["oauth_client_secret"] = None if oauth_client_secret is None else pulumi.Output.secret(oauth_client_secret)
            if oauth_endpoint is None:
                oauth_endpoint = _utilities.get_env('SNOWFLAKE_OAUTH_ENDPOINT')
            __props__.__dict__["oauth_endpoint"] = None if oauth_endpoint is None else pulumi.Output.secret(oauth_endpoint)
            if oauth_redirect_url is None:
                oauth_redirect_url = _utilities.get_env('SNOWFLAKE_OAUTH_REDIRECT_URL')
            __props__.__dict__["oauth_redirect_url"] = None if oauth_redirect_url is None else pulumi.Output.secret(oauth_redirect_url)
            if oauth_refresh_token is None:
                oauth_refresh_token = _utilities.get_env('SNOWFLAKE_OAUTH_REFRESH_TOKEN')
            __props__.__dict__["oauth_refresh_token"] = None if oauth_refresh_token is None else pulumi.Output.secret(oauth_refresh_token)
            __props__.__dict__["okta_url"] = okta_url
            __props__.__dict__["oscp_fail_open"] = pulumi.Output.from_input(oscp_fail_open).apply(pulumi.runtime.to_json) if oscp_fail_open is not None else None
            __props__.__dict__["params"] = pulumi.Output.from_input(params).apply(pulumi.runtime.to_json) if params is not None else None
            __props__.__dict__["passcode"] = passcode
            __props__.__dict__["passcode_in_password"] = pulumi.Output.from_input(passcode_in_password).apply(pulumi.runtime.to_json) if passcode_in_password is not None else None
            if password is None:
                password = _utilities.get_env('SNOWFLAKE_PASSWORD')
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            if port is None:
                port = _utilities.get_env_int('SNOWFLAKE_PORT')
            __props__.__dict__["port"] = pulumi.Output.from_input(port).apply(pulumi.runtime.to_json) if port is not None else None
            __props__.__dict__["private_key"] = None if private_key is None else pulumi.Output.secret(private_key)
            if private_key_passphrase is None:
                private_key_passphrase = _utilities.get_env('SNOWFLAKE_PRIVATE_KEY_PASSPHRASE')
            __props__.__dict__["private_key_passphrase"] = None if private_key_passphrase is None else pulumi.Output.secret(private_key_passphrase)
            if private_key_path is None:
                private_key_path = _utilities.get_env('SNOWFLAKE_PRIVATE_KEY_PATH')
            __props__.__dict__["private_key_path"] = None if private_key_path is None else pulumi.Output.secret(private_key_path)
            __props__.__dict__["profile"] = profile
            if protocol is None:
                protocol = _utilities.get_env('SNOWFLAKE_PROTOCOL')
            __props__.__dict__["protocol"] = protocol
            if region is None:
                region = _utilities.get_env('SNOWFLAKE_REGION')
            __props__.__dict__["region"] = region
            __props__.__dict__["request_timeout"] = pulumi.Output.from_input(request_timeout).apply(pulumi.runtime.to_json) if request_timeout is not None else None
            if role is None:
                role = _utilities.get_env('SNOWFLAKE_ROLE')
            __props__.__dict__["role"] = role
            __props__.__dict__["session_params"] = pulumi.Output.from_input(session_params).apply(pulumi.runtime.to_json) if session_params is not None else None
            __props__.__dict__["token"] = None if token is None else pulumi.Output.secret(token)
            __props__.__dict__["token_accessor"] = pulumi.Output.from_input(token_accessor).apply(pulumi.runtime.to_json) if token_accessor is not None else None
            __props__.__dict__["user"] = user
            if username is None:
                username = _utilities.get_env('SNOWFLAKE_USER')
            __props__.__dict__["username"] = username
            __props__.__dict__["validate_default_parameters"] = pulumi.Output.from_input(validate_default_parameters).apply(pulumi.runtime.to_json) if validate_default_parameters is not None else None
            if warehouse is None:
                warehouse = _utilities.get_env('SNOWFLAKE_WAREHOUSE')
            __props__.__dict__["warehouse"] = warehouse
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["oauthAccessToken", "oauthClientId", "oauthClientSecret", "oauthEndpoint", "oauthRedirectUrl", "oauthRefreshToken", "password", "privateKey", "privateKeyPassphrase", "privateKeyPath", "token"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Provider, __self__).__init__(
            'snowflake',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter
    def account(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies your Snowflake account identifier assigned, by Snowflake. For information about account identifiers, see the
        [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html). Can also be sourced
        from the `SNOWFLAKE_ACCOUNT` environment variable. Required unless using `profile`.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter
    def authenticator(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the [authentication type](https://pkg.go.dev/github.com/snowflakedb/gosnowflake#AuthType) to use when
        connecting to Snowflake. Valid values include: Snowflake, OAuth, ExternalBrowser, Okta, JWT, TokenAccessor,
        UsernamePasswordMFA. Can also be sourced from the `SNOWFLAKE_AUTHENTICATOR` environment variable.
        """
        return pulumi.get(self, "authenticator")

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> pulumi.Output[Optional[str]]:
        """
        IP address for network checks. Can also be sourced from the `SNOWFLAKE_CLIENT_IP` environment variable.
        """
        return pulumi.get(self, "client_ip")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[Optional[str]]:
        """
        Supports passing in a custom host value to the snowflake go driver for use with privatelink. Can also be sourced from
        the `SNOWFLAKE_HOST` environment variable.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="oauthAccessToken")
    def oauth_access_token(self) -> pulumi.Output[Optional[str]]:
        """
        Token for use with OAuth. Generating the token is left to other tools. Cannot be used with `browser_auth`,
        `private_key_path`, `oauth_refresh_token` or `password`. Can also be sourced from `SNOWFLAKE_OAUTH_ACCESS_TOKEN`
        environment variable.
        """
        warnings.warn("""Use `token` instead""", DeprecationWarning)
        pulumi.log.warn("""oauth_access_token is deprecated: Use `token` instead""")

        return pulumi.get(self, "oauth_access_token")

    @property
    @pulumi.getter(name="oauthClientId")
    def oauth_client_id(self) -> pulumi.Output[Optional[str]]:
        """
        Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_CLIENT_ID` environment variable.
        """
        warnings.warn("""Use `token_accessor.0.client_id` instead""", DeprecationWarning)
        pulumi.log.warn("""oauth_client_id is deprecated: Use `token_accessor.0.client_id` instead""")

        return pulumi.get(self, "oauth_client_id")

    @property
    @pulumi.getter(name="oauthClientSecret")
    def oauth_client_secret(self) -> pulumi.Output[Optional[str]]:
        """
        Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_CLIENT_SECRET` environment
        variable.
        """
        warnings.warn("""Use `token_accessor.0.client_secret` instead""", DeprecationWarning)
        pulumi.log.warn("""oauth_client_secret is deprecated: Use `token_accessor.0.client_secret` instead""")

        return pulumi.get(self, "oauth_client_secret")

    @property
    @pulumi.getter(name="oauthEndpoint")
    def oauth_endpoint(self) -> pulumi.Output[Optional[str]]:
        """
        Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_ENDPOINT` environment variable.
        """
        warnings.warn("""Use `token_accessor.0.token_endpoint` instead""", DeprecationWarning)
        pulumi.log.warn("""oauth_endpoint is deprecated: Use `token_accessor.0.token_endpoint` instead""")

        return pulumi.get(self, "oauth_endpoint")

    @property
    @pulumi.getter(name="oauthRedirectUrl")
    def oauth_redirect_url(self) -> pulumi.Output[Optional[str]]:
        """
        Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_REDIRECT_URL` environment
        variable.
        """
        warnings.warn("""Use `token_accessor.0.redirect_uri` instead""", DeprecationWarning)
        pulumi.log.warn("""oauth_redirect_url is deprecated: Use `token_accessor.0.redirect_uri` instead""")

        return pulumi.get(self, "oauth_redirect_url")

    @property
    @pulumi.getter(name="oauthRefreshToken")
    def oauth_refresh_token(self) -> pulumi.Output[Optional[str]]:
        """
        Token for use with OAuth. Setup and generation of the token is left to other tools. Should be used in conjunction with
        `oauth_client_id`, `oauth_client_secret`, `oauth_endpoint`, `oauth_redirect_url`. Cannot be used with `browser_auth`,
        `private_key_path`, `oauth_access_token` or `password`. Can also be sourced from `SNOWFLAKE_OAUTH_REFRESH_TOKEN`
        environment variable.
        """
        warnings.warn("""Use `token_accessor.0.refresh_token` instead""", DeprecationWarning)
        pulumi.log.warn("""oauth_refresh_token is deprecated: Use `token_accessor.0.refresh_token` instead""")

        return pulumi.get(self, "oauth_refresh_token")

    @property
    @pulumi.getter(name="oktaUrl")
    def okta_url(self) -> pulumi.Output[Optional[str]]:
        """
        The URL of the Okta server. e.g. https://example.okta.com. Can also be sourced from the `SNOWFLAKE_OKTA_URL` environment
        variable.
        """
        return pulumi.get(self, "okta_url")

    @property
    @pulumi.getter
    def passcode(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the passcode provided by Duo when using multi-factor authentication (MFA) for login. Can also be sourced from
        the `SNOWFLAKE_PASSCODE` environment variable.
        """
        return pulumi.get(self, "passcode")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Password for username+password auth. Cannot be used with `browser_auth` or `private_key_path`. Can also be sourced from
        the `SNOWFLAKE_PASSWORD` environment variable.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[Optional[str]]:
        """
        Private Key for username+private-key auth. Cannot be used with `browser_auth` or `password`. Can also be sourced from
        `SNOWFLAKE_PRIVATE_KEY` environment variable.
        """
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="privateKeyPassphrase")
    def private_key_passphrase(self) -> pulumi.Output[Optional[str]]:
        """
        Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and
        des-ede3-cbc. Can also be sourced from `SNOWFLAKE_PRIVATE_KEY_PASSPHRASE` environment variable.
        """
        return pulumi.get(self, "private_key_passphrase")

    @property
    @pulumi.getter(name="privateKeyPath")
    def private_key_path(self) -> pulumi.Output[Optional[str]]:
        """
        Path to a private key for using keypair authentication. Cannot be used with `browser_auth`, `oauth_access_token` or
        `password`. Can also be sourced from `SNOWFLAKE_PRIVATE_KEY_PATH` environment variable.
        """
        warnings.warn("""use the [file Function](https://developer.hashicorp.com/terraform/language/functions/file) instead""", DeprecationWarning)
        pulumi.log.warn("""private_key_path is deprecated: use the [file Function](https://developer.hashicorp.com/terraform/language/functions/file) instead""")

        return pulumi.get(self, "private_key_path")

    @property
    @pulumi.getter
    def profile(self) -> pulumi.Output[Optional[str]]:
        """
        Sets the profile to read from ~/.snowflake/config file. Can also be sourced from the `SNOWFLAKE_PROFILE` environment
        variable.
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[Optional[str]]:
        """
        Either http or https, defaults to https. Can also be sourced from the `SNOWFLAKE_PROTOCOL` environment variable.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[str]]:
        """
        Snowflake region, such as "eu-central-1", with this parameter. However, since this parameter is deprecated, it is best
        to specify the region as part of the account parameter. For details, see the description of the account parameter.
        [Snowflake region](https://docs.snowflake.com/en/user-guide/intro-regions.html) to use. Required if using the [legacy
        format for the `account`
        identifier](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#format-2-legacy-account-locator-in-a-region)
        in the form of `<cloud_region_id>.<cloud>`. Can also be sourced from the `SNOWFLAKE_REGION` environment variable.
        """
        warnings.warn("""Specify the region as part of the account parameter""", DeprecationWarning)
        pulumi.log.warn("""region is deprecated: Specify the region as part of the account parameter""")

        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the role to use by default for accessing Snowflake objects in the client session. Can also be sourced from the
        `SNOWFLAKE_ROLE` environment variable. .
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[Optional[str]]:
        """
        Token to use for OAuth and other forms of token based auth. Can also be sourced from the `SNOWFLAKE_TOKEN` environment
        variable.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def user(self) -> pulumi.Output[Optional[str]]:
        """
        Username. Can also be sourced from the `SNOWFLAKE_USER` environment variable. Required unless using `profile`.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional[str]]:
        """
        Username for username+password authentication. Can also be sourced from the `SNOWFLAKE_USERNAME` environment variable.
        Required unless using `profile`.
        """
        warnings.warn("""Use `user` instead of `username`""", DeprecationWarning)
        pulumi.log.warn("""username is deprecated: Use `user` instead of `username`""")

        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def warehouse(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the virtual warehouse to use by default for queries, loading, etc. in the client session. Can also be sourced
        from the `SNOWFLAKE_WAREHOUSE` environment variable.
        """
        return pulumi.get(self, "warehouse")

