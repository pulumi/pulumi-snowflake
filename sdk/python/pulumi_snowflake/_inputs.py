# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'AccountRoleShowOutputArgs',
    'AccountRoleShowOutputArgsDict',
    'AlertAlertScheduleArgs',
    'AlertAlertScheduleArgsDict',
    'AlertAlertScheduleCronArgs',
    'AlertAlertScheduleCronArgsDict',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputArgs',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputArgsDict',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthTypeArgs',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthTypeArgsDict',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputCommentArgs',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputCommentArgsDict',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabledArgs',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabledArgsDict',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidityArgs',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidityArgsDict',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScopeArgs',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScopeArgsDict',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpointArgs',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpointArgsDict',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethodArgs',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethodArgsDict',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientIdArgs',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientIdArgsDict',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrantArgs',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrantArgsDict',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidityArgs',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidityArgsDict',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpointArgs',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpointArgsDict',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegrationArgs',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegrationArgsDict',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutputArgs',
    'ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutputArgsDict',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputArgs',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputArgsDict',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthTypeArgs',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthTypeArgsDict',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputCommentArgs',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputCommentArgsDict',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabledArgs',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabledArgsDict',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidityArgs',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidityArgsDict',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScopeArgs',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScopeArgsDict',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpointArgs',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpointArgsDict',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethodArgs',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethodArgsDict',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientIdArgs',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientIdArgsDict',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrantArgs',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrantArgsDict',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidityArgs',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidityArgsDict',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpointArgs',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpointArgsDict',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegrationArgs',
    'ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegrationArgsDict',
    'ApiAuthenticationIntegrationWithClientCredentialsShowOutputArgs',
    'ApiAuthenticationIntegrationWithClientCredentialsShowOutputArgsDict',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputArgs',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputArgsDict',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthTypeArgs',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthTypeArgsDict',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputCommentArgs',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputCommentArgsDict',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabledArgs',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabledArgsDict',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidityArgs',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidityArgsDict',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScopeArgs',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScopeArgsDict',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpointArgs',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpointArgsDict',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethodArgs',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethodArgsDict',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientIdArgs',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientIdArgsDict',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrantArgs',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrantArgsDict',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidityArgs',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidityArgsDict',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpointArgs',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpointArgsDict',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegrationArgs',
    'ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegrationArgsDict',
    'ApiAuthenticationIntegrationWithJwtBearerShowOutputArgs',
    'ApiAuthenticationIntegrationWithJwtBearerShowOutputArgsDict',
    'AuthenticationPolicyDescribeOutputArgs',
    'AuthenticationPolicyDescribeOutputArgsDict',
    'AuthenticationPolicyShowOutputArgs',
    'AuthenticationPolicyShowOutputArgsDict',
    'DatabaseOldReplicationConfigurationArgs',
    'DatabaseOldReplicationConfigurationArgsDict',
    'DatabaseReplicationArgs',
    'DatabaseReplicationArgsDict',
    'DatabaseReplicationEnableToAccountArgs',
    'DatabaseReplicationEnableToAccountArgsDict',
    'DatabaseRoleShowOutputArgs',
    'DatabaseRoleShowOutputArgsDict',
    'DynamicTableTargetLagArgs',
    'DynamicTableTargetLagArgsDict',
    'ExternalFunctionArgArgs',
    'ExternalFunctionArgArgsDict',
    'ExternalFunctionHeaderArgs',
    'ExternalFunctionHeaderArgsDict',
    'ExternalOauthIntegrationDescribeOutputArgs',
    'ExternalOauthIntegrationDescribeOutputArgsDict',
    'ExternalOauthIntegrationDescribeOutputCommentArgs',
    'ExternalOauthIntegrationDescribeOutputCommentArgsDict',
    'ExternalOauthIntegrationDescribeOutputEnabledArgs',
    'ExternalOauthIntegrationDescribeOutputEnabledArgsDict',
    'ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesListArgs',
    'ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesListArgsDict',
    'ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleModeArgs',
    'ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleModeArgsDict',
    'ExternalOauthIntegrationDescribeOutputExternalOauthAudienceListArgs',
    'ExternalOauthIntegrationDescribeOutputExternalOauthAudienceListArgsDict',
    'ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesListArgs',
    'ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesListArgsDict',
    'ExternalOauthIntegrationDescribeOutputExternalOauthIssuerArgs',
    'ExternalOauthIntegrationDescribeOutputExternalOauthIssuerArgsDict',
    'ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrlArgs',
    'ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrlArgsDict',
    'ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2Args',
    'ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2ArgsDict',
    'ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKeyArgs',
    'ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKeyArgsDict',
    'ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiterArgs',
    'ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiterArgsDict',
    'ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttributeArgs',
    'ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttributeArgsDict',
    'ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaimArgs',
    'ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaimArgsDict',
    'ExternalOauthIntegrationRelatedParameterArgs',
    'ExternalOauthIntegrationRelatedParameterArgsDict',
    'ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedListArgs',
    'ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedListArgsDict',
    'ExternalOauthIntegrationShowOutputArgs',
    'ExternalOauthIntegrationShowOutputArgsDict',
    'ExternalTableColumnArgs',
    'ExternalTableColumnArgsDict',
    'ExternalTableTagArgs',
    'ExternalTableTagArgsDict',
    'ExternalVolumeDescribeOutputArgs',
    'ExternalVolumeDescribeOutputArgsDict',
    'ExternalVolumeShowOutputArgs',
    'ExternalVolumeShowOutputArgsDict',
    'ExternalVolumeStorageLocationArgs',
    'ExternalVolumeStorageLocationArgsDict',
    'FailoverGroupFromReplicaArgs',
    'FailoverGroupFromReplicaArgsDict',
    'FailoverGroupReplicationScheduleArgs',
    'FailoverGroupReplicationScheduleArgsDict',
    'FailoverGroupReplicationScheduleCronArgs',
    'FailoverGroupReplicationScheduleCronArgsDict',
    'FunctionArgumentArgs',
    'FunctionArgumentArgsDict',
    'GrantOwnershipOnArgs',
    'GrantOwnershipOnArgsDict',
    'GrantOwnershipOnAllArgs',
    'GrantOwnershipOnAllArgsDict',
    'GrantOwnershipOnFutureArgs',
    'GrantOwnershipOnFutureArgsDict',
    'GrantPrivilegesToAccountRoleOnAccountObjectArgs',
    'GrantPrivilegesToAccountRoleOnAccountObjectArgsDict',
    'GrantPrivilegesToAccountRoleOnSchemaArgs',
    'GrantPrivilegesToAccountRoleOnSchemaArgsDict',
    'GrantPrivilegesToAccountRoleOnSchemaObjectArgs',
    'GrantPrivilegesToAccountRoleOnSchemaObjectArgsDict',
    'GrantPrivilegesToAccountRoleOnSchemaObjectAllArgs',
    'GrantPrivilegesToAccountRoleOnSchemaObjectAllArgsDict',
    'GrantPrivilegesToAccountRoleOnSchemaObjectFutureArgs',
    'GrantPrivilegesToAccountRoleOnSchemaObjectFutureArgsDict',
    'GrantPrivilegesToDatabaseRoleOnSchemaArgs',
    'GrantPrivilegesToDatabaseRoleOnSchemaArgsDict',
    'GrantPrivilegesToDatabaseRoleOnSchemaObjectArgs',
    'GrantPrivilegesToDatabaseRoleOnSchemaObjectArgsDict',
    'GrantPrivilegesToDatabaseRoleOnSchemaObjectAllArgs',
    'GrantPrivilegesToDatabaseRoleOnSchemaObjectAllArgsDict',
    'GrantPrivilegesToDatabaseRoleOnSchemaObjectFutureArgs',
    'GrantPrivilegesToDatabaseRoleOnSchemaObjectFutureArgsDict',
    'LegacyServiceUserParameterArgs',
    'LegacyServiceUserParameterArgsDict',
    'LegacyServiceUserParameterAbortDetachedQueryArgs',
    'LegacyServiceUserParameterAbortDetachedQueryArgsDict',
    'LegacyServiceUserParameterAutocommitArgs',
    'LegacyServiceUserParameterAutocommitArgsDict',
    'LegacyServiceUserParameterBinaryInputFormatArgs',
    'LegacyServiceUserParameterBinaryInputFormatArgsDict',
    'LegacyServiceUserParameterBinaryOutputFormatArgs',
    'LegacyServiceUserParameterBinaryOutputFormatArgsDict',
    'LegacyServiceUserParameterClientMemoryLimitArgs',
    'LegacyServiceUserParameterClientMemoryLimitArgsDict',
    'LegacyServiceUserParameterClientMetadataRequestUseConnectionCtxArgs',
    'LegacyServiceUserParameterClientMetadataRequestUseConnectionCtxArgsDict',
    'LegacyServiceUserParameterClientPrefetchThreadArgs',
    'LegacyServiceUserParameterClientPrefetchThreadArgsDict',
    'LegacyServiceUserParameterClientResultChunkSizeArgs',
    'LegacyServiceUserParameterClientResultChunkSizeArgsDict',
    'LegacyServiceUserParameterClientResultColumnCaseInsensitiveArgs',
    'LegacyServiceUserParameterClientResultColumnCaseInsensitiveArgsDict',
    'LegacyServiceUserParameterClientSessionKeepAlifeArgs',
    'LegacyServiceUserParameterClientSessionKeepAlifeArgsDict',
    'LegacyServiceUserParameterClientSessionKeepAliveHeartbeatFrequencyArgs',
    'LegacyServiceUserParameterClientSessionKeepAliveHeartbeatFrequencyArgsDict',
    'LegacyServiceUserParameterClientTimestampTypeMappingArgs',
    'LegacyServiceUserParameterClientTimestampTypeMappingArgsDict',
    'LegacyServiceUserParameterDateInputFormatArgs',
    'LegacyServiceUserParameterDateInputFormatArgsDict',
    'LegacyServiceUserParameterDateOutputFormatArgs',
    'LegacyServiceUserParameterDateOutputFormatArgsDict',
    'LegacyServiceUserParameterEnableUnloadPhysicalTypeOptimizationArgs',
    'LegacyServiceUserParameterEnableUnloadPhysicalTypeOptimizationArgsDict',
    'LegacyServiceUserParameterEnableUnredactedQuerySyntaxErrorArgs',
    'LegacyServiceUserParameterEnableUnredactedQuerySyntaxErrorArgsDict',
    'LegacyServiceUserParameterErrorOnNondeterministicMergeArgs',
    'LegacyServiceUserParameterErrorOnNondeterministicMergeArgsDict',
    'LegacyServiceUserParameterErrorOnNondeterministicUpdateArgs',
    'LegacyServiceUserParameterErrorOnNondeterministicUpdateArgsDict',
    'LegacyServiceUserParameterGeographyOutputFormatArgs',
    'LegacyServiceUserParameterGeographyOutputFormatArgsDict',
    'LegacyServiceUserParameterGeometryOutputFormatArgs',
    'LegacyServiceUserParameterGeometryOutputFormatArgsDict',
    'LegacyServiceUserParameterJdbcTreatDecimalAsIntArgs',
    'LegacyServiceUserParameterJdbcTreatDecimalAsIntArgsDict',
    'LegacyServiceUserParameterJdbcTreatTimestampNtzAsUtcArgs',
    'LegacyServiceUserParameterJdbcTreatTimestampNtzAsUtcArgsDict',
    'LegacyServiceUserParameterJdbcUseSessionTimezoneArgs',
    'LegacyServiceUserParameterJdbcUseSessionTimezoneArgsDict',
    'LegacyServiceUserParameterJsonIndentArgs',
    'LegacyServiceUserParameterJsonIndentArgsDict',
    'LegacyServiceUserParameterLockTimeoutArgs',
    'LegacyServiceUserParameterLockTimeoutArgsDict',
    'LegacyServiceUserParameterLogLevelArgs',
    'LegacyServiceUserParameterLogLevelArgsDict',
    'LegacyServiceUserParameterMultiStatementCountArgs',
    'LegacyServiceUserParameterMultiStatementCountArgsDict',
    'LegacyServiceUserParameterNetworkPolicyArgs',
    'LegacyServiceUserParameterNetworkPolicyArgsDict',
    'LegacyServiceUserParameterNoorderSequenceAsDefaultArgs',
    'LegacyServiceUserParameterNoorderSequenceAsDefaultArgsDict',
    'LegacyServiceUserParameterOdbcTreatDecimalAsIntArgs',
    'LegacyServiceUserParameterOdbcTreatDecimalAsIntArgsDict',
    'LegacyServiceUserParameterPreventUnloadToInternalStageArgs',
    'LegacyServiceUserParameterPreventUnloadToInternalStageArgsDict',
    'LegacyServiceUserParameterQueryTagArgs',
    'LegacyServiceUserParameterQueryTagArgsDict',
    'LegacyServiceUserParameterQuotedIdentifiersIgnoreCaseArgs',
    'LegacyServiceUserParameterQuotedIdentifiersIgnoreCaseArgsDict',
    'LegacyServiceUserParameterRowsPerResultsetArgs',
    'LegacyServiceUserParameterRowsPerResultsetArgsDict',
    'LegacyServiceUserParameterS3StageVpceDnsNameArgs',
    'LegacyServiceUserParameterS3StageVpceDnsNameArgsDict',
    'LegacyServiceUserParameterSearchPathArgs',
    'LegacyServiceUserParameterSearchPathArgsDict',
    'LegacyServiceUserParameterSimulatedDataSharingConsumerArgs',
    'LegacyServiceUserParameterSimulatedDataSharingConsumerArgsDict',
    'LegacyServiceUserParameterStatementQueuedTimeoutInSecondArgs',
    'LegacyServiceUserParameterStatementQueuedTimeoutInSecondArgsDict',
    'LegacyServiceUserParameterStatementTimeoutInSecondArgs',
    'LegacyServiceUserParameterStatementTimeoutInSecondArgsDict',
    'LegacyServiceUserParameterStrictJsonOutputArgs',
    'LegacyServiceUserParameterStrictJsonOutputArgsDict',
    'LegacyServiceUserParameterTimeInputFormatArgs',
    'LegacyServiceUserParameterTimeInputFormatArgsDict',
    'LegacyServiceUserParameterTimeOutputFormatArgs',
    'LegacyServiceUserParameterTimeOutputFormatArgsDict',
    'LegacyServiceUserParameterTimestampDayIsAlways24hArgs',
    'LegacyServiceUserParameterTimestampDayIsAlways24hArgsDict',
    'LegacyServiceUserParameterTimestampInputFormatArgs',
    'LegacyServiceUserParameterTimestampInputFormatArgsDict',
    'LegacyServiceUserParameterTimestampLtzOutputFormatArgs',
    'LegacyServiceUserParameterTimestampLtzOutputFormatArgsDict',
    'LegacyServiceUserParameterTimestampNtzOutputFormatArgs',
    'LegacyServiceUserParameterTimestampNtzOutputFormatArgsDict',
    'LegacyServiceUserParameterTimestampOutputFormatArgs',
    'LegacyServiceUserParameterTimestampOutputFormatArgsDict',
    'LegacyServiceUserParameterTimestampTypeMappingArgs',
    'LegacyServiceUserParameterTimestampTypeMappingArgsDict',
    'LegacyServiceUserParameterTimestampTzOutputFormatArgs',
    'LegacyServiceUserParameterTimestampTzOutputFormatArgsDict',
    'LegacyServiceUserParameterTimezoneArgs',
    'LegacyServiceUserParameterTimezoneArgsDict',
    'LegacyServiceUserParameterTraceLevelArgs',
    'LegacyServiceUserParameterTraceLevelArgsDict',
    'LegacyServiceUserParameterTransactionAbortOnErrorArgs',
    'LegacyServiceUserParameterTransactionAbortOnErrorArgsDict',
    'LegacyServiceUserParameterTransactionDefaultIsolationLevelArgs',
    'LegacyServiceUserParameterTransactionDefaultIsolationLevelArgsDict',
    'LegacyServiceUserParameterTwoDigitCenturyStartArgs',
    'LegacyServiceUserParameterTwoDigitCenturyStartArgsDict',
    'LegacyServiceUserParameterUnsupportedDdlActionArgs',
    'LegacyServiceUserParameterUnsupportedDdlActionArgsDict',
    'LegacyServiceUserParameterUseCachedResultArgs',
    'LegacyServiceUserParameterUseCachedResultArgsDict',
    'LegacyServiceUserParameterWeekOfYearPolicyArgs',
    'LegacyServiceUserParameterWeekOfYearPolicyArgsDict',
    'LegacyServiceUserParameterWeekStartArgs',
    'LegacyServiceUserParameterWeekStartArgsDict',
    'LegacyServiceUserShowOutputArgs',
    'LegacyServiceUserShowOutputArgsDict',
    'MaskingPolicyArgumentArgs',
    'MaskingPolicyArgumentArgsDict',
    'MaskingPolicyDescribeOutputArgs',
    'MaskingPolicyDescribeOutputArgsDict',
    'MaskingPolicyDescribeOutputSignatureArgs',
    'MaskingPolicyDescribeOutputSignatureArgsDict',
    'MaskingPolicyShowOutputArgs',
    'MaskingPolicyShowOutputArgsDict',
    'MaterializedViewTagArgs',
    'MaterializedViewTagArgsDict',
    'NetworkPolicyDescribeOutputArgs',
    'NetworkPolicyDescribeOutputArgsDict',
    'NetworkPolicyShowOutputArgs',
    'NetworkPolicyShowOutputArgsDict',
    'OauthIntegrationForCustomClientsDescribeOutputArgs',
    'OauthIntegrationForCustomClientsDescribeOutputArgsDict',
    'OauthIntegrationForCustomClientsDescribeOutputBlockedRolesListArgs',
    'OauthIntegrationForCustomClientsDescribeOutputBlockedRolesListArgsDict',
    'OauthIntegrationForCustomClientsDescribeOutputCommentArgs',
    'OauthIntegrationForCustomClientsDescribeOutputCommentArgsDict',
    'OauthIntegrationForCustomClientsDescribeOutputEnabledArgs',
    'OauthIntegrationForCustomClientsDescribeOutputEnabledArgsDict',
    'OauthIntegrationForCustomClientsDescribeOutputNetworkPolicyArgs',
    'OauthIntegrationForCustomClientsDescribeOutputNetworkPolicyArgsDict',
    'OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUriArgs',
    'OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUriArgsDict',
    'OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpointArgs',
    'OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpointArgsDict',
    'OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpointArgs',
    'OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpointArgsDict',
    'OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpointArgs',
    'OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpointArgsDict',
    'OauthIntegrationForCustomClientsDescribeOutputOauthClientIdArgs',
    'OauthIntegrationForCustomClientsDescribeOutputOauthClientIdArgsDict',
    'OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2FpArgs',
    'OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2FpArgsDict',
    'OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFpArgs',
    'OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFpArgsDict',
    'OauthIntegrationForCustomClientsDescribeOutputOauthClientTypeArgs',
    'OauthIntegrationForCustomClientsDescribeOutputOauthClientTypeArgsDict',
    'OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkceArgs',
    'OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkceArgsDict',
    'OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshTokenArgs',
    'OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshTokenArgsDict',
    'OauthIntegrationForCustomClientsDescribeOutputOauthRedirectUriArgs',
    'OauthIntegrationForCustomClientsDescribeOutputOauthRedirectUriArgsDict',
    'OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidityArgs',
    'OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidityArgsDict',
    'OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpointArgs',
    'OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpointArgsDict',
    'OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRoleArgs',
    'OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRoleArgsDict',
    'OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesListArgs',
    'OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesListArgsDict',
    'OauthIntegrationForCustomClientsShowOutputArgs',
    'OauthIntegrationForCustomClientsShowOutputArgsDict',
    'OauthIntegrationForPartnerApplicationsDescribeOutputArgs',
    'OauthIntegrationForPartnerApplicationsDescribeOutputArgsDict',
    'OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesListArgs',
    'OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesListArgsDict',
    'OauthIntegrationForPartnerApplicationsDescribeOutputCommentArgs',
    'OauthIntegrationForPartnerApplicationsDescribeOutputCommentArgsDict',
    'OauthIntegrationForPartnerApplicationsDescribeOutputEnabledArgs',
    'OauthIntegrationForPartnerApplicationsDescribeOutputEnabledArgsDict',
    'OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicyArgs',
    'OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicyArgsDict',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUriArgs',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUriArgsDict',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpointArgs',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpointArgsDict',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpointArgs',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpointArgsDict',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpointArgs',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpointArgsDict',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientIdArgs',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientIdArgsDict',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2FpArgs',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2FpArgsDict',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFpArgs',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFpArgsDict',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientTypeArgs',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientTypeArgsDict',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkceArgs',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkceArgsDict',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshTokenArgs',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshTokenArgsDict',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthRedirectUriArgs',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthRedirectUriArgsDict',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidityArgs',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidityArgsDict',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpointArgs',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpointArgsDict',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRoleArgs',
    'OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRoleArgsDict',
    'OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesListArgs',
    'OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesListArgsDict',
    'OauthIntegrationForPartnerApplicationsShowOutputArgs',
    'OauthIntegrationForPartnerApplicationsShowOutputArgsDict',
    'ObjectParameterObjectIdentifierArgs',
    'ObjectParameterObjectIdentifierArgsDict',
    'PrimaryConnectionShowOutputArgs',
    'PrimaryConnectionShowOutputArgsDict',
    'ProcedureArgumentArgs',
    'ProcedureArgumentArgsDict',
    'ProviderTokenAccessorArgs',
    'ProviderTokenAccessorArgsDict',
    'ResourceMonitorShowOutputArgs',
    'ResourceMonitorShowOutputArgsDict',
    'RoleShowOutputArgs',
    'RoleShowOutputArgsDict',
    'RowAccessPolicyArgumentArgs',
    'RowAccessPolicyArgumentArgsDict',
    'RowAccessPolicyDescribeOutputArgs',
    'RowAccessPolicyDescribeOutputArgsDict',
    'RowAccessPolicyDescribeOutputSignatureArgs',
    'RowAccessPolicyDescribeOutputSignatureArgsDict',
    'RowAccessPolicyShowOutputArgs',
    'RowAccessPolicyShowOutputArgsDict',
    'Saml2IntegrationDescribeOutputArgs',
    'Saml2IntegrationDescribeOutputArgsDict',
    'Saml2IntegrationDescribeOutputAllowedEmailPatternArgs',
    'Saml2IntegrationDescribeOutputAllowedEmailPatternArgsDict',
    'Saml2IntegrationDescribeOutputAllowedUserDomainArgs',
    'Saml2IntegrationDescribeOutputAllowedUserDomainArgsDict',
    'Saml2IntegrationDescribeOutputCommentArgs',
    'Saml2IntegrationDescribeOutputCommentArgsDict',
    'Saml2IntegrationDescribeOutputSaml2DigestMethodsUsedArgs',
    'Saml2IntegrationDescribeOutputSaml2DigestMethodsUsedArgsDict',
    'Saml2IntegrationDescribeOutputSaml2EnableSpInitiatedArgs',
    'Saml2IntegrationDescribeOutputSaml2EnableSpInitiatedArgsDict',
    'Saml2IntegrationDescribeOutputSaml2ForceAuthnArgs',
    'Saml2IntegrationDescribeOutputSaml2ForceAuthnArgsDict',
    'Saml2IntegrationDescribeOutputSaml2IssuerArgs',
    'Saml2IntegrationDescribeOutputSaml2IssuerArgsDict',
    'Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrlArgs',
    'Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrlArgsDict',
    'Saml2IntegrationDescribeOutputSaml2ProviderArgs',
    'Saml2IntegrationDescribeOutputSaml2ProviderArgsDict',
    'Saml2IntegrationDescribeOutputSaml2RequestedNameidFormatArgs',
    'Saml2IntegrationDescribeOutputSaml2RequestedNameidFormatArgsDict',
    'Saml2IntegrationDescribeOutputSaml2SignRequestArgs',
    'Saml2IntegrationDescribeOutputSaml2SignRequestArgsDict',
    'Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsedArgs',
    'Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsedArgsDict',
    'Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrlArgs',
    'Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrlArgsDict',
    'Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrlArgs',
    'Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrlArgsDict',
    'Saml2IntegrationDescribeOutputSaml2SnowflakeMetadataArgs',
    'Saml2IntegrationDescribeOutputSaml2SnowflakeMetadataArgsDict',
    'Saml2IntegrationDescribeOutputSaml2SnowflakeX509CertArgs',
    'Saml2IntegrationDescribeOutputSaml2SnowflakeX509CertArgsDict',
    'Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabelArgs',
    'Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabelArgsDict',
    'Saml2IntegrationDescribeOutputSaml2SsoUrlArgs',
    'Saml2IntegrationDescribeOutputSaml2SsoUrlArgsDict',
    'Saml2IntegrationDescribeOutputSaml2X509CertArgs',
    'Saml2IntegrationDescribeOutputSaml2X509CertArgsDict',
    'Saml2IntegrationShowOutputArgs',
    'Saml2IntegrationShowOutputArgsDict',
    'SchemaDescribeOutputArgs',
    'SchemaDescribeOutputArgsDict',
    'SchemaParameterArgs',
    'SchemaParameterArgsDict',
    'SchemaParameterCatalogArgs',
    'SchemaParameterCatalogArgsDict',
    'SchemaParameterDataRetentionTimeInDayArgs',
    'SchemaParameterDataRetentionTimeInDayArgsDict',
    'SchemaParameterDefaultDdlCollationArgs',
    'SchemaParameterDefaultDdlCollationArgsDict',
    'SchemaParameterEnableConsoleOutputArgs',
    'SchemaParameterEnableConsoleOutputArgsDict',
    'SchemaParameterExternalVolumeArgs',
    'SchemaParameterExternalVolumeArgsDict',
    'SchemaParameterLogLevelArgs',
    'SchemaParameterLogLevelArgsDict',
    'SchemaParameterMaxDataExtensionTimeInDayArgs',
    'SchemaParameterMaxDataExtensionTimeInDayArgsDict',
    'SchemaParameterPipeExecutionPausedArgs',
    'SchemaParameterPipeExecutionPausedArgsDict',
    'SchemaParameterQuotedIdentifiersIgnoreCaseArgs',
    'SchemaParameterQuotedIdentifiersIgnoreCaseArgsDict',
    'SchemaParameterReplaceInvalidCharacterArgs',
    'SchemaParameterReplaceInvalidCharacterArgsDict',
    'SchemaParameterStorageSerializationPolicyArgs',
    'SchemaParameterStorageSerializationPolicyArgsDict',
    'SchemaParameterSuspendTaskAfterNumFailureArgs',
    'SchemaParameterSuspendTaskAfterNumFailureArgsDict',
    'SchemaParameterTaskAutoRetryAttemptArgs',
    'SchemaParameterTaskAutoRetryAttemptArgsDict',
    'SchemaParameterTraceLevelArgs',
    'SchemaParameterTraceLevelArgsDict',
    'SchemaParameterUserTaskManagedInitialWarehouseSizeArgs',
    'SchemaParameterUserTaskManagedInitialWarehouseSizeArgsDict',
    'SchemaParameterUserTaskMinimumTriggerIntervalInSecondArgs',
    'SchemaParameterUserTaskMinimumTriggerIntervalInSecondArgsDict',
    'SchemaParameterUserTaskTimeoutMArgs',
    'SchemaParameterUserTaskTimeoutMArgsDict',
    'SchemaShowOutputArgs',
    'SchemaShowOutputArgsDict',
    'ScimIntegrationDescribeOutputArgs',
    'ScimIntegrationDescribeOutputArgsDict',
    'ScimIntegrationDescribeOutputCommentArgs',
    'ScimIntegrationDescribeOutputCommentArgsDict',
    'ScimIntegrationDescribeOutputEnabledArgs',
    'ScimIntegrationDescribeOutputEnabledArgsDict',
    'ScimIntegrationDescribeOutputNetworkPolicyArgs',
    'ScimIntegrationDescribeOutputNetworkPolicyArgsDict',
    'ScimIntegrationDescribeOutputRunAsRoleArgs',
    'ScimIntegrationDescribeOutputRunAsRoleArgsDict',
    'ScimIntegrationDescribeOutputSyncPasswordArgs',
    'ScimIntegrationDescribeOutputSyncPasswordArgsDict',
    'ScimIntegrationShowOutputArgs',
    'ScimIntegrationShowOutputArgsDict',
    'SecondaryConnectionShowOutputArgs',
    'SecondaryConnectionShowOutputArgsDict',
    'SecretWithAuthorizationCodeGrantDescribeOutputArgs',
    'SecretWithAuthorizationCodeGrantDescribeOutputArgsDict',
    'SecretWithAuthorizationCodeGrantShowOutputArgs',
    'SecretWithAuthorizationCodeGrantShowOutputArgsDict',
    'SecretWithBasicAuthenticationDescribeOutputArgs',
    'SecretWithBasicAuthenticationDescribeOutputArgsDict',
    'SecretWithBasicAuthenticationShowOutputArgs',
    'SecretWithBasicAuthenticationShowOutputArgsDict',
    'SecretWithClientCredentialsDescribeOutputArgs',
    'SecretWithClientCredentialsDescribeOutputArgsDict',
    'SecretWithClientCredentialsShowOutputArgs',
    'SecretWithClientCredentialsShowOutputArgsDict',
    'SecretWithGenericStringDescribeOutputArgs',
    'SecretWithGenericStringDescribeOutputArgsDict',
    'SecretWithGenericStringShowOutputArgs',
    'SecretWithGenericStringShowOutputArgsDict',
    'ServiceUserParameterArgs',
    'ServiceUserParameterArgsDict',
    'ServiceUserParameterAbortDetachedQueryArgs',
    'ServiceUserParameterAbortDetachedQueryArgsDict',
    'ServiceUserParameterAutocommitArgs',
    'ServiceUserParameterAutocommitArgsDict',
    'ServiceUserParameterBinaryInputFormatArgs',
    'ServiceUserParameterBinaryInputFormatArgsDict',
    'ServiceUserParameterBinaryOutputFormatArgs',
    'ServiceUserParameterBinaryOutputFormatArgsDict',
    'ServiceUserParameterClientMemoryLimitArgs',
    'ServiceUserParameterClientMemoryLimitArgsDict',
    'ServiceUserParameterClientMetadataRequestUseConnectionCtxArgs',
    'ServiceUserParameterClientMetadataRequestUseConnectionCtxArgsDict',
    'ServiceUserParameterClientPrefetchThreadArgs',
    'ServiceUserParameterClientPrefetchThreadArgsDict',
    'ServiceUserParameterClientResultChunkSizeArgs',
    'ServiceUserParameterClientResultChunkSizeArgsDict',
    'ServiceUserParameterClientResultColumnCaseInsensitiveArgs',
    'ServiceUserParameterClientResultColumnCaseInsensitiveArgsDict',
    'ServiceUserParameterClientSessionKeepAlifeArgs',
    'ServiceUserParameterClientSessionKeepAlifeArgsDict',
    'ServiceUserParameterClientSessionKeepAliveHeartbeatFrequencyArgs',
    'ServiceUserParameterClientSessionKeepAliveHeartbeatFrequencyArgsDict',
    'ServiceUserParameterClientTimestampTypeMappingArgs',
    'ServiceUserParameterClientTimestampTypeMappingArgsDict',
    'ServiceUserParameterDateInputFormatArgs',
    'ServiceUserParameterDateInputFormatArgsDict',
    'ServiceUserParameterDateOutputFormatArgs',
    'ServiceUserParameterDateOutputFormatArgsDict',
    'ServiceUserParameterEnableUnloadPhysicalTypeOptimizationArgs',
    'ServiceUserParameterEnableUnloadPhysicalTypeOptimizationArgsDict',
    'ServiceUserParameterEnableUnredactedQuerySyntaxErrorArgs',
    'ServiceUserParameterEnableUnredactedQuerySyntaxErrorArgsDict',
    'ServiceUserParameterErrorOnNondeterministicMergeArgs',
    'ServiceUserParameterErrorOnNondeterministicMergeArgsDict',
    'ServiceUserParameterErrorOnNondeterministicUpdateArgs',
    'ServiceUserParameterErrorOnNondeterministicUpdateArgsDict',
    'ServiceUserParameterGeographyOutputFormatArgs',
    'ServiceUserParameterGeographyOutputFormatArgsDict',
    'ServiceUserParameterGeometryOutputFormatArgs',
    'ServiceUserParameterGeometryOutputFormatArgsDict',
    'ServiceUserParameterJdbcTreatDecimalAsIntArgs',
    'ServiceUserParameterJdbcTreatDecimalAsIntArgsDict',
    'ServiceUserParameterJdbcTreatTimestampNtzAsUtcArgs',
    'ServiceUserParameterJdbcTreatTimestampNtzAsUtcArgsDict',
    'ServiceUserParameterJdbcUseSessionTimezoneArgs',
    'ServiceUserParameterJdbcUseSessionTimezoneArgsDict',
    'ServiceUserParameterJsonIndentArgs',
    'ServiceUserParameterJsonIndentArgsDict',
    'ServiceUserParameterLockTimeoutArgs',
    'ServiceUserParameterLockTimeoutArgsDict',
    'ServiceUserParameterLogLevelArgs',
    'ServiceUserParameterLogLevelArgsDict',
    'ServiceUserParameterMultiStatementCountArgs',
    'ServiceUserParameterMultiStatementCountArgsDict',
    'ServiceUserParameterNetworkPolicyArgs',
    'ServiceUserParameterNetworkPolicyArgsDict',
    'ServiceUserParameterNoorderSequenceAsDefaultArgs',
    'ServiceUserParameterNoorderSequenceAsDefaultArgsDict',
    'ServiceUserParameterOdbcTreatDecimalAsIntArgs',
    'ServiceUserParameterOdbcTreatDecimalAsIntArgsDict',
    'ServiceUserParameterPreventUnloadToInternalStageArgs',
    'ServiceUserParameterPreventUnloadToInternalStageArgsDict',
    'ServiceUserParameterQueryTagArgs',
    'ServiceUserParameterQueryTagArgsDict',
    'ServiceUserParameterQuotedIdentifiersIgnoreCaseArgs',
    'ServiceUserParameterQuotedIdentifiersIgnoreCaseArgsDict',
    'ServiceUserParameterRowsPerResultsetArgs',
    'ServiceUserParameterRowsPerResultsetArgsDict',
    'ServiceUserParameterS3StageVpceDnsNameArgs',
    'ServiceUserParameterS3StageVpceDnsNameArgsDict',
    'ServiceUserParameterSearchPathArgs',
    'ServiceUserParameterSearchPathArgsDict',
    'ServiceUserParameterSimulatedDataSharingConsumerArgs',
    'ServiceUserParameterSimulatedDataSharingConsumerArgsDict',
    'ServiceUserParameterStatementQueuedTimeoutInSecondArgs',
    'ServiceUserParameterStatementQueuedTimeoutInSecondArgsDict',
    'ServiceUserParameterStatementTimeoutInSecondArgs',
    'ServiceUserParameterStatementTimeoutInSecondArgsDict',
    'ServiceUserParameterStrictJsonOutputArgs',
    'ServiceUserParameterStrictJsonOutputArgsDict',
    'ServiceUserParameterTimeInputFormatArgs',
    'ServiceUserParameterTimeInputFormatArgsDict',
    'ServiceUserParameterTimeOutputFormatArgs',
    'ServiceUserParameterTimeOutputFormatArgsDict',
    'ServiceUserParameterTimestampDayIsAlways24hArgs',
    'ServiceUserParameterTimestampDayIsAlways24hArgsDict',
    'ServiceUserParameterTimestampInputFormatArgs',
    'ServiceUserParameterTimestampInputFormatArgsDict',
    'ServiceUserParameterTimestampLtzOutputFormatArgs',
    'ServiceUserParameterTimestampLtzOutputFormatArgsDict',
    'ServiceUserParameterTimestampNtzOutputFormatArgs',
    'ServiceUserParameterTimestampNtzOutputFormatArgsDict',
    'ServiceUserParameterTimestampOutputFormatArgs',
    'ServiceUserParameterTimestampOutputFormatArgsDict',
    'ServiceUserParameterTimestampTypeMappingArgs',
    'ServiceUserParameterTimestampTypeMappingArgsDict',
    'ServiceUserParameterTimestampTzOutputFormatArgs',
    'ServiceUserParameterTimestampTzOutputFormatArgsDict',
    'ServiceUserParameterTimezoneArgs',
    'ServiceUserParameterTimezoneArgsDict',
    'ServiceUserParameterTraceLevelArgs',
    'ServiceUserParameterTraceLevelArgsDict',
    'ServiceUserParameterTransactionAbortOnErrorArgs',
    'ServiceUserParameterTransactionAbortOnErrorArgsDict',
    'ServiceUserParameterTransactionDefaultIsolationLevelArgs',
    'ServiceUserParameterTransactionDefaultIsolationLevelArgsDict',
    'ServiceUserParameterTwoDigitCenturyStartArgs',
    'ServiceUserParameterTwoDigitCenturyStartArgsDict',
    'ServiceUserParameterUnsupportedDdlActionArgs',
    'ServiceUserParameterUnsupportedDdlActionArgsDict',
    'ServiceUserParameterUseCachedResultArgs',
    'ServiceUserParameterUseCachedResultArgsDict',
    'ServiceUserParameterWeekOfYearPolicyArgs',
    'ServiceUserParameterWeekOfYearPolicyArgsDict',
    'ServiceUserParameterWeekStartArgs',
    'ServiceUserParameterWeekStartArgsDict',
    'ServiceUserShowOutputArgs',
    'ServiceUserShowOutputArgsDict',
    'StageTagArgs',
    'StageTagArgsDict',
    'StreamOnDirectoryTableDescribeOutputArgs',
    'StreamOnDirectoryTableDescribeOutputArgsDict',
    'StreamOnDirectoryTableShowOutputArgs',
    'StreamOnDirectoryTableShowOutputArgsDict',
    'StreamOnExternalTableAtArgs',
    'StreamOnExternalTableAtArgsDict',
    'StreamOnExternalTableBeforeArgs',
    'StreamOnExternalTableBeforeArgsDict',
    'StreamOnExternalTableDescribeOutputArgs',
    'StreamOnExternalTableDescribeOutputArgsDict',
    'StreamOnExternalTableShowOutputArgs',
    'StreamOnExternalTableShowOutputArgsDict',
    'StreamOnTableAtArgs',
    'StreamOnTableAtArgsDict',
    'StreamOnTableBeforeArgs',
    'StreamOnTableBeforeArgsDict',
    'StreamOnTableDescribeOutputArgs',
    'StreamOnTableDescribeOutputArgsDict',
    'StreamOnTableShowOutputArgs',
    'StreamOnTableShowOutputArgsDict',
    'StreamOnViewAtArgs',
    'StreamOnViewAtArgsDict',
    'StreamOnViewBeforeArgs',
    'StreamOnViewBeforeArgsDict',
    'StreamOnViewDescribeOutputArgs',
    'StreamOnViewDescribeOutputArgsDict',
    'StreamOnViewShowOutputArgs',
    'StreamOnViewShowOutputArgsDict',
    'StreamlitDescribeOutputArgs',
    'StreamlitDescribeOutputArgsDict',
    'StreamlitShowOutputArgs',
    'StreamlitShowOutputArgsDict',
    'TableColumnArgs',
    'TableColumnArgsDict',
    'TableColumnDefaultArgs',
    'TableColumnDefaultArgsDict',
    'TableColumnIdentityArgs',
    'TableColumnIdentityArgsDict',
    'TableConstraintForeignKeyPropertiesArgs',
    'TableConstraintForeignKeyPropertiesArgsDict',
    'TableConstraintForeignKeyPropertiesReferencesArgs',
    'TableConstraintForeignKeyPropertiesReferencesArgsDict',
    'TablePrimaryKeyArgs',
    'TablePrimaryKeyArgsDict',
    'TableTagArgs',
    'TableTagArgsDict',
    'TagAssociationObjectIdentifierArgs',
    'TagAssociationObjectIdentifierArgsDict',
    'TagShowOutputArgs',
    'TagShowOutputArgsDict',
    'TaskParameterArgs',
    'TaskParameterArgsDict',
    'TaskParameterAbortDetachedQueryArgs',
    'TaskParameterAbortDetachedQueryArgsDict',
    'TaskParameterAutocommitArgs',
    'TaskParameterAutocommitArgsDict',
    'TaskParameterBinaryInputFormatArgs',
    'TaskParameterBinaryInputFormatArgsDict',
    'TaskParameterBinaryOutputFormatArgs',
    'TaskParameterBinaryOutputFormatArgsDict',
    'TaskParameterClientMemoryLimitArgs',
    'TaskParameterClientMemoryLimitArgsDict',
    'TaskParameterClientMetadataRequestUseConnectionCtxArgs',
    'TaskParameterClientMetadataRequestUseConnectionCtxArgsDict',
    'TaskParameterClientPrefetchThreadArgs',
    'TaskParameterClientPrefetchThreadArgsDict',
    'TaskParameterClientResultChunkSizeArgs',
    'TaskParameterClientResultChunkSizeArgsDict',
    'TaskParameterClientResultColumnCaseInsensitiveArgs',
    'TaskParameterClientResultColumnCaseInsensitiveArgsDict',
    'TaskParameterClientSessionKeepAlifeArgs',
    'TaskParameterClientSessionKeepAlifeArgsDict',
    'TaskParameterClientSessionKeepAliveHeartbeatFrequencyArgs',
    'TaskParameterClientSessionKeepAliveHeartbeatFrequencyArgsDict',
    'TaskParameterClientTimestampTypeMappingArgs',
    'TaskParameterClientTimestampTypeMappingArgsDict',
    'TaskParameterDateInputFormatArgs',
    'TaskParameterDateInputFormatArgsDict',
    'TaskParameterDateOutputFormatArgs',
    'TaskParameterDateOutputFormatArgsDict',
    'TaskParameterEnableUnloadPhysicalTypeOptimizationArgs',
    'TaskParameterEnableUnloadPhysicalTypeOptimizationArgsDict',
    'TaskParameterErrorOnNondeterministicMergeArgs',
    'TaskParameterErrorOnNondeterministicMergeArgsDict',
    'TaskParameterErrorOnNondeterministicUpdateArgs',
    'TaskParameterErrorOnNondeterministicUpdateArgsDict',
    'TaskParameterGeographyOutputFormatArgs',
    'TaskParameterGeographyOutputFormatArgsDict',
    'TaskParameterGeometryOutputFormatArgs',
    'TaskParameterGeometryOutputFormatArgsDict',
    'TaskParameterJdbcTreatTimestampNtzAsUtcArgs',
    'TaskParameterJdbcTreatTimestampNtzAsUtcArgsDict',
    'TaskParameterJdbcUseSessionTimezoneArgs',
    'TaskParameterJdbcUseSessionTimezoneArgsDict',
    'TaskParameterJsonIndentArgs',
    'TaskParameterJsonIndentArgsDict',
    'TaskParameterLockTimeoutArgs',
    'TaskParameterLockTimeoutArgsDict',
    'TaskParameterLogLevelArgs',
    'TaskParameterLogLevelArgsDict',
    'TaskParameterMultiStatementCountArgs',
    'TaskParameterMultiStatementCountArgsDict',
    'TaskParameterNoorderSequenceAsDefaultArgs',
    'TaskParameterNoorderSequenceAsDefaultArgsDict',
    'TaskParameterOdbcTreatDecimalAsIntArgs',
    'TaskParameterOdbcTreatDecimalAsIntArgsDict',
    'TaskParameterQueryTagArgs',
    'TaskParameterQueryTagArgsDict',
    'TaskParameterQuotedIdentifiersIgnoreCaseArgs',
    'TaskParameterQuotedIdentifiersIgnoreCaseArgsDict',
    'TaskParameterRowsPerResultsetArgs',
    'TaskParameterRowsPerResultsetArgsDict',
    'TaskParameterS3StageVpceDnsNameArgs',
    'TaskParameterS3StageVpceDnsNameArgsDict',
    'TaskParameterSearchPathArgs',
    'TaskParameterSearchPathArgsDict',
    'TaskParameterStatementQueuedTimeoutInSecondArgs',
    'TaskParameterStatementQueuedTimeoutInSecondArgsDict',
    'TaskParameterStatementTimeoutInSecondArgs',
    'TaskParameterStatementTimeoutInSecondArgsDict',
    'TaskParameterStrictJsonOutputArgs',
    'TaskParameterStrictJsonOutputArgsDict',
    'TaskParameterSuspendTaskAfterNumFailureArgs',
    'TaskParameterSuspendTaskAfterNumFailureArgsDict',
    'TaskParameterTaskAutoRetryAttemptArgs',
    'TaskParameterTaskAutoRetryAttemptArgsDict',
    'TaskParameterTimeInputFormatArgs',
    'TaskParameterTimeInputFormatArgsDict',
    'TaskParameterTimeOutputFormatArgs',
    'TaskParameterTimeOutputFormatArgsDict',
    'TaskParameterTimestampDayIsAlways24hArgs',
    'TaskParameterTimestampDayIsAlways24hArgsDict',
    'TaskParameterTimestampInputFormatArgs',
    'TaskParameterTimestampInputFormatArgsDict',
    'TaskParameterTimestampLtzOutputFormatArgs',
    'TaskParameterTimestampLtzOutputFormatArgsDict',
    'TaskParameterTimestampNtzOutputFormatArgs',
    'TaskParameterTimestampNtzOutputFormatArgsDict',
    'TaskParameterTimestampOutputFormatArgs',
    'TaskParameterTimestampOutputFormatArgsDict',
    'TaskParameterTimestampTypeMappingArgs',
    'TaskParameterTimestampTypeMappingArgsDict',
    'TaskParameterTimestampTzOutputFormatArgs',
    'TaskParameterTimestampTzOutputFormatArgsDict',
    'TaskParameterTimezoneArgs',
    'TaskParameterTimezoneArgsDict',
    'TaskParameterTraceLevelArgs',
    'TaskParameterTraceLevelArgsDict',
    'TaskParameterTransactionAbortOnErrorArgs',
    'TaskParameterTransactionAbortOnErrorArgsDict',
    'TaskParameterTransactionDefaultIsolationLevelArgs',
    'TaskParameterTransactionDefaultIsolationLevelArgsDict',
    'TaskParameterTwoDigitCenturyStartArgs',
    'TaskParameterTwoDigitCenturyStartArgsDict',
    'TaskParameterUnsupportedDdlActionArgs',
    'TaskParameterUnsupportedDdlActionArgsDict',
    'TaskParameterUseCachedResultArgs',
    'TaskParameterUseCachedResultArgsDict',
    'TaskParameterUserTaskManagedInitialWarehouseSizeArgs',
    'TaskParameterUserTaskManagedInitialWarehouseSizeArgsDict',
    'TaskParameterUserTaskMinimumTriggerIntervalInSecondArgs',
    'TaskParameterUserTaskMinimumTriggerIntervalInSecondArgsDict',
    'TaskParameterUserTaskTimeoutMArgs',
    'TaskParameterUserTaskTimeoutMArgsDict',
    'TaskParameterWeekOfYearPolicyArgs',
    'TaskParameterWeekOfYearPolicyArgsDict',
    'TaskParameterWeekStartArgs',
    'TaskParameterWeekStartArgsDict',
    'TaskScheduleArgs',
    'TaskScheduleArgsDict',
    'TaskShowOutputArgs',
    'TaskShowOutputArgsDict',
    'TaskShowOutputTaskRelationArgs',
    'TaskShowOutputTaskRelationArgsDict',
    'UserParameterArgs',
    'UserParameterArgsDict',
    'UserParameterAbortDetachedQueryArgs',
    'UserParameterAbortDetachedQueryArgsDict',
    'UserParameterAutocommitArgs',
    'UserParameterAutocommitArgsDict',
    'UserParameterBinaryInputFormatArgs',
    'UserParameterBinaryInputFormatArgsDict',
    'UserParameterBinaryOutputFormatArgs',
    'UserParameterBinaryOutputFormatArgsDict',
    'UserParameterClientMemoryLimitArgs',
    'UserParameterClientMemoryLimitArgsDict',
    'UserParameterClientMetadataRequestUseConnectionCtxArgs',
    'UserParameterClientMetadataRequestUseConnectionCtxArgsDict',
    'UserParameterClientPrefetchThreadArgs',
    'UserParameterClientPrefetchThreadArgsDict',
    'UserParameterClientResultChunkSizeArgs',
    'UserParameterClientResultChunkSizeArgsDict',
    'UserParameterClientResultColumnCaseInsensitiveArgs',
    'UserParameterClientResultColumnCaseInsensitiveArgsDict',
    'UserParameterClientSessionKeepAlifeArgs',
    'UserParameterClientSessionKeepAlifeArgsDict',
    'UserParameterClientSessionKeepAliveHeartbeatFrequencyArgs',
    'UserParameterClientSessionKeepAliveHeartbeatFrequencyArgsDict',
    'UserParameterClientTimestampTypeMappingArgs',
    'UserParameterClientTimestampTypeMappingArgsDict',
    'UserParameterDateInputFormatArgs',
    'UserParameterDateInputFormatArgsDict',
    'UserParameterDateOutputFormatArgs',
    'UserParameterDateOutputFormatArgsDict',
    'UserParameterEnableUnloadPhysicalTypeOptimizationArgs',
    'UserParameterEnableUnloadPhysicalTypeOptimizationArgsDict',
    'UserParameterEnableUnredactedQuerySyntaxErrorArgs',
    'UserParameterEnableUnredactedQuerySyntaxErrorArgsDict',
    'UserParameterErrorOnNondeterministicMergeArgs',
    'UserParameterErrorOnNondeterministicMergeArgsDict',
    'UserParameterErrorOnNondeterministicUpdateArgs',
    'UserParameterErrorOnNondeterministicUpdateArgsDict',
    'UserParameterGeographyOutputFormatArgs',
    'UserParameterGeographyOutputFormatArgsDict',
    'UserParameterGeometryOutputFormatArgs',
    'UserParameterGeometryOutputFormatArgsDict',
    'UserParameterJdbcTreatDecimalAsIntArgs',
    'UserParameterJdbcTreatDecimalAsIntArgsDict',
    'UserParameterJdbcTreatTimestampNtzAsUtcArgs',
    'UserParameterJdbcTreatTimestampNtzAsUtcArgsDict',
    'UserParameterJdbcUseSessionTimezoneArgs',
    'UserParameterJdbcUseSessionTimezoneArgsDict',
    'UserParameterJsonIndentArgs',
    'UserParameterJsonIndentArgsDict',
    'UserParameterLockTimeoutArgs',
    'UserParameterLockTimeoutArgsDict',
    'UserParameterLogLevelArgs',
    'UserParameterLogLevelArgsDict',
    'UserParameterMultiStatementCountArgs',
    'UserParameterMultiStatementCountArgsDict',
    'UserParameterNetworkPolicyArgs',
    'UserParameterNetworkPolicyArgsDict',
    'UserParameterNoorderSequenceAsDefaultArgs',
    'UserParameterNoorderSequenceAsDefaultArgsDict',
    'UserParameterOdbcTreatDecimalAsIntArgs',
    'UserParameterOdbcTreatDecimalAsIntArgsDict',
    'UserParameterPreventUnloadToInternalStageArgs',
    'UserParameterPreventUnloadToInternalStageArgsDict',
    'UserParameterQueryTagArgs',
    'UserParameterQueryTagArgsDict',
    'UserParameterQuotedIdentifiersIgnoreCaseArgs',
    'UserParameterQuotedIdentifiersIgnoreCaseArgsDict',
    'UserParameterRowsPerResultsetArgs',
    'UserParameterRowsPerResultsetArgsDict',
    'UserParameterS3StageVpceDnsNameArgs',
    'UserParameterS3StageVpceDnsNameArgsDict',
    'UserParameterSearchPathArgs',
    'UserParameterSearchPathArgsDict',
    'UserParameterSimulatedDataSharingConsumerArgs',
    'UserParameterSimulatedDataSharingConsumerArgsDict',
    'UserParameterStatementQueuedTimeoutInSecondArgs',
    'UserParameterStatementQueuedTimeoutInSecondArgsDict',
    'UserParameterStatementTimeoutInSecondArgs',
    'UserParameterStatementTimeoutInSecondArgsDict',
    'UserParameterStrictJsonOutputArgs',
    'UserParameterStrictJsonOutputArgsDict',
    'UserParameterTimeInputFormatArgs',
    'UserParameterTimeInputFormatArgsDict',
    'UserParameterTimeOutputFormatArgs',
    'UserParameterTimeOutputFormatArgsDict',
    'UserParameterTimestampDayIsAlways24hArgs',
    'UserParameterTimestampDayIsAlways24hArgsDict',
    'UserParameterTimestampInputFormatArgs',
    'UserParameterTimestampInputFormatArgsDict',
    'UserParameterTimestampLtzOutputFormatArgs',
    'UserParameterTimestampLtzOutputFormatArgsDict',
    'UserParameterTimestampNtzOutputFormatArgs',
    'UserParameterTimestampNtzOutputFormatArgsDict',
    'UserParameterTimestampOutputFormatArgs',
    'UserParameterTimestampOutputFormatArgsDict',
    'UserParameterTimestampTypeMappingArgs',
    'UserParameterTimestampTypeMappingArgsDict',
    'UserParameterTimestampTzOutputFormatArgs',
    'UserParameterTimestampTzOutputFormatArgsDict',
    'UserParameterTimezoneArgs',
    'UserParameterTimezoneArgsDict',
    'UserParameterTraceLevelArgs',
    'UserParameterTraceLevelArgsDict',
    'UserParameterTransactionAbortOnErrorArgs',
    'UserParameterTransactionAbortOnErrorArgsDict',
    'UserParameterTransactionDefaultIsolationLevelArgs',
    'UserParameterTransactionDefaultIsolationLevelArgsDict',
    'UserParameterTwoDigitCenturyStartArgs',
    'UserParameterTwoDigitCenturyStartArgsDict',
    'UserParameterUnsupportedDdlActionArgs',
    'UserParameterUnsupportedDdlActionArgsDict',
    'UserParameterUseCachedResultArgs',
    'UserParameterUseCachedResultArgsDict',
    'UserParameterWeekOfYearPolicyArgs',
    'UserParameterWeekOfYearPolicyArgsDict',
    'UserParameterWeekStartArgs',
    'UserParameterWeekStartArgsDict',
    'UserShowOutputArgs',
    'UserShowOutputArgsDict',
    'ViewAggregationPolicyArgs',
    'ViewAggregationPolicyArgsDict',
    'ViewColumnArgs',
    'ViewColumnArgsDict',
    'ViewColumnMaskingPolicyArgs',
    'ViewColumnMaskingPolicyArgsDict',
    'ViewColumnProjectionPolicyArgs',
    'ViewColumnProjectionPolicyArgsDict',
    'ViewDataMetricFunctionArgs',
    'ViewDataMetricFunctionArgsDict',
    'ViewDataMetricScheduleArgs',
    'ViewDataMetricScheduleArgsDict',
    'ViewDescribeOutputArgs',
    'ViewDescribeOutputArgsDict',
    'ViewRowAccessPolicyArgs',
    'ViewRowAccessPolicyArgsDict',
    'ViewShowOutputArgs',
    'ViewShowOutputArgsDict',
    'WarehouseParameterArgs',
    'WarehouseParameterArgsDict',
    'WarehouseParameterMaxConcurrencyLevelArgs',
    'WarehouseParameterMaxConcurrencyLevelArgsDict',
    'WarehouseParameterStatementQueuedTimeoutInSecondArgs',
    'WarehouseParameterStatementQueuedTimeoutInSecondArgsDict',
    'WarehouseParameterStatementTimeoutInSecondArgs',
    'WarehouseParameterStatementTimeoutInSecondArgsDict',
    'WarehouseShowOutputArgs',
    'WarehouseShowOutputArgsDict',
    'GetCortexSearchServicesInArgs',
    'GetCortexSearchServicesInArgsDict',
    'GetCortexSearchServicesLimitArgs',
    'GetCortexSearchServicesLimitArgsDict',
    'GetDatabaseRolesLimitArgs',
    'GetDatabaseRolesLimitArgsDict',
    'GetDatabasesLimitArgs',
    'GetDatabasesLimitArgsDict',
    'GetDynamicTablesInArgs',
    'GetDynamicTablesInArgsDict',
    'GetDynamicTablesLikeArgs',
    'GetDynamicTablesLikeArgsDict',
    'GetDynamicTablesLimitArgs',
    'GetDynamicTablesLimitArgsDict',
    'GetGrantsFutureGrantsInArgs',
    'GetGrantsFutureGrantsInArgsDict',
    'GetGrantsFutureGrantsToArgs',
    'GetGrantsFutureGrantsToArgsDict',
    'GetGrantsGrantsOfArgs',
    'GetGrantsGrantsOfArgsDict',
    'GetGrantsGrantsOnArgs',
    'GetGrantsGrantsOnArgsDict',
    'GetGrantsGrantsToArgs',
    'GetGrantsGrantsToArgsDict',
    'GetGrantsGrantsToShareArgs',
    'GetGrantsGrantsToShareArgsDict',
    'GetMaskingPoliciesInArgs',
    'GetMaskingPoliciesInArgsDict',
    'GetMaskingPoliciesLimitArgs',
    'GetMaskingPoliciesLimitArgsDict',
    'GetRowAccessPoliciesInArgs',
    'GetRowAccessPoliciesInArgsDict',
    'GetRowAccessPoliciesLimitArgs',
    'GetRowAccessPoliciesLimitArgsDict',
    'GetSchemasInArgs',
    'GetSchemasInArgsDict',
    'GetSchemasLimitArgs',
    'GetSchemasLimitArgsDict',
    'GetSecretsInArgs',
    'GetSecretsInArgsDict',
    'GetStreamlitsInArgs',
    'GetStreamlitsInArgsDict',
    'GetStreamlitsLimitArgs',
    'GetStreamlitsLimitArgsDict',
    'GetStreamsInArgs',
    'GetStreamsInArgsDict',
    'GetStreamsLimitArgs',
    'GetStreamsLimitArgsDict',
    'GetTagsInArgs',
    'GetTagsInArgsDict',
    'GetTasksInArgs',
    'GetTasksInArgsDict',
    'GetTasksLimitArgs',
    'GetTasksLimitArgsDict',
    'GetUsersLimitArgs',
    'GetUsersLimitArgsDict',
    'GetViewsInArgs',
    'GetViewsInArgsDict',
    'GetViewsLimitArgs',
    'GetViewsLimitArgsDict',
]

MYPY = False

if not MYPY:
    class AccountRoleShowOutputArgsDict(TypedDict):
        assigned_to_users: NotRequired[pulumi.Input[int]]
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        granted_roles: NotRequired[pulumi.Input[int]]
        granted_to_roles: NotRequired[pulumi.Input[int]]
        is_current: NotRequired[pulumi.Input[bool]]
        is_default: NotRequired[pulumi.Input[bool]]
        is_inherited: NotRequired[pulumi.Input[bool]]
        name: NotRequired[pulumi.Input[str]]
        owner: NotRequired[pulumi.Input[str]]
elif False:
    AccountRoleShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccountRoleShowOutputArgs:
    def __init__(__self__, *,
                 assigned_to_users: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 granted_roles: Optional[pulumi.Input[int]] = None,
                 granted_to_roles: Optional[pulumi.Input[int]] = None,
                 is_current: Optional[pulumi.Input[bool]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 is_inherited: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None):
        if assigned_to_users is not None:
            pulumi.set(__self__, "assigned_to_users", assigned_to_users)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if granted_roles is not None:
            pulumi.set(__self__, "granted_roles", granted_roles)
        if granted_to_roles is not None:
            pulumi.set(__self__, "granted_to_roles", granted_to_roles)
        if is_current is not None:
            pulumi.set(__self__, "is_current", is_current)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if is_inherited is not None:
            pulumi.set(__self__, "is_inherited", is_inherited)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)

    @property
    @pulumi.getter(name="assignedToUsers")
    def assigned_to_users(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "assigned_to_users")

    @assigned_to_users.setter
    def assigned_to_users(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assigned_to_users", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="grantedRoles")
    def granted_roles(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "granted_roles")

    @granted_roles.setter
    def granted_roles(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "granted_roles", value)

    @property
    @pulumi.getter(name="grantedToRoles")
    def granted_to_roles(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "granted_to_roles")

    @granted_to_roles.setter
    def granted_to_roles(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "granted_to_roles", value)

    @property
    @pulumi.getter(name="isCurrent")
    def is_current(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_current")

    @is_current.setter
    def is_current(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_current", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter(name="isInherited")
    def is_inherited(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_inherited")

    @is_inherited.setter
    def is_inherited(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_inherited", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)


if not MYPY:
    class AlertAlertScheduleArgsDict(TypedDict):
        cron: NotRequired[pulumi.Input['AlertAlertScheduleCronArgsDict']]
        """
        Specifies the cron expression for the alert. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
        """
        interval: NotRequired[pulumi.Input[int]]
        """
        Specifies the interval in minutes for the alert schedule. The interval must be greater than 0 and less than 1440 (24 hours).
        """
elif False:
    AlertAlertScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlertAlertScheduleArgs:
    def __init__(__self__, *,
                 cron: Optional[pulumi.Input['AlertAlertScheduleCronArgs']] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['AlertAlertScheduleCronArgs'] cron: Specifies the cron expression for the alert. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
        :param pulumi.Input[int] interval: Specifies the interval in minutes for the alert schedule. The interval must be greater than 0 and less than 1440 (24 hours).
        """
        if cron is not None:
            pulumi.set(__self__, "cron", cron)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def cron(self) -> Optional[pulumi.Input['AlertAlertScheduleCronArgs']]:
        """
        Specifies the cron expression for the alert. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
        """
        return pulumi.get(self, "cron")

    @cron.setter
    def cron(self, value: Optional[pulumi.Input['AlertAlertScheduleCronArgs']]):
        pulumi.set(self, "cron", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the interval in minutes for the alert schedule. The interval must be greater than 0 and less than 1440 (24 hours).
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


if not MYPY:
    class AlertAlertScheduleCronArgsDict(TypedDict):
        expression: pulumi.Input[str]
        """
        Specifies the cron expression for the alert. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
        """
        time_zone: pulumi.Input[str]
        """
        Specifies the time zone for alert refresh.
        """
elif False:
    AlertAlertScheduleCronArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlertAlertScheduleCronArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 time_zone: pulumi.Input[str]):
        """
        :param pulumi.Input[str] expression: Specifies the cron expression for the alert. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
        :param pulumi.Input[str] time_zone: Specifies the time zone for alert refresh.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        Specifies the cron expression for the alert. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Input[str]:
        """
        Specifies the time zone for alert refresh.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_zone", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputArgsDict(TypedDict):
        auth_types: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthTypeArgsDict']]]]
        comments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputCommentArgsDict']]]]
        enableds: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabledArgsDict']]]]
        oauth_access_token_validities: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidityArgsDict']]]]
        oauth_allowed_scopes: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScopeArgsDict']]]]
        oauth_authorization_endpoints: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpointArgsDict']]]]
        oauth_client_auth_methods: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethodArgsDict']]]]
        oauth_client_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientIdArgsDict']]]]
        oauth_grants: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrantArgsDict']]]]
        oauth_refresh_token_validities: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidityArgsDict']]]]
        oauth_token_endpoints: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpointArgsDict']]]]
        parent_integrations: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegrationArgsDict']]]]
elif False:
    ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputArgs:
    def __init__(__self__, *,
                 auth_types: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthTypeArgs']]]] = None,
                 comments: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputCommentArgs']]]] = None,
                 enableds: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabledArgs']]]] = None,
                 oauth_access_token_validities: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidityArgs']]]] = None,
                 oauth_allowed_scopes: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScopeArgs']]]] = None,
                 oauth_authorization_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpointArgs']]]] = None,
                 oauth_client_auth_methods: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethodArgs']]]] = None,
                 oauth_client_ids: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientIdArgs']]]] = None,
                 oauth_grants: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrantArgs']]]] = None,
                 oauth_refresh_token_validities: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidityArgs']]]] = None,
                 oauth_token_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpointArgs']]]] = None,
                 parent_integrations: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegrationArgs']]]] = None):
        if auth_types is not None:
            pulumi.set(__self__, "auth_types", auth_types)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if enableds is not None:
            pulumi.set(__self__, "enableds", enableds)
        if oauth_access_token_validities is not None:
            pulumi.set(__self__, "oauth_access_token_validities", oauth_access_token_validities)
        if oauth_allowed_scopes is not None:
            pulumi.set(__self__, "oauth_allowed_scopes", oauth_allowed_scopes)
        if oauth_authorization_endpoints is not None:
            pulumi.set(__self__, "oauth_authorization_endpoints", oauth_authorization_endpoints)
        if oauth_client_auth_methods is not None:
            pulumi.set(__self__, "oauth_client_auth_methods", oauth_client_auth_methods)
        if oauth_client_ids is not None:
            pulumi.set(__self__, "oauth_client_ids", oauth_client_ids)
        if oauth_grants is not None:
            pulumi.set(__self__, "oauth_grants", oauth_grants)
        if oauth_refresh_token_validities is not None:
            pulumi.set(__self__, "oauth_refresh_token_validities", oauth_refresh_token_validities)
        if oauth_token_endpoints is not None:
            pulumi.set(__self__, "oauth_token_endpoints", oauth_token_endpoints)
        if parent_integrations is not None:
            pulumi.set(__self__, "parent_integrations", parent_integrations)

    @property
    @pulumi.getter(name="authTypes")
    def auth_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthTypeArgs']]]]:
        return pulumi.get(self, "auth_types")

    @auth_types.setter
    def auth_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthTypeArgs']]]]):
        pulumi.set(self, "auth_types", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputCommentArgs']]]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputCommentArgs']]]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def enableds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabledArgs']]]]:
        return pulumi.get(self, "enableds")

    @enableds.setter
    def enableds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabledArgs']]]]):
        pulumi.set(self, "enableds", value)

    @property
    @pulumi.getter(name="oauthAccessTokenValidities")
    def oauth_access_token_validities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidityArgs']]]]:
        return pulumi.get(self, "oauth_access_token_validities")

    @oauth_access_token_validities.setter
    def oauth_access_token_validities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidityArgs']]]]):
        pulumi.set(self, "oauth_access_token_validities", value)

    @property
    @pulumi.getter(name="oauthAllowedScopes")
    def oauth_allowed_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScopeArgs']]]]:
        return pulumi.get(self, "oauth_allowed_scopes")

    @oauth_allowed_scopes.setter
    def oauth_allowed_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScopeArgs']]]]):
        pulumi.set(self, "oauth_allowed_scopes", value)

    @property
    @pulumi.getter(name="oauthAuthorizationEndpoints")
    def oauth_authorization_endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpointArgs']]]]:
        return pulumi.get(self, "oauth_authorization_endpoints")

    @oauth_authorization_endpoints.setter
    def oauth_authorization_endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpointArgs']]]]):
        pulumi.set(self, "oauth_authorization_endpoints", value)

    @property
    @pulumi.getter(name="oauthClientAuthMethods")
    def oauth_client_auth_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethodArgs']]]]:
        return pulumi.get(self, "oauth_client_auth_methods")

    @oauth_client_auth_methods.setter
    def oauth_client_auth_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethodArgs']]]]):
        pulumi.set(self, "oauth_client_auth_methods", value)

    @property
    @pulumi.getter(name="oauthClientIds")
    def oauth_client_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientIdArgs']]]]:
        return pulumi.get(self, "oauth_client_ids")

    @oauth_client_ids.setter
    def oauth_client_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientIdArgs']]]]):
        pulumi.set(self, "oauth_client_ids", value)

    @property
    @pulumi.getter(name="oauthGrants")
    def oauth_grants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrantArgs']]]]:
        return pulumi.get(self, "oauth_grants")

    @oauth_grants.setter
    def oauth_grants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrantArgs']]]]):
        pulumi.set(self, "oauth_grants", value)

    @property
    @pulumi.getter(name="oauthRefreshTokenValidities")
    def oauth_refresh_token_validities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidityArgs']]]]:
        return pulumi.get(self, "oauth_refresh_token_validities")

    @oauth_refresh_token_validities.setter
    def oauth_refresh_token_validities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidityArgs']]]]):
        pulumi.set(self, "oauth_refresh_token_validities", value)

    @property
    @pulumi.getter(name="oauthTokenEndpoints")
    def oauth_token_endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpointArgs']]]]:
        return pulumi.get(self, "oauth_token_endpoints")

    @oauth_token_endpoints.setter
    def oauth_token_endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpointArgs']]]]):
        pulumi.set(self, "oauth_token_endpoints", value)

    @property
    @pulumi.getter(name="parentIntegrations")
    def parent_integrations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegrationArgs']]]]:
        return pulumi.get(self, "parent_integrations")

    @parent_integrations.setter
    def parent_integrations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegrationArgs']]]]):
        pulumi.set(self, "parent_integrations", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthTypeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthTypeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputCommentArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputCommentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputCommentArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabledArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabledArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabledArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidityArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidityArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScopeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScopeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScopeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpointArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpointArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethodArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethodArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethodArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientIdArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientIdArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrantArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrantArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrantArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidityArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidityArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpointArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpointArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegrationArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegrationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegrationArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutputArgsDict(TypedDict):
        category: NotRequired[pulumi.Input[str]]
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        enabled: NotRequired[pulumi.Input[bool]]
        integration_type: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutputArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 integration_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if integration_type is not None:
            pulumi.set(__self__, "integration_type", integration_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputArgsDict(TypedDict):
        auth_types: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthTypeArgsDict']]]]
        comments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputCommentArgsDict']]]]
        enableds: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabledArgsDict']]]]
        oauth_access_token_validities: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidityArgsDict']]]]
        oauth_allowed_scopes: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScopeArgsDict']]]]
        oauth_authorization_endpoints: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpointArgsDict']]]]
        oauth_client_auth_methods: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethodArgsDict']]]]
        oauth_client_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientIdArgsDict']]]]
        oauth_grants: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrantArgsDict']]]]
        oauth_refresh_token_validities: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidityArgsDict']]]]
        oauth_token_endpoints: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpointArgsDict']]]]
        parent_integrations: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegrationArgsDict']]]]
elif False:
    ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputArgs:
    def __init__(__self__, *,
                 auth_types: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthTypeArgs']]]] = None,
                 comments: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputCommentArgs']]]] = None,
                 enableds: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabledArgs']]]] = None,
                 oauth_access_token_validities: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidityArgs']]]] = None,
                 oauth_allowed_scopes: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScopeArgs']]]] = None,
                 oauth_authorization_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpointArgs']]]] = None,
                 oauth_client_auth_methods: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethodArgs']]]] = None,
                 oauth_client_ids: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientIdArgs']]]] = None,
                 oauth_grants: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrantArgs']]]] = None,
                 oauth_refresh_token_validities: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidityArgs']]]] = None,
                 oauth_token_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpointArgs']]]] = None,
                 parent_integrations: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegrationArgs']]]] = None):
        if auth_types is not None:
            pulumi.set(__self__, "auth_types", auth_types)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if enableds is not None:
            pulumi.set(__self__, "enableds", enableds)
        if oauth_access_token_validities is not None:
            pulumi.set(__self__, "oauth_access_token_validities", oauth_access_token_validities)
        if oauth_allowed_scopes is not None:
            pulumi.set(__self__, "oauth_allowed_scopes", oauth_allowed_scopes)
        if oauth_authorization_endpoints is not None:
            pulumi.set(__self__, "oauth_authorization_endpoints", oauth_authorization_endpoints)
        if oauth_client_auth_methods is not None:
            pulumi.set(__self__, "oauth_client_auth_methods", oauth_client_auth_methods)
        if oauth_client_ids is not None:
            pulumi.set(__self__, "oauth_client_ids", oauth_client_ids)
        if oauth_grants is not None:
            pulumi.set(__self__, "oauth_grants", oauth_grants)
        if oauth_refresh_token_validities is not None:
            pulumi.set(__self__, "oauth_refresh_token_validities", oauth_refresh_token_validities)
        if oauth_token_endpoints is not None:
            pulumi.set(__self__, "oauth_token_endpoints", oauth_token_endpoints)
        if parent_integrations is not None:
            pulumi.set(__self__, "parent_integrations", parent_integrations)

    @property
    @pulumi.getter(name="authTypes")
    def auth_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthTypeArgs']]]]:
        return pulumi.get(self, "auth_types")

    @auth_types.setter
    def auth_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthTypeArgs']]]]):
        pulumi.set(self, "auth_types", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputCommentArgs']]]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputCommentArgs']]]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def enableds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabledArgs']]]]:
        return pulumi.get(self, "enableds")

    @enableds.setter
    def enableds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabledArgs']]]]):
        pulumi.set(self, "enableds", value)

    @property
    @pulumi.getter(name="oauthAccessTokenValidities")
    def oauth_access_token_validities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidityArgs']]]]:
        return pulumi.get(self, "oauth_access_token_validities")

    @oauth_access_token_validities.setter
    def oauth_access_token_validities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidityArgs']]]]):
        pulumi.set(self, "oauth_access_token_validities", value)

    @property
    @pulumi.getter(name="oauthAllowedScopes")
    def oauth_allowed_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScopeArgs']]]]:
        return pulumi.get(self, "oauth_allowed_scopes")

    @oauth_allowed_scopes.setter
    def oauth_allowed_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScopeArgs']]]]):
        pulumi.set(self, "oauth_allowed_scopes", value)

    @property
    @pulumi.getter(name="oauthAuthorizationEndpoints")
    def oauth_authorization_endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpointArgs']]]]:
        return pulumi.get(self, "oauth_authorization_endpoints")

    @oauth_authorization_endpoints.setter
    def oauth_authorization_endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpointArgs']]]]):
        pulumi.set(self, "oauth_authorization_endpoints", value)

    @property
    @pulumi.getter(name="oauthClientAuthMethods")
    def oauth_client_auth_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethodArgs']]]]:
        return pulumi.get(self, "oauth_client_auth_methods")

    @oauth_client_auth_methods.setter
    def oauth_client_auth_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethodArgs']]]]):
        pulumi.set(self, "oauth_client_auth_methods", value)

    @property
    @pulumi.getter(name="oauthClientIds")
    def oauth_client_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientIdArgs']]]]:
        return pulumi.get(self, "oauth_client_ids")

    @oauth_client_ids.setter
    def oauth_client_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientIdArgs']]]]):
        pulumi.set(self, "oauth_client_ids", value)

    @property
    @pulumi.getter(name="oauthGrants")
    def oauth_grants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrantArgs']]]]:
        return pulumi.get(self, "oauth_grants")

    @oauth_grants.setter
    def oauth_grants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrantArgs']]]]):
        pulumi.set(self, "oauth_grants", value)

    @property
    @pulumi.getter(name="oauthRefreshTokenValidities")
    def oauth_refresh_token_validities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidityArgs']]]]:
        return pulumi.get(self, "oauth_refresh_token_validities")

    @oauth_refresh_token_validities.setter
    def oauth_refresh_token_validities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidityArgs']]]]):
        pulumi.set(self, "oauth_refresh_token_validities", value)

    @property
    @pulumi.getter(name="oauthTokenEndpoints")
    def oauth_token_endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpointArgs']]]]:
        return pulumi.get(self, "oauth_token_endpoints")

    @oauth_token_endpoints.setter
    def oauth_token_endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpointArgs']]]]):
        pulumi.set(self, "oauth_token_endpoints", value)

    @property
    @pulumi.getter(name="parentIntegrations")
    def parent_integrations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegrationArgs']]]]:
        return pulumi.get(self, "parent_integrations")

    @parent_integrations.setter
    def parent_integrations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegrationArgs']]]]):
        pulumi.set(self, "parent_integrations", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthTypeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthTypeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputCommentArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputCommentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputCommentArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabledArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabledArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabledArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidityArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidityArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScopeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScopeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScopeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpointArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpointArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethodArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethodArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethodArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientIdArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientIdArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrantArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrantArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrantArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidityArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidityArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpointArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpointArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegrationArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegrationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegrationArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithClientCredentialsShowOutputArgsDict(TypedDict):
        category: NotRequired[pulumi.Input[str]]
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        enabled: NotRequired[pulumi.Input[bool]]
        integration_type: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithClientCredentialsShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithClientCredentialsShowOutputArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 integration_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if integration_type is not None:
            pulumi.set(__self__, "integration_type", integration_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputArgsDict(TypedDict):
        auth_types: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthTypeArgsDict']]]]
        comments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputCommentArgsDict']]]]
        enableds: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabledArgsDict']]]]
        oauth_access_token_validities: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidityArgsDict']]]]
        oauth_allowed_scopes: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScopeArgsDict']]]]
        oauth_authorization_endpoints: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpointArgsDict']]]]
        oauth_client_auth_methods: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethodArgsDict']]]]
        oauth_client_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientIdArgsDict']]]]
        oauth_grants: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrantArgsDict']]]]
        oauth_refresh_token_validities: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidityArgsDict']]]]
        oauth_token_endpoints: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpointArgsDict']]]]
        parent_integrations: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegrationArgsDict']]]]
elif False:
    ApiAuthenticationIntegrationWithJwtBearerDescribeOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputArgs:
    def __init__(__self__, *,
                 auth_types: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthTypeArgs']]]] = None,
                 comments: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputCommentArgs']]]] = None,
                 enableds: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabledArgs']]]] = None,
                 oauth_access_token_validities: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidityArgs']]]] = None,
                 oauth_allowed_scopes: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScopeArgs']]]] = None,
                 oauth_authorization_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpointArgs']]]] = None,
                 oauth_client_auth_methods: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethodArgs']]]] = None,
                 oauth_client_ids: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientIdArgs']]]] = None,
                 oauth_grants: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrantArgs']]]] = None,
                 oauth_refresh_token_validities: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidityArgs']]]] = None,
                 oauth_token_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpointArgs']]]] = None,
                 parent_integrations: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegrationArgs']]]] = None):
        if auth_types is not None:
            pulumi.set(__self__, "auth_types", auth_types)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if enableds is not None:
            pulumi.set(__self__, "enableds", enableds)
        if oauth_access_token_validities is not None:
            pulumi.set(__self__, "oauth_access_token_validities", oauth_access_token_validities)
        if oauth_allowed_scopes is not None:
            pulumi.set(__self__, "oauth_allowed_scopes", oauth_allowed_scopes)
        if oauth_authorization_endpoints is not None:
            pulumi.set(__self__, "oauth_authorization_endpoints", oauth_authorization_endpoints)
        if oauth_client_auth_methods is not None:
            pulumi.set(__self__, "oauth_client_auth_methods", oauth_client_auth_methods)
        if oauth_client_ids is not None:
            pulumi.set(__self__, "oauth_client_ids", oauth_client_ids)
        if oauth_grants is not None:
            pulumi.set(__self__, "oauth_grants", oauth_grants)
        if oauth_refresh_token_validities is not None:
            pulumi.set(__self__, "oauth_refresh_token_validities", oauth_refresh_token_validities)
        if oauth_token_endpoints is not None:
            pulumi.set(__self__, "oauth_token_endpoints", oauth_token_endpoints)
        if parent_integrations is not None:
            pulumi.set(__self__, "parent_integrations", parent_integrations)

    @property
    @pulumi.getter(name="authTypes")
    def auth_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthTypeArgs']]]]:
        return pulumi.get(self, "auth_types")

    @auth_types.setter
    def auth_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthTypeArgs']]]]):
        pulumi.set(self, "auth_types", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputCommentArgs']]]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputCommentArgs']]]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def enableds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabledArgs']]]]:
        return pulumi.get(self, "enableds")

    @enableds.setter
    def enableds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabledArgs']]]]):
        pulumi.set(self, "enableds", value)

    @property
    @pulumi.getter(name="oauthAccessTokenValidities")
    def oauth_access_token_validities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidityArgs']]]]:
        return pulumi.get(self, "oauth_access_token_validities")

    @oauth_access_token_validities.setter
    def oauth_access_token_validities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidityArgs']]]]):
        pulumi.set(self, "oauth_access_token_validities", value)

    @property
    @pulumi.getter(name="oauthAllowedScopes")
    def oauth_allowed_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScopeArgs']]]]:
        return pulumi.get(self, "oauth_allowed_scopes")

    @oauth_allowed_scopes.setter
    def oauth_allowed_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScopeArgs']]]]):
        pulumi.set(self, "oauth_allowed_scopes", value)

    @property
    @pulumi.getter(name="oauthAuthorizationEndpoints")
    def oauth_authorization_endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpointArgs']]]]:
        return pulumi.get(self, "oauth_authorization_endpoints")

    @oauth_authorization_endpoints.setter
    def oauth_authorization_endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpointArgs']]]]):
        pulumi.set(self, "oauth_authorization_endpoints", value)

    @property
    @pulumi.getter(name="oauthClientAuthMethods")
    def oauth_client_auth_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethodArgs']]]]:
        return pulumi.get(self, "oauth_client_auth_methods")

    @oauth_client_auth_methods.setter
    def oauth_client_auth_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethodArgs']]]]):
        pulumi.set(self, "oauth_client_auth_methods", value)

    @property
    @pulumi.getter(name="oauthClientIds")
    def oauth_client_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientIdArgs']]]]:
        return pulumi.get(self, "oauth_client_ids")

    @oauth_client_ids.setter
    def oauth_client_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientIdArgs']]]]):
        pulumi.set(self, "oauth_client_ids", value)

    @property
    @pulumi.getter(name="oauthGrants")
    def oauth_grants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrantArgs']]]]:
        return pulumi.get(self, "oauth_grants")

    @oauth_grants.setter
    def oauth_grants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrantArgs']]]]):
        pulumi.set(self, "oauth_grants", value)

    @property
    @pulumi.getter(name="oauthRefreshTokenValidities")
    def oauth_refresh_token_validities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidityArgs']]]]:
        return pulumi.get(self, "oauth_refresh_token_validities")

    @oauth_refresh_token_validities.setter
    def oauth_refresh_token_validities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidityArgs']]]]):
        pulumi.set(self, "oauth_refresh_token_validities", value)

    @property
    @pulumi.getter(name="oauthTokenEndpoints")
    def oauth_token_endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpointArgs']]]]:
        return pulumi.get(self, "oauth_token_endpoints")

    @oauth_token_endpoints.setter
    def oauth_token_endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpointArgs']]]]):
        pulumi.set(self, "oauth_token_endpoints", value)

    @property
    @pulumi.getter(name="parentIntegrations")
    def parent_integrations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegrationArgs']]]]:
        return pulumi.get(self, "parent_integrations")

    @parent_integrations.setter
    def parent_integrations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegrationArgs']]]]):
        pulumi.set(self, "parent_integrations", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthTypeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthTypeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputCommentArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithJwtBearerDescribeOutputCommentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputCommentArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabledArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabledArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabledArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidityArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidityArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScopeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScopeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScopeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpointArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpointArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethodArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethodArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethodArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientIdArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientIdArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrantArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrantArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrantArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidityArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidityArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpointArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpointArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegrationArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegrationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegrationArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApiAuthenticationIntegrationWithJwtBearerShowOutputArgsDict(TypedDict):
        category: NotRequired[pulumi.Input[str]]
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        enabled: NotRequired[pulumi.Input[bool]]
        integration_type: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
elif False:
    ApiAuthenticationIntegrationWithJwtBearerShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiAuthenticationIntegrationWithJwtBearerShowOutputArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 integration_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if integration_type is not None:
            pulumi.set(__self__, "integration_type", integration_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class AuthenticationPolicyDescribeOutputArgsDict(TypedDict):
        authentication_methods: NotRequired[pulumi.Input[str]]
        client_types: NotRequired[pulumi.Input[str]]
        comment: NotRequired[pulumi.Input[str]]
        mfa_authentication_methods: NotRequired[pulumi.Input[str]]
        mfa_enrollment: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        owner: NotRequired[pulumi.Input[str]]
        security_integrations: NotRequired[pulumi.Input[str]]
elif False:
    AuthenticationPolicyDescribeOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthenticationPolicyDescribeOutputArgs:
    def __init__(__self__, *,
                 authentication_methods: Optional[pulumi.Input[str]] = None,
                 client_types: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 mfa_authentication_methods: Optional[pulumi.Input[str]] = None,
                 mfa_enrollment: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 security_integrations: Optional[pulumi.Input[str]] = None):
        if authentication_methods is not None:
            pulumi.set(__self__, "authentication_methods", authentication_methods)
        if client_types is not None:
            pulumi.set(__self__, "client_types", client_types)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if mfa_authentication_methods is not None:
            pulumi.set(__self__, "mfa_authentication_methods", mfa_authentication_methods)
        if mfa_enrollment is not None:
            pulumi.set(__self__, "mfa_enrollment", mfa_enrollment)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if security_integrations is not None:
            pulumi.set(__self__, "security_integrations", security_integrations)

    @property
    @pulumi.getter(name="authenticationMethods")
    def authentication_methods(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_methods")

    @authentication_methods.setter
    def authentication_methods(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_methods", value)

    @property
    @pulumi.getter(name="clientTypes")
    def client_types(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_types")

    @client_types.setter
    def client_types(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_types", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="mfaAuthenticationMethods")
    def mfa_authentication_methods(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mfa_authentication_methods")

    @mfa_authentication_methods.setter
    def mfa_authentication_methods(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mfa_authentication_methods", value)

    @property
    @pulumi.getter(name="mfaEnrollment")
    def mfa_enrollment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mfa_enrollment")

    @mfa_enrollment.setter
    def mfa_enrollment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mfa_enrollment", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="securityIntegrations")
    def security_integrations(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_integrations")

    @security_integrations.setter
    def security_integrations(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_integrations", value)


if not MYPY:
    class AuthenticationPolicyShowOutputArgsDict(TypedDict):
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        options: NotRequired[pulumi.Input[str]]
        owner: NotRequired[pulumi.Input[str]]
        owner_role_type: NotRequired[pulumi.Input[str]]
        schema_name: NotRequired[pulumi.Input[str]]
elif False:
    AuthenticationPolicyShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthenticationPolicyShowOutputArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 owner_role_type: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_role_type")

    @owner_role_type.setter
    def owner_role_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_role_type", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


if not MYPY:
    class DatabaseOldReplicationConfigurationArgsDict(TypedDict):
        accounts: pulumi.Input[Sequence[pulumi.Input[str]]]
        ignore_edition_check: NotRequired[pulumi.Input[bool]]
elif False:
    DatabaseOldReplicationConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseOldReplicationConfigurationArgs:
    def __init__(__self__, *,
                 accounts: pulumi.Input[Sequence[pulumi.Input[str]]],
                 ignore_edition_check: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "accounts", accounts)
        if ignore_edition_check is not None:
            pulumi.set(__self__, "ignore_edition_check", ignore_edition_check)

    @property
    @pulumi.getter
    def accounts(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "accounts")

    @accounts.setter
    def accounts(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "accounts", value)

    @property
    @pulumi.getter(name="ignoreEditionCheck")
    def ignore_edition_check(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_edition_check")

    @ignore_edition_check.setter
    def ignore_edition_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_edition_check", value)


if not MYPY:
    class DatabaseReplicationArgsDict(TypedDict):
        enable_to_accounts: pulumi.Input[Sequence[pulumi.Input['DatabaseReplicationEnableToAccountArgsDict']]]
        """
        Entry to enable replication and optionally failover for a given account identifier.
        """
        ignore_edition_check: NotRequired[pulumi.Input[bool]]
        """
        Allows replicating data to accounts on lower editions in either of the following scenarios: 1. The primary database is in a Business Critical (or higher) account but one or more of the accounts approved for replication are on lower editions. Business Critical Edition is intended for Snowflake accounts with extremely sensitive data. 2. The primary database is in a Business Critical (or higher) account and a signed business associate agreement is in place to store PHI data in the account per HIPAA and HITRUST regulations, but no such agreement is in place for one or more of the accounts approved for replication, regardless if they are Business Critical (or higher) accounts. Both scenarios are prohibited by default in an effort to help prevent account administrators for Business Critical (or higher) accounts from inadvertently replicating sensitive data to accounts on lower editions.
        """
elif False:
    DatabaseReplicationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseReplicationArgs:
    def __init__(__self__, *,
                 enable_to_accounts: pulumi.Input[Sequence[pulumi.Input['DatabaseReplicationEnableToAccountArgs']]],
                 ignore_edition_check: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DatabaseReplicationEnableToAccountArgs']]] enable_to_accounts: Entry to enable replication and optionally failover for a given account identifier.
        :param pulumi.Input[bool] ignore_edition_check: Allows replicating data to accounts on lower editions in either of the following scenarios: 1. The primary database is in a Business Critical (or higher) account but one or more of the accounts approved for replication are on lower editions. Business Critical Edition is intended for Snowflake accounts with extremely sensitive data. 2. The primary database is in a Business Critical (or higher) account and a signed business associate agreement is in place to store PHI data in the account per HIPAA and HITRUST regulations, but no such agreement is in place for one or more of the accounts approved for replication, regardless if they are Business Critical (or higher) accounts. Both scenarios are prohibited by default in an effort to help prevent account administrators for Business Critical (or higher) accounts from inadvertently replicating sensitive data to accounts on lower editions.
        """
        pulumi.set(__self__, "enable_to_accounts", enable_to_accounts)
        if ignore_edition_check is not None:
            pulumi.set(__self__, "ignore_edition_check", ignore_edition_check)

    @property
    @pulumi.getter(name="enableToAccounts")
    def enable_to_accounts(self) -> pulumi.Input[Sequence[pulumi.Input['DatabaseReplicationEnableToAccountArgs']]]:
        """
        Entry to enable replication and optionally failover for a given account identifier.
        """
        return pulumi.get(self, "enable_to_accounts")

    @enable_to_accounts.setter
    def enable_to_accounts(self, value: pulumi.Input[Sequence[pulumi.Input['DatabaseReplicationEnableToAccountArgs']]]):
        pulumi.set(self, "enable_to_accounts", value)

    @property
    @pulumi.getter(name="ignoreEditionCheck")
    def ignore_edition_check(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows replicating data to accounts on lower editions in either of the following scenarios: 1. The primary database is in a Business Critical (or higher) account but one or more of the accounts approved for replication are on lower editions. Business Critical Edition is intended for Snowflake accounts with extremely sensitive data. 2. The primary database is in a Business Critical (or higher) account and a signed business associate agreement is in place to store PHI data in the account per HIPAA and HITRUST regulations, but no such agreement is in place for one or more of the accounts approved for replication, regardless if they are Business Critical (or higher) accounts. Both scenarios are prohibited by default in an effort to help prevent account administrators for Business Critical (or higher) accounts from inadvertently replicating sensitive data to accounts on lower editions.
        """
        return pulumi.get(self, "ignore_edition_check")

    @ignore_edition_check.setter
    def ignore_edition_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_edition_check", value)


if not MYPY:
    class DatabaseReplicationEnableToAccountArgsDict(TypedDict):
        account_identifier: pulumi.Input[str]
        """
        Specifies account identifier for which replication should be enabled. The account identifiers should be in the form of `"<organization_name>"."<account_name>"`.
        """
        with_failover: NotRequired[pulumi.Input[bool]]
        """
        Specifies if failover should be enabled for the specified account identifier
        """
elif False:
    DatabaseReplicationEnableToAccountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseReplicationEnableToAccountArgs:
    def __init__(__self__, *,
                 account_identifier: pulumi.Input[str],
                 with_failover: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] account_identifier: Specifies account identifier for which replication should be enabled. The account identifiers should be in the form of `"<organization_name>"."<account_name>"`.
        :param pulumi.Input[bool] with_failover: Specifies if failover should be enabled for the specified account identifier
        """
        pulumi.set(__self__, "account_identifier", account_identifier)
        if with_failover is not None:
            pulumi.set(__self__, "with_failover", with_failover)

    @property
    @pulumi.getter(name="accountIdentifier")
    def account_identifier(self) -> pulumi.Input[str]:
        """
        Specifies account identifier for which replication should be enabled. The account identifiers should be in the form of `"<organization_name>"."<account_name>"`.
        """
        return pulumi.get(self, "account_identifier")

    @account_identifier.setter
    def account_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_identifier", value)

    @property
    @pulumi.getter(name="withFailover")
    def with_failover(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies if failover should be enabled for the specified account identifier
        """
        return pulumi.get(self, "with_failover")

    @with_failover.setter
    def with_failover(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "with_failover", value)


if not MYPY:
    class DatabaseRoleShowOutputArgsDict(TypedDict):
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        granted_database_roles: NotRequired[pulumi.Input[int]]
        granted_to_database_roles: NotRequired[pulumi.Input[int]]
        granted_to_roles: NotRequired[pulumi.Input[int]]
        is_current: NotRequired[pulumi.Input[bool]]
        is_default: NotRequired[pulumi.Input[bool]]
        is_inherited: NotRequired[pulumi.Input[bool]]
        name: NotRequired[pulumi.Input[str]]
        owner: NotRequired[pulumi.Input[str]]
        owner_role_type: NotRequired[pulumi.Input[str]]
elif False:
    DatabaseRoleShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseRoleShowOutputArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 granted_database_roles: Optional[pulumi.Input[int]] = None,
                 granted_to_database_roles: Optional[pulumi.Input[int]] = None,
                 granted_to_roles: Optional[pulumi.Input[int]] = None,
                 is_current: Optional[pulumi.Input[bool]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 is_inherited: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 owner_role_type: Optional[pulumi.Input[str]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if granted_database_roles is not None:
            pulumi.set(__self__, "granted_database_roles", granted_database_roles)
        if granted_to_database_roles is not None:
            pulumi.set(__self__, "granted_to_database_roles", granted_to_database_roles)
        if granted_to_roles is not None:
            pulumi.set(__self__, "granted_to_roles", granted_to_roles)
        if is_current is not None:
            pulumi.set(__self__, "is_current", is_current)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if is_inherited is not None:
            pulumi.set(__self__, "is_inherited", is_inherited)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="grantedDatabaseRoles")
    def granted_database_roles(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "granted_database_roles")

    @granted_database_roles.setter
    def granted_database_roles(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "granted_database_roles", value)

    @property
    @pulumi.getter(name="grantedToDatabaseRoles")
    def granted_to_database_roles(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "granted_to_database_roles")

    @granted_to_database_roles.setter
    def granted_to_database_roles(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "granted_to_database_roles", value)

    @property
    @pulumi.getter(name="grantedToRoles")
    def granted_to_roles(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "granted_to_roles")

    @granted_to_roles.setter
    def granted_to_roles(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "granted_to_roles", value)

    @property
    @pulumi.getter(name="isCurrent")
    def is_current(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_current")

    @is_current.setter
    def is_current(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_current", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter(name="isInherited")
    def is_inherited(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_inherited")

    @is_inherited.setter
    def is_inherited(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_inherited", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_role_type")

    @owner_role_type.setter
    def owner_role_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_role_type", value)


if not MYPY:
    class DynamicTableTargetLagArgsDict(TypedDict):
        downstream: NotRequired[pulumi.Input[bool]]
        """
        Specifies whether the target lag time is downstream.
        """
        maximum_duration: NotRequired[pulumi.Input[str]]
        """
        Specifies the maximum target lag time for the dynamic table.
        """
elif False:
    DynamicTableTargetLagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DynamicTableTargetLagArgs:
    def __init__(__self__, *,
                 downstream: Optional[pulumi.Input[bool]] = None,
                 maximum_duration: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] downstream: Specifies whether the target lag time is downstream.
        :param pulumi.Input[str] maximum_duration: Specifies the maximum target lag time for the dynamic table.
        """
        if downstream is not None:
            pulumi.set(__self__, "downstream", downstream)
        if maximum_duration is not None:
            pulumi.set(__self__, "maximum_duration", maximum_duration)

    @property
    @pulumi.getter
    def downstream(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the target lag time is downstream.
        """
        return pulumi.get(self, "downstream")

    @downstream.setter
    def downstream(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "downstream", value)

    @property
    @pulumi.getter(name="maximumDuration")
    def maximum_duration(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the maximum target lag time for the dynamic table.
        """
        return pulumi.get(self, "maximum_duration")

    @maximum_duration.setter
    def maximum_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_duration", value)


if not MYPY:
    class ExternalFunctionArgArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Argument name
        """
        type: pulumi.Input[str]
        """
        Argument type, e.g. VARCHAR
        """
elif False:
    ExternalFunctionArgArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalFunctionArgArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Argument name
        :param pulumi.Input[str] type: Argument type, e.g. VARCHAR
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Argument name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Argument type, e.g. VARCHAR
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ExternalFunctionHeaderArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Header name
        """
        value: pulumi.Input[str]
        """
        Header value
        """
elif False:
    ExternalFunctionHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalFunctionHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Header name
        :param pulumi.Input[str] value: Header value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Header name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Header value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ExternalOauthIntegrationDescribeOutputArgsDict(TypedDict):
        comments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputCommentArgsDict']]]]
        enableds: NotRequired[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputEnabledArgsDict']]]]
        external_oauth_allowed_roles_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesListArgsDict']]]]
        external_oauth_any_role_modes: NotRequired[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleModeArgsDict']]]]
        external_oauth_audience_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthAudienceListArgsDict']]]]
        external_oauth_blocked_roles_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesListArgsDict']]]]
        external_oauth_issuers: NotRequired[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthIssuerArgsDict']]]]
        external_oauth_jws_keys_urls: NotRequired[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrlArgsDict']]]]
        external_oauth_rsa_public_key2s: NotRequired[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2ArgsDict']]]]
        external_oauth_rsa_public_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKeyArgsDict']]]]
        external_oauth_scope_delimiters: NotRequired[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiterArgsDict']]]]
        external_oauth_snowflake_user_mapping_attributes: NotRequired[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttributeArgsDict']]]]
        external_oauth_token_user_mapping_claims: NotRequired[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaimArgsDict']]]]
elif False:
    ExternalOauthIntegrationDescribeOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalOauthIntegrationDescribeOutputArgs:
    def __init__(__self__, *,
                 comments: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputCommentArgs']]]] = None,
                 enableds: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputEnabledArgs']]]] = None,
                 external_oauth_allowed_roles_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesListArgs']]]] = None,
                 external_oauth_any_role_modes: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleModeArgs']]]] = None,
                 external_oauth_audience_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthAudienceListArgs']]]] = None,
                 external_oauth_blocked_roles_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesListArgs']]]] = None,
                 external_oauth_issuers: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthIssuerArgs']]]] = None,
                 external_oauth_jws_keys_urls: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrlArgs']]]] = None,
                 external_oauth_rsa_public_key2s: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2Args']]]] = None,
                 external_oauth_rsa_public_keys: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKeyArgs']]]] = None,
                 external_oauth_scope_delimiters: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiterArgs']]]] = None,
                 external_oauth_snowflake_user_mapping_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttributeArgs']]]] = None,
                 external_oauth_token_user_mapping_claims: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaimArgs']]]] = None):
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if enableds is not None:
            pulumi.set(__self__, "enableds", enableds)
        if external_oauth_allowed_roles_lists is not None:
            pulumi.set(__self__, "external_oauth_allowed_roles_lists", external_oauth_allowed_roles_lists)
        if external_oauth_any_role_modes is not None:
            pulumi.set(__self__, "external_oauth_any_role_modes", external_oauth_any_role_modes)
        if external_oauth_audience_lists is not None:
            pulumi.set(__self__, "external_oauth_audience_lists", external_oauth_audience_lists)
        if external_oauth_blocked_roles_lists is not None:
            pulumi.set(__self__, "external_oauth_blocked_roles_lists", external_oauth_blocked_roles_lists)
        if external_oauth_issuers is not None:
            pulumi.set(__self__, "external_oauth_issuers", external_oauth_issuers)
        if external_oauth_jws_keys_urls is not None:
            pulumi.set(__self__, "external_oauth_jws_keys_urls", external_oauth_jws_keys_urls)
        if external_oauth_rsa_public_key2s is not None:
            pulumi.set(__self__, "external_oauth_rsa_public_key2s", external_oauth_rsa_public_key2s)
        if external_oauth_rsa_public_keys is not None:
            pulumi.set(__self__, "external_oauth_rsa_public_keys", external_oauth_rsa_public_keys)
        if external_oauth_scope_delimiters is not None:
            pulumi.set(__self__, "external_oauth_scope_delimiters", external_oauth_scope_delimiters)
        if external_oauth_snowflake_user_mapping_attributes is not None:
            pulumi.set(__self__, "external_oauth_snowflake_user_mapping_attributes", external_oauth_snowflake_user_mapping_attributes)
        if external_oauth_token_user_mapping_claims is not None:
            pulumi.set(__self__, "external_oauth_token_user_mapping_claims", external_oauth_token_user_mapping_claims)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputCommentArgs']]]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputCommentArgs']]]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def enableds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputEnabledArgs']]]]:
        return pulumi.get(self, "enableds")

    @enableds.setter
    def enableds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputEnabledArgs']]]]):
        pulumi.set(self, "enableds", value)

    @property
    @pulumi.getter(name="externalOauthAllowedRolesLists")
    def external_oauth_allowed_roles_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesListArgs']]]]:
        return pulumi.get(self, "external_oauth_allowed_roles_lists")

    @external_oauth_allowed_roles_lists.setter
    def external_oauth_allowed_roles_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesListArgs']]]]):
        pulumi.set(self, "external_oauth_allowed_roles_lists", value)

    @property
    @pulumi.getter(name="externalOauthAnyRoleModes")
    def external_oauth_any_role_modes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleModeArgs']]]]:
        return pulumi.get(self, "external_oauth_any_role_modes")

    @external_oauth_any_role_modes.setter
    def external_oauth_any_role_modes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleModeArgs']]]]):
        pulumi.set(self, "external_oauth_any_role_modes", value)

    @property
    @pulumi.getter(name="externalOauthAudienceLists")
    def external_oauth_audience_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthAudienceListArgs']]]]:
        return pulumi.get(self, "external_oauth_audience_lists")

    @external_oauth_audience_lists.setter
    def external_oauth_audience_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthAudienceListArgs']]]]):
        pulumi.set(self, "external_oauth_audience_lists", value)

    @property
    @pulumi.getter(name="externalOauthBlockedRolesLists")
    def external_oauth_blocked_roles_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesListArgs']]]]:
        return pulumi.get(self, "external_oauth_blocked_roles_lists")

    @external_oauth_blocked_roles_lists.setter
    def external_oauth_blocked_roles_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesListArgs']]]]):
        pulumi.set(self, "external_oauth_blocked_roles_lists", value)

    @property
    @pulumi.getter(name="externalOauthIssuers")
    def external_oauth_issuers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthIssuerArgs']]]]:
        return pulumi.get(self, "external_oauth_issuers")

    @external_oauth_issuers.setter
    def external_oauth_issuers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthIssuerArgs']]]]):
        pulumi.set(self, "external_oauth_issuers", value)

    @property
    @pulumi.getter(name="externalOauthJwsKeysUrls")
    def external_oauth_jws_keys_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrlArgs']]]]:
        return pulumi.get(self, "external_oauth_jws_keys_urls")

    @external_oauth_jws_keys_urls.setter
    def external_oauth_jws_keys_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrlArgs']]]]):
        pulumi.set(self, "external_oauth_jws_keys_urls", value)

    @property
    @pulumi.getter(name="externalOauthRsaPublicKey2s")
    def external_oauth_rsa_public_key2s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2Args']]]]:
        return pulumi.get(self, "external_oauth_rsa_public_key2s")

    @external_oauth_rsa_public_key2s.setter
    def external_oauth_rsa_public_key2s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2Args']]]]):
        pulumi.set(self, "external_oauth_rsa_public_key2s", value)

    @property
    @pulumi.getter(name="externalOauthRsaPublicKeys")
    def external_oauth_rsa_public_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKeyArgs']]]]:
        return pulumi.get(self, "external_oauth_rsa_public_keys")

    @external_oauth_rsa_public_keys.setter
    def external_oauth_rsa_public_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKeyArgs']]]]):
        pulumi.set(self, "external_oauth_rsa_public_keys", value)

    @property
    @pulumi.getter(name="externalOauthScopeDelimiters")
    def external_oauth_scope_delimiters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiterArgs']]]]:
        return pulumi.get(self, "external_oauth_scope_delimiters")

    @external_oauth_scope_delimiters.setter
    def external_oauth_scope_delimiters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiterArgs']]]]):
        pulumi.set(self, "external_oauth_scope_delimiters", value)

    @property
    @pulumi.getter(name="externalOauthSnowflakeUserMappingAttributes")
    def external_oauth_snowflake_user_mapping_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttributeArgs']]]]:
        return pulumi.get(self, "external_oauth_snowflake_user_mapping_attributes")

    @external_oauth_snowflake_user_mapping_attributes.setter
    def external_oauth_snowflake_user_mapping_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttributeArgs']]]]):
        pulumi.set(self, "external_oauth_snowflake_user_mapping_attributes", value)

    @property
    @pulumi.getter(name="externalOauthTokenUserMappingClaims")
    def external_oauth_token_user_mapping_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaimArgs']]]]:
        return pulumi.get(self, "external_oauth_token_user_mapping_claims")

    @external_oauth_token_user_mapping_claims.setter
    def external_oauth_token_user_mapping_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaimArgs']]]]):
        pulumi.set(self, "external_oauth_token_user_mapping_claims", value)


if not MYPY:
    class ExternalOauthIntegrationDescribeOutputCommentArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ExternalOauthIntegrationDescribeOutputCommentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalOauthIntegrationDescribeOutputCommentArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ExternalOauthIntegrationDescribeOutputEnabledArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ExternalOauthIntegrationDescribeOutputEnabledArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalOauthIntegrationDescribeOutputEnabledArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesListArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesListArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleModeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleModeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleModeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ExternalOauthIntegrationDescribeOutputExternalOauthAudienceListArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ExternalOauthIntegrationDescribeOutputExternalOauthAudienceListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalOauthIntegrationDescribeOutputExternalOauthAudienceListArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesListArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesListArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ExternalOauthIntegrationDescribeOutputExternalOauthIssuerArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ExternalOauthIntegrationDescribeOutputExternalOauthIssuerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalOauthIntegrationDescribeOutputExternalOauthIssuerArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrlArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrlArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2ArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2Args:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKeyArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKeyArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiterArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiterArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttributeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttributeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaimArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaimArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaimArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ExternalOauthIntegrationRelatedParameterArgsDict(TypedDict):
        external_oauth_add_privileged_roles_to_blocked_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedListArgsDict']]]]
elif False:
    ExternalOauthIntegrationRelatedParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalOauthIntegrationRelatedParameterArgs:
    def __init__(__self__, *,
                 external_oauth_add_privileged_roles_to_blocked_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedListArgs']]]] = None):
        if external_oauth_add_privileged_roles_to_blocked_lists is not None:
            pulumi.set(__self__, "external_oauth_add_privileged_roles_to_blocked_lists", external_oauth_add_privileged_roles_to_blocked_lists)

    @property
    @pulumi.getter(name="externalOauthAddPrivilegedRolesToBlockedLists")
    def external_oauth_add_privileged_roles_to_blocked_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedListArgs']]]]:
        return pulumi.get(self, "external_oauth_add_privileged_roles_to_blocked_lists")

    @external_oauth_add_privileged_roles_to_blocked_lists.setter
    def external_oauth_add_privileged_roles_to_blocked_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedListArgs']]]]):
        pulumi.set(self, "external_oauth_add_privileged_roles_to_blocked_lists", value)


if not MYPY:
    class ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedListArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedListArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ExternalOauthIntegrationShowOutputArgsDict(TypedDict):
        category: NotRequired[pulumi.Input[str]]
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        enabled: NotRequired[pulumi.Input[bool]]
        integration_type: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
elif False:
    ExternalOauthIntegrationShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalOauthIntegrationShowOutputArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 integration_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if integration_type is not None:
            pulumi.set(__self__, "integration_type", integration_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ExternalTableColumnArgsDict(TypedDict):
        as_: pulumi.Input[str]
        """
        String that specifies the expression for the column. When queried, the column returns results derived from this expression.
        """
        name: pulumi.Input[str]
        """
        Column name
        """
        type: pulumi.Input[str]
        """
        Column type, e.g. VARIANT
        """
elif False:
    ExternalTableColumnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalTableColumnArgs:
    def __init__(__self__, *,
                 as_: pulumi.Input[str],
                 name: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] as_: String that specifies the expression for the column. When queried, the column returns results derived from this expression.
        :param pulumi.Input[str] name: Column name
        :param pulumi.Input[str] type: Column type, e.g. VARIANT
        """
        pulumi.set(__self__, "as_", as_)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="as")
    def as_(self) -> pulumi.Input[str]:
        """
        String that specifies the expression for the column. When queried, the column returns results derived from this expression.
        """
        return pulumi.get(self, "as_")

    @as_.setter
    def as_(self, value: pulumi.Input[str]):
        pulumi.set(self, "as_", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Column name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Column type, e.g. VARIANT
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ExternalTableTagArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Tag name, e.g. department.
        """
        value: pulumi.Input[str]
        """
        Tag value, e.g. marketing_info.
        """
        database: NotRequired[pulumi.Input[str]]
        """
        Name of the database that the tag was created in.
        """
        schema: NotRequired[pulumi.Input[str]]
        """
        Name of the schema that the tag was created in.
        """
elif False:
    ExternalTableTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalTableTagArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 database: Optional[pulumi.Input[str]] = None,
                 schema: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name, e.g. department.
        :param pulumi.Input[str] value: Tag value, e.g. marketing_info.
        :param pulumi.Input[str] database: Name of the database that the tag was created in.
        :param pulumi.Input[str] schema: Name of the schema that the tag was created in.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Tag name, e.g. department.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Tag value, e.g. marketing_info.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the database that the tag was created in.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the schema that the tag was created in.
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema", value)


if not MYPY:
    class ExternalVolumeDescribeOutputArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        parent: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ExternalVolumeDescribeOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalVolumeDescribeOutputArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ExternalVolumeShowOutputArgsDict(TypedDict):
        allow_writes: NotRequired[pulumi.Input[bool]]
        comment: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
elif False:
    ExternalVolumeShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalVolumeShowOutputArgs:
    def __init__(__self__, *,
                 allow_writes: Optional[pulumi.Input[bool]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if allow_writes is not None:
            pulumi.set(__self__, "allow_writes", allow_writes)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="allowWrites")
    def allow_writes(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_writes")

    @allow_writes.setter
    def allow_writes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_writes", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ExternalVolumeStorageLocationArgsDict(TypedDict):
        storage_base_url: pulumi.Input[str]
        """
        Specifies the base URL for your cloud storage location.
        """
        storage_location_name: pulumi.Input[str]
        storage_provider: pulumi.Input[str]
        """
        Specifies the cloud storage provider that stores your data files. Valid values are (case-insensitive): `GCS` | `AZURE` | `S3` | `S3GOV`.
        """
        azure_tenant_id: NotRequired[pulumi.Input[str]]
        """
        Specifies the ID for your Office 365 tenant that the allowed and blocked storage accounts belong to.
        """
        encryption_kms_key_id: NotRequired[pulumi.Input[str]]
        """
        Specifies the ID for the KMS-managed key used to encrypt files.
        """
        encryption_type: NotRequired[pulumi.Input[str]]
        """
        Specifies the encryption type used.
        """
        storage_aws_external_id: NotRequired[pulumi.Input[str]]
        """
        External ID that Snowflake uses to establish a trust relationship with AWS.
        """
        storage_aws_role_arn: NotRequired[pulumi.Input[str]]
        """
        Specifies the case-sensitive Amazon Resource Name (ARN) of the AWS identity and access management (IAM) role that grants privileges on the S3 bucket containing your data files.
        """
elif False:
    ExternalVolumeStorageLocationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalVolumeStorageLocationArgs:
    def __init__(__self__, *,
                 storage_base_url: pulumi.Input[str],
                 storage_location_name: pulumi.Input[str],
                 storage_provider: pulumi.Input[str],
                 azure_tenant_id: Optional[pulumi.Input[str]] = None,
                 encryption_kms_key_id: Optional[pulumi.Input[str]] = None,
                 encryption_type: Optional[pulumi.Input[str]] = None,
                 storage_aws_external_id: Optional[pulumi.Input[str]] = None,
                 storage_aws_role_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] storage_base_url: Specifies the base URL for your cloud storage location.
        :param pulumi.Input[str] storage_provider: Specifies the cloud storage provider that stores your data files. Valid values are (case-insensitive): `GCS` | `AZURE` | `S3` | `S3GOV`.
        :param pulumi.Input[str] azure_tenant_id: Specifies the ID for your Office 365 tenant that the allowed and blocked storage accounts belong to.
        :param pulumi.Input[str] encryption_kms_key_id: Specifies the ID for the KMS-managed key used to encrypt files.
        :param pulumi.Input[str] encryption_type: Specifies the encryption type used.
        :param pulumi.Input[str] storage_aws_external_id: External ID that Snowflake uses to establish a trust relationship with AWS.
        :param pulumi.Input[str] storage_aws_role_arn: Specifies the case-sensitive Amazon Resource Name (ARN) of the AWS identity and access management (IAM) role that grants privileges on the S3 bucket containing your data files.
        """
        pulumi.set(__self__, "storage_base_url", storage_base_url)
        pulumi.set(__self__, "storage_location_name", storage_location_name)
        pulumi.set(__self__, "storage_provider", storage_provider)
        if azure_tenant_id is not None:
            pulumi.set(__self__, "azure_tenant_id", azure_tenant_id)
        if encryption_kms_key_id is not None:
            pulumi.set(__self__, "encryption_kms_key_id", encryption_kms_key_id)
        if encryption_type is not None:
            pulumi.set(__self__, "encryption_type", encryption_type)
        if storage_aws_external_id is not None:
            pulumi.set(__self__, "storage_aws_external_id", storage_aws_external_id)
        if storage_aws_role_arn is not None:
            pulumi.set(__self__, "storage_aws_role_arn", storage_aws_role_arn)

    @property
    @pulumi.getter(name="storageBaseUrl")
    def storage_base_url(self) -> pulumi.Input[str]:
        """
        Specifies the base URL for your cloud storage location.
        """
        return pulumi.get(self, "storage_base_url")

    @storage_base_url.setter
    def storage_base_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_base_url", value)

    @property
    @pulumi.getter(name="storageLocationName")
    def storage_location_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage_location_name")

    @storage_location_name.setter
    def storage_location_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_location_name", value)

    @property
    @pulumi.getter(name="storageProvider")
    def storage_provider(self) -> pulumi.Input[str]:
        """
        Specifies the cloud storage provider that stores your data files. Valid values are (case-insensitive): `GCS` | `AZURE` | `S3` | `S3GOV`.
        """
        return pulumi.get(self, "storage_provider")

    @storage_provider.setter
    def storage_provider(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_provider", value)

    @property
    @pulumi.getter(name="azureTenantId")
    def azure_tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID for your Office 365 tenant that the allowed and blocked storage accounts belong to.
        """
        return pulumi.get(self, "azure_tenant_id")

    @azure_tenant_id.setter
    def azure_tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_tenant_id", value)

    @property
    @pulumi.getter(name="encryptionKmsKeyId")
    def encryption_kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID for the KMS-managed key used to encrypt files.
        """
        return pulumi.get(self, "encryption_kms_key_id")

    @encryption_kms_key_id.setter
    def encryption_kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_kms_key_id", value)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the encryption type used.
        """
        return pulumi.get(self, "encryption_type")

    @encryption_type.setter
    def encryption_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_type", value)

    @property
    @pulumi.getter(name="storageAwsExternalId")
    def storage_aws_external_id(self) -> Optional[pulumi.Input[str]]:
        """
        External ID that Snowflake uses to establish a trust relationship with AWS.
        """
        return pulumi.get(self, "storage_aws_external_id")

    @storage_aws_external_id.setter
    def storage_aws_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_aws_external_id", value)

    @property
    @pulumi.getter(name="storageAwsRoleArn")
    def storage_aws_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the case-sensitive Amazon Resource Name (ARN) of the AWS identity and access management (IAM) role that grants privileges on the S3 bucket containing your data files.
        """
        return pulumi.get(self, "storage_aws_role_arn")

    @storage_aws_role_arn.setter
    def storage_aws_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_aws_role_arn", value)


if not MYPY:
    class FailoverGroupFromReplicaArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Identifier for the primary failover group in the source account.
        """
        organization_name: pulumi.Input[str]
        """
        Name of your Snowflake organization.
        """
        source_account_name: pulumi.Input[str]
        """
        Source account from which you are enabling replication and failover of the specified objects.
        """
elif False:
    FailoverGroupFromReplicaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FailoverGroupFromReplicaArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 organization_name: pulumi.Input[str],
                 source_account_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Identifier for the primary failover group in the source account.
        :param pulumi.Input[str] organization_name: Name of your Snowflake organization.
        :param pulumi.Input[str] source_account_name: Source account from which you are enabling replication and failover of the specified objects.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "source_account_name", source_account_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Identifier for the primary failover group in the source account.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> pulumi.Input[str]:
        """
        Name of your Snowflake organization.
        """
        return pulumi.get(self, "organization_name")

    @organization_name.setter
    def organization_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization_name", value)

    @property
    @pulumi.getter(name="sourceAccountName")
    def source_account_name(self) -> pulumi.Input[str]:
        """
        Source account from which you are enabling replication and failover of the specified objects.
        """
        return pulumi.get(self, "source_account_name")

    @source_account_name.setter
    def source_account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_account_name", value)


if not MYPY:
    class FailoverGroupReplicationScheduleArgsDict(TypedDict):
        cron: NotRequired[pulumi.Input['FailoverGroupReplicationScheduleCronArgsDict']]
        """
        Specifies the cron expression for the replication schedule. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
        """
        interval: NotRequired[pulumi.Input[int]]
        """
        Specifies the interval in minutes for the replication schedule. The interval must be greater than 0 and less than 1440 (24 hours).
        """
elif False:
    FailoverGroupReplicationScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FailoverGroupReplicationScheduleArgs:
    def __init__(__self__, *,
                 cron: Optional[pulumi.Input['FailoverGroupReplicationScheduleCronArgs']] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['FailoverGroupReplicationScheduleCronArgs'] cron: Specifies the cron expression for the replication schedule. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
        :param pulumi.Input[int] interval: Specifies the interval in minutes for the replication schedule. The interval must be greater than 0 and less than 1440 (24 hours).
        """
        if cron is not None:
            pulumi.set(__self__, "cron", cron)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def cron(self) -> Optional[pulumi.Input['FailoverGroupReplicationScheduleCronArgs']]:
        """
        Specifies the cron expression for the replication schedule. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
        """
        return pulumi.get(self, "cron")

    @cron.setter
    def cron(self, value: Optional[pulumi.Input['FailoverGroupReplicationScheduleCronArgs']]):
        pulumi.set(self, "cron", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the interval in minutes for the replication schedule. The interval must be greater than 0 and less than 1440 (24 hours).
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


if not MYPY:
    class FailoverGroupReplicationScheduleCronArgsDict(TypedDict):
        expression: pulumi.Input[str]
        """
        Specifies the cron expression for the replication schedule. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
        """
        time_zone: pulumi.Input[str]
        """
        Specifies the time zone for secondary group refresh.
        """
elif False:
    FailoverGroupReplicationScheduleCronArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FailoverGroupReplicationScheduleCronArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 time_zone: pulumi.Input[str]):
        """
        :param pulumi.Input[str] expression: Specifies the cron expression for the replication schedule. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
        :param pulumi.Input[str] time_zone: Specifies the time zone for secondary group refresh.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        Specifies the cron expression for the replication schedule. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Input[str]:
        """
        Specifies the time zone for secondary group refresh.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_zone", value)


if not MYPY:
    class FunctionArgumentArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The argument name
        """
        type: pulumi.Input[str]
        """
        The argument type
        """
elif False:
    FunctionArgumentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FunctionArgumentArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The argument name
        :param pulumi.Input[str] type: The argument type
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The argument name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The argument type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class GrantOwnershipOnArgsDict(TypedDict):
        all: NotRequired[pulumi.Input['GrantOwnershipOnAllArgsDict']]
        """
        Configures the privilege to be granted on all objects in either a database or schema.
        """
        future: NotRequired[pulumi.Input['GrantOwnershipOnFutureArgsDict']]
        """
        Configures the privilege to be granted on all objects in either a database or schema.
        """
        object_name: NotRequired[pulumi.Input[str]]
        """
        Specifies the identifier for the object on which you are transferring ownership.
        """
        object_type: NotRequired[pulumi.Input[str]]
        """
        Specifies the type of object on which you are transferring ownership. Available values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | COMPUTE POOL | DATA METRIC FUNCTION | DATABASE | DATABASE ROLE | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | EXTERNAL VOLUME | FAILOVER GROUP | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | ICEBERG TABLE | IMAGE REPOSITORY | INTEGRATION | MATERIALIZED VIEW | NETWORK POLICY | NETWORK RULE | PACKAGES POLICY | PIPE | PROCEDURE | MASKING POLICY | PASSWORD POLICY | PROJECTION POLICY | REPLICATION GROUP | ROLE | ROW ACCESS POLICY | SCHEMA | SESSION POLICY | SECRET | SEQUENCE | STAGE | STREAM | TABLE | TAG | TASK | USER | VIEW | WAREHOUSE
        """
elif False:
    GrantOwnershipOnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GrantOwnershipOnArgs:
    def __init__(__self__, *,
                 all: Optional[pulumi.Input['GrantOwnershipOnAllArgs']] = None,
                 future: Optional[pulumi.Input['GrantOwnershipOnFutureArgs']] = None,
                 object_name: Optional[pulumi.Input[str]] = None,
                 object_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['GrantOwnershipOnAllArgs'] all: Configures the privilege to be granted on all objects in either a database or schema.
        :param pulumi.Input['GrantOwnershipOnFutureArgs'] future: Configures the privilege to be granted on all objects in either a database or schema.
        :param pulumi.Input[str] object_name: Specifies the identifier for the object on which you are transferring ownership.
        :param pulumi.Input[str] object_type: Specifies the type of object on which you are transferring ownership. Available values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | COMPUTE POOL | DATA METRIC FUNCTION | DATABASE | DATABASE ROLE | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | EXTERNAL VOLUME | FAILOVER GROUP | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | ICEBERG TABLE | IMAGE REPOSITORY | INTEGRATION | MATERIALIZED VIEW | NETWORK POLICY | NETWORK RULE | PACKAGES POLICY | PIPE | PROCEDURE | MASKING POLICY | PASSWORD POLICY | PROJECTION POLICY | REPLICATION GROUP | ROLE | ROW ACCESS POLICY | SCHEMA | SESSION POLICY | SECRET | SEQUENCE | STAGE | STREAM | TABLE | TAG | TASK | USER | VIEW | WAREHOUSE
        """
        if all is not None:
            pulumi.set(__self__, "all", all)
        if future is not None:
            pulumi.set(__self__, "future", future)
        if object_name is not None:
            pulumi.set(__self__, "object_name", object_name)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter
    def all(self) -> Optional[pulumi.Input['GrantOwnershipOnAllArgs']]:
        """
        Configures the privilege to be granted on all objects in either a database or schema.
        """
        return pulumi.get(self, "all")

    @all.setter
    def all(self, value: Optional[pulumi.Input['GrantOwnershipOnAllArgs']]):
        pulumi.set(self, "all", value)

    @property
    @pulumi.getter
    def future(self) -> Optional[pulumi.Input['GrantOwnershipOnFutureArgs']]:
        """
        Configures the privilege to be granted on all objects in either a database or schema.
        """
        return pulumi.get(self, "future")

    @future.setter
    def future(self, value: Optional[pulumi.Input['GrantOwnershipOnFutureArgs']]):
        pulumi.set(self, "future", value)

    @property
    @pulumi.getter(name="objectName")
    def object_name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the identifier for the object on which you are transferring ownership.
        """
        return pulumi.get(self, "object_name")

    @object_name.setter
    def object_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_name", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the type of object on which you are transferring ownership. Available values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | COMPUTE POOL | DATA METRIC FUNCTION | DATABASE | DATABASE ROLE | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | EXTERNAL VOLUME | FAILOVER GROUP | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | ICEBERG TABLE | IMAGE REPOSITORY | INTEGRATION | MATERIALIZED VIEW | NETWORK POLICY | NETWORK RULE | PACKAGES POLICY | PIPE | PROCEDURE | MASKING POLICY | PASSWORD POLICY | PROJECTION POLICY | REPLICATION GROUP | ROLE | ROW ACCESS POLICY | SCHEMA | SESSION POLICY | SECRET | SEQUENCE | STAGE | STREAM | TABLE | TAG | TASK | USER | VIEW | WAREHOUSE
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)


if not MYPY:
    class GrantOwnershipOnAllArgsDict(TypedDict):
        object_type_plural: pulumi.Input[str]
        """
        Specifies the type of object in plural form on which you are transferring ownership. Available values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | COMPUTE POOLS | DATA METRIC FUNCTIONS | DATABASES | DATABASE ROLES | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | EXTERNAL VOLUMES | FAILOVER GROUPS | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | IMAGE REPOSITORIES | INTEGRATIONS | MATERIALIZED VIEWS | NETWORK POLICIES | NETWORK RULES | PACKAGES POLICIES | PIPES | PROCEDURES | MASKING POLICIES | PASSWORD POLICIES | PROJECTION POLICIES | REPLICATION GROUPS | ROLES | ROW ACCESS POLICIES | SCHEMAS | SESSION POLICIES | SECRETS | SEQUENCES | STAGES | STREAMS | TABLES | TAGS | TASKS | USERS | VIEWS | WAREHOUSES. For more information head over to [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#required-parameters).
        """
        in_database: NotRequired[pulumi.Input[str]]
        """
        The fully qualified name of the database.
        """
        in_schema: NotRequired[pulumi.Input[str]]
        """
        The fully qualified name of the schema.
        """
elif False:
    GrantOwnershipOnAllArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GrantOwnershipOnAllArgs:
    def __init__(__self__, *,
                 object_type_plural: pulumi.Input[str],
                 in_database: Optional[pulumi.Input[str]] = None,
                 in_schema: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object_type_plural: Specifies the type of object in plural form on which you are transferring ownership. Available values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | COMPUTE POOLS | DATA METRIC FUNCTIONS | DATABASES | DATABASE ROLES | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | EXTERNAL VOLUMES | FAILOVER GROUPS | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | IMAGE REPOSITORIES | INTEGRATIONS | MATERIALIZED VIEWS | NETWORK POLICIES | NETWORK RULES | PACKAGES POLICIES | PIPES | PROCEDURES | MASKING POLICIES | PASSWORD POLICIES | PROJECTION POLICIES | REPLICATION GROUPS | ROLES | ROW ACCESS POLICIES | SCHEMAS | SESSION POLICIES | SECRETS | SEQUENCES | STAGES | STREAMS | TABLES | TAGS | TASKS | USERS | VIEWS | WAREHOUSES. For more information head over to [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#required-parameters).
        :param pulumi.Input[str] in_database: The fully qualified name of the database.
        :param pulumi.Input[str] in_schema: The fully qualified name of the schema.
        """
        pulumi.set(__self__, "object_type_plural", object_type_plural)
        if in_database is not None:
            pulumi.set(__self__, "in_database", in_database)
        if in_schema is not None:
            pulumi.set(__self__, "in_schema", in_schema)

    @property
    @pulumi.getter(name="objectTypePlural")
    def object_type_plural(self) -> pulumi.Input[str]:
        """
        Specifies the type of object in plural form on which you are transferring ownership. Available values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | COMPUTE POOLS | DATA METRIC FUNCTIONS | DATABASES | DATABASE ROLES | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | EXTERNAL VOLUMES | FAILOVER GROUPS | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | IMAGE REPOSITORIES | INTEGRATIONS | MATERIALIZED VIEWS | NETWORK POLICIES | NETWORK RULES | PACKAGES POLICIES | PIPES | PROCEDURES | MASKING POLICIES | PASSWORD POLICIES | PROJECTION POLICIES | REPLICATION GROUPS | ROLES | ROW ACCESS POLICIES | SCHEMAS | SESSION POLICIES | SECRETS | SEQUENCES | STAGES | STREAMS | TABLES | TAGS | TASKS | USERS | VIEWS | WAREHOUSES. For more information head over to [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#required-parameters).
        """
        return pulumi.get(self, "object_type_plural")

    @object_type_plural.setter
    def object_type_plural(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_type_plural", value)

    @property
    @pulumi.getter(name="inDatabase")
    def in_database(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified name of the database.
        """
        return pulumi.get(self, "in_database")

    @in_database.setter
    def in_database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "in_database", value)

    @property
    @pulumi.getter(name="inSchema")
    def in_schema(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified name of the schema.
        """
        return pulumi.get(self, "in_schema")

    @in_schema.setter
    def in_schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "in_schema", value)


if not MYPY:
    class GrantOwnershipOnFutureArgsDict(TypedDict):
        object_type_plural: pulumi.Input[str]
        """
        Specifies the type of object in plural form on which you are transferring ownership. Available values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | COMPUTE POOLS | DATA METRIC FUNCTIONS | DATABASES | DATABASE ROLES | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | EXTERNAL VOLUMES | FAILOVER GROUPS | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | IMAGE REPOSITORIES | INTEGRATIONS | MATERIALIZED VIEWS | NETWORK POLICIES | NETWORK RULES | PACKAGES POLICIES | PIPES | PROCEDURES | MASKING POLICIES | PASSWORD POLICIES | PROJECTION POLICIES | REPLICATION GROUPS | ROLES | ROW ACCESS POLICIES | SCHEMAS | SESSION POLICIES | SECRETS | SEQUENCES | STAGES | STREAMS | TABLES | TAGS | TASKS | USERS | VIEWS | WAREHOUSES. For more information head over to [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#required-parameters).
        """
        in_database: NotRequired[pulumi.Input[str]]
        """
        The fully qualified name of the database.
        """
        in_schema: NotRequired[pulumi.Input[str]]
        """
        The fully qualified name of the schema.
        """
elif False:
    GrantOwnershipOnFutureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GrantOwnershipOnFutureArgs:
    def __init__(__self__, *,
                 object_type_plural: pulumi.Input[str],
                 in_database: Optional[pulumi.Input[str]] = None,
                 in_schema: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object_type_plural: Specifies the type of object in plural form on which you are transferring ownership. Available values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | COMPUTE POOLS | DATA METRIC FUNCTIONS | DATABASES | DATABASE ROLES | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | EXTERNAL VOLUMES | FAILOVER GROUPS | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | IMAGE REPOSITORIES | INTEGRATIONS | MATERIALIZED VIEWS | NETWORK POLICIES | NETWORK RULES | PACKAGES POLICIES | PIPES | PROCEDURES | MASKING POLICIES | PASSWORD POLICIES | PROJECTION POLICIES | REPLICATION GROUPS | ROLES | ROW ACCESS POLICIES | SCHEMAS | SESSION POLICIES | SECRETS | SEQUENCES | STAGES | STREAMS | TABLES | TAGS | TASKS | USERS | VIEWS | WAREHOUSES. For more information head over to [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#required-parameters).
        :param pulumi.Input[str] in_database: The fully qualified name of the database.
        :param pulumi.Input[str] in_schema: The fully qualified name of the schema.
        """
        pulumi.set(__self__, "object_type_plural", object_type_plural)
        if in_database is not None:
            pulumi.set(__self__, "in_database", in_database)
        if in_schema is not None:
            pulumi.set(__self__, "in_schema", in_schema)

    @property
    @pulumi.getter(name="objectTypePlural")
    def object_type_plural(self) -> pulumi.Input[str]:
        """
        Specifies the type of object in plural form on which you are transferring ownership. Available values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | COMPUTE POOLS | DATA METRIC FUNCTIONS | DATABASES | DATABASE ROLES | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | EXTERNAL VOLUMES | FAILOVER GROUPS | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | IMAGE REPOSITORIES | INTEGRATIONS | MATERIALIZED VIEWS | NETWORK POLICIES | NETWORK RULES | PACKAGES POLICIES | PIPES | PROCEDURES | MASKING POLICIES | PASSWORD POLICIES | PROJECTION POLICIES | REPLICATION GROUPS | ROLES | ROW ACCESS POLICIES | SCHEMAS | SESSION POLICIES | SECRETS | SEQUENCES | STAGES | STREAMS | TABLES | TAGS | TASKS | USERS | VIEWS | WAREHOUSES. For more information head over to [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#required-parameters).
        """
        return pulumi.get(self, "object_type_plural")

    @object_type_plural.setter
    def object_type_plural(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_type_plural", value)

    @property
    @pulumi.getter(name="inDatabase")
    def in_database(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified name of the database.
        """
        return pulumi.get(self, "in_database")

    @in_database.setter
    def in_database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "in_database", value)

    @property
    @pulumi.getter(name="inSchema")
    def in_schema(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified name of the schema.
        """
        return pulumi.get(self, "in_schema")

    @in_schema.setter
    def in_schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "in_schema", value)


if not MYPY:
    class GrantPrivilegesToAccountRoleOnAccountObjectArgsDict(TypedDict):
        object_name: pulumi.Input[str]
        """
        The fully qualified name of the object on which privileges will be granted.
        """
        object_type: pulumi.Input[str]
        """
        The object type of the account object on which privileges will be granted. Valid values are: USER | RESOURCE MONITOR | WAREHOUSE | COMPUTE POOL | DATABASE | INTEGRATION | FAILOVER GROUP | REPLICATION GROUP | EXTERNAL VOLUME
        """
elif False:
    GrantPrivilegesToAccountRoleOnAccountObjectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GrantPrivilegesToAccountRoleOnAccountObjectArgs:
    def __init__(__self__, *,
                 object_name: pulumi.Input[str],
                 object_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object_name: The fully qualified name of the object on which privileges will be granted.
        :param pulumi.Input[str] object_type: The object type of the account object on which privileges will be granted. Valid values are: USER | RESOURCE MONITOR | WAREHOUSE | COMPUTE POOL | DATABASE | INTEGRATION | FAILOVER GROUP | REPLICATION GROUP | EXTERNAL VOLUME
        """
        pulumi.set(__self__, "object_name", object_name)
        pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectName")
    def object_name(self) -> pulumi.Input[str]:
        """
        The fully qualified name of the object on which privileges will be granted.
        """
        return pulumi.get(self, "object_name")

    @object_name.setter
    def object_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_name", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> pulumi.Input[str]:
        """
        The object type of the account object on which privileges will be granted. Valid values are: USER | RESOURCE MONITOR | WAREHOUSE | COMPUTE POOL | DATABASE | INTEGRATION | FAILOVER GROUP | REPLICATION GROUP | EXTERNAL VOLUME
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_type", value)


if not MYPY:
    class GrantPrivilegesToAccountRoleOnSchemaArgsDict(TypedDict):
        all_schemas_in_database: NotRequired[pulumi.Input[str]]
        """
        The fully qualified name of the database.
        """
        future_schemas_in_database: NotRequired[pulumi.Input[str]]
        """
        The fully qualified name of the database.
        """
        schema_name: NotRequired[pulumi.Input[str]]
        """
        The fully qualified name of the schema.
        """
elif False:
    GrantPrivilegesToAccountRoleOnSchemaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GrantPrivilegesToAccountRoleOnSchemaArgs:
    def __init__(__self__, *,
                 all_schemas_in_database: Optional[pulumi.Input[str]] = None,
                 future_schemas_in_database: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] all_schemas_in_database: The fully qualified name of the database.
        :param pulumi.Input[str] future_schemas_in_database: The fully qualified name of the database.
        :param pulumi.Input[str] schema_name: The fully qualified name of the schema.
        """
        if all_schemas_in_database is not None:
            pulumi.set(__self__, "all_schemas_in_database", all_schemas_in_database)
        if future_schemas_in_database is not None:
            pulumi.set(__self__, "future_schemas_in_database", future_schemas_in_database)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="allSchemasInDatabase")
    def all_schemas_in_database(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified name of the database.
        """
        return pulumi.get(self, "all_schemas_in_database")

    @all_schemas_in_database.setter
    def all_schemas_in_database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "all_schemas_in_database", value)

    @property
    @pulumi.getter(name="futureSchemasInDatabase")
    def future_schemas_in_database(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified name of the database.
        """
        return pulumi.get(self, "future_schemas_in_database")

    @future_schemas_in_database.setter
    def future_schemas_in_database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "future_schemas_in_database", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified name of the schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


if not MYPY:
    class GrantPrivilegesToAccountRoleOnSchemaObjectArgsDict(TypedDict):
        all: NotRequired[pulumi.Input['GrantPrivilegesToAccountRoleOnSchemaObjectAllArgsDict']]
        """
        Configures the privilege to be granted on all objects in either a database or schema.
        """
        future: NotRequired[pulumi.Input['GrantPrivilegesToAccountRoleOnSchemaObjectFutureArgsDict']]
        """
        Configures the privilege to be granted on future objects in either a database or schema.
        """
        object_name: NotRequired[pulumi.Input[str]]
        """
        The fully qualified name of the object on which privileges will be granted.
        """
        object_type: NotRequired[pulumi.Input[str]]
        """
        The object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | CORTEX SEARCH SERVICE | DATA METRIC FUNCTION | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | IMAGE REPOSITORY | ICEBERG TABLE | MASKING POLICY | MATERIALIZED VIEW | MODEL | NETWORK RULE | NOTEBOOK | PACKAGES POLICY | PASSWORD POLICY | PIPE | PROCEDURE | PROJECTION POLICY | ROW ACCESS POLICY | SECRET | SERVICE | SESSION POLICY | SEQUENCE | SNAPSHOT | STAGE | STREAM | TABLE | TAG | TASK | VIEW | STREAMLIT | DATASET
        """
elif False:
    GrantPrivilegesToAccountRoleOnSchemaObjectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GrantPrivilegesToAccountRoleOnSchemaObjectArgs:
    def __init__(__self__, *,
                 all: Optional[pulumi.Input['GrantPrivilegesToAccountRoleOnSchemaObjectAllArgs']] = None,
                 future: Optional[pulumi.Input['GrantPrivilegesToAccountRoleOnSchemaObjectFutureArgs']] = None,
                 object_name: Optional[pulumi.Input[str]] = None,
                 object_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['GrantPrivilegesToAccountRoleOnSchemaObjectAllArgs'] all: Configures the privilege to be granted on all objects in either a database or schema.
        :param pulumi.Input['GrantPrivilegesToAccountRoleOnSchemaObjectFutureArgs'] future: Configures the privilege to be granted on future objects in either a database or schema.
        :param pulumi.Input[str] object_name: The fully qualified name of the object on which privileges will be granted.
        :param pulumi.Input[str] object_type: The object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | CORTEX SEARCH SERVICE | DATA METRIC FUNCTION | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | IMAGE REPOSITORY | ICEBERG TABLE | MASKING POLICY | MATERIALIZED VIEW | MODEL | NETWORK RULE | NOTEBOOK | PACKAGES POLICY | PASSWORD POLICY | PIPE | PROCEDURE | PROJECTION POLICY | ROW ACCESS POLICY | SECRET | SERVICE | SESSION POLICY | SEQUENCE | SNAPSHOT | STAGE | STREAM | TABLE | TAG | TASK | VIEW | STREAMLIT | DATASET
        """
        if all is not None:
            pulumi.set(__self__, "all", all)
        if future is not None:
            pulumi.set(__self__, "future", future)
        if object_name is not None:
            pulumi.set(__self__, "object_name", object_name)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter
    def all(self) -> Optional[pulumi.Input['GrantPrivilegesToAccountRoleOnSchemaObjectAllArgs']]:
        """
        Configures the privilege to be granted on all objects in either a database or schema.
        """
        return pulumi.get(self, "all")

    @all.setter
    def all(self, value: Optional[pulumi.Input['GrantPrivilegesToAccountRoleOnSchemaObjectAllArgs']]):
        pulumi.set(self, "all", value)

    @property
    @pulumi.getter
    def future(self) -> Optional[pulumi.Input['GrantPrivilegesToAccountRoleOnSchemaObjectFutureArgs']]:
        """
        Configures the privilege to be granted on future objects in either a database or schema.
        """
        return pulumi.get(self, "future")

    @future.setter
    def future(self, value: Optional[pulumi.Input['GrantPrivilegesToAccountRoleOnSchemaObjectFutureArgs']]):
        pulumi.set(self, "future", value)

    @property
    @pulumi.getter(name="objectName")
    def object_name(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified name of the object on which privileges will be granted.
        """
        return pulumi.get(self, "object_name")

    @object_name.setter
    def object_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_name", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        The object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | CORTEX SEARCH SERVICE | DATA METRIC FUNCTION | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | IMAGE REPOSITORY | ICEBERG TABLE | MASKING POLICY | MATERIALIZED VIEW | MODEL | NETWORK RULE | NOTEBOOK | PACKAGES POLICY | PASSWORD POLICY | PIPE | PROCEDURE | PROJECTION POLICY | ROW ACCESS POLICY | SECRET | SERVICE | SESSION POLICY | SEQUENCE | SNAPSHOT | STAGE | STREAM | TABLE | TAG | TASK | VIEW | STREAMLIT | DATASET
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)


if not MYPY:
    class GrantPrivilegesToAccountRoleOnSchemaObjectAllArgsDict(TypedDict):
        object_type_plural: pulumi.Input[str]
        """
        The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.
        """
        in_database: NotRequired[pulumi.Input[str]]
        in_schema: NotRequired[pulumi.Input[str]]
elif False:
    GrantPrivilegesToAccountRoleOnSchemaObjectAllArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GrantPrivilegesToAccountRoleOnSchemaObjectAllArgs:
    def __init__(__self__, *,
                 object_type_plural: pulumi.Input[str],
                 in_database: Optional[pulumi.Input[str]] = None,
                 in_schema: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object_type_plural: The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.
        """
        pulumi.set(__self__, "object_type_plural", object_type_plural)
        if in_database is not None:
            pulumi.set(__self__, "in_database", in_database)
        if in_schema is not None:
            pulumi.set(__self__, "in_schema", in_schema)

    @property
    @pulumi.getter(name="objectTypePlural")
    def object_type_plural(self) -> pulumi.Input[str]:
        """
        The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.
        """
        return pulumi.get(self, "object_type_plural")

    @object_type_plural.setter
    def object_type_plural(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_type_plural", value)

    @property
    @pulumi.getter(name="inDatabase")
    def in_database(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "in_database")

    @in_database.setter
    def in_database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "in_database", value)

    @property
    @pulumi.getter(name="inSchema")
    def in_schema(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "in_schema")

    @in_schema.setter
    def in_schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "in_schema", value)


if not MYPY:
    class GrantPrivilegesToAccountRoleOnSchemaObjectFutureArgsDict(TypedDict):
        object_type_plural: pulumi.Input[str]
        """
        The plural object type of the schema object on which privileges will be granted. Valid values are: ALERTS | AUTHENTICATION POLICIES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PASSWORD POLICIES | PIPES | PROCEDURES | SECRETS | SERVICES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TASKS | VIEWS | DATASETS.
        """
        in_database: NotRequired[pulumi.Input[str]]
        in_schema: NotRequired[pulumi.Input[str]]
elif False:
    GrantPrivilegesToAccountRoleOnSchemaObjectFutureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GrantPrivilegesToAccountRoleOnSchemaObjectFutureArgs:
    def __init__(__self__, *,
                 object_type_plural: pulumi.Input[str],
                 in_database: Optional[pulumi.Input[str]] = None,
                 in_schema: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object_type_plural: The plural object type of the schema object on which privileges will be granted. Valid values are: ALERTS | AUTHENTICATION POLICIES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PASSWORD POLICIES | PIPES | PROCEDURES | SECRETS | SERVICES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TASKS | VIEWS | DATASETS.
        """
        pulumi.set(__self__, "object_type_plural", object_type_plural)
        if in_database is not None:
            pulumi.set(__self__, "in_database", in_database)
        if in_schema is not None:
            pulumi.set(__self__, "in_schema", in_schema)

    @property
    @pulumi.getter(name="objectTypePlural")
    def object_type_plural(self) -> pulumi.Input[str]:
        """
        The plural object type of the schema object on which privileges will be granted. Valid values are: ALERTS | AUTHENTICATION POLICIES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PASSWORD POLICIES | PIPES | PROCEDURES | SECRETS | SERVICES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TASKS | VIEWS | DATASETS.
        """
        return pulumi.get(self, "object_type_plural")

    @object_type_plural.setter
    def object_type_plural(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_type_plural", value)

    @property
    @pulumi.getter(name="inDatabase")
    def in_database(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "in_database")

    @in_database.setter
    def in_database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "in_database", value)

    @property
    @pulumi.getter(name="inSchema")
    def in_schema(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "in_schema")

    @in_schema.setter
    def in_schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "in_schema", value)


if not MYPY:
    class GrantPrivilegesToDatabaseRoleOnSchemaArgsDict(TypedDict):
        all_schemas_in_database: NotRequired[pulumi.Input[str]]
        """
        The fully qualified name of the database.
        """
        future_schemas_in_database: NotRequired[pulumi.Input[str]]
        """
        The fully qualified name of the database.
        """
        schema_name: NotRequired[pulumi.Input[str]]
        """
        The fully qualified name of the schema.
        """
elif False:
    GrantPrivilegesToDatabaseRoleOnSchemaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GrantPrivilegesToDatabaseRoleOnSchemaArgs:
    def __init__(__self__, *,
                 all_schemas_in_database: Optional[pulumi.Input[str]] = None,
                 future_schemas_in_database: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] all_schemas_in_database: The fully qualified name of the database.
        :param pulumi.Input[str] future_schemas_in_database: The fully qualified name of the database.
        :param pulumi.Input[str] schema_name: The fully qualified name of the schema.
        """
        if all_schemas_in_database is not None:
            pulumi.set(__self__, "all_schemas_in_database", all_schemas_in_database)
        if future_schemas_in_database is not None:
            pulumi.set(__self__, "future_schemas_in_database", future_schemas_in_database)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="allSchemasInDatabase")
    def all_schemas_in_database(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified name of the database.
        """
        return pulumi.get(self, "all_schemas_in_database")

    @all_schemas_in_database.setter
    def all_schemas_in_database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "all_schemas_in_database", value)

    @property
    @pulumi.getter(name="futureSchemasInDatabase")
    def future_schemas_in_database(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified name of the database.
        """
        return pulumi.get(self, "future_schemas_in_database")

    @future_schemas_in_database.setter
    def future_schemas_in_database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "future_schemas_in_database", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified name of the schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


if not MYPY:
    class GrantPrivilegesToDatabaseRoleOnSchemaObjectArgsDict(TypedDict):
        all: NotRequired[pulumi.Input['GrantPrivilegesToDatabaseRoleOnSchemaObjectAllArgsDict']]
        """
        Configures the privilege to be granted on all objects in either a database or schema.
        """
        future: NotRequired[pulumi.Input['GrantPrivilegesToDatabaseRoleOnSchemaObjectFutureArgsDict']]
        """
        Configures the privilege to be granted on future objects in either a database or schema.
        """
        object_name: NotRequired[pulumi.Input[str]]
        """
        The fully qualified name of the object on which privileges will be granted.
        """
        object_type: NotRequired[pulumi.Input[str]]
        """
        The object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | CORTEX SEARCH SERVICE | DATA METRIC FUNCTION | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | IMAGE REPOSITORY | ICEBERG TABLE | MASKING POLICY | MATERIALIZED VIEW | MODEL | NETWORK RULE | NOTEBOOK | PACKAGES POLICY | PASSWORD POLICY | PIPE | PROCEDURE | PROJECTION POLICY | ROW ACCESS POLICY | SECRET | SERVICE | SESSION POLICY | SEQUENCE | SNAPSHOT | STAGE | STREAM | TABLE | TAG | TASK | VIEW | STREAMLIT | DATASET
        """
elif False:
    GrantPrivilegesToDatabaseRoleOnSchemaObjectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GrantPrivilegesToDatabaseRoleOnSchemaObjectArgs:
    def __init__(__self__, *,
                 all: Optional[pulumi.Input['GrantPrivilegesToDatabaseRoleOnSchemaObjectAllArgs']] = None,
                 future: Optional[pulumi.Input['GrantPrivilegesToDatabaseRoleOnSchemaObjectFutureArgs']] = None,
                 object_name: Optional[pulumi.Input[str]] = None,
                 object_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['GrantPrivilegesToDatabaseRoleOnSchemaObjectAllArgs'] all: Configures the privilege to be granted on all objects in either a database or schema.
        :param pulumi.Input['GrantPrivilegesToDatabaseRoleOnSchemaObjectFutureArgs'] future: Configures the privilege to be granted on future objects in either a database or schema.
        :param pulumi.Input[str] object_name: The fully qualified name of the object on which privileges will be granted.
        :param pulumi.Input[str] object_type: The object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | CORTEX SEARCH SERVICE | DATA METRIC FUNCTION | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | IMAGE REPOSITORY | ICEBERG TABLE | MASKING POLICY | MATERIALIZED VIEW | MODEL | NETWORK RULE | NOTEBOOK | PACKAGES POLICY | PASSWORD POLICY | PIPE | PROCEDURE | PROJECTION POLICY | ROW ACCESS POLICY | SECRET | SERVICE | SESSION POLICY | SEQUENCE | SNAPSHOT | STAGE | STREAM | TABLE | TAG | TASK | VIEW | STREAMLIT | DATASET
        """
        if all is not None:
            pulumi.set(__self__, "all", all)
        if future is not None:
            pulumi.set(__self__, "future", future)
        if object_name is not None:
            pulumi.set(__self__, "object_name", object_name)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter
    def all(self) -> Optional[pulumi.Input['GrantPrivilegesToDatabaseRoleOnSchemaObjectAllArgs']]:
        """
        Configures the privilege to be granted on all objects in either a database or schema.
        """
        return pulumi.get(self, "all")

    @all.setter
    def all(self, value: Optional[pulumi.Input['GrantPrivilegesToDatabaseRoleOnSchemaObjectAllArgs']]):
        pulumi.set(self, "all", value)

    @property
    @pulumi.getter
    def future(self) -> Optional[pulumi.Input['GrantPrivilegesToDatabaseRoleOnSchemaObjectFutureArgs']]:
        """
        Configures the privilege to be granted on future objects in either a database or schema.
        """
        return pulumi.get(self, "future")

    @future.setter
    def future(self, value: Optional[pulumi.Input['GrantPrivilegesToDatabaseRoleOnSchemaObjectFutureArgs']]):
        pulumi.set(self, "future", value)

    @property
    @pulumi.getter(name="objectName")
    def object_name(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified name of the object on which privileges will be granted.
        """
        return pulumi.get(self, "object_name")

    @object_name.setter
    def object_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_name", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        The object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | CORTEX SEARCH SERVICE | DATA METRIC FUNCTION | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | IMAGE REPOSITORY | ICEBERG TABLE | MASKING POLICY | MATERIALIZED VIEW | MODEL | NETWORK RULE | NOTEBOOK | PACKAGES POLICY | PASSWORD POLICY | PIPE | PROCEDURE | PROJECTION POLICY | ROW ACCESS POLICY | SECRET | SERVICE | SESSION POLICY | SEQUENCE | SNAPSHOT | STAGE | STREAM | TABLE | TAG | TASK | VIEW | STREAMLIT | DATASET
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)


if not MYPY:
    class GrantPrivilegesToDatabaseRoleOnSchemaObjectAllArgsDict(TypedDict):
        object_type_plural: pulumi.Input[str]
        """
        The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.
        """
        in_database: NotRequired[pulumi.Input[str]]
        """
        The fully qualified name of the database.
        """
        in_schema: NotRequired[pulumi.Input[str]]
        """
        The fully qualified name of the schema.
        """
elif False:
    GrantPrivilegesToDatabaseRoleOnSchemaObjectAllArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GrantPrivilegesToDatabaseRoleOnSchemaObjectAllArgs:
    def __init__(__self__, *,
                 object_type_plural: pulumi.Input[str],
                 in_database: Optional[pulumi.Input[str]] = None,
                 in_schema: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object_type_plural: The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.
        :param pulumi.Input[str] in_database: The fully qualified name of the database.
        :param pulumi.Input[str] in_schema: The fully qualified name of the schema.
        """
        pulumi.set(__self__, "object_type_plural", object_type_plural)
        if in_database is not None:
            pulumi.set(__self__, "in_database", in_database)
        if in_schema is not None:
            pulumi.set(__self__, "in_schema", in_schema)

    @property
    @pulumi.getter(name="objectTypePlural")
    def object_type_plural(self) -> pulumi.Input[str]:
        """
        The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.
        """
        return pulumi.get(self, "object_type_plural")

    @object_type_plural.setter
    def object_type_plural(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_type_plural", value)

    @property
    @pulumi.getter(name="inDatabase")
    def in_database(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified name of the database.
        """
        return pulumi.get(self, "in_database")

    @in_database.setter
    def in_database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "in_database", value)

    @property
    @pulumi.getter(name="inSchema")
    def in_schema(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified name of the schema.
        """
        return pulumi.get(self, "in_schema")

    @in_schema.setter
    def in_schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "in_schema", value)


if not MYPY:
    class GrantPrivilegesToDatabaseRoleOnSchemaObjectFutureArgsDict(TypedDict):
        object_type_plural: pulumi.Input[str]
        """
        The plural object type of the schema object on which privileges will be granted. Valid values are: ALERTS | AUTHENTICATION POLICIES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PASSWORD POLICIES | PIPES | PROCEDURES | SECRETS | SERVICES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TASKS | VIEWS | DATASETS.
        """
        in_database: NotRequired[pulumi.Input[str]]
        """
        The fully qualified name of the database.
        """
        in_schema: NotRequired[pulumi.Input[str]]
        """
        The fully qualified name of the schema.
        """
elif False:
    GrantPrivilegesToDatabaseRoleOnSchemaObjectFutureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GrantPrivilegesToDatabaseRoleOnSchemaObjectFutureArgs:
    def __init__(__self__, *,
                 object_type_plural: pulumi.Input[str],
                 in_database: Optional[pulumi.Input[str]] = None,
                 in_schema: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object_type_plural: The plural object type of the schema object on which privileges will be granted. Valid values are: ALERTS | AUTHENTICATION POLICIES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PASSWORD POLICIES | PIPES | PROCEDURES | SECRETS | SERVICES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TASKS | VIEWS | DATASETS.
        :param pulumi.Input[str] in_database: The fully qualified name of the database.
        :param pulumi.Input[str] in_schema: The fully qualified name of the schema.
        """
        pulumi.set(__self__, "object_type_plural", object_type_plural)
        if in_database is not None:
            pulumi.set(__self__, "in_database", in_database)
        if in_schema is not None:
            pulumi.set(__self__, "in_schema", in_schema)

    @property
    @pulumi.getter(name="objectTypePlural")
    def object_type_plural(self) -> pulumi.Input[str]:
        """
        The plural object type of the schema object on which privileges will be granted. Valid values are: ALERTS | AUTHENTICATION POLICIES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PASSWORD POLICIES | PIPES | PROCEDURES | SECRETS | SERVICES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TASKS | VIEWS | DATASETS.
        """
        return pulumi.get(self, "object_type_plural")

    @object_type_plural.setter
    def object_type_plural(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_type_plural", value)

    @property
    @pulumi.getter(name="inDatabase")
    def in_database(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified name of the database.
        """
        return pulumi.get(self, "in_database")

    @in_database.setter
    def in_database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "in_database", value)

    @property
    @pulumi.getter(name="inSchema")
    def in_schema(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified name of the schema.
        """
        return pulumi.get(self, "in_schema")

    @in_schema.setter
    def in_schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "in_schema", value)


if not MYPY:
    class LegacyServiceUserParameterArgsDict(TypedDict):
        abort_detached_queries: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterAbortDetachedQueryArgsDict']]]]
        autocommits: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterAutocommitArgsDict']]]]
        binary_input_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterBinaryInputFormatArgsDict']]]]
        binary_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterBinaryOutputFormatArgsDict']]]]
        client_memory_limits: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientMemoryLimitArgsDict']]]]
        client_metadata_request_use_connection_ctxes: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientMetadataRequestUseConnectionCtxArgsDict']]]]
        client_prefetch_threads: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientPrefetchThreadArgsDict']]]]
        client_result_chunk_sizes: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientResultChunkSizeArgsDict']]]]
        client_result_column_case_insensitives: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientResultColumnCaseInsensitiveArgsDict']]]]
        client_session_keep_alive_heartbeat_frequencies: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientSessionKeepAliveHeartbeatFrequencyArgsDict']]]]
        client_session_keep_alives: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientSessionKeepAlifeArgsDict']]]]
        client_timestamp_type_mappings: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientTimestampTypeMappingArgsDict']]]]
        date_input_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterDateInputFormatArgsDict']]]]
        date_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterDateOutputFormatArgsDict']]]]
        enable_unload_physical_type_optimizations: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterEnableUnloadPhysicalTypeOptimizationArgsDict']]]]
        enable_unredacted_query_syntax_errors: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterEnableUnredactedQuerySyntaxErrorArgsDict']]]]
        error_on_nondeterministic_merges: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterErrorOnNondeterministicMergeArgsDict']]]]
        error_on_nondeterministic_updates: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterErrorOnNondeterministicUpdateArgsDict']]]]
        geography_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterGeographyOutputFormatArgsDict']]]]
        geometry_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterGeometryOutputFormatArgsDict']]]]
        jdbc_treat_decimal_as_ints: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterJdbcTreatDecimalAsIntArgsDict']]]]
        jdbc_treat_timestamp_ntz_as_utcs: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterJdbcTreatTimestampNtzAsUtcArgsDict']]]]
        jdbc_use_session_timezones: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterJdbcUseSessionTimezoneArgsDict']]]]
        json_indents: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterJsonIndentArgsDict']]]]
        lock_timeouts: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterLockTimeoutArgsDict']]]]
        log_levels: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterLogLevelArgsDict']]]]
        multi_statement_counts: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterMultiStatementCountArgsDict']]]]
        network_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterNetworkPolicyArgsDict']]]]
        noorder_sequence_as_defaults: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterNoorderSequenceAsDefaultArgsDict']]]]
        odbc_treat_decimal_as_ints: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterOdbcTreatDecimalAsIntArgsDict']]]]
        prevent_unload_to_internal_stages: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterPreventUnloadToInternalStageArgsDict']]]]
        query_tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterQueryTagArgsDict']]]]
        quoted_identifiers_ignore_cases: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterQuotedIdentifiersIgnoreCaseArgsDict']]]]
        rows_per_resultsets: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterRowsPerResultsetArgsDict']]]]
        s3_stage_vpce_dns_names: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterS3StageVpceDnsNameArgsDict']]]]
        search_paths: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterSearchPathArgsDict']]]]
        simulated_data_sharing_consumers: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterSimulatedDataSharingConsumerArgsDict']]]]
        statement_queued_timeout_in_seconds: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterStatementQueuedTimeoutInSecondArgsDict']]]]
        statement_timeout_in_seconds: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterStatementTimeoutInSecondArgsDict']]]]
        strict_json_outputs: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterStrictJsonOutputArgsDict']]]]
        time_input_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimeInputFormatArgsDict']]]]
        time_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimeOutputFormatArgsDict']]]]
        timestamp_day_is_always24hs: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampDayIsAlways24hArgsDict']]]]
        timestamp_input_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampInputFormatArgsDict']]]]
        timestamp_ltz_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampLtzOutputFormatArgsDict']]]]
        timestamp_ntz_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampNtzOutputFormatArgsDict']]]]
        timestamp_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampOutputFormatArgsDict']]]]
        timestamp_type_mappings: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampTypeMappingArgsDict']]]]
        timestamp_tz_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampTzOutputFormatArgsDict']]]]
        timezones: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimezoneArgsDict']]]]
        trace_levels: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTraceLevelArgsDict']]]]
        transaction_abort_on_errors: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTransactionAbortOnErrorArgsDict']]]]
        transaction_default_isolation_levels: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTransactionDefaultIsolationLevelArgsDict']]]]
        two_digit_century_starts: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTwoDigitCenturyStartArgsDict']]]]
        unsupported_ddl_actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterUnsupportedDdlActionArgsDict']]]]
        use_cached_results: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterUseCachedResultArgsDict']]]]
        week_of_year_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterWeekOfYearPolicyArgsDict']]]]
        week_starts: NotRequired[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterWeekStartArgsDict']]]]
elif False:
    LegacyServiceUserParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterArgs:
    def __init__(__self__, *,
                 abort_detached_queries: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterAbortDetachedQueryArgs']]]] = None,
                 autocommits: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterAutocommitArgs']]]] = None,
                 binary_input_formats: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterBinaryInputFormatArgs']]]] = None,
                 binary_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterBinaryOutputFormatArgs']]]] = None,
                 client_memory_limits: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientMemoryLimitArgs']]]] = None,
                 client_metadata_request_use_connection_ctxes: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientMetadataRequestUseConnectionCtxArgs']]]] = None,
                 client_prefetch_threads: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientPrefetchThreadArgs']]]] = None,
                 client_result_chunk_sizes: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientResultChunkSizeArgs']]]] = None,
                 client_result_column_case_insensitives: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientResultColumnCaseInsensitiveArgs']]]] = None,
                 client_session_keep_alive_heartbeat_frequencies: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientSessionKeepAliveHeartbeatFrequencyArgs']]]] = None,
                 client_session_keep_alives: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientSessionKeepAlifeArgs']]]] = None,
                 client_timestamp_type_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientTimestampTypeMappingArgs']]]] = None,
                 date_input_formats: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterDateInputFormatArgs']]]] = None,
                 date_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterDateOutputFormatArgs']]]] = None,
                 enable_unload_physical_type_optimizations: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterEnableUnloadPhysicalTypeOptimizationArgs']]]] = None,
                 enable_unredacted_query_syntax_errors: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterEnableUnredactedQuerySyntaxErrorArgs']]]] = None,
                 error_on_nondeterministic_merges: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterErrorOnNondeterministicMergeArgs']]]] = None,
                 error_on_nondeterministic_updates: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterErrorOnNondeterministicUpdateArgs']]]] = None,
                 geography_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterGeographyOutputFormatArgs']]]] = None,
                 geometry_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterGeometryOutputFormatArgs']]]] = None,
                 jdbc_treat_decimal_as_ints: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterJdbcTreatDecimalAsIntArgs']]]] = None,
                 jdbc_treat_timestamp_ntz_as_utcs: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterJdbcTreatTimestampNtzAsUtcArgs']]]] = None,
                 jdbc_use_session_timezones: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterJdbcUseSessionTimezoneArgs']]]] = None,
                 json_indents: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterJsonIndentArgs']]]] = None,
                 lock_timeouts: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterLockTimeoutArgs']]]] = None,
                 log_levels: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterLogLevelArgs']]]] = None,
                 multi_statement_counts: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterMultiStatementCountArgs']]]] = None,
                 network_policies: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterNetworkPolicyArgs']]]] = None,
                 noorder_sequence_as_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterNoorderSequenceAsDefaultArgs']]]] = None,
                 odbc_treat_decimal_as_ints: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterOdbcTreatDecimalAsIntArgs']]]] = None,
                 prevent_unload_to_internal_stages: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterPreventUnloadToInternalStageArgs']]]] = None,
                 query_tags: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterQueryTagArgs']]]] = None,
                 quoted_identifiers_ignore_cases: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterQuotedIdentifiersIgnoreCaseArgs']]]] = None,
                 rows_per_resultsets: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterRowsPerResultsetArgs']]]] = None,
                 s3_stage_vpce_dns_names: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterS3StageVpceDnsNameArgs']]]] = None,
                 search_paths: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterSearchPathArgs']]]] = None,
                 simulated_data_sharing_consumers: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterSimulatedDataSharingConsumerArgs']]]] = None,
                 statement_queued_timeout_in_seconds: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterStatementQueuedTimeoutInSecondArgs']]]] = None,
                 statement_timeout_in_seconds: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterStatementTimeoutInSecondArgs']]]] = None,
                 strict_json_outputs: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterStrictJsonOutputArgs']]]] = None,
                 time_input_formats: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimeInputFormatArgs']]]] = None,
                 time_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimeOutputFormatArgs']]]] = None,
                 timestamp_day_is_always24hs: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampDayIsAlways24hArgs']]]] = None,
                 timestamp_input_formats: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampInputFormatArgs']]]] = None,
                 timestamp_ltz_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampLtzOutputFormatArgs']]]] = None,
                 timestamp_ntz_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampNtzOutputFormatArgs']]]] = None,
                 timestamp_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampOutputFormatArgs']]]] = None,
                 timestamp_type_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampTypeMappingArgs']]]] = None,
                 timestamp_tz_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampTzOutputFormatArgs']]]] = None,
                 timezones: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimezoneArgs']]]] = None,
                 trace_levels: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTraceLevelArgs']]]] = None,
                 transaction_abort_on_errors: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTransactionAbortOnErrorArgs']]]] = None,
                 transaction_default_isolation_levels: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTransactionDefaultIsolationLevelArgs']]]] = None,
                 two_digit_century_starts: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTwoDigitCenturyStartArgs']]]] = None,
                 unsupported_ddl_actions: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterUnsupportedDdlActionArgs']]]] = None,
                 use_cached_results: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterUseCachedResultArgs']]]] = None,
                 week_of_year_policies: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterWeekOfYearPolicyArgs']]]] = None,
                 week_starts: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterWeekStartArgs']]]] = None):
        if abort_detached_queries is not None:
            pulumi.set(__self__, "abort_detached_queries", abort_detached_queries)
        if autocommits is not None:
            pulumi.set(__self__, "autocommits", autocommits)
        if binary_input_formats is not None:
            pulumi.set(__self__, "binary_input_formats", binary_input_formats)
        if binary_output_formats is not None:
            pulumi.set(__self__, "binary_output_formats", binary_output_formats)
        if client_memory_limits is not None:
            pulumi.set(__self__, "client_memory_limits", client_memory_limits)
        if client_metadata_request_use_connection_ctxes is not None:
            pulumi.set(__self__, "client_metadata_request_use_connection_ctxes", client_metadata_request_use_connection_ctxes)
        if client_prefetch_threads is not None:
            pulumi.set(__self__, "client_prefetch_threads", client_prefetch_threads)
        if client_result_chunk_sizes is not None:
            pulumi.set(__self__, "client_result_chunk_sizes", client_result_chunk_sizes)
        if client_result_column_case_insensitives is not None:
            pulumi.set(__self__, "client_result_column_case_insensitives", client_result_column_case_insensitives)
        if client_session_keep_alive_heartbeat_frequencies is not None:
            pulumi.set(__self__, "client_session_keep_alive_heartbeat_frequencies", client_session_keep_alive_heartbeat_frequencies)
        if client_session_keep_alives is not None:
            pulumi.set(__self__, "client_session_keep_alives", client_session_keep_alives)
        if client_timestamp_type_mappings is not None:
            pulumi.set(__self__, "client_timestamp_type_mappings", client_timestamp_type_mappings)
        if date_input_formats is not None:
            pulumi.set(__self__, "date_input_formats", date_input_formats)
        if date_output_formats is not None:
            pulumi.set(__self__, "date_output_formats", date_output_formats)
        if enable_unload_physical_type_optimizations is not None:
            pulumi.set(__self__, "enable_unload_physical_type_optimizations", enable_unload_physical_type_optimizations)
        if enable_unredacted_query_syntax_errors is not None:
            pulumi.set(__self__, "enable_unredacted_query_syntax_errors", enable_unredacted_query_syntax_errors)
        if error_on_nondeterministic_merges is not None:
            pulumi.set(__self__, "error_on_nondeterministic_merges", error_on_nondeterministic_merges)
        if error_on_nondeterministic_updates is not None:
            pulumi.set(__self__, "error_on_nondeterministic_updates", error_on_nondeterministic_updates)
        if geography_output_formats is not None:
            pulumi.set(__self__, "geography_output_formats", geography_output_formats)
        if geometry_output_formats is not None:
            pulumi.set(__self__, "geometry_output_formats", geometry_output_formats)
        if jdbc_treat_decimal_as_ints is not None:
            pulumi.set(__self__, "jdbc_treat_decimal_as_ints", jdbc_treat_decimal_as_ints)
        if jdbc_treat_timestamp_ntz_as_utcs is not None:
            pulumi.set(__self__, "jdbc_treat_timestamp_ntz_as_utcs", jdbc_treat_timestamp_ntz_as_utcs)
        if jdbc_use_session_timezones is not None:
            pulumi.set(__self__, "jdbc_use_session_timezones", jdbc_use_session_timezones)
        if json_indents is not None:
            pulumi.set(__self__, "json_indents", json_indents)
        if lock_timeouts is not None:
            pulumi.set(__self__, "lock_timeouts", lock_timeouts)
        if log_levels is not None:
            pulumi.set(__self__, "log_levels", log_levels)
        if multi_statement_counts is not None:
            pulumi.set(__self__, "multi_statement_counts", multi_statement_counts)
        if network_policies is not None:
            pulumi.set(__self__, "network_policies", network_policies)
        if noorder_sequence_as_defaults is not None:
            pulumi.set(__self__, "noorder_sequence_as_defaults", noorder_sequence_as_defaults)
        if odbc_treat_decimal_as_ints is not None:
            pulumi.set(__self__, "odbc_treat_decimal_as_ints", odbc_treat_decimal_as_ints)
        if prevent_unload_to_internal_stages is not None:
            pulumi.set(__self__, "prevent_unload_to_internal_stages", prevent_unload_to_internal_stages)
        if query_tags is not None:
            pulumi.set(__self__, "query_tags", query_tags)
        if quoted_identifiers_ignore_cases is not None:
            pulumi.set(__self__, "quoted_identifiers_ignore_cases", quoted_identifiers_ignore_cases)
        if rows_per_resultsets is not None:
            pulumi.set(__self__, "rows_per_resultsets", rows_per_resultsets)
        if s3_stage_vpce_dns_names is not None:
            pulumi.set(__self__, "s3_stage_vpce_dns_names", s3_stage_vpce_dns_names)
        if search_paths is not None:
            pulumi.set(__self__, "search_paths", search_paths)
        if simulated_data_sharing_consumers is not None:
            pulumi.set(__self__, "simulated_data_sharing_consumers", simulated_data_sharing_consumers)
        if statement_queued_timeout_in_seconds is not None:
            pulumi.set(__self__, "statement_queued_timeout_in_seconds", statement_queued_timeout_in_seconds)
        if statement_timeout_in_seconds is not None:
            pulumi.set(__self__, "statement_timeout_in_seconds", statement_timeout_in_seconds)
        if strict_json_outputs is not None:
            pulumi.set(__self__, "strict_json_outputs", strict_json_outputs)
        if time_input_formats is not None:
            pulumi.set(__self__, "time_input_formats", time_input_formats)
        if time_output_formats is not None:
            pulumi.set(__self__, "time_output_formats", time_output_formats)
        if timestamp_day_is_always24hs is not None:
            pulumi.set(__self__, "timestamp_day_is_always24hs", timestamp_day_is_always24hs)
        if timestamp_input_formats is not None:
            pulumi.set(__self__, "timestamp_input_formats", timestamp_input_formats)
        if timestamp_ltz_output_formats is not None:
            pulumi.set(__self__, "timestamp_ltz_output_formats", timestamp_ltz_output_formats)
        if timestamp_ntz_output_formats is not None:
            pulumi.set(__self__, "timestamp_ntz_output_formats", timestamp_ntz_output_formats)
        if timestamp_output_formats is not None:
            pulumi.set(__self__, "timestamp_output_formats", timestamp_output_formats)
        if timestamp_type_mappings is not None:
            pulumi.set(__self__, "timestamp_type_mappings", timestamp_type_mappings)
        if timestamp_tz_output_formats is not None:
            pulumi.set(__self__, "timestamp_tz_output_formats", timestamp_tz_output_formats)
        if timezones is not None:
            pulumi.set(__self__, "timezones", timezones)
        if trace_levels is not None:
            pulumi.set(__self__, "trace_levels", trace_levels)
        if transaction_abort_on_errors is not None:
            pulumi.set(__self__, "transaction_abort_on_errors", transaction_abort_on_errors)
        if transaction_default_isolation_levels is not None:
            pulumi.set(__self__, "transaction_default_isolation_levels", transaction_default_isolation_levels)
        if two_digit_century_starts is not None:
            pulumi.set(__self__, "two_digit_century_starts", two_digit_century_starts)
        if unsupported_ddl_actions is not None:
            pulumi.set(__self__, "unsupported_ddl_actions", unsupported_ddl_actions)
        if use_cached_results is not None:
            pulumi.set(__self__, "use_cached_results", use_cached_results)
        if week_of_year_policies is not None:
            pulumi.set(__self__, "week_of_year_policies", week_of_year_policies)
        if week_starts is not None:
            pulumi.set(__self__, "week_starts", week_starts)

    @property
    @pulumi.getter(name="abortDetachedQueries")
    def abort_detached_queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterAbortDetachedQueryArgs']]]]:
        return pulumi.get(self, "abort_detached_queries")

    @abort_detached_queries.setter
    def abort_detached_queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterAbortDetachedQueryArgs']]]]):
        pulumi.set(self, "abort_detached_queries", value)

    @property
    @pulumi.getter
    def autocommits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterAutocommitArgs']]]]:
        return pulumi.get(self, "autocommits")

    @autocommits.setter
    def autocommits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterAutocommitArgs']]]]):
        pulumi.set(self, "autocommits", value)

    @property
    @pulumi.getter(name="binaryInputFormats")
    def binary_input_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterBinaryInputFormatArgs']]]]:
        return pulumi.get(self, "binary_input_formats")

    @binary_input_formats.setter
    def binary_input_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterBinaryInputFormatArgs']]]]):
        pulumi.set(self, "binary_input_formats", value)

    @property
    @pulumi.getter(name="binaryOutputFormats")
    def binary_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterBinaryOutputFormatArgs']]]]:
        return pulumi.get(self, "binary_output_formats")

    @binary_output_formats.setter
    def binary_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterBinaryOutputFormatArgs']]]]):
        pulumi.set(self, "binary_output_formats", value)

    @property
    @pulumi.getter(name="clientMemoryLimits")
    def client_memory_limits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientMemoryLimitArgs']]]]:
        return pulumi.get(self, "client_memory_limits")

    @client_memory_limits.setter
    def client_memory_limits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientMemoryLimitArgs']]]]):
        pulumi.set(self, "client_memory_limits", value)

    @property
    @pulumi.getter(name="clientMetadataRequestUseConnectionCtxes")
    def client_metadata_request_use_connection_ctxes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientMetadataRequestUseConnectionCtxArgs']]]]:
        return pulumi.get(self, "client_metadata_request_use_connection_ctxes")

    @client_metadata_request_use_connection_ctxes.setter
    def client_metadata_request_use_connection_ctxes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientMetadataRequestUseConnectionCtxArgs']]]]):
        pulumi.set(self, "client_metadata_request_use_connection_ctxes", value)

    @property
    @pulumi.getter(name="clientPrefetchThreads")
    def client_prefetch_threads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientPrefetchThreadArgs']]]]:
        return pulumi.get(self, "client_prefetch_threads")

    @client_prefetch_threads.setter
    def client_prefetch_threads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientPrefetchThreadArgs']]]]):
        pulumi.set(self, "client_prefetch_threads", value)

    @property
    @pulumi.getter(name="clientResultChunkSizes")
    def client_result_chunk_sizes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientResultChunkSizeArgs']]]]:
        return pulumi.get(self, "client_result_chunk_sizes")

    @client_result_chunk_sizes.setter
    def client_result_chunk_sizes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientResultChunkSizeArgs']]]]):
        pulumi.set(self, "client_result_chunk_sizes", value)

    @property
    @pulumi.getter(name="clientResultColumnCaseInsensitives")
    def client_result_column_case_insensitives(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientResultColumnCaseInsensitiveArgs']]]]:
        return pulumi.get(self, "client_result_column_case_insensitives")

    @client_result_column_case_insensitives.setter
    def client_result_column_case_insensitives(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientResultColumnCaseInsensitiveArgs']]]]):
        pulumi.set(self, "client_result_column_case_insensitives", value)

    @property
    @pulumi.getter(name="clientSessionKeepAliveHeartbeatFrequencies")
    def client_session_keep_alive_heartbeat_frequencies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientSessionKeepAliveHeartbeatFrequencyArgs']]]]:
        return pulumi.get(self, "client_session_keep_alive_heartbeat_frequencies")

    @client_session_keep_alive_heartbeat_frequencies.setter
    def client_session_keep_alive_heartbeat_frequencies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientSessionKeepAliveHeartbeatFrequencyArgs']]]]):
        pulumi.set(self, "client_session_keep_alive_heartbeat_frequencies", value)

    @property
    @pulumi.getter(name="clientSessionKeepAlives")
    def client_session_keep_alives(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientSessionKeepAlifeArgs']]]]:
        return pulumi.get(self, "client_session_keep_alives")

    @client_session_keep_alives.setter
    def client_session_keep_alives(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientSessionKeepAlifeArgs']]]]):
        pulumi.set(self, "client_session_keep_alives", value)

    @property
    @pulumi.getter(name="clientTimestampTypeMappings")
    def client_timestamp_type_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientTimestampTypeMappingArgs']]]]:
        return pulumi.get(self, "client_timestamp_type_mappings")

    @client_timestamp_type_mappings.setter
    def client_timestamp_type_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterClientTimestampTypeMappingArgs']]]]):
        pulumi.set(self, "client_timestamp_type_mappings", value)

    @property
    @pulumi.getter(name="dateInputFormats")
    def date_input_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterDateInputFormatArgs']]]]:
        return pulumi.get(self, "date_input_formats")

    @date_input_formats.setter
    def date_input_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterDateInputFormatArgs']]]]):
        pulumi.set(self, "date_input_formats", value)

    @property
    @pulumi.getter(name="dateOutputFormats")
    def date_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterDateOutputFormatArgs']]]]:
        return pulumi.get(self, "date_output_formats")

    @date_output_formats.setter
    def date_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterDateOutputFormatArgs']]]]):
        pulumi.set(self, "date_output_formats", value)

    @property
    @pulumi.getter(name="enableUnloadPhysicalTypeOptimizations")
    def enable_unload_physical_type_optimizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterEnableUnloadPhysicalTypeOptimizationArgs']]]]:
        return pulumi.get(self, "enable_unload_physical_type_optimizations")

    @enable_unload_physical_type_optimizations.setter
    def enable_unload_physical_type_optimizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterEnableUnloadPhysicalTypeOptimizationArgs']]]]):
        pulumi.set(self, "enable_unload_physical_type_optimizations", value)

    @property
    @pulumi.getter(name="enableUnredactedQuerySyntaxErrors")
    def enable_unredacted_query_syntax_errors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterEnableUnredactedQuerySyntaxErrorArgs']]]]:
        return pulumi.get(self, "enable_unredacted_query_syntax_errors")

    @enable_unredacted_query_syntax_errors.setter
    def enable_unredacted_query_syntax_errors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterEnableUnredactedQuerySyntaxErrorArgs']]]]):
        pulumi.set(self, "enable_unredacted_query_syntax_errors", value)

    @property
    @pulumi.getter(name="errorOnNondeterministicMerges")
    def error_on_nondeterministic_merges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterErrorOnNondeterministicMergeArgs']]]]:
        return pulumi.get(self, "error_on_nondeterministic_merges")

    @error_on_nondeterministic_merges.setter
    def error_on_nondeterministic_merges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterErrorOnNondeterministicMergeArgs']]]]):
        pulumi.set(self, "error_on_nondeterministic_merges", value)

    @property
    @pulumi.getter(name="errorOnNondeterministicUpdates")
    def error_on_nondeterministic_updates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterErrorOnNondeterministicUpdateArgs']]]]:
        return pulumi.get(self, "error_on_nondeterministic_updates")

    @error_on_nondeterministic_updates.setter
    def error_on_nondeterministic_updates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterErrorOnNondeterministicUpdateArgs']]]]):
        pulumi.set(self, "error_on_nondeterministic_updates", value)

    @property
    @pulumi.getter(name="geographyOutputFormats")
    def geography_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterGeographyOutputFormatArgs']]]]:
        return pulumi.get(self, "geography_output_formats")

    @geography_output_formats.setter
    def geography_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterGeographyOutputFormatArgs']]]]):
        pulumi.set(self, "geography_output_formats", value)

    @property
    @pulumi.getter(name="geometryOutputFormats")
    def geometry_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterGeometryOutputFormatArgs']]]]:
        return pulumi.get(self, "geometry_output_formats")

    @geometry_output_formats.setter
    def geometry_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterGeometryOutputFormatArgs']]]]):
        pulumi.set(self, "geometry_output_formats", value)

    @property
    @pulumi.getter(name="jdbcTreatDecimalAsInts")
    def jdbc_treat_decimal_as_ints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterJdbcTreatDecimalAsIntArgs']]]]:
        return pulumi.get(self, "jdbc_treat_decimal_as_ints")

    @jdbc_treat_decimal_as_ints.setter
    def jdbc_treat_decimal_as_ints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterJdbcTreatDecimalAsIntArgs']]]]):
        pulumi.set(self, "jdbc_treat_decimal_as_ints", value)

    @property
    @pulumi.getter(name="jdbcTreatTimestampNtzAsUtcs")
    def jdbc_treat_timestamp_ntz_as_utcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterJdbcTreatTimestampNtzAsUtcArgs']]]]:
        return pulumi.get(self, "jdbc_treat_timestamp_ntz_as_utcs")

    @jdbc_treat_timestamp_ntz_as_utcs.setter
    def jdbc_treat_timestamp_ntz_as_utcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterJdbcTreatTimestampNtzAsUtcArgs']]]]):
        pulumi.set(self, "jdbc_treat_timestamp_ntz_as_utcs", value)

    @property
    @pulumi.getter(name="jdbcUseSessionTimezones")
    def jdbc_use_session_timezones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterJdbcUseSessionTimezoneArgs']]]]:
        return pulumi.get(self, "jdbc_use_session_timezones")

    @jdbc_use_session_timezones.setter
    def jdbc_use_session_timezones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterJdbcUseSessionTimezoneArgs']]]]):
        pulumi.set(self, "jdbc_use_session_timezones", value)

    @property
    @pulumi.getter(name="jsonIndents")
    def json_indents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterJsonIndentArgs']]]]:
        return pulumi.get(self, "json_indents")

    @json_indents.setter
    def json_indents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterJsonIndentArgs']]]]):
        pulumi.set(self, "json_indents", value)

    @property
    @pulumi.getter(name="lockTimeouts")
    def lock_timeouts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterLockTimeoutArgs']]]]:
        return pulumi.get(self, "lock_timeouts")

    @lock_timeouts.setter
    def lock_timeouts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterLockTimeoutArgs']]]]):
        pulumi.set(self, "lock_timeouts", value)

    @property
    @pulumi.getter(name="logLevels")
    def log_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterLogLevelArgs']]]]:
        return pulumi.get(self, "log_levels")

    @log_levels.setter
    def log_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterLogLevelArgs']]]]):
        pulumi.set(self, "log_levels", value)

    @property
    @pulumi.getter(name="multiStatementCounts")
    def multi_statement_counts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterMultiStatementCountArgs']]]]:
        return pulumi.get(self, "multi_statement_counts")

    @multi_statement_counts.setter
    def multi_statement_counts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterMultiStatementCountArgs']]]]):
        pulumi.set(self, "multi_statement_counts", value)

    @property
    @pulumi.getter(name="networkPolicies")
    def network_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterNetworkPolicyArgs']]]]:
        return pulumi.get(self, "network_policies")

    @network_policies.setter
    def network_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterNetworkPolicyArgs']]]]):
        pulumi.set(self, "network_policies", value)

    @property
    @pulumi.getter(name="noorderSequenceAsDefaults")
    def noorder_sequence_as_defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterNoorderSequenceAsDefaultArgs']]]]:
        return pulumi.get(self, "noorder_sequence_as_defaults")

    @noorder_sequence_as_defaults.setter
    def noorder_sequence_as_defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterNoorderSequenceAsDefaultArgs']]]]):
        pulumi.set(self, "noorder_sequence_as_defaults", value)

    @property
    @pulumi.getter(name="odbcTreatDecimalAsInts")
    def odbc_treat_decimal_as_ints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterOdbcTreatDecimalAsIntArgs']]]]:
        return pulumi.get(self, "odbc_treat_decimal_as_ints")

    @odbc_treat_decimal_as_ints.setter
    def odbc_treat_decimal_as_ints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterOdbcTreatDecimalAsIntArgs']]]]):
        pulumi.set(self, "odbc_treat_decimal_as_ints", value)

    @property
    @pulumi.getter(name="preventUnloadToInternalStages")
    def prevent_unload_to_internal_stages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterPreventUnloadToInternalStageArgs']]]]:
        return pulumi.get(self, "prevent_unload_to_internal_stages")

    @prevent_unload_to_internal_stages.setter
    def prevent_unload_to_internal_stages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterPreventUnloadToInternalStageArgs']]]]):
        pulumi.set(self, "prevent_unload_to_internal_stages", value)

    @property
    @pulumi.getter(name="queryTags")
    def query_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterQueryTagArgs']]]]:
        return pulumi.get(self, "query_tags")

    @query_tags.setter
    def query_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterQueryTagArgs']]]]):
        pulumi.set(self, "query_tags", value)

    @property
    @pulumi.getter(name="quotedIdentifiersIgnoreCases")
    def quoted_identifiers_ignore_cases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterQuotedIdentifiersIgnoreCaseArgs']]]]:
        return pulumi.get(self, "quoted_identifiers_ignore_cases")

    @quoted_identifiers_ignore_cases.setter
    def quoted_identifiers_ignore_cases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterQuotedIdentifiersIgnoreCaseArgs']]]]):
        pulumi.set(self, "quoted_identifiers_ignore_cases", value)

    @property
    @pulumi.getter(name="rowsPerResultsets")
    def rows_per_resultsets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterRowsPerResultsetArgs']]]]:
        return pulumi.get(self, "rows_per_resultsets")

    @rows_per_resultsets.setter
    def rows_per_resultsets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterRowsPerResultsetArgs']]]]):
        pulumi.set(self, "rows_per_resultsets", value)

    @property
    @pulumi.getter(name="s3StageVpceDnsNames")
    def s3_stage_vpce_dns_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterS3StageVpceDnsNameArgs']]]]:
        return pulumi.get(self, "s3_stage_vpce_dns_names")

    @s3_stage_vpce_dns_names.setter
    def s3_stage_vpce_dns_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterS3StageVpceDnsNameArgs']]]]):
        pulumi.set(self, "s3_stage_vpce_dns_names", value)

    @property
    @pulumi.getter(name="searchPaths")
    def search_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterSearchPathArgs']]]]:
        return pulumi.get(self, "search_paths")

    @search_paths.setter
    def search_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterSearchPathArgs']]]]):
        pulumi.set(self, "search_paths", value)

    @property
    @pulumi.getter(name="simulatedDataSharingConsumers")
    def simulated_data_sharing_consumers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterSimulatedDataSharingConsumerArgs']]]]:
        return pulumi.get(self, "simulated_data_sharing_consumers")

    @simulated_data_sharing_consumers.setter
    def simulated_data_sharing_consumers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterSimulatedDataSharingConsumerArgs']]]]):
        pulumi.set(self, "simulated_data_sharing_consumers", value)

    @property
    @pulumi.getter(name="statementQueuedTimeoutInSeconds")
    def statement_queued_timeout_in_seconds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterStatementQueuedTimeoutInSecondArgs']]]]:
        return pulumi.get(self, "statement_queued_timeout_in_seconds")

    @statement_queued_timeout_in_seconds.setter
    def statement_queued_timeout_in_seconds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterStatementQueuedTimeoutInSecondArgs']]]]):
        pulumi.set(self, "statement_queued_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="statementTimeoutInSeconds")
    def statement_timeout_in_seconds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterStatementTimeoutInSecondArgs']]]]:
        return pulumi.get(self, "statement_timeout_in_seconds")

    @statement_timeout_in_seconds.setter
    def statement_timeout_in_seconds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterStatementTimeoutInSecondArgs']]]]):
        pulumi.set(self, "statement_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="strictJsonOutputs")
    def strict_json_outputs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterStrictJsonOutputArgs']]]]:
        return pulumi.get(self, "strict_json_outputs")

    @strict_json_outputs.setter
    def strict_json_outputs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterStrictJsonOutputArgs']]]]):
        pulumi.set(self, "strict_json_outputs", value)

    @property
    @pulumi.getter(name="timeInputFormats")
    def time_input_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimeInputFormatArgs']]]]:
        return pulumi.get(self, "time_input_formats")

    @time_input_formats.setter
    def time_input_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimeInputFormatArgs']]]]):
        pulumi.set(self, "time_input_formats", value)

    @property
    @pulumi.getter(name="timeOutputFormats")
    def time_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimeOutputFormatArgs']]]]:
        return pulumi.get(self, "time_output_formats")

    @time_output_formats.setter
    def time_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimeOutputFormatArgs']]]]):
        pulumi.set(self, "time_output_formats", value)

    @property
    @pulumi.getter(name="timestampDayIsAlways24hs")
    def timestamp_day_is_always24hs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampDayIsAlways24hArgs']]]]:
        return pulumi.get(self, "timestamp_day_is_always24hs")

    @timestamp_day_is_always24hs.setter
    def timestamp_day_is_always24hs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampDayIsAlways24hArgs']]]]):
        pulumi.set(self, "timestamp_day_is_always24hs", value)

    @property
    @pulumi.getter(name="timestampInputFormats")
    def timestamp_input_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampInputFormatArgs']]]]:
        return pulumi.get(self, "timestamp_input_formats")

    @timestamp_input_formats.setter
    def timestamp_input_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampInputFormatArgs']]]]):
        pulumi.set(self, "timestamp_input_formats", value)

    @property
    @pulumi.getter(name="timestampLtzOutputFormats")
    def timestamp_ltz_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampLtzOutputFormatArgs']]]]:
        return pulumi.get(self, "timestamp_ltz_output_formats")

    @timestamp_ltz_output_formats.setter
    def timestamp_ltz_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampLtzOutputFormatArgs']]]]):
        pulumi.set(self, "timestamp_ltz_output_formats", value)

    @property
    @pulumi.getter(name="timestampNtzOutputFormats")
    def timestamp_ntz_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampNtzOutputFormatArgs']]]]:
        return pulumi.get(self, "timestamp_ntz_output_formats")

    @timestamp_ntz_output_formats.setter
    def timestamp_ntz_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampNtzOutputFormatArgs']]]]):
        pulumi.set(self, "timestamp_ntz_output_formats", value)

    @property
    @pulumi.getter(name="timestampOutputFormats")
    def timestamp_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampOutputFormatArgs']]]]:
        return pulumi.get(self, "timestamp_output_formats")

    @timestamp_output_formats.setter
    def timestamp_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampOutputFormatArgs']]]]):
        pulumi.set(self, "timestamp_output_formats", value)

    @property
    @pulumi.getter(name="timestampTypeMappings")
    def timestamp_type_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampTypeMappingArgs']]]]:
        return pulumi.get(self, "timestamp_type_mappings")

    @timestamp_type_mappings.setter
    def timestamp_type_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampTypeMappingArgs']]]]):
        pulumi.set(self, "timestamp_type_mappings", value)

    @property
    @pulumi.getter(name="timestampTzOutputFormats")
    def timestamp_tz_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampTzOutputFormatArgs']]]]:
        return pulumi.get(self, "timestamp_tz_output_formats")

    @timestamp_tz_output_formats.setter
    def timestamp_tz_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimestampTzOutputFormatArgs']]]]):
        pulumi.set(self, "timestamp_tz_output_formats", value)

    @property
    @pulumi.getter
    def timezones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimezoneArgs']]]]:
        return pulumi.get(self, "timezones")

    @timezones.setter
    def timezones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTimezoneArgs']]]]):
        pulumi.set(self, "timezones", value)

    @property
    @pulumi.getter(name="traceLevels")
    def trace_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTraceLevelArgs']]]]:
        return pulumi.get(self, "trace_levels")

    @trace_levels.setter
    def trace_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTraceLevelArgs']]]]):
        pulumi.set(self, "trace_levels", value)

    @property
    @pulumi.getter(name="transactionAbortOnErrors")
    def transaction_abort_on_errors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTransactionAbortOnErrorArgs']]]]:
        return pulumi.get(self, "transaction_abort_on_errors")

    @transaction_abort_on_errors.setter
    def transaction_abort_on_errors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTransactionAbortOnErrorArgs']]]]):
        pulumi.set(self, "transaction_abort_on_errors", value)

    @property
    @pulumi.getter(name="transactionDefaultIsolationLevels")
    def transaction_default_isolation_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTransactionDefaultIsolationLevelArgs']]]]:
        return pulumi.get(self, "transaction_default_isolation_levels")

    @transaction_default_isolation_levels.setter
    def transaction_default_isolation_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTransactionDefaultIsolationLevelArgs']]]]):
        pulumi.set(self, "transaction_default_isolation_levels", value)

    @property
    @pulumi.getter(name="twoDigitCenturyStarts")
    def two_digit_century_starts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTwoDigitCenturyStartArgs']]]]:
        return pulumi.get(self, "two_digit_century_starts")

    @two_digit_century_starts.setter
    def two_digit_century_starts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterTwoDigitCenturyStartArgs']]]]):
        pulumi.set(self, "two_digit_century_starts", value)

    @property
    @pulumi.getter(name="unsupportedDdlActions")
    def unsupported_ddl_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterUnsupportedDdlActionArgs']]]]:
        return pulumi.get(self, "unsupported_ddl_actions")

    @unsupported_ddl_actions.setter
    def unsupported_ddl_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterUnsupportedDdlActionArgs']]]]):
        pulumi.set(self, "unsupported_ddl_actions", value)

    @property
    @pulumi.getter(name="useCachedResults")
    def use_cached_results(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterUseCachedResultArgs']]]]:
        return pulumi.get(self, "use_cached_results")

    @use_cached_results.setter
    def use_cached_results(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterUseCachedResultArgs']]]]):
        pulumi.set(self, "use_cached_results", value)

    @property
    @pulumi.getter(name="weekOfYearPolicies")
    def week_of_year_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterWeekOfYearPolicyArgs']]]]:
        return pulumi.get(self, "week_of_year_policies")

    @week_of_year_policies.setter
    def week_of_year_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterWeekOfYearPolicyArgs']]]]):
        pulumi.set(self, "week_of_year_policies", value)

    @property
    @pulumi.getter(name="weekStarts")
    def week_starts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterWeekStartArgs']]]]:
        return pulumi.get(self, "week_starts")

    @week_starts.setter
    def week_starts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceUserParameterWeekStartArgs']]]]):
        pulumi.set(self, "week_starts", value)


if not MYPY:
    class LegacyServiceUserParameterAbortDetachedQueryArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterAbortDetachedQueryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterAbortDetachedQueryArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterAutocommitArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterAutocommitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterAutocommitArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterBinaryInputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterBinaryInputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterBinaryInputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterBinaryOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterBinaryOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterBinaryOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterClientMemoryLimitArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterClientMemoryLimitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterClientMemoryLimitArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterClientMetadataRequestUseConnectionCtxArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterClientMetadataRequestUseConnectionCtxArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterClientMetadataRequestUseConnectionCtxArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterClientPrefetchThreadArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterClientPrefetchThreadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterClientPrefetchThreadArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterClientResultChunkSizeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterClientResultChunkSizeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterClientResultChunkSizeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterClientResultColumnCaseInsensitiveArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterClientResultColumnCaseInsensitiveArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterClientResultColumnCaseInsensitiveArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterClientSessionKeepAlifeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterClientSessionKeepAlifeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterClientSessionKeepAlifeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterClientSessionKeepAliveHeartbeatFrequencyArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterClientSessionKeepAliveHeartbeatFrequencyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterClientSessionKeepAliveHeartbeatFrequencyArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterClientTimestampTypeMappingArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterClientTimestampTypeMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterClientTimestampTypeMappingArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterDateInputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterDateInputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterDateInputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterDateOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterDateOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterDateOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterEnableUnloadPhysicalTypeOptimizationArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterEnableUnloadPhysicalTypeOptimizationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterEnableUnloadPhysicalTypeOptimizationArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterEnableUnredactedQuerySyntaxErrorArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterEnableUnredactedQuerySyntaxErrorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterEnableUnredactedQuerySyntaxErrorArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterErrorOnNondeterministicMergeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterErrorOnNondeterministicMergeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterErrorOnNondeterministicMergeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterErrorOnNondeterministicUpdateArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterErrorOnNondeterministicUpdateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterErrorOnNondeterministicUpdateArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterGeographyOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterGeographyOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterGeographyOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterGeometryOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterGeometryOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterGeometryOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterJdbcTreatDecimalAsIntArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterJdbcTreatDecimalAsIntArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterJdbcTreatDecimalAsIntArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterJdbcTreatTimestampNtzAsUtcArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterJdbcTreatTimestampNtzAsUtcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterJdbcTreatTimestampNtzAsUtcArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterJdbcUseSessionTimezoneArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterJdbcUseSessionTimezoneArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterJdbcUseSessionTimezoneArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterJsonIndentArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterJsonIndentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterJsonIndentArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterLockTimeoutArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterLockTimeoutArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterLockTimeoutArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterLogLevelArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterLogLevelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterLogLevelArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterMultiStatementCountArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterMultiStatementCountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterMultiStatementCountArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterNetworkPolicyArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterNetworkPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterNetworkPolicyArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterNoorderSequenceAsDefaultArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterNoorderSequenceAsDefaultArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterNoorderSequenceAsDefaultArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterOdbcTreatDecimalAsIntArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterOdbcTreatDecimalAsIntArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterOdbcTreatDecimalAsIntArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterPreventUnloadToInternalStageArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterPreventUnloadToInternalStageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterPreventUnloadToInternalStageArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterQueryTagArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterQueryTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterQueryTagArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterQuotedIdentifiersIgnoreCaseArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterQuotedIdentifiersIgnoreCaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterQuotedIdentifiersIgnoreCaseArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterRowsPerResultsetArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterRowsPerResultsetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterRowsPerResultsetArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterS3StageVpceDnsNameArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterS3StageVpceDnsNameArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterS3StageVpceDnsNameArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterSearchPathArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterSearchPathArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterSearchPathArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterSimulatedDataSharingConsumerArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterSimulatedDataSharingConsumerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterSimulatedDataSharingConsumerArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterStatementQueuedTimeoutInSecondArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterStatementQueuedTimeoutInSecondArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterStatementQueuedTimeoutInSecondArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterStatementTimeoutInSecondArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterStatementTimeoutInSecondArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterStatementTimeoutInSecondArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterStrictJsonOutputArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterStrictJsonOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterStrictJsonOutputArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterTimeInputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterTimeInputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterTimeInputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterTimeOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterTimeOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterTimeOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterTimestampDayIsAlways24hArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterTimestampDayIsAlways24hArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterTimestampDayIsAlways24hArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterTimestampInputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterTimestampInputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterTimestampInputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterTimestampLtzOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterTimestampLtzOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterTimestampLtzOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterTimestampNtzOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterTimestampNtzOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterTimestampNtzOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterTimestampOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterTimestampOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterTimestampOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterTimestampTypeMappingArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterTimestampTypeMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterTimestampTypeMappingArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterTimestampTzOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterTimestampTzOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterTimestampTzOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterTimezoneArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterTimezoneArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterTimezoneArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterTraceLevelArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterTraceLevelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterTraceLevelArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterTransactionAbortOnErrorArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterTransactionAbortOnErrorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterTransactionAbortOnErrorArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterTransactionDefaultIsolationLevelArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterTransactionDefaultIsolationLevelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterTransactionDefaultIsolationLevelArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterTwoDigitCenturyStartArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterTwoDigitCenturyStartArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterTwoDigitCenturyStartArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterUnsupportedDdlActionArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterUnsupportedDdlActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterUnsupportedDdlActionArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterUseCachedResultArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterUseCachedResultArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterUseCachedResultArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterWeekOfYearPolicyArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterWeekOfYearPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterWeekOfYearPolicyArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserParameterWeekStartArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserParameterWeekStartArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserParameterWeekStartArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LegacyServiceUserShowOutputArgsDict(TypedDict):
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        days_to_expiry: NotRequired[pulumi.Input[str]]
        default_namespace: NotRequired[pulumi.Input[str]]
        default_role: NotRequired[pulumi.Input[str]]
        default_secondary_roles: NotRequired[pulumi.Input[str]]
        default_warehouse: NotRequired[pulumi.Input[str]]
        disabled: NotRequired[pulumi.Input[bool]]
        display_name: NotRequired[pulumi.Input[str]]
        email: NotRequired[pulumi.Input[str]]
        expires_at_time: NotRequired[pulumi.Input[str]]
        ext_authn_duo: NotRequired[pulumi.Input[bool]]
        ext_authn_uid: NotRequired[pulumi.Input[str]]
        first_name: NotRequired[pulumi.Input[str]]
        has_mfa: NotRequired[pulumi.Input[bool]]
        has_password: NotRequired[pulumi.Input[bool]]
        has_rsa_public_key: NotRequired[pulumi.Input[bool]]
        last_name: NotRequired[pulumi.Input[str]]
        last_success_login: NotRequired[pulumi.Input[str]]
        locked_until_time: NotRequired[pulumi.Input[str]]
        login_name: NotRequired[pulumi.Input[str]]
        mins_to_bypass_mfa: NotRequired[pulumi.Input[str]]
        mins_to_unlock: NotRequired[pulumi.Input[str]]
        must_change_password: NotRequired[pulumi.Input[bool]]
        name: NotRequired[pulumi.Input[str]]
        owner: NotRequired[pulumi.Input[str]]
        snowflake_lock: NotRequired[pulumi.Input[bool]]
        type: NotRequired[pulumi.Input[str]]
elif False:
    LegacyServiceUserShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegacyServiceUserShowOutputArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 days_to_expiry: Optional[pulumi.Input[str]] = None,
                 default_namespace: Optional[pulumi.Input[str]] = None,
                 default_role: Optional[pulumi.Input[str]] = None,
                 default_secondary_roles: Optional[pulumi.Input[str]] = None,
                 default_warehouse: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 expires_at_time: Optional[pulumi.Input[str]] = None,
                 ext_authn_duo: Optional[pulumi.Input[bool]] = None,
                 ext_authn_uid: Optional[pulumi.Input[str]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 has_mfa: Optional[pulumi.Input[bool]] = None,
                 has_password: Optional[pulumi.Input[bool]] = None,
                 has_rsa_public_key: Optional[pulumi.Input[bool]] = None,
                 last_name: Optional[pulumi.Input[str]] = None,
                 last_success_login: Optional[pulumi.Input[str]] = None,
                 locked_until_time: Optional[pulumi.Input[str]] = None,
                 login_name: Optional[pulumi.Input[str]] = None,
                 mins_to_bypass_mfa: Optional[pulumi.Input[str]] = None,
                 mins_to_unlock: Optional[pulumi.Input[str]] = None,
                 must_change_password: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 snowflake_lock: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if days_to_expiry is not None:
            pulumi.set(__self__, "days_to_expiry", days_to_expiry)
        if default_namespace is not None:
            pulumi.set(__self__, "default_namespace", default_namespace)
        if default_role is not None:
            pulumi.set(__self__, "default_role", default_role)
        if default_secondary_roles is not None:
            pulumi.set(__self__, "default_secondary_roles", default_secondary_roles)
        if default_warehouse is not None:
            pulumi.set(__self__, "default_warehouse", default_warehouse)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if expires_at_time is not None:
            pulumi.set(__self__, "expires_at_time", expires_at_time)
        if ext_authn_duo is not None:
            pulumi.set(__self__, "ext_authn_duo", ext_authn_duo)
        if ext_authn_uid is not None:
            pulumi.set(__self__, "ext_authn_uid", ext_authn_uid)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if has_mfa is not None:
            pulumi.set(__self__, "has_mfa", has_mfa)
        if has_password is not None:
            pulumi.set(__self__, "has_password", has_password)
        if has_rsa_public_key is not None:
            pulumi.set(__self__, "has_rsa_public_key", has_rsa_public_key)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if last_success_login is not None:
            pulumi.set(__self__, "last_success_login", last_success_login)
        if locked_until_time is not None:
            pulumi.set(__self__, "locked_until_time", locked_until_time)
        if login_name is not None:
            pulumi.set(__self__, "login_name", login_name)
        if mins_to_bypass_mfa is not None:
            pulumi.set(__self__, "mins_to_bypass_mfa", mins_to_bypass_mfa)
        if mins_to_unlock is not None:
            pulumi.set(__self__, "mins_to_unlock", mins_to_unlock)
        if must_change_password is not None:
            pulumi.set(__self__, "must_change_password", must_change_password)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if snowflake_lock is not None:
            pulumi.set(__self__, "snowflake_lock", snowflake_lock)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="daysToExpiry")
    def days_to_expiry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "days_to_expiry")

    @days_to_expiry.setter
    def days_to_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "days_to_expiry", value)

    @property
    @pulumi.getter(name="defaultNamespace")
    def default_namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_namespace")

    @default_namespace.setter
    def default_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_namespace", value)

    @property
    @pulumi.getter(name="defaultRole")
    def default_role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_role")

    @default_role.setter
    def default_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_role", value)

    @property
    @pulumi.getter(name="defaultSecondaryRoles")
    def default_secondary_roles(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_secondary_roles")

    @default_secondary_roles.setter
    def default_secondary_roles(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_secondary_roles", value)

    @property
    @pulumi.getter(name="defaultWarehouse")
    def default_warehouse(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_warehouse")

    @default_warehouse.setter
    def default_warehouse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_warehouse", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="expiresAtTime")
    def expires_at_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expires_at_time")

    @expires_at_time.setter
    def expires_at_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires_at_time", value)

    @property
    @pulumi.getter(name="extAuthnDuo")
    def ext_authn_duo(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ext_authn_duo")

    @ext_authn_duo.setter
    def ext_authn_duo(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ext_authn_duo", value)

    @property
    @pulumi.getter(name="extAuthnUid")
    def ext_authn_uid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ext_authn_uid")

    @ext_authn_uid.setter
    def ext_authn_uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ext_authn_uid", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="hasMfa")
    def has_mfa(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "has_mfa")

    @has_mfa.setter
    def has_mfa(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_mfa", value)

    @property
    @pulumi.getter(name="hasPassword")
    def has_password(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "has_password")

    @has_password.setter
    def has_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_password", value)

    @property
    @pulumi.getter(name="hasRsaPublicKey")
    def has_rsa_public_key(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "has_rsa_public_key")

    @has_rsa_public_key.setter
    def has_rsa_public_key(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_rsa_public_key", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter(name="lastSuccessLogin")
    def last_success_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_success_login")

    @last_success_login.setter
    def last_success_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_success_login", value)

    @property
    @pulumi.getter(name="lockedUntilTime")
    def locked_until_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locked_until_time")

    @locked_until_time.setter
    def locked_until_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locked_until_time", value)

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_name")

    @login_name.setter
    def login_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_name", value)

    @property
    @pulumi.getter(name="minsToBypassMfa")
    def mins_to_bypass_mfa(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mins_to_bypass_mfa")

    @mins_to_bypass_mfa.setter
    def mins_to_bypass_mfa(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mins_to_bypass_mfa", value)

    @property
    @pulumi.getter(name="minsToUnlock")
    def mins_to_unlock(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mins_to_unlock")

    @mins_to_unlock.setter
    def mins_to_unlock(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mins_to_unlock", value)

    @property
    @pulumi.getter(name="mustChangePassword")
    def must_change_password(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "must_change_password")

    @must_change_password.setter
    def must_change_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "must_change_password", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="snowflakeLock")
    def snowflake_lock(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "snowflake_lock")

    @snowflake_lock.setter
    def snowflake_lock(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "snowflake_lock", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class MaskingPolicyArgumentArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The argument name
        """
        type: pulumi.Input[str]
        """
        The argument type. VECTOR data types are not yet supported. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
        """
elif False:
    MaskingPolicyArgumentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MaskingPolicyArgumentArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The argument name
        :param pulumi.Input[str] type: The argument type. VECTOR data types are not yet supported. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The argument name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The argument type. VECTOR data types are not yet supported. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class MaskingPolicyDescribeOutputArgsDict(TypedDict):
        body: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        return_type: NotRequired[pulumi.Input[str]]
        signatures: NotRequired[pulumi.Input[Sequence[pulumi.Input['MaskingPolicyDescribeOutputSignatureArgsDict']]]]
elif False:
    MaskingPolicyDescribeOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MaskingPolicyDescribeOutputArgs:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 return_type: Optional[pulumi.Input[str]] = None,
                 signatures: Optional[pulumi.Input[Sequence[pulumi.Input['MaskingPolicyDescribeOutputSignatureArgs']]]] = None):
        if body is not None:
            pulumi.set(__self__, "body", body)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if return_type is not None:
            pulumi.set(__self__, "return_type", return_type)
        if signatures is not None:
            pulumi.set(__self__, "signatures", signatures)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="returnType")
    def return_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "return_type")

    @return_type.setter
    def return_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "return_type", value)

    @property
    @pulumi.getter
    def signatures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MaskingPolicyDescribeOutputSignatureArgs']]]]:
        return pulumi.get(self, "signatures")

    @signatures.setter
    def signatures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MaskingPolicyDescribeOutputSignatureArgs']]]]):
        pulumi.set(self, "signatures", value)


if not MYPY:
    class MaskingPolicyDescribeOutputSignatureArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
elif False:
    MaskingPolicyDescribeOutputSignatureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MaskingPolicyDescribeOutputSignatureArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class MaskingPolicyShowOutputArgsDict(TypedDict):
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        exempt_other_policies: NotRequired[pulumi.Input[bool]]
        kind: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        owner: NotRequired[pulumi.Input[str]]
        owner_role_type: NotRequired[pulumi.Input[str]]
        schema_name: NotRequired[pulumi.Input[str]]
elif False:
    MaskingPolicyShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MaskingPolicyShowOutputArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 exempt_other_policies: Optional[pulumi.Input[bool]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 owner_role_type: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if exempt_other_policies is not None:
            pulumi.set(__self__, "exempt_other_policies", exempt_other_policies)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="exemptOtherPolicies")
    def exempt_other_policies(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "exempt_other_policies")

    @exempt_other_policies.setter
    def exempt_other_policies(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exempt_other_policies", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_role_type")

    @owner_role_type.setter
    def owner_role_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_role_type", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


if not MYPY:
    class MaterializedViewTagArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Tag name, e.g. department.
        """
        value: pulumi.Input[str]
        """
        Tag value, e.g. marketing_info.
        """
        database: NotRequired[pulumi.Input[str]]
        """
        Name of the database that the tag was created in.
        """
        schema: NotRequired[pulumi.Input[str]]
        """
        Name of the schema that the tag was created in.
        """
elif False:
    MaterializedViewTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MaterializedViewTagArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 database: Optional[pulumi.Input[str]] = None,
                 schema: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name, e.g. department.
        :param pulumi.Input[str] value: Tag value, e.g. marketing_info.
        :param pulumi.Input[str] database: Name of the database that the tag was created in.
        :param pulumi.Input[str] schema: Name of the schema that the tag was created in.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Tag name, e.g. department.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Tag value, e.g. marketing_info.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the database that the tag was created in.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the schema that the tag was created in.
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema", value)


if not MYPY:
    class NetworkPolicyDescribeOutputArgsDict(TypedDict):
        allowed_ip_list: NotRequired[pulumi.Input[str]]
        allowed_network_rule_list: NotRequired[pulumi.Input[str]]
        blocked_ip_list: NotRequired[pulumi.Input[str]]
        blocked_network_rule_list: NotRequired[pulumi.Input[str]]
elif False:
    NetworkPolicyDescribeOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkPolicyDescribeOutputArgs:
    def __init__(__self__, *,
                 allowed_ip_list: Optional[pulumi.Input[str]] = None,
                 allowed_network_rule_list: Optional[pulumi.Input[str]] = None,
                 blocked_ip_list: Optional[pulumi.Input[str]] = None,
                 blocked_network_rule_list: Optional[pulumi.Input[str]] = None):
        if allowed_ip_list is not None:
            pulumi.set(__self__, "allowed_ip_list", allowed_ip_list)
        if allowed_network_rule_list is not None:
            pulumi.set(__self__, "allowed_network_rule_list", allowed_network_rule_list)
        if blocked_ip_list is not None:
            pulumi.set(__self__, "blocked_ip_list", blocked_ip_list)
        if blocked_network_rule_list is not None:
            pulumi.set(__self__, "blocked_network_rule_list", blocked_network_rule_list)

    @property
    @pulumi.getter(name="allowedIpList")
    def allowed_ip_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowed_ip_list")

    @allowed_ip_list.setter
    def allowed_ip_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowed_ip_list", value)

    @property
    @pulumi.getter(name="allowedNetworkRuleList")
    def allowed_network_rule_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowed_network_rule_list")

    @allowed_network_rule_list.setter
    def allowed_network_rule_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowed_network_rule_list", value)

    @property
    @pulumi.getter(name="blockedIpList")
    def blocked_ip_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "blocked_ip_list")

    @blocked_ip_list.setter
    def blocked_ip_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blocked_ip_list", value)

    @property
    @pulumi.getter(name="blockedNetworkRuleList")
    def blocked_network_rule_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "blocked_network_rule_list")

    @blocked_network_rule_list.setter
    def blocked_network_rule_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blocked_network_rule_list", value)


if not MYPY:
    class NetworkPolicyShowOutputArgsDict(TypedDict):
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        entries_in_allowed_ip_list: NotRequired[pulumi.Input[int]]
        entries_in_allowed_network_rules: NotRequired[pulumi.Input[int]]
        entries_in_blocked_ip_list: NotRequired[pulumi.Input[int]]
        entries_in_blocked_network_rules: NotRequired[pulumi.Input[int]]
        name: NotRequired[pulumi.Input[str]]
elif False:
    NetworkPolicyShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkPolicyShowOutputArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 entries_in_allowed_ip_list: Optional[pulumi.Input[int]] = None,
                 entries_in_allowed_network_rules: Optional[pulumi.Input[int]] = None,
                 entries_in_blocked_ip_list: Optional[pulumi.Input[int]] = None,
                 entries_in_blocked_network_rules: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if entries_in_allowed_ip_list is not None:
            pulumi.set(__self__, "entries_in_allowed_ip_list", entries_in_allowed_ip_list)
        if entries_in_allowed_network_rules is not None:
            pulumi.set(__self__, "entries_in_allowed_network_rules", entries_in_allowed_network_rules)
        if entries_in_blocked_ip_list is not None:
            pulumi.set(__self__, "entries_in_blocked_ip_list", entries_in_blocked_ip_list)
        if entries_in_blocked_network_rules is not None:
            pulumi.set(__self__, "entries_in_blocked_network_rules", entries_in_blocked_network_rules)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="entriesInAllowedIpList")
    def entries_in_allowed_ip_list(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "entries_in_allowed_ip_list")

    @entries_in_allowed_ip_list.setter
    def entries_in_allowed_ip_list(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "entries_in_allowed_ip_list", value)

    @property
    @pulumi.getter(name="entriesInAllowedNetworkRules")
    def entries_in_allowed_network_rules(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "entries_in_allowed_network_rules")

    @entries_in_allowed_network_rules.setter
    def entries_in_allowed_network_rules(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "entries_in_allowed_network_rules", value)

    @property
    @pulumi.getter(name="entriesInBlockedIpList")
    def entries_in_blocked_ip_list(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "entries_in_blocked_ip_list")

    @entries_in_blocked_ip_list.setter
    def entries_in_blocked_ip_list(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "entries_in_blocked_ip_list", value)

    @property
    @pulumi.getter(name="entriesInBlockedNetworkRules")
    def entries_in_blocked_network_rules(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "entries_in_blocked_network_rules")

    @entries_in_blocked_network_rules.setter
    def entries_in_blocked_network_rules(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "entries_in_blocked_network_rules", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class OauthIntegrationForCustomClientsDescribeOutputArgsDict(TypedDict):
        blocked_roles_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputBlockedRolesListArgsDict']]]]
        comments: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputCommentArgsDict']]]]
        enableds: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputEnabledArgsDict']]]]
        network_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputNetworkPolicyArgsDict']]]]
        oauth_allow_non_tls_redirect_uris: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUriArgsDict']]]]
        oauth_allowed_authorization_endpoints: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpointArgsDict']]]]
        oauth_allowed_token_endpoints: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpointArgsDict']]]]
        oauth_authorization_endpoints: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpointArgsDict']]]]
        oauth_client_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthClientIdArgsDict']]]]
        oauth_client_rsa_public_key2_fps: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2FpArgsDict']]]]
        oauth_client_rsa_public_key_fps: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFpArgsDict']]]]
        oauth_client_types: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthClientTypeArgsDict']]]]
        oauth_enforce_pkces: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkceArgsDict']]]]
        oauth_issue_refresh_tokens: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshTokenArgsDict']]]]
        oauth_redirect_uris: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthRedirectUriArgsDict']]]]
        oauth_refresh_token_validities: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidityArgsDict']]]]
        oauth_token_endpoints: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpointArgsDict']]]]
        oauth_use_secondary_roles: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRoleArgsDict']]]]
        pre_authorized_roles_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesListArgsDict']]]]
elif False:
    OauthIntegrationForCustomClientsDescribeOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForCustomClientsDescribeOutputArgs:
    def __init__(__self__, *,
                 blocked_roles_lists: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputBlockedRolesListArgs']]]] = None,
                 comments: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputCommentArgs']]]] = None,
                 enableds: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputEnabledArgs']]]] = None,
                 network_policies: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputNetworkPolicyArgs']]]] = None,
                 oauth_allow_non_tls_redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUriArgs']]]] = None,
                 oauth_allowed_authorization_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpointArgs']]]] = None,
                 oauth_allowed_token_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpointArgs']]]] = None,
                 oauth_authorization_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpointArgs']]]] = None,
                 oauth_client_ids: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthClientIdArgs']]]] = None,
                 oauth_client_rsa_public_key2_fps: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2FpArgs']]]] = None,
                 oauth_client_rsa_public_key_fps: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFpArgs']]]] = None,
                 oauth_client_types: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthClientTypeArgs']]]] = None,
                 oauth_enforce_pkces: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkceArgs']]]] = None,
                 oauth_issue_refresh_tokens: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshTokenArgs']]]] = None,
                 oauth_redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthRedirectUriArgs']]]] = None,
                 oauth_refresh_token_validities: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidityArgs']]]] = None,
                 oauth_token_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpointArgs']]]] = None,
                 oauth_use_secondary_roles: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRoleArgs']]]] = None,
                 pre_authorized_roles_lists: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesListArgs']]]] = None):
        if blocked_roles_lists is not None:
            pulumi.set(__self__, "blocked_roles_lists", blocked_roles_lists)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if enableds is not None:
            pulumi.set(__self__, "enableds", enableds)
        if network_policies is not None:
            pulumi.set(__self__, "network_policies", network_policies)
        if oauth_allow_non_tls_redirect_uris is not None:
            pulumi.set(__self__, "oauth_allow_non_tls_redirect_uris", oauth_allow_non_tls_redirect_uris)
        if oauth_allowed_authorization_endpoints is not None:
            pulumi.set(__self__, "oauth_allowed_authorization_endpoints", oauth_allowed_authorization_endpoints)
        if oauth_allowed_token_endpoints is not None:
            pulumi.set(__self__, "oauth_allowed_token_endpoints", oauth_allowed_token_endpoints)
        if oauth_authorization_endpoints is not None:
            pulumi.set(__self__, "oauth_authorization_endpoints", oauth_authorization_endpoints)
        if oauth_client_ids is not None:
            pulumi.set(__self__, "oauth_client_ids", oauth_client_ids)
        if oauth_client_rsa_public_key2_fps is not None:
            pulumi.set(__self__, "oauth_client_rsa_public_key2_fps", oauth_client_rsa_public_key2_fps)
        if oauth_client_rsa_public_key_fps is not None:
            pulumi.set(__self__, "oauth_client_rsa_public_key_fps", oauth_client_rsa_public_key_fps)
        if oauth_client_types is not None:
            pulumi.set(__self__, "oauth_client_types", oauth_client_types)
        if oauth_enforce_pkces is not None:
            pulumi.set(__self__, "oauth_enforce_pkces", oauth_enforce_pkces)
        if oauth_issue_refresh_tokens is not None:
            pulumi.set(__self__, "oauth_issue_refresh_tokens", oauth_issue_refresh_tokens)
        if oauth_redirect_uris is not None:
            pulumi.set(__self__, "oauth_redirect_uris", oauth_redirect_uris)
        if oauth_refresh_token_validities is not None:
            pulumi.set(__self__, "oauth_refresh_token_validities", oauth_refresh_token_validities)
        if oauth_token_endpoints is not None:
            pulumi.set(__self__, "oauth_token_endpoints", oauth_token_endpoints)
        if oauth_use_secondary_roles is not None:
            pulumi.set(__self__, "oauth_use_secondary_roles", oauth_use_secondary_roles)
        if pre_authorized_roles_lists is not None:
            pulumi.set(__self__, "pre_authorized_roles_lists", pre_authorized_roles_lists)

    @property
    @pulumi.getter(name="blockedRolesLists")
    def blocked_roles_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputBlockedRolesListArgs']]]]:
        return pulumi.get(self, "blocked_roles_lists")

    @blocked_roles_lists.setter
    def blocked_roles_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputBlockedRolesListArgs']]]]):
        pulumi.set(self, "blocked_roles_lists", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputCommentArgs']]]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputCommentArgs']]]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def enableds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputEnabledArgs']]]]:
        return pulumi.get(self, "enableds")

    @enableds.setter
    def enableds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputEnabledArgs']]]]):
        pulumi.set(self, "enableds", value)

    @property
    @pulumi.getter(name="networkPolicies")
    def network_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputNetworkPolicyArgs']]]]:
        return pulumi.get(self, "network_policies")

    @network_policies.setter
    def network_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputNetworkPolicyArgs']]]]):
        pulumi.set(self, "network_policies", value)

    @property
    @pulumi.getter(name="oauthAllowNonTlsRedirectUris")
    def oauth_allow_non_tls_redirect_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUriArgs']]]]:
        return pulumi.get(self, "oauth_allow_non_tls_redirect_uris")

    @oauth_allow_non_tls_redirect_uris.setter
    def oauth_allow_non_tls_redirect_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUriArgs']]]]):
        pulumi.set(self, "oauth_allow_non_tls_redirect_uris", value)

    @property
    @pulumi.getter(name="oauthAllowedAuthorizationEndpoints")
    def oauth_allowed_authorization_endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpointArgs']]]]:
        return pulumi.get(self, "oauth_allowed_authorization_endpoints")

    @oauth_allowed_authorization_endpoints.setter
    def oauth_allowed_authorization_endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpointArgs']]]]):
        pulumi.set(self, "oauth_allowed_authorization_endpoints", value)

    @property
    @pulumi.getter(name="oauthAllowedTokenEndpoints")
    def oauth_allowed_token_endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpointArgs']]]]:
        return pulumi.get(self, "oauth_allowed_token_endpoints")

    @oauth_allowed_token_endpoints.setter
    def oauth_allowed_token_endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpointArgs']]]]):
        pulumi.set(self, "oauth_allowed_token_endpoints", value)

    @property
    @pulumi.getter(name="oauthAuthorizationEndpoints")
    def oauth_authorization_endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpointArgs']]]]:
        return pulumi.get(self, "oauth_authorization_endpoints")

    @oauth_authorization_endpoints.setter
    def oauth_authorization_endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpointArgs']]]]):
        pulumi.set(self, "oauth_authorization_endpoints", value)

    @property
    @pulumi.getter(name="oauthClientIds")
    def oauth_client_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthClientIdArgs']]]]:
        return pulumi.get(self, "oauth_client_ids")

    @oauth_client_ids.setter
    def oauth_client_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthClientIdArgs']]]]):
        pulumi.set(self, "oauth_client_ids", value)

    @property
    @pulumi.getter(name="oauthClientRsaPublicKey2Fps")
    def oauth_client_rsa_public_key2_fps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2FpArgs']]]]:
        return pulumi.get(self, "oauth_client_rsa_public_key2_fps")

    @oauth_client_rsa_public_key2_fps.setter
    def oauth_client_rsa_public_key2_fps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2FpArgs']]]]):
        pulumi.set(self, "oauth_client_rsa_public_key2_fps", value)

    @property
    @pulumi.getter(name="oauthClientRsaPublicKeyFps")
    def oauth_client_rsa_public_key_fps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFpArgs']]]]:
        return pulumi.get(self, "oauth_client_rsa_public_key_fps")

    @oauth_client_rsa_public_key_fps.setter
    def oauth_client_rsa_public_key_fps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFpArgs']]]]):
        pulumi.set(self, "oauth_client_rsa_public_key_fps", value)

    @property
    @pulumi.getter(name="oauthClientTypes")
    def oauth_client_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthClientTypeArgs']]]]:
        return pulumi.get(self, "oauth_client_types")

    @oauth_client_types.setter
    def oauth_client_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthClientTypeArgs']]]]):
        pulumi.set(self, "oauth_client_types", value)

    @property
    @pulumi.getter(name="oauthEnforcePkces")
    def oauth_enforce_pkces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkceArgs']]]]:
        return pulumi.get(self, "oauth_enforce_pkces")

    @oauth_enforce_pkces.setter
    def oauth_enforce_pkces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkceArgs']]]]):
        pulumi.set(self, "oauth_enforce_pkces", value)

    @property
    @pulumi.getter(name="oauthIssueRefreshTokens")
    def oauth_issue_refresh_tokens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshTokenArgs']]]]:
        return pulumi.get(self, "oauth_issue_refresh_tokens")

    @oauth_issue_refresh_tokens.setter
    def oauth_issue_refresh_tokens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshTokenArgs']]]]):
        pulumi.set(self, "oauth_issue_refresh_tokens", value)

    @property
    @pulumi.getter(name="oauthRedirectUris")
    def oauth_redirect_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthRedirectUriArgs']]]]:
        return pulumi.get(self, "oauth_redirect_uris")

    @oauth_redirect_uris.setter
    def oauth_redirect_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthRedirectUriArgs']]]]):
        pulumi.set(self, "oauth_redirect_uris", value)

    @property
    @pulumi.getter(name="oauthRefreshTokenValidities")
    def oauth_refresh_token_validities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidityArgs']]]]:
        return pulumi.get(self, "oauth_refresh_token_validities")

    @oauth_refresh_token_validities.setter
    def oauth_refresh_token_validities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidityArgs']]]]):
        pulumi.set(self, "oauth_refresh_token_validities", value)

    @property
    @pulumi.getter(name="oauthTokenEndpoints")
    def oauth_token_endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpointArgs']]]]:
        return pulumi.get(self, "oauth_token_endpoints")

    @oauth_token_endpoints.setter
    def oauth_token_endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpointArgs']]]]):
        pulumi.set(self, "oauth_token_endpoints", value)

    @property
    @pulumi.getter(name="oauthUseSecondaryRoles")
    def oauth_use_secondary_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRoleArgs']]]]:
        return pulumi.get(self, "oauth_use_secondary_roles")

    @oauth_use_secondary_roles.setter
    def oauth_use_secondary_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRoleArgs']]]]):
        pulumi.set(self, "oauth_use_secondary_roles", value)

    @property
    @pulumi.getter(name="preAuthorizedRolesLists")
    def pre_authorized_roles_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesListArgs']]]]:
        return pulumi.get(self, "pre_authorized_roles_lists")

    @pre_authorized_roles_lists.setter
    def pre_authorized_roles_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesListArgs']]]]):
        pulumi.set(self, "pre_authorized_roles_lists", value)


if not MYPY:
    class OauthIntegrationForCustomClientsDescribeOutputBlockedRolesListArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForCustomClientsDescribeOutputBlockedRolesListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForCustomClientsDescribeOutputBlockedRolesListArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForCustomClientsDescribeOutputCommentArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForCustomClientsDescribeOutputCommentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForCustomClientsDescribeOutputCommentArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForCustomClientsDescribeOutputEnabledArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForCustomClientsDescribeOutputEnabledArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForCustomClientsDescribeOutputEnabledArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForCustomClientsDescribeOutputNetworkPolicyArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForCustomClientsDescribeOutputNetworkPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForCustomClientsDescribeOutputNetworkPolicyArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUriArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUriArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUriArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpointArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpointArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpointArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpointArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpointArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpointArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForCustomClientsDescribeOutputOauthClientIdArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForCustomClientsDescribeOutputOauthClientIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForCustomClientsDescribeOutputOauthClientIdArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2FpArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2FpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2FpArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFpArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFpArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForCustomClientsDescribeOutputOauthClientTypeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForCustomClientsDescribeOutputOauthClientTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForCustomClientsDescribeOutputOauthClientTypeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkceArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkceArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshTokenArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshTokenArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshTokenArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForCustomClientsDescribeOutputOauthRedirectUriArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForCustomClientsDescribeOutputOauthRedirectUriArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForCustomClientsDescribeOutputOauthRedirectUriArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidityArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidityArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpointArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpointArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRoleArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRoleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRoleArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesListArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesListArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForCustomClientsShowOutputArgsDict(TypedDict):
        category: NotRequired[pulumi.Input[str]]
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        enabled: NotRequired[pulumi.Input[bool]]
        integration_type: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForCustomClientsShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForCustomClientsShowOutputArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 integration_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if integration_type is not None:
            pulumi.set(__self__, "integration_type", integration_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class OauthIntegrationForPartnerApplicationsDescribeOutputArgsDict(TypedDict):
        blocked_roles_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesListArgsDict']]]]
        comments: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputCommentArgsDict']]]]
        enableds: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputEnabledArgsDict']]]]
        network_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicyArgsDict']]]]
        oauth_allow_non_tls_redirect_uris: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUriArgsDict']]]]
        oauth_allowed_authorization_endpoints: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpointArgsDict']]]]
        oauth_allowed_token_endpoints: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpointArgsDict']]]]
        oauth_authorization_endpoints: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpointArgsDict']]]]
        oauth_client_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientIdArgsDict']]]]
        oauth_client_rsa_public_key2_fps: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2FpArgsDict']]]]
        oauth_client_rsa_public_key_fps: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFpArgsDict']]]]
        oauth_client_types: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientTypeArgsDict']]]]
        oauth_enforce_pkces: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkceArgsDict']]]]
        oauth_issue_refresh_tokens: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshTokenArgsDict']]]]
        oauth_redirect_uris: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthRedirectUriArgsDict']]]]
        oauth_refresh_token_validities: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidityArgsDict']]]]
        oauth_token_endpoints: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpointArgsDict']]]]
        oauth_use_secondary_roles: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRoleArgsDict']]]]
        pre_authorized_roles_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesListArgsDict']]]]
elif False:
    OauthIntegrationForPartnerApplicationsDescribeOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForPartnerApplicationsDescribeOutputArgs:
    def __init__(__self__, *,
                 blocked_roles_lists: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesListArgs']]]] = None,
                 comments: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputCommentArgs']]]] = None,
                 enableds: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputEnabledArgs']]]] = None,
                 network_policies: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicyArgs']]]] = None,
                 oauth_allow_non_tls_redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUriArgs']]]] = None,
                 oauth_allowed_authorization_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpointArgs']]]] = None,
                 oauth_allowed_token_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpointArgs']]]] = None,
                 oauth_authorization_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpointArgs']]]] = None,
                 oauth_client_ids: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientIdArgs']]]] = None,
                 oauth_client_rsa_public_key2_fps: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2FpArgs']]]] = None,
                 oauth_client_rsa_public_key_fps: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFpArgs']]]] = None,
                 oauth_client_types: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientTypeArgs']]]] = None,
                 oauth_enforce_pkces: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkceArgs']]]] = None,
                 oauth_issue_refresh_tokens: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshTokenArgs']]]] = None,
                 oauth_redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthRedirectUriArgs']]]] = None,
                 oauth_refresh_token_validities: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidityArgs']]]] = None,
                 oauth_token_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpointArgs']]]] = None,
                 oauth_use_secondary_roles: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRoleArgs']]]] = None,
                 pre_authorized_roles_lists: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesListArgs']]]] = None):
        if blocked_roles_lists is not None:
            pulumi.set(__self__, "blocked_roles_lists", blocked_roles_lists)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if enableds is not None:
            pulumi.set(__self__, "enableds", enableds)
        if network_policies is not None:
            pulumi.set(__self__, "network_policies", network_policies)
        if oauth_allow_non_tls_redirect_uris is not None:
            pulumi.set(__self__, "oauth_allow_non_tls_redirect_uris", oauth_allow_non_tls_redirect_uris)
        if oauth_allowed_authorization_endpoints is not None:
            pulumi.set(__self__, "oauth_allowed_authorization_endpoints", oauth_allowed_authorization_endpoints)
        if oauth_allowed_token_endpoints is not None:
            pulumi.set(__self__, "oauth_allowed_token_endpoints", oauth_allowed_token_endpoints)
        if oauth_authorization_endpoints is not None:
            pulumi.set(__self__, "oauth_authorization_endpoints", oauth_authorization_endpoints)
        if oauth_client_ids is not None:
            pulumi.set(__self__, "oauth_client_ids", oauth_client_ids)
        if oauth_client_rsa_public_key2_fps is not None:
            pulumi.set(__self__, "oauth_client_rsa_public_key2_fps", oauth_client_rsa_public_key2_fps)
        if oauth_client_rsa_public_key_fps is not None:
            pulumi.set(__self__, "oauth_client_rsa_public_key_fps", oauth_client_rsa_public_key_fps)
        if oauth_client_types is not None:
            pulumi.set(__self__, "oauth_client_types", oauth_client_types)
        if oauth_enforce_pkces is not None:
            pulumi.set(__self__, "oauth_enforce_pkces", oauth_enforce_pkces)
        if oauth_issue_refresh_tokens is not None:
            pulumi.set(__self__, "oauth_issue_refresh_tokens", oauth_issue_refresh_tokens)
        if oauth_redirect_uris is not None:
            pulumi.set(__self__, "oauth_redirect_uris", oauth_redirect_uris)
        if oauth_refresh_token_validities is not None:
            pulumi.set(__self__, "oauth_refresh_token_validities", oauth_refresh_token_validities)
        if oauth_token_endpoints is not None:
            pulumi.set(__self__, "oauth_token_endpoints", oauth_token_endpoints)
        if oauth_use_secondary_roles is not None:
            pulumi.set(__self__, "oauth_use_secondary_roles", oauth_use_secondary_roles)
        if pre_authorized_roles_lists is not None:
            pulumi.set(__self__, "pre_authorized_roles_lists", pre_authorized_roles_lists)

    @property
    @pulumi.getter(name="blockedRolesLists")
    def blocked_roles_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesListArgs']]]]:
        return pulumi.get(self, "blocked_roles_lists")

    @blocked_roles_lists.setter
    def blocked_roles_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesListArgs']]]]):
        pulumi.set(self, "blocked_roles_lists", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputCommentArgs']]]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputCommentArgs']]]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def enableds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputEnabledArgs']]]]:
        return pulumi.get(self, "enableds")

    @enableds.setter
    def enableds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputEnabledArgs']]]]):
        pulumi.set(self, "enableds", value)

    @property
    @pulumi.getter(name="networkPolicies")
    def network_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicyArgs']]]]:
        return pulumi.get(self, "network_policies")

    @network_policies.setter
    def network_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicyArgs']]]]):
        pulumi.set(self, "network_policies", value)

    @property
    @pulumi.getter(name="oauthAllowNonTlsRedirectUris")
    def oauth_allow_non_tls_redirect_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUriArgs']]]]:
        return pulumi.get(self, "oauth_allow_non_tls_redirect_uris")

    @oauth_allow_non_tls_redirect_uris.setter
    def oauth_allow_non_tls_redirect_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUriArgs']]]]):
        pulumi.set(self, "oauth_allow_non_tls_redirect_uris", value)

    @property
    @pulumi.getter(name="oauthAllowedAuthorizationEndpoints")
    def oauth_allowed_authorization_endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpointArgs']]]]:
        return pulumi.get(self, "oauth_allowed_authorization_endpoints")

    @oauth_allowed_authorization_endpoints.setter
    def oauth_allowed_authorization_endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpointArgs']]]]):
        pulumi.set(self, "oauth_allowed_authorization_endpoints", value)

    @property
    @pulumi.getter(name="oauthAllowedTokenEndpoints")
    def oauth_allowed_token_endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpointArgs']]]]:
        return pulumi.get(self, "oauth_allowed_token_endpoints")

    @oauth_allowed_token_endpoints.setter
    def oauth_allowed_token_endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpointArgs']]]]):
        pulumi.set(self, "oauth_allowed_token_endpoints", value)

    @property
    @pulumi.getter(name="oauthAuthorizationEndpoints")
    def oauth_authorization_endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpointArgs']]]]:
        return pulumi.get(self, "oauth_authorization_endpoints")

    @oauth_authorization_endpoints.setter
    def oauth_authorization_endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpointArgs']]]]):
        pulumi.set(self, "oauth_authorization_endpoints", value)

    @property
    @pulumi.getter(name="oauthClientIds")
    def oauth_client_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientIdArgs']]]]:
        return pulumi.get(self, "oauth_client_ids")

    @oauth_client_ids.setter
    def oauth_client_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientIdArgs']]]]):
        pulumi.set(self, "oauth_client_ids", value)

    @property
    @pulumi.getter(name="oauthClientRsaPublicKey2Fps")
    def oauth_client_rsa_public_key2_fps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2FpArgs']]]]:
        return pulumi.get(self, "oauth_client_rsa_public_key2_fps")

    @oauth_client_rsa_public_key2_fps.setter
    def oauth_client_rsa_public_key2_fps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2FpArgs']]]]):
        pulumi.set(self, "oauth_client_rsa_public_key2_fps", value)

    @property
    @pulumi.getter(name="oauthClientRsaPublicKeyFps")
    def oauth_client_rsa_public_key_fps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFpArgs']]]]:
        return pulumi.get(self, "oauth_client_rsa_public_key_fps")

    @oauth_client_rsa_public_key_fps.setter
    def oauth_client_rsa_public_key_fps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFpArgs']]]]):
        pulumi.set(self, "oauth_client_rsa_public_key_fps", value)

    @property
    @pulumi.getter(name="oauthClientTypes")
    def oauth_client_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientTypeArgs']]]]:
        return pulumi.get(self, "oauth_client_types")

    @oauth_client_types.setter
    def oauth_client_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientTypeArgs']]]]):
        pulumi.set(self, "oauth_client_types", value)

    @property
    @pulumi.getter(name="oauthEnforcePkces")
    def oauth_enforce_pkces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkceArgs']]]]:
        return pulumi.get(self, "oauth_enforce_pkces")

    @oauth_enforce_pkces.setter
    def oauth_enforce_pkces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkceArgs']]]]):
        pulumi.set(self, "oauth_enforce_pkces", value)

    @property
    @pulumi.getter(name="oauthIssueRefreshTokens")
    def oauth_issue_refresh_tokens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshTokenArgs']]]]:
        return pulumi.get(self, "oauth_issue_refresh_tokens")

    @oauth_issue_refresh_tokens.setter
    def oauth_issue_refresh_tokens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshTokenArgs']]]]):
        pulumi.set(self, "oauth_issue_refresh_tokens", value)

    @property
    @pulumi.getter(name="oauthRedirectUris")
    def oauth_redirect_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthRedirectUriArgs']]]]:
        return pulumi.get(self, "oauth_redirect_uris")

    @oauth_redirect_uris.setter
    def oauth_redirect_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthRedirectUriArgs']]]]):
        pulumi.set(self, "oauth_redirect_uris", value)

    @property
    @pulumi.getter(name="oauthRefreshTokenValidities")
    def oauth_refresh_token_validities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidityArgs']]]]:
        return pulumi.get(self, "oauth_refresh_token_validities")

    @oauth_refresh_token_validities.setter
    def oauth_refresh_token_validities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidityArgs']]]]):
        pulumi.set(self, "oauth_refresh_token_validities", value)

    @property
    @pulumi.getter(name="oauthTokenEndpoints")
    def oauth_token_endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpointArgs']]]]:
        return pulumi.get(self, "oauth_token_endpoints")

    @oauth_token_endpoints.setter
    def oauth_token_endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpointArgs']]]]):
        pulumi.set(self, "oauth_token_endpoints", value)

    @property
    @pulumi.getter(name="oauthUseSecondaryRoles")
    def oauth_use_secondary_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRoleArgs']]]]:
        return pulumi.get(self, "oauth_use_secondary_roles")

    @oauth_use_secondary_roles.setter
    def oauth_use_secondary_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRoleArgs']]]]):
        pulumi.set(self, "oauth_use_secondary_roles", value)

    @property
    @pulumi.getter(name="preAuthorizedRolesLists")
    def pre_authorized_roles_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesListArgs']]]]:
        return pulumi.get(self, "pre_authorized_roles_lists")

    @pre_authorized_roles_lists.setter
    def pre_authorized_roles_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesListArgs']]]]):
        pulumi.set(self, "pre_authorized_roles_lists", value)


if not MYPY:
    class OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesListArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesListArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForPartnerApplicationsDescribeOutputCommentArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForPartnerApplicationsDescribeOutputCommentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForPartnerApplicationsDescribeOutputCommentArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForPartnerApplicationsDescribeOutputEnabledArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForPartnerApplicationsDescribeOutputEnabledArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForPartnerApplicationsDescribeOutputEnabledArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicyArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicyArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUriArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUriArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUriArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpointArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpointArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpointArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpointArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpointArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpointArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientIdArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientIdArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2FpArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2FpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2FpArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFpArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFpArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientTypeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientTypeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkceArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkceArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshTokenArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshTokenArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshTokenArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForPartnerApplicationsDescribeOutputOauthRedirectUriArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForPartnerApplicationsDescribeOutputOauthRedirectUriArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthRedirectUriArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidityArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidityArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpointArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpointArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRoleArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRoleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRoleArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesListArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesListArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OauthIntegrationForPartnerApplicationsShowOutputArgsDict(TypedDict):
        category: NotRequired[pulumi.Input[str]]
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        enabled: NotRequired[pulumi.Input[bool]]
        integration_type: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
elif False:
    OauthIntegrationForPartnerApplicationsShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OauthIntegrationForPartnerApplicationsShowOutputArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 integration_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if integration_type is not None:
            pulumi.set(__self__, "integration_type", integration_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ObjectParameterObjectIdentifierArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the object to set the parameter for.
        """
        database: NotRequired[pulumi.Input[str]]
        """
        Name of the database that the object was created in.
        """
        schema: NotRequired[pulumi.Input[str]]
        """
        Name of the schema that the object was created in.
        """
elif False:
    ObjectParameterObjectIdentifierArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ObjectParameterObjectIdentifierArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database: Optional[pulumi.Input[str]] = None,
                 schema: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the object to set the parameter for.
        :param pulumi.Input[str] database: Name of the database that the object was created in.
        :param pulumi.Input[str] schema: Name of the schema that the object was created in.
        """
        pulumi.set(__self__, "name", name)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the object to set the parameter for.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the database that the object was created in.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the schema that the object was created in.
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema", value)


if not MYPY:
    class PrimaryConnectionShowOutputArgsDict(TypedDict):
        account_locator: NotRequired[pulumi.Input[str]]
        account_name: NotRequired[pulumi.Input[str]]
        comment: NotRequired[pulumi.Input[str]]
        connection_url: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        failover_allowed_to_accounts: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        is_primary: NotRequired[pulumi.Input[bool]]
        name: NotRequired[pulumi.Input[str]]
        organization_name: NotRequired[pulumi.Input[str]]
        primary: NotRequired[pulumi.Input[str]]
        region_group: NotRequired[pulumi.Input[str]]
        snowflake_region: NotRequired[pulumi.Input[str]]
elif False:
    PrimaryConnectionShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrimaryConnectionShowOutputArgs:
    def __init__(__self__, *,
                 account_locator: Optional[pulumi.Input[str]] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 connection_url: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 failover_allowed_to_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_primary: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_name: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[str]] = None,
                 region_group: Optional[pulumi.Input[str]] = None,
                 snowflake_region: Optional[pulumi.Input[str]] = None):
        if account_locator is not None:
            pulumi.set(__self__, "account_locator", account_locator)
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if connection_url is not None:
            pulumi.set(__self__, "connection_url", connection_url)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if failover_allowed_to_accounts is not None:
            pulumi.set(__self__, "failover_allowed_to_accounts", failover_allowed_to_accounts)
        if is_primary is not None:
            pulumi.set(__self__, "is_primary", is_primary)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization_name is not None:
            pulumi.set(__self__, "organization_name", organization_name)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if region_group is not None:
            pulumi.set(__self__, "region_group", region_group)
        if snowflake_region is not None:
            pulumi.set(__self__, "snowflake_region", snowflake_region)

    @property
    @pulumi.getter(name="accountLocator")
    def account_locator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_locator")

    @account_locator.setter
    def account_locator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_locator", value)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="connectionUrl")
    def connection_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_url")

    @connection_url.setter
    def connection_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_url", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="failoverAllowedToAccounts")
    def failover_allowed_to_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "failover_allowed_to_accounts")

    @failover_allowed_to_accounts.setter
    def failover_allowed_to_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "failover_allowed_to_accounts", value)

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_primary")

    @is_primary.setter
    def is_primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_primary", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "organization_name")

    @organization_name.setter
    def organization_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_name", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter(name="regionGroup")
    def region_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region_group")

    @region_group.setter
    def region_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_group", value)

    @property
    @pulumi.getter(name="snowflakeRegion")
    def snowflake_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snowflake_region")

    @snowflake_region.setter
    def snowflake_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snowflake_region", value)


if not MYPY:
    class ProcedureArgumentArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The argument name
        """
        type: pulumi.Input[str]
        """
        The argument type
        """
elif False:
    ProcedureArgumentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProcedureArgumentArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The argument name
        :param pulumi.Input[str] type: The argument type
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The argument name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The argument type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ProviderTokenAccessorArgsDict(TypedDict):
        client_id: pulumi.Input[str]
        """
        The client ID for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_CLIENT_ID` environment variable.
        """
        client_secret: pulumi.Input[str]
        """
        The client secret for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_CLIENT_SECRET` environment variable.
        """
        redirect_uri: pulumi.Input[str]
        """
        The redirect URI for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_REDIRECT_URI` environment variable.
        """
        refresh_token: pulumi.Input[str]
        """
        The refresh token for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_REFRESH_TOKEN` environment variable.
        """
        token_endpoint: pulumi.Input[str]
        """
        The token endpoint for the OAuth provider e.g. https://{yourDomain}/oauth/token when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_TOKEN_ENDPOINT` environment variable.
        """
elif False:
    ProviderTokenAccessorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProviderTokenAccessorArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 redirect_uri: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 token_endpoint: pulumi.Input[str]):
        """
        :param pulumi.Input[str] client_id: The client ID for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_CLIENT_ID` environment variable.
        :param pulumi.Input[str] client_secret: The client secret for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_CLIENT_SECRET` environment variable.
        :param pulumi.Input[str] redirect_uri: The redirect URI for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_REDIRECT_URI` environment variable.
        :param pulumi.Input[str] refresh_token: The refresh token for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_REFRESH_TOKEN` environment variable.
        :param pulumi.Input[str] token_endpoint: The token endpoint for the OAuth provider e.g. https://{yourDomain}/oauth/token when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_TOKEN_ENDPOINT` environment variable.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "redirect_uri", redirect_uri)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_endpoint", token_endpoint)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        The client ID for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_CLIENT_ID` environment variable.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        """
        The client secret for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_CLIENT_SECRET` environment variable.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="redirectUri")
    def redirect_uri(self) -> pulumi.Input[str]:
        """
        The redirect URI for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_REDIRECT_URI` environment variable.
        """
        return pulumi.get(self, "redirect_uri")

    @redirect_uri.setter
    def redirect_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "redirect_uri", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        """
        The refresh token for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_REFRESH_TOKEN` environment variable.
        """
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> pulumi.Input[str]:
        """
        The token endpoint for the OAuth provider e.g. https://{yourDomain}/oauth/token when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_TOKEN_ENDPOINT` environment variable.
        """
        return pulumi.get(self, "token_endpoint")

    @token_endpoint.setter
    def token_endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_endpoint", value)


if not MYPY:
    class ResourceMonitorShowOutputArgsDict(TypedDict):
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        credit_quota: NotRequired[pulumi.Input[float]]
        end_time: NotRequired[pulumi.Input[str]]
        frequency: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        owner: NotRequired[pulumi.Input[str]]
        remaining_credits: NotRequired[pulumi.Input[float]]
        start_time: NotRequired[pulumi.Input[str]]
        suspend_at: NotRequired[pulumi.Input[int]]
        suspend_immediate_at: NotRequired[pulumi.Input[int]]
        used_credits: NotRequired[pulumi.Input[float]]
elif False:
    ResourceMonitorShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResourceMonitorShowOutputArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 credit_quota: Optional[pulumi.Input[float]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 frequency: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 remaining_credits: Optional[pulumi.Input[float]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 suspend_at: Optional[pulumi.Input[int]] = None,
                 suspend_immediate_at: Optional[pulumi.Input[int]] = None,
                 used_credits: Optional[pulumi.Input[float]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if credit_quota is not None:
            pulumi.set(__self__, "credit_quota", credit_quota)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if remaining_credits is not None:
            pulumi.set(__self__, "remaining_credits", remaining_credits)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if suspend_at is not None:
            pulumi.set(__self__, "suspend_at", suspend_at)
        if suspend_immediate_at is not None:
            pulumi.set(__self__, "suspend_immediate_at", suspend_immediate_at)
        if used_credits is not None:
            pulumi.set(__self__, "used_credits", used_credits)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="creditQuota")
    def credit_quota(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "credit_quota")

    @credit_quota.setter
    def credit_quota(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "credit_quota", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="remainingCredits")
    def remaining_credits(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "remaining_credits")

    @remaining_credits.setter
    def remaining_credits(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "remaining_credits", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="suspendAt")
    def suspend_at(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "suspend_at")

    @suspend_at.setter
    def suspend_at(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "suspend_at", value)

    @property
    @pulumi.getter(name="suspendImmediateAt")
    def suspend_immediate_at(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "suspend_immediate_at")

    @suspend_immediate_at.setter
    def suspend_immediate_at(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "suspend_immediate_at", value)

    @property
    @pulumi.getter(name="usedCredits")
    def used_credits(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "used_credits")

    @used_credits.setter
    def used_credits(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "used_credits", value)


if not MYPY:
    class RoleShowOutputArgsDict(TypedDict):
        assigned_to_users: NotRequired[pulumi.Input[int]]
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        granted_roles: NotRequired[pulumi.Input[int]]
        granted_to_roles: NotRequired[pulumi.Input[int]]
        is_current: NotRequired[pulumi.Input[bool]]
        is_default: NotRequired[pulumi.Input[bool]]
        is_inherited: NotRequired[pulumi.Input[bool]]
        name: NotRequired[pulumi.Input[str]]
        owner: NotRequired[pulumi.Input[str]]
elif False:
    RoleShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RoleShowOutputArgs:
    def __init__(__self__, *,
                 assigned_to_users: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 granted_roles: Optional[pulumi.Input[int]] = None,
                 granted_to_roles: Optional[pulumi.Input[int]] = None,
                 is_current: Optional[pulumi.Input[bool]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 is_inherited: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None):
        if assigned_to_users is not None:
            pulumi.set(__self__, "assigned_to_users", assigned_to_users)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if granted_roles is not None:
            pulumi.set(__self__, "granted_roles", granted_roles)
        if granted_to_roles is not None:
            pulumi.set(__self__, "granted_to_roles", granted_to_roles)
        if is_current is not None:
            pulumi.set(__self__, "is_current", is_current)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if is_inherited is not None:
            pulumi.set(__self__, "is_inherited", is_inherited)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)

    @property
    @pulumi.getter(name="assignedToUsers")
    def assigned_to_users(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "assigned_to_users")

    @assigned_to_users.setter
    def assigned_to_users(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assigned_to_users", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="grantedRoles")
    def granted_roles(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "granted_roles")

    @granted_roles.setter
    def granted_roles(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "granted_roles", value)

    @property
    @pulumi.getter(name="grantedToRoles")
    def granted_to_roles(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "granted_to_roles")

    @granted_to_roles.setter
    def granted_to_roles(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "granted_to_roles", value)

    @property
    @pulumi.getter(name="isCurrent")
    def is_current(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_current")

    @is_current.setter
    def is_current(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_current", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter(name="isInherited")
    def is_inherited(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_inherited")

    @is_inherited.setter
    def is_inherited(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_inherited", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)


if not MYPY:
    class RowAccessPolicyArgumentArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The argument name
        """
        type: pulumi.Input[str]
        """
        The argument type. VECTOR data types are not yet supported. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
        """
elif False:
    RowAccessPolicyArgumentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RowAccessPolicyArgumentArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The argument name
        :param pulumi.Input[str] type: The argument type. VECTOR data types are not yet supported. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The argument name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The argument type. VECTOR data types are not yet supported. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class RowAccessPolicyDescribeOutputArgsDict(TypedDict):
        body: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        return_type: NotRequired[pulumi.Input[str]]
        signatures: NotRequired[pulumi.Input[Sequence[pulumi.Input['RowAccessPolicyDescribeOutputSignatureArgsDict']]]]
elif False:
    RowAccessPolicyDescribeOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RowAccessPolicyDescribeOutputArgs:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 return_type: Optional[pulumi.Input[str]] = None,
                 signatures: Optional[pulumi.Input[Sequence[pulumi.Input['RowAccessPolicyDescribeOutputSignatureArgs']]]] = None):
        if body is not None:
            pulumi.set(__self__, "body", body)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if return_type is not None:
            pulumi.set(__self__, "return_type", return_type)
        if signatures is not None:
            pulumi.set(__self__, "signatures", signatures)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="returnType")
    def return_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "return_type")

    @return_type.setter
    def return_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "return_type", value)

    @property
    @pulumi.getter
    def signatures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RowAccessPolicyDescribeOutputSignatureArgs']]]]:
        return pulumi.get(self, "signatures")

    @signatures.setter
    def signatures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RowAccessPolicyDescribeOutputSignatureArgs']]]]):
        pulumi.set(self, "signatures", value)


if not MYPY:
    class RowAccessPolicyDescribeOutputSignatureArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
elif False:
    RowAccessPolicyDescribeOutputSignatureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RowAccessPolicyDescribeOutputSignatureArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class RowAccessPolicyShowOutputArgsDict(TypedDict):
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        kind: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        options: NotRequired[pulumi.Input[str]]
        owner: NotRequired[pulumi.Input[str]]
        owner_role_type: NotRequired[pulumi.Input[str]]
        schema_name: NotRequired[pulumi.Input[str]]
elif False:
    RowAccessPolicyShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RowAccessPolicyShowOutputArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 owner_role_type: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_role_type")

    @owner_role_type.setter
    def owner_role_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_role_type", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


if not MYPY:
    class Saml2IntegrationDescribeOutputArgsDict(TypedDict):
        allowed_email_patterns: NotRequired[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputAllowedEmailPatternArgsDict']]]]
        allowed_user_domains: NotRequired[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputAllowedUserDomainArgsDict']]]]
        comments: NotRequired[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputCommentArgsDict']]]]
        saml2_digest_methods_useds: NotRequired[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2DigestMethodsUsedArgsDict']]]]
        saml2_enable_sp_initiateds: NotRequired[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2EnableSpInitiatedArgsDict']]]]
        saml2_force_authns: NotRequired[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2ForceAuthnArgsDict']]]]
        saml2_issuers: NotRequired[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2IssuerArgsDict']]]]
        saml2_post_logout_redirect_urls: NotRequired[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrlArgsDict']]]]
        saml2_providers: NotRequired[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2ProviderArgsDict']]]]
        saml2_requested_nameid_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2RequestedNameidFormatArgsDict']]]]
        saml2_sign_requests: NotRequired[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SignRequestArgsDict']]]]
        saml2_signature_methods_useds: NotRequired[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsedArgsDict']]]]
        saml2_snowflake_acs_urls: NotRequired[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrlArgsDict']]]]
        saml2_snowflake_issuer_urls: NotRequired[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrlArgsDict']]]]
        saml2_snowflake_metadatas: NotRequired[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SnowflakeMetadataArgsDict']]]]
        saml2_snowflake_x509_certs: NotRequired[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SnowflakeX509CertArgsDict']]]]
        saml2_sp_initiated_login_page_labels: NotRequired[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabelArgsDict']]]]
        saml2_sso_urls: NotRequired[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SsoUrlArgsDict']]]]
        saml2_x509_certs: NotRequired[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2X509CertArgsDict']]]]
elif False:
    Saml2IntegrationDescribeOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Saml2IntegrationDescribeOutputArgs:
    def __init__(__self__, *,
                 allowed_email_patterns: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputAllowedEmailPatternArgs']]]] = None,
                 allowed_user_domains: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputAllowedUserDomainArgs']]]] = None,
                 comments: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputCommentArgs']]]] = None,
                 saml2_digest_methods_useds: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2DigestMethodsUsedArgs']]]] = None,
                 saml2_enable_sp_initiateds: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2EnableSpInitiatedArgs']]]] = None,
                 saml2_force_authns: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2ForceAuthnArgs']]]] = None,
                 saml2_issuers: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2IssuerArgs']]]] = None,
                 saml2_post_logout_redirect_urls: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrlArgs']]]] = None,
                 saml2_providers: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2ProviderArgs']]]] = None,
                 saml2_requested_nameid_formats: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2RequestedNameidFormatArgs']]]] = None,
                 saml2_sign_requests: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SignRequestArgs']]]] = None,
                 saml2_signature_methods_useds: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsedArgs']]]] = None,
                 saml2_snowflake_acs_urls: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrlArgs']]]] = None,
                 saml2_snowflake_issuer_urls: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrlArgs']]]] = None,
                 saml2_snowflake_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SnowflakeMetadataArgs']]]] = None,
                 saml2_snowflake_x509_certs: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SnowflakeX509CertArgs']]]] = None,
                 saml2_sp_initiated_login_page_labels: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabelArgs']]]] = None,
                 saml2_sso_urls: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SsoUrlArgs']]]] = None,
                 saml2_x509_certs: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2X509CertArgs']]]] = None):
        if allowed_email_patterns is not None:
            pulumi.set(__self__, "allowed_email_patterns", allowed_email_patterns)
        if allowed_user_domains is not None:
            pulumi.set(__self__, "allowed_user_domains", allowed_user_domains)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if saml2_digest_methods_useds is not None:
            pulumi.set(__self__, "saml2_digest_methods_useds", saml2_digest_methods_useds)
        if saml2_enable_sp_initiateds is not None:
            pulumi.set(__self__, "saml2_enable_sp_initiateds", saml2_enable_sp_initiateds)
        if saml2_force_authns is not None:
            pulumi.set(__self__, "saml2_force_authns", saml2_force_authns)
        if saml2_issuers is not None:
            pulumi.set(__self__, "saml2_issuers", saml2_issuers)
        if saml2_post_logout_redirect_urls is not None:
            pulumi.set(__self__, "saml2_post_logout_redirect_urls", saml2_post_logout_redirect_urls)
        if saml2_providers is not None:
            pulumi.set(__self__, "saml2_providers", saml2_providers)
        if saml2_requested_nameid_formats is not None:
            pulumi.set(__self__, "saml2_requested_nameid_formats", saml2_requested_nameid_formats)
        if saml2_sign_requests is not None:
            pulumi.set(__self__, "saml2_sign_requests", saml2_sign_requests)
        if saml2_signature_methods_useds is not None:
            pulumi.set(__self__, "saml2_signature_methods_useds", saml2_signature_methods_useds)
        if saml2_snowflake_acs_urls is not None:
            pulumi.set(__self__, "saml2_snowflake_acs_urls", saml2_snowflake_acs_urls)
        if saml2_snowflake_issuer_urls is not None:
            pulumi.set(__self__, "saml2_snowflake_issuer_urls", saml2_snowflake_issuer_urls)
        if saml2_snowflake_metadatas is not None:
            pulumi.set(__self__, "saml2_snowflake_metadatas", saml2_snowflake_metadatas)
        if saml2_snowflake_x509_certs is not None:
            pulumi.set(__self__, "saml2_snowflake_x509_certs", saml2_snowflake_x509_certs)
        if saml2_sp_initiated_login_page_labels is not None:
            pulumi.set(__self__, "saml2_sp_initiated_login_page_labels", saml2_sp_initiated_login_page_labels)
        if saml2_sso_urls is not None:
            pulumi.set(__self__, "saml2_sso_urls", saml2_sso_urls)
        if saml2_x509_certs is not None:
            pulumi.set(__self__, "saml2_x509_certs", saml2_x509_certs)

    @property
    @pulumi.getter(name="allowedEmailPatterns")
    def allowed_email_patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputAllowedEmailPatternArgs']]]]:
        return pulumi.get(self, "allowed_email_patterns")

    @allowed_email_patterns.setter
    def allowed_email_patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputAllowedEmailPatternArgs']]]]):
        pulumi.set(self, "allowed_email_patterns", value)

    @property
    @pulumi.getter(name="allowedUserDomains")
    def allowed_user_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputAllowedUserDomainArgs']]]]:
        return pulumi.get(self, "allowed_user_domains")

    @allowed_user_domains.setter
    def allowed_user_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputAllowedUserDomainArgs']]]]):
        pulumi.set(self, "allowed_user_domains", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputCommentArgs']]]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputCommentArgs']]]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="saml2DigestMethodsUseds")
    def saml2_digest_methods_useds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2DigestMethodsUsedArgs']]]]:
        return pulumi.get(self, "saml2_digest_methods_useds")

    @saml2_digest_methods_useds.setter
    def saml2_digest_methods_useds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2DigestMethodsUsedArgs']]]]):
        pulumi.set(self, "saml2_digest_methods_useds", value)

    @property
    @pulumi.getter(name="saml2EnableSpInitiateds")
    def saml2_enable_sp_initiateds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2EnableSpInitiatedArgs']]]]:
        return pulumi.get(self, "saml2_enable_sp_initiateds")

    @saml2_enable_sp_initiateds.setter
    def saml2_enable_sp_initiateds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2EnableSpInitiatedArgs']]]]):
        pulumi.set(self, "saml2_enable_sp_initiateds", value)

    @property
    @pulumi.getter(name="saml2ForceAuthns")
    def saml2_force_authns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2ForceAuthnArgs']]]]:
        return pulumi.get(self, "saml2_force_authns")

    @saml2_force_authns.setter
    def saml2_force_authns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2ForceAuthnArgs']]]]):
        pulumi.set(self, "saml2_force_authns", value)

    @property
    @pulumi.getter(name="saml2Issuers")
    def saml2_issuers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2IssuerArgs']]]]:
        return pulumi.get(self, "saml2_issuers")

    @saml2_issuers.setter
    def saml2_issuers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2IssuerArgs']]]]):
        pulumi.set(self, "saml2_issuers", value)

    @property
    @pulumi.getter(name="saml2PostLogoutRedirectUrls")
    def saml2_post_logout_redirect_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrlArgs']]]]:
        return pulumi.get(self, "saml2_post_logout_redirect_urls")

    @saml2_post_logout_redirect_urls.setter
    def saml2_post_logout_redirect_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrlArgs']]]]):
        pulumi.set(self, "saml2_post_logout_redirect_urls", value)

    @property
    @pulumi.getter(name="saml2Providers")
    def saml2_providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2ProviderArgs']]]]:
        return pulumi.get(self, "saml2_providers")

    @saml2_providers.setter
    def saml2_providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2ProviderArgs']]]]):
        pulumi.set(self, "saml2_providers", value)

    @property
    @pulumi.getter(name="saml2RequestedNameidFormats")
    def saml2_requested_nameid_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2RequestedNameidFormatArgs']]]]:
        return pulumi.get(self, "saml2_requested_nameid_formats")

    @saml2_requested_nameid_formats.setter
    def saml2_requested_nameid_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2RequestedNameidFormatArgs']]]]):
        pulumi.set(self, "saml2_requested_nameid_formats", value)

    @property
    @pulumi.getter(name="saml2SignRequests")
    def saml2_sign_requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SignRequestArgs']]]]:
        return pulumi.get(self, "saml2_sign_requests")

    @saml2_sign_requests.setter
    def saml2_sign_requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SignRequestArgs']]]]):
        pulumi.set(self, "saml2_sign_requests", value)

    @property
    @pulumi.getter(name="saml2SignatureMethodsUseds")
    def saml2_signature_methods_useds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsedArgs']]]]:
        return pulumi.get(self, "saml2_signature_methods_useds")

    @saml2_signature_methods_useds.setter
    def saml2_signature_methods_useds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsedArgs']]]]):
        pulumi.set(self, "saml2_signature_methods_useds", value)

    @property
    @pulumi.getter(name="saml2SnowflakeAcsUrls")
    def saml2_snowflake_acs_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrlArgs']]]]:
        return pulumi.get(self, "saml2_snowflake_acs_urls")

    @saml2_snowflake_acs_urls.setter
    def saml2_snowflake_acs_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrlArgs']]]]):
        pulumi.set(self, "saml2_snowflake_acs_urls", value)

    @property
    @pulumi.getter(name="saml2SnowflakeIssuerUrls")
    def saml2_snowflake_issuer_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrlArgs']]]]:
        return pulumi.get(self, "saml2_snowflake_issuer_urls")

    @saml2_snowflake_issuer_urls.setter
    def saml2_snowflake_issuer_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrlArgs']]]]):
        pulumi.set(self, "saml2_snowflake_issuer_urls", value)

    @property
    @pulumi.getter(name="saml2SnowflakeMetadatas")
    def saml2_snowflake_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SnowflakeMetadataArgs']]]]:
        return pulumi.get(self, "saml2_snowflake_metadatas")

    @saml2_snowflake_metadatas.setter
    def saml2_snowflake_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SnowflakeMetadataArgs']]]]):
        pulumi.set(self, "saml2_snowflake_metadatas", value)

    @property
    @pulumi.getter(name="saml2SnowflakeX509Certs")
    def saml2_snowflake_x509_certs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SnowflakeX509CertArgs']]]]:
        return pulumi.get(self, "saml2_snowflake_x509_certs")

    @saml2_snowflake_x509_certs.setter
    def saml2_snowflake_x509_certs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SnowflakeX509CertArgs']]]]):
        pulumi.set(self, "saml2_snowflake_x509_certs", value)

    @property
    @pulumi.getter(name="saml2SpInitiatedLoginPageLabels")
    def saml2_sp_initiated_login_page_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabelArgs']]]]:
        return pulumi.get(self, "saml2_sp_initiated_login_page_labels")

    @saml2_sp_initiated_login_page_labels.setter
    def saml2_sp_initiated_login_page_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabelArgs']]]]):
        pulumi.set(self, "saml2_sp_initiated_login_page_labels", value)

    @property
    @pulumi.getter(name="saml2SsoUrls")
    def saml2_sso_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SsoUrlArgs']]]]:
        return pulumi.get(self, "saml2_sso_urls")

    @saml2_sso_urls.setter
    def saml2_sso_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2SsoUrlArgs']]]]):
        pulumi.set(self, "saml2_sso_urls", value)

    @property
    @pulumi.getter(name="saml2X509Certs")
    def saml2_x509_certs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2X509CertArgs']]]]:
        return pulumi.get(self, "saml2_x509_certs")

    @saml2_x509_certs.setter
    def saml2_x509_certs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Saml2IntegrationDescribeOutputSaml2X509CertArgs']]]]):
        pulumi.set(self, "saml2_x509_certs", value)


if not MYPY:
    class Saml2IntegrationDescribeOutputAllowedEmailPatternArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    Saml2IntegrationDescribeOutputAllowedEmailPatternArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Saml2IntegrationDescribeOutputAllowedEmailPatternArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Saml2IntegrationDescribeOutputAllowedUserDomainArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    Saml2IntegrationDescribeOutputAllowedUserDomainArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Saml2IntegrationDescribeOutputAllowedUserDomainArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Saml2IntegrationDescribeOutputCommentArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    Saml2IntegrationDescribeOutputCommentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Saml2IntegrationDescribeOutputCommentArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Saml2IntegrationDescribeOutputSaml2DigestMethodsUsedArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    Saml2IntegrationDescribeOutputSaml2DigestMethodsUsedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Saml2IntegrationDescribeOutputSaml2DigestMethodsUsedArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Saml2IntegrationDescribeOutputSaml2EnableSpInitiatedArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    Saml2IntegrationDescribeOutputSaml2EnableSpInitiatedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Saml2IntegrationDescribeOutputSaml2EnableSpInitiatedArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Saml2IntegrationDescribeOutputSaml2ForceAuthnArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    Saml2IntegrationDescribeOutputSaml2ForceAuthnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Saml2IntegrationDescribeOutputSaml2ForceAuthnArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Saml2IntegrationDescribeOutputSaml2IssuerArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    Saml2IntegrationDescribeOutputSaml2IssuerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Saml2IntegrationDescribeOutputSaml2IssuerArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrlArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrlArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Saml2IntegrationDescribeOutputSaml2ProviderArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    Saml2IntegrationDescribeOutputSaml2ProviderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Saml2IntegrationDescribeOutputSaml2ProviderArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Saml2IntegrationDescribeOutputSaml2RequestedNameidFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    Saml2IntegrationDescribeOutputSaml2RequestedNameidFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Saml2IntegrationDescribeOutputSaml2RequestedNameidFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Saml2IntegrationDescribeOutputSaml2SignRequestArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    Saml2IntegrationDescribeOutputSaml2SignRequestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Saml2IntegrationDescribeOutputSaml2SignRequestArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsedArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsedArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrlArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrlArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrlArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrlArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Saml2IntegrationDescribeOutputSaml2SnowflakeMetadataArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    Saml2IntegrationDescribeOutputSaml2SnowflakeMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Saml2IntegrationDescribeOutputSaml2SnowflakeMetadataArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Saml2IntegrationDescribeOutputSaml2SnowflakeX509CertArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    Saml2IntegrationDescribeOutputSaml2SnowflakeX509CertArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Saml2IntegrationDescribeOutputSaml2SnowflakeX509CertArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabelArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabelArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Saml2IntegrationDescribeOutputSaml2SsoUrlArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    Saml2IntegrationDescribeOutputSaml2SsoUrlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Saml2IntegrationDescribeOutputSaml2SsoUrlArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Saml2IntegrationDescribeOutputSaml2X509CertArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    Saml2IntegrationDescribeOutputSaml2X509CertArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Saml2IntegrationDescribeOutputSaml2X509CertArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Saml2IntegrationShowOutputArgsDict(TypedDict):
        category: NotRequired[pulumi.Input[str]]
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        enabled: NotRequired[pulumi.Input[bool]]
        integration_type: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
elif False:
    Saml2IntegrationShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Saml2IntegrationShowOutputArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 integration_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if integration_type is not None:
            pulumi.set(__self__, "integration_type", integration_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class SchemaDescribeOutputArgsDict(TypedDict):
        created_on: NotRequired[pulumi.Input[str]]
        kind: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
elif False:
    SchemaDescribeOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchemaDescribeOutputArgs:
    def __init__(__self__, *,
                 created_on: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class SchemaParameterArgsDict(TypedDict):
        catalogs: NotRequired[pulumi.Input[Sequence[pulumi.Input['SchemaParameterCatalogArgsDict']]]]
        data_retention_time_in_days: NotRequired[pulumi.Input[Sequence[pulumi.Input['SchemaParameterDataRetentionTimeInDayArgsDict']]]]
        default_ddl_collations: NotRequired[pulumi.Input[Sequence[pulumi.Input['SchemaParameterDefaultDdlCollationArgsDict']]]]
        enable_console_outputs: NotRequired[pulumi.Input[Sequence[pulumi.Input['SchemaParameterEnableConsoleOutputArgsDict']]]]
        external_volumes: NotRequired[pulumi.Input[Sequence[pulumi.Input['SchemaParameterExternalVolumeArgsDict']]]]
        log_levels: NotRequired[pulumi.Input[Sequence[pulumi.Input['SchemaParameterLogLevelArgsDict']]]]
        max_data_extension_time_in_days: NotRequired[pulumi.Input[Sequence[pulumi.Input['SchemaParameterMaxDataExtensionTimeInDayArgsDict']]]]
        pipe_execution_pauseds: NotRequired[pulumi.Input[Sequence[pulumi.Input['SchemaParameterPipeExecutionPausedArgsDict']]]]
        quoted_identifiers_ignore_cases: NotRequired[pulumi.Input[Sequence[pulumi.Input['SchemaParameterQuotedIdentifiersIgnoreCaseArgsDict']]]]
        replace_invalid_characters: NotRequired[pulumi.Input[Sequence[pulumi.Input['SchemaParameterReplaceInvalidCharacterArgsDict']]]]
        storage_serialization_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['SchemaParameterStorageSerializationPolicyArgsDict']]]]
        suspend_task_after_num_failures: NotRequired[pulumi.Input[Sequence[pulumi.Input['SchemaParameterSuspendTaskAfterNumFailureArgsDict']]]]
        task_auto_retry_attempts: NotRequired[pulumi.Input[Sequence[pulumi.Input['SchemaParameterTaskAutoRetryAttemptArgsDict']]]]
        trace_levels: NotRequired[pulumi.Input[Sequence[pulumi.Input['SchemaParameterTraceLevelArgsDict']]]]
        user_task_managed_initial_warehouse_sizes: NotRequired[pulumi.Input[Sequence[pulumi.Input['SchemaParameterUserTaskManagedInitialWarehouseSizeArgsDict']]]]
        user_task_minimum_trigger_interval_in_seconds: NotRequired[pulumi.Input[Sequence[pulumi.Input['SchemaParameterUserTaskMinimumTriggerIntervalInSecondArgsDict']]]]
        user_task_timeout_ms: NotRequired[pulumi.Input[Sequence[pulumi.Input['SchemaParameterUserTaskTimeoutMArgsDict']]]]
elif False:
    SchemaParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchemaParameterArgs:
    def __init__(__self__, *,
                 catalogs: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterCatalogArgs']]]] = None,
                 data_retention_time_in_days: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterDataRetentionTimeInDayArgs']]]] = None,
                 default_ddl_collations: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterDefaultDdlCollationArgs']]]] = None,
                 enable_console_outputs: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterEnableConsoleOutputArgs']]]] = None,
                 external_volumes: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterExternalVolumeArgs']]]] = None,
                 log_levels: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterLogLevelArgs']]]] = None,
                 max_data_extension_time_in_days: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterMaxDataExtensionTimeInDayArgs']]]] = None,
                 pipe_execution_pauseds: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterPipeExecutionPausedArgs']]]] = None,
                 quoted_identifiers_ignore_cases: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterQuotedIdentifiersIgnoreCaseArgs']]]] = None,
                 replace_invalid_characters: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterReplaceInvalidCharacterArgs']]]] = None,
                 storage_serialization_policies: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterStorageSerializationPolicyArgs']]]] = None,
                 suspend_task_after_num_failures: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterSuspendTaskAfterNumFailureArgs']]]] = None,
                 task_auto_retry_attempts: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterTaskAutoRetryAttemptArgs']]]] = None,
                 trace_levels: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterTraceLevelArgs']]]] = None,
                 user_task_managed_initial_warehouse_sizes: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterUserTaskManagedInitialWarehouseSizeArgs']]]] = None,
                 user_task_minimum_trigger_interval_in_seconds: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterUserTaskMinimumTriggerIntervalInSecondArgs']]]] = None,
                 user_task_timeout_ms: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterUserTaskTimeoutMArgs']]]] = None):
        if catalogs is not None:
            pulumi.set(__self__, "catalogs", catalogs)
        if data_retention_time_in_days is not None:
            pulumi.set(__self__, "data_retention_time_in_days", data_retention_time_in_days)
        if default_ddl_collations is not None:
            pulumi.set(__self__, "default_ddl_collations", default_ddl_collations)
        if enable_console_outputs is not None:
            pulumi.set(__self__, "enable_console_outputs", enable_console_outputs)
        if external_volumes is not None:
            pulumi.set(__self__, "external_volumes", external_volumes)
        if log_levels is not None:
            pulumi.set(__self__, "log_levels", log_levels)
        if max_data_extension_time_in_days is not None:
            pulumi.set(__self__, "max_data_extension_time_in_days", max_data_extension_time_in_days)
        if pipe_execution_pauseds is not None:
            pulumi.set(__self__, "pipe_execution_pauseds", pipe_execution_pauseds)
        if quoted_identifiers_ignore_cases is not None:
            pulumi.set(__self__, "quoted_identifiers_ignore_cases", quoted_identifiers_ignore_cases)
        if replace_invalid_characters is not None:
            pulumi.set(__self__, "replace_invalid_characters", replace_invalid_characters)
        if storage_serialization_policies is not None:
            pulumi.set(__self__, "storage_serialization_policies", storage_serialization_policies)
        if suspend_task_after_num_failures is not None:
            pulumi.set(__self__, "suspend_task_after_num_failures", suspend_task_after_num_failures)
        if task_auto_retry_attempts is not None:
            pulumi.set(__self__, "task_auto_retry_attempts", task_auto_retry_attempts)
        if trace_levels is not None:
            pulumi.set(__self__, "trace_levels", trace_levels)
        if user_task_managed_initial_warehouse_sizes is not None:
            pulumi.set(__self__, "user_task_managed_initial_warehouse_sizes", user_task_managed_initial_warehouse_sizes)
        if user_task_minimum_trigger_interval_in_seconds is not None:
            pulumi.set(__self__, "user_task_minimum_trigger_interval_in_seconds", user_task_minimum_trigger_interval_in_seconds)
        if user_task_timeout_ms is not None:
            pulumi.set(__self__, "user_task_timeout_ms", user_task_timeout_ms)

    @property
    @pulumi.getter
    def catalogs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterCatalogArgs']]]]:
        return pulumi.get(self, "catalogs")

    @catalogs.setter
    def catalogs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterCatalogArgs']]]]):
        pulumi.set(self, "catalogs", value)

    @property
    @pulumi.getter(name="dataRetentionTimeInDays")
    def data_retention_time_in_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterDataRetentionTimeInDayArgs']]]]:
        return pulumi.get(self, "data_retention_time_in_days")

    @data_retention_time_in_days.setter
    def data_retention_time_in_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterDataRetentionTimeInDayArgs']]]]):
        pulumi.set(self, "data_retention_time_in_days", value)

    @property
    @pulumi.getter(name="defaultDdlCollations")
    def default_ddl_collations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterDefaultDdlCollationArgs']]]]:
        return pulumi.get(self, "default_ddl_collations")

    @default_ddl_collations.setter
    def default_ddl_collations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterDefaultDdlCollationArgs']]]]):
        pulumi.set(self, "default_ddl_collations", value)

    @property
    @pulumi.getter(name="enableConsoleOutputs")
    def enable_console_outputs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterEnableConsoleOutputArgs']]]]:
        return pulumi.get(self, "enable_console_outputs")

    @enable_console_outputs.setter
    def enable_console_outputs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterEnableConsoleOutputArgs']]]]):
        pulumi.set(self, "enable_console_outputs", value)

    @property
    @pulumi.getter(name="externalVolumes")
    def external_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterExternalVolumeArgs']]]]:
        return pulumi.get(self, "external_volumes")

    @external_volumes.setter
    def external_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterExternalVolumeArgs']]]]):
        pulumi.set(self, "external_volumes", value)

    @property
    @pulumi.getter(name="logLevels")
    def log_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterLogLevelArgs']]]]:
        return pulumi.get(self, "log_levels")

    @log_levels.setter
    def log_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterLogLevelArgs']]]]):
        pulumi.set(self, "log_levels", value)

    @property
    @pulumi.getter(name="maxDataExtensionTimeInDays")
    def max_data_extension_time_in_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterMaxDataExtensionTimeInDayArgs']]]]:
        return pulumi.get(self, "max_data_extension_time_in_days")

    @max_data_extension_time_in_days.setter
    def max_data_extension_time_in_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterMaxDataExtensionTimeInDayArgs']]]]):
        pulumi.set(self, "max_data_extension_time_in_days", value)

    @property
    @pulumi.getter(name="pipeExecutionPauseds")
    def pipe_execution_pauseds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterPipeExecutionPausedArgs']]]]:
        return pulumi.get(self, "pipe_execution_pauseds")

    @pipe_execution_pauseds.setter
    def pipe_execution_pauseds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterPipeExecutionPausedArgs']]]]):
        pulumi.set(self, "pipe_execution_pauseds", value)

    @property
    @pulumi.getter(name="quotedIdentifiersIgnoreCases")
    def quoted_identifiers_ignore_cases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterQuotedIdentifiersIgnoreCaseArgs']]]]:
        return pulumi.get(self, "quoted_identifiers_ignore_cases")

    @quoted_identifiers_ignore_cases.setter
    def quoted_identifiers_ignore_cases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterQuotedIdentifiersIgnoreCaseArgs']]]]):
        pulumi.set(self, "quoted_identifiers_ignore_cases", value)

    @property
    @pulumi.getter(name="replaceInvalidCharacters")
    def replace_invalid_characters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterReplaceInvalidCharacterArgs']]]]:
        return pulumi.get(self, "replace_invalid_characters")

    @replace_invalid_characters.setter
    def replace_invalid_characters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterReplaceInvalidCharacterArgs']]]]):
        pulumi.set(self, "replace_invalid_characters", value)

    @property
    @pulumi.getter(name="storageSerializationPolicies")
    def storage_serialization_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterStorageSerializationPolicyArgs']]]]:
        return pulumi.get(self, "storage_serialization_policies")

    @storage_serialization_policies.setter
    def storage_serialization_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterStorageSerializationPolicyArgs']]]]):
        pulumi.set(self, "storage_serialization_policies", value)

    @property
    @pulumi.getter(name="suspendTaskAfterNumFailures")
    def suspend_task_after_num_failures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterSuspendTaskAfterNumFailureArgs']]]]:
        return pulumi.get(self, "suspend_task_after_num_failures")

    @suspend_task_after_num_failures.setter
    def suspend_task_after_num_failures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterSuspendTaskAfterNumFailureArgs']]]]):
        pulumi.set(self, "suspend_task_after_num_failures", value)

    @property
    @pulumi.getter(name="taskAutoRetryAttempts")
    def task_auto_retry_attempts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterTaskAutoRetryAttemptArgs']]]]:
        return pulumi.get(self, "task_auto_retry_attempts")

    @task_auto_retry_attempts.setter
    def task_auto_retry_attempts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterTaskAutoRetryAttemptArgs']]]]):
        pulumi.set(self, "task_auto_retry_attempts", value)

    @property
    @pulumi.getter(name="traceLevels")
    def trace_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterTraceLevelArgs']]]]:
        return pulumi.get(self, "trace_levels")

    @trace_levels.setter
    def trace_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterTraceLevelArgs']]]]):
        pulumi.set(self, "trace_levels", value)

    @property
    @pulumi.getter(name="userTaskManagedInitialWarehouseSizes")
    def user_task_managed_initial_warehouse_sizes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterUserTaskManagedInitialWarehouseSizeArgs']]]]:
        return pulumi.get(self, "user_task_managed_initial_warehouse_sizes")

    @user_task_managed_initial_warehouse_sizes.setter
    def user_task_managed_initial_warehouse_sizes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterUserTaskManagedInitialWarehouseSizeArgs']]]]):
        pulumi.set(self, "user_task_managed_initial_warehouse_sizes", value)

    @property
    @pulumi.getter(name="userTaskMinimumTriggerIntervalInSeconds")
    def user_task_minimum_trigger_interval_in_seconds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterUserTaskMinimumTriggerIntervalInSecondArgs']]]]:
        return pulumi.get(self, "user_task_minimum_trigger_interval_in_seconds")

    @user_task_minimum_trigger_interval_in_seconds.setter
    def user_task_minimum_trigger_interval_in_seconds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterUserTaskMinimumTriggerIntervalInSecondArgs']]]]):
        pulumi.set(self, "user_task_minimum_trigger_interval_in_seconds", value)

    @property
    @pulumi.getter(name="userTaskTimeoutMs")
    def user_task_timeout_ms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterUserTaskTimeoutMArgs']]]]:
        return pulumi.get(self, "user_task_timeout_ms")

    @user_task_timeout_ms.setter
    def user_task_timeout_ms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaParameterUserTaskTimeoutMArgs']]]]):
        pulumi.set(self, "user_task_timeout_ms", value)


if not MYPY:
    class SchemaParameterCatalogArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    SchemaParameterCatalogArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchemaParameterCatalogArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class SchemaParameterDataRetentionTimeInDayArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    SchemaParameterDataRetentionTimeInDayArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchemaParameterDataRetentionTimeInDayArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class SchemaParameterDefaultDdlCollationArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    SchemaParameterDefaultDdlCollationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchemaParameterDefaultDdlCollationArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class SchemaParameterEnableConsoleOutputArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    SchemaParameterEnableConsoleOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchemaParameterEnableConsoleOutputArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class SchemaParameterExternalVolumeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    SchemaParameterExternalVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchemaParameterExternalVolumeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class SchemaParameterLogLevelArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    SchemaParameterLogLevelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchemaParameterLogLevelArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class SchemaParameterMaxDataExtensionTimeInDayArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    SchemaParameterMaxDataExtensionTimeInDayArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchemaParameterMaxDataExtensionTimeInDayArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class SchemaParameterPipeExecutionPausedArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    SchemaParameterPipeExecutionPausedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchemaParameterPipeExecutionPausedArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class SchemaParameterQuotedIdentifiersIgnoreCaseArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    SchemaParameterQuotedIdentifiersIgnoreCaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchemaParameterQuotedIdentifiersIgnoreCaseArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class SchemaParameterReplaceInvalidCharacterArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    SchemaParameterReplaceInvalidCharacterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchemaParameterReplaceInvalidCharacterArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class SchemaParameterStorageSerializationPolicyArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    SchemaParameterStorageSerializationPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchemaParameterStorageSerializationPolicyArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class SchemaParameterSuspendTaskAfterNumFailureArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    SchemaParameterSuspendTaskAfterNumFailureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchemaParameterSuspendTaskAfterNumFailureArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class SchemaParameterTaskAutoRetryAttemptArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    SchemaParameterTaskAutoRetryAttemptArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchemaParameterTaskAutoRetryAttemptArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class SchemaParameterTraceLevelArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    SchemaParameterTraceLevelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchemaParameterTraceLevelArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class SchemaParameterUserTaskManagedInitialWarehouseSizeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    SchemaParameterUserTaskManagedInitialWarehouseSizeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchemaParameterUserTaskManagedInitialWarehouseSizeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class SchemaParameterUserTaskMinimumTriggerIntervalInSecondArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    SchemaParameterUserTaskMinimumTriggerIntervalInSecondArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchemaParameterUserTaskMinimumTriggerIntervalInSecondArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class SchemaParameterUserTaskTimeoutMArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    SchemaParameterUserTaskTimeoutMArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchemaParameterUserTaskTimeoutMArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class SchemaShowOutputArgsDict(TypedDict):
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        dropped_on: NotRequired[pulumi.Input[str]]
        is_current: NotRequired[pulumi.Input[bool]]
        is_default: NotRequired[pulumi.Input[bool]]
        name: NotRequired[pulumi.Input[str]]
        options: NotRequired[pulumi.Input[str]]
        owner: NotRequired[pulumi.Input[str]]
        owner_role_type: NotRequired[pulumi.Input[str]]
        retention_time: NotRequired[pulumi.Input[str]]
elif False:
    SchemaShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchemaShowOutputArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 dropped_on: Optional[pulumi.Input[str]] = None,
                 is_current: Optional[pulumi.Input[bool]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 owner_role_type: Optional[pulumi.Input[str]] = None,
                 retention_time: Optional[pulumi.Input[str]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if dropped_on is not None:
            pulumi.set(__self__, "dropped_on", dropped_on)
        if is_current is not None:
            pulumi.set(__self__, "is_current", is_current)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if retention_time is not None:
            pulumi.set(__self__, "retention_time", retention_time)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="droppedOn")
    def dropped_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dropped_on")

    @dropped_on.setter
    def dropped_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dropped_on", value)

    @property
    @pulumi.getter(name="isCurrent")
    def is_current(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_current")

    @is_current.setter
    def is_current(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_current", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_role_type")

    @owner_role_type.setter
    def owner_role_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_role_type", value)

    @property
    @pulumi.getter(name="retentionTime")
    def retention_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "retention_time")

    @retention_time.setter
    def retention_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retention_time", value)


if not MYPY:
    class ScimIntegrationDescribeOutputArgsDict(TypedDict):
        comments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ScimIntegrationDescribeOutputCommentArgsDict']]]]
        enableds: NotRequired[pulumi.Input[Sequence[pulumi.Input['ScimIntegrationDescribeOutputEnabledArgsDict']]]]
        network_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['ScimIntegrationDescribeOutputNetworkPolicyArgsDict']]]]
        run_as_roles: NotRequired[pulumi.Input[Sequence[pulumi.Input['ScimIntegrationDescribeOutputRunAsRoleArgsDict']]]]
        sync_passwords: NotRequired[pulumi.Input[Sequence[pulumi.Input['ScimIntegrationDescribeOutputSyncPasswordArgsDict']]]]
elif False:
    ScimIntegrationDescribeOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScimIntegrationDescribeOutputArgs:
    def __init__(__self__, *,
                 comments: Optional[pulumi.Input[Sequence[pulumi.Input['ScimIntegrationDescribeOutputCommentArgs']]]] = None,
                 enableds: Optional[pulumi.Input[Sequence[pulumi.Input['ScimIntegrationDescribeOutputEnabledArgs']]]] = None,
                 network_policies: Optional[pulumi.Input[Sequence[pulumi.Input['ScimIntegrationDescribeOutputNetworkPolicyArgs']]]] = None,
                 run_as_roles: Optional[pulumi.Input[Sequence[pulumi.Input['ScimIntegrationDescribeOutputRunAsRoleArgs']]]] = None,
                 sync_passwords: Optional[pulumi.Input[Sequence[pulumi.Input['ScimIntegrationDescribeOutputSyncPasswordArgs']]]] = None):
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if enableds is not None:
            pulumi.set(__self__, "enableds", enableds)
        if network_policies is not None:
            pulumi.set(__self__, "network_policies", network_policies)
        if run_as_roles is not None:
            pulumi.set(__self__, "run_as_roles", run_as_roles)
        if sync_passwords is not None:
            pulumi.set(__self__, "sync_passwords", sync_passwords)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScimIntegrationDescribeOutputCommentArgs']]]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScimIntegrationDescribeOutputCommentArgs']]]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def enableds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScimIntegrationDescribeOutputEnabledArgs']]]]:
        return pulumi.get(self, "enableds")

    @enableds.setter
    def enableds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScimIntegrationDescribeOutputEnabledArgs']]]]):
        pulumi.set(self, "enableds", value)

    @property
    @pulumi.getter(name="networkPolicies")
    def network_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScimIntegrationDescribeOutputNetworkPolicyArgs']]]]:
        return pulumi.get(self, "network_policies")

    @network_policies.setter
    def network_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScimIntegrationDescribeOutputNetworkPolicyArgs']]]]):
        pulumi.set(self, "network_policies", value)

    @property
    @pulumi.getter(name="runAsRoles")
    def run_as_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScimIntegrationDescribeOutputRunAsRoleArgs']]]]:
        return pulumi.get(self, "run_as_roles")

    @run_as_roles.setter
    def run_as_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScimIntegrationDescribeOutputRunAsRoleArgs']]]]):
        pulumi.set(self, "run_as_roles", value)

    @property
    @pulumi.getter(name="syncPasswords")
    def sync_passwords(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScimIntegrationDescribeOutputSyncPasswordArgs']]]]:
        return pulumi.get(self, "sync_passwords")

    @sync_passwords.setter
    def sync_passwords(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScimIntegrationDescribeOutputSyncPasswordArgs']]]]):
        pulumi.set(self, "sync_passwords", value)


if not MYPY:
    class ScimIntegrationDescribeOutputCommentArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ScimIntegrationDescribeOutputCommentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScimIntegrationDescribeOutputCommentArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ScimIntegrationDescribeOutputEnabledArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ScimIntegrationDescribeOutputEnabledArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScimIntegrationDescribeOutputEnabledArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ScimIntegrationDescribeOutputNetworkPolicyArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ScimIntegrationDescribeOutputNetworkPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScimIntegrationDescribeOutputNetworkPolicyArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ScimIntegrationDescribeOutputRunAsRoleArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ScimIntegrationDescribeOutputRunAsRoleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScimIntegrationDescribeOutputRunAsRoleArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ScimIntegrationDescribeOutputSyncPasswordArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ScimIntegrationDescribeOutputSyncPasswordArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScimIntegrationDescribeOutputSyncPasswordArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ScimIntegrationShowOutputArgsDict(TypedDict):
        category: NotRequired[pulumi.Input[str]]
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        enabled: NotRequired[pulumi.Input[bool]]
        integration_type: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
elif False:
    ScimIntegrationShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScimIntegrationShowOutputArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 integration_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if integration_type is not None:
            pulumi.set(__self__, "integration_type", integration_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class SecondaryConnectionShowOutputArgsDict(TypedDict):
        account_locator: NotRequired[pulumi.Input[str]]
        account_name: NotRequired[pulumi.Input[str]]
        comment: NotRequired[pulumi.Input[str]]
        connection_url: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        failover_allowed_to_accounts: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        is_primary: NotRequired[pulumi.Input[bool]]
        name: NotRequired[pulumi.Input[str]]
        organization_name: NotRequired[pulumi.Input[str]]
        primary: NotRequired[pulumi.Input[str]]
        region_group: NotRequired[pulumi.Input[str]]
        snowflake_region: NotRequired[pulumi.Input[str]]
elif False:
    SecondaryConnectionShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecondaryConnectionShowOutputArgs:
    def __init__(__self__, *,
                 account_locator: Optional[pulumi.Input[str]] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 connection_url: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 failover_allowed_to_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_primary: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_name: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[str]] = None,
                 region_group: Optional[pulumi.Input[str]] = None,
                 snowflake_region: Optional[pulumi.Input[str]] = None):
        if account_locator is not None:
            pulumi.set(__self__, "account_locator", account_locator)
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if connection_url is not None:
            pulumi.set(__self__, "connection_url", connection_url)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if failover_allowed_to_accounts is not None:
            pulumi.set(__self__, "failover_allowed_to_accounts", failover_allowed_to_accounts)
        if is_primary is not None:
            pulumi.set(__self__, "is_primary", is_primary)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization_name is not None:
            pulumi.set(__self__, "organization_name", organization_name)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if region_group is not None:
            pulumi.set(__self__, "region_group", region_group)
        if snowflake_region is not None:
            pulumi.set(__self__, "snowflake_region", snowflake_region)

    @property
    @pulumi.getter(name="accountLocator")
    def account_locator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_locator")

    @account_locator.setter
    def account_locator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_locator", value)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="connectionUrl")
    def connection_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_url")

    @connection_url.setter
    def connection_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_url", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="failoverAllowedToAccounts")
    def failover_allowed_to_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "failover_allowed_to_accounts")

    @failover_allowed_to_accounts.setter
    def failover_allowed_to_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "failover_allowed_to_accounts", value)

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_primary")

    @is_primary.setter
    def is_primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_primary", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "organization_name")

    @organization_name.setter
    def organization_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_name", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter(name="regionGroup")
    def region_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region_group")

    @region_group.setter
    def region_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_group", value)

    @property
    @pulumi.getter(name="snowflakeRegion")
    def snowflake_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snowflake_region")

    @snowflake_region.setter
    def snowflake_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snowflake_region", value)


if not MYPY:
    class SecretWithAuthorizationCodeGrantDescribeOutputArgsDict(TypedDict):
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        integration_name: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        oauth_access_token_expiry_time: NotRequired[pulumi.Input[str]]
        oauth_refresh_token_expiry_time: NotRequired[pulumi.Input[str]]
        oauth_scopes: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        owner: NotRequired[pulumi.Input[str]]
        schema_name: NotRequired[pulumi.Input[str]]
        secret_type: NotRequired[pulumi.Input[str]]
        username: NotRequired[pulumi.Input[str]]
elif False:
    SecretWithAuthorizationCodeGrantDescribeOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecretWithAuthorizationCodeGrantDescribeOutputArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 integration_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth_access_token_expiry_time: Optional[pulumi.Input[str]] = None,
                 oauth_refresh_token_expiry_time: Optional[pulumi.Input[str]] = None,
                 oauth_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 secret_type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if integration_name is not None:
            pulumi.set(__self__, "integration_name", integration_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth_access_token_expiry_time is not None:
            pulumi.set(__self__, "oauth_access_token_expiry_time", oauth_access_token_expiry_time)
        if oauth_refresh_token_expiry_time is not None:
            pulumi.set(__self__, "oauth_refresh_token_expiry_time", oauth_refresh_token_expiry_time)
        if oauth_scopes is not None:
            pulumi.set(__self__, "oauth_scopes", oauth_scopes)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="integrationName")
    def integration_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "integration_name")

    @integration_name.setter
    def integration_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="oauthAccessTokenExpiryTime")
    def oauth_access_token_expiry_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oauth_access_token_expiry_time")

    @oauth_access_token_expiry_time.setter
    def oauth_access_token_expiry_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_access_token_expiry_time", value)

    @property
    @pulumi.getter(name="oauthRefreshTokenExpiryTime")
    def oauth_refresh_token_expiry_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oauth_refresh_token_expiry_time")

    @oauth_refresh_token_expiry_time.setter
    def oauth_refresh_token_expiry_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_refresh_token_expiry_time", value)

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "oauth_scopes")

    @oauth_scopes.setter
    def oauth_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "oauth_scopes", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


if not MYPY:
    class SecretWithAuthorizationCodeGrantShowOutputArgsDict(TypedDict):
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        oauth_scopes: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        owner: NotRequired[pulumi.Input[str]]
        owner_role_type: NotRequired[pulumi.Input[str]]
        schema_name: NotRequired[pulumi.Input[str]]
        secret_type: NotRequired[pulumi.Input[str]]
elif False:
    SecretWithAuthorizationCodeGrantShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecretWithAuthorizationCodeGrantShowOutputArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 owner_role_type: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 secret_type: Optional[pulumi.Input[str]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth_scopes is not None:
            pulumi.set(__self__, "oauth_scopes", oauth_scopes)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "oauth_scopes")

    @oauth_scopes.setter
    def oauth_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "oauth_scopes", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_role_type")

    @owner_role_type.setter
    def owner_role_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_role_type", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_type", value)


if not MYPY:
    class SecretWithBasicAuthenticationDescribeOutputArgsDict(TypedDict):
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        integration_name: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        oauth_access_token_expiry_time: NotRequired[pulumi.Input[str]]
        oauth_refresh_token_expiry_time: NotRequired[pulumi.Input[str]]
        oauth_scopes: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        owner: NotRequired[pulumi.Input[str]]
        schema_name: NotRequired[pulumi.Input[str]]
        secret_type: NotRequired[pulumi.Input[str]]
        username: NotRequired[pulumi.Input[str]]
elif False:
    SecretWithBasicAuthenticationDescribeOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecretWithBasicAuthenticationDescribeOutputArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 integration_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth_access_token_expiry_time: Optional[pulumi.Input[str]] = None,
                 oauth_refresh_token_expiry_time: Optional[pulumi.Input[str]] = None,
                 oauth_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 secret_type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if integration_name is not None:
            pulumi.set(__self__, "integration_name", integration_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth_access_token_expiry_time is not None:
            pulumi.set(__self__, "oauth_access_token_expiry_time", oauth_access_token_expiry_time)
        if oauth_refresh_token_expiry_time is not None:
            pulumi.set(__self__, "oauth_refresh_token_expiry_time", oauth_refresh_token_expiry_time)
        if oauth_scopes is not None:
            pulumi.set(__self__, "oauth_scopes", oauth_scopes)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="integrationName")
    def integration_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "integration_name")

    @integration_name.setter
    def integration_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="oauthAccessTokenExpiryTime")
    def oauth_access_token_expiry_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oauth_access_token_expiry_time")

    @oauth_access_token_expiry_time.setter
    def oauth_access_token_expiry_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_access_token_expiry_time", value)

    @property
    @pulumi.getter(name="oauthRefreshTokenExpiryTime")
    def oauth_refresh_token_expiry_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oauth_refresh_token_expiry_time")

    @oauth_refresh_token_expiry_time.setter
    def oauth_refresh_token_expiry_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_refresh_token_expiry_time", value)

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "oauth_scopes")

    @oauth_scopes.setter
    def oauth_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "oauth_scopes", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


if not MYPY:
    class SecretWithBasicAuthenticationShowOutputArgsDict(TypedDict):
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        oauth_scopes: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        owner: NotRequired[pulumi.Input[str]]
        owner_role_type: NotRequired[pulumi.Input[str]]
        schema_name: NotRequired[pulumi.Input[str]]
        secret_type: NotRequired[pulumi.Input[str]]
elif False:
    SecretWithBasicAuthenticationShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecretWithBasicAuthenticationShowOutputArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 owner_role_type: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 secret_type: Optional[pulumi.Input[str]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth_scopes is not None:
            pulumi.set(__self__, "oauth_scopes", oauth_scopes)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "oauth_scopes")

    @oauth_scopes.setter
    def oauth_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "oauth_scopes", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_role_type")

    @owner_role_type.setter
    def owner_role_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_role_type", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_type", value)


if not MYPY:
    class SecretWithClientCredentialsDescribeOutputArgsDict(TypedDict):
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        integration_name: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        oauth_access_token_expiry_time: NotRequired[pulumi.Input[str]]
        oauth_refresh_token_expiry_time: NotRequired[pulumi.Input[str]]
        oauth_scopes: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        owner: NotRequired[pulumi.Input[str]]
        schema_name: NotRequired[pulumi.Input[str]]
        secret_type: NotRequired[pulumi.Input[str]]
        username: NotRequired[pulumi.Input[str]]
elif False:
    SecretWithClientCredentialsDescribeOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecretWithClientCredentialsDescribeOutputArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 integration_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth_access_token_expiry_time: Optional[pulumi.Input[str]] = None,
                 oauth_refresh_token_expiry_time: Optional[pulumi.Input[str]] = None,
                 oauth_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 secret_type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if integration_name is not None:
            pulumi.set(__self__, "integration_name", integration_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth_access_token_expiry_time is not None:
            pulumi.set(__self__, "oauth_access_token_expiry_time", oauth_access_token_expiry_time)
        if oauth_refresh_token_expiry_time is not None:
            pulumi.set(__self__, "oauth_refresh_token_expiry_time", oauth_refresh_token_expiry_time)
        if oauth_scopes is not None:
            pulumi.set(__self__, "oauth_scopes", oauth_scopes)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="integrationName")
    def integration_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "integration_name")

    @integration_name.setter
    def integration_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="oauthAccessTokenExpiryTime")
    def oauth_access_token_expiry_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oauth_access_token_expiry_time")

    @oauth_access_token_expiry_time.setter
    def oauth_access_token_expiry_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_access_token_expiry_time", value)

    @property
    @pulumi.getter(name="oauthRefreshTokenExpiryTime")
    def oauth_refresh_token_expiry_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oauth_refresh_token_expiry_time")

    @oauth_refresh_token_expiry_time.setter
    def oauth_refresh_token_expiry_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_refresh_token_expiry_time", value)

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "oauth_scopes")

    @oauth_scopes.setter
    def oauth_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "oauth_scopes", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


if not MYPY:
    class SecretWithClientCredentialsShowOutputArgsDict(TypedDict):
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        oauth_scopes: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        owner: NotRequired[pulumi.Input[str]]
        owner_role_type: NotRequired[pulumi.Input[str]]
        schema_name: NotRequired[pulumi.Input[str]]
        secret_type: NotRequired[pulumi.Input[str]]
elif False:
    SecretWithClientCredentialsShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecretWithClientCredentialsShowOutputArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 owner_role_type: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 secret_type: Optional[pulumi.Input[str]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth_scopes is not None:
            pulumi.set(__self__, "oauth_scopes", oauth_scopes)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "oauth_scopes")

    @oauth_scopes.setter
    def oauth_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "oauth_scopes", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_role_type")

    @owner_role_type.setter
    def owner_role_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_role_type", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_type", value)


if not MYPY:
    class SecretWithGenericStringDescribeOutputArgsDict(TypedDict):
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        integration_name: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        oauth_access_token_expiry_time: NotRequired[pulumi.Input[str]]
        oauth_refresh_token_expiry_time: NotRequired[pulumi.Input[str]]
        oauth_scopes: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        owner: NotRequired[pulumi.Input[str]]
        schema_name: NotRequired[pulumi.Input[str]]
        secret_type: NotRequired[pulumi.Input[str]]
        username: NotRequired[pulumi.Input[str]]
elif False:
    SecretWithGenericStringDescribeOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecretWithGenericStringDescribeOutputArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 integration_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth_access_token_expiry_time: Optional[pulumi.Input[str]] = None,
                 oauth_refresh_token_expiry_time: Optional[pulumi.Input[str]] = None,
                 oauth_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 secret_type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if integration_name is not None:
            pulumi.set(__self__, "integration_name", integration_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth_access_token_expiry_time is not None:
            pulumi.set(__self__, "oauth_access_token_expiry_time", oauth_access_token_expiry_time)
        if oauth_refresh_token_expiry_time is not None:
            pulumi.set(__self__, "oauth_refresh_token_expiry_time", oauth_refresh_token_expiry_time)
        if oauth_scopes is not None:
            pulumi.set(__self__, "oauth_scopes", oauth_scopes)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="integrationName")
    def integration_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "integration_name")

    @integration_name.setter
    def integration_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="oauthAccessTokenExpiryTime")
    def oauth_access_token_expiry_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oauth_access_token_expiry_time")

    @oauth_access_token_expiry_time.setter
    def oauth_access_token_expiry_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_access_token_expiry_time", value)

    @property
    @pulumi.getter(name="oauthRefreshTokenExpiryTime")
    def oauth_refresh_token_expiry_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oauth_refresh_token_expiry_time")

    @oauth_refresh_token_expiry_time.setter
    def oauth_refresh_token_expiry_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_refresh_token_expiry_time", value)

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "oauth_scopes")

    @oauth_scopes.setter
    def oauth_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "oauth_scopes", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


if not MYPY:
    class SecretWithGenericStringShowOutputArgsDict(TypedDict):
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        oauth_scopes: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        owner: NotRequired[pulumi.Input[str]]
        owner_role_type: NotRequired[pulumi.Input[str]]
        schema_name: NotRequired[pulumi.Input[str]]
        secret_type: NotRequired[pulumi.Input[str]]
elif False:
    SecretWithGenericStringShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecretWithGenericStringShowOutputArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 owner_role_type: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 secret_type: Optional[pulumi.Input[str]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth_scopes is not None:
            pulumi.set(__self__, "oauth_scopes", oauth_scopes)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "oauth_scopes")

    @oauth_scopes.setter
    def oauth_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "oauth_scopes", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_role_type")

    @owner_role_type.setter
    def owner_role_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_role_type", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_type", value)


if not MYPY:
    class ServiceUserParameterArgsDict(TypedDict):
        abort_detached_queries: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterAbortDetachedQueryArgsDict']]]]
        autocommits: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterAutocommitArgsDict']]]]
        binary_input_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterBinaryInputFormatArgsDict']]]]
        binary_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterBinaryOutputFormatArgsDict']]]]
        client_memory_limits: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientMemoryLimitArgsDict']]]]
        client_metadata_request_use_connection_ctxes: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientMetadataRequestUseConnectionCtxArgsDict']]]]
        client_prefetch_threads: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientPrefetchThreadArgsDict']]]]
        client_result_chunk_sizes: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientResultChunkSizeArgsDict']]]]
        client_result_column_case_insensitives: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientResultColumnCaseInsensitiveArgsDict']]]]
        client_session_keep_alive_heartbeat_frequencies: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientSessionKeepAliveHeartbeatFrequencyArgsDict']]]]
        client_session_keep_alives: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientSessionKeepAlifeArgsDict']]]]
        client_timestamp_type_mappings: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientTimestampTypeMappingArgsDict']]]]
        date_input_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterDateInputFormatArgsDict']]]]
        date_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterDateOutputFormatArgsDict']]]]
        enable_unload_physical_type_optimizations: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterEnableUnloadPhysicalTypeOptimizationArgsDict']]]]
        enable_unredacted_query_syntax_errors: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterEnableUnredactedQuerySyntaxErrorArgsDict']]]]
        error_on_nondeterministic_merges: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterErrorOnNondeterministicMergeArgsDict']]]]
        error_on_nondeterministic_updates: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterErrorOnNondeterministicUpdateArgsDict']]]]
        geography_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterGeographyOutputFormatArgsDict']]]]
        geometry_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterGeometryOutputFormatArgsDict']]]]
        jdbc_treat_decimal_as_ints: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterJdbcTreatDecimalAsIntArgsDict']]]]
        jdbc_treat_timestamp_ntz_as_utcs: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterJdbcTreatTimestampNtzAsUtcArgsDict']]]]
        jdbc_use_session_timezones: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterJdbcUseSessionTimezoneArgsDict']]]]
        json_indents: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterJsonIndentArgsDict']]]]
        lock_timeouts: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterLockTimeoutArgsDict']]]]
        log_levels: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterLogLevelArgsDict']]]]
        multi_statement_counts: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterMultiStatementCountArgsDict']]]]
        network_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterNetworkPolicyArgsDict']]]]
        noorder_sequence_as_defaults: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterNoorderSequenceAsDefaultArgsDict']]]]
        odbc_treat_decimal_as_ints: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterOdbcTreatDecimalAsIntArgsDict']]]]
        prevent_unload_to_internal_stages: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterPreventUnloadToInternalStageArgsDict']]]]
        query_tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterQueryTagArgsDict']]]]
        quoted_identifiers_ignore_cases: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterQuotedIdentifiersIgnoreCaseArgsDict']]]]
        rows_per_resultsets: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterRowsPerResultsetArgsDict']]]]
        s3_stage_vpce_dns_names: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterS3StageVpceDnsNameArgsDict']]]]
        search_paths: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterSearchPathArgsDict']]]]
        simulated_data_sharing_consumers: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterSimulatedDataSharingConsumerArgsDict']]]]
        statement_queued_timeout_in_seconds: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterStatementQueuedTimeoutInSecondArgsDict']]]]
        statement_timeout_in_seconds: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterStatementTimeoutInSecondArgsDict']]]]
        strict_json_outputs: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterStrictJsonOutputArgsDict']]]]
        time_input_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimeInputFormatArgsDict']]]]
        time_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimeOutputFormatArgsDict']]]]
        timestamp_day_is_always24hs: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampDayIsAlways24hArgsDict']]]]
        timestamp_input_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampInputFormatArgsDict']]]]
        timestamp_ltz_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampLtzOutputFormatArgsDict']]]]
        timestamp_ntz_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampNtzOutputFormatArgsDict']]]]
        timestamp_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampOutputFormatArgsDict']]]]
        timestamp_type_mappings: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampTypeMappingArgsDict']]]]
        timestamp_tz_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampTzOutputFormatArgsDict']]]]
        timezones: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimezoneArgsDict']]]]
        trace_levels: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTraceLevelArgsDict']]]]
        transaction_abort_on_errors: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTransactionAbortOnErrorArgsDict']]]]
        transaction_default_isolation_levels: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTransactionDefaultIsolationLevelArgsDict']]]]
        two_digit_century_starts: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTwoDigitCenturyStartArgsDict']]]]
        unsupported_ddl_actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterUnsupportedDdlActionArgsDict']]]]
        use_cached_results: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterUseCachedResultArgsDict']]]]
        week_of_year_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterWeekOfYearPolicyArgsDict']]]]
        week_starts: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterWeekStartArgsDict']]]]
elif False:
    ServiceUserParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterArgs:
    def __init__(__self__, *,
                 abort_detached_queries: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterAbortDetachedQueryArgs']]]] = None,
                 autocommits: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterAutocommitArgs']]]] = None,
                 binary_input_formats: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterBinaryInputFormatArgs']]]] = None,
                 binary_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterBinaryOutputFormatArgs']]]] = None,
                 client_memory_limits: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientMemoryLimitArgs']]]] = None,
                 client_metadata_request_use_connection_ctxes: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientMetadataRequestUseConnectionCtxArgs']]]] = None,
                 client_prefetch_threads: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientPrefetchThreadArgs']]]] = None,
                 client_result_chunk_sizes: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientResultChunkSizeArgs']]]] = None,
                 client_result_column_case_insensitives: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientResultColumnCaseInsensitiveArgs']]]] = None,
                 client_session_keep_alive_heartbeat_frequencies: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientSessionKeepAliveHeartbeatFrequencyArgs']]]] = None,
                 client_session_keep_alives: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientSessionKeepAlifeArgs']]]] = None,
                 client_timestamp_type_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientTimestampTypeMappingArgs']]]] = None,
                 date_input_formats: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterDateInputFormatArgs']]]] = None,
                 date_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterDateOutputFormatArgs']]]] = None,
                 enable_unload_physical_type_optimizations: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterEnableUnloadPhysicalTypeOptimizationArgs']]]] = None,
                 enable_unredacted_query_syntax_errors: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterEnableUnredactedQuerySyntaxErrorArgs']]]] = None,
                 error_on_nondeterministic_merges: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterErrorOnNondeterministicMergeArgs']]]] = None,
                 error_on_nondeterministic_updates: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterErrorOnNondeterministicUpdateArgs']]]] = None,
                 geography_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterGeographyOutputFormatArgs']]]] = None,
                 geometry_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterGeometryOutputFormatArgs']]]] = None,
                 jdbc_treat_decimal_as_ints: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterJdbcTreatDecimalAsIntArgs']]]] = None,
                 jdbc_treat_timestamp_ntz_as_utcs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterJdbcTreatTimestampNtzAsUtcArgs']]]] = None,
                 jdbc_use_session_timezones: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterJdbcUseSessionTimezoneArgs']]]] = None,
                 json_indents: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterJsonIndentArgs']]]] = None,
                 lock_timeouts: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterLockTimeoutArgs']]]] = None,
                 log_levels: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterLogLevelArgs']]]] = None,
                 multi_statement_counts: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterMultiStatementCountArgs']]]] = None,
                 network_policies: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterNetworkPolicyArgs']]]] = None,
                 noorder_sequence_as_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterNoorderSequenceAsDefaultArgs']]]] = None,
                 odbc_treat_decimal_as_ints: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterOdbcTreatDecimalAsIntArgs']]]] = None,
                 prevent_unload_to_internal_stages: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterPreventUnloadToInternalStageArgs']]]] = None,
                 query_tags: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterQueryTagArgs']]]] = None,
                 quoted_identifiers_ignore_cases: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterQuotedIdentifiersIgnoreCaseArgs']]]] = None,
                 rows_per_resultsets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterRowsPerResultsetArgs']]]] = None,
                 s3_stage_vpce_dns_names: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterS3StageVpceDnsNameArgs']]]] = None,
                 search_paths: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterSearchPathArgs']]]] = None,
                 simulated_data_sharing_consumers: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterSimulatedDataSharingConsumerArgs']]]] = None,
                 statement_queued_timeout_in_seconds: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterStatementQueuedTimeoutInSecondArgs']]]] = None,
                 statement_timeout_in_seconds: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterStatementTimeoutInSecondArgs']]]] = None,
                 strict_json_outputs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterStrictJsonOutputArgs']]]] = None,
                 time_input_formats: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimeInputFormatArgs']]]] = None,
                 time_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimeOutputFormatArgs']]]] = None,
                 timestamp_day_is_always24hs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampDayIsAlways24hArgs']]]] = None,
                 timestamp_input_formats: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampInputFormatArgs']]]] = None,
                 timestamp_ltz_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampLtzOutputFormatArgs']]]] = None,
                 timestamp_ntz_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampNtzOutputFormatArgs']]]] = None,
                 timestamp_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampOutputFormatArgs']]]] = None,
                 timestamp_type_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampTypeMappingArgs']]]] = None,
                 timestamp_tz_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampTzOutputFormatArgs']]]] = None,
                 timezones: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimezoneArgs']]]] = None,
                 trace_levels: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTraceLevelArgs']]]] = None,
                 transaction_abort_on_errors: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTransactionAbortOnErrorArgs']]]] = None,
                 transaction_default_isolation_levels: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTransactionDefaultIsolationLevelArgs']]]] = None,
                 two_digit_century_starts: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTwoDigitCenturyStartArgs']]]] = None,
                 unsupported_ddl_actions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterUnsupportedDdlActionArgs']]]] = None,
                 use_cached_results: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterUseCachedResultArgs']]]] = None,
                 week_of_year_policies: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterWeekOfYearPolicyArgs']]]] = None,
                 week_starts: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterWeekStartArgs']]]] = None):
        if abort_detached_queries is not None:
            pulumi.set(__self__, "abort_detached_queries", abort_detached_queries)
        if autocommits is not None:
            pulumi.set(__self__, "autocommits", autocommits)
        if binary_input_formats is not None:
            pulumi.set(__self__, "binary_input_formats", binary_input_formats)
        if binary_output_formats is not None:
            pulumi.set(__self__, "binary_output_formats", binary_output_formats)
        if client_memory_limits is not None:
            pulumi.set(__self__, "client_memory_limits", client_memory_limits)
        if client_metadata_request_use_connection_ctxes is not None:
            pulumi.set(__self__, "client_metadata_request_use_connection_ctxes", client_metadata_request_use_connection_ctxes)
        if client_prefetch_threads is not None:
            pulumi.set(__self__, "client_prefetch_threads", client_prefetch_threads)
        if client_result_chunk_sizes is not None:
            pulumi.set(__self__, "client_result_chunk_sizes", client_result_chunk_sizes)
        if client_result_column_case_insensitives is not None:
            pulumi.set(__self__, "client_result_column_case_insensitives", client_result_column_case_insensitives)
        if client_session_keep_alive_heartbeat_frequencies is not None:
            pulumi.set(__self__, "client_session_keep_alive_heartbeat_frequencies", client_session_keep_alive_heartbeat_frequencies)
        if client_session_keep_alives is not None:
            pulumi.set(__self__, "client_session_keep_alives", client_session_keep_alives)
        if client_timestamp_type_mappings is not None:
            pulumi.set(__self__, "client_timestamp_type_mappings", client_timestamp_type_mappings)
        if date_input_formats is not None:
            pulumi.set(__self__, "date_input_formats", date_input_formats)
        if date_output_formats is not None:
            pulumi.set(__self__, "date_output_formats", date_output_formats)
        if enable_unload_physical_type_optimizations is not None:
            pulumi.set(__self__, "enable_unload_physical_type_optimizations", enable_unload_physical_type_optimizations)
        if enable_unredacted_query_syntax_errors is not None:
            pulumi.set(__self__, "enable_unredacted_query_syntax_errors", enable_unredacted_query_syntax_errors)
        if error_on_nondeterministic_merges is not None:
            pulumi.set(__self__, "error_on_nondeterministic_merges", error_on_nondeterministic_merges)
        if error_on_nondeterministic_updates is not None:
            pulumi.set(__self__, "error_on_nondeterministic_updates", error_on_nondeterministic_updates)
        if geography_output_formats is not None:
            pulumi.set(__self__, "geography_output_formats", geography_output_formats)
        if geometry_output_formats is not None:
            pulumi.set(__self__, "geometry_output_formats", geometry_output_formats)
        if jdbc_treat_decimal_as_ints is not None:
            pulumi.set(__self__, "jdbc_treat_decimal_as_ints", jdbc_treat_decimal_as_ints)
        if jdbc_treat_timestamp_ntz_as_utcs is not None:
            pulumi.set(__self__, "jdbc_treat_timestamp_ntz_as_utcs", jdbc_treat_timestamp_ntz_as_utcs)
        if jdbc_use_session_timezones is not None:
            pulumi.set(__self__, "jdbc_use_session_timezones", jdbc_use_session_timezones)
        if json_indents is not None:
            pulumi.set(__self__, "json_indents", json_indents)
        if lock_timeouts is not None:
            pulumi.set(__self__, "lock_timeouts", lock_timeouts)
        if log_levels is not None:
            pulumi.set(__self__, "log_levels", log_levels)
        if multi_statement_counts is not None:
            pulumi.set(__self__, "multi_statement_counts", multi_statement_counts)
        if network_policies is not None:
            pulumi.set(__self__, "network_policies", network_policies)
        if noorder_sequence_as_defaults is not None:
            pulumi.set(__self__, "noorder_sequence_as_defaults", noorder_sequence_as_defaults)
        if odbc_treat_decimal_as_ints is not None:
            pulumi.set(__self__, "odbc_treat_decimal_as_ints", odbc_treat_decimal_as_ints)
        if prevent_unload_to_internal_stages is not None:
            pulumi.set(__self__, "prevent_unload_to_internal_stages", prevent_unload_to_internal_stages)
        if query_tags is not None:
            pulumi.set(__self__, "query_tags", query_tags)
        if quoted_identifiers_ignore_cases is not None:
            pulumi.set(__self__, "quoted_identifiers_ignore_cases", quoted_identifiers_ignore_cases)
        if rows_per_resultsets is not None:
            pulumi.set(__self__, "rows_per_resultsets", rows_per_resultsets)
        if s3_stage_vpce_dns_names is not None:
            pulumi.set(__self__, "s3_stage_vpce_dns_names", s3_stage_vpce_dns_names)
        if search_paths is not None:
            pulumi.set(__self__, "search_paths", search_paths)
        if simulated_data_sharing_consumers is not None:
            pulumi.set(__self__, "simulated_data_sharing_consumers", simulated_data_sharing_consumers)
        if statement_queued_timeout_in_seconds is not None:
            pulumi.set(__self__, "statement_queued_timeout_in_seconds", statement_queued_timeout_in_seconds)
        if statement_timeout_in_seconds is not None:
            pulumi.set(__self__, "statement_timeout_in_seconds", statement_timeout_in_seconds)
        if strict_json_outputs is not None:
            pulumi.set(__self__, "strict_json_outputs", strict_json_outputs)
        if time_input_formats is not None:
            pulumi.set(__self__, "time_input_formats", time_input_formats)
        if time_output_formats is not None:
            pulumi.set(__self__, "time_output_formats", time_output_formats)
        if timestamp_day_is_always24hs is not None:
            pulumi.set(__self__, "timestamp_day_is_always24hs", timestamp_day_is_always24hs)
        if timestamp_input_formats is not None:
            pulumi.set(__self__, "timestamp_input_formats", timestamp_input_formats)
        if timestamp_ltz_output_formats is not None:
            pulumi.set(__self__, "timestamp_ltz_output_formats", timestamp_ltz_output_formats)
        if timestamp_ntz_output_formats is not None:
            pulumi.set(__self__, "timestamp_ntz_output_formats", timestamp_ntz_output_formats)
        if timestamp_output_formats is not None:
            pulumi.set(__self__, "timestamp_output_formats", timestamp_output_formats)
        if timestamp_type_mappings is not None:
            pulumi.set(__self__, "timestamp_type_mappings", timestamp_type_mappings)
        if timestamp_tz_output_formats is not None:
            pulumi.set(__self__, "timestamp_tz_output_formats", timestamp_tz_output_formats)
        if timezones is not None:
            pulumi.set(__self__, "timezones", timezones)
        if trace_levels is not None:
            pulumi.set(__self__, "trace_levels", trace_levels)
        if transaction_abort_on_errors is not None:
            pulumi.set(__self__, "transaction_abort_on_errors", transaction_abort_on_errors)
        if transaction_default_isolation_levels is not None:
            pulumi.set(__self__, "transaction_default_isolation_levels", transaction_default_isolation_levels)
        if two_digit_century_starts is not None:
            pulumi.set(__self__, "two_digit_century_starts", two_digit_century_starts)
        if unsupported_ddl_actions is not None:
            pulumi.set(__self__, "unsupported_ddl_actions", unsupported_ddl_actions)
        if use_cached_results is not None:
            pulumi.set(__self__, "use_cached_results", use_cached_results)
        if week_of_year_policies is not None:
            pulumi.set(__self__, "week_of_year_policies", week_of_year_policies)
        if week_starts is not None:
            pulumi.set(__self__, "week_starts", week_starts)

    @property
    @pulumi.getter(name="abortDetachedQueries")
    def abort_detached_queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterAbortDetachedQueryArgs']]]]:
        return pulumi.get(self, "abort_detached_queries")

    @abort_detached_queries.setter
    def abort_detached_queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterAbortDetachedQueryArgs']]]]):
        pulumi.set(self, "abort_detached_queries", value)

    @property
    @pulumi.getter
    def autocommits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterAutocommitArgs']]]]:
        return pulumi.get(self, "autocommits")

    @autocommits.setter
    def autocommits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterAutocommitArgs']]]]):
        pulumi.set(self, "autocommits", value)

    @property
    @pulumi.getter(name="binaryInputFormats")
    def binary_input_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterBinaryInputFormatArgs']]]]:
        return pulumi.get(self, "binary_input_formats")

    @binary_input_formats.setter
    def binary_input_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterBinaryInputFormatArgs']]]]):
        pulumi.set(self, "binary_input_formats", value)

    @property
    @pulumi.getter(name="binaryOutputFormats")
    def binary_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterBinaryOutputFormatArgs']]]]:
        return pulumi.get(self, "binary_output_formats")

    @binary_output_formats.setter
    def binary_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterBinaryOutputFormatArgs']]]]):
        pulumi.set(self, "binary_output_formats", value)

    @property
    @pulumi.getter(name="clientMemoryLimits")
    def client_memory_limits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientMemoryLimitArgs']]]]:
        return pulumi.get(self, "client_memory_limits")

    @client_memory_limits.setter
    def client_memory_limits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientMemoryLimitArgs']]]]):
        pulumi.set(self, "client_memory_limits", value)

    @property
    @pulumi.getter(name="clientMetadataRequestUseConnectionCtxes")
    def client_metadata_request_use_connection_ctxes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientMetadataRequestUseConnectionCtxArgs']]]]:
        return pulumi.get(self, "client_metadata_request_use_connection_ctxes")

    @client_metadata_request_use_connection_ctxes.setter
    def client_metadata_request_use_connection_ctxes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientMetadataRequestUseConnectionCtxArgs']]]]):
        pulumi.set(self, "client_metadata_request_use_connection_ctxes", value)

    @property
    @pulumi.getter(name="clientPrefetchThreads")
    def client_prefetch_threads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientPrefetchThreadArgs']]]]:
        return pulumi.get(self, "client_prefetch_threads")

    @client_prefetch_threads.setter
    def client_prefetch_threads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientPrefetchThreadArgs']]]]):
        pulumi.set(self, "client_prefetch_threads", value)

    @property
    @pulumi.getter(name="clientResultChunkSizes")
    def client_result_chunk_sizes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientResultChunkSizeArgs']]]]:
        return pulumi.get(self, "client_result_chunk_sizes")

    @client_result_chunk_sizes.setter
    def client_result_chunk_sizes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientResultChunkSizeArgs']]]]):
        pulumi.set(self, "client_result_chunk_sizes", value)

    @property
    @pulumi.getter(name="clientResultColumnCaseInsensitives")
    def client_result_column_case_insensitives(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientResultColumnCaseInsensitiveArgs']]]]:
        return pulumi.get(self, "client_result_column_case_insensitives")

    @client_result_column_case_insensitives.setter
    def client_result_column_case_insensitives(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientResultColumnCaseInsensitiveArgs']]]]):
        pulumi.set(self, "client_result_column_case_insensitives", value)

    @property
    @pulumi.getter(name="clientSessionKeepAliveHeartbeatFrequencies")
    def client_session_keep_alive_heartbeat_frequencies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientSessionKeepAliveHeartbeatFrequencyArgs']]]]:
        return pulumi.get(self, "client_session_keep_alive_heartbeat_frequencies")

    @client_session_keep_alive_heartbeat_frequencies.setter
    def client_session_keep_alive_heartbeat_frequencies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientSessionKeepAliveHeartbeatFrequencyArgs']]]]):
        pulumi.set(self, "client_session_keep_alive_heartbeat_frequencies", value)

    @property
    @pulumi.getter(name="clientSessionKeepAlives")
    def client_session_keep_alives(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientSessionKeepAlifeArgs']]]]:
        return pulumi.get(self, "client_session_keep_alives")

    @client_session_keep_alives.setter
    def client_session_keep_alives(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientSessionKeepAlifeArgs']]]]):
        pulumi.set(self, "client_session_keep_alives", value)

    @property
    @pulumi.getter(name="clientTimestampTypeMappings")
    def client_timestamp_type_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientTimestampTypeMappingArgs']]]]:
        return pulumi.get(self, "client_timestamp_type_mappings")

    @client_timestamp_type_mappings.setter
    def client_timestamp_type_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterClientTimestampTypeMappingArgs']]]]):
        pulumi.set(self, "client_timestamp_type_mappings", value)

    @property
    @pulumi.getter(name="dateInputFormats")
    def date_input_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterDateInputFormatArgs']]]]:
        return pulumi.get(self, "date_input_formats")

    @date_input_formats.setter
    def date_input_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterDateInputFormatArgs']]]]):
        pulumi.set(self, "date_input_formats", value)

    @property
    @pulumi.getter(name="dateOutputFormats")
    def date_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterDateOutputFormatArgs']]]]:
        return pulumi.get(self, "date_output_formats")

    @date_output_formats.setter
    def date_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterDateOutputFormatArgs']]]]):
        pulumi.set(self, "date_output_formats", value)

    @property
    @pulumi.getter(name="enableUnloadPhysicalTypeOptimizations")
    def enable_unload_physical_type_optimizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterEnableUnloadPhysicalTypeOptimizationArgs']]]]:
        return pulumi.get(self, "enable_unload_physical_type_optimizations")

    @enable_unload_physical_type_optimizations.setter
    def enable_unload_physical_type_optimizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterEnableUnloadPhysicalTypeOptimizationArgs']]]]):
        pulumi.set(self, "enable_unload_physical_type_optimizations", value)

    @property
    @pulumi.getter(name="enableUnredactedQuerySyntaxErrors")
    def enable_unredacted_query_syntax_errors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterEnableUnredactedQuerySyntaxErrorArgs']]]]:
        return pulumi.get(self, "enable_unredacted_query_syntax_errors")

    @enable_unredacted_query_syntax_errors.setter
    def enable_unredacted_query_syntax_errors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterEnableUnredactedQuerySyntaxErrorArgs']]]]):
        pulumi.set(self, "enable_unredacted_query_syntax_errors", value)

    @property
    @pulumi.getter(name="errorOnNondeterministicMerges")
    def error_on_nondeterministic_merges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterErrorOnNondeterministicMergeArgs']]]]:
        return pulumi.get(self, "error_on_nondeterministic_merges")

    @error_on_nondeterministic_merges.setter
    def error_on_nondeterministic_merges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterErrorOnNondeterministicMergeArgs']]]]):
        pulumi.set(self, "error_on_nondeterministic_merges", value)

    @property
    @pulumi.getter(name="errorOnNondeterministicUpdates")
    def error_on_nondeterministic_updates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterErrorOnNondeterministicUpdateArgs']]]]:
        return pulumi.get(self, "error_on_nondeterministic_updates")

    @error_on_nondeterministic_updates.setter
    def error_on_nondeterministic_updates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterErrorOnNondeterministicUpdateArgs']]]]):
        pulumi.set(self, "error_on_nondeterministic_updates", value)

    @property
    @pulumi.getter(name="geographyOutputFormats")
    def geography_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterGeographyOutputFormatArgs']]]]:
        return pulumi.get(self, "geography_output_formats")

    @geography_output_formats.setter
    def geography_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterGeographyOutputFormatArgs']]]]):
        pulumi.set(self, "geography_output_formats", value)

    @property
    @pulumi.getter(name="geometryOutputFormats")
    def geometry_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterGeometryOutputFormatArgs']]]]:
        return pulumi.get(self, "geometry_output_formats")

    @geometry_output_formats.setter
    def geometry_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterGeometryOutputFormatArgs']]]]):
        pulumi.set(self, "geometry_output_formats", value)

    @property
    @pulumi.getter(name="jdbcTreatDecimalAsInts")
    def jdbc_treat_decimal_as_ints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterJdbcTreatDecimalAsIntArgs']]]]:
        return pulumi.get(self, "jdbc_treat_decimal_as_ints")

    @jdbc_treat_decimal_as_ints.setter
    def jdbc_treat_decimal_as_ints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterJdbcTreatDecimalAsIntArgs']]]]):
        pulumi.set(self, "jdbc_treat_decimal_as_ints", value)

    @property
    @pulumi.getter(name="jdbcTreatTimestampNtzAsUtcs")
    def jdbc_treat_timestamp_ntz_as_utcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterJdbcTreatTimestampNtzAsUtcArgs']]]]:
        return pulumi.get(self, "jdbc_treat_timestamp_ntz_as_utcs")

    @jdbc_treat_timestamp_ntz_as_utcs.setter
    def jdbc_treat_timestamp_ntz_as_utcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterJdbcTreatTimestampNtzAsUtcArgs']]]]):
        pulumi.set(self, "jdbc_treat_timestamp_ntz_as_utcs", value)

    @property
    @pulumi.getter(name="jdbcUseSessionTimezones")
    def jdbc_use_session_timezones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterJdbcUseSessionTimezoneArgs']]]]:
        return pulumi.get(self, "jdbc_use_session_timezones")

    @jdbc_use_session_timezones.setter
    def jdbc_use_session_timezones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterJdbcUseSessionTimezoneArgs']]]]):
        pulumi.set(self, "jdbc_use_session_timezones", value)

    @property
    @pulumi.getter(name="jsonIndents")
    def json_indents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterJsonIndentArgs']]]]:
        return pulumi.get(self, "json_indents")

    @json_indents.setter
    def json_indents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterJsonIndentArgs']]]]):
        pulumi.set(self, "json_indents", value)

    @property
    @pulumi.getter(name="lockTimeouts")
    def lock_timeouts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterLockTimeoutArgs']]]]:
        return pulumi.get(self, "lock_timeouts")

    @lock_timeouts.setter
    def lock_timeouts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterLockTimeoutArgs']]]]):
        pulumi.set(self, "lock_timeouts", value)

    @property
    @pulumi.getter(name="logLevels")
    def log_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterLogLevelArgs']]]]:
        return pulumi.get(self, "log_levels")

    @log_levels.setter
    def log_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterLogLevelArgs']]]]):
        pulumi.set(self, "log_levels", value)

    @property
    @pulumi.getter(name="multiStatementCounts")
    def multi_statement_counts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterMultiStatementCountArgs']]]]:
        return pulumi.get(self, "multi_statement_counts")

    @multi_statement_counts.setter
    def multi_statement_counts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterMultiStatementCountArgs']]]]):
        pulumi.set(self, "multi_statement_counts", value)

    @property
    @pulumi.getter(name="networkPolicies")
    def network_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterNetworkPolicyArgs']]]]:
        return pulumi.get(self, "network_policies")

    @network_policies.setter
    def network_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterNetworkPolicyArgs']]]]):
        pulumi.set(self, "network_policies", value)

    @property
    @pulumi.getter(name="noorderSequenceAsDefaults")
    def noorder_sequence_as_defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterNoorderSequenceAsDefaultArgs']]]]:
        return pulumi.get(self, "noorder_sequence_as_defaults")

    @noorder_sequence_as_defaults.setter
    def noorder_sequence_as_defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterNoorderSequenceAsDefaultArgs']]]]):
        pulumi.set(self, "noorder_sequence_as_defaults", value)

    @property
    @pulumi.getter(name="odbcTreatDecimalAsInts")
    def odbc_treat_decimal_as_ints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterOdbcTreatDecimalAsIntArgs']]]]:
        return pulumi.get(self, "odbc_treat_decimal_as_ints")

    @odbc_treat_decimal_as_ints.setter
    def odbc_treat_decimal_as_ints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterOdbcTreatDecimalAsIntArgs']]]]):
        pulumi.set(self, "odbc_treat_decimal_as_ints", value)

    @property
    @pulumi.getter(name="preventUnloadToInternalStages")
    def prevent_unload_to_internal_stages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterPreventUnloadToInternalStageArgs']]]]:
        return pulumi.get(self, "prevent_unload_to_internal_stages")

    @prevent_unload_to_internal_stages.setter
    def prevent_unload_to_internal_stages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterPreventUnloadToInternalStageArgs']]]]):
        pulumi.set(self, "prevent_unload_to_internal_stages", value)

    @property
    @pulumi.getter(name="queryTags")
    def query_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterQueryTagArgs']]]]:
        return pulumi.get(self, "query_tags")

    @query_tags.setter
    def query_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterQueryTagArgs']]]]):
        pulumi.set(self, "query_tags", value)

    @property
    @pulumi.getter(name="quotedIdentifiersIgnoreCases")
    def quoted_identifiers_ignore_cases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterQuotedIdentifiersIgnoreCaseArgs']]]]:
        return pulumi.get(self, "quoted_identifiers_ignore_cases")

    @quoted_identifiers_ignore_cases.setter
    def quoted_identifiers_ignore_cases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterQuotedIdentifiersIgnoreCaseArgs']]]]):
        pulumi.set(self, "quoted_identifiers_ignore_cases", value)

    @property
    @pulumi.getter(name="rowsPerResultsets")
    def rows_per_resultsets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterRowsPerResultsetArgs']]]]:
        return pulumi.get(self, "rows_per_resultsets")

    @rows_per_resultsets.setter
    def rows_per_resultsets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterRowsPerResultsetArgs']]]]):
        pulumi.set(self, "rows_per_resultsets", value)

    @property
    @pulumi.getter(name="s3StageVpceDnsNames")
    def s3_stage_vpce_dns_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterS3StageVpceDnsNameArgs']]]]:
        return pulumi.get(self, "s3_stage_vpce_dns_names")

    @s3_stage_vpce_dns_names.setter
    def s3_stage_vpce_dns_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterS3StageVpceDnsNameArgs']]]]):
        pulumi.set(self, "s3_stage_vpce_dns_names", value)

    @property
    @pulumi.getter(name="searchPaths")
    def search_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterSearchPathArgs']]]]:
        return pulumi.get(self, "search_paths")

    @search_paths.setter
    def search_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterSearchPathArgs']]]]):
        pulumi.set(self, "search_paths", value)

    @property
    @pulumi.getter(name="simulatedDataSharingConsumers")
    def simulated_data_sharing_consumers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterSimulatedDataSharingConsumerArgs']]]]:
        return pulumi.get(self, "simulated_data_sharing_consumers")

    @simulated_data_sharing_consumers.setter
    def simulated_data_sharing_consumers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterSimulatedDataSharingConsumerArgs']]]]):
        pulumi.set(self, "simulated_data_sharing_consumers", value)

    @property
    @pulumi.getter(name="statementQueuedTimeoutInSeconds")
    def statement_queued_timeout_in_seconds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterStatementQueuedTimeoutInSecondArgs']]]]:
        return pulumi.get(self, "statement_queued_timeout_in_seconds")

    @statement_queued_timeout_in_seconds.setter
    def statement_queued_timeout_in_seconds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterStatementQueuedTimeoutInSecondArgs']]]]):
        pulumi.set(self, "statement_queued_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="statementTimeoutInSeconds")
    def statement_timeout_in_seconds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterStatementTimeoutInSecondArgs']]]]:
        return pulumi.get(self, "statement_timeout_in_seconds")

    @statement_timeout_in_seconds.setter
    def statement_timeout_in_seconds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterStatementTimeoutInSecondArgs']]]]):
        pulumi.set(self, "statement_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="strictJsonOutputs")
    def strict_json_outputs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterStrictJsonOutputArgs']]]]:
        return pulumi.get(self, "strict_json_outputs")

    @strict_json_outputs.setter
    def strict_json_outputs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterStrictJsonOutputArgs']]]]):
        pulumi.set(self, "strict_json_outputs", value)

    @property
    @pulumi.getter(name="timeInputFormats")
    def time_input_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimeInputFormatArgs']]]]:
        return pulumi.get(self, "time_input_formats")

    @time_input_formats.setter
    def time_input_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimeInputFormatArgs']]]]):
        pulumi.set(self, "time_input_formats", value)

    @property
    @pulumi.getter(name="timeOutputFormats")
    def time_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimeOutputFormatArgs']]]]:
        return pulumi.get(self, "time_output_formats")

    @time_output_formats.setter
    def time_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimeOutputFormatArgs']]]]):
        pulumi.set(self, "time_output_formats", value)

    @property
    @pulumi.getter(name="timestampDayIsAlways24hs")
    def timestamp_day_is_always24hs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampDayIsAlways24hArgs']]]]:
        return pulumi.get(self, "timestamp_day_is_always24hs")

    @timestamp_day_is_always24hs.setter
    def timestamp_day_is_always24hs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampDayIsAlways24hArgs']]]]):
        pulumi.set(self, "timestamp_day_is_always24hs", value)

    @property
    @pulumi.getter(name="timestampInputFormats")
    def timestamp_input_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampInputFormatArgs']]]]:
        return pulumi.get(self, "timestamp_input_formats")

    @timestamp_input_formats.setter
    def timestamp_input_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampInputFormatArgs']]]]):
        pulumi.set(self, "timestamp_input_formats", value)

    @property
    @pulumi.getter(name="timestampLtzOutputFormats")
    def timestamp_ltz_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampLtzOutputFormatArgs']]]]:
        return pulumi.get(self, "timestamp_ltz_output_formats")

    @timestamp_ltz_output_formats.setter
    def timestamp_ltz_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampLtzOutputFormatArgs']]]]):
        pulumi.set(self, "timestamp_ltz_output_formats", value)

    @property
    @pulumi.getter(name="timestampNtzOutputFormats")
    def timestamp_ntz_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampNtzOutputFormatArgs']]]]:
        return pulumi.get(self, "timestamp_ntz_output_formats")

    @timestamp_ntz_output_formats.setter
    def timestamp_ntz_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampNtzOutputFormatArgs']]]]):
        pulumi.set(self, "timestamp_ntz_output_formats", value)

    @property
    @pulumi.getter(name="timestampOutputFormats")
    def timestamp_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampOutputFormatArgs']]]]:
        return pulumi.get(self, "timestamp_output_formats")

    @timestamp_output_formats.setter
    def timestamp_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampOutputFormatArgs']]]]):
        pulumi.set(self, "timestamp_output_formats", value)

    @property
    @pulumi.getter(name="timestampTypeMappings")
    def timestamp_type_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampTypeMappingArgs']]]]:
        return pulumi.get(self, "timestamp_type_mappings")

    @timestamp_type_mappings.setter
    def timestamp_type_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampTypeMappingArgs']]]]):
        pulumi.set(self, "timestamp_type_mappings", value)

    @property
    @pulumi.getter(name="timestampTzOutputFormats")
    def timestamp_tz_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampTzOutputFormatArgs']]]]:
        return pulumi.get(self, "timestamp_tz_output_formats")

    @timestamp_tz_output_formats.setter
    def timestamp_tz_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimestampTzOutputFormatArgs']]]]):
        pulumi.set(self, "timestamp_tz_output_formats", value)

    @property
    @pulumi.getter
    def timezones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimezoneArgs']]]]:
        return pulumi.get(self, "timezones")

    @timezones.setter
    def timezones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTimezoneArgs']]]]):
        pulumi.set(self, "timezones", value)

    @property
    @pulumi.getter(name="traceLevels")
    def trace_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTraceLevelArgs']]]]:
        return pulumi.get(self, "trace_levels")

    @trace_levels.setter
    def trace_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTraceLevelArgs']]]]):
        pulumi.set(self, "trace_levels", value)

    @property
    @pulumi.getter(name="transactionAbortOnErrors")
    def transaction_abort_on_errors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTransactionAbortOnErrorArgs']]]]:
        return pulumi.get(self, "transaction_abort_on_errors")

    @transaction_abort_on_errors.setter
    def transaction_abort_on_errors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTransactionAbortOnErrorArgs']]]]):
        pulumi.set(self, "transaction_abort_on_errors", value)

    @property
    @pulumi.getter(name="transactionDefaultIsolationLevels")
    def transaction_default_isolation_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTransactionDefaultIsolationLevelArgs']]]]:
        return pulumi.get(self, "transaction_default_isolation_levels")

    @transaction_default_isolation_levels.setter
    def transaction_default_isolation_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTransactionDefaultIsolationLevelArgs']]]]):
        pulumi.set(self, "transaction_default_isolation_levels", value)

    @property
    @pulumi.getter(name="twoDigitCenturyStarts")
    def two_digit_century_starts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTwoDigitCenturyStartArgs']]]]:
        return pulumi.get(self, "two_digit_century_starts")

    @two_digit_century_starts.setter
    def two_digit_century_starts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterTwoDigitCenturyStartArgs']]]]):
        pulumi.set(self, "two_digit_century_starts", value)

    @property
    @pulumi.getter(name="unsupportedDdlActions")
    def unsupported_ddl_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterUnsupportedDdlActionArgs']]]]:
        return pulumi.get(self, "unsupported_ddl_actions")

    @unsupported_ddl_actions.setter
    def unsupported_ddl_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterUnsupportedDdlActionArgs']]]]):
        pulumi.set(self, "unsupported_ddl_actions", value)

    @property
    @pulumi.getter(name="useCachedResults")
    def use_cached_results(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterUseCachedResultArgs']]]]:
        return pulumi.get(self, "use_cached_results")

    @use_cached_results.setter
    def use_cached_results(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterUseCachedResultArgs']]]]):
        pulumi.set(self, "use_cached_results", value)

    @property
    @pulumi.getter(name="weekOfYearPolicies")
    def week_of_year_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterWeekOfYearPolicyArgs']]]]:
        return pulumi.get(self, "week_of_year_policies")

    @week_of_year_policies.setter
    def week_of_year_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterWeekOfYearPolicyArgs']]]]):
        pulumi.set(self, "week_of_year_policies", value)

    @property
    @pulumi.getter(name="weekStarts")
    def week_starts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterWeekStartArgs']]]]:
        return pulumi.get(self, "week_starts")

    @week_starts.setter
    def week_starts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterWeekStartArgs']]]]):
        pulumi.set(self, "week_starts", value)


if not MYPY:
    class ServiceUserParameterAbortDetachedQueryArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterAbortDetachedQueryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterAbortDetachedQueryArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterAutocommitArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterAutocommitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterAutocommitArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterBinaryInputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterBinaryInputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterBinaryInputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterBinaryOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterBinaryOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterBinaryOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterClientMemoryLimitArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterClientMemoryLimitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterClientMemoryLimitArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterClientMetadataRequestUseConnectionCtxArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterClientMetadataRequestUseConnectionCtxArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterClientMetadataRequestUseConnectionCtxArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterClientPrefetchThreadArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterClientPrefetchThreadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterClientPrefetchThreadArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterClientResultChunkSizeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterClientResultChunkSizeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterClientResultChunkSizeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterClientResultColumnCaseInsensitiveArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterClientResultColumnCaseInsensitiveArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterClientResultColumnCaseInsensitiveArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterClientSessionKeepAlifeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterClientSessionKeepAlifeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterClientSessionKeepAlifeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterClientSessionKeepAliveHeartbeatFrequencyArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterClientSessionKeepAliveHeartbeatFrequencyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterClientSessionKeepAliveHeartbeatFrequencyArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterClientTimestampTypeMappingArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterClientTimestampTypeMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterClientTimestampTypeMappingArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterDateInputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterDateInputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterDateInputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterDateOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterDateOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterDateOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterEnableUnloadPhysicalTypeOptimizationArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterEnableUnloadPhysicalTypeOptimizationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterEnableUnloadPhysicalTypeOptimizationArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterEnableUnredactedQuerySyntaxErrorArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterEnableUnredactedQuerySyntaxErrorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterEnableUnredactedQuerySyntaxErrorArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterErrorOnNondeterministicMergeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterErrorOnNondeterministicMergeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterErrorOnNondeterministicMergeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterErrorOnNondeterministicUpdateArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterErrorOnNondeterministicUpdateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterErrorOnNondeterministicUpdateArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterGeographyOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterGeographyOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterGeographyOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterGeometryOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterGeometryOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterGeometryOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterJdbcTreatDecimalAsIntArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterJdbcTreatDecimalAsIntArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterJdbcTreatDecimalAsIntArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterJdbcTreatTimestampNtzAsUtcArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterJdbcTreatTimestampNtzAsUtcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterJdbcTreatTimestampNtzAsUtcArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterJdbcUseSessionTimezoneArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterJdbcUseSessionTimezoneArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterJdbcUseSessionTimezoneArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterJsonIndentArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterJsonIndentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterJsonIndentArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterLockTimeoutArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterLockTimeoutArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterLockTimeoutArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterLogLevelArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterLogLevelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterLogLevelArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterMultiStatementCountArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterMultiStatementCountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterMultiStatementCountArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterNetworkPolicyArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterNetworkPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterNetworkPolicyArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterNoorderSequenceAsDefaultArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterNoorderSequenceAsDefaultArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterNoorderSequenceAsDefaultArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterOdbcTreatDecimalAsIntArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterOdbcTreatDecimalAsIntArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterOdbcTreatDecimalAsIntArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterPreventUnloadToInternalStageArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterPreventUnloadToInternalStageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterPreventUnloadToInternalStageArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterQueryTagArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterQueryTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterQueryTagArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterQuotedIdentifiersIgnoreCaseArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterQuotedIdentifiersIgnoreCaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterQuotedIdentifiersIgnoreCaseArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterRowsPerResultsetArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterRowsPerResultsetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterRowsPerResultsetArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterS3StageVpceDnsNameArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterS3StageVpceDnsNameArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterS3StageVpceDnsNameArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterSearchPathArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterSearchPathArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterSearchPathArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterSimulatedDataSharingConsumerArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterSimulatedDataSharingConsumerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterSimulatedDataSharingConsumerArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterStatementQueuedTimeoutInSecondArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterStatementQueuedTimeoutInSecondArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterStatementQueuedTimeoutInSecondArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterStatementTimeoutInSecondArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterStatementTimeoutInSecondArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterStatementTimeoutInSecondArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterStrictJsonOutputArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterStrictJsonOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterStrictJsonOutputArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterTimeInputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterTimeInputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterTimeInputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterTimeOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterTimeOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterTimeOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterTimestampDayIsAlways24hArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterTimestampDayIsAlways24hArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterTimestampDayIsAlways24hArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterTimestampInputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterTimestampInputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterTimestampInputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterTimestampLtzOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterTimestampLtzOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterTimestampLtzOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterTimestampNtzOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterTimestampNtzOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterTimestampNtzOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterTimestampOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterTimestampOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterTimestampOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterTimestampTypeMappingArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterTimestampTypeMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterTimestampTypeMappingArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterTimestampTzOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterTimestampTzOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterTimestampTzOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterTimezoneArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterTimezoneArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterTimezoneArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterTraceLevelArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterTraceLevelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterTraceLevelArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterTransactionAbortOnErrorArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterTransactionAbortOnErrorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterTransactionAbortOnErrorArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterTransactionDefaultIsolationLevelArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterTransactionDefaultIsolationLevelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterTransactionDefaultIsolationLevelArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterTwoDigitCenturyStartArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterTwoDigitCenturyStartArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterTwoDigitCenturyStartArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterUnsupportedDdlActionArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterUnsupportedDdlActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterUnsupportedDdlActionArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterUseCachedResultArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterUseCachedResultArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterUseCachedResultArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterWeekOfYearPolicyArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterWeekOfYearPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterWeekOfYearPolicyArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserParameterWeekStartArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserParameterWeekStartArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserParameterWeekStartArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServiceUserShowOutputArgsDict(TypedDict):
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        days_to_expiry: NotRequired[pulumi.Input[str]]
        default_namespace: NotRequired[pulumi.Input[str]]
        default_role: NotRequired[pulumi.Input[str]]
        default_secondary_roles: NotRequired[pulumi.Input[str]]
        default_warehouse: NotRequired[pulumi.Input[str]]
        disabled: NotRequired[pulumi.Input[bool]]
        display_name: NotRequired[pulumi.Input[str]]
        email: NotRequired[pulumi.Input[str]]
        expires_at_time: NotRequired[pulumi.Input[str]]
        ext_authn_duo: NotRequired[pulumi.Input[bool]]
        ext_authn_uid: NotRequired[pulumi.Input[str]]
        first_name: NotRequired[pulumi.Input[str]]
        has_mfa: NotRequired[pulumi.Input[bool]]
        has_password: NotRequired[pulumi.Input[bool]]
        has_rsa_public_key: NotRequired[pulumi.Input[bool]]
        last_name: NotRequired[pulumi.Input[str]]
        last_success_login: NotRequired[pulumi.Input[str]]
        locked_until_time: NotRequired[pulumi.Input[str]]
        login_name: NotRequired[pulumi.Input[str]]
        mins_to_bypass_mfa: NotRequired[pulumi.Input[str]]
        mins_to_unlock: NotRequired[pulumi.Input[str]]
        must_change_password: NotRequired[pulumi.Input[bool]]
        name: NotRequired[pulumi.Input[str]]
        owner: NotRequired[pulumi.Input[str]]
        snowflake_lock: NotRequired[pulumi.Input[bool]]
        type: NotRequired[pulumi.Input[str]]
elif False:
    ServiceUserShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceUserShowOutputArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 days_to_expiry: Optional[pulumi.Input[str]] = None,
                 default_namespace: Optional[pulumi.Input[str]] = None,
                 default_role: Optional[pulumi.Input[str]] = None,
                 default_secondary_roles: Optional[pulumi.Input[str]] = None,
                 default_warehouse: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 expires_at_time: Optional[pulumi.Input[str]] = None,
                 ext_authn_duo: Optional[pulumi.Input[bool]] = None,
                 ext_authn_uid: Optional[pulumi.Input[str]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 has_mfa: Optional[pulumi.Input[bool]] = None,
                 has_password: Optional[pulumi.Input[bool]] = None,
                 has_rsa_public_key: Optional[pulumi.Input[bool]] = None,
                 last_name: Optional[pulumi.Input[str]] = None,
                 last_success_login: Optional[pulumi.Input[str]] = None,
                 locked_until_time: Optional[pulumi.Input[str]] = None,
                 login_name: Optional[pulumi.Input[str]] = None,
                 mins_to_bypass_mfa: Optional[pulumi.Input[str]] = None,
                 mins_to_unlock: Optional[pulumi.Input[str]] = None,
                 must_change_password: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 snowflake_lock: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if days_to_expiry is not None:
            pulumi.set(__self__, "days_to_expiry", days_to_expiry)
        if default_namespace is not None:
            pulumi.set(__self__, "default_namespace", default_namespace)
        if default_role is not None:
            pulumi.set(__self__, "default_role", default_role)
        if default_secondary_roles is not None:
            pulumi.set(__self__, "default_secondary_roles", default_secondary_roles)
        if default_warehouse is not None:
            pulumi.set(__self__, "default_warehouse", default_warehouse)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if expires_at_time is not None:
            pulumi.set(__self__, "expires_at_time", expires_at_time)
        if ext_authn_duo is not None:
            pulumi.set(__self__, "ext_authn_duo", ext_authn_duo)
        if ext_authn_uid is not None:
            pulumi.set(__self__, "ext_authn_uid", ext_authn_uid)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if has_mfa is not None:
            pulumi.set(__self__, "has_mfa", has_mfa)
        if has_password is not None:
            pulumi.set(__self__, "has_password", has_password)
        if has_rsa_public_key is not None:
            pulumi.set(__self__, "has_rsa_public_key", has_rsa_public_key)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if last_success_login is not None:
            pulumi.set(__self__, "last_success_login", last_success_login)
        if locked_until_time is not None:
            pulumi.set(__self__, "locked_until_time", locked_until_time)
        if login_name is not None:
            pulumi.set(__self__, "login_name", login_name)
        if mins_to_bypass_mfa is not None:
            pulumi.set(__self__, "mins_to_bypass_mfa", mins_to_bypass_mfa)
        if mins_to_unlock is not None:
            pulumi.set(__self__, "mins_to_unlock", mins_to_unlock)
        if must_change_password is not None:
            pulumi.set(__self__, "must_change_password", must_change_password)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if snowflake_lock is not None:
            pulumi.set(__self__, "snowflake_lock", snowflake_lock)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="daysToExpiry")
    def days_to_expiry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "days_to_expiry")

    @days_to_expiry.setter
    def days_to_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "days_to_expiry", value)

    @property
    @pulumi.getter(name="defaultNamespace")
    def default_namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_namespace")

    @default_namespace.setter
    def default_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_namespace", value)

    @property
    @pulumi.getter(name="defaultRole")
    def default_role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_role")

    @default_role.setter
    def default_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_role", value)

    @property
    @pulumi.getter(name="defaultSecondaryRoles")
    def default_secondary_roles(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_secondary_roles")

    @default_secondary_roles.setter
    def default_secondary_roles(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_secondary_roles", value)

    @property
    @pulumi.getter(name="defaultWarehouse")
    def default_warehouse(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_warehouse")

    @default_warehouse.setter
    def default_warehouse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_warehouse", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="expiresAtTime")
    def expires_at_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expires_at_time")

    @expires_at_time.setter
    def expires_at_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires_at_time", value)

    @property
    @pulumi.getter(name="extAuthnDuo")
    def ext_authn_duo(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ext_authn_duo")

    @ext_authn_duo.setter
    def ext_authn_duo(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ext_authn_duo", value)

    @property
    @pulumi.getter(name="extAuthnUid")
    def ext_authn_uid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ext_authn_uid")

    @ext_authn_uid.setter
    def ext_authn_uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ext_authn_uid", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="hasMfa")
    def has_mfa(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "has_mfa")

    @has_mfa.setter
    def has_mfa(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_mfa", value)

    @property
    @pulumi.getter(name="hasPassword")
    def has_password(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "has_password")

    @has_password.setter
    def has_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_password", value)

    @property
    @pulumi.getter(name="hasRsaPublicKey")
    def has_rsa_public_key(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "has_rsa_public_key")

    @has_rsa_public_key.setter
    def has_rsa_public_key(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_rsa_public_key", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter(name="lastSuccessLogin")
    def last_success_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_success_login")

    @last_success_login.setter
    def last_success_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_success_login", value)

    @property
    @pulumi.getter(name="lockedUntilTime")
    def locked_until_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locked_until_time")

    @locked_until_time.setter
    def locked_until_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locked_until_time", value)

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_name")

    @login_name.setter
    def login_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_name", value)

    @property
    @pulumi.getter(name="minsToBypassMfa")
    def mins_to_bypass_mfa(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mins_to_bypass_mfa")

    @mins_to_bypass_mfa.setter
    def mins_to_bypass_mfa(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mins_to_bypass_mfa", value)

    @property
    @pulumi.getter(name="minsToUnlock")
    def mins_to_unlock(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mins_to_unlock")

    @mins_to_unlock.setter
    def mins_to_unlock(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mins_to_unlock", value)

    @property
    @pulumi.getter(name="mustChangePassword")
    def must_change_password(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "must_change_password")

    @must_change_password.setter
    def must_change_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "must_change_password", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="snowflakeLock")
    def snowflake_lock(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "snowflake_lock")

    @snowflake_lock.setter
    def snowflake_lock(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "snowflake_lock", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class StageTagArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Tag name, e.g. department.
        """
        value: pulumi.Input[str]
        """
        Tag value, e.g. marketing_info.
        """
        database: NotRequired[pulumi.Input[str]]
        """
        Name of the database that the tag was created in.
        """
        schema: NotRequired[pulumi.Input[str]]
        """
        Name of the schema that the tag was created in.
        """
elif False:
    StageTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StageTagArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 database: Optional[pulumi.Input[str]] = None,
                 schema: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name, e.g. department.
        :param pulumi.Input[str] value: Tag value, e.g. marketing_info.
        :param pulumi.Input[str] database: Name of the database that the tag was created in.
        :param pulumi.Input[str] schema: Name of the schema that the tag was created in.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Tag name, e.g. department.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Tag value, e.g. marketing_info.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the database that the tag was created in.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the schema that the tag was created in.
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema", value)


if not MYPY:
    class StreamOnDirectoryTableDescribeOutputArgsDict(TypedDict):
        base_tables: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        invalid_reason: NotRequired[pulumi.Input[str]]
        mode: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        owner: NotRequired[pulumi.Input[str]]
        owner_role_type: NotRequired[pulumi.Input[str]]
        schema_name: NotRequired[pulumi.Input[str]]
        source_type: NotRequired[pulumi.Input[str]]
        stale: NotRequired[pulumi.Input[bool]]
        stale_after: NotRequired[pulumi.Input[str]]
        table_name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
elif False:
    StreamOnDirectoryTableDescribeOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StreamOnDirectoryTableDescribeOutputArgs:
    def __init__(__self__, *,
                 base_tables: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 invalid_reason: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 owner_role_type: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 stale: Optional[pulumi.Input[bool]] = None,
                 stale_after: Optional[pulumi.Input[str]] = None,
                 table_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if base_tables is not None:
            pulumi.set(__self__, "base_tables", base_tables)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if invalid_reason is not None:
            pulumi.set(__self__, "invalid_reason", invalid_reason)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if stale is not None:
            pulumi.set(__self__, "stale", stale)
        if stale_after is not None:
            pulumi.set(__self__, "stale_after", stale_after)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="baseTables")
    def base_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "base_tables")

    @base_tables.setter
    def base_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "base_tables", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="invalidReason")
    def invalid_reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "invalid_reason")

    @invalid_reason.setter
    def invalid_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_reason", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_role_type")

    @owner_role_type.setter
    def owner_role_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_role_type", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def stale(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "stale")

    @stale.setter
    def stale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stale", value)

    @property
    @pulumi.getter(name="staleAfter")
    def stale_after(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stale_after")

    @stale_after.setter
    def stale_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stale_after", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class StreamOnDirectoryTableShowOutputArgsDict(TypedDict):
        base_tables: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        invalid_reason: NotRequired[pulumi.Input[str]]
        mode: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        owner: NotRequired[pulumi.Input[str]]
        owner_role_type: NotRequired[pulumi.Input[str]]
        schema_name: NotRequired[pulumi.Input[str]]
        source_type: NotRequired[pulumi.Input[str]]
        stale: NotRequired[pulumi.Input[bool]]
        stale_after: NotRequired[pulumi.Input[str]]
        table_name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
elif False:
    StreamOnDirectoryTableShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StreamOnDirectoryTableShowOutputArgs:
    def __init__(__self__, *,
                 base_tables: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 invalid_reason: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 owner_role_type: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 stale: Optional[pulumi.Input[bool]] = None,
                 stale_after: Optional[pulumi.Input[str]] = None,
                 table_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if base_tables is not None:
            pulumi.set(__self__, "base_tables", base_tables)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if invalid_reason is not None:
            pulumi.set(__self__, "invalid_reason", invalid_reason)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if stale is not None:
            pulumi.set(__self__, "stale", stale)
        if stale_after is not None:
            pulumi.set(__self__, "stale_after", stale_after)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="baseTables")
    def base_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "base_tables")

    @base_tables.setter
    def base_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "base_tables", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="invalidReason")
    def invalid_reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "invalid_reason")

    @invalid_reason.setter
    def invalid_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_reason", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_role_type")

    @owner_role_type.setter
    def owner_role_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_role_type", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def stale(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "stale")

    @stale.setter
    def stale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stale", value)

    @property
    @pulumi.getter(name="staleAfter")
    def stale_after(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stale_after")

    @stale_after.setter
    def stale_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stale_after", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class StreamOnExternalTableAtArgsDict(TypedDict):
        offset: NotRequired[pulumi.Input[str]]
        """
        Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        """
        statement: NotRequired[pulumi.Input[str]]
        """
        Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        """
        stream: NotRequired[pulumi.Input[str]]
        """
        Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        """
        timestamp: NotRequired[pulumi.Input[str]]
        """
        Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
elif False:
    StreamOnExternalTableAtArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StreamOnExternalTableAtArgs:
    def __init__(__self__, *,
                 offset: Optional[pulumi.Input[str]] = None,
                 statement: Optional[pulumi.Input[str]] = None,
                 stream: Optional[pulumi.Input[str]] = None,
                 timestamp: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] offset: Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        :param pulumi.Input[str] statement: Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        :param pulumi.Input[str] stream: Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        :param pulumi.Input[str] timestamp: Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if statement is not None:
            pulumi.set(__self__, "statement", statement)
        if stream is not None:
            pulumi.set(__self__, "stream", stream)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def offset(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        """
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter
    def statement(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        """
        return pulumi.get(self, "statement")

    @statement.setter
    def statement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "statement", value)

    @property
    @pulumi.getter
    def stream(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        """
        return pulumi.get(self, "stream")

    @stream.setter
    def stream(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream", value)

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
        return pulumi.get(self, "timestamp")

    @timestamp.setter
    def timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp", value)


if not MYPY:
    class StreamOnExternalTableBeforeArgsDict(TypedDict):
        offset: NotRequired[pulumi.Input[str]]
        """
        Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        """
        statement: NotRequired[pulumi.Input[str]]
        """
        Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        """
        stream: NotRequired[pulumi.Input[str]]
        """
        Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        """
        timestamp: NotRequired[pulumi.Input[str]]
        """
        Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
elif False:
    StreamOnExternalTableBeforeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StreamOnExternalTableBeforeArgs:
    def __init__(__self__, *,
                 offset: Optional[pulumi.Input[str]] = None,
                 statement: Optional[pulumi.Input[str]] = None,
                 stream: Optional[pulumi.Input[str]] = None,
                 timestamp: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] offset: Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        :param pulumi.Input[str] statement: Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        :param pulumi.Input[str] stream: Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        :param pulumi.Input[str] timestamp: Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if statement is not None:
            pulumi.set(__self__, "statement", statement)
        if stream is not None:
            pulumi.set(__self__, "stream", stream)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def offset(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        """
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter
    def statement(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        """
        return pulumi.get(self, "statement")

    @statement.setter
    def statement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "statement", value)

    @property
    @pulumi.getter
    def stream(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        """
        return pulumi.get(self, "stream")

    @stream.setter
    def stream(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream", value)

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
        return pulumi.get(self, "timestamp")

    @timestamp.setter
    def timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp", value)


if not MYPY:
    class StreamOnExternalTableDescribeOutputArgsDict(TypedDict):
        base_tables: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        invalid_reason: NotRequired[pulumi.Input[str]]
        mode: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        owner: NotRequired[pulumi.Input[str]]
        owner_role_type: NotRequired[pulumi.Input[str]]
        schema_name: NotRequired[pulumi.Input[str]]
        source_type: NotRequired[pulumi.Input[str]]
        stale: NotRequired[pulumi.Input[bool]]
        stale_after: NotRequired[pulumi.Input[str]]
        table_name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
elif False:
    StreamOnExternalTableDescribeOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StreamOnExternalTableDescribeOutputArgs:
    def __init__(__self__, *,
                 base_tables: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 invalid_reason: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 owner_role_type: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 stale: Optional[pulumi.Input[bool]] = None,
                 stale_after: Optional[pulumi.Input[str]] = None,
                 table_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if base_tables is not None:
            pulumi.set(__self__, "base_tables", base_tables)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if invalid_reason is not None:
            pulumi.set(__self__, "invalid_reason", invalid_reason)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if stale is not None:
            pulumi.set(__self__, "stale", stale)
        if stale_after is not None:
            pulumi.set(__self__, "stale_after", stale_after)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="baseTables")
    def base_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "base_tables")

    @base_tables.setter
    def base_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "base_tables", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="invalidReason")
    def invalid_reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "invalid_reason")

    @invalid_reason.setter
    def invalid_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_reason", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_role_type")

    @owner_role_type.setter
    def owner_role_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_role_type", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def stale(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "stale")

    @stale.setter
    def stale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stale", value)

    @property
    @pulumi.getter(name="staleAfter")
    def stale_after(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stale_after")

    @stale_after.setter
    def stale_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stale_after", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class StreamOnExternalTableShowOutputArgsDict(TypedDict):
        base_tables: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        invalid_reason: NotRequired[pulumi.Input[str]]
        mode: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        owner: NotRequired[pulumi.Input[str]]
        owner_role_type: NotRequired[pulumi.Input[str]]
        schema_name: NotRequired[pulumi.Input[str]]
        source_type: NotRequired[pulumi.Input[str]]
        stale: NotRequired[pulumi.Input[bool]]
        stale_after: NotRequired[pulumi.Input[str]]
        table_name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
elif False:
    StreamOnExternalTableShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StreamOnExternalTableShowOutputArgs:
    def __init__(__self__, *,
                 base_tables: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 invalid_reason: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 owner_role_type: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 stale: Optional[pulumi.Input[bool]] = None,
                 stale_after: Optional[pulumi.Input[str]] = None,
                 table_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if base_tables is not None:
            pulumi.set(__self__, "base_tables", base_tables)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if invalid_reason is not None:
            pulumi.set(__self__, "invalid_reason", invalid_reason)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if stale is not None:
            pulumi.set(__self__, "stale", stale)
        if stale_after is not None:
            pulumi.set(__self__, "stale_after", stale_after)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="baseTables")
    def base_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "base_tables")

    @base_tables.setter
    def base_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "base_tables", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="invalidReason")
    def invalid_reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "invalid_reason")

    @invalid_reason.setter
    def invalid_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_reason", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_role_type")

    @owner_role_type.setter
    def owner_role_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_role_type", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def stale(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "stale")

    @stale.setter
    def stale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stale", value)

    @property
    @pulumi.getter(name="staleAfter")
    def stale_after(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stale_after")

    @stale_after.setter
    def stale_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stale_after", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class StreamOnTableAtArgsDict(TypedDict):
        offset: NotRequired[pulumi.Input[str]]
        """
        Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        """
        statement: NotRequired[pulumi.Input[str]]
        """
        Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        """
        stream: NotRequired[pulumi.Input[str]]
        """
        Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        """
        timestamp: NotRequired[pulumi.Input[str]]
        """
        Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
elif False:
    StreamOnTableAtArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StreamOnTableAtArgs:
    def __init__(__self__, *,
                 offset: Optional[pulumi.Input[str]] = None,
                 statement: Optional[pulumi.Input[str]] = None,
                 stream: Optional[pulumi.Input[str]] = None,
                 timestamp: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] offset: Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        :param pulumi.Input[str] statement: Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        :param pulumi.Input[str] stream: Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        :param pulumi.Input[str] timestamp: Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if statement is not None:
            pulumi.set(__self__, "statement", statement)
        if stream is not None:
            pulumi.set(__self__, "stream", stream)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def offset(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        """
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter
    def statement(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        """
        return pulumi.get(self, "statement")

    @statement.setter
    def statement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "statement", value)

    @property
    @pulumi.getter
    def stream(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        """
        return pulumi.get(self, "stream")

    @stream.setter
    def stream(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream", value)

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
        return pulumi.get(self, "timestamp")

    @timestamp.setter
    def timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp", value)


if not MYPY:
    class StreamOnTableBeforeArgsDict(TypedDict):
        offset: NotRequired[pulumi.Input[str]]
        """
        Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        """
        statement: NotRequired[pulumi.Input[str]]
        """
        Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        """
        stream: NotRequired[pulumi.Input[str]]
        """
        Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        """
        timestamp: NotRequired[pulumi.Input[str]]
        """
        Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
elif False:
    StreamOnTableBeforeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StreamOnTableBeforeArgs:
    def __init__(__self__, *,
                 offset: Optional[pulumi.Input[str]] = None,
                 statement: Optional[pulumi.Input[str]] = None,
                 stream: Optional[pulumi.Input[str]] = None,
                 timestamp: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] offset: Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        :param pulumi.Input[str] statement: Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        :param pulumi.Input[str] stream: Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        :param pulumi.Input[str] timestamp: Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if statement is not None:
            pulumi.set(__self__, "statement", statement)
        if stream is not None:
            pulumi.set(__self__, "stream", stream)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def offset(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        """
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter
    def statement(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        """
        return pulumi.get(self, "statement")

    @statement.setter
    def statement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "statement", value)

    @property
    @pulumi.getter
    def stream(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        """
        return pulumi.get(self, "stream")

    @stream.setter
    def stream(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream", value)

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
        return pulumi.get(self, "timestamp")

    @timestamp.setter
    def timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp", value)


if not MYPY:
    class StreamOnTableDescribeOutputArgsDict(TypedDict):
        base_tables: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        invalid_reason: NotRequired[pulumi.Input[str]]
        mode: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        owner: NotRequired[pulumi.Input[str]]
        owner_role_type: NotRequired[pulumi.Input[str]]
        schema_name: NotRequired[pulumi.Input[str]]
        source_type: NotRequired[pulumi.Input[str]]
        stale: NotRequired[pulumi.Input[bool]]
        stale_after: NotRequired[pulumi.Input[str]]
        table_name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
elif False:
    StreamOnTableDescribeOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StreamOnTableDescribeOutputArgs:
    def __init__(__self__, *,
                 base_tables: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 invalid_reason: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 owner_role_type: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 stale: Optional[pulumi.Input[bool]] = None,
                 stale_after: Optional[pulumi.Input[str]] = None,
                 table_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if base_tables is not None:
            pulumi.set(__self__, "base_tables", base_tables)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if invalid_reason is not None:
            pulumi.set(__self__, "invalid_reason", invalid_reason)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if stale is not None:
            pulumi.set(__self__, "stale", stale)
        if stale_after is not None:
            pulumi.set(__self__, "stale_after", stale_after)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="baseTables")
    def base_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "base_tables")

    @base_tables.setter
    def base_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "base_tables", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="invalidReason")
    def invalid_reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "invalid_reason")

    @invalid_reason.setter
    def invalid_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_reason", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_role_type")

    @owner_role_type.setter
    def owner_role_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_role_type", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def stale(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "stale")

    @stale.setter
    def stale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stale", value)

    @property
    @pulumi.getter(name="staleAfter")
    def stale_after(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stale_after")

    @stale_after.setter
    def stale_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stale_after", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class StreamOnTableShowOutputArgsDict(TypedDict):
        base_tables: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        invalid_reason: NotRequired[pulumi.Input[str]]
        mode: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        owner: NotRequired[pulumi.Input[str]]
        owner_role_type: NotRequired[pulumi.Input[str]]
        schema_name: NotRequired[pulumi.Input[str]]
        source_type: NotRequired[pulumi.Input[str]]
        stale: NotRequired[pulumi.Input[bool]]
        stale_after: NotRequired[pulumi.Input[str]]
        table_name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
elif False:
    StreamOnTableShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StreamOnTableShowOutputArgs:
    def __init__(__self__, *,
                 base_tables: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 invalid_reason: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 owner_role_type: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 stale: Optional[pulumi.Input[bool]] = None,
                 stale_after: Optional[pulumi.Input[str]] = None,
                 table_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if base_tables is not None:
            pulumi.set(__self__, "base_tables", base_tables)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if invalid_reason is not None:
            pulumi.set(__self__, "invalid_reason", invalid_reason)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if stale is not None:
            pulumi.set(__self__, "stale", stale)
        if stale_after is not None:
            pulumi.set(__self__, "stale_after", stale_after)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="baseTables")
    def base_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "base_tables")

    @base_tables.setter
    def base_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "base_tables", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="invalidReason")
    def invalid_reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "invalid_reason")

    @invalid_reason.setter
    def invalid_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_reason", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_role_type")

    @owner_role_type.setter
    def owner_role_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_role_type", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def stale(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "stale")

    @stale.setter
    def stale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stale", value)

    @property
    @pulumi.getter(name="staleAfter")
    def stale_after(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stale_after")

    @stale_after.setter
    def stale_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stale_after", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class StreamOnViewAtArgsDict(TypedDict):
        offset: NotRequired[pulumi.Input[str]]
        """
        Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        """
        statement: NotRequired[pulumi.Input[str]]
        """
        Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        """
        stream: NotRequired[pulumi.Input[str]]
        """
        Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        """
        timestamp: NotRequired[pulumi.Input[str]]
        """
        Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
elif False:
    StreamOnViewAtArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StreamOnViewAtArgs:
    def __init__(__self__, *,
                 offset: Optional[pulumi.Input[str]] = None,
                 statement: Optional[pulumi.Input[str]] = None,
                 stream: Optional[pulumi.Input[str]] = None,
                 timestamp: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] offset: Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        :param pulumi.Input[str] statement: Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        :param pulumi.Input[str] stream: Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        :param pulumi.Input[str] timestamp: Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if statement is not None:
            pulumi.set(__self__, "statement", statement)
        if stream is not None:
            pulumi.set(__self__, "stream", stream)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def offset(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        """
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter
    def statement(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        """
        return pulumi.get(self, "statement")

    @statement.setter
    def statement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "statement", value)

    @property
    @pulumi.getter
    def stream(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        """
        return pulumi.get(self, "stream")

    @stream.setter
    def stream(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream", value)

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
        return pulumi.get(self, "timestamp")

    @timestamp.setter
    def timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp", value)


if not MYPY:
    class StreamOnViewBeforeArgsDict(TypedDict):
        offset: NotRequired[pulumi.Input[str]]
        """
        Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        """
        statement: NotRequired[pulumi.Input[str]]
        """
        Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        """
        stream: NotRequired[pulumi.Input[str]]
        """
        Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        """
        timestamp: NotRequired[pulumi.Input[str]]
        """
        Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
elif False:
    StreamOnViewBeforeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StreamOnViewBeforeArgs:
    def __init__(__self__, *,
                 offset: Optional[pulumi.Input[str]] = None,
                 statement: Optional[pulumi.Input[str]] = None,
                 stream: Optional[pulumi.Input[str]] = None,
                 timestamp: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] offset: Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        :param pulumi.Input[str] statement: Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        :param pulumi.Input[str] stream: Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        :param pulumi.Input[str] timestamp: Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if statement is not None:
            pulumi.set(__self__, "statement", statement)
        if stream is not None:
            pulumi.set(__self__, "stream", stream)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def offset(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
        """
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter
    def statement(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
        """
        return pulumi.get(self, "statement")

    @statement.setter
    def statement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "statement", value)

    @property
    @pulumi.getter
    def stream(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
        """
        return pulumi.get(self, "stream")

    @stream.setter
    def stream(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream", value)

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
        """
        return pulumi.get(self, "timestamp")

    @timestamp.setter
    def timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp", value)


if not MYPY:
    class StreamOnViewDescribeOutputArgsDict(TypedDict):
        base_tables: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        invalid_reason: NotRequired[pulumi.Input[str]]
        mode: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        owner: NotRequired[pulumi.Input[str]]
        owner_role_type: NotRequired[pulumi.Input[str]]
        schema_name: NotRequired[pulumi.Input[str]]
        source_type: NotRequired[pulumi.Input[str]]
        stale: NotRequired[pulumi.Input[bool]]
        stale_after: NotRequired[pulumi.Input[str]]
        table_name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
elif False:
    StreamOnViewDescribeOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StreamOnViewDescribeOutputArgs:
    def __init__(__self__, *,
                 base_tables: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 invalid_reason: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 owner_role_type: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 stale: Optional[pulumi.Input[bool]] = None,
                 stale_after: Optional[pulumi.Input[str]] = None,
                 table_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if base_tables is not None:
            pulumi.set(__self__, "base_tables", base_tables)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if invalid_reason is not None:
            pulumi.set(__self__, "invalid_reason", invalid_reason)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if stale is not None:
            pulumi.set(__self__, "stale", stale)
        if stale_after is not None:
            pulumi.set(__self__, "stale_after", stale_after)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="baseTables")
    def base_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "base_tables")

    @base_tables.setter
    def base_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "base_tables", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="invalidReason")
    def invalid_reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "invalid_reason")

    @invalid_reason.setter
    def invalid_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_reason", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_role_type")

    @owner_role_type.setter
    def owner_role_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_role_type", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def stale(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "stale")

    @stale.setter
    def stale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stale", value)

    @property
    @pulumi.getter(name="staleAfter")
    def stale_after(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stale_after")

    @stale_after.setter
    def stale_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stale_after", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class StreamOnViewShowOutputArgsDict(TypedDict):
        base_tables: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        invalid_reason: NotRequired[pulumi.Input[str]]
        mode: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        owner: NotRequired[pulumi.Input[str]]
        owner_role_type: NotRequired[pulumi.Input[str]]
        schema_name: NotRequired[pulumi.Input[str]]
        source_type: NotRequired[pulumi.Input[str]]
        stale: NotRequired[pulumi.Input[bool]]
        stale_after: NotRequired[pulumi.Input[str]]
        table_name: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
elif False:
    StreamOnViewShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StreamOnViewShowOutputArgs:
    def __init__(__self__, *,
                 base_tables: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 invalid_reason: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 owner_role_type: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 stale: Optional[pulumi.Input[bool]] = None,
                 stale_after: Optional[pulumi.Input[str]] = None,
                 table_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if base_tables is not None:
            pulumi.set(__self__, "base_tables", base_tables)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if invalid_reason is not None:
            pulumi.set(__self__, "invalid_reason", invalid_reason)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if stale is not None:
            pulumi.set(__self__, "stale", stale)
        if stale_after is not None:
            pulumi.set(__self__, "stale_after", stale_after)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="baseTables")
    def base_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "base_tables")

    @base_tables.setter
    def base_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "base_tables", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="invalidReason")
    def invalid_reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "invalid_reason")

    @invalid_reason.setter
    def invalid_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_reason", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_role_type")

    @owner_role_type.setter
    def owner_role_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_role_type", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def stale(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "stale")

    @stale.setter
    def stale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stale", value)

    @property
    @pulumi.getter(name="staleAfter")
    def stale_after(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stale_after")

    @stale_after.setter
    def stale_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stale_after", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class StreamlitDescribeOutputArgsDict(TypedDict):
        default_packages: NotRequired[pulumi.Input[str]]
        external_access_integrations: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        external_access_secrets: NotRequired[pulumi.Input[str]]
        import_urls: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        main_file: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        query_warehouse: NotRequired[pulumi.Input[str]]
        root_location: NotRequired[pulumi.Input[str]]
        title: NotRequired[pulumi.Input[str]]
        url_id: NotRequired[pulumi.Input[str]]
        user_packages: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    StreamlitDescribeOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StreamlitDescribeOutputArgs:
    def __init__(__self__, *,
                 default_packages: Optional[pulumi.Input[str]] = None,
                 external_access_integrations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_access_secrets: Optional[pulumi.Input[str]] = None,
                 import_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 main_file: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 query_warehouse: Optional[pulumi.Input[str]] = None,
                 root_location: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 url_id: Optional[pulumi.Input[str]] = None,
                 user_packages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if default_packages is not None:
            pulumi.set(__self__, "default_packages", default_packages)
        if external_access_integrations is not None:
            pulumi.set(__self__, "external_access_integrations", external_access_integrations)
        if external_access_secrets is not None:
            pulumi.set(__self__, "external_access_secrets", external_access_secrets)
        if import_urls is not None:
            pulumi.set(__self__, "import_urls", import_urls)
        if main_file is not None:
            pulumi.set(__self__, "main_file", main_file)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if query_warehouse is not None:
            pulumi.set(__self__, "query_warehouse", query_warehouse)
        if root_location is not None:
            pulumi.set(__self__, "root_location", root_location)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if url_id is not None:
            pulumi.set(__self__, "url_id", url_id)
        if user_packages is not None:
            pulumi.set(__self__, "user_packages", user_packages)

    @property
    @pulumi.getter(name="defaultPackages")
    def default_packages(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_packages")

    @default_packages.setter
    def default_packages(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_packages", value)

    @property
    @pulumi.getter(name="externalAccessIntegrations")
    def external_access_integrations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "external_access_integrations")

    @external_access_integrations.setter
    def external_access_integrations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_access_integrations", value)

    @property
    @pulumi.getter(name="externalAccessSecrets")
    def external_access_secrets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_access_secrets")

    @external_access_secrets.setter
    def external_access_secrets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_access_secrets", value)

    @property
    @pulumi.getter(name="importUrls")
    def import_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "import_urls")

    @import_urls.setter
    def import_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "import_urls", value)

    @property
    @pulumi.getter(name="mainFile")
    def main_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "main_file")

    @main_file.setter
    def main_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "main_file", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="queryWarehouse")
    def query_warehouse(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_warehouse")

    @query_warehouse.setter
    def query_warehouse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_warehouse", value)

    @property
    @pulumi.getter(name="rootLocation")
    def root_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "root_location")

    @root_location.setter
    def root_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_location", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="urlId")
    def url_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_id")

    @url_id.setter
    def url_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_id", value)

    @property
    @pulumi.getter(name="userPackages")
    def user_packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "user_packages")

    @user_packages.setter
    def user_packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_packages", value)


if not MYPY:
    class StreamlitShowOutputArgsDict(TypedDict):
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        owner: NotRequired[pulumi.Input[str]]
        owner_role_type: NotRequired[pulumi.Input[str]]
        query_warehouse: NotRequired[pulumi.Input[str]]
        schema_name: NotRequired[pulumi.Input[str]]
        title: NotRequired[pulumi.Input[str]]
        url_id: NotRequired[pulumi.Input[str]]
elif False:
    StreamlitShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StreamlitShowOutputArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 owner_role_type: Optional[pulumi.Input[str]] = None,
                 query_warehouse: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 url_id: Optional[pulumi.Input[str]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if query_warehouse is not None:
            pulumi.set(__self__, "query_warehouse", query_warehouse)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if url_id is not None:
            pulumi.set(__self__, "url_id", url_id)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_role_type")

    @owner_role_type.setter
    def owner_role_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_role_type", value)

    @property
    @pulumi.getter(name="queryWarehouse")
    def query_warehouse(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_warehouse")

    @query_warehouse.setter
    def query_warehouse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_warehouse", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="urlId")
    def url_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_id")

    @url_id.setter
    def url_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_id", value)


if not MYPY:
    class TableColumnArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Column name
        """
        type: pulumi.Input[str]
        """
        Column type, e.g. VARIANT. For a full list of column types, see [Summary of Data Types](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
        """
        collate: NotRequired[pulumi.Input[str]]
        """
        Column collation, e.g. utf8
        """
        comment: NotRequired[pulumi.Input[str]]
        """
        Column comment
        """
        default: NotRequired[pulumi.Input['TableColumnDefaultArgsDict']]
        """
        Defines the column default value; note due to limitations of Snowflake's ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied
        """
        identity: NotRequired[pulumi.Input['TableColumnIdentityArgsDict']]
        """
        Defines the identity start/step values for a column. **Note** Identity/default are mutually exclusive.
        """
        masking_policy: NotRequired[pulumi.Input[str]]
        """
        Masking policy to apply on column. It has to be a fully qualified name.
        """
        nullable: NotRequired[pulumi.Input[bool]]
        """
        Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
        """
        schema_evolution_record: NotRequired[pulumi.Input[str]]
        """
        Record of schema evolution.
        """
elif False:
    TableColumnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TableColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 collate: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 default: Optional[pulumi.Input['TableColumnDefaultArgs']] = None,
                 identity: Optional[pulumi.Input['TableColumnIdentityArgs']] = None,
                 masking_policy: Optional[pulumi.Input[str]] = None,
                 nullable: Optional[pulumi.Input[bool]] = None,
                 schema_evolution_record: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Column name
        :param pulumi.Input[str] type: Column type, e.g. VARIANT. For a full list of column types, see [Summary of Data Types](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
        :param pulumi.Input[str] collate: Column collation, e.g. utf8
        :param pulumi.Input[str] comment: Column comment
        :param pulumi.Input['TableColumnDefaultArgs'] default: Defines the column default value; note due to limitations of Snowflake's ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied
        :param pulumi.Input['TableColumnIdentityArgs'] identity: Defines the identity start/step values for a column. **Note** Identity/default are mutually exclusive.
        :param pulumi.Input[str] masking_policy: Masking policy to apply on column. It has to be a fully qualified name.
        :param pulumi.Input[bool] nullable: Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
        :param pulumi.Input[str] schema_evolution_record: Record of schema evolution.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if collate is not None:
            pulumi.set(__self__, "collate", collate)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)
        if masking_policy is not None:
            pulumi.set(__self__, "masking_policy", masking_policy)
        if nullable is not None:
            pulumi.set(__self__, "nullable", nullable)
        if schema_evolution_record is not None:
            pulumi.set(__self__, "schema_evolution_record", schema_evolution_record)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Column name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Column type, e.g. VARIANT. For a full list of column types, see [Summary of Data Types](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def collate(self) -> Optional[pulumi.Input[str]]:
        """
        Column collation, e.g. utf8
        """
        return pulumi.get(self, "collate")

    @collate.setter
    def collate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collate", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Column comment
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input['TableColumnDefaultArgs']]:
        """
        Defines the column default value; note due to limitations of Snowflake's ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input['TableColumnDefaultArgs']]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['TableColumnIdentityArgs']]:
        """
        Defines the identity start/step values for a column. **Note** Identity/default are mutually exclusive.
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['TableColumnIdentityArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter(name="maskingPolicy")
    def masking_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Masking policy to apply on column. It has to be a fully qualified name.
        """
        return pulumi.get(self, "masking_policy")

    @masking_policy.setter
    def masking_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "masking_policy", value)

    @property
    @pulumi.getter
    def nullable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
        """
        return pulumi.get(self, "nullable")

    @nullable.setter
    def nullable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nullable", value)

    @property
    @pulumi.getter(name="schemaEvolutionRecord")
    def schema_evolution_record(self) -> Optional[pulumi.Input[str]]:
        """
        Record of schema evolution.
        """
        return pulumi.get(self, "schema_evolution_record")

    @schema_evolution_record.setter
    def schema_evolution_record(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_evolution_record", value)


if not MYPY:
    class TableColumnDefaultArgsDict(TypedDict):
        constant: NotRequired[pulumi.Input[str]]
        """
        The default constant value for the column
        """
        expression: NotRequired[pulumi.Input[str]]
        """
        The default expression value for the column
        """
        sequence: NotRequired[pulumi.Input[str]]
        """
        The default sequence to use for the column
        """
elif False:
    TableColumnDefaultArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TableColumnDefaultArgs:
    def __init__(__self__, *,
                 constant: Optional[pulumi.Input[str]] = None,
                 expression: Optional[pulumi.Input[str]] = None,
                 sequence: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] constant: The default constant value for the column
        :param pulumi.Input[str] expression: The default expression value for the column
        :param pulumi.Input[str] sequence: The default sequence to use for the column
        """
        if constant is not None:
            pulumi.set(__self__, "constant", constant)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if sequence is not None:
            pulumi.set(__self__, "sequence", sequence)

    @property
    @pulumi.getter
    def constant(self) -> Optional[pulumi.Input[str]]:
        """
        The default constant value for the column
        """
        return pulumi.get(self, "constant")

    @constant.setter
    def constant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "constant", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        The default expression value for the column
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def sequence(self) -> Optional[pulumi.Input[str]]:
        """
        The default sequence to use for the column
        """
        return pulumi.get(self, "sequence")

    @sequence.setter
    def sequence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sequence", value)


if not MYPY:
    class TableColumnIdentityArgsDict(TypedDict):
        start_num: NotRequired[pulumi.Input[int]]
        """
        The number to start incrementing at.
        """
        step_num: NotRequired[pulumi.Input[int]]
        """
        Step size to increment by.
        """
elif False:
    TableColumnIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TableColumnIdentityArgs:
    def __init__(__self__, *,
                 start_num: Optional[pulumi.Input[int]] = None,
                 step_num: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] start_num: The number to start incrementing at.
        :param pulumi.Input[int] step_num: Step size to increment by.
        """
        if start_num is not None:
            pulumi.set(__self__, "start_num", start_num)
        if step_num is not None:
            pulumi.set(__self__, "step_num", step_num)

    @property
    @pulumi.getter(name="startNum")
    def start_num(self) -> Optional[pulumi.Input[int]]:
        """
        The number to start incrementing at.
        """
        return pulumi.get(self, "start_num")

    @start_num.setter
    def start_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_num", value)

    @property
    @pulumi.getter(name="stepNum")
    def step_num(self) -> Optional[pulumi.Input[int]]:
        """
        Step size to increment by.
        """
        return pulumi.get(self, "step_num")

    @step_num.setter
    def step_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "step_num", value)


if not MYPY:
    class TableConstraintForeignKeyPropertiesArgsDict(TypedDict):
        references: pulumi.Input['TableConstraintForeignKeyPropertiesReferencesArgsDict']
        """
        The table and columns that the foreign key references.
        """
        match: NotRequired[pulumi.Input[str]]
        """
        The match type for the foreign key. Not applicable for primary/unique keys
        """
        on_delete: NotRequired[pulumi.Input[str]]
        """
        Specifies the action performed when the primary/unique key for the foreign key is deleted. Not applicable for primary/unique keys
        """
        on_update: NotRequired[pulumi.Input[str]]
        """
        Specifies the action performed when the primary/unique key for the foreign key is updated. Not applicable for primary/unique keys
        """
elif False:
    TableConstraintForeignKeyPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TableConstraintForeignKeyPropertiesArgs:
    def __init__(__self__, *,
                 references: pulumi.Input['TableConstraintForeignKeyPropertiesReferencesArgs'],
                 match: Optional[pulumi.Input[str]] = None,
                 on_delete: Optional[pulumi.Input[str]] = None,
                 on_update: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['TableConstraintForeignKeyPropertiesReferencesArgs'] references: The table and columns that the foreign key references.
        :param pulumi.Input[str] match: The match type for the foreign key. Not applicable for primary/unique keys
        :param pulumi.Input[str] on_delete: Specifies the action performed when the primary/unique key for the foreign key is deleted. Not applicable for primary/unique keys
        :param pulumi.Input[str] on_update: Specifies the action performed when the primary/unique key for the foreign key is updated. Not applicable for primary/unique keys
        """
        pulumi.set(__self__, "references", references)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if on_delete is not None:
            pulumi.set(__self__, "on_delete", on_delete)
        if on_update is not None:
            pulumi.set(__self__, "on_update", on_update)

    @property
    @pulumi.getter
    def references(self) -> pulumi.Input['TableConstraintForeignKeyPropertiesReferencesArgs']:
        """
        The table and columns that the foreign key references.
        """
        return pulumi.get(self, "references")

    @references.setter
    def references(self, value: pulumi.Input['TableConstraintForeignKeyPropertiesReferencesArgs']):
        pulumi.set(self, "references", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        """
        The match type for the foreign key. Not applicable for primary/unique keys
        """
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter(name="onDelete")
    def on_delete(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the action performed when the primary/unique key for the foreign key is deleted. Not applicable for primary/unique keys
        """
        return pulumi.get(self, "on_delete")

    @on_delete.setter
    def on_delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "on_delete", value)

    @property
    @pulumi.getter(name="onUpdate")
    def on_update(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the action performed when the primary/unique key for the foreign key is updated. Not applicable for primary/unique keys
        """
        return pulumi.get(self, "on_update")

    @on_update.setter
    def on_update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "on_update", value)


if not MYPY:
    class TableConstraintForeignKeyPropertiesReferencesArgsDict(TypedDict):
        columns: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        Columns to use in foreign key reference
        """
        table_id: pulumi.Input[str]
        """
        Name of constraint
        """
elif False:
    TableConstraintForeignKeyPropertiesReferencesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TableConstraintForeignKeyPropertiesReferencesArgs:
    def __init__(__self__, *,
                 columns: pulumi.Input[Sequence[pulumi.Input[str]]],
                 table_id: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] columns: Columns to use in foreign key reference
        :param pulumi.Input[str] table_id: Name of constraint
        """
        pulumi.set(__self__, "columns", columns)
        pulumi.set(__self__, "table_id", table_id)

    @property
    @pulumi.getter
    def columns(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Columns to use in foreign key reference
        """
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter(name="tableId")
    def table_id(self) -> pulumi.Input[str]:
        """
        Name of constraint
        """
        return pulumi.get(self, "table_id")

    @table_id.setter
    def table_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "table_id", value)


if not MYPY:
    class TablePrimaryKeyArgsDict(TypedDict):
        keys: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        Columns to use in primary key
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of constraint
        """
elif False:
    TablePrimaryKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TablePrimaryKeyArgs:
    def __init__(__self__, *,
                 keys: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] keys: Columns to use in primary key
        :param pulumi.Input[str] name: Name of constraint
        """
        pulumi.set(__self__, "keys", keys)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def keys(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Columns to use in primary key
        """
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "keys", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of constraint
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class TableTagArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Tag name, e.g. department.
        """
        value: pulumi.Input[str]
        """
        Tag value, e.g. marketing_info.
        """
        database: NotRequired[pulumi.Input[str]]
        """
        Name of the database that the tag was created in.
        """
        schema: NotRequired[pulumi.Input[str]]
        """
        Name of the schema that the tag was created in.
        """
elif False:
    TableTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TableTagArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 database: Optional[pulumi.Input[str]] = None,
                 schema: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name, e.g. department.
        :param pulumi.Input[str] value: Tag value, e.g. marketing_info.
        :param pulumi.Input[str] database: Name of the database that the tag was created in.
        :param pulumi.Input[str] schema: Name of the schema that the tag was created in.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Tag name, e.g. department.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Tag value, e.g. marketing_info.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the database that the tag was created in.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the schema that the tag was created in.
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema", value)


if not MYPY:
    class TagAssociationObjectIdentifierArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the object to associate the tag with.
        """
        database: NotRequired[pulumi.Input[str]]
        """
        Name of the database that the object was created in.
        """
        schema: NotRequired[pulumi.Input[str]]
        """
        Name of the schema that the object was created in.
        """
elif False:
    TagAssociationObjectIdentifierArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TagAssociationObjectIdentifierArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database: Optional[pulumi.Input[str]] = None,
                 schema: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the object to associate the tag with.
        :param pulumi.Input[str] database: Name of the database that the object was created in.
        :param pulumi.Input[str] schema: Name of the schema that the object was created in.
        """
        pulumi.set(__self__, "name", name)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the object to associate the tag with.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the database that the object was created in.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the schema that the object was created in.
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema", value)


if not MYPY:
    class TagShowOutputArgsDict(TypedDict):
        allowed_values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        owner: NotRequired[pulumi.Input[str]]
        owner_role_type: NotRequired[pulumi.Input[str]]
        schema_name: NotRequired[pulumi.Input[str]]
elif False:
    TagShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TagShowOutputArgs:
    def __init__(__self__, *,
                 allowed_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 owner_role_type: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_values")

    @allowed_values.setter
    def allowed_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_values", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_role_type")

    @owner_role_type.setter
    def owner_role_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_role_type", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


if not MYPY:
    class TaskParameterArgsDict(TypedDict):
        abort_detached_queries: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterAbortDetachedQueryArgsDict']]]]
        autocommits: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterAutocommitArgsDict']]]]
        binary_input_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterBinaryInputFormatArgsDict']]]]
        binary_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterBinaryOutputFormatArgsDict']]]]
        client_memory_limits: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientMemoryLimitArgsDict']]]]
        client_metadata_request_use_connection_ctxes: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientMetadataRequestUseConnectionCtxArgsDict']]]]
        client_prefetch_threads: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientPrefetchThreadArgsDict']]]]
        client_result_chunk_sizes: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientResultChunkSizeArgsDict']]]]
        client_result_column_case_insensitives: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientResultColumnCaseInsensitiveArgsDict']]]]
        client_session_keep_alive_heartbeat_frequencies: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientSessionKeepAliveHeartbeatFrequencyArgsDict']]]]
        client_session_keep_alives: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientSessionKeepAlifeArgsDict']]]]
        client_timestamp_type_mappings: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientTimestampTypeMappingArgsDict']]]]
        date_input_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterDateInputFormatArgsDict']]]]
        date_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterDateOutputFormatArgsDict']]]]
        enable_unload_physical_type_optimizations: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterEnableUnloadPhysicalTypeOptimizationArgsDict']]]]
        error_on_nondeterministic_merges: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterErrorOnNondeterministicMergeArgsDict']]]]
        error_on_nondeterministic_updates: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterErrorOnNondeterministicUpdateArgsDict']]]]
        geography_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterGeographyOutputFormatArgsDict']]]]
        geometry_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterGeometryOutputFormatArgsDict']]]]
        jdbc_treat_timestamp_ntz_as_utcs: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterJdbcTreatTimestampNtzAsUtcArgsDict']]]]
        jdbc_use_session_timezones: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterJdbcUseSessionTimezoneArgsDict']]]]
        json_indents: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterJsonIndentArgsDict']]]]
        lock_timeouts: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterLockTimeoutArgsDict']]]]
        log_levels: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterLogLevelArgsDict']]]]
        multi_statement_counts: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterMultiStatementCountArgsDict']]]]
        noorder_sequence_as_defaults: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterNoorderSequenceAsDefaultArgsDict']]]]
        odbc_treat_decimal_as_ints: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterOdbcTreatDecimalAsIntArgsDict']]]]
        query_tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterQueryTagArgsDict']]]]
        quoted_identifiers_ignore_cases: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterQuotedIdentifiersIgnoreCaseArgsDict']]]]
        rows_per_resultsets: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterRowsPerResultsetArgsDict']]]]
        s3_stage_vpce_dns_names: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterS3StageVpceDnsNameArgsDict']]]]
        search_paths: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterSearchPathArgsDict']]]]
        statement_queued_timeout_in_seconds: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterStatementQueuedTimeoutInSecondArgsDict']]]]
        statement_timeout_in_seconds: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterStatementTimeoutInSecondArgsDict']]]]
        strict_json_outputs: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterStrictJsonOutputArgsDict']]]]
        suspend_task_after_num_failures: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterSuspendTaskAfterNumFailureArgsDict']]]]
        task_auto_retry_attempts: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterTaskAutoRetryAttemptArgsDict']]]]
        time_input_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimeInputFormatArgsDict']]]]
        time_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimeOutputFormatArgsDict']]]]
        timestamp_day_is_always24hs: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampDayIsAlways24hArgsDict']]]]
        timestamp_input_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampInputFormatArgsDict']]]]
        timestamp_ltz_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampLtzOutputFormatArgsDict']]]]
        timestamp_ntz_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampNtzOutputFormatArgsDict']]]]
        timestamp_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampOutputFormatArgsDict']]]]
        timestamp_type_mappings: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampTypeMappingArgsDict']]]]
        timestamp_tz_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampTzOutputFormatArgsDict']]]]
        timezones: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimezoneArgsDict']]]]
        trace_levels: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterTraceLevelArgsDict']]]]
        transaction_abort_on_errors: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterTransactionAbortOnErrorArgsDict']]]]
        transaction_default_isolation_levels: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterTransactionDefaultIsolationLevelArgsDict']]]]
        two_digit_century_starts: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterTwoDigitCenturyStartArgsDict']]]]
        unsupported_ddl_actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterUnsupportedDdlActionArgsDict']]]]
        use_cached_results: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterUseCachedResultArgsDict']]]]
        user_task_managed_initial_warehouse_sizes: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterUserTaskManagedInitialWarehouseSizeArgsDict']]]]
        user_task_minimum_trigger_interval_in_seconds: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterUserTaskMinimumTriggerIntervalInSecondArgsDict']]]]
        user_task_timeout_ms: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterUserTaskTimeoutMArgsDict']]]]
        week_of_year_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterWeekOfYearPolicyArgsDict']]]]
        week_starts: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskParameterWeekStartArgsDict']]]]
elif False:
    TaskParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterArgs:
    def __init__(__self__, *,
                 abort_detached_queries: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterAbortDetachedQueryArgs']]]] = None,
                 autocommits: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterAutocommitArgs']]]] = None,
                 binary_input_formats: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterBinaryInputFormatArgs']]]] = None,
                 binary_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterBinaryOutputFormatArgs']]]] = None,
                 client_memory_limits: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientMemoryLimitArgs']]]] = None,
                 client_metadata_request_use_connection_ctxes: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientMetadataRequestUseConnectionCtxArgs']]]] = None,
                 client_prefetch_threads: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientPrefetchThreadArgs']]]] = None,
                 client_result_chunk_sizes: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientResultChunkSizeArgs']]]] = None,
                 client_result_column_case_insensitives: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientResultColumnCaseInsensitiveArgs']]]] = None,
                 client_session_keep_alive_heartbeat_frequencies: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientSessionKeepAliveHeartbeatFrequencyArgs']]]] = None,
                 client_session_keep_alives: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientSessionKeepAlifeArgs']]]] = None,
                 client_timestamp_type_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientTimestampTypeMappingArgs']]]] = None,
                 date_input_formats: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterDateInputFormatArgs']]]] = None,
                 date_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterDateOutputFormatArgs']]]] = None,
                 enable_unload_physical_type_optimizations: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterEnableUnloadPhysicalTypeOptimizationArgs']]]] = None,
                 error_on_nondeterministic_merges: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterErrorOnNondeterministicMergeArgs']]]] = None,
                 error_on_nondeterministic_updates: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterErrorOnNondeterministicUpdateArgs']]]] = None,
                 geography_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterGeographyOutputFormatArgs']]]] = None,
                 geometry_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterGeometryOutputFormatArgs']]]] = None,
                 jdbc_treat_timestamp_ntz_as_utcs: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterJdbcTreatTimestampNtzAsUtcArgs']]]] = None,
                 jdbc_use_session_timezones: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterJdbcUseSessionTimezoneArgs']]]] = None,
                 json_indents: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterJsonIndentArgs']]]] = None,
                 lock_timeouts: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterLockTimeoutArgs']]]] = None,
                 log_levels: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterLogLevelArgs']]]] = None,
                 multi_statement_counts: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterMultiStatementCountArgs']]]] = None,
                 noorder_sequence_as_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterNoorderSequenceAsDefaultArgs']]]] = None,
                 odbc_treat_decimal_as_ints: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterOdbcTreatDecimalAsIntArgs']]]] = None,
                 query_tags: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterQueryTagArgs']]]] = None,
                 quoted_identifiers_ignore_cases: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterQuotedIdentifiersIgnoreCaseArgs']]]] = None,
                 rows_per_resultsets: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterRowsPerResultsetArgs']]]] = None,
                 s3_stage_vpce_dns_names: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterS3StageVpceDnsNameArgs']]]] = None,
                 search_paths: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterSearchPathArgs']]]] = None,
                 statement_queued_timeout_in_seconds: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterStatementQueuedTimeoutInSecondArgs']]]] = None,
                 statement_timeout_in_seconds: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterStatementTimeoutInSecondArgs']]]] = None,
                 strict_json_outputs: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterStrictJsonOutputArgs']]]] = None,
                 suspend_task_after_num_failures: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterSuspendTaskAfterNumFailureArgs']]]] = None,
                 task_auto_retry_attempts: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTaskAutoRetryAttemptArgs']]]] = None,
                 time_input_formats: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimeInputFormatArgs']]]] = None,
                 time_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimeOutputFormatArgs']]]] = None,
                 timestamp_day_is_always24hs: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampDayIsAlways24hArgs']]]] = None,
                 timestamp_input_formats: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampInputFormatArgs']]]] = None,
                 timestamp_ltz_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampLtzOutputFormatArgs']]]] = None,
                 timestamp_ntz_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampNtzOutputFormatArgs']]]] = None,
                 timestamp_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampOutputFormatArgs']]]] = None,
                 timestamp_type_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampTypeMappingArgs']]]] = None,
                 timestamp_tz_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampTzOutputFormatArgs']]]] = None,
                 timezones: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimezoneArgs']]]] = None,
                 trace_levels: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTraceLevelArgs']]]] = None,
                 transaction_abort_on_errors: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTransactionAbortOnErrorArgs']]]] = None,
                 transaction_default_isolation_levels: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTransactionDefaultIsolationLevelArgs']]]] = None,
                 two_digit_century_starts: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTwoDigitCenturyStartArgs']]]] = None,
                 unsupported_ddl_actions: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterUnsupportedDdlActionArgs']]]] = None,
                 use_cached_results: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterUseCachedResultArgs']]]] = None,
                 user_task_managed_initial_warehouse_sizes: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterUserTaskManagedInitialWarehouseSizeArgs']]]] = None,
                 user_task_minimum_trigger_interval_in_seconds: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterUserTaskMinimumTriggerIntervalInSecondArgs']]]] = None,
                 user_task_timeout_ms: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterUserTaskTimeoutMArgs']]]] = None,
                 week_of_year_policies: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterWeekOfYearPolicyArgs']]]] = None,
                 week_starts: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterWeekStartArgs']]]] = None):
        if abort_detached_queries is not None:
            pulumi.set(__self__, "abort_detached_queries", abort_detached_queries)
        if autocommits is not None:
            pulumi.set(__self__, "autocommits", autocommits)
        if binary_input_formats is not None:
            pulumi.set(__self__, "binary_input_formats", binary_input_formats)
        if binary_output_formats is not None:
            pulumi.set(__self__, "binary_output_formats", binary_output_formats)
        if client_memory_limits is not None:
            pulumi.set(__self__, "client_memory_limits", client_memory_limits)
        if client_metadata_request_use_connection_ctxes is not None:
            pulumi.set(__self__, "client_metadata_request_use_connection_ctxes", client_metadata_request_use_connection_ctxes)
        if client_prefetch_threads is not None:
            pulumi.set(__self__, "client_prefetch_threads", client_prefetch_threads)
        if client_result_chunk_sizes is not None:
            pulumi.set(__self__, "client_result_chunk_sizes", client_result_chunk_sizes)
        if client_result_column_case_insensitives is not None:
            pulumi.set(__self__, "client_result_column_case_insensitives", client_result_column_case_insensitives)
        if client_session_keep_alive_heartbeat_frequencies is not None:
            pulumi.set(__self__, "client_session_keep_alive_heartbeat_frequencies", client_session_keep_alive_heartbeat_frequencies)
        if client_session_keep_alives is not None:
            pulumi.set(__self__, "client_session_keep_alives", client_session_keep_alives)
        if client_timestamp_type_mappings is not None:
            pulumi.set(__self__, "client_timestamp_type_mappings", client_timestamp_type_mappings)
        if date_input_formats is not None:
            pulumi.set(__self__, "date_input_formats", date_input_formats)
        if date_output_formats is not None:
            pulumi.set(__self__, "date_output_formats", date_output_formats)
        if enable_unload_physical_type_optimizations is not None:
            pulumi.set(__self__, "enable_unload_physical_type_optimizations", enable_unload_physical_type_optimizations)
        if error_on_nondeterministic_merges is not None:
            pulumi.set(__self__, "error_on_nondeterministic_merges", error_on_nondeterministic_merges)
        if error_on_nondeterministic_updates is not None:
            pulumi.set(__self__, "error_on_nondeterministic_updates", error_on_nondeterministic_updates)
        if geography_output_formats is not None:
            pulumi.set(__self__, "geography_output_formats", geography_output_formats)
        if geometry_output_formats is not None:
            pulumi.set(__self__, "geometry_output_formats", geometry_output_formats)
        if jdbc_treat_timestamp_ntz_as_utcs is not None:
            pulumi.set(__self__, "jdbc_treat_timestamp_ntz_as_utcs", jdbc_treat_timestamp_ntz_as_utcs)
        if jdbc_use_session_timezones is not None:
            pulumi.set(__self__, "jdbc_use_session_timezones", jdbc_use_session_timezones)
        if json_indents is not None:
            pulumi.set(__self__, "json_indents", json_indents)
        if lock_timeouts is not None:
            pulumi.set(__self__, "lock_timeouts", lock_timeouts)
        if log_levels is not None:
            pulumi.set(__self__, "log_levels", log_levels)
        if multi_statement_counts is not None:
            pulumi.set(__self__, "multi_statement_counts", multi_statement_counts)
        if noorder_sequence_as_defaults is not None:
            pulumi.set(__self__, "noorder_sequence_as_defaults", noorder_sequence_as_defaults)
        if odbc_treat_decimal_as_ints is not None:
            pulumi.set(__self__, "odbc_treat_decimal_as_ints", odbc_treat_decimal_as_ints)
        if query_tags is not None:
            pulumi.set(__self__, "query_tags", query_tags)
        if quoted_identifiers_ignore_cases is not None:
            pulumi.set(__self__, "quoted_identifiers_ignore_cases", quoted_identifiers_ignore_cases)
        if rows_per_resultsets is not None:
            pulumi.set(__self__, "rows_per_resultsets", rows_per_resultsets)
        if s3_stage_vpce_dns_names is not None:
            pulumi.set(__self__, "s3_stage_vpce_dns_names", s3_stage_vpce_dns_names)
        if search_paths is not None:
            pulumi.set(__self__, "search_paths", search_paths)
        if statement_queued_timeout_in_seconds is not None:
            pulumi.set(__self__, "statement_queued_timeout_in_seconds", statement_queued_timeout_in_seconds)
        if statement_timeout_in_seconds is not None:
            pulumi.set(__self__, "statement_timeout_in_seconds", statement_timeout_in_seconds)
        if strict_json_outputs is not None:
            pulumi.set(__self__, "strict_json_outputs", strict_json_outputs)
        if suspend_task_after_num_failures is not None:
            pulumi.set(__self__, "suspend_task_after_num_failures", suspend_task_after_num_failures)
        if task_auto_retry_attempts is not None:
            pulumi.set(__self__, "task_auto_retry_attempts", task_auto_retry_attempts)
        if time_input_formats is not None:
            pulumi.set(__self__, "time_input_formats", time_input_formats)
        if time_output_formats is not None:
            pulumi.set(__self__, "time_output_formats", time_output_formats)
        if timestamp_day_is_always24hs is not None:
            pulumi.set(__self__, "timestamp_day_is_always24hs", timestamp_day_is_always24hs)
        if timestamp_input_formats is not None:
            pulumi.set(__self__, "timestamp_input_formats", timestamp_input_formats)
        if timestamp_ltz_output_formats is not None:
            pulumi.set(__self__, "timestamp_ltz_output_formats", timestamp_ltz_output_formats)
        if timestamp_ntz_output_formats is not None:
            pulumi.set(__self__, "timestamp_ntz_output_formats", timestamp_ntz_output_formats)
        if timestamp_output_formats is not None:
            pulumi.set(__self__, "timestamp_output_formats", timestamp_output_formats)
        if timestamp_type_mappings is not None:
            pulumi.set(__self__, "timestamp_type_mappings", timestamp_type_mappings)
        if timestamp_tz_output_formats is not None:
            pulumi.set(__self__, "timestamp_tz_output_formats", timestamp_tz_output_formats)
        if timezones is not None:
            pulumi.set(__self__, "timezones", timezones)
        if trace_levels is not None:
            pulumi.set(__self__, "trace_levels", trace_levels)
        if transaction_abort_on_errors is not None:
            pulumi.set(__self__, "transaction_abort_on_errors", transaction_abort_on_errors)
        if transaction_default_isolation_levels is not None:
            pulumi.set(__self__, "transaction_default_isolation_levels", transaction_default_isolation_levels)
        if two_digit_century_starts is not None:
            pulumi.set(__self__, "two_digit_century_starts", two_digit_century_starts)
        if unsupported_ddl_actions is not None:
            pulumi.set(__self__, "unsupported_ddl_actions", unsupported_ddl_actions)
        if use_cached_results is not None:
            pulumi.set(__self__, "use_cached_results", use_cached_results)
        if user_task_managed_initial_warehouse_sizes is not None:
            pulumi.set(__self__, "user_task_managed_initial_warehouse_sizes", user_task_managed_initial_warehouse_sizes)
        if user_task_minimum_trigger_interval_in_seconds is not None:
            pulumi.set(__self__, "user_task_minimum_trigger_interval_in_seconds", user_task_minimum_trigger_interval_in_seconds)
        if user_task_timeout_ms is not None:
            pulumi.set(__self__, "user_task_timeout_ms", user_task_timeout_ms)
        if week_of_year_policies is not None:
            pulumi.set(__self__, "week_of_year_policies", week_of_year_policies)
        if week_starts is not None:
            pulumi.set(__self__, "week_starts", week_starts)

    @property
    @pulumi.getter(name="abortDetachedQueries")
    def abort_detached_queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterAbortDetachedQueryArgs']]]]:
        return pulumi.get(self, "abort_detached_queries")

    @abort_detached_queries.setter
    def abort_detached_queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterAbortDetachedQueryArgs']]]]):
        pulumi.set(self, "abort_detached_queries", value)

    @property
    @pulumi.getter
    def autocommits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterAutocommitArgs']]]]:
        return pulumi.get(self, "autocommits")

    @autocommits.setter
    def autocommits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterAutocommitArgs']]]]):
        pulumi.set(self, "autocommits", value)

    @property
    @pulumi.getter(name="binaryInputFormats")
    def binary_input_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterBinaryInputFormatArgs']]]]:
        return pulumi.get(self, "binary_input_formats")

    @binary_input_formats.setter
    def binary_input_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterBinaryInputFormatArgs']]]]):
        pulumi.set(self, "binary_input_formats", value)

    @property
    @pulumi.getter(name="binaryOutputFormats")
    def binary_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterBinaryOutputFormatArgs']]]]:
        return pulumi.get(self, "binary_output_formats")

    @binary_output_formats.setter
    def binary_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterBinaryOutputFormatArgs']]]]):
        pulumi.set(self, "binary_output_formats", value)

    @property
    @pulumi.getter(name="clientMemoryLimits")
    def client_memory_limits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientMemoryLimitArgs']]]]:
        return pulumi.get(self, "client_memory_limits")

    @client_memory_limits.setter
    def client_memory_limits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientMemoryLimitArgs']]]]):
        pulumi.set(self, "client_memory_limits", value)

    @property
    @pulumi.getter(name="clientMetadataRequestUseConnectionCtxes")
    def client_metadata_request_use_connection_ctxes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientMetadataRequestUseConnectionCtxArgs']]]]:
        return pulumi.get(self, "client_metadata_request_use_connection_ctxes")

    @client_metadata_request_use_connection_ctxes.setter
    def client_metadata_request_use_connection_ctxes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientMetadataRequestUseConnectionCtxArgs']]]]):
        pulumi.set(self, "client_metadata_request_use_connection_ctxes", value)

    @property
    @pulumi.getter(name="clientPrefetchThreads")
    def client_prefetch_threads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientPrefetchThreadArgs']]]]:
        return pulumi.get(self, "client_prefetch_threads")

    @client_prefetch_threads.setter
    def client_prefetch_threads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientPrefetchThreadArgs']]]]):
        pulumi.set(self, "client_prefetch_threads", value)

    @property
    @pulumi.getter(name="clientResultChunkSizes")
    def client_result_chunk_sizes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientResultChunkSizeArgs']]]]:
        return pulumi.get(self, "client_result_chunk_sizes")

    @client_result_chunk_sizes.setter
    def client_result_chunk_sizes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientResultChunkSizeArgs']]]]):
        pulumi.set(self, "client_result_chunk_sizes", value)

    @property
    @pulumi.getter(name="clientResultColumnCaseInsensitives")
    def client_result_column_case_insensitives(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientResultColumnCaseInsensitiveArgs']]]]:
        return pulumi.get(self, "client_result_column_case_insensitives")

    @client_result_column_case_insensitives.setter
    def client_result_column_case_insensitives(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientResultColumnCaseInsensitiveArgs']]]]):
        pulumi.set(self, "client_result_column_case_insensitives", value)

    @property
    @pulumi.getter(name="clientSessionKeepAliveHeartbeatFrequencies")
    def client_session_keep_alive_heartbeat_frequencies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientSessionKeepAliveHeartbeatFrequencyArgs']]]]:
        return pulumi.get(self, "client_session_keep_alive_heartbeat_frequencies")

    @client_session_keep_alive_heartbeat_frequencies.setter
    def client_session_keep_alive_heartbeat_frequencies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientSessionKeepAliveHeartbeatFrequencyArgs']]]]):
        pulumi.set(self, "client_session_keep_alive_heartbeat_frequencies", value)

    @property
    @pulumi.getter(name="clientSessionKeepAlives")
    def client_session_keep_alives(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientSessionKeepAlifeArgs']]]]:
        return pulumi.get(self, "client_session_keep_alives")

    @client_session_keep_alives.setter
    def client_session_keep_alives(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientSessionKeepAlifeArgs']]]]):
        pulumi.set(self, "client_session_keep_alives", value)

    @property
    @pulumi.getter(name="clientTimestampTypeMappings")
    def client_timestamp_type_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientTimestampTypeMappingArgs']]]]:
        return pulumi.get(self, "client_timestamp_type_mappings")

    @client_timestamp_type_mappings.setter
    def client_timestamp_type_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterClientTimestampTypeMappingArgs']]]]):
        pulumi.set(self, "client_timestamp_type_mappings", value)

    @property
    @pulumi.getter(name="dateInputFormats")
    def date_input_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterDateInputFormatArgs']]]]:
        return pulumi.get(self, "date_input_formats")

    @date_input_formats.setter
    def date_input_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterDateInputFormatArgs']]]]):
        pulumi.set(self, "date_input_formats", value)

    @property
    @pulumi.getter(name="dateOutputFormats")
    def date_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterDateOutputFormatArgs']]]]:
        return pulumi.get(self, "date_output_formats")

    @date_output_formats.setter
    def date_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterDateOutputFormatArgs']]]]):
        pulumi.set(self, "date_output_formats", value)

    @property
    @pulumi.getter(name="enableUnloadPhysicalTypeOptimizations")
    def enable_unload_physical_type_optimizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterEnableUnloadPhysicalTypeOptimizationArgs']]]]:
        return pulumi.get(self, "enable_unload_physical_type_optimizations")

    @enable_unload_physical_type_optimizations.setter
    def enable_unload_physical_type_optimizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterEnableUnloadPhysicalTypeOptimizationArgs']]]]):
        pulumi.set(self, "enable_unload_physical_type_optimizations", value)

    @property
    @pulumi.getter(name="errorOnNondeterministicMerges")
    def error_on_nondeterministic_merges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterErrorOnNondeterministicMergeArgs']]]]:
        return pulumi.get(self, "error_on_nondeterministic_merges")

    @error_on_nondeterministic_merges.setter
    def error_on_nondeterministic_merges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterErrorOnNondeterministicMergeArgs']]]]):
        pulumi.set(self, "error_on_nondeterministic_merges", value)

    @property
    @pulumi.getter(name="errorOnNondeterministicUpdates")
    def error_on_nondeterministic_updates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterErrorOnNondeterministicUpdateArgs']]]]:
        return pulumi.get(self, "error_on_nondeterministic_updates")

    @error_on_nondeterministic_updates.setter
    def error_on_nondeterministic_updates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterErrorOnNondeterministicUpdateArgs']]]]):
        pulumi.set(self, "error_on_nondeterministic_updates", value)

    @property
    @pulumi.getter(name="geographyOutputFormats")
    def geography_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterGeographyOutputFormatArgs']]]]:
        return pulumi.get(self, "geography_output_formats")

    @geography_output_formats.setter
    def geography_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterGeographyOutputFormatArgs']]]]):
        pulumi.set(self, "geography_output_formats", value)

    @property
    @pulumi.getter(name="geometryOutputFormats")
    def geometry_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterGeometryOutputFormatArgs']]]]:
        return pulumi.get(self, "geometry_output_formats")

    @geometry_output_formats.setter
    def geometry_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterGeometryOutputFormatArgs']]]]):
        pulumi.set(self, "geometry_output_formats", value)

    @property
    @pulumi.getter(name="jdbcTreatTimestampNtzAsUtcs")
    def jdbc_treat_timestamp_ntz_as_utcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterJdbcTreatTimestampNtzAsUtcArgs']]]]:
        return pulumi.get(self, "jdbc_treat_timestamp_ntz_as_utcs")

    @jdbc_treat_timestamp_ntz_as_utcs.setter
    def jdbc_treat_timestamp_ntz_as_utcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterJdbcTreatTimestampNtzAsUtcArgs']]]]):
        pulumi.set(self, "jdbc_treat_timestamp_ntz_as_utcs", value)

    @property
    @pulumi.getter(name="jdbcUseSessionTimezones")
    def jdbc_use_session_timezones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterJdbcUseSessionTimezoneArgs']]]]:
        return pulumi.get(self, "jdbc_use_session_timezones")

    @jdbc_use_session_timezones.setter
    def jdbc_use_session_timezones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterJdbcUseSessionTimezoneArgs']]]]):
        pulumi.set(self, "jdbc_use_session_timezones", value)

    @property
    @pulumi.getter(name="jsonIndents")
    def json_indents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterJsonIndentArgs']]]]:
        return pulumi.get(self, "json_indents")

    @json_indents.setter
    def json_indents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterJsonIndentArgs']]]]):
        pulumi.set(self, "json_indents", value)

    @property
    @pulumi.getter(name="lockTimeouts")
    def lock_timeouts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterLockTimeoutArgs']]]]:
        return pulumi.get(self, "lock_timeouts")

    @lock_timeouts.setter
    def lock_timeouts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterLockTimeoutArgs']]]]):
        pulumi.set(self, "lock_timeouts", value)

    @property
    @pulumi.getter(name="logLevels")
    def log_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterLogLevelArgs']]]]:
        return pulumi.get(self, "log_levels")

    @log_levels.setter
    def log_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterLogLevelArgs']]]]):
        pulumi.set(self, "log_levels", value)

    @property
    @pulumi.getter(name="multiStatementCounts")
    def multi_statement_counts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterMultiStatementCountArgs']]]]:
        return pulumi.get(self, "multi_statement_counts")

    @multi_statement_counts.setter
    def multi_statement_counts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterMultiStatementCountArgs']]]]):
        pulumi.set(self, "multi_statement_counts", value)

    @property
    @pulumi.getter(name="noorderSequenceAsDefaults")
    def noorder_sequence_as_defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterNoorderSequenceAsDefaultArgs']]]]:
        return pulumi.get(self, "noorder_sequence_as_defaults")

    @noorder_sequence_as_defaults.setter
    def noorder_sequence_as_defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterNoorderSequenceAsDefaultArgs']]]]):
        pulumi.set(self, "noorder_sequence_as_defaults", value)

    @property
    @pulumi.getter(name="odbcTreatDecimalAsInts")
    def odbc_treat_decimal_as_ints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterOdbcTreatDecimalAsIntArgs']]]]:
        return pulumi.get(self, "odbc_treat_decimal_as_ints")

    @odbc_treat_decimal_as_ints.setter
    def odbc_treat_decimal_as_ints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterOdbcTreatDecimalAsIntArgs']]]]):
        pulumi.set(self, "odbc_treat_decimal_as_ints", value)

    @property
    @pulumi.getter(name="queryTags")
    def query_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterQueryTagArgs']]]]:
        return pulumi.get(self, "query_tags")

    @query_tags.setter
    def query_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterQueryTagArgs']]]]):
        pulumi.set(self, "query_tags", value)

    @property
    @pulumi.getter(name="quotedIdentifiersIgnoreCases")
    def quoted_identifiers_ignore_cases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterQuotedIdentifiersIgnoreCaseArgs']]]]:
        return pulumi.get(self, "quoted_identifiers_ignore_cases")

    @quoted_identifiers_ignore_cases.setter
    def quoted_identifiers_ignore_cases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterQuotedIdentifiersIgnoreCaseArgs']]]]):
        pulumi.set(self, "quoted_identifiers_ignore_cases", value)

    @property
    @pulumi.getter(name="rowsPerResultsets")
    def rows_per_resultsets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterRowsPerResultsetArgs']]]]:
        return pulumi.get(self, "rows_per_resultsets")

    @rows_per_resultsets.setter
    def rows_per_resultsets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterRowsPerResultsetArgs']]]]):
        pulumi.set(self, "rows_per_resultsets", value)

    @property
    @pulumi.getter(name="s3StageVpceDnsNames")
    def s3_stage_vpce_dns_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterS3StageVpceDnsNameArgs']]]]:
        return pulumi.get(self, "s3_stage_vpce_dns_names")

    @s3_stage_vpce_dns_names.setter
    def s3_stage_vpce_dns_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterS3StageVpceDnsNameArgs']]]]):
        pulumi.set(self, "s3_stage_vpce_dns_names", value)

    @property
    @pulumi.getter(name="searchPaths")
    def search_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterSearchPathArgs']]]]:
        return pulumi.get(self, "search_paths")

    @search_paths.setter
    def search_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterSearchPathArgs']]]]):
        pulumi.set(self, "search_paths", value)

    @property
    @pulumi.getter(name="statementQueuedTimeoutInSeconds")
    def statement_queued_timeout_in_seconds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterStatementQueuedTimeoutInSecondArgs']]]]:
        return pulumi.get(self, "statement_queued_timeout_in_seconds")

    @statement_queued_timeout_in_seconds.setter
    def statement_queued_timeout_in_seconds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterStatementQueuedTimeoutInSecondArgs']]]]):
        pulumi.set(self, "statement_queued_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="statementTimeoutInSeconds")
    def statement_timeout_in_seconds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterStatementTimeoutInSecondArgs']]]]:
        return pulumi.get(self, "statement_timeout_in_seconds")

    @statement_timeout_in_seconds.setter
    def statement_timeout_in_seconds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterStatementTimeoutInSecondArgs']]]]):
        pulumi.set(self, "statement_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="strictJsonOutputs")
    def strict_json_outputs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterStrictJsonOutputArgs']]]]:
        return pulumi.get(self, "strict_json_outputs")

    @strict_json_outputs.setter
    def strict_json_outputs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterStrictJsonOutputArgs']]]]):
        pulumi.set(self, "strict_json_outputs", value)

    @property
    @pulumi.getter(name="suspendTaskAfterNumFailures")
    def suspend_task_after_num_failures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterSuspendTaskAfterNumFailureArgs']]]]:
        return pulumi.get(self, "suspend_task_after_num_failures")

    @suspend_task_after_num_failures.setter
    def suspend_task_after_num_failures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterSuspendTaskAfterNumFailureArgs']]]]):
        pulumi.set(self, "suspend_task_after_num_failures", value)

    @property
    @pulumi.getter(name="taskAutoRetryAttempts")
    def task_auto_retry_attempts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTaskAutoRetryAttemptArgs']]]]:
        return pulumi.get(self, "task_auto_retry_attempts")

    @task_auto_retry_attempts.setter
    def task_auto_retry_attempts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTaskAutoRetryAttemptArgs']]]]):
        pulumi.set(self, "task_auto_retry_attempts", value)

    @property
    @pulumi.getter(name="timeInputFormats")
    def time_input_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimeInputFormatArgs']]]]:
        return pulumi.get(self, "time_input_formats")

    @time_input_formats.setter
    def time_input_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimeInputFormatArgs']]]]):
        pulumi.set(self, "time_input_formats", value)

    @property
    @pulumi.getter(name="timeOutputFormats")
    def time_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimeOutputFormatArgs']]]]:
        return pulumi.get(self, "time_output_formats")

    @time_output_formats.setter
    def time_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimeOutputFormatArgs']]]]):
        pulumi.set(self, "time_output_formats", value)

    @property
    @pulumi.getter(name="timestampDayIsAlways24hs")
    def timestamp_day_is_always24hs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampDayIsAlways24hArgs']]]]:
        return pulumi.get(self, "timestamp_day_is_always24hs")

    @timestamp_day_is_always24hs.setter
    def timestamp_day_is_always24hs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampDayIsAlways24hArgs']]]]):
        pulumi.set(self, "timestamp_day_is_always24hs", value)

    @property
    @pulumi.getter(name="timestampInputFormats")
    def timestamp_input_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampInputFormatArgs']]]]:
        return pulumi.get(self, "timestamp_input_formats")

    @timestamp_input_formats.setter
    def timestamp_input_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampInputFormatArgs']]]]):
        pulumi.set(self, "timestamp_input_formats", value)

    @property
    @pulumi.getter(name="timestampLtzOutputFormats")
    def timestamp_ltz_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampLtzOutputFormatArgs']]]]:
        return pulumi.get(self, "timestamp_ltz_output_formats")

    @timestamp_ltz_output_formats.setter
    def timestamp_ltz_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampLtzOutputFormatArgs']]]]):
        pulumi.set(self, "timestamp_ltz_output_formats", value)

    @property
    @pulumi.getter(name="timestampNtzOutputFormats")
    def timestamp_ntz_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampNtzOutputFormatArgs']]]]:
        return pulumi.get(self, "timestamp_ntz_output_formats")

    @timestamp_ntz_output_formats.setter
    def timestamp_ntz_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampNtzOutputFormatArgs']]]]):
        pulumi.set(self, "timestamp_ntz_output_formats", value)

    @property
    @pulumi.getter(name="timestampOutputFormats")
    def timestamp_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampOutputFormatArgs']]]]:
        return pulumi.get(self, "timestamp_output_formats")

    @timestamp_output_formats.setter
    def timestamp_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampOutputFormatArgs']]]]):
        pulumi.set(self, "timestamp_output_formats", value)

    @property
    @pulumi.getter(name="timestampTypeMappings")
    def timestamp_type_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampTypeMappingArgs']]]]:
        return pulumi.get(self, "timestamp_type_mappings")

    @timestamp_type_mappings.setter
    def timestamp_type_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampTypeMappingArgs']]]]):
        pulumi.set(self, "timestamp_type_mappings", value)

    @property
    @pulumi.getter(name="timestampTzOutputFormats")
    def timestamp_tz_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampTzOutputFormatArgs']]]]:
        return pulumi.get(self, "timestamp_tz_output_formats")

    @timestamp_tz_output_formats.setter
    def timestamp_tz_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimestampTzOutputFormatArgs']]]]):
        pulumi.set(self, "timestamp_tz_output_formats", value)

    @property
    @pulumi.getter
    def timezones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimezoneArgs']]]]:
        return pulumi.get(self, "timezones")

    @timezones.setter
    def timezones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTimezoneArgs']]]]):
        pulumi.set(self, "timezones", value)

    @property
    @pulumi.getter(name="traceLevels")
    def trace_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTraceLevelArgs']]]]:
        return pulumi.get(self, "trace_levels")

    @trace_levels.setter
    def trace_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTraceLevelArgs']]]]):
        pulumi.set(self, "trace_levels", value)

    @property
    @pulumi.getter(name="transactionAbortOnErrors")
    def transaction_abort_on_errors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTransactionAbortOnErrorArgs']]]]:
        return pulumi.get(self, "transaction_abort_on_errors")

    @transaction_abort_on_errors.setter
    def transaction_abort_on_errors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTransactionAbortOnErrorArgs']]]]):
        pulumi.set(self, "transaction_abort_on_errors", value)

    @property
    @pulumi.getter(name="transactionDefaultIsolationLevels")
    def transaction_default_isolation_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTransactionDefaultIsolationLevelArgs']]]]:
        return pulumi.get(self, "transaction_default_isolation_levels")

    @transaction_default_isolation_levels.setter
    def transaction_default_isolation_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTransactionDefaultIsolationLevelArgs']]]]):
        pulumi.set(self, "transaction_default_isolation_levels", value)

    @property
    @pulumi.getter(name="twoDigitCenturyStarts")
    def two_digit_century_starts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTwoDigitCenturyStartArgs']]]]:
        return pulumi.get(self, "two_digit_century_starts")

    @two_digit_century_starts.setter
    def two_digit_century_starts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterTwoDigitCenturyStartArgs']]]]):
        pulumi.set(self, "two_digit_century_starts", value)

    @property
    @pulumi.getter(name="unsupportedDdlActions")
    def unsupported_ddl_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterUnsupportedDdlActionArgs']]]]:
        return pulumi.get(self, "unsupported_ddl_actions")

    @unsupported_ddl_actions.setter
    def unsupported_ddl_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterUnsupportedDdlActionArgs']]]]):
        pulumi.set(self, "unsupported_ddl_actions", value)

    @property
    @pulumi.getter(name="useCachedResults")
    def use_cached_results(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterUseCachedResultArgs']]]]:
        return pulumi.get(self, "use_cached_results")

    @use_cached_results.setter
    def use_cached_results(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterUseCachedResultArgs']]]]):
        pulumi.set(self, "use_cached_results", value)

    @property
    @pulumi.getter(name="userTaskManagedInitialWarehouseSizes")
    def user_task_managed_initial_warehouse_sizes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterUserTaskManagedInitialWarehouseSizeArgs']]]]:
        return pulumi.get(self, "user_task_managed_initial_warehouse_sizes")

    @user_task_managed_initial_warehouse_sizes.setter
    def user_task_managed_initial_warehouse_sizes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterUserTaskManagedInitialWarehouseSizeArgs']]]]):
        pulumi.set(self, "user_task_managed_initial_warehouse_sizes", value)

    @property
    @pulumi.getter(name="userTaskMinimumTriggerIntervalInSeconds")
    def user_task_minimum_trigger_interval_in_seconds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterUserTaskMinimumTriggerIntervalInSecondArgs']]]]:
        return pulumi.get(self, "user_task_minimum_trigger_interval_in_seconds")

    @user_task_minimum_trigger_interval_in_seconds.setter
    def user_task_minimum_trigger_interval_in_seconds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterUserTaskMinimumTriggerIntervalInSecondArgs']]]]):
        pulumi.set(self, "user_task_minimum_trigger_interval_in_seconds", value)

    @property
    @pulumi.getter(name="userTaskTimeoutMs")
    def user_task_timeout_ms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterUserTaskTimeoutMArgs']]]]:
        return pulumi.get(self, "user_task_timeout_ms")

    @user_task_timeout_ms.setter
    def user_task_timeout_ms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterUserTaskTimeoutMArgs']]]]):
        pulumi.set(self, "user_task_timeout_ms", value)

    @property
    @pulumi.getter(name="weekOfYearPolicies")
    def week_of_year_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterWeekOfYearPolicyArgs']]]]:
        return pulumi.get(self, "week_of_year_policies")

    @week_of_year_policies.setter
    def week_of_year_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterWeekOfYearPolicyArgs']]]]):
        pulumi.set(self, "week_of_year_policies", value)

    @property
    @pulumi.getter(name="weekStarts")
    def week_starts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterWeekStartArgs']]]]:
        return pulumi.get(self, "week_starts")

    @week_starts.setter
    def week_starts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskParameterWeekStartArgs']]]]):
        pulumi.set(self, "week_starts", value)


if not MYPY:
    class TaskParameterAbortDetachedQueryArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterAbortDetachedQueryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterAbortDetachedQueryArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterAutocommitArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterAutocommitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterAutocommitArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterBinaryInputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterBinaryInputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterBinaryInputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterBinaryOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterBinaryOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterBinaryOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterClientMemoryLimitArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterClientMemoryLimitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterClientMemoryLimitArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterClientMetadataRequestUseConnectionCtxArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterClientMetadataRequestUseConnectionCtxArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterClientMetadataRequestUseConnectionCtxArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterClientPrefetchThreadArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterClientPrefetchThreadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterClientPrefetchThreadArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterClientResultChunkSizeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterClientResultChunkSizeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterClientResultChunkSizeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterClientResultColumnCaseInsensitiveArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterClientResultColumnCaseInsensitiveArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterClientResultColumnCaseInsensitiveArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterClientSessionKeepAlifeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterClientSessionKeepAlifeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterClientSessionKeepAlifeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterClientSessionKeepAliveHeartbeatFrequencyArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterClientSessionKeepAliveHeartbeatFrequencyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterClientSessionKeepAliveHeartbeatFrequencyArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterClientTimestampTypeMappingArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterClientTimestampTypeMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterClientTimestampTypeMappingArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterDateInputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterDateInputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterDateInputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterDateOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterDateOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterDateOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterEnableUnloadPhysicalTypeOptimizationArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterEnableUnloadPhysicalTypeOptimizationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterEnableUnloadPhysicalTypeOptimizationArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterErrorOnNondeterministicMergeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterErrorOnNondeterministicMergeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterErrorOnNondeterministicMergeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterErrorOnNondeterministicUpdateArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterErrorOnNondeterministicUpdateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterErrorOnNondeterministicUpdateArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterGeographyOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterGeographyOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterGeographyOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterGeometryOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterGeometryOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterGeometryOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterJdbcTreatTimestampNtzAsUtcArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterJdbcTreatTimestampNtzAsUtcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterJdbcTreatTimestampNtzAsUtcArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterJdbcUseSessionTimezoneArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterJdbcUseSessionTimezoneArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterJdbcUseSessionTimezoneArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterJsonIndentArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterJsonIndentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterJsonIndentArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterLockTimeoutArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterLockTimeoutArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterLockTimeoutArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterLogLevelArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterLogLevelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterLogLevelArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterMultiStatementCountArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterMultiStatementCountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterMultiStatementCountArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterNoorderSequenceAsDefaultArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterNoorderSequenceAsDefaultArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterNoorderSequenceAsDefaultArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterOdbcTreatDecimalAsIntArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterOdbcTreatDecimalAsIntArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterOdbcTreatDecimalAsIntArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterQueryTagArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterQueryTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterQueryTagArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterQuotedIdentifiersIgnoreCaseArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterQuotedIdentifiersIgnoreCaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterQuotedIdentifiersIgnoreCaseArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterRowsPerResultsetArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterRowsPerResultsetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterRowsPerResultsetArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterS3StageVpceDnsNameArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterS3StageVpceDnsNameArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterS3StageVpceDnsNameArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterSearchPathArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterSearchPathArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterSearchPathArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterStatementQueuedTimeoutInSecondArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterStatementQueuedTimeoutInSecondArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterStatementQueuedTimeoutInSecondArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterStatementTimeoutInSecondArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterStatementTimeoutInSecondArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterStatementTimeoutInSecondArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterStrictJsonOutputArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterStrictJsonOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterStrictJsonOutputArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterSuspendTaskAfterNumFailureArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterSuspendTaskAfterNumFailureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterSuspendTaskAfterNumFailureArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterTaskAutoRetryAttemptArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterTaskAutoRetryAttemptArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterTaskAutoRetryAttemptArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterTimeInputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterTimeInputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterTimeInputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterTimeOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterTimeOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterTimeOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterTimestampDayIsAlways24hArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterTimestampDayIsAlways24hArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterTimestampDayIsAlways24hArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterTimestampInputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterTimestampInputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterTimestampInputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterTimestampLtzOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterTimestampLtzOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterTimestampLtzOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterTimestampNtzOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterTimestampNtzOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterTimestampNtzOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterTimestampOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterTimestampOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterTimestampOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterTimestampTypeMappingArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterTimestampTypeMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterTimestampTypeMappingArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterTimestampTzOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterTimestampTzOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterTimestampTzOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterTimezoneArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterTimezoneArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterTimezoneArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterTraceLevelArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterTraceLevelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterTraceLevelArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterTransactionAbortOnErrorArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterTransactionAbortOnErrorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterTransactionAbortOnErrorArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterTransactionDefaultIsolationLevelArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterTransactionDefaultIsolationLevelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterTransactionDefaultIsolationLevelArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterTwoDigitCenturyStartArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterTwoDigitCenturyStartArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterTwoDigitCenturyStartArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterUnsupportedDdlActionArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterUnsupportedDdlActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterUnsupportedDdlActionArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterUseCachedResultArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterUseCachedResultArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterUseCachedResultArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterUserTaskManagedInitialWarehouseSizeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterUserTaskManagedInitialWarehouseSizeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterUserTaskManagedInitialWarehouseSizeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterUserTaskMinimumTriggerIntervalInSecondArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterUserTaskMinimumTriggerIntervalInSecondArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterUserTaskMinimumTriggerIntervalInSecondArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterUserTaskTimeoutMArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterUserTaskTimeoutMArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterUserTaskTimeoutMArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterWeekOfYearPolicyArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterWeekOfYearPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterWeekOfYearPolicyArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskParameterWeekStartArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    TaskParameterWeekStartArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskParameterWeekStartArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskScheduleArgsDict(TypedDict):
        minutes: NotRequired[pulumi.Input[int]]
        """
        Specifies an interval (in minutes) of wait time inserted between runs of the task. Accepts positive integers only. (conflicts with `using_cron`)
        """
        using_cron: NotRequired[pulumi.Input[str]]
        """
        Specifies a cron expression and time zone for periodically running the task. Supports a subset of standard cron utility syntax. (conflicts with `minutes`)
        """
elif False:
    TaskScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskScheduleArgs:
    def __init__(__self__, *,
                 minutes: Optional[pulumi.Input[int]] = None,
                 using_cron: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] minutes: Specifies an interval (in minutes) of wait time inserted between runs of the task. Accepts positive integers only. (conflicts with `using_cron`)
        :param pulumi.Input[str] using_cron: Specifies a cron expression and time zone for periodically running the task. Supports a subset of standard cron utility syntax. (conflicts with `minutes`)
        """
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if using_cron is not None:
            pulumi.set(__self__, "using_cron", using_cron)

    @property
    @pulumi.getter
    def minutes(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies an interval (in minutes) of wait time inserted between runs of the task. Accepts positive integers only. (conflicts with `using_cron`)
        """
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minutes", value)

    @property
    @pulumi.getter(name="usingCron")
    def using_cron(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies a cron expression and time zone for periodically running the task. Supports a subset of standard cron utility syntax. (conflicts with `minutes`)
        """
        return pulumi.get(self, "using_cron")

    @using_cron.setter
    def using_cron(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "using_cron", value)


if not MYPY:
    class TaskShowOutputArgsDict(TypedDict):
        allow_overlapping_execution: NotRequired[pulumi.Input[bool]]
        budget: NotRequired[pulumi.Input[str]]
        comment: NotRequired[pulumi.Input[str]]
        condition: NotRequired[pulumi.Input[str]]
        config: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        definition: NotRequired[pulumi.Input[str]]
        error_integration: NotRequired[pulumi.Input[str]]
        id: NotRequired[pulumi.Input[str]]
        last_committed_on: NotRequired[pulumi.Input[str]]
        last_suspended_on: NotRequired[pulumi.Input[str]]
        last_suspended_reason: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        owner: NotRequired[pulumi.Input[str]]
        owner_role_type: NotRequired[pulumi.Input[str]]
        predecessors: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        schedule: NotRequired[pulumi.Input[str]]
        schema_name: NotRequired[pulumi.Input[str]]
        state: NotRequired[pulumi.Input[str]]
        task_relations: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskShowOutputTaskRelationArgsDict']]]]
        warehouse: NotRequired[pulumi.Input[str]]
elif False:
    TaskShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskShowOutputArgs:
    def __init__(__self__, *,
                 allow_overlapping_execution: Optional[pulumi.Input[bool]] = None,
                 budget: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 config: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 definition: Optional[pulumi.Input[str]] = None,
                 error_integration: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 last_committed_on: Optional[pulumi.Input[str]] = None,
                 last_suspended_on: Optional[pulumi.Input[str]] = None,
                 last_suspended_reason: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 owner_role_type: Optional[pulumi.Input[str]] = None,
                 predecessors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 task_relations: Optional[pulumi.Input[Sequence[pulumi.Input['TaskShowOutputTaskRelationArgs']]]] = None,
                 warehouse: Optional[pulumi.Input[str]] = None):
        if allow_overlapping_execution is not None:
            pulumi.set(__self__, "allow_overlapping_execution", allow_overlapping_execution)
        if budget is not None:
            pulumi.set(__self__, "budget", budget)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if definition is not None:
            pulumi.set(__self__, "definition", definition)
        if error_integration is not None:
            pulumi.set(__self__, "error_integration", error_integration)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_committed_on is not None:
            pulumi.set(__self__, "last_committed_on", last_committed_on)
        if last_suspended_on is not None:
            pulumi.set(__self__, "last_suspended_on", last_suspended_on)
        if last_suspended_reason is not None:
            pulumi.set(__self__, "last_suspended_reason", last_suspended_reason)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if predecessors is not None:
            pulumi.set(__self__, "predecessors", predecessors)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if task_relations is not None:
            pulumi.set(__self__, "task_relations", task_relations)
        if warehouse is not None:
            pulumi.set(__self__, "warehouse", warehouse)

    @property
    @pulumi.getter(name="allowOverlappingExecution")
    def allow_overlapping_execution(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_overlapping_execution")

    @allow_overlapping_execution.setter
    def allow_overlapping_execution(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_overlapping_execution", value)

    @property
    @pulumi.getter
    def budget(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "budget")

    @budget.setter
    def budget(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "budget", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def definition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="errorIntegration")
    def error_integration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_integration")

    @error_integration.setter
    def error_integration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_integration", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="lastCommittedOn")
    def last_committed_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_committed_on")

    @last_committed_on.setter
    def last_committed_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_committed_on", value)

    @property
    @pulumi.getter(name="lastSuspendedOn")
    def last_suspended_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_suspended_on")

    @last_suspended_on.setter
    def last_suspended_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_suspended_on", value)

    @property
    @pulumi.getter(name="lastSuspendedReason")
    def last_suspended_reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_suspended_reason")

    @last_suspended_reason.setter
    def last_suspended_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_suspended_reason", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_role_type")

    @owner_role_type.setter
    def owner_role_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_role_type", value)

    @property
    @pulumi.getter
    def predecessors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "predecessors")

    @predecessors.setter
    def predecessors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "predecessors", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="taskRelations")
    def task_relations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskShowOutputTaskRelationArgs']]]]:
        return pulumi.get(self, "task_relations")

    @task_relations.setter
    def task_relations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskShowOutputTaskRelationArgs']]]]):
        pulumi.set(self, "task_relations", value)

    @property
    @pulumi.getter
    def warehouse(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "warehouse")

    @warehouse.setter
    def warehouse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warehouse", value)


if not MYPY:
    class TaskShowOutputTaskRelationArgsDict(TypedDict):
        finalized_root_task: NotRequired[pulumi.Input[str]]
        finalizer: NotRequired[pulumi.Input[str]]
        predecessors: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    TaskShowOutputTaskRelationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskShowOutputTaskRelationArgs:
    def __init__(__self__, *,
                 finalized_root_task: Optional[pulumi.Input[str]] = None,
                 finalizer: Optional[pulumi.Input[str]] = None,
                 predecessors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if finalized_root_task is not None:
            pulumi.set(__self__, "finalized_root_task", finalized_root_task)
        if finalizer is not None:
            pulumi.set(__self__, "finalizer", finalizer)
        if predecessors is not None:
            pulumi.set(__self__, "predecessors", predecessors)

    @property
    @pulumi.getter(name="finalizedRootTask")
    def finalized_root_task(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "finalized_root_task")

    @finalized_root_task.setter
    def finalized_root_task(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "finalized_root_task", value)

    @property
    @pulumi.getter
    def finalizer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "finalizer")

    @finalizer.setter
    def finalizer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "finalizer", value)

    @property
    @pulumi.getter
    def predecessors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "predecessors")

    @predecessors.setter
    def predecessors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "predecessors", value)


if not MYPY:
    class UserParameterArgsDict(TypedDict):
        abort_detached_queries: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterAbortDetachedQueryArgsDict']]]]
        autocommits: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterAutocommitArgsDict']]]]
        binary_input_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterBinaryInputFormatArgsDict']]]]
        binary_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterBinaryOutputFormatArgsDict']]]]
        client_memory_limits: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterClientMemoryLimitArgsDict']]]]
        client_metadata_request_use_connection_ctxes: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterClientMetadataRequestUseConnectionCtxArgsDict']]]]
        client_prefetch_threads: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterClientPrefetchThreadArgsDict']]]]
        client_result_chunk_sizes: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterClientResultChunkSizeArgsDict']]]]
        client_result_column_case_insensitives: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterClientResultColumnCaseInsensitiveArgsDict']]]]
        client_session_keep_alive_heartbeat_frequencies: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterClientSessionKeepAliveHeartbeatFrequencyArgsDict']]]]
        client_session_keep_alives: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterClientSessionKeepAlifeArgsDict']]]]
        client_timestamp_type_mappings: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterClientTimestampTypeMappingArgsDict']]]]
        date_input_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterDateInputFormatArgsDict']]]]
        date_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterDateOutputFormatArgsDict']]]]
        enable_unload_physical_type_optimizations: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterEnableUnloadPhysicalTypeOptimizationArgsDict']]]]
        enable_unredacted_query_syntax_errors: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterEnableUnredactedQuerySyntaxErrorArgsDict']]]]
        error_on_nondeterministic_merges: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterErrorOnNondeterministicMergeArgsDict']]]]
        error_on_nondeterministic_updates: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterErrorOnNondeterministicUpdateArgsDict']]]]
        geography_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterGeographyOutputFormatArgsDict']]]]
        geometry_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterGeometryOutputFormatArgsDict']]]]
        jdbc_treat_decimal_as_ints: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterJdbcTreatDecimalAsIntArgsDict']]]]
        jdbc_treat_timestamp_ntz_as_utcs: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterJdbcTreatTimestampNtzAsUtcArgsDict']]]]
        jdbc_use_session_timezones: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterJdbcUseSessionTimezoneArgsDict']]]]
        json_indents: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterJsonIndentArgsDict']]]]
        lock_timeouts: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterLockTimeoutArgsDict']]]]
        log_levels: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterLogLevelArgsDict']]]]
        multi_statement_counts: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterMultiStatementCountArgsDict']]]]
        network_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterNetworkPolicyArgsDict']]]]
        noorder_sequence_as_defaults: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterNoorderSequenceAsDefaultArgsDict']]]]
        odbc_treat_decimal_as_ints: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterOdbcTreatDecimalAsIntArgsDict']]]]
        prevent_unload_to_internal_stages: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterPreventUnloadToInternalStageArgsDict']]]]
        query_tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterQueryTagArgsDict']]]]
        quoted_identifiers_ignore_cases: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterQuotedIdentifiersIgnoreCaseArgsDict']]]]
        rows_per_resultsets: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterRowsPerResultsetArgsDict']]]]
        s3_stage_vpce_dns_names: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterS3StageVpceDnsNameArgsDict']]]]
        search_paths: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterSearchPathArgsDict']]]]
        simulated_data_sharing_consumers: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterSimulatedDataSharingConsumerArgsDict']]]]
        statement_queued_timeout_in_seconds: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterStatementQueuedTimeoutInSecondArgsDict']]]]
        statement_timeout_in_seconds: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterStatementTimeoutInSecondArgsDict']]]]
        strict_json_outputs: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterStrictJsonOutputArgsDict']]]]
        time_input_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterTimeInputFormatArgsDict']]]]
        time_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterTimeOutputFormatArgsDict']]]]
        timestamp_day_is_always24hs: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampDayIsAlways24hArgsDict']]]]
        timestamp_input_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampInputFormatArgsDict']]]]
        timestamp_ltz_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampLtzOutputFormatArgsDict']]]]
        timestamp_ntz_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampNtzOutputFormatArgsDict']]]]
        timestamp_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampOutputFormatArgsDict']]]]
        timestamp_type_mappings: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampTypeMappingArgsDict']]]]
        timestamp_tz_output_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampTzOutputFormatArgsDict']]]]
        timezones: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterTimezoneArgsDict']]]]
        trace_levels: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterTraceLevelArgsDict']]]]
        transaction_abort_on_errors: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterTransactionAbortOnErrorArgsDict']]]]
        transaction_default_isolation_levels: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterTransactionDefaultIsolationLevelArgsDict']]]]
        two_digit_century_starts: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterTwoDigitCenturyStartArgsDict']]]]
        unsupported_ddl_actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterUnsupportedDdlActionArgsDict']]]]
        use_cached_results: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterUseCachedResultArgsDict']]]]
        week_of_year_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterWeekOfYearPolicyArgsDict']]]]
        week_starts: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserParameterWeekStartArgsDict']]]]
elif False:
    UserParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterArgs:
    def __init__(__self__, *,
                 abort_detached_queries: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterAbortDetachedQueryArgs']]]] = None,
                 autocommits: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterAutocommitArgs']]]] = None,
                 binary_input_formats: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterBinaryInputFormatArgs']]]] = None,
                 binary_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterBinaryOutputFormatArgs']]]] = None,
                 client_memory_limits: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterClientMemoryLimitArgs']]]] = None,
                 client_metadata_request_use_connection_ctxes: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterClientMetadataRequestUseConnectionCtxArgs']]]] = None,
                 client_prefetch_threads: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterClientPrefetchThreadArgs']]]] = None,
                 client_result_chunk_sizes: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterClientResultChunkSizeArgs']]]] = None,
                 client_result_column_case_insensitives: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterClientResultColumnCaseInsensitiveArgs']]]] = None,
                 client_session_keep_alive_heartbeat_frequencies: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterClientSessionKeepAliveHeartbeatFrequencyArgs']]]] = None,
                 client_session_keep_alives: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterClientSessionKeepAlifeArgs']]]] = None,
                 client_timestamp_type_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterClientTimestampTypeMappingArgs']]]] = None,
                 date_input_formats: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterDateInputFormatArgs']]]] = None,
                 date_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterDateOutputFormatArgs']]]] = None,
                 enable_unload_physical_type_optimizations: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterEnableUnloadPhysicalTypeOptimizationArgs']]]] = None,
                 enable_unredacted_query_syntax_errors: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterEnableUnredactedQuerySyntaxErrorArgs']]]] = None,
                 error_on_nondeterministic_merges: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterErrorOnNondeterministicMergeArgs']]]] = None,
                 error_on_nondeterministic_updates: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterErrorOnNondeterministicUpdateArgs']]]] = None,
                 geography_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterGeographyOutputFormatArgs']]]] = None,
                 geometry_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterGeometryOutputFormatArgs']]]] = None,
                 jdbc_treat_decimal_as_ints: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterJdbcTreatDecimalAsIntArgs']]]] = None,
                 jdbc_treat_timestamp_ntz_as_utcs: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterJdbcTreatTimestampNtzAsUtcArgs']]]] = None,
                 jdbc_use_session_timezones: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterJdbcUseSessionTimezoneArgs']]]] = None,
                 json_indents: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterJsonIndentArgs']]]] = None,
                 lock_timeouts: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterLockTimeoutArgs']]]] = None,
                 log_levels: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterLogLevelArgs']]]] = None,
                 multi_statement_counts: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterMultiStatementCountArgs']]]] = None,
                 network_policies: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterNetworkPolicyArgs']]]] = None,
                 noorder_sequence_as_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterNoorderSequenceAsDefaultArgs']]]] = None,
                 odbc_treat_decimal_as_ints: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterOdbcTreatDecimalAsIntArgs']]]] = None,
                 prevent_unload_to_internal_stages: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterPreventUnloadToInternalStageArgs']]]] = None,
                 query_tags: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterQueryTagArgs']]]] = None,
                 quoted_identifiers_ignore_cases: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterQuotedIdentifiersIgnoreCaseArgs']]]] = None,
                 rows_per_resultsets: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterRowsPerResultsetArgs']]]] = None,
                 s3_stage_vpce_dns_names: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterS3StageVpceDnsNameArgs']]]] = None,
                 search_paths: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterSearchPathArgs']]]] = None,
                 simulated_data_sharing_consumers: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterSimulatedDataSharingConsumerArgs']]]] = None,
                 statement_queued_timeout_in_seconds: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterStatementQueuedTimeoutInSecondArgs']]]] = None,
                 statement_timeout_in_seconds: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterStatementTimeoutInSecondArgs']]]] = None,
                 strict_json_outputs: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterStrictJsonOutputArgs']]]] = None,
                 time_input_formats: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimeInputFormatArgs']]]] = None,
                 time_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimeOutputFormatArgs']]]] = None,
                 timestamp_day_is_always24hs: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampDayIsAlways24hArgs']]]] = None,
                 timestamp_input_formats: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampInputFormatArgs']]]] = None,
                 timestamp_ltz_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampLtzOutputFormatArgs']]]] = None,
                 timestamp_ntz_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampNtzOutputFormatArgs']]]] = None,
                 timestamp_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampOutputFormatArgs']]]] = None,
                 timestamp_type_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampTypeMappingArgs']]]] = None,
                 timestamp_tz_output_formats: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampTzOutputFormatArgs']]]] = None,
                 timezones: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimezoneArgs']]]] = None,
                 trace_levels: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTraceLevelArgs']]]] = None,
                 transaction_abort_on_errors: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTransactionAbortOnErrorArgs']]]] = None,
                 transaction_default_isolation_levels: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTransactionDefaultIsolationLevelArgs']]]] = None,
                 two_digit_century_starts: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTwoDigitCenturyStartArgs']]]] = None,
                 unsupported_ddl_actions: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterUnsupportedDdlActionArgs']]]] = None,
                 use_cached_results: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterUseCachedResultArgs']]]] = None,
                 week_of_year_policies: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterWeekOfYearPolicyArgs']]]] = None,
                 week_starts: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterWeekStartArgs']]]] = None):
        if abort_detached_queries is not None:
            pulumi.set(__self__, "abort_detached_queries", abort_detached_queries)
        if autocommits is not None:
            pulumi.set(__self__, "autocommits", autocommits)
        if binary_input_formats is not None:
            pulumi.set(__self__, "binary_input_formats", binary_input_formats)
        if binary_output_formats is not None:
            pulumi.set(__self__, "binary_output_formats", binary_output_formats)
        if client_memory_limits is not None:
            pulumi.set(__self__, "client_memory_limits", client_memory_limits)
        if client_metadata_request_use_connection_ctxes is not None:
            pulumi.set(__self__, "client_metadata_request_use_connection_ctxes", client_metadata_request_use_connection_ctxes)
        if client_prefetch_threads is not None:
            pulumi.set(__self__, "client_prefetch_threads", client_prefetch_threads)
        if client_result_chunk_sizes is not None:
            pulumi.set(__self__, "client_result_chunk_sizes", client_result_chunk_sizes)
        if client_result_column_case_insensitives is not None:
            pulumi.set(__self__, "client_result_column_case_insensitives", client_result_column_case_insensitives)
        if client_session_keep_alive_heartbeat_frequencies is not None:
            pulumi.set(__self__, "client_session_keep_alive_heartbeat_frequencies", client_session_keep_alive_heartbeat_frequencies)
        if client_session_keep_alives is not None:
            pulumi.set(__self__, "client_session_keep_alives", client_session_keep_alives)
        if client_timestamp_type_mappings is not None:
            pulumi.set(__self__, "client_timestamp_type_mappings", client_timestamp_type_mappings)
        if date_input_formats is not None:
            pulumi.set(__self__, "date_input_formats", date_input_formats)
        if date_output_formats is not None:
            pulumi.set(__self__, "date_output_formats", date_output_formats)
        if enable_unload_physical_type_optimizations is not None:
            pulumi.set(__self__, "enable_unload_physical_type_optimizations", enable_unload_physical_type_optimizations)
        if enable_unredacted_query_syntax_errors is not None:
            pulumi.set(__self__, "enable_unredacted_query_syntax_errors", enable_unredacted_query_syntax_errors)
        if error_on_nondeterministic_merges is not None:
            pulumi.set(__self__, "error_on_nondeterministic_merges", error_on_nondeterministic_merges)
        if error_on_nondeterministic_updates is not None:
            pulumi.set(__self__, "error_on_nondeterministic_updates", error_on_nondeterministic_updates)
        if geography_output_formats is not None:
            pulumi.set(__self__, "geography_output_formats", geography_output_formats)
        if geometry_output_formats is not None:
            pulumi.set(__self__, "geometry_output_formats", geometry_output_formats)
        if jdbc_treat_decimal_as_ints is not None:
            pulumi.set(__self__, "jdbc_treat_decimal_as_ints", jdbc_treat_decimal_as_ints)
        if jdbc_treat_timestamp_ntz_as_utcs is not None:
            pulumi.set(__self__, "jdbc_treat_timestamp_ntz_as_utcs", jdbc_treat_timestamp_ntz_as_utcs)
        if jdbc_use_session_timezones is not None:
            pulumi.set(__self__, "jdbc_use_session_timezones", jdbc_use_session_timezones)
        if json_indents is not None:
            pulumi.set(__self__, "json_indents", json_indents)
        if lock_timeouts is not None:
            pulumi.set(__self__, "lock_timeouts", lock_timeouts)
        if log_levels is not None:
            pulumi.set(__self__, "log_levels", log_levels)
        if multi_statement_counts is not None:
            pulumi.set(__self__, "multi_statement_counts", multi_statement_counts)
        if network_policies is not None:
            pulumi.set(__self__, "network_policies", network_policies)
        if noorder_sequence_as_defaults is not None:
            pulumi.set(__self__, "noorder_sequence_as_defaults", noorder_sequence_as_defaults)
        if odbc_treat_decimal_as_ints is not None:
            pulumi.set(__self__, "odbc_treat_decimal_as_ints", odbc_treat_decimal_as_ints)
        if prevent_unload_to_internal_stages is not None:
            pulumi.set(__self__, "prevent_unload_to_internal_stages", prevent_unload_to_internal_stages)
        if query_tags is not None:
            pulumi.set(__self__, "query_tags", query_tags)
        if quoted_identifiers_ignore_cases is not None:
            pulumi.set(__self__, "quoted_identifiers_ignore_cases", quoted_identifiers_ignore_cases)
        if rows_per_resultsets is not None:
            pulumi.set(__self__, "rows_per_resultsets", rows_per_resultsets)
        if s3_stage_vpce_dns_names is not None:
            pulumi.set(__self__, "s3_stage_vpce_dns_names", s3_stage_vpce_dns_names)
        if search_paths is not None:
            pulumi.set(__self__, "search_paths", search_paths)
        if simulated_data_sharing_consumers is not None:
            pulumi.set(__self__, "simulated_data_sharing_consumers", simulated_data_sharing_consumers)
        if statement_queued_timeout_in_seconds is not None:
            pulumi.set(__self__, "statement_queued_timeout_in_seconds", statement_queued_timeout_in_seconds)
        if statement_timeout_in_seconds is not None:
            pulumi.set(__self__, "statement_timeout_in_seconds", statement_timeout_in_seconds)
        if strict_json_outputs is not None:
            pulumi.set(__self__, "strict_json_outputs", strict_json_outputs)
        if time_input_formats is not None:
            pulumi.set(__self__, "time_input_formats", time_input_formats)
        if time_output_formats is not None:
            pulumi.set(__self__, "time_output_formats", time_output_formats)
        if timestamp_day_is_always24hs is not None:
            pulumi.set(__self__, "timestamp_day_is_always24hs", timestamp_day_is_always24hs)
        if timestamp_input_formats is not None:
            pulumi.set(__self__, "timestamp_input_formats", timestamp_input_formats)
        if timestamp_ltz_output_formats is not None:
            pulumi.set(__self__, "timestamp_ltz_output_formats", timestamp_ltz_output_formats)
        if timestamp_ntz_output_formats is not None:
            pulumi.set(__self__, "timestamp_ntz_output_formats", timestamp_ntz_output_formats)
        if timestamp_output_formats is not None:
            pulumi.set(__self__, "timestamp_output_formats", timestamp_output_formats)
        if timestamp_type_mappings is not None:
            pulumi.set(__self__, "timestamp_type_mappings", timestamp_type_mappings)
        if timestamp_tz_output_formats is not None:
            pulumi.set(__self__, "timestamp_tz_output_formats", timestamp_tz_output_formats)
        if timezones is not None:
            pulumi.set(__self__, "timezones", timezones)
        if trace_levels is not None:
            pulumi.set(__self__, "trace_levels", trace_levels)
        if transaction_abort_on_errors is not None:
            pulumi.set(__self__, "transaction_abort_on_errors", transaction_abort_on_errors)
        if transaction_default_isolation_levels is not None:
            pulumi.set(__self__, "transaction_default_isolation_levels", transaction_default_isolation_levels)
        if two_digit_century_starts is not None:
            pulumi.set(__self__, "two_digit_century_starts", two_digit_century_starts)
        if unsupported_ddl_actions is not None:
            pulumi.set(__self__, "unsupported_ddl_actions", unsupported_ddl_actions)
        if use_cached_results is not None:
            pulumi.set(__self__, "use_cached_results", use_cached_results)
        if week_of_year_policies is not None:
            pulumi.set(__self__, "week_of_year_policies", week_of_year_policies)
        if week_starts is not None:
            pulumi.set(__self__, "week_starts", week_starts)

    @property
    @pulumi.getter(name="abortDetachedQueries")
    def abort_detached_queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterAbortDetachedQueryArgs']]]]:
        return pulumi.get(self, "abort_detached_queries")

    @abort_detached_queries.setter
    def abort_detached_queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterAbortDetachedQueryArgs']]]]):
        pulumi.set(self, "abort_detached_queries", value)

    @property
    @pulumi.getter
    def autocommits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterAutocommitArgs']]]]:
        return pulumi.get(self, "autocommits")

    @autocommits.setter
    def autocommits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterAutocommitArgs']]]]):
        pulumi.set(self, "autocommits", value)

    @property
    @pulumi.getter(name="binaryInputFormats")
    def binary_input_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterBinaryInputFormatArgs']]]]:
        return pulumi.get(self, "binary_input_formats")

    @binary_input_formats.setter
    def binary_input_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterBinaryInputFormatArgs']]]]):
        pulumi.set(self, "binary_input_formats", value)

    @property
    @pulumi.getter(name="binaryOutputFormats")
    def binary_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterBinaryOutputFormatArgs']]]]:
        return pulumi.get(self, "binary_output_formats")

    @binary_output_formats.setter
    def binary_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterBinaryOutputFormatArgs']]]]):
        pulumi.set(self, "binary_output_formats", value)

    @property
    @pulumi.getter(name="clientMemoryLimits")
    def client_memory_limits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterClientMemoryLimitArgs']]]]:
        return pulumi.get(self, "client_memory_limits")

    @client_memory_limits.setter
    def client_memory_limits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterClientMemoryLimitArgs']]]]):
        pulumi.set(self, "client_memory_limits", value)

    @property
    @pulumi.getter(name="clientMetadataRequestUseConnectionCtxes")
    def client_metadata_request_use_connection_ctxes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterClientMetadataRequestUseConnectionCtxArgs']]]]:
        return pulumi.get(self, "client_metadata_request_use_connection_ctxes")

    @client_metadata_request_use_connection_ctxes.setter
    def client_metadata_request_use_connection_ctxes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterClientMetadataRequestUseConnectionCtxArgs']]]]):
        pulumi.set(self, "client_metadata_request_use_connection_ctxes", value)

    @property
    @pulumi.getter(name="clientPrefetchThreads")
    def client_prefetch_threads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterClientPrefetchThreadArgs']]]]:
        return pulumi.get(self, "client_prefetch_threads")

    @client_prefetch_threads.setter
    def client_prefetch_threads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterClientPrefetchThreadArgs']]]]):
        pulumi.set(self, "client_prefetch_threads", value)

    @property
    @pulumi.getter(name="clientResultChunkSizes")
    def client_result_chunk_sizes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterClientResultChunkSizeArgs']]]]:
        return pulumi.get(self, "client_result_chunk_sizes")

    @client_result_chunk_sizes.setter
    def client_result_chunk_sizes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterClientResultChunkSizeArgs']]]]):
        pulumi.set(self, "client_result_chunk_sizes", value)

    @property
    @pulumi.getter(name="clientResultColumnCaseInsensitives")
    def client_result_column_case_insensitives(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterClientResultColumnCaseInsensitiveArgs']]]]:
        return pulumi.get(self, "client_result_column_case_insensitives")

    @client_result_column_case_insensitives.setter
    def client_result_column_case_insensitives(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterClientResultColumnCaseInsensitiveArgs']]]]):
        pulumi.set(self, "client_result_column_case_insensitives", value)

    @property
    @pulumi.getter(name="clientSessionKeepAliveHeartbeatFrequencies")
    def client_session_keep_alive_heartbeat_frequencies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterClientSessionKeepAliveHeartbeatFrequencyArgs']]]]:
        return pulumi.get(self, "client_session_keep_alive_heartbeat_frequencies")

    @client_session_keep_alive_heartbeat_frequencies.setter
    def client_session_keep_alive_heartbeat_frequencies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterClientSessionKeepAliveHeartbeatFrequencyArgs']]]]):
        pulumi.set(self, "client_session_keep_alive_heartbeat_frequencies", value)

    @property
    @pulumi.getter(name="clientSessionKeepAlives")
    def client_session_keep_alives(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterClientSessionKeepAlifeArgs']]]]:
        return pulumi.get(self, "client_session_keep_alives")

    @client_session_keep_alives.setter
    def client_session_keep_alives(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterClientSessionKeepAlifeArgs']]]]):
        pulumi.set(self, "client_session_keep_alives", value)

    @property
    @pulumi.getter(name="clientTimestampTypeMappings")
    def client_timestamp_type_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterClientTimestampTypeMappingArgs']]]]:
        return pulumi.get(self, "client_timestamp_type_mappings")

    @client_timestamp_type_mappings.setter
    def client_timestamp_type_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterClientTimestampTypeMappingArgs']]]]):
        pulumi.set(self, "client_timestamp_type_mappings", value)

    @property
    @pulumi.getter(name="dateInputFormats")
    def date_input_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterDateInputFormatArgs']]]]:
        return pulumi.get(self, "date_input_formats")

    @date_input_formats.setter
    def date_input_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterDateInputFormatArgs']]]]):
        pulumi.set(self, "date_input_formats", value)

    @property
    @pulumi.getter(name="dateOutputFormats")
    def date_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterDateOutputFormatArgs']]]]:
        return pulumi.get(self, "date_output_formats")

    @date_output_formats.setter
    def date_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterDateOutputFormatArgs']]]]):
        pulumi.set(self, "date_output_formats", value)

    @property
    @pulumi.getter(name="enableUnloadPhysicalTypeOptimizations")
    def enable_unload_physical_type_optimizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterEnableUnloadPhysicalTypeOptimizationArgs']]]]:
        return pulumi.get(self, "enable_unload_physical_type_optimizations")

    @enable_unload_physical_type_optimizations.setter
    def enable_unload_physical_type_optimizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterEnableUnloadPhysicalTypeOptimizationArgs']]]]):
        pulumi.set(self, "enable_unload_physical_type_optimizations", value)

    @property
    @pulumi.getter(name="enableUnredactedQuerySyntaxErrors")
    def enable_unredacted_query_syntax_errors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterEnableUnredactedQuerySyntaxErrorArgs']]]]:
        return pulumi.get(self, "enable_unredacted_query_syntax_errors")

    @enable_unredacted_query_syntax_errors.setter
    def enable_unredacted_query_syntax_errors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterEnableUnredactedQuerySyntaxErrorArgs']]]]):
        pulumi.set(self, "enable_unredacted_query_syntax_errors", value)

    @property
    @pulumi.getter(name="errorOnNondeterministicMerges")
    def error_on_nondeterministic_merges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterErrorOnNondeterministicMergeArgs']]]]:
        return pulumi.get(self, "error_on_nondeterministic_merges")

    @error_on_nondeterministic_merges.setter
    def error_on_nondeterministic_merges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterErrorOnNondeterministicMergeArgs']]]]):
        pulumi.set(self, "error_on_nondeterministic_merges", value)

    @property
    @pulumi.getter(name="errorOnNondeterministicUpdates")
    def error_on_nondeterministic_updates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterErrorOnNondeterministicUpdateArgs']]]]:
        return pulumi.get(self, "error_on_nondeterministic_updates")

    @error_on_nondeterministic_updates.setter
    def error_on_nondeterministic_updates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterErrorOnNondeterministicUpdateArgs']]]]):
        pulumi.set(self, "error_on_nondeterministic_updates", value)

    @property
    @pulumi.getter(name="geographyOutputFormats")
    def geography_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterGeographyOutputFormatArgs']]]]:
        return pulumi.get(self, "geography_output_formats")

    @geography_output_formats.setter
    def geography_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterGeographyOutputFormatArgs']]]]):
        pulumi.set(self, "geography_output_formats", value)

    @property
    @pulumi.getter(name="geometryOutputFormats")
    def geometry_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterGeometryOutputFormatArgs']]]]:
        return pulumi.get(self, "geometry_output_formats")

    @geometry_output_formats.setter
    def geometry_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterGeometryOutputFormatArgs']]]]):
        pulumi.set(self, "geometry_output_formats", value)

    @property
    @pulumi.getter(name="jdbcTreatDecimalAsInts")
    def jdbc_treat_decimal_as_ints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterJdbcTreatDecimalAsIntArgs']]]]:
        return pulumi.get(self, "jdbc_treat_decimal_as_ints")

    @jdbc_treat_decimal_as_ints.setter
    def jdbc_treat_decimal_as_ints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterJdbcTreatDecimalAsIntArgs']]]]):
        pulumi.set(self, "jdbc_treat_decimal_as_ints", value)

    @property
    @pulumi.getter(name="jdbcTreatTimestampNtzAsUtcs")
    def jdbc_treat_timestamp_ntz_as_utcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterJdbcTreatTimestampNtzAsUtcArgs']]]]:
        return pulumi.get(self, "jdbc_treat_timestamp_ntz_as_utcs")

    @jdbc_treat_timestamp_ntz_as_utcs.setter
    def jdbc_treat_timestamp_ntz_as_utcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterJdbcTreatTimestampNtzAsUtcArgs']]]]):
        pulumi.set(self, "jdbc_treat_timestamp_ntz_as_utcs", value)

    @property
    @pulumi.getter(name="jdbcUseSessionTimezones")
    def jdbc_use_session_timezones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterJdbcUseSessionTimezoneArgs']]]]:
        return pulumi.get(self, "jdbc_use_session_timezones")

    @jdbc_use_session_timezones.setter
    def jdbc_use_session_timezones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterJdbcUseSessionTimezoneArgs']]]]):
        pulumi.set(self, "jdbc_use_session_timezones", value)

    @property
    @pulumi.getter(name="jsonIndents")
    def json_indents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterJsonIndentArgs']]]]:
        return pulumi.get(self, "json_indents")

    @json_indents.setter
    def json_indents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterJsonIndentArgs']]]]):
        pulumi.set(self, "json_indents", value)

    @property
    @pulumi.getter(name="lockTimeouts")
    def lock_timeouts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterLockTimeoutArgs']]]]:
        return pulumi.get(self, "lock_timeouts")

    @lock_timeouts.setter
    def lock_timeouts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterLockTimeoutArgs']]]]):
        pulumi.set(self, "lock_timeouts", value)

    @property
    @pulumi.getter(name="logLevels")
    def log_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterLogLevelArgs']]]]:
        return pulumi.get(self, "log_levels")

    @log_levels.setter
    def log_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterLogLevelArgs']]]]):
        pulumi.set(self, "log_levels", value)

    @property
    @pulumi.getter(name="multiStatementCounts")
    def multi_statement_counts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterMultiStatementCountArgs']]]]:
        return pulumi.get(self, "multi_statement_counts")

    @multi_statement_counts.setter
    def multi_statement_counts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterMultiStatementCountArgs']]]]):
        pulumi.set(self, "multi_statement_counts", value)

    @property
    @pulumi.getter(name="networkPolicies")
    def network_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterNetworkPolicyArgs']]]]:
        return pulumi.get(self, "network_policies")

    @network_policies.setter
    def network_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterNetworkPolicyArgs']]]]):
        pulumi.set(self, "network_policies", value)

    @property
    @pulumi.getter(name="noorderSequenceAsDefaults")
    def noorder_sequence_as_defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterNoorderSequenceAsDefaultArgs']]]]:
        return pulumi.get(self, "noorder_sequence_as_defaults")

    @noorder_sequence_as_defaults.setter
    def noorder_sequence_as_defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterNoorderSequenceAsDefaultArgs']]]]):
        pulumi.set(self, "noorder_sequence_as_defaults", value)

    @property
    @pulumi.getter(name="odbcTreatDecimalAsInts")
    def odbc_treat_decimal_as_ints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterOdbcTreatDecimalAsIntArgs']]]]:
        return pulumi.get(self, "odbc_treat_decimal_as_ints")

    @odbc_treat_decimal_as_ints.setter
    def odbc_treat_decimal_as_ints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterOdbcTreatDecimalAsIntArgs']]]]):
        pulumi.set(self, "odbc_treat_decimal_as_ints", value)

    @property
    @pulumi.getter(name="preventUnloadToInternalStages")
    def prevent_unload_to_internal_stages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterPreventUnloadToInternalStageArgs']]]]:
        return pulumi.get(self, "prevent_unload_to_internal_stages")

    @prevent_unload_to_internal_stages.setter
    def prevent_unload_to_internal_stages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterPreventUnloadToInternalStageArgs']]]]):
        pulumi.set(self, "prevent_unload_to_internal_stages", value)

    @property
    @pulumi.getter(name="queryTags")
    def query_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterQueryTagArgs']]]]:
        return pulumi.get(self, "query_tags")

    @query_tags.setter
    def query_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterQueryTagArgs']]]]):
        pulumi.set(self, "query_tags", value)

    @property
    @pulumi.getter(name="quotedIdentifiersIgnoreCases")
    def quoted_identifiers_ignore_cases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterQuotedIdentifiersIgnoreCaseArgs']]]]:
        return pulumi.get(self, "quoted_identifiers_ignore_cases")

    @quoted_identifiers_ignore_cases.setter
    def quoted_identifiers_ignore_cases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterQuotedIdentifiersIgnoreCaseArgs']]]]):
        pulumi.set(self, "quoted_identifiers_ignore_cases", value)

    @property
    @pulumi.getter(name="rowsPerResultsets")
    def rows_per_resultsets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterRowsPerResultsetArgs']]]]:
        return pulumi.get(self, "rows_per_resultsets")

    @rows_per_resultsets.setter
    def rows_per_resultsets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterRowsPerResultsetArgs']]]]):
        pulumi.set(self, "rows_per_resultsets", value)

    @property
    @pulumi.getter(name="s3StageVpceDnsNames")
    def s3_stage_vpce_dns_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterS3StageVpceDnsNameArgs']]]]:
        return pulumi.get(self, "s3_stage_vpce_dns_names")

    @s3_stage_vpce_dns_names.setter
    def s3_stage_vpce_dns_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterS3StageVpceDnsNameArgs']]]]):
        pulumi.set(self, "s3_stage_vpce_dns_names", value)

    @property
    @pulumi.getter(name="searchPaths")
    def search_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterSearchPathArgs']]]]:
        return pulumi.get(self, "search_paths")

    @search_paths.setter
    def search_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterSearchPathArgs']]]]):
        pulumi.set(self, "search_paths", value)

    @property
    @pulumi.getter(name="simulatedDataSharingConsumers")
    def simulated_data_sharing_consumers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterSimulatedDataSharingConsumerArgs']]]]:
        return pulumi.get(self, "simulated_data_sharing_consumers")

    @simulated_data_sharing_consumers.setter
    def simulated_data_sharing_consumers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterSimulatedDataSharingConsumerArgs']]]]):
        pulumi.set(self, "simulated_data_sharing_consumers", value)

    @property
    @pulumi.getter(name="statementQueuedTimeoutInSeconds")
    def statement_queued_timeout_in_seconds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterStatementQueuedTimeoutInSecondArgs']]]]:
        return pulumi.get(self, "statement_queued_timeout_in_seconds")

    @statement_queued_timeout_in_seconds.setter
    def statement_queued_timeout_in_seconds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterStatementQueuedTimeoutInSecondArgs']]]]):
        pulumi.set(self, "statement_queued_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="statementTimeoutInSeconds")
    def statement_timeout_in_seconds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterStatementTimeoutInSecondArgs']]]]:
        return pulumi.get(self, "statement_timeout_in_seconds")

    @statement_timeout_in_seconds.setter
    def statement_timeout_in_seconds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterStatementTimeoutInSecondArgs']]]]):
        pulumi.set(self, "statement_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="strictJsonOutputs")
    def strict_json_outputs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterStrictJsonOutputArgs']]]]:
        return pulumi.get(self, "strict_json_outputs")

    @strict_json_outputs.setter
    def strict_json_outputs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterStrictJsonOutputArgs']]]]):
        pulumi.set(self, "strict_json_outputs", value)

    @property
    @pulumi.getter(name="timeInputFormats")
    def time_input_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimeInputFormatArgs']]]]:
        return pulumi.get(self, "time_input_formats")

    @time_input_formats.setter
    def time_input_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimeInputFormatArgs']]]]):
        pulumi.set(self, "time_input_formats", value)

    @property
    @pulumi.getter(name="timeOutputFormats")
    def time_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimeOutputFormatArgs']]]]:
        return pulumi.get(self, "time_output_formats")

    @time_output_formats.setter
    def time_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimeOutputFormatArgs']]]]):
        pulumi.set(self, "time_output_formats", value)

    @property
    @pulumi.getter(name="timestampDayIsAlways24hs")
    def timestamp_day_is_always24hs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampDayIsAlways24hArgs']]]]:
        return pulumi.get(self, "timestamp_day_is_always24hs")

    @timestamp_day_is_always24hs.setter
    def timestamp_day_is_always24hs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampDayIsAlways24hArgs']]]]):
        pulumi.set(self, "timestamp_day_is_always24hs", value)

    @property
    @pulumi.getter(name="timestampInputFormats")
    def timestamp_input_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampInputFormatArgs']]]]:
        return pulumi.get(self, "timestamp_input_formats")

    @timestamp_input_formats.setter
    def timestamp_input_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampInputFormatArgs']]]]):
        pulumi.set(self, "timestamp_input_formats", value)

    @property
    @pulumi.getter(name="timestampLtzOutputFormats")
    def timestamp_ltz_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampLtzOutputFormatArgs']]]]:
        return pulumi.get(self, "timestamp_ltz_output_formats")

    @timestamp_ltz_output_formats.setter
    def timestamp_ltz_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampLtzOutputFormatArgs']]]]):
        pulumi.set(self, "timestamp_ltz_output_formats", value)

    @property
    @pulumi.getter(name="timestampNtzOutputFormats")
    def timestamp_ntz_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampNtzOutputFormatArgs']]]]:
        return pulumi.get(self, "timestamp_ntz_output_formats")

    @timestamp_ntz_output_formats.setter
    def timestamp_ntz_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampNtzOutputFormatArgs']]]]):
        pulumi.set(self, "timestamp_ntz_output_formats", value)

    @property
    @pulumi.getter(name="timestampOutputFormats")
    def timestamp_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampOutputFormatArgs']]]]:
        return pulumi.get(self, "timestamp_output_formats")

    @timestamp_output_formats.setter
    def timestamp_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampOutputFormatArgs']]]]):
        pulumi.set(self, "timestamp_output_formats", value)

    @property
    @pulumi.getter(name="timestampTypeMappings")
    def timestamp_type_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampTypeMappingArgs']]]]:
        return pulumi.get(self, "timestamp_type_mappings")

    @timestamp_type_mappings.setter
    def timestamp_type_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampTypeMappingArgs']]]]):
        pulumi.set(self, "timestamp_type_mappings", value)

    @property
    @pulumi.getter(name="timestampTzOutputFormats")
    def timestamp_tz_output_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampTzOutputFormatArgs']]]]:
        return pulumi.get(self, "timestamp_tz_output_formats")

    @timestamp_tz_output_formats.setter
    def timestamp_tz_output_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimestampTzOutputFormatArgs']]]]):
        pulumi.set(self, "timestamp_tz_output_formats", value)

    @property
    @pulumi.getter
    def timezones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimezoneArgs']]]]:
        return pulumi.get(self, "timezones")

    @timezones.setter
    def timezones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTimezoneArgs']]]]):
        pulumi.set(self, "timezones", value)

    @property
    @pulumi.getter(name="traceLevels")
    def trace_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTraceLevelArgs']]]]:
        return pulumi.get(self, "trace_levels")

    @trace_levels.setter
    def trace_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTraceLevelArgs']]]]):
        pulumi.set(self, "trace_levels", value)

    @property
    @pulumi.getter(name="transactionAbortOnErrors")
    def transaction_abort_on_errors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTransactionAbortOnErrorArgs']]]]:
        return pulumi.get(self, "transaction_abort_on_errors")

    @transaction_abort_on_errors.setter
    def transaction_abort_on_errors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTransactionAbortOnErrorArgs']]]]):
        pulumi.set(self, "transaction_abort_on_errors", value)

    @property
    @pulumi.getter(name="transactionDefaultIsolationLevels")
    def transaction_default_isolation_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTransactionDefaultIsolationLevelArgs']]]]:
        return pulumi.get(self, "transaction_default_isolation_levels")

    @transaction_default_isolation_levels.setter
    def transaction_default_isolation_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTransactionDefaultIsolationLevelArgs']]]]):
        pulumi.set(self, "transaction_default_isolation_levels", value)

    @property
    @pulumi.getter(name="twoDigitCenturyStarts")
    def two_digit_century_starts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTwoDigitCenturyStartArgs']]]]:
        return pulumi.get(self, "two_digit_century_starts")

    @two_digit_century_starts.setter
    def two_digit_century_starts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterTwoDigitCenturyStartArgs']]]]):
        pulumi.set(self, "two_digit_century_starts", value)

    @property
    @pulumi.getter(name="unsupportedDdlActions")
    def unsupported_ddl_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterUnsupportedDdlActionArgs']]]]:
        return pulumi.get(self, "unsupported_ddl_actions")

    @unsupported_ddl_actions.setter
    def unsupported_ddl_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterUnsupportedDdlActionArgs']]]]):
        pulumi.set(self, "unsupported_ddl_actions", value)

    @property
    @pulumi.getter(name="useCachedResults")
    def use_cached_results(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterUseCachedResultArgs']]]]:
        return pulumi.get(self, "use_cached_results")

    @use_cached_results.setter
    def use_cached_results(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterUseCachedResultArgs']]]]):
        pulumi.set(self, "use_cached_results", value)

    @property
    @pulumi.getter(name="weekOfYearPolicies")
    def week_of_year_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterWeekOfYearPolicyArgs']]]]:
        return pulumi.get(self, "week_of_year_policies")

    @week_of_year_policies.setter
    def week_of_year_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterWeekOfYearPolicyArgs']]]]):
        pulumi.set(self, "week_of_year_policies", value)

    @property
    @pulumi.getter(name="weekStarts")
    def week_starts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterWeekStartArgs']]]]:
        return pulumi.get(self, "week_starts")

    @week_starts.setter
    def week_starts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserParameterWeekStartArgs']]]]):
        pulumi.set(self, "week_starts", value)


if not MYPY:
    class UserParameterAbortDetachedQueryArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterAbortDetachedQueryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterAbortDetachedQueryArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterAutocommitArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterAutocommitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterAutocommitArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterBinaryInputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterBinaryInputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterBinaryInputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterBinaryOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterBinaryOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterBinaryOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterClientMemoryLimitArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterClientMemoryLimitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterClientMemoryLimitArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterClientMetadataRequestUseConnectionCtxArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterClientMetadataRequestUseConnectionCtxArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterClientMetadataRequestUseConnectionCtxArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterClientPrefetchThreadArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterClientPrefetchThreadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterClientPrefetchThreadArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterClientResultChunkSizeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterClientResultChunkSizeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterClientResultChunkSizeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterClientResultColumnCaseInsensitiveArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterClientResultColumnCaseInsensitiveArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterClientResultColumnCaseInsensitiveArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterClientSessionKeepAlifeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterClientSessionKeepAlifeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterClientSessionKeepAlifeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterClientSessionKeepAliveHeartbeatFrequencyArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterClientSessionKeepAliveHeartbeatFrequencyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterClientSessionKeepAliveHeartbeatFrequencyArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterClientTimestampTypeMappingArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterClientTimestampTypeMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterClientTimestampTypeMappingArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterDateInputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterDateInputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterDateInputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterDateOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterDateOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterDateOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterEnableUnloadPhysicalTypeOptimizationArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterEnableUnloadPhysicalTypeOptimizationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterEnableUnloadPhysicalTypeOptimizationArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterEnableUnredactedQuerySyntaxErrorArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterEnableUnredactedQuerySyntaxErrorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterEnableUnredactedQuerySyntaxErrorArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterErrorOnNondeterministicMergeArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterErrorOnNondeterministicMergeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterErrorOnNondeterministicMergeArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterErrorOnNondeterministicUpdateArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterErrorOnNondeterministicUpdateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterErrorOnNondeterministicUpdateArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterGeographyOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterGeographyOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterGeographyOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterGeometryOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterGeometryOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterGeometryOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterJdbcTreatDecimalAsIntArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterJdbcTreatDecimalAsIntArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterJdbcTreatDecimalAsIntArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterJdbcTreatTimestampNtzAsUtcArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterJdbcTreatTimestampNtzAsUtcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterJdbcTreatTimestampNtzAsUtcArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterJdbcUseSessionTimezoneArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterJdbcUseSessionTimezoneArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterJdbcUseSessionTimezoneArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterJsonIndentArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterJsonIndentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterJsonIndentArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterLockTimeoutArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterLockTimeoutArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterLockTimeoutArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterLogLevelArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterLogLevelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterLogLevelArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterMultiStatementCountArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterMultiStatementCountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterMultiStatementCountArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterNetworkPolicyArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterNetworkPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterNetworkPolicyArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterNoorderSequenceAsDefaultArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterNoorderSequenceAsDefaultArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterNoorderSequenceAsDefaultArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterOdbcTreatDecimalAsIntArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterOdbcTreatDecimalAsIntArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterOdbcTreatDecimalAsIntArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterPreventUnloadToInternalStageArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterPreventUnloadToInternalStageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterPreventUnloadToInternalStageArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterQueryTagArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterQueryTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterQueryTagArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterQuotedIdentifiersIgnoreCaseArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterQuotedIdentifiersIgnoreCaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterQuotedIdentifiersIgnoreCaseArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterRowsPerResultsetArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterRowsPerResultsetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterRowsPerResultsetArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterS3StageVpceDnsNameArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterS3StageVpceDnsNameArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterS3StageVpceDnsNameArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterSearchPathArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterSearchPathArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterSearchPathArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterSimulatedDataSharingConsumerArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterSimulatedDataSharingConsumerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterSimulatedDataSharingConsumerArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterStatementQueuedTimeoutInSecondArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterStatementQueuedTimeoutInSecondArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterStatementQueuedTimeoutInSecondArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterStatementTimeoutInSecondArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterStatementTimeoutInSecondArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterStatementTimeoutInSecondArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterStrictJsonOutputArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterStrictJsonOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterStrictJsonOutputArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterTimeInputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterTimeInputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterTimeInputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterTimeOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterTimeOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterTimeOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterTimestampDayIsAlways24hArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterTimestampDayIsAlways24hArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterTimestampDayIsAlways24hArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterTimestampInputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterTimestampInputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterTimestampInputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterTimestampLtzOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterTimestampLtzOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterTimestampLtzOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterTimestampNtzOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterTimestampNtzOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterTimestampNtzOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterTimestampOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterTimestampOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterTimestampOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterTimestampTypeMappingArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterTimestampTypeMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterTimestampTypeMappingArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterTimestampTzOutputFormatArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterTimestampTzOutputFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterTimestampTzOutputFormatArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterTimezoneArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterTimezoneArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterTimezoneArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterTraceLevelArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterTraceLevelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterTraceLevelArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterTransactionAbortOnErrorArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterTransactionAbortOnErrorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterTransactionAbortOnErrorArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterTransactionDefaultIsolationLevelArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterTransactionDefaultIsolationLevelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterTransactionDefaultIsolationLevelArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterTwoDigitCenturyStartArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterTwoDigitCenturyStartArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterTwoDigitCenturyStartArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterUnsupportedDdlActionArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterUnsupportedDdlActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterUnsupportedDdlActionArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterUseCachedResultArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterUseCachedResultArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterUseCachedResultArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterWeekOfYearPolicyArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterWeekOfYearPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterWeekOfYearPolicyArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserParameterWeekStartArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserParameterWeekStartArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserParameterWeekStartArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserShowOutputArgsDict(TypedDict):
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        days_to_expiry: NotRequired[pulumi.Input[str]]
        default_namespace: NotRequired[pulumi.Input[str]]
        default_role: NotRequired[pulumi.Input[str]]
        default_secondary_roles: NotRequired[pulumi.Input[str]]
        default_warehouse: NotRequired[pulumi.Input[str]]
        disabled: NotRequired[pulumi.Input[bool]]
        display_name: NotRequired[pulumi.Input[str]]
        email: NotRequired[pulumi.Input[str]]
        expires_at_time: NotRequired[pulumi.Input[str]]
        ext_authn_duo: NotRequired[pulumi.Input[bool]]
        ext_authn_uid: NotRequired[pulumi.Input[str]]
        first_name: NotRequired[pulumi.Input[str]]
        has_mfa: NotRequired[pulumi.Input[bool]]
        has_password: NotRequired[pulumi.Input[bool]]
        has_rsa_public_key: NotRequired[pulumi.Input[bool]]
        last_name: NotRequired[pulumi.Input[str]]
        last_success_login: NotRequired[pulumi.Input[str]]
        locked_until_time: NotRequired[pulumi.Input[str]]
        login_name: NotRequired[pulumi.Input[str]]
        mins_to_bypass_mfa: NotRequired[pulumi.Input[str]]
        mins_to_unlock: NotRequired[pulumi.Input[str]]
        must_change_password: NotRequired[pulumi.Input[bool]]
        name: NotRequired[pulumi.Input[str]]
        owner: NotRequired[pulumi.Input[str]]
        snowflake_lock: NotRequired[pulumi.Input[bool]]
        type: NotRequired[pulumi.Input[str]]
elif False:
    UserShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserShowOutputArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 days_to_expiry: Optional[pulumi.Input[str]] = None,
                 default_namespace: Optional[pulumi.Input[str]] = None,
                 default_role: Optional[pulumi.Input[str]] = None,
                 default_secondary_roles: Optional[pulumi.Input[str]] = None,
                 default_warehouse: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 expires_at_time: Optional[pulumi.Input[str]] = None,
                 ext_authn_duo: Optional[pulumi.Input[bool]] = None,
                 ext_authn_uid: Optional[pulumi.Input[str]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 has_mfa: Optional[pulumi.Input[bool]] = None,
                 has_password: Optional[pulumi.Input[bool]] = None,
                 has_rsa_public_key: Optional[pulumi.Input[bool]] = None,
                 last_name: Optional[pulumi.Input[str]] = None,
                 last_success_login: Optional[pulumi.Input[str]] = None,
                 locked_until_time: Optional[pulumi.Input[str]] = None,
                 login_name: Optional[pulumi.Input[str]] = None,
                 mins_to_bypass_mfa: Optional[pulumi.Input[str]] = None,
                 mins_to_unlock: Optional[pulumi.Input[str]] = None,
                 must_change_password: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 snowflake_lock: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if days_to_expiry is not None:
            pulumi.set(__self__, "days_to_expiry", days_to_expiry)
        if default_namespace is not None:
            pulumi.set(__self__, "default_namespace", default_namespace)
        if default_role is not None:
            pulumi.set(__self__, "default_role", default_role)
        if default_secondary_roles is not None:
            pulumi.set(__self__, "default_secondary_roles", default_secondary_roles)
        if default_warehouse is not None:
            pulumi.set(__self__, "default_warehouse", default_warehouse)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if expires_at_time is not None:
            pulumi.set(__self__, "expires_at_time", expires_at_time)
        if ext_authn_duo is not None:
            pulumi.set(__self__, "ext_authn_duo", ext_authn_duo)
        if ext_authn_uid is not None:
            pulumi.set(__self__, "ext_authn_uid", ext_authn_uid)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if has_mfa is not None:
            pulumi.set(__self__, "has_mfa", has_mfa)
        if has_password is not None:
            pulumi.set(__self__, "has_password", has_password)
        if has_rsa_public_key is not None:
            pulumi.set(__self__, "has_rsa_public_key", has_rsa_public_key)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if last_success_login is not None:
            pulumi.set(__self__, "last_success_login", last_success_login)
        if locked_until_time is not None:
            pulumi.set(__self__, "locked_until_time", locked_until_time)
        if login_name is not None:
            pulumi.set(__self__, "login_name", login_name)
        if mins_to_bypass_mfa is not None:
            pulumi.set(__self__, "mins_to_bypass_mfa", mins_to_bypass_mfa)
        if mins_to_unlock is not None:
            pulumi.set(__self__, "mins_to_unlock", mins_to_unlock)
        if must_change_password is not None:
            pulumi.set(__self__, "must_change_password", must_change_password)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if snowflake_lock is not None:
            pulumi.set(__self__, "snowflake_lock", snowflake_lock)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="daysToExpiry")
    def days_to_expiry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "days_to_expiry")

    @days_to_expiry.setter
    def days_to_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "days_to_expiry", value)

    @property
    @pulumi.getter(name="defaultNamespace")
    def default_namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_namespace")

    @default_namespace.setter
    def default_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_namespace", value)

    @property
    @pulumi.getter(name="defaultRole")
    def default_role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_role")

    @default_role.setter
    def default_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_role", value)

    @property
    @pulumi.getter(name="defaultSecondaryRoles")
    def default_secondary_roles(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_secondary_roles")

    @default_secondary_roles.setter
    def default_secondary_roles(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_secondary_roles", value)

    @property
    @pulumi.getter(name="defaultWarehouse")
    def default_warehouse(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_warehouse")

    @default_warehouse.setter
    def default_warehouse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_warehouse", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="expiresAtTime")
    def expires_at_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expires_at_time")

    @expires_at_time.setter
    def expires_at_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires_at_time", value)

    @property
    @pulumi.getter(name="extAuthnDuo")
    def ext_authn_duo(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ext_authn_duo")

    @ext_authn_duo.setter
    def ext_authn_duo(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ext_authn_duo", value)

    @property
    @pulumi.getter(name="extAuthnUid")
    def ext_authn_uid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ext_authn_uid")

    @ext_authn_uid.setter
    def ext_authn_uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ext_authn_uid", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="hasMfa")
    def has_mfa(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "has_mfa")

    @has_mfa.setter
    def has_mfa(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_mfa", value)

    @property
    @pulumi.getter(name="hasPassword")
    def has_password(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "has_password")

    @has_password.setter
    def has_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_password", value)

    @property
    @pulumi.getter(name="hasRsaPublicKey")
    def has_rsa_public_key(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "has_rsa_public_key")

    @has_rsa_public_key.setter
    def has_rsa_public_key(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_rsa_public_key", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter(name="lastSuccessLogin")
    def last_success_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_success_login")

    @last_success_login.setter
    def last_success_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_success_login", value)

    @property
    @pulumi.getter(name="lockedUntilTime")
    def locked_until_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locked_until_time")

    @locked_until_time.setter
    def locked_until_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locked_until_time", value)

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_name")

    @login_name.setter
    def login_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_name", value)

    @property
    @pulumi.getter(name="minsToBypassMfa")
    def mins_to_bypass_mfa(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mins_to_bypass_mfa")

    @mins_to_bypass_mfa.setter
    def mins_to_bypass_mfa(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mins_to_bypass_mfa", value)

    @property
    @pulumi.getter(name="minsToUnlock")
    def mins_to_unlock(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mins_to_unlock")

    @mins_to_unlock.setter
    def mins_to_unlock(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mins_to_unlock", value)

    @property
    @pulumi.getter(name="mustChangePassword")
    def must_change_password(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "must_change_password")

    @must_change_password.setter
    def must_change_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "must_change_password", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="snowflakeLock")
    def snowflake_lock(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "snowflake_lock")

    @snowflake_lock.setter
    def snowflake_lock(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "snowflake_lock", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ViewAggregationPolicyArgsDict(TypedDict):
        policy_name: pulumi.Input[str]
        """
        Aggregation policy name.
        """
        entity_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Defines which columns uniquely identify an entity within the view.
        """
elif False:
    ViewAggregationPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ViewAggregationPolicyArgs:
    def __init__(__self__, *,
                 policy_name: pulumi.Input[str],
                 entity_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] policy_name: Aggregation policy name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] entity_keys: Defines which columns uniquely identify an entity within the view.
        """
        pulumi.set(__self__, "policy_name", policy_name)
        if entity_keys is not None:
            pulumi.set(__self__, "entity_keys", entity_keys)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Input[str]:
        """
        Aggregation policy name.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="entityKeys")
    def entity_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Defines which columns uniquely identify an entity within the view.
        """
        return pulumi.get(self, "entity_keys")

    @entity_keys.setter
    def entity_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "entity_keys", value)


if not MYPY:
    class ViewColumnArgsDict(TypedDict):
        column_name: pulumi.Input[str]
        """
        Specifies affected column name.
        """
        comment: NotRequired[pulumi.Input[str]]
        """
        Specifies a comment for the column.
        """
        masking_policy: NotRequired[pulumi.Input['ViewColumnMaskingPolicyArgsDict']]
        projection_policy: NotRequired[pulumi.Input['ViewColumnProjectionPolicyArgsDict']]
elif False:
    ViewColumnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ViewColumnArgs:
    def __init__(__self__, *,
                 column_name: pulumi.Input[str],
                 comment: Optional[pulumi.Input[str]] = None,
                 masking_policy: Optional[pulumi.Input['ViewColumnMaskingPolicyArgs']] = None,
                 projection_policy: Optional[pulumi.Input['ViewColumnProjectionPolicyArgs']] = None):
        """
        :param pulumi.Input[str] column_name: Specifies affected column name.
        :param pulumi.Input[str] comment: Specifies a comment for the column.
        """
        pulumi.set(__self__, "column_name", column_name)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if masking_policy is not None:
            pulumi.set(__self__, "masking_policy", masking_policy)
        if projection_policy is not None:
            pulumi.set(__self__, "projection_policy", projection_policy)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> pulumi.Input[str]:
        """
        Specifies affected column name.
        """
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies a comment for the column.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="maskingPolicy")
    def masking_policy(self) -> Optional[pulumi.Input['ViewColumnMaskingPolicyArgs']]:
        return pulumi.get(self, "masking_policy")

    @masking_policy.setter
    def masking_policy(self, value: Optional[pulumi.Input['ViewColumnMaskingPolicyArgs']]):
        pulumi.set(self, "masking_policy", value)

    @property
    @pulumi.getter(name="projectionPolicy")
    def projection_policy(self) -> Optional[pulumi.Input['ViewColumnProjectionPolicyArgs']]:
        return pulumi.get(self, "projection_policy")

    @projection_policy.setter
    def projection_policy(self, value: Optional[pulumi.Input['ViewColumnProjectionPolicyArgs']]):
        pulumi.set(self, "projection_policy", value)


if not MYPY:
    class ViewColumnMaskingPolicyArgsDict(TypedDict):
        policy_name: pulumi.Input[str]
        """
        Specifies the masking policy to set on a column.
        """
        usings: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Specifies the arguments to pass into the conditional masking policy SQL expression. The first column in the list specifies the column for the policy conditions to mask or tokenize the data and must match the column to which the masking policy is set. The additional columns specify the columns to evaluate to determine whether to mask or tokenize the data in each row of the query result when a query is made on the first column. If the USING clause is omitted, Snowflake treats the conditional masking policy as a normal masking policy.
        """
elif False:
    ViewColumnMaskingPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ViewColumnMaskingPolicyArgs:
    def __init__(__self__, *,
                 policy_name: pulumi.Input[str],
                 usings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] policy_name: Specifies the masking policy to set on a column.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] usings: Specifies the arguments to pass into the conditional masking policy SQL expression. The first column in the list specifies the column for the policy conditions to mask or tokenize the data and must match the column to which the masking policy is set. The additional columns specify the columns to evaluate to determine whether to mask or tokenize the data in each row of the query result when a query is made on the first column. If the USING clause is omitted, Snowflake treats the conditional masking policy as a normal masking policy.
        """
        pulumi.set(__self__, "policy_name", policy_name)
        if usings is not None:
            pulumi.set(__self__, "usings", usings)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Input[str]:
        """
        Specifies the masking policy to set on a column.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter
    def usings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the arguments to pass into the conditional masking policy SQL expression. The first column in the list specifies the column for the policy conditions to mask or tokenize the data and must match the column to which the masking policy is set. The additional columns specify the columns to evaluate to determine whether to mask or tokenize the data in each row of the query result when a query is made on the first column. If the USING clause is omitted, Snowflake treats the conditional masking policy as a normal masking policy.
        """
        return pulumi.get(self, "usings")

    @usings.setter
    def usings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "usings", value)


if not MYPY:
    class ViewColumnProjectionPolicyArgsDict(TypedDict):
        policy_name: pulumi.Input[str]
        """
        Specifies the projection policy to set on a column.
        """
elif False:
    ViewColumnProjectionPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ViewColumnProjectionPolicyArgs:
    def __init__(__self__, *,
                 policy_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] policy_name: Specifies the projection policy to set on a column.
        """
        pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Input[str]:
        """
        Specifies the projection policy to set on a column.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_name", value)


if not MYPY:
    class ViewDataMetricFunctionArgsDict(TypedDict):
        function_name: pulumi.Input[str]
        """
        Identifier of the data metric function to add to the table or view or drop from the table or view. This function identifier must be provided without arguments in parenthesis.
        """
        ons: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        The table or view columns on which to associate the data metric function. The data types of the columns must match the data types of the columns specified in the data metric function definition.
        """
        schedule_status: pulumi.Input[str]
        """
        The status of the metrics association. Valid values are: `STARTED` | `SUSPENDED`. When status of a data metric function is changed, it is being reassigned with `DROP DATA METRIC FUNCTION` and `ADD DATA METRIC FUNCTION`, and then its status is changed by `MODIFY DATA METRIC FUNCTION`
        """
elif False:
    ViewDataMetricFunctionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ViewDataMetricFunctionArgs:
    def __init__(__self__, *,
                 function_name: pulumi.Input[str],
                 ons: pulumi.Input[Sequence[pulumi.Input[str]]],
                 schedule_status: pulumi.Input[str]):
        """
        :param pulumi.Input[str] function_name: Identifier of the data metric function to add to the table or view or drop from the table or view. This function identifier must be provided without arguments in parenthesis.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ons: The table or view columns on which to associate the data metric function. The data types of the columns must match the data types of the columns specified in the data metric function definition.
        :param pulumi.Input[str] schedule_status: The status of the metrics association. Valid values are: `STARTED` | `SUSPENDED`. When status of a data metric function is changed, it is being reassigned with `DROP DATA METRIC FUNCTION` and `ADD DATA METRIC FUNCTION`, and then its status is changed by `MODIFY DATA METRIC FUNCTION`
        """
        pulumi.set(__self__, "function_name", function_name)
        pulumi.set(__self__, "ons", ons)
        pulumi.set(__self__, "schedule_status", schedule_status)

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> pulumi.Input[str]:
        """
        Identifier of the data metric function to add to the table or view or drop from the table or view. This function identifier must be provided without arguments in parenthesis.
        """
        return pulumi.get(self, "function_name")

    @function_name.setter
    def function_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "function_name", value)

    @property
    @pulumi.getter
    def ons(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The table or view columns on which to associate the data metric function. The data types of the columns must match the data types of the columns specified in the data metric function definition.
        """
        return pulumi.get(self, "ons")

    @ons.setter
    def ons(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ons", value)

    @property
    @pulumi.getter(name="scheduleStatus")
    def schedule_status(self) -> pulumi.Input[str]:
        """
        The status of the metrics association. Valid values are: `STARTED` | `SUSPENDED`. When status of a data metric function is changed, it is being reassigned with `DROP DATA METRIC FUNCTION` and `ADD DATA METRIC FUNCTION`, and then its status is changed by `MODIFY DATA METRIC FUNCTION`
        """
        return pulumi.get(self, "schedule_status")

    @schedule_status.setter
    def schedule_status(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule_status", value)


if not MYPY:
    class ViewDataMetricScheduleArgsDict(TypedDict):
        minutes: NotRequired[pulumi.Input[int]]
        """
        Specifies an interval (in minutes) of wait time inserted between runs of the data metric function. Conflicts with `using_cron`. Valid values are: `5` | `15` | `30` | `60` | `720` | `1440`. Due to Snowflake limitations, changes in this field are not managed by the provider. Please consider using taint command, `using_cron` field, or replace*triggered*by metadata argument.
        """
        using_cron: NotRequired[pulumi.Input[str]]
        """
        Specifies a cron expression and time zone for periodically running the data metric function. Supports a subset of standard cron utility syntax. Conflicts with `minutes`.
        """
elif False:
    ViewDataMetricScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ViewDataMetricScheduleArgs:
    def __init__(__self__, *,
                 minutes: Optional[pulumi.Input[int]] = None,
                 using_cron: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] minutes: Specifies an interval (in minutes) of wait time inserted between runs of the data metric function. Conflicts with `using_cron`. Valid values are: `5` | `15` | `30` | `60` | `720` | `1440`. Due to Snowflake limitations, changes in this field are not managed by the provider. Please consider using taint command, `using_cron` field, or replace*triggered*by metadata argument.
        :param pulumi.Input[str] using_cron: Specifies a cron expression and time zone for periodically running the data metric function. Supports a subset of standard cron utility syntax. Conflicts with `minutes`.
        """
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if using_cron is not None:
            pulumi.set(__self__, "using_cron", using_cron)

    @property
    @pulumi.getter
    def minutes(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies an interval (in minutes) of wait time inserted between runs of the data metric function. Conflicts with `using_cron`. Valid values are: `5` | `15` | `30` | `60` | `720` | `1440`. Due to Snowflake limitations, changes in this field are not managed by the provider. Please consider using taint command, `using_cron` field, or replace*triggered*by metadata argument.
        """
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minutes", value)

    @property
    @pulumi.getter(name="usingCron")
    def using_cron(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies a cron expression and time zone for periodically running the data metric function. Supports a subset of standard cron utility syntax. Conflicts with `minutes`.
        """
        return pulumi.get(self, "using_cron")

    @using_cron.setter
    def using_cron(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "using_cron", value)


if not MYPY:
    class ViewDescribeOutputArgsDict(TypedDict):
        check: NotRequired[pulumi.Input[str]]
        comment: NotRequired[pulumi.Input[str]]
        default: NotRequired[pulumi.Input[str]]
        expression: NotRequired[pulumi.Input[str]]
        is_nullable: NotRequired[pulumi.Input[bool]]
        is_primary: NotRequired[pulumi.Input[bool]]
        is_unique: NotRequired[pulumi.Input[bool]]
        kind: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        policy_name: NotRequired[pulumi.Input[str]]
        privacy_domain: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
elif False:
    ViewDescribeOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ViewDescribeOutputArgs:
    def __init__(__self__, *,
                 check: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 default: Optional[pulumi.Input[str]] = None,
                 expression: Optional[pulumi.Input[str]] = None,
                 is_nullable: Optional[pulumi.Input[bool]] = None,
                 is_primary: Optional[pulumi.Input[bool]] = None,
                 is_unique: Optional[pulumi.Input[bool]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None,
                 privacy_domain: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if check is not None:
            pulumi.set(__self__, "check", check)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if is_nullable is not None:
            pulumi.set(__self__, "is_nullable", is_nullable)
        if is_primary is not None:
            pulumi.set(__self__, "is_primary", is_primary)
        if is_unique is not None:
            pulumi.set(__self__, "is_unique", is_unique)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if privacy_domain is not None:
            pulumi.set(__self__, "privacy_domain", privacy_domain)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "check")

    @check.setter
    def check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="isNullable")
    def is_nullable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_nullable")

    @is_nullable.setter
    def is_nullable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_nullable", value)

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_primary")

    @is_primary.setter
    def is_primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_primary", value)

    @property
    @pulumi.getter(name="isUnique")
    def is_unique(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_unique")

    @is_unique.setter
    def is_unique(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_unique", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="privacyDomain")
    def privacy_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "privacy_domain")

    @privacy_domain.setter
    def privacy_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "privacy_domain", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ViewRowAccessPolicyArgsDict(TypedDict):
        ons: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        Defines which columns are affected by the policy.
        """
        policy_name: pulumi.Input[str]
        """
        Row access policy name.
        """
elif False:
    ViewRowAccessPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ViewRowAccessPolicyArgs:
    def __init__(__self__, *,
                 ons: pulumi.Input[Sequence[pulumi.Input[str]]],
                 policy_name: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ons: Defines which columns are affected by the policy.
        :param pulumi.Input[str] policy_name: Row access policy name.
        """
        pulumi.set(__self__, "ons", ons)
        pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter
    def ons(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Defines which columns are affected by the policy.
        """
        return pulumi.get(self, "ons")

    @ons.setter
    def ons(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ons", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Input[str]:
        """
        Row access policy name.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_name", value)


if not MYPY:
    class ViewShowOutputArgsDict(TypedDict):
        change_tracking: NotRequired[pulumi.Input[str]]
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        database_name: NotRequired[pulumi.Input[str]]
        is_materialized: NotRequired[pulumi.Input[bool]]
        is_secure: NotRequired[pulumi.Input[bool]]
        kind: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        owner: NotRequired[pulumi.Input[str]]
        owner_role_type: NotRequired[pulumi.Input[str]]
        reserved: NotRequired[pulumi.Input[str]]
        schema_name: NotRequired[pulumi.Input[str]]
        text: NotRequired[pulumi.Input[str]]
elif False:
    ViewShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ViewShowOutputArgs:
    def __init__(__self__, *,
                 change_tracking: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 is_materialized: Optional[pulumi.Input[bool]] = None,
                 is_secure: Optional[pulumi.Input[bool]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 owner_role_type: Optional[pulumi.Input[str]] = None,
                 reserved: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 text: Optional[pulumi.Input[str]] = None):
        if change_tracking is not None:
            pulumi.set(__self__, "change_tracking", change_tracking)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if is_materialized is not None:
            pulumi.set(__self__, "is_materialized", is_materialized)
        if is_secure is not None:
            pulumi.set(__self__, "is_secure", is_secure)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if reserved is not None:
            pulumi.set(__self__, "reserved", reserved)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter(name="changeTracking")
    def change_tracking(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "change_tracking")

    @change_tracking.setter
    def change_tracking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "change_tracking", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="isMaterialized")
    def is_materialized(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_materialized")

    @is_materialized.setter
    def is_materialized(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_materialized", value)

    @property
    @pulumi.getter(name="isSecure")
    def is_secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_secure")

    @is_secure.setter
    def is_secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_secure", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_role_type")

    @owner_role_type.setter
    def owner_role_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_role_type", value)

    @property
    @pulumi.getter
    def reserved(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reserved")

    @reserved.setter
    def reserved(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reserved", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)


if not MYPY:
    class WarehouseParameterArgsDict(TypedDict):
        max_concurrency_levels: NotRequired[pulumi.Input[Sequence[pulumi.Input['WarehouseParameterMaxConcurrencyLevelArgsDict']]]]
        statement_queued_timeout_in_seconds: NotRequired[pulumi.Input[Sequence[pulumi.Input['WarehouseParameterStatementQueuedTimeoutInSecondArgsDict']]]]
        statement_timeout_in_seconds: NotRequired[pulumi.Input[Sequence[pulumi.Input['WarehouseParameterStatementTimeoutInSecondArgsDict']]]]
elif False:
    WarehouseParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WarehouseParameterArgs:
    def __init__(__self__, *,
                 max_concurrency_levels: Optional[pulumi.Input[Sequence[pulumi.Input['WarehouseParameterMaxConcurrencyLevelArgs']]]] = None,
                 statement_queued_timeout_in_seconds: Optional[pulumi.Input[Sequence[pulumi.Input['WarehouseParameterStatementQueuedTimeoutInSecondArgs']]]] = None,
                 statement_timeout_in_seconds: Optional[pulumi.Input[Sequence[pulumi.Input['WarehouseParameterStatementTimeoutInSecondArgs']]]] = None):
        if max_concurrency_levels is not None:
            pulumi.set(__self__, "max_concurrency_levels", max_concurrency_levels)
        if statement_queued_timeout_in_seconds is not None:
            pulumi.set(__self__, "statement_queued_timeout_in_seconds", statement_queued_timeout_in_seconds)
        if statement_timeout_in_seconds is not None:
            pulumi.set(__self__, "statement_timeout_in_seconds", statement_timeout_in_seconds)

    @property
    @pulumi.getter(name="maxConcurrencyLevels")
    def max_concurrency_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WarehouseParameterMaxConcurrencyLevelArgs']]]]:
        return pulumi.get(self, "max_concurrency_levels")

    @max_concurrency_levels.setter
    def max_concurrency_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WarehouseParameterMaxConcurrencyLevelArgs']]]]):
        pulumi.set(self, "max_concurrency_levels", value)

    @property
    @pulumi.getter(name="statementQueuedTimeoutInSeconds")
    def statement_queued_timeout_in_seconds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WarehouseParameterStatementQueuedTimeoutInSecondArgs']]]]:
        return pulumi.get(self, "statement_queued_timeout_in_seconds")

    @statement_queued_timeout_in_seconds.setter
    def statement_queued_timeout_in_seconds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WarehouseParameterStatementQueuedTimeoutInSecondArgs']]]]):
        pulumi.set(self, "statement_queued_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="statementTimeoutInSeconds")
    def statement_timeout_in_seconds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WarehouseParameterStatementTimeoutInSecondArgs']]]]:
        return pulumi.get(self, "statement_timeout_in_seconds")

    @statement_timeout_in_seconds.setter
    def statement_timeout_in_seconds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WarehouseParameterStatementTimeoutInSecondArgs']]]]):
        pulumi.set(self, "statement_timeout_in_seconds", value)


if not MYPY:
    class WarehouseParameterMaxConcurrencyLevelArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    WarehouseParameterMaxConcurrencyLevelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WarehouseParameterMaxConcurrencyLevelArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class WarehouseParameterStatementQueuedTimeoutInSecondArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    WarehouseParameterStatementQueuedTimeoutInSecondArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WarehouseParameterStatementQueuedTimeoutInSecondArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class WarehouseParameterStatementTimeoutInSecondArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        level: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    WarehouseParameterStatementTimeoutInSecondArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WarehouseParameterStatementTimeoutInSecondArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class WarehouseShowOutputArgsDict(TypedDict):
        auto_resume: NotRequired[pulumi.Input[bool]]
        auto_suspend: NotRequired[pulumi.Input[int]]
        available: NotRequired[pulumi.Input[float]]
        comment: NotRequired[pulumi.Input[str]]
        created_on: NotRequired[pulumi.Input[str]]
        enable_query_acceleration: NotRequired[pulumi.Input[bool]]
        is_current: NotRequired[pulumi.Input[bool]]
        is_default: NotRequired[pulumi.Input[bool]]
        max_cluster_count: NotRequired[pulumi.Input[int]]
        min_cluster_count: NotRequired[pulumi.Input[int]]
        name: NotRequired[pulumi.Input[str]]
        other: NotRequired[pulumi.Input[float]]
        owner: NotRequired[pulumi.Input[str]]
        owner_role_type: NotRequired[pulumi.Input[str]]
        provisioning: NotRequired[pulumi.Input[float]]
        query_acceleration_max_scale_factor: NotRequired[pulumi.Input[int]]
        queued: NotRequired[pulumi.Input[int]]
        quiescing: NotRequired[pulumi.Input[float]]
        resource_monitor: NotRequired[pulumi.Input[str]]
        resumed_on: NotRequired[pulumi.Input[str]]
        running: NotRequired[pulumi.Input[int]]
        scaling_policy: NotRequired[pulumi.Input[str]]
        size: NotRequired[pulumi.Input[str]]
        started_clusters: NotRequired[pulumi.Input[int]]
        state: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        updated_on: NotRequired[pulumi.Input[str]]
elif False:
    WarehouseShowOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WarehouseShowOutputArgs:
    def __init__(__self__, *,
                 auto_resume: Optional[pulumi.Input[bool]] = None,
                 auto_suspend: Optional[pulumi.Input[int]] = None,
                 available: Optional[pulumi.Input[float]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 enable_query_acceleration: Optional[pulumi.Input[bool]] = None,
                 is_current: Optional[pulumi.Input[bool]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 max_cluster_count: Optional[pulumi.Input[int]] = None,
                 min_cluster_count: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 other: Optional[pulumi.Input[float]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 owner_role_type: Optional[pulumi.Input[str]] = None,
                 provisioning: Optional[pulumi.Input[float]] = None,
                 query_acceleration_max_scale_factor: Optional[pulumi.Input[int]] = None,
                 queued: Optional[pulumi.Input[int]] = None,
                 quiescing: Optional[pulumi.Input[float]] = None,
                 resource_monitor: Optional[pulumi.Input[str]] = None,
                 resumed_on: Optional[pulumi.Input[str]] = None,
                 running: Optional[pulumi.Input[int]] = None,
                 scaling_policy: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 started_clusters: Optional[pulumi.Input[int]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 updated_on: Optional[pulumi.Input[str]] = None):
        if auto_resume is not None:
            pulumi.set(__self__, "auto_resume", auto_resume)
        if auto_suspend is not None:
            pulumi.set(__self__, "auto_suspend", auto_suspend)
        if available is not None:
            pulumi.set(__self__, "available", available)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if enable_query_acceleration is not None:
            pulumi.set(__self__, "enable_query_acceleration", enable_query_acceleration)
        if is_current is not None:
            pulumi.set(__self__, "is_current", is_current)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if max_cluster_count is not None:
            pulumi.set(__self__, "max_cluster_count", max_cluster_count)
        if min_cluster_count is not None:
            pulumi.set(__self__, "min_cluster_count", min_cluster_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if other is not None:
            pulumi.set(__self__, "other", other)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_role_type is not None:
            pulumi.set(__self__, "owner_role_type", owner_role_type)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if query_acceleration_max_scale_factor is not None:
            pulumi.set(__self__, "query_acceleration_max_scale_factor", query_acceleration_max_scale_factor)
        if queued is not None:
            pulumi.set(__self__, "queued", queued)
        if quiescing is not None:
            pulumi.set(__self__, "quiescing", quiescing)
        if resource_monitor is not None:
            pulumi.set(__self__, "resource_monitor", resource_monitor)
        if resumed_on is not None:
            pulumi.set(__self__, "resumed_on", resumed_on)
        if running is not None:
            pulumi.set(__self__, "running", running)
        if scaling_policy is not None:
            pulumi.set(__self__, "scaling_policy", scaling_policy)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if started_clusters is not None:
            pulumi.set(__self__, "started_clusters", started_clusters)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_on is not None:
            pulumi.set(__self__, "updated_on", updated_on)

    @property
    @pulumi.getter(name="autoResume")
    def auto_resume(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_resume")

    @auto_resume.setter
    def auto_resume(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_resume", value)

    @property
    @pulumi.getter(name="autoSuspend")
    def auto_suspend(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_suspend")

    @auto_suspend.setter
    def auto_suspend(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_suspend", value)

    @property
    @pulumi.getter
    def available(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "available")

    @available.setter
    def available(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "available", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="enableQueryAcceleration")
    def enable_query_acceleration(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_query_acceleration")

    @enable_query_acceleration.setter
    def enable_query_acceleration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_query_acceleration", value)

    @property
    @pulumi.getter(name="isCurrent")
    def is_current(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_current")

    @is_current.setter
    def is_current(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_current", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter(name="maxClusterCount")
    def max_cluster_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_cluster_count")

    @max_cluster_count.setter
    def max_cluster_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_cluster_count", value)

    @property
    @pulumi.getter(name="minClusterCount")
    def min_cluster_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_cluster_count")

    @min_cluster_count.setter
    def min_cluster_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_cluster_count", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def other(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "other")

    @other.setter
    def other(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "other", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="ownerRoleType")
    def owner_role_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_role_type")

    @owner_role_type.setter
    def owner_role_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_role_type", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter(name="queryAccelerationMaxScaleFactor")
    def query_acceleration_max_scale_factor(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_acceleration_max_scale_factor")

    @query_acceleration_max_scale_factor.setter
    def query_acceleration_max_scale_factor(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_acceleration_max_scale_factor", value)

    @property
    @pulumi.getter
    def queued(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "queued")

    @queued.setter
    def queued(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "queued", value)

    @property
    @pulumi.getter
    def quiescing(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "quiescing")

    @quiescing.setter
    def quiescing(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "quiescing", value)

    @property
    @pulumi.getter(name="resourceMonitor")
    def resource_monitor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_monitor")

    @resource_monitor.setter
    def resource_monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_monitor", value)

    @property
    @pulumi.getter(name="resumedOn")
    def resumed_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resumed_on")

    @resumed_on.setter
    def resumed_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resumed_on", value)

    @property
    @pulumi.getter
    def running(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "running")

    @running.setter
    def running(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "running", value)

    @property
    @pulumi.getter(name="scalingPolicy")
    def scaling_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scaling_policy")

    @scaling_policy.setter
    def scaling_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scaling_policy", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="startedClusters")
    def started_clusters(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "started_clusters")

    @started_clusters.setter
    def started_clusters(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "started_clusters", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedOn")
    def updated_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_on")

    @updated_on.setter
    def updated_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_on", value)


if not MYPY:
    class GetCortexSearchServicesInArgsDict(TypedDict):
        account: NotRequired[bool]
        """
        Returns records for the entire account.
        """
        database: NotRequired[str]
        """
        Returns records for the current database in use or for a specified database (db_name).
        """
        schema: NotRequired[str]
        """
        Returns records for the current schema in use or a specified schema (schema_name).
        """
elif False:
    GetCortexSearchServicesInArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCortexSearchServicesInArgs:
    def __init__(__self__, *,
                 account: Optional[bool] = None,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param bool account: Returns records for the entire account.
        :param str database: Returns records for the current database in use or for a specified database (db_name).
        :param str schema: Returns records for the current schema in use or a specified schema (schema_name).
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def account(self) -> Optional[bool]:
        """
        Returns records for the entire account.
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[bool]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Returns records for the current database in use or for a specified database (db_name).
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Returns records for the current schema in use or a specified schema (schema_name).
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[str]):
        pulumi.set(self, "schema", value)


if not MYPY:
    class GetCortexSearchServicesLimitArgsDict(TypedDict):
        rows: int
        """
        The maximum number of rows to return.
        """
        from_: NotRequired[str]
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
elif False:
    GetCortexSearchServicesLimitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCortexSearchServicesLimitArgs:
    def __init__(__self__, *,
                 rows: int,
                 from_: Optional[str] = None):
        """
        :param int rows: The maximum number of rows to return.
        :param str from_: Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        pulumi.set(__self__, "rows", rows)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)

    @property
    @pulumi.getter
    def rows(self) -> int:
        """
        The maximum number of rows to return.
        """
        return pulumi.get(self, "rows")

    @rows.setter
    def rows(self, value: int):
        pulumi.set(self, "rows", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[str]):
        pulumi.set(self, "from_", value)


if not MYPY:
    class GetDatabaseRolesLimitArgsDict(TypedDict):
        rows: int
        """
        The maximum number of rows to return.
        """
        from_: NotRequired[str]
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
elif False:
    GetDatabaseRolesLimitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDatabaseRolesLimitArgs:
    def __init__(__self__, *,
                 rows: int,
                 from_: Optional[str] = None):
        """
        :param int rows: The maximum number of rows to return.
        :param str from_: Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        pulumi.set(__self__, "rows", rows)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)

    @property
    @pulumi.getter
    def rows(self) -> int:
        """
        The maximum number of rows to return.
        """
        return pulumi.get(self, "rows")

    @rows.setter
    def rows(self, value: int):
        pulumi.set(self, "rows", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[str]):
        pulumi.set(self, "from_", value)


if not MYPY:
    class GetDatabasesLimitArgsDict(TypedDict):
        rows: int
        """
        The maximum number of rows to return.
        """
        from_: NotRequired[str]
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
elif False:
    GetDatabasesLimitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDatabasesLimitArgs:
    def __init__(__self__, *,
                 rows: int,
                 from_: Optional[str] = None):
        """
        :param int rows: The maximum number of rows to return.
        :param str from_: Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        pulumi.set(__self__, "rows", rows)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)

    @property
    @pulumi.getter
    def rows(self) -> int:
        """
        The maximum number of rows to return.
        """
        return pulumi.get(self, "rows")

    @rows.setter
    def rows(self, value: int):
        pulumi.set(self, "rows", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[str]):
        pulumi.set(self, "from_", value)


if not MYPY:
    class GetDynamicTablesInArgsDict(TypedDict):
        account: NotRequired[bool]
        """
        Returns records for the entire account.
        """
        database: NotRequired[str]
        """
        Returns records for the current database in use or for a specified database (db_name).
        """
        schema: NotRequired[str]
        """
        Returns records for the current schema in use or a specified schema (schema_name).
        """
elif False:
    GetDynamicTablesInArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDynamicTablesInArgs:
    def __init__(__self__, *,
                 account: Optional[bool] = None,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param bool account: Returns records for the entire account.
        :param str database: Returns records for the current database in use or for a specified database (db_name).
        :param str schema: Returns records for the current schema in use or a specified schema (schema_name).
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def account(self) -> Optional[bool]:
        """
        Returns records for the entire account.
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[bool]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Returns records for the current database in use or for a specified database (db_name).
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Returns records for the current schema in use or a specified schema (schema_name).
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[str]):
        pulumi.set(self, "schema", value)


if not MYPY:
    class GetDynamicTablesLikeArgsDict(TypedDict):
        pattern: str
        """
        Filters the command output by object name. The filter uses case-insensitive pattern matching with support for SQL wildcard characters (% and _).
        """
elif False:
    GetDynamicTablesLikeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDynamicTablesLikeArgs:
    def __init__(__self__, *,
                 pattern: str):
        """
        :param str pattern: Filters the command output by object name. The filter uses case-insensitive pattern matching with support for SQL wildcard characters (% and _).
        """
        pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def pattern(self) -> str:
        """
        Filters the command output by object name. The filter uses case-insensitive pattern matching with support for SQL wildcard characters (% and _).
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: str):
        pulumi.set(self, "pattern", value)


if not MYPY:
    class GetDynamicTablesLimitArgsDict(TypedDict):
        from_: NotRequired[str]
        """
        The optional FROM 'name_string' subclause effectively serves as a “cursor” for the results. This enables fetching the specified number of rows following the first row whose object name matches the specified string
        """
        rows: NotRequired[int]
        """
        Specifies the maximum number of rows to return.
        """
elif False:
    GetDynamicTablesLimitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDynamicTablesLimitArgs:
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 rows: Optional[int] = None):
        """
        :param str from_: The optional FROM 'name_string' subclause effectively serves as a “cursor” for the results. This enables fetching the specified number of rows following the first row whose object name matches the specified string
        :param int rows: Specifies the maximum number of rows to return.
        """
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if rows is not None:
            pulumi.set(__self__, "rows", rows)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        The optional FROM 'name_string' subclause effectively serves as a “cursor” for the results. This enables fetching the specified number of rows following the first row whose object name matches the specified string
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def rows(self) -> Optional[int]:
        """
        Specifies the maximum number of rows to return.
        """
        return pulumi.get(self, "rows")

    @rows.setter
    def rows(self, value: Optional[int]):
        pulumi.set(self, "rows", value)


if not MYPY:
    class GetGrantsFutureGrantsInArgsDict(TypedDict):
        database: NotRequired[str]
        """
        Lists all privileges on new (i.e. future) objects of a specified type in the database granted to a role.
        """
        schema: NotRequired[str]
        """
        Lists all privileges on new (i.e. future) objects of a specified type in the schema granted to a role. Schema must be a fully qualified name ("&lt;db*name&gt;"."&lt;schema*name&gt;").
        """
elif False:
    GetGrantsFutureGrantsInArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGrantsFutureGrantsInArgs:
    def __init__(__self__, *,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param str database: Lists all privileges on new (i.e. future) objects of a specified type in the database granted to a role.
        :param str schema: Lists all privileges on new (i.e. future) objects of a specified type in the schema granted to a role. Schema must be a fully qualified name ("&lt;db*name&gt;"."&lt;schema*name&gt;").
        """
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Lists all privileges on new (i.e. future) objects of a specified type in the database granted to a role.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Lists all privileges on new (i.e. future) objects of a specified type in the schema granted to a role. Schema must be a fully qualified name ("&lt;db*name&gt;"."&lt;schema*name&gt;").
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[str]):
        pulumi.set(self, "schema", value)


if not MYPY:
    class GetGrantsFutureGrantsToArgsDict(TypedDict):
        account_role: NotRequired[str]
        """
        Lists all privileges on new (i.e. future) objects of a specified type in a database or schema granted to the account role.
        """
        database_role: NotRequired[str]
        """
        Lists all privileges on new (i.e. future) objects granted to the database role. Must be a fully qualified name ("&lt;db*name&gt;"."&lt;database*role_name&gt;").
        """
elif False:
    GetGrantsFutureGrantsToArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGrantsFutureGrantsToArgs:
    def __init__(__self__, *,
                 account_role: Optional[str] = None,
                 database_role: Optional[str] = None):
        """
        :param str account_role: Lists all privileges on new (i.e. future) objects of a specified type in a database or schema granted to the account role.
        :param str database_role: Lists all privileges on new (i.e. future) objects granted to the database role. Must be a fully qualified name ("&lt;db*name&gt;"."&lt;database*role_name&gt;").
        """
        if account_role is not None:
            pulumi.set(__self__, "account_role", account_role)
        if database_role is not None:
            pulumi.set(__self__, "database_role", database_role)

    @property
    @pulumi.getter(name="accountRole")
    def account_role(self) -> Optional[str]:
        """
        Lists all privileges on new (i.e. future) objects of a specified type in a database or schema granted to the account role.
        """
        return pulumi.get(self, "account_role")

    @account_role.setter
    def account_role(self, value: Optional[str]):
        pulumi.set(self, "account_role", value)

    @property
    @pulumi.getter(name="databaseRole")
    def database_role(self) -> Optional[str]:
        """
        Lists all privileges on new (i.e. future) objects granted to the database role. Must be a fully qualified name ("&lt;db*name&gt;"."&lt;database*role_name&gt;").
        """
        return pulumi.get(self, "database_role")

    @database_role.setter
    def database_role(self, value: Optional[str]):
        pulumi.set(self, "database_role", value)


if not MYPY:
    class GetGrantsGrantsOfArgsDict(TypedDict):
        account_role: NotRequired[str]
        """
        Lists all users and roles to which the account role has been granted.
        """
        application_role: NotRequired[str]
        """
        Lists all the users and roles to which the application role has been granted. Must be a fully qualified name ("&lt;db*name&gt;"."&lt;database*role_name&gt;").
        """
        database_role: NotRequired[str]
        """
        Lists all users and roles to which the database role has been granted. Must be a fully qualified name ("&lt;db*name&gt;"."&lt;database*role_name&gt;").
        """
        share: NotRequired[str]
        """
        Lists all the accounts for the share and indicates the accounts that are using the share.
        """
elif False:
    GetGrantsGrantsOfArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGrantsGrantsOfArgs:
    def __init__(__self__, *,
                 account_role: Optional[str] = None,
                 application_role: Optional[str] = None,
                 database_role: Optional[str] = None,
                 share: Optional[str] = None):
        """
        :param str account_role: Lists all users and roles to which the account role has been granted.
        :param str application_role: Lists all the users and roles to which the application role has been granted. Must be a fully qualified name ("&lt;db*name&gt;"."&lt;database*role_name&gt;").
        :param str database_role: Lists all users and roles to which the database role has been granted. Must be a fully qualified name ("&lt;db*name&gt;"."&lt;database*role_name&gt;").
        :param str share: Lists all the accounts for the share and indicates the accounts that are using the share.
        """
        if account_role is not None:
            pulumi.set(__self__, "account_role", account_role)
        if application_role is not None:
            pulumi.set(__self__, "application_role", application_role)
        if database_role is not None:
            pulumi.set(__self__, "database_role", database_role)
        if share is not None:
            pulumi.set(__self__, "share", share)

    @property
    @pulumi.getter(name="accountRole")
    def account_role(self) -> Optional[str]:
        """
        Lists all users and roles to which the account role has been granted.
        """
        return pulumi.get(self, "account_role")

    @account_role.setter
    def account_role(self, value: Optional[str]):
        pulumi.set(self, "account_role", value)

    @property
    @pulumi.getter(name="applicationRole")
    def application_role(self) -> Optional[str]:
        """
        Lists all the users and roles to which the application role has been granted. Must be a fully qualified name ("&lt;db*name&gt;"."&lt;database*role_name&gt;").
        """
        return pulumi.get(self, "application_role")

    @application_role.setter
    def application_role(self, value: Optional[str]):
        pulumi.set(self, "application_role", value)

    @property
    @pulumi.getter(name="databaseRole")
    def database_role(self) -> Optional[str]:
        """
        Lists all users and roles to which the database role has been granted. Must be a fully qualified name ("&lt;db*name&gt;"."&lt;database*role_name&gt;").
        """
        return pulumi.get(self, "database_role")

    @database_role.setter
    def database_role(self, value: Optional[str]):
        pulumi.set(self, "database_role", value)

    @property
    @pulumi.getter
    def share(self) -> Optional[str]:
        """
        Lists all the accounts for the share and indicates the accounts that are using the share.
        """
        return pulumi.get(self, "share")

    @share.setter
    def share(self, value: Optional[str]):
        pulumi.set(self, "share", value)


if not MYPY:
    class GetGrantsGrantsOnArgsDict(TypedDict):
        account: NotRequired[bool]
        """
        Object hierarchy to list privileges on. The only valid value is: ACCOUNT. Setting this attribute lists all the account-level (i.e. global) privileges that have been granted to roles.
        """
        object_name: NotRequired[str]
        """
        Name of object to list privileges on.
        """
        object_type: NotRequired[str]
        """
        Type of object to list privileges on.
        """
elif False:
    GetGrantsGrantsOnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGrantsGrantsOnArgs:
    def __init__(__self__, *,
                 account: Optional[bool] = None,
                 object_name: Optional[str] = None,
                 object_type: Optional[str] = None):
        """
        :param bool account: Object hierarchy to list privileges on. The only valid value is: ACCOUNT. Setting this attribute lists all the account-level (i.e. global) privileges that have been granted to roles.
        :param str object_name: Name of object to list privileges on.
        :param str object_type: Type of object to list privileges on.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if object_name is not None:
            pulumi.set(__self__, "object_name", object_name)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter
    def account(self) -> Optional[bool]:
        """
        Object hierarchy to list privileges on. The only valid value is: ACCOUNT. Setting this attribute lists all the account-level (i.e. global) privileges that have been granted to roles.
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[bool]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter(name="objectName")
    def object_name(self) -> Optional[str]:
        """
        Name of object to list privileges on.
        """
        return pulumi.get(self, "object_name")

    @object_name.setter
    def object_name(self, value: Optional[str]):
        pulumi.set(self, "object_name", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        """
        Type of object to list privileges on.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[str]):
        pulumi.set(self, "object_type", value)


if not MYPY:
    class GetGrantsGrantsToArgsDict(TypedDict):
        account_role: NotRequired[str]
        """
        Lists all privileges and roles granted to the role.
        """
        application: NotRequired[str]
        """
        Lists all the privileges and roles granted to the application.
        """
        application_role: NotRequired[str]
        """
        Lists all the privileges and roles granted to the application role. Must be a fully qualified name ("&lt;app*name&gt;"."&lt;app*role_name&gt;").
        """
        database_role: NotRequired[str]
        """
        Lists all privileges and roles granted to the database role. Must be a fully qualified name ("&lt;db*name&gt;"."&lt;database*role_name&gt;").
        """
        share: NotRequired['GetGrantsGrantsToShareArgsDict']
        """
        Lists all the privileges granted to the share.
        """
        user: NotRequired[str]
        """
        Lists all the roles granted to the user. Note that the PUBLIC role, which is automatically available to every user, is not listed.
        """
elif False:
    GetGrantsGrantsToArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGrantsGrantsToArgs:
    def __init__(__self__, *,
                 account_role: Optional[str] = None,
                 application: Optional[str] = None,
                 application_role: Optional[str] = None,
                 database_role: Optional[str] = None,
                 share: Optional['GetGrantsGrantsToShareArgs'] = None,
                 user: Optional[str] = None):
        """
        :param str account_role: Lists all privileges and roles granted to the role.
        :param str application: Lists all the privileges and roles granted to the application.
        :param str application_role: Lists all the privileges and roles granted to the application role. Must be a fully qualified name ("&lt;app*name&gt;"."&lt;app*role_name&gt;").
        :param str database_role: Lists all privileges and roles granted to the database role. Must be a fully qualified name ("&lt;db*name&gt;"."&lt;database*role_name&gt;").
        :param 'GetGrantsGrantsToShareArgs' share: Lists all the privileges granted to the share.
        :param str user: Lists all the roles granted to the user. Note that the PUBLIC role, which is automatically available to every user, is not listed.
        """
        if account_role is not None:
            pulumi.set(__self__, "account_role", account_role)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if application_role is not None:
            pulumi.set(__self__, "application_role", application_role)
        if database_role is not None:
            pulumi.set(__self__, "database_role", database_role)
        if share is not None:
            pulumi.set(__self__, "share", share)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="accountRole")
    def account_role(self) -> Optional[str]:
        """
        Lists all privileges and roles granted to the role.
        """
        return pulumi.get(self, "account_role")

    @account_role.setter
    def account_role(self, value: Optional[str]):
        pulumi.set(self, "account_role", value)

    @property
    @pulumi.getter
    def application(self) -> Optional[str]:
        """
        Lists all the privileges and roles granted to the application.
        """
        return pulumi.get(self, "application")

    @application.setter
    def application(self, value: Optional[str]):
        pulumi.set(self, "application", value)

    @property
    @pulumi.getter(name="applicationRole")
    def application_role(self) -> Optional[str]:
        """
        Lists all the privileges and roles granted to the application role. Must be a fully qualified name ("&lt;app*name&gt;"."&lt;app*role_name&gt;").
        """
        return pulumi.get(self, "application_role")

    @application_role.setter
    def application_role(self, value: Optional[str]):
        pulumi.set(self, "application_role", value)

    @property
    @pulumi.getter(name="databaseRole")
    def database_role(self) -> Optional[str]:
        """
        Lists all privileges and roles granted to the database role. Must be a fully qualified name ("&lt;db*name&gt;"."&lt;database*role_name&gt;").
        """
        return pulumi.get(self, "database_role")

    @database_role.setter
    def database_role(self, value: Optional[str]):
        pulumi.set(self, "database_role", value)

    @property
    @pulumi.getter
    def share(self) -> Optional['GetGrantsGrantsToShareArgs']:
        """
        Lists all the privileges granted to the share.
        """
        return pulumi.get(self, "share")

    @share.setter
    def share(self, value: Optional['GetGrantsGrantsToShareArgs']):
        pulumi.set(self, "share", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        Lists all the roles granted to the user. Note that the PUBLIC role, which is automatically available to every user, is not listed.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[str]):
        pulumi.set(self, "user", value)


if not MYPY:
    class GetGrantsGrantsToShareArgsDict(TypedDict):
        share_name: str
        """
        Lists all of the privileges and roles granted to the specified share.
        """
elif False:
    GetGrantsGrantsToShareArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGrantsGrantsToShareArgs:
    def __init__(__self__, *,
                 share_name: str):
        """
        :param str share_name: Lists all of the privileges and roles granted to the specified share.
        """
        pulumi.set(__self__, "share_name", share_name)

    @property
    @pulumi.getter(name="shareName")
    def share_name(self) -> str:
        """
        Lists all of the privileges and roles granted to the specified share.
        """
        return pulumi.get(self, "share_name")

    @share_name.setter
    def share_name(self, value: str):
        pulumi.set(self, "share_name", value)


if not MYPY:
    class GetMaskingPoliciesInArgsDict(TypedDict):
        account: NotRequired[bool]
        """
        Returns records for the entire account.
        """
        application: NotRequired[str]
        """
        Returns records for the specified application.
        """
        application_package: NotRequired[str]
        """
        Returns records for the specified application package.
        """
        database: NotRequired[str]
        """
        Returns records for the current database in use or for a specified database.
        """
        schema: NotRequired[str]
        """
        Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
elif False:
    GetMaskingPoliciesInArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetMaskingPoliciesInArgs:
    def __init__(__self__, *,
                 account: Optional[bool] = None,
                 application: Optional[str] = None,
                 application_package: Optional[str] = None,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param bool account: Returns records for the entire account.
        :param str application: Returns records for the specified application.
        :param str application_package: Returns records for the specified application package.
        :param str database: Returns records for the current database in use or for a specified database.
        :param str schema: Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if application_package is not None:
            pulumi.set(__self__, "application_package", application_package)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def account(self) -> Optional[bool]:
        """
        Returns records for the entire account.
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[bool]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter
    def application(self) -> Optional[str]:
        """
        Returns records for the specified application.
        """
        return pulumi.get(self, "application")

    @application.setter
    def application(self, value: Optional[str]):
        pulumi.set(self, "application", value)

    @property
    @pulumi.getter(name="applicationPackage")
    def application_package(self) -> Optional[str]:
        """
        Returns records for the specified application package.
        """
        return pulumi.get(self, "application_package")

    @application_package.setter
    def application_package(self, value: Optional[str]):
        pulumi.set(self, "application_package", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Returns records for the current database in use or for a specified database.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[str]):
        pulumi.set(self, "schema", value)


if not MYPY:
    class GetMaskingPoliciesLimitArgsDict(TypedDict):
        rows: int
        """
        The maximum number of rows to return.
        """
        from_: NotRequired[str]
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
elif False:
    GetMaskingPoliciesLimitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetMaskingPoliciesLimitArgs:
    def __init__(__self__, *,
                 rows: int,
                 from_: Optional[str] = None):
        """
        :param int rows: The maximum number of rows to return.
        :param str from_: Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        pulumi.set(__self__, "rows", rows)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)

    @property
    @pulumi.getter
    def rows(self) -> int:
        """
        The maximum number of rows to return.
        """
        return pulumi.get(self, "rows")

    @rows.setter
    def rows(self, value: int):
        pulumi.set(self, "rows", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[str]):
        pulumi.set(self, "from_", value)


if not MYPY:
    class GetRowAccessPoliciesInArgsDict(TypedDict):
        account: NotRequired[bool]
        """
        Returns records for the entire account.
        """
        application: NotRequired[str]
        """
        Returns records for the specified application.
        """
        application_package: NotRequired[str]
        """
        Returns records for the specified application package.
        """
        database: NotRequired[str]
        """
        Returns records for the current database in use or for a specified database.
        """
        schema: NotRequired[str]
        """
        Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
elif False:
    GetRowAccessPoliciesInArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetRowAccessPoliciesInArgs:
    def __init__(__self__, *,
                 account: Optional[bool] = None,
                 application: Optional[str] = None,
                 application_package: Optional[str] = None,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param bool account: Returns records for the entire account.
        :param str application: Returns records for the specified application.
        :param str application_package: Returns records for the specified application package.
        :param str database: Returns records for the current database in use or for a specified database.
        :param str schema: Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if application_package is not None:
            pulumi.set(__self__, "application_package", application_package)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def account(self) -> Optional[bool]:
        """
        Returns records for the entire account.
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[bool]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter
    def application(self) -> Optional[str]:
        """
        Returns records for the specified application.
        """
        return pulumi.get(self, "application")

    @application.setter
    def application(self, value: Optional[str]):
        pulumi.set(self, "application", value)

    @property
    @pulumi.getter(name="applicationPackage")
    def application_package(self) -> Optional[str]:
        """
        Returns records for the specified application package.
        """
        return pulumi.get(self, "application_package")

    @application_package.setter
    def application_package(self, value: Optional[str]):
        pulumi.set(self, "application_package", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Returns records for the current database in use or for a specified database.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[str]):
        pulumi.set(self, "schema", value)


if not MYPY:
    class GetRowAccessPoliciesLimitArgsDict(TypedDict):
        rows: int
        """
        The maximum number of rows to return.
        """
        from_: NotRequired[str]
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
elif False:
    GetRowAccessPoliciesLimitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetRowAccessPoliciesLimitArgs:
    def __init__(__self__, *,
                 rows: int,
                 from_: Optional[str] = None):
        """
        :param int rows: The maximum number of rows to return.
        :param str from_: Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        pulumi.set(__self__, "rows", rows)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)

    @property
    @pulumi.getter
    def rows(self) -> int:
        """
        The maximum number of rows to return.
        """
        return pulumi.get(self, "rows")

    @rows.setter
    def rows(self, value: int):
        pulumi.set(self, "rows", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[str]):
        pulumi.set(self, "from_", value)


if not MYPY:
    class GetSchemasInArgsDict(TypedDict):
        account: NotRequired[bool]
        """
        Returns records for the entire account.
        """
        application: NotRequired[str]
        """
        Returns records for the specified application.
        """
        application_package: NotRequired[str]
        """
        Returns records for the specified application package.
        """
        database: NotRequired[str]
        """
        Returns records for the current database in use or for a specified database (db_name).
        """
elif False:
    GetSchemasInArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetSchemasInArgs:
    def __init__(__self__, *,
                 account: Optional[bool] = None,
                 application: Optional[str] = None,
                 application_package: Optional[str] = None,
                 database: Optional[str] = None):
        """
        :param bool account: Returns records for the entire account.
        :param str application: Returns records for the specified application.
        :param str application_package: Returns records for the specified application package.
        :param str database: Returns records for the current database in use or for a specified database (db_name).
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if application_package is not None:
            pulumi.set(__self__, "application_package", application_package)
        if database is not None:
            pulumi.set(__self__, "database", database)

    @property
    @pulumi.getter
    def account(self) -> Optional[bool]:
        """
        Returns records for the entire account.
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[bool]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter
    def application(self) -> Optional[str]:
        """
        Returns records for the specified application.
        """
        return pulumi.get(self, "application")

    @application.setter
    def application(self, value: Optional[str]):
        pulumi.set(self, "application", value)

    @property
    @pulumi.getter(name="applicationPackage")
    def application_package(self) -> Optional[str]:
        """
        Returns records for the specified application package.
        """
        return pulumi.get(self, "application_package")

    @application_package.setter
    def application_package(self, value: Optional[str]):
        pulumi.set(self, "application_package", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Returns records for the current database in use or for a specified database (db_name).
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[str]):
        pulumi.set(self, "database", value)


if not MYPY:
    class GetSchemasLimitArgsDict(TypedDict):
        rows: int
        """
        The maximum number of rows to return.
        """
        from_: NotRequired[str]
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
elif False:
    GetSchemasLimitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetSchemasLimitArgs:
    def __init__(__self__, *,
                 rows: int,
                 from_: Optional[str] = None):
        """
        :param int rows: The maximum number of rows to return.
        :param str from_: Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        pulumi.set(__self__, "rows", rows)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)

    @property
    @pulumi.getter
    def rows(self) -> int:
        """
        The maximum number of rows to return.
        """
        return pulumi.get(self, "rows")

    @rows.setter
    def rows(self, value: int):
        pulumi.set(self, "rows", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[str]):
        pulumi.set(self, "from_", value)


if not MYPY:
    class GetSecretsInArgsDict(TypedDict):
        account: NotRequired[bool]
        """
        Returns records for the entire account.
        """
        application: NotRequired[str]
        """
        Returns records for the specified application.
        """
        application_package: NotRequired[str]
        """
        Returns records for the specified application package.
        """
        database: NotRequired[str]
        """
        Returns records for the current database in use or for a specified database.
        """
        schema: NotRequired[str]
        """
        Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
elif False:
    GetSecretsInArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetSecretsInArgs:
    def __init__(__self__, *,
                 account: Optional[bool] = None,
                 application: Optional[str] = None,
                 application_package: Optional[str] = None,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param bool account: Returns records for the entire account.
        :param str application: Returns records for the specified application.
        :param str application_package: Returns records for the specified application package.
        :param str database: Returns records for the current database in use or for a specified database.
        :param str schema: Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if application_package is not None:
            pulumi.set(__self__, "application_package", application_package)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def account(self) -> Optional[bool]:
        """
        Returns records for the entire account.
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[bool]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter
    def application(self) -> Optional[str]:
        """
        Returns records for the specified application.
        """
        return pulumi.get(self, "application")

    @application.setter
    def application(self, value: Optional[str]):
        pulumi.set(self, "application", value)

    @property
    @pulumi.getter(name="applicationPackage")
    def application_package(self) -> Optional[str]:
        """
        Returns records for the specified application package.
        """
        return pulumi.get(self, "application_package")

    @application_package.setter
    def application_package(self, value: Optional[str]):
        pulumi.set(self, "application_package", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Returns records for the current database in use or for a specified database.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[str]):
        pulumi.set(self, "schema", value)


if not MYPY:
    class GetStreamlitsInArgsDict(TypedDict):
        account: NotRequired[bool]
        """
        Returns records for the entire account.
        """
        database: NotRequired[str]
        """
        Returns records for the current database in use or for a specified database (db_name).
        """
        schema: NotRequired[str]
        """
        Returns records for the current schema in use or a specified schema (schema_name).
        """
elif False:
    GetStreamlitsInArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetStreamlitsInArgs:
    def __init__(__self__, *,
                 account: Optional[bool] = None,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param bool account: Returns records for the entire account.
        :param str database: Returns records for the current database in use or for a specified database (db_name).
        :param str schema: Returns records for the current schema in use or a specified schema (schema_name).
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def account(self) -> Optional[bool]:
        """
        Returns records for the entire account.
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[bool]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Returns records for the current database in use or for a specified database (db_name).
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Returns records for the current schema in use or a specified schema (schema_name).
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[str]):
        pulumi.set(self, "schema", value)


if not MYPY:
    class GetStreamlitsLimitArgsDict(TypedDict):
        rows: int
        """
        The maximum number of rows to return.
        """
        from_: NotRequired[str]
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
elif False:
    GetStreamlitsLimitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetStreamlitsLimitArgs:
    def __init__(__self__, *,
                 rows: int,
                 from_: Optional[str] = None):
        """
        :param int rows: The maximum number of rows to return.
        :param str from_: Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        pulumi.set(__self__, "rows", rows)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)

    @property
    @pulumi.getter
    def rows(self) -> int:
        """
        The maximum number of rows to return.
        """
        return pulumi.get(self, "rows")

    @rows.setter
    def rows(self, value: int):
        pulumi.set(self, "rows", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[str]):
        pulumi.set(self, "from_", value)


if not MYPY:
    class GetStreamsInArgsDict(TypedDict):
        account: NotRequired[bool]
        """
        Returns records for the entire account.
        """
        application: NotRequired[str]
        """
        Returns records for the specified application.
        """
        application_package: NotRequired[str]
        """
        Returns records for the specified application package.
        """
        database: NotRequired[str]
        """
        Returns records for the current database in use or for a specified database.
        """
        schema: NotRequired[str]
        """
        Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
elif False:
    GetStreamsInArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetStreamsInArgs:
    def __init__(__self__, *,
                 account: Optional[bool] = None,
                 application: Optional[str] = None,
                 application_package: Optional[str] = None,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param bool account: Returns records for the entire account.
        :param str application: Returns records for the specified application.
        :param str application_package: Returns records for the specified application package.
        :param str database: Returns records for the current database in use or for a specified database.
        :param str schema: Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if application_package is not None:
            pulumi.set(__self__, "application_package", application_package)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def account(self) -> Optional[bool]:
        """
        Returns records for the entire account.
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[bool]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter
    def application(self) -> Optional[str]:
        """
        Returns records for the specified application.
        """
        return pulumi.get(self, "application")

    @application.setter
    def application(self, value: Optional[str]):
        pulumi.set(self, "application", value)

    @property
    @pulumi.getter(name="applicationPackage")
    def application_package(self) -> Optional[str]:
        """
        Returns records for the specified application package.
        """
        return pulumi.get(self, "application_package")

    @application_package.setter
    def application_package(self, value: Optional[str]):
        pulumi.set(self, "application_package", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Returns records for the current database in use or for a specified database.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[str]):
        pulumi.set(self, "schema", value)


if not MYPY:
    class GetStreamsLimitArgsDict(TypedDict):
        rows: int
        """
        The maximum number of rows to return.
        """
        from_: NotRequired[str]
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
elif False:
    GetStreamsLimitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetStreamsLimitArgs:
    def __init__(__self__, *,
                 rows: int,
                 from_: Optional[str] = None):
        """
        :param int rows: The maximum number of rows to return.
        :param str from_: Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        pulumi.set(__self__, "rows", rows)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)

    @property
    @pulumi.getter
    def rows(self) -> int:
        """
        The maximum number of rows to return.
        """
        return pulumi.get(self, "rows")

    @rows.setter
    def rows(self, value: int):
        pulumi.set(self, "rows", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[str]):
        pulumi.set(self, "from_", value)


if not MYPY:
    class GetTagsInArgsDict(TypedDict):
        account: NotRequired[bool]
        """
        Returns records for the entire account.
        """
        application: NotRequired[str]
        """
        Returns records for the specified application.
        """
        application_package: NotRequired[str]
        """
        Returns records for the specified application package.
        """
        database: NotRequired[str]
        """
        Returns records for the current database in use or for a specified database.
        """
        schema: NotRequired[str]
        """
        Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
elif False:
    GetTagsInArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetTagsInArgs:
    def __init__(__self__, *,
                 account: Optional[bool] = None,
                 application: Optional[str] = None,
                 application_package: Optional[str] = None,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param bool account: Returns records for the entire account.
        :param str application: Returns records for the specified application.
        :param str application_package: Returns records for the specified application package.
        :param str database: Returns records for the current database in use or for a specified database.
        :param str schema: Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if application_package is not None:
            pulumi.set(__self__, "application_package", application_package)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def account(self) -> Optional[bool]:
        """
        Returns records for the entire account.
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[bool]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter
    def application(self) -> Optional[str]:
        """
        Returns records for the specified application.
        """
        return pulumi.get(self, "application")

    @application.setter
    def application(self, value: Optional[str]):
        pulumi.set(self, "application", value)

    @property
    @pulumi.getter(name="applicationPackage")
    def application_package(self) -> Optional[str]:
        """
        Returns records for the specified application package.
        """
        return pulumi.get(self, "application_package")

    @application_package.setter
    def application_package(self, value: Optional[str]):
        pulumi.set(self, "application_package", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Returns records for the current database in use or for a specified database.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[str]):
        pulumi.set(self, "schema", value)


if not MYPY:
    class GetTasksInArgsDict(TypedDict):
        account: NotRequired[bool]
        """
        Returns records for the entire account.
        """
        application: NotRequired[str]
        """
        Returns records for the specified application.
        """
        application_package: NotRequired[str]
        """
        Returns records for the specified application package.
        """
        database: NotRequired[str]
        """
        Returns records for the current database in use or for a specified database.
        """
        schema: NotRequired[str]
        """
        Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
elif False:
    GetTasksInArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetTasksInArgs:
    def __init__(__self__, *,
                 account: Optional[bool] = None,
                 application: Optional[str] = None,
                 application_package: Optional[str] = None,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param bool account: Returns records for the entire account.
        :param str application: Returns records for the specified application.
        :param str application_package: Returns records for the specified application package.
        :param str database: Returns records for the current database in use or for a specified database.
        :param str schema: Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if application_package is not None:
            pulumi.set(__self__, "application_package", application_package)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def account(self) -> Optional[bool]:
        """
        Returns records for the entire account.
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[bool]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter
    def application(self) -> Optional[str]:
        """
        Returns records for the specified application.
        """
        return pulumi.get(self, "application")

    @application.setter
    def application(self, value: Optional[str]):
        pulumi.set(self, "application", value)

    @property
    @pulumi.getter(name="applicationPackage")
    def application_package(self) -> Optional[str]:
        """
        Returns records for the specified application package.
        """
        return pulumi.get(self, "application_package")

    @application_package.setter
    def application_package(self, value: Optional[str]):
        pulumi.set(self, "application_package", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Returns records for the current database in use or for a specified database.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[str]):
        pulumi.set(self, "schema", value)


if not MYPY:
    class GetTasksLimitArgsDict(TypedDict):
        rows: int
        """
        The maximum number of rows to return.
        """
        from_: NotRequired[str]
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
elif False:
    GetTasksLimitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetTasksLimitArgs:
    def __init__(__self__, *,
                 rows: int,
                 from_: Optional[str] = None):
        """
        :param int rows: The maximum number of rows to return.
        :param str from_: Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        pulumi.set(__self__, "rows", rows)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)

    @property
    @pulumi.getter
    def rows(self) -> int:
        """
        The maximum number of rows to return.
        """
        return pulumi.get(self, "rows")

    @rows.setter
    def rows(self, value: int):
        pulumi.set(self, "rows", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[str]):
        pulumi.set(self, "from_", value)


if not MYPY:
    class GetUsersLimitArgsDict(TypedDict):
        rows: int
        """
        The maximum number of rows to return.
        """
        from_: NotRequired[str]
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
elif False:
    GetUsersLimitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetUsersLimitArgs:
    def __init__(__self__, *,
                 rows: int,
                 from_: Optional[str] = None):
        """
        :param int rows: The maximum number of rows to return.
        :param str from_: Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        pulumi.set(__self__, "rows", rows)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)

    @property
    @pulumi.getter
    def rows(self) -> int:
        """
        The maximum number of rows to return.
        """
        return pulumi.get(self, "rows")

    @rows.setter
    def rows(self, value: int):
        pulumi.set(self, "rows", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[str]):
        pulumi.set(self, "from_", value)


if not MYPY:
    class GetViewsInArgsDict(TypedDict):
        account: NotRequired[bool]
        """
        Returns records for the entire account.
        """
        database: NotRequired[str]
        """
        Returns records for the current database in use or for a specified database.
        """
        schema: NotRequired[str]
        """
        Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
elif False:
    GetViewsInArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetViewsInArgs:
    def __init__(__self__, *,
                 account: Optional[bool] = None,
                 database: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param bool account: Returns records for the entire account.
        :param str database: Returns records for the current database in use or for a specified database.
        :param str schema: Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def account(self) -> Optional[bool]:
        """
        Returns records for the entire account.
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[bool]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Returns records for the current database in use or for a specified database.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Returns records for the current schema in use or a specified schema. Use fully qualified name.
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[str]):
        pulumi.set(self, "schema", value)


if not MYPY:
    class GetViewsLimitArgsDict(TypedDict):
        rows: int
        """
        The maximum number of rows to return.
        """
        from_: NotRequired[str]
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
elif False:
    GetViewsLimitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetViewsLimitArgs:
    def __init__(__self__, *,
                 rows: int,
                 from_: Optional[str] = None):
        """
        :param int rows: The maximum number of rows to return.
        :param str from_: Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        pulumi.set(__self__, "rows", rows)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)

    @property
    @pulumi.getter
    def rows(self) -> int:
        """
        The maximum number of rows to return.
        """
        return pulumi.get(self, "rows")

    @rows.setter
    def rows(self, value: int):
        pulumi.set(self, "rows", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[str]):
        pulumi.set(self, "from_", value)


