# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetCortexSearchServicesResult',
    'AwaitableGetCortexSearchServicesResult',
    'get_cortex_search_services',
    'get_cortex_search_services_output',
]

@pulumi.output_type
class GetCortexSearchServicesResult:
    """
    A collection of values returned by getCortexSearchServices.
    """
    def __init__(__self__, cortex_search_services=None, id=None, in_=None, like=None, limit=None, starts_with=None):
        if cortex_search_services and not isinstance(cortex_search_services, list):
            raise TypeError("Expected argument 'cortex_search_services' to be a list")
        pulumi.set(__self__, "cortex_search_services", cortex_search_services)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if in_ and not isinstance(in_, dict):
            raise TypeError("Expected argument 'in_' to be a dict")
        pulumi.set(__self__, "in_", in_)
        if like and not isinstance(like, str):
            raise TypeError("Expected argument 'like' to be a str")
        pulumi.set(__self__, "like", like)
        if limit and not isinstance(limit, dict):
            raise TypeError("Expected argument 'limit' to be a dict")
        pulumi.set(__self__, "limit", limit)
        if starts_with and not isinstance(starts_with, str):
            raise TypeError("Expected argument 'starts_with' to be a str")
        pulumi.set(__self__, "starts_with", starts_with)

    @property
    @pulumi.getter(name="cortexSearchServices")
    def cortex_search_services(self) -> Sequence['outputs.GetCortexSearchServicesCortexSearchServiceResult']:
        return pulumi.get(self, "cortex_search_services")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="in")
    def in_(self) -> Optional['outputs.GetCortexSearchServicesInResult']:
        return pulumi.get(self, "in_")

    @property
    @pulumi.getter
    def like(self) -> Optional[builtins.str]:
        return pulumi.get(self, "like")

    @property
    @pulumi.getter
    def limit(self) -> Optional['outputs.GetCortexSearchServicesLimitResult']:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="startsWith")
    def starts_with(self) -> Optional[builtins.str]:
        return pulumi.get(self, "starts_with")


class AwaitableGetCortexSearchServicesResult(GetCortexSearchServicesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCortexSearchServicesResult(
            cortex_search_services=self.cortex_search_services,
            id=self.id,
            in_=self.in_,
            like=self.like,
            limit=self.limit,
            starts_with=self.starts_with)


def get_cortex_search_services(in_: Optional[Union['GetCortexSearchServicesInArgs', 'GetCortexSearchServicesInArgsDict']] = None,
                               like: Optional[builtins.str] = None,
                               limit: Optional[Union['GetCortexSearchServicesLimitArgs', 'GetCortexSearchServicesLimitArgsDict']] = None,
                               starts_with: Optional[builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCortexSearchServicesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['in'] = in_
    __args__['like'] = like
    __args__['limit'] = limit
    __args__['startsWith'] = starts_with
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('snowflake:index/getCortexSearchServices:getCortexSearchServices', __args__, opts=opts, typ=GetCortexSearchServicesResult).value

    return AwaitableGetCortexSearchServicesResult(
        cortex_search_services=pulumi.get(__ret__, 'cortex_search_services'),
        id=pulumi.get(__ret__, 'id'),
        in_=pulumi.get(__ret__, 'in_'),
        like=pulumi.get(__ret__, 'like'),
        limit=pulumi.get(__ret__, 'limit'),
        starts_with=pulumi.get(__ret__, 'starts_with'))
def get_cortex_search_services_output(in_: Optional[pulumi.Input[Optional[Union['GetCortexSearchServicesInArgs', 'GetCortexSearchServicesInArgsDict']]]] = None,
                                      like: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                      limit: Optional[pulumi.Input[Optional[Union['GetCortexSearchServicesLimitArgs', 'GetCortexSearchServicesLimitArgsDict']]]] = None,
                                      starts_with: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCortexSearchServicesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['in'] = in_
    __args__['like'] = like
    __args__['limit'] = limit
    __args__['startsWith'] = starts_with
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('snowflake:index/getCortexSearchServices:getCortexSearchServices', __args__, opts=opts, typ=GetCortexSearchServicesResult)
    return __ret__.apply(lambda __response__: GetCortexSearchServicesResult(
        cortex_search_services=pulumi.get(__response__, 'cortex_search_services'),
        id=pulumi.get(__response__, 'id'),
        in_=pulumi.get(__response__, 'in_'),
        like=pulumi.get(__response__, 'like'),
        limit=pulumi.get(__response__, 'limit'),
        starts_with=pulumi.get(__response__, 'starts_with')))
