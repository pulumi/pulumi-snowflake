# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetCortexSearchServicesResult',
    'AwaitableGetCortexSearchServicesResult',
    'get_cortex_search_services',
    'get_cortex_search_services_output',
]

@pulumi.output_type
class GetCortexSearchServicesResult:
    """
    A collection of values returned by getCortexSearchServices.
    """
    def __init__(__self__, cortex_search_services=None, id=None, in_=None, like=None, limit=None, starts_with=None):
        if cortex_search_services and not isinstance(cortex_search_services, list):
            raise TypeError("Expected argument 'cortex_search_services' to be a list")
        pulumi.set(__self__, "cortex_search_services", cortex_search_services)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if in_ and not isinstance(in_, dict):
            raise TypeError("Expected argument 'in_' to be a dict")
        pulumi.set(__self__, "in_", in_)
        if like and not isinstance(like, str):
            raise TypeError("Expected argument 'like' to be a str")
        pulumi.set(__self__, "like", like)
        if limit and not isinstance(limit, dict):
            raise TypeError("Expected argument 'limit' to be a dict")
        pulumi.set(__self__, "limit", limit)
        if starts_with and not isinstance(starts_with, str):
            raise TypeError("Expected argument 'starts_with' to be a str")
        pulumi.set(__self__, "starts_with", starts_with)

    @property
    @pulumi.getter(name="cortexSearchServices")
    def cortex_search_services(self) -> Sequence['outputs.GetCortexSearchServicesCortexSearchServiceResult']:
        """
        Holds the output of SHOW CORTEX SEARCH SERVICES.
        """
        return pulumi.get(self, "cortex_search_services")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="in")
    def in_(self) -> Optional['outputs.GetCortexSearchServicesInResult']:
        """
        IN clause to filter the list of cortex search services.
        """
        return pulumi.get(self, "in_")

    @property
    @pulumi.getter
    def like(self) -> Optional[str]:
        """
        Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
        """
        return pulumi.get(self, "like")

    @property
    @pulumi.getter
    def limit(self) -> Optional['outputs.GetCortexSearchServicesLimitResult']:
        """
        Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="startsWith")
    def starts_with(self) -> Optional[str]:
        """
        Filters the output with **case-sensitive** characters indicating the beginning of the object name.
        """
        return pulumi.get(self, "starts_with")


class AwaitableGetCortexSearchServicesResult(GetCortexSearchServicesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCortexSearchServicesResult(
            cortex_search_services=self.cortex_search_services,
            id=self.id,
            in_=self.in_,
            like=self.like,
            limit=self.limit,
            starts_with=self.starts_with)


def get_cortex_search_services(in_: Optional[Union['GetCortexSearchServicesInArgs', 'GetCortexSearchServicesInArgsDict']] = None,
                               like: Optional[str] = None,
                               limit: Optional[Union['GetCortexSearchServicesLimitArgs', 'GetCortexSearchServicesLimitArgsDict']] = None,
                               starts_with: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCortexSearchServicesResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_snowflake as snowflake

    # Simple usage
    simple = snowflake.get_cortex_search_services()
    pulumi.export("simpleOutput", simple.cortex_search_services)
    # Filtering (like)
    like = snowflake.get_cortex_search_services(like="some-name")
    pulumi.export("likeOutput", like.cortex_search_services)
    # Filtering (starts_with)
    starts_with = snowflake.get_cortex_search_services(starts_with="prefix-")
    pulumi.export("startsWithOutput", starts_with.cortex_search_services)
    # Filtering (limit)
    limit = snowflake.get_cortex_search_services(limit={
        "rows": 10,
        "from_": "prefix-",
    })
    pulumi.export("limitOutput", limit.cortex_search_services)
    ```


    :param Union['GetCortexSearchServicesInArgs', 'GetCortexSearchServicesInArgsDict'] in_: IN clause to filter the list of cortex search services.
    :param str like: Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
    :param Union['GetCortexSearchServicesLimitArgs', 'GetCortexSearchServicesLimitArgsDict'] limit: Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.
    :param str starts_with: Filters the output with **case-sensitive** characters indicating the beginning of the object name.
    """
    __args__ = dict()
    __args__['in'] = in_
    __args__['like'] = like
    __args__['limit'] = limit
    __args__['startsWith'] = starts_with
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('snowflake:index/getCortexSearchServices:getCortexSearchServices', __args__, opts=opts, typ=GetCortexSearchServicesResult).value

    return AwaitableGetCortexSearchServicesResult(
        cortex_search_services=pulumi.get(__ret__, 'cortex_search_services'),
        id=pulumi.get(__ret__, 'id'),
        in_=pulumi.get(__ret__, 'in_'),
        like=pulumi.get(__ret__, 'like'),
        limit=pulumi.get(__ret__, 'limit'),
        starts_with=pulumi.get(__ret__, 'starts_with'))


@_utilities.lift_output_func(get_cortex_search_services)
def get_cortex_search_services_output(in_: Optional[pulumi.Input[Optional[Union['GetCortexSearchServicesInArgs', 'GetCortexSearchServicesInArgsDict']]]] = None,
                                      like: Optional[pulumi.Input[Optional[str]]] = None,
                                      limit: Optional[pulumi.Input[Optional[Union['GetCortexSearchServicesLimitArgs', 'GetCortexSearchServicesLimitArgsDict']]]] = None,
                                      starts_with: Optional[pulumi.Input[Optional[str]]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCortexSearchServicesResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_snowflake as snowflake

    # Simple usage
    simple = snowflake.get_cortex_search_services()
    pulumi.export("simpleOutput", simple.cortex_search_services)
    # Filtering (like)
    like = snowflake.get_cortex_search_services(like="some-name")
    pulumi.export("likeOutput", like.cortex_search_services)
    # Filtering (starts_with)
    starts_with = snowflake.get_cortex_search_services(starts_with="prefix-")
    pulumi.export("startsWithOutput", starts_with.cortex_search_services)
    # Filtering (limit)
    limit = snowflake.get_cortex_search_services(limit={
        "rows": 10,
        "from_": "prefix-",
    })
    pulumi.export("limitOutput", limit.cortex_search_services)
    ```


    :param Union['GetCortexSearchServicesInArgs', 'GetCortexSearchServicesInArgsDict'] in_: IN clause to filter the list of cortex search services.
    :param str like: Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
    :param Union['GetCortexSearchServicesLimitArgs', 'GetCortexSearchServicesLimitArgsDict'] limit: Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.
    :param str starts_with: Filters the output with **case-sensitive** characters indicating the beginning of the object name.
    """
    ...
