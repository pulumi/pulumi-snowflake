# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSystemGetAwsSnsIamPolicyResult',
    'AwaitableGetSystemGetAwsSnsIamPolicyResult',
    'get_system_get_aws_sns_iam_policy',
    'get_system_get_aws_sns_iam_policy_output',
]

@pulumi.output_type
class GetSystemGetAwsSnsIamPolicyResult:
    """
    A collection of values returned by getSystemGetAwsSnsIamPolicy.
    """
    def __init__(__self__, aws_sns_topic_arn=None, aws_sns_topic_policy_json=None, id=None):
        if aws_sns_topic_arn and not isinstance(aws_sns_topic_arn, str):
            raise TypeError("Expected argument 'aws_sns_topic_arn' to be a str")
        pulumi.set(__self__, "aws_sns_topic_arn", aws_sns_topic_arn)
        if aws_sns_topic_policy_json and not isinstance(aws_sns_topic_policy_json, str):
            raise TypeError("Expected argument 'aws_sns_topic_policy_json' to be a str")
        pulumi.set(__self__, "aws_sns_topic_policy_json", aws_sns_topic_policy_json)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="awsSnsTopicArn")
    def aws_sns_topic_arn(self) -> str:
        """
        Amazon Resource Name (ARN) of the SNS topic for your S3 bucket
        """
        return pulumi.get(self, "aws_sns_topic_arn")

    @property
    @pulumi.getter(name="awsSnsTopicPolicyJson")
    def aws_sns_topic_policy_json(self) -> str:
        """
        IAM policy for Snowflakeâ€™s SQS queue to subscribe to this topic
        """
        return pulumi.get(self, "aws_sns_topic_policy_json")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetSystemGetAwsSnsIamPolicyResult(GetSystemGetAwsSnsIamPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSystemGetAwsSnsIamPolicyResult(
            aws_sns_topic_arn=self.aws_sns_topic_arn,
            aws_sns_topic_policy_json=self.aws_sns_topic_policy_json,
            id=self.id)


def get_system_get_aws_sns_iam_policy(aws_sns_topic_arn: Optional[str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSystemGetAwsSnsIamPolicyResult:
    """
    Use this data source to access information about an existing resource.

    :param str aws_sns_topic_arn: Amazon Resource Name (ARN) of the SNS topic for your S3 bucket
    """
    __args__ = dict()
    __args__['awsSnsTopicArn'] = aws_sns_topic_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('snowflake:index/getSystemGetAwsSnsIamPolicy:getSystemGetAwsSnsIamPolicy', __args__, opts=opts, typ=GetSystemGetAwsSnsIamPolicyResult).value

    return AwaitableGetSystemGetAwsSnsIamPolicyResult(
        aws_sns_topic_arn=pulumi.get(__ret__, 'aws_sns_topic_arn'),
        aws_sns_topic_policy_json=pulumi.get(__ret__, 'aws_sns_topic_policy_json'),
        id=pulumi.get(__ret__, 'id'))


@_utilities.lift_output_func(get_system_get_aws_sns_iam_policy)
def get_system_get_aws_sns_iam_policy_output(aws_sns_topic_arn: Optional[pulumi.Input[str]] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSystemGetAwsSnsIamPolicyResult]:
    """
    Use this data source to access information about an existing resource.

    :param str aws_sns_topic_arn: Amazon Resource Name (ARN) of the SNS topic for your S3 bucket
    """
    ...
