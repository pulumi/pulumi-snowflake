# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetUserProgrammaticAccessTokensResult',
    'AwaitableGetUserProgrammaticAccessTokensResult',
    'get_user_programmatic_access_tokens',
    'get_user_programmatic_access_tokens_output',
]

@pulumi.output_type
class GetUserProgrammaticAccessTokensResult:
    """
    A collection of values returned by getUserProgrammaticAccessTokens.
    """
    def __init__(__self__, for_user=None, id=None, user_programmatic_access_tokens=None):
        if for_user and not isinstance(for_user, str):
            raise TypeError("Expected argument 'for_user' to be a str")
        pulumi.set(__self__, "for_user", for_user)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if user_programmatic_access_tokens and not isinstance(user_programmatic_access_tokens, list):
            raise TypeError("Expected argument 'user_programmatic_access_tokens' to be a list")
        pulumi.set(__self__, "user_programmatic_access_tokens", user_programmatic_access_tokens)

    @_builtins.property
    @pulumi.getter(name="forUser")
    def for_user(self) -> _builtins.str:
        """
        Returns programmatic access tokens for the specified user.
        """
        return pulumi.get(self, "for_user")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="userProgrammaticAccessTokens")
    def user_programmatic_access_tokens(self) -> Sequence['outputs.GetUserProgrammaticAccessTokensUserProgrammaticAccessTokenResult']:
        """
        Holds the aggregated output of all user programmatic access tokens details queries.
        """
        return pulumi.get(self, "user_programmatic_access_tokens")


class AwaitableGetUserProgrammaticAccessTokensResult(GetUserProgrammaticAccessTokensResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserProgrammaticAccessTokensResult(
            for_user=self.for_user,
            id=self.id,
            user_programmatic_access_tokens=self.user_programmatic_access_tokens)


def get_user_programmatic_access_tokens(for_user: Optional[_builtins.str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserProgrammaticAccessTokensResult:
    """
    !> **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.

    Data source used to get details of filtered user programmatic access tokens. Filtering is aligned with the current possibilities for [SHOW USER PROGRAMMATIC ACCESS TOKENS](https://docs.snowflake.com/en/sql-reference/sql/show-user-programmatic-access-tokens) query. The results of SHOW are encapsulated in one output collection `user_programmatic_access_tokens`.


    :param _builtins.str for_user: Returns programmatic access tokens for the specified user.
    """
    __args__ = dict()
    __args__['forUser'] = for_user
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('snowflake:index/getUserProgrammaticAccessTokens:getUserProgrammaticAccessTokens', __args__, opts=opts, typ=GetUserProgrammaticAccessTokensResult).value

    return AwaitableGetUserProgrammaticAccessTokensResult(
        for_user=pulumi.get(__ret__, 'for_user'),
        id=pulumi.get(__ret__, 'id'),
        user_programmatic_access_tokens=pulumi.get(__ret__, 'user_programmatic_access_tokens'))
def get_user_programmatic_access_tokens_output(for_user: Optional[pulumi.Input[_builtins.str]] = None,
                                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetUserProgrammaticAccessTokensResult]:
    """
    !> **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.

    Data source used to get details of filtered user programmatic access tokens. Filtering is aligned with the current possibilities for [SHOW USER PROGRAMMATIC ACCESS TOKENS](https://docs.snowflake.com/en/sql-reference/sql/show-user-programmatic-access-tokens) query. The results of SHOW are encapsulated in one output collection `user_programmatic_access_tokens`.


    :param _builtins.str for_user: Returns programmatic access tokens for the specified user.
    """
    __args__ = dict()
    __args__['forUser'] = for_user
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('snowflake:index/getUserProgrammaticAccessTokens:getUserProgrammaticAccessTokens', __args__, opts=opts, typ=GetUserProgrammaticAccessTokensResult)
    return __ret__.apply(lambda __response__: GetUserProgrammaticAccessTokensResult(
        for_user=pulumi.get(__response__, 'for_user'),
        id=pulumi.get(__response__, 'id'),
        user_programmatic_access_tokens=pulumi.get(__response__, 'user_programmatic_access_tokens')))
