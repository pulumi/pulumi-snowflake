# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ServiceUserArgs', 'ServiceUser']

@pulumi.input_type
class ServiceUserArgs:
    def __init__(__self__, *,
                 abort_detached_query: Optional[pulumi.Input[bool]] = None,
                 autocommit: Optional[pulumi.Input[bool]] = None,
                 binary_input_format: Optional[pulumi.Input[str]] = None,
                 binary_output_format: Optional[pulumi.Input[str]] = None,
                 client_memory_limit: Optional[pulumi.Input[int]] = None,
                 client_metadata_request_use_connection_ctx: Optional[pulumi.Input[bool]] = None,
                 client_prefetch_threads: Optional[pulumi.Input[int]] = None,
                 client_result_chunk_size: Optional[pulumi.Input[int]] = None,
                 client_result_column_case_insensitive: Optional[pulumi.Input[bool]] = None,
                 client_session_keep_alive: Optional[pulumi.Input[bool]] = None,
                 client_session_keep_alive_heartbeat_frequency: Optional[pulumi.Input[int]] = None,
                 client_timestamp_type_mapping: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 date_input_format: Optional[pulumi.Input[str]] = None,
                 date_output_format: Optional[pulumi.Input[str]] = None,
                 days_to_expiry: Optional[pulumi.Input[int]] = None,
                 default_namespace: Optional[pulumi.Input[str]] = None,
                 default_role: Optional[pulumi.Input[str]] = None,
                 default_secondary_roles_option: Optional[pulumi.Input[str]] = None,
                 default_warehouse: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 enable_unload_physical_type_optimization: Optional[pulumi.Input[bool]] = None,
                 enable_unredacted_query_syntax_error: Optional[pulumi.Input[bool]] = None,
                 error_on_nondeterministic_merge: Optional[pulumi.Input[bool]] = None,
                 error_on_nondeterministic_update: Optional[pulumi.Input[bool]] = None,
                 geography_output_format: Optional[pulumi.Input[str]] = None,
                 geometry_output_format: Optional[pulumi.Input[str]] = None,
                 jdbc_treat_decimal_as_int: Optional[pulumi.Input[bool]] = None,
                 jdbc_treat_timestamp_ntz_as_utc: Optional[pulumi.Input[bool]] = None,
                 jdbc_use_session_timezone: Optional[pulumi.Input[bool]] = None,
                 json_indent: Optional[pulumi.Input[int]] = None,
                 lock_timeout: Optional[pulumi.Input[int]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 login_name: Optional[pulumi.Input[str]] = None,
                 mins_to_unlock: Optional[pulumi.Input[int]] = None,
                 multi_statement_count: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_policy: Optional[pulumi.Input[str]] = None,
                 noorder_sequence_as_default: Optional[pulumi.Input[bool]] = None,
                 odbc_treat_decimal_as_int: Optional[pulumi.Input[bool]] = None,
                 prevent_unload_to_internal_stages: Optional[pulumi.Input[bool]] = None,
                 query_tag: Optional[pulumi.Input[str]] = None,
                 quoted_identifiers_ignore_case: Optional[pulumi.Input[bool]] = None,
                 rows_per_resultset: Optional[pulumi.Input[int]] = None,
                 rsa_public_key: Optional[pulumi.Input[str]] = None,
                 rsa_public_key2: Optional[pulumi.Input[str]] = None,
                 s3_stage_vpce_dns_name: Optional[pulumi.Input[str]] = None,
                 search_path: Optional[pulumi.Input[str]] = None,
                 simulated_data_sharing_consumer: Optional[pulumi.Input[str]] = None,
                 statement_queued_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 statement_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 strict_json_output: Optional[pulumi.Input[bool]] = None,
                 time_input_format: Optional[pulumi.Input[str]] = None,
                 time_output_format: Optional[pulumi.Input[str]] = None,
                 timestamp_day_is_always24h: Optional[pulumi.Input[bool]] = None,
                 timestamp_input_format: Optional[pulumi.Input[str]] = None,
                 timestamp_ltz_output_format: Optional[pulumi.Input[str]] = None,
                 timestamp_ntz_output_format: Optional[pulumi.Input[str]] = None,
                 timestamp_output_format: Optional[pulumi.Input[str]] = None,
                 timestamp_type_mapping: Optional[pulumi.Input[str]] = None,
                 timestamp_tz_output_format: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 trace_level: Optional[pulumi.Input[str]] = None,
                 transaction_abort_on_error: Optional[pulumi.Input[bool]] = None,
                 transaction_default_isolation_level: Optional[pulumi.Input[str]] = None,
                 two_digit_century_start: Optional[pulumi.Input[int]] = None,
                 unsupported_ddl_action: Optional[pulumi.Input[str]] = None,
                 use_cached_result: Optional[pulumi.Input[bool]] = None,
                 week_of_year_policy: Optional[pulumi.Input[int]] = None,
                 week_start: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a ServiceUser resource.
        :param pulumi.Input[bool] abort_detached_query: Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).
        :param pulumi.Input[bool] autocommit: Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).
        :param pulumi.Input[str] binary_input_format: The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).
        :param pulumi.Input[str] binary_output_format: The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).
        :param pulumi.Input[int] client_memory_limit: Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).
        :param pulumi.Input[bool] client_metadata_request_use_connection_ctx: For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).
        :param pulumi.Input[int] client_prefetch_threads: Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).
        :param pulumi.Input[int] client_result_chunk_size: Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).
        :param pulumi.Input[bool] client_result_column_case_insensitive: Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).
        :param pulumi.Input[bool] client_session_keep_alive: Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).
        :param pulumi.Input[int] client_session_keep_alive_heartbeat_frequency: Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).
        :param pulumi.Input[str] client_timestamp_type_mapping: Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).
        :param pulumi.Input[str] comment: Specifies a comment for the user.
        :param pulumi.Input[str] date_input_format: Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).
        :param pulumi.Input[str] date_output_format: Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).
        :param pulumi.Input[str] default_namespace: Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the namespace exists.
        :param pulumi.Input[str] default_role: Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role for a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT ROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does not verify that the role exists.
        :param pulumi.Input[str] default_secondary_roles_option: Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive): `DEFAULT` | `NONE` | `ALL`. More information can be found in [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).
        :param pulumi.Input[str] default_warehouse: Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the warehouse exists.
        :param pulumi.Input[str] disabled: Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the user. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        :param pulumi.Input[str] display_name: Name displayed for the user in the Snowflake web interface.
        :param pulumi.Input[str] email: Email address for the user.
        :param pulumi.Input[bool] enable_unload_physical_type_optimization: Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).
        :param pulumi.Input[bool] enable_unredacted_query_syntax_error: Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).
        :param pulumi.Input[bool] error_on_nondeterministic_merge: Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).
        :param pulumi.Input[bool] error_on_nondeterministic_update: Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).
        :param pulumi.Input[str] geography_output_format: Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).
        :param pulumi.Input[str] geometry_output_format: Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).
        :param pulumi.Input[bool] jdbc_treat_decimal_as_int: Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).
        :param pulumi.Input[bool] jdbc_treat_timestamp_ntz_as_utc: Specifies how JDBC processes TIMESTAMP*NTZ values. For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).
        :param pulumi.Input[bool] jdbc_use_session_timezone: Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).
        :param pulumi.Input[int] json_indent: Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).
        :param pulumi.Input[int] lock_timeout: Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).
        :param pulumi.Input[str] log_level: Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
        :param pulumi.Input[str] login_name: The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.
        :param pulumi.Input[int] multi_statement_count: Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).
        :param pulumi.Input[str] name: Name of the user. Note that if you do not supply login*name this will be used as login*name. Check the [docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`
        :param pulumi.Input[str] network_policy: Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE NETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).
        :param pulumi.Input[bool] noorder_sequence_as_default: Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).
        :param pulumi.Input[bool] odbc_treat_decimal_as_int: Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).
        :param pulumi.Input[bool] prevent_unload_to_internal_stages: Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO \\n\\n](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).
        :param pulumi.Input[str] query_tag: Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).
        :param pulumi.Input[bool] quoted_identifiers_ignore_case: Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).
        :param pulumi.Input[int] rows_per_resultset: Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).
        :param pulumi.Input[str] rsa_public_key: Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.
        :param pulumi.Input[str] rsa_public_key2: Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
        :param pulumi.Input[str] s3_stage_vpce_dns_name: Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).
        :param pulumi.Input[str] search_path: Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).
        :param pulumi.Input[str] simulated_data_sharing_consumer: Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, see [Introduction to Secure Data Sharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with shares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).
        :param pulumi.Input[int] statement_queued_timeout_in_seconds: Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).
        :param pulumi.Input[int] statement_timeout_in_seconds: Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).
        :param pulumi.Input[bool] strict_json_output: This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).
        :param pulumi.Input[str] time_input_format: Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).
        :param pulumi.Input[str] time_output_format: Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).
        :param pulumi.Input[bool] timestamp_day_is_always24h: Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).
        :param pulumi.Input[str] timestamp_input_format: Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).
        :param pulumi.Input[str] timestamp_ltz_output_format: Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).
        :param pulumi.Input[str] timestamp_ntz_output_format: Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).
        :param pulumi.Input[str] timestamp_output_format: Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).
        :param pulumi.Input[str] timestamp_type_mapping: Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).
        :param pulumi.Input[str] timestamp_tz_output_format: Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).
        :param pulumi.Input[str] timezone: Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).
        :param pulumi.Input[str] trace_level: Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
        :param pulumi.Input[bool] transaction_abort_on_error: Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).
        :param pulumi.Input[str] transaction_default_isolation_level: Specifies the isolation level for transactions in the user session. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).
        :param pulumi.Input[int] two_digit_century_start: Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).
        :param pulumi.Input[str] unsupported_ddl_action: Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).
        :param pulumi.Input[bool] use_cached_result: Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).
        :param pulumi.Input[int] week_of_year_policy: Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).
        :param pulumi.Input[int] week_start: Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).
        """
        if abort_detached_query is not None:
            pulumi.set(__self__, "abort_detached_query", abort_detached_query)
        if autocommit is not None:
            pulumi.set(__self__, "autocommit", autocommit)
        if binary_input_format is not None:
            pulumi.set(__self__, "binary_input_format", binary_input_format)
        if binary_output_format is not None:
            pulumi.set(__self__, "binary_output_format", binary_output_format)
        if client_memory_limit is not None:
            pulumi.set(__self__, "client_memory_limit", client_memory_limit)
        if client_metadata_request_use_connection_ctx is not None:
            pulumi.set(__self__, "client_metadata_request_use_connection_ctx", client_metadata_request_use_connection_ctx)
        if client_prefetch_threads is not None:
            pulumi.set(__self__, "client_prefetch_threads", client_prefetch_threads)
        if client_result_chunk_size is not None:
            pulumi.set(__self__, "client_result_chunk_size", client_result_chunk_size)
        if client_result_column_case_insensitive is not None:
            pulumi.set(__self__, "client_result_column_case_insensitive", client_result_column_case_insensitive)
        if client_session_keep_alive is not None:
            pulumi.set(__self__, "client_session_keep_alive", client_session_keep_alive)
        if client_session_keep_alive_heartbeat_frequency is not None:
            pulumi.set(__self__, "client_session_keep_alive_heartbeat_frequency", client_session_keep_alive_heartbeat_frequency)
        if client_timestamp_type_mapping is not None:
            pulumi.set(__self__, "client_timestamp_type_mapping", client_timestamp_type_mapping)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if date_input_format is not None:
            pulumi.set(__self__, "date_input_format", date_input_format)
        if date_output_format is not None:
            pulumi.set(__self__, "date_output_format", date_output_format)
        if days_to_expiry is not None:
            pulumi.set(__self__, "days_to_expiry", days_to_expiry)
        if default_namespace is not None:
            pulumi.set(__self__, "default_namespace", default_namespace)
        if default_role is not None:
            pulumi.set(__self__, "default_role", default_role)
        if default_secondary_roles_option is not None:
            pulumi.set(__self__, "default_secondary_roles_option", default_secondary_roles_option)
        if default_warehouse is not None:
            pulumi.set(__self__, "default_warehouse", default_warehouse)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if enable_unload_physical_type_optimization is not None:
            pulumi.set(__self__, "enable_unload_physical_type_optimization", enable_unload_physical_type_optimization)
        if enable_unredacted_query_syntax_error is not None:
            pulumi.set(__self__, "enable_unredacted_query_syntax_error", enable_unredacted_query_syntax_error)
        if error_on_nondeterministic_merge is not None:
            pulumi.set(__self__, "error_on_nondeterministic_merge", error_on_nondeterministic_merge)
        if error_on_nondeterministic_update is not None:
            pulumi.set(__self__, "error_on_nondeterministic_update", error_on_nondeterministic_update)
        if geography_output_format is not None:
            pulumi.set(__self__, "geography_output_format", geography_output_format)
        if geometry_output_format is not None:
            pulumi.set(__self__, "geometry_output_format", geometry_output_format)
        if jdbc_treat_decimal_as_int is not None:
            pulumi.set(__self__, "jdbc_treat_decimal_as_int", jdbc_treat_decimal_as_int)
        if jdbc_treat_timestamp_ntz_as_utc is not None:
            pulumi.set(__self__, "jdbc_treat_timestamp_ntz_as_utc", jdbc_treat_timestamp_ntz_as_utc)
        if jdbc_use_session_timezone is not None:
            pulumi.set(__self__, "jdbc_use_session_timezone", jdbc_use_session_timezone)
        if json_indent is not None:
            pulumi.set(__self__, "json_indent", json_indent)
        if lock_timeout is not None:
            pulumi.set(__self__, "lock_timeout", lock_timeout)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if login_name is not None:
            pulumi.set(__self__, "login_name", login_name)
        if mins_to_unlock is not None:
            pulumi.set(__self__, "mins_to_unlock", mins_to_unlock)
        if multi_statement_count is not None:
            pulumi.set(__self__, "multi_statement_count", multi_statement_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_policy is not None:
            pulumi.set(__self__, "network_policy", network_policy)
        if noorder_sequence_as_default is not None:
            pulumi.set(__self__, "noorder_sequence_as_default", noorder_sequence_as_default)
        if odbc_treat_decimal_as_int is not None:
            pulumi.set(__self__, "odbc_treat_decimal_as_int", odbc_treat_decimal_as_int)
        if prevent_unload_to_internal_stages is not None:
            pulumi.set(__self__, "prevent_unload_to_internal_stages", prevent_unload_to_internal_stages)
        if query_tag is not None:
            pulumi.set(__self__, "query_tag", query_tag)
        if quoted_identifiers_ignore_case is not None:
            pulumi.set(__self__, "quoted_identifiers_ignore_case", quoted_identifiers_ignore_case)
        if rows_per_resultset is not None:
            pulumi.set(__self__, "rows_per_resultset", rows_per_resultset)
        if rsa_public_key is not None:
            pulumi.set(__self__, "rsa_public_key", rsa_public_key)
        if rsa_public_key2 is not None:
            pulumi.set(__self__, "rsa_public_key2", rsa_public_key2)
        if s3_stage_vpce_dns_name is not None:
            pulumi.set(__self__, "s3_stage_vpce_dns_name", s3_stage_vpce_dns_name)
        if search_path is not None:
            pulumi.set(__self__, "search_path", search_path)
        if simulated_data_sharing_consumer is not None:
            pulumi.set(__self__, "simulated_data_sharing_consumer", simulated_data_sharing_consumer)
        if statement_queued_timeout_in_seconds is not None:
            pulumi.set(__self__, "statement_queued_timeout_in_seconds", statement_queued_timeout_in_seconds)
        if statement_timeout_in_seconds is not None:
            pulumi.set(__self__, "statement_timeout_in_seconds", statement_timeout_in_seconds)
        if strict_json_output is not None:
            pulumi.set(__self__, "strict_json_output", strict_json_output)
        if time_input_format is not None:
            pulumi.set(__self__, "time_input_format", time_input_format)
        if time_output_format is not None:
            pulumi.set(__self__, "time_output_format", time_output_format)
        if timestamp_day_is_always24h is not None:
            pulumi.set(__self__, "timestamp_day_is_always24h", timestamp_day_is_always24h)
        if timestamp_input_format is not None:
            pulumi.set(__self__, "timestamp_input_format", timestamp_input_format)
        if timestamp_ltz_output_format is not None:
            pulumi.set(__self__, "timestamp_ltz_output_format", timestamp_ltz_output_format)
        if timestamp_ntz_output_format is not None:
            pulumi.set(__self__, "timestamp_ntz_output_format", timestamp_ntz_output_format)
        if timestamp_output_format is not None:
            pulumi.set(__self__, "timestamp_output_format", timestamp_output_format)
        if timestamp_type_mapping is not None:
            pulumi.set(__self__, "timestamp_type_mapping", timestamp_type_mapping)
        if timestamp_tz_output_format is not None:
            pulumi.set(__self__, "timestamp_tz_output_format", timestamp_tz_output_format)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if trace_level is not None:
            pulumi.set(__self__, "trace_level", trace_level)
        if transaction_abort_on_error is not None:
            pulumi.set(__self__, "transaction_abort_on_error", transaction_abort_on_error)
        if transaction_default_isolation_level is not None:
            pulumi.set(__self__, "transaction_default_isolation_level", transaction_default_isolation_level)
        if two_digit_century_start is not None:
            pulumi.set(__self__, "two_digit_century_start", two_digit_century_start)
        if unsupported_ddl_action is not None:
            pulumi.set(__self__, "unsupported_ddl_action", unsupported_ddl_action)
        if use_cached_result is not None:
            pulumi.set(__self__, "use_cached_result", use_cached_result)
        if week_of_year_policy is not None:
            pulumi.set(__self__, "week_of_year_policy", week_of_year_policy)
        if week_start is not None:
            pulumi.set(__self__, "week_start", week_start)

    @property
    @pulumi.getter(name="abortDetachedQuery")
    def abort_detached_query(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).
        """
        return pulumi.get(self, "abort_detached_query")

    @abort_detached_query.setter
    def abort_detached_query(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "abort_detached_query", value)

    @property
    @pulumi.getter
    def autocommit(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).
        """
        return pulumi.get(self, "autocommit")

    @autocommit.setter
    def autocommit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "autocommit", value)

    @property
    @pulumi.getter(name="binaryInputFormat")
    def binary_input_format(self) -> Optional[pulumi.Input[str]]:
        """
        The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).
        """
        return pulumi.get(self, "binary_input_format")

    @binary_input_format.setter
    def binary_input_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "binary_input_format", value)

    @property
    @pulumi.getter(name="binaryOutputFormat")
    def binary_output_format(self) -> Optional[pulumi.Input[str]]:
        """
        The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).
        """
        return pulumi.get(self, "binary_output_format")

    @binary_output_format.setter
    def binary_output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "binary_output_format", value)

    @property
    @pulumi.getter(name="clientMemoryLimit")
    def client_memory_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).
        """
        return pulumi.get(self, "client_memory_limit")

    @client_memory_limit.setter
    def client_memory_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_memory_limit", value)

    @property
    @pulumi.getter(name="clientMetadataRequestUseConnectionCtx")
    def client_metadata_request_use_connection_ctx(self) -> Optional[pulumi.Input[bool]]:
        """
        For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).
        """
        return pulumi.get(self, "client_metadata_request_use_connection_ctx")

    @client_metadata_request_use_connection_ctx.setter
    def client_metadata_request_use_connection_ctx(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "client_metadata_request_use_connection_ctx", value)

    @property
    @pulumi.getter(name="clientPrefetchThreads")
    def client_prefetch_threads(self) -> Optional[pulumi.Input[int]]:
        """
        Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).
        """
        return pulumi.get(self, "client_prefetch_threads")

    @client_prefetch_threads.setter
    def client_prefetch_threads(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_prefetch_threads", value)

    @property
    @pulumi.getter(name="clientResultChunkSize")
    def client_result_chunk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).
        """
        return pulumi.get(self, "client_result_chunk_size")

    @client_result_chunk_size.setter
    def client_result_chunk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_result_chunk_size", value)

    @property
    @pulumi.getter(name="clientResultColumnCaseInsensitive")
    def client_result_column_case_insensitive(self) -> Optional[pulumi.Input[bool]]:
        """
        Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).
        """
        return pulumi.get(self, "client_result_column_case_insensitive")

    @client_result_column_case_insensitive.setter
    def client_result_column_case_insensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "client_result_column_case_insensitive", value)

    @property
    @pulumi.getter(name="clientSessionKeepAlive")
    def client_session_keep_alive(self) -> Optional[pulumi.Input[bool]]:
        """
        Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).
        """
        return pulumi.get(self, "client_session_keep_alive")

    @client_session_keep_alive.setter
    def client_session_keep_alive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "client_session_keep_alive", value)

    @property
    @pulumi.getter(name="clientSessionKeepAliveHeartbeatFrequency")
    def client_session_keep_alive_heartbeat_frequency(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).
        """
        return pulumi.get(self, "client_session_keep_alive_heartbeat_frequency")

    @client_session_keep_alive_heartbeat_frequency.setter
    def client_session_keep_alive_heartbeat_frequency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_session_keep_alive_heartbeat_frequency", value)

    @property
    @pulumi.getter(name="clientTimestampTypeMapping")
    def client_timestamp_type_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).
        """
        return pulumi.get(self, "client_timestamp_type_mapping")

    @client_timestamp_type_mapping.setter
    def client_timestamp_type_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_timestamp_type_mapping", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies a comment for the user.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dateInputFormat")
    def date_input_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).
        """
        return pulumi.get(self, "date_input_format")

    @date_input_format.setter
    def date_input_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_input_format", value)

    @property
    @pulumi.getter(name="dateOutputFormat")
    def date_output_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).
        """
        return pulumi.get(self, "date_output_format")

    @date_output_format.setter
    def date_output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_output_format", value)

    @property
    @pulumi.getter(name="daysToExpiry")
    def days_to_expiry(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "days_to_expiry")

    @days_to_expiry.setter
    def days_to_expiry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "days_to_expiry", value)

    @property
    @pulumi.getter(name="defaultNamespace")
    def default_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the namespace exists.
        """
        return pulumi.get(self, "default_namespace")

    @default_namespace.setter
    def default_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_namespace", value)

    @property
    @pulumi.getter(name="defaultRole")
    def default_role(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role for a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT ROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does not verify that the role exists.
        """
        return pulumi.get(self, "default_role")

    @default_role.setter
    def default_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_role", value)

    @property
    @pulumi.getter(name="defaultSecondaryRolesOption")
    def default_secondary_roles_option(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive): `DEFAULT` | `NONE` | `ALL`. More information can be found in [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).
        """
        return pulumi.get(self, "default_secondary_roles_option")

    @default_secondary_roles_option.setter
    def default_secondary_roles_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_secondary_roles_option", value)

    @property
    @pulumi.getter(name="defaultWarehouse")
    def default_warehouse(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the warehouse exists.
        """
        return pulumi.get(self, "default_warehouse")

    @default_warehouse.setter
    def default_warehouse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_warehouse", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the user. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name displayed for the user in the Snowflake web interface.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email address for the user.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="enableUnloadPhysicalTypeOptimization")
    def enable_unload_physical_type_optimization(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).
        """
        return pulumi.get(self, "enable_unload_physical_type_optimization")

    @enable_unload_physical_type_optimization.setter
    def enable_unload_physical_type_optimization(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_unload_physical_type_optimization", value)

    @property
    @pulumi.getter(name="enableUnredactedQuerySyntaxError")
    def enable_unredacted_query_syntax_error(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).
        """
        return pulumi.get(self, "enable_unredacted_query_syntax_error")

    @enable_unredacted_query_syntax_error.setter
    def enable_unredacted_query_syntax_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_unredacted_query_syntax_error", value)

    @property
    @pulumi.getter(name="errorOnNondeterministicMerge")
    def error_on_nondeterministic_merge(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).
        """
        return pulumi.get(self, "error_on_nondeterministic_merge")

    @error_on_nondeterministic_merge.setter
    def error_on_nondeterministic_merge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "error_on_nondeterministic_merge", value)

    @property
    @pulumi.getter(name="errorOnNondeterministicUpdate")
    def error_on_nondeterministic_update(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).
        """
        return pulumi.get(self, "error_on_nondeterministic_update")

    @error_on_nondeterministic_update.setter
    def error_on_nondeterministic_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "error_on_nondeterministic_update", value)

    @property
    @pulumi.getter(name="geographyOutputFormat")
    def geography_output_format(self) -> Optional[pulumi.Input[str]]:
        """
        Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).
        """
        return pulumi.get(self, "geography_output_format")

    @geography_output_format.setter
    def geography_output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "geography_output_format", value)

    @property
    @pulumi.getter(name="geometryOutputFormat")
    def geometry_output_format(self) -> Optional[pulumi.Input[str]]:
        """
        Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).
        """
        return pulumi.get(self, "geometry_output_format")

    @geometry_output_format.setter
    def geometry_output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "geometry_output_format", value)

    @property
    @pulumi.getter(name="jdbcTreatDecimalAsInt")
    def jdbc_treat_decimal_as_int(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).
        """
        return pulumi.get(self, "jdbc_treat_decimal_as_int")

    @jdbc_treat_decimal_as_int.setter
    def jdbc_treat_decimal_as_int(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "jdbc_treat_decimal_as_int", value)

    @property
    @pulumi.getter(name="jdbcTreatTimestampNtzAsUtc")
    def jdbc_treat_timestamp_ntz_as_utc(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies how JDBC processes TIMESTAMP*NTZ values. For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).
        """
        return pulumi.get(self, "jdbc_treat_timestamp_ntz_as_utc")

    @jdbc_treat_timestamp_ntz_as_utc.setter
    def jdbc_treat_timestamp_ntz_as_utc(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "jdbc_treat_timestamp_ntz_as_utc", value)

    @property
    @pulumi.getter(name="jdbcUseSessionTimezone")
    def jdbc_use_session_timezone(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).
        """
        return pulumi.get(self, "jdbc_use_session_timezone")

    @jdbc_use_session_timezone.setter
    def jdbc_use_session_timezone(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "jdbc_use_session_timezone", value)

    @property
    @pulumi.getter(name="jsonIndent")
    def json_indent(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).
        """
        return pulumi.get(self, "json_indent")

    @json_indent.setter
    def json_indent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "json_indent", value)

    @property
    @pulumi.getter(name="lockTimeout")
    def lock_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).
        """
        return pulumi.get(self, "lock_timeout")

    @lock_timeout.setter
    def lock_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lock_timeout", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.
        """
        return pulumi.get(self, "login_name")

    @login_name.setter
    def login_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_name", value)

    @property
    @pulumi.getter(name="minsToUnlock")
    def mins_to_unlock(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mins_to_unlock")

    @mins_to_unlock.setter
    def mins_to_unlock(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mins_to_unlock", value)

    @property
    @pulumi.getter(name="multiStatementCount")
    def multi_statement_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).
        """
        return pulumi.get(self, "multi_statement_count")

    @multi_statement_count.setter
    def multi_statement_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "multi_statement_count", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the user. Note that if you do not supply login*name this will be used as login*name. Check the [docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkPolicy")
    def network_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE NETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).
        """
        return pulumi.get(self, "network_policy")

    @network_policy.setter
    def network_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_policy", value)

    @property
    @pulumi.getter(name="noorderSequenceAsDefault")
    def noorder_sequence_as_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).
        """
        return pulumi.get(self, "noorder_sequence_as_default")

    @noorder_sequence_as_default.setter
    def noorder_sequence_as_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "noorder_sequence_as_default", value)

    @property
    @pulumi.getter(name="odbcTreatDecimalAsInt")
    def odbc_treat_decimal_as_int(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).
        """
        return pulumi.get(self, "odbc_treat_decimal_as_int")

    @odbc_treat_decimal_as_int.setter
    def odbc_treat_decimal_as_int(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "odbc_treat_decimal_as_int", value)

    @property
    @pulumi.getter(name="preventUnloadToInternalStages")
    def prevent_unload_to_internal_stages(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO \\n\\n](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).
        """
        return pulumi.get(self, "prevent_unload_to_internal_stages")

    @prevent_unload_to_internal_stages.setter
    def prevent_unload_to_internal_stages(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prevent_unload_to_internal_stages", value)

    @property
    @pulumi.getter(name="queryTag")
    def query_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).
        """
        return pulumi.get(self, "query_tag")

    @query_tag.setter
    def query_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_tag", value)

    @property
    @pulumi.getter(name="quotedIdentifiersIgnoreCase")
    def quoted_identifiers_ignore_case(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).
        """
        return pulumi.get(self, "quoted_identifiers_ignore_case")

    @quoted_identifiers_ignore_case.setter
    def quoted_identifiers_ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "quoted_identifiers_ignore_case", value)

    @property
    @pulumi.getter(name="rowsPerResultset")
    def rows_per_resultset(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).
        """
        return pulumi.get(self, "rows_per_resultset")

    @rows_per_resultset.setter
    def rows_per_resultset(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rows_per_resultset", value)

    @property
    @pulumi.getter(name="rsaPublicKey")
    def rsa_public_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.
        """
        return pulumi.get(self, "rsa_public_key")

    @rsa_public_key.setter
    def rsa_public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsa_public_key", value)

    @property
    @pulumi.getter(name="rsaPublicKey2")
    def rsa_public_key2(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
        """
        return pulumi.get(self, "rsa_public_key2")

    @rsa_public_key2.setter
    def rsa_public_key2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsa_public_key2", value)

    @property
    @pulumi.getter(name="s3StageVpceDnsName")
    def s3_stage_vpce_dns_name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).
        """
        return pulumi.get(self, "s3_stage_vpce_dns_name")

    @s3_stage_vpce_dns_name.setter
    def s3_stage_vpce_dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_stage_vpce_dns_name", value)

    @property
    @pulumi.getter(name="searchPath")
    def search_path(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).
        """
        return pulumi.get(self, "search_path")

    @search_path.setter
    def search_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_path", value)

    @property
    @pulumi.getter(name="simulatedDataSharingConsumer")
    def simulated_data_sharing_consumer(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, see [Introduction to Secure Data Sharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with shares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).
        """
        return pulumi.get(self, "simulated_data_sharing_consumer")

    @simulated_data_sharing_consumer.setter
    def simulated_data_sharing_consumer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "simulated_data_sharing_consumer", value)

    @property
    @pulumi.getter(name="statementQueuedTimeoutInSeconds")
    def statement_queued_timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).
        """
        return pulumi.get(self, "statement_queued_timeout_in_seconds")

    @statement_queued_timeout_in_seconds.setter
    def statement_queued_timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "statement_queued_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="statementTimeoutInSeconds")
    def statement_timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).
        """
        return pulumi.get(self, "statement_timeout_in_seconds")

    @statement_timeout_in_seconds.setter
    def statement_timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "statement_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="strictJsonOutput")
    def strict_json_output(self) -> Optional[pulumi.Input[bool]]:
        """
        This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).
        """
        return pulumi.get(self, "strict_json_output")

    @strict_json_output.setter
    def strict_json_output(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "strict_json_output", value)

    @property
    @pulumi.getter(name="timeInputFormat")
    def time_input_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).
        """
        return pulumi.get(self, "time_input_format")

    @time_input_format.setter
    def time_input_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_input_format", value)

    @property
    @pulumi.getter(name="timeOutputFormat")
    def time_output_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).
        """
        return pulumi.get(self, "time_output_format")

    @time_output_format.setter
    def time_output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_output_format", value)

    @property
    @pulumi.getter(name="timestampDayIsAlways24h")
    def timestamp_day_is_always24h(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).
        """
        return pulumi.get(self, "timestamp_day_is_always24h")

    @timestamp_day_is_always24h.setter
    def timestamp_day_is_always24h(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamp_day_is_always24h", value)

    @property
    @pulumi.getter(name="timestampInputFormat")
    def timestamp_input_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).
        """
        return pulumi.get(self, "timestamp_input_format")

    @timestamp_input_format.setter
    def timestamp_input_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp_input_format", value)

    @property
    @pulumi.getter(name="timestampLtzOutputFormat")
    def timestamp_ltz_output_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).
        """
        return pulumi.get(self, "timestamp_ltz_output_format")

    @timestamp_ltz_output_format.setter
    def timestamp_ltz_output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp_ltz_output_format", value)

    @property
    @pulumi.getter(name="timestampNtzOutputFormat")
    def timestamp_ntz_output_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).
        """
        return pulumi.get(self, "timestamp_ntz_output_format")

    @timestamp_ntz_output_format.setter
    def timestamp_ntz_output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp_ntz_output_format", value)

    @property
    @pulumi.getter(name="timestampOutputFormat")
    def timestamp_output_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).
        """
        return pulumi.get(self, "timestamp_output_format")

    @timestamp_output_format.setter
    def timestamp_output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp_output_format", value)

    @property
    @pulumi.getter(name="timestampTypeMapping")
    def timestamp_type_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).
        """
        return pulumi.get(self, "timestamp_type_mapping")

    @timestamp_type_mapping.setter
    def timestamp_type_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp_type_mapping", value)

    @property
    @pulumi.getter(name="timestampTzOutputFormat")
    def timestamp_tz_output_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).
        """
        return pulumi.get(self, "timestamp_tz_output_format")

    @timestamp_tz_output_format.setter
    def timestamp_tz_output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp_tz_output_format", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="traceLevel")
    def trace_level(self) -> Optional[pulumi.Input[str]]:
        """
        Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
        """
        return pulumi.get(self, "trace_level")

    @trace_level.setter
    def trace_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trace_level", value)

    @property
    @pulumi.getter(name="transactionAbortOnError")
    def transaction_abort_on_error(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).
        """
        return pulumi.get(self, "transaction_abort_on_error")

    @transaction_abort_on_error.setter
    def transaction_abort_on_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "transaction_abort_on_error", value)

    @property
    @pulumi.getter(name="transactionDefaultIsolationLevel")
    def transaction_default_isolation_level(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the isolation level for transactions in the user session. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).
        """
        return pulumi.get(self, "transaction_default_isolation_level")

    @transaction_default_isolation_level.setter
    def transaction_default_isolation_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transaction_default_isolation_level", value)

    @property
    @pulumi.getter(name="twoDigitCenturyStart")
    def two_digit_century_start(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).
        """
        return pulumi.get(self, "two_digit_century_start")

    @two_digit_century_start.setter
    def two_digit_century_start(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "two_digit_century_start", value)

    @property
    @pulumi.getter(name="unsupportedDdlAction")
    def unsupported_ddl_action(self) -> Optional[pulumi.Input[str]]:
        """
        Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).
        """
        return pulumi.get(self, "unsupported_ddl_action")

    @unsupported_ddl_action.setter
    def unsupported_ddl_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ddl_action", value)

    @property
    @pulumi.getter(name="useCachedResult")
    def use_cached_result(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).
        """
        return pulumi.get(self, "use_cached_result")

    @use_cached_result.setter
    def use_cached_result(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_cached_result", value)

    @property
    @pulumi.getter(name="weekOfYearPolicy")
    def week_of_year_policy(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).
        """
        return pulumi.get(self, "week_of_year_policy")

    @week_of_year_policy.setter
    def week_of_year_policy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "week_of_year_policy", value)

    @property
    @pulumi.getter(name="weekStart")
    def week_start(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).
        """
        return pulumi.get(self, "week_start")

    @week_start.setter
    def week_start(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "week_start", value)


@pulumi.input_type
class _ServiceUserState:
    def __init__(__self__, *,
                 abort_detached_query: Optional[pulumi.Input[bool]] = None,
                 autocommit: Optional[pulumi.Input[bool]] = None,
                 binary_input_format: Optional[pulumi.Input[str]] = None,
                 binary_output_format: Optional[pulumi.Input[str]] = None,
                 client_memory_limit: Optional[pulumi.Input[int]] = None,
                 client_metadata_request_use_connection_ctx: Optional[pulumi.Input[bool]] = None,
                 client_prefetch_threads: Optional[pulumi.Input[int]] = None,
                 client_result_chunk_size: Optional[pulumi.Input[int]] = None,
                 client_result_column_case_insensitive: Optional[pulumi.Input[bool]] = None,
                 client_session_keep_alive: Optional[pulumi.Input[bool]] = None,
                 client_session_keep_alive_heartbeat_frequency: Optional[pulumi.Input[int]] = None,
                 client_timestamp_type_mapping: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 date_input_format: Optional[pulumi.Input[str]] = None,
                 date_output_format: Optional[pulumi.Input[str]] = None,
                 days_to_expiry: Optional[pulumi.Input[int]] = None,
                 default_namespace: Optional[pulumi.Input[str]] = None,
                 default_role: Optional[pulumi.Input[str]] = None,
                 default_secondary_roles_option: Optional[pulumi.Input[str]] = None,
                 default_warehouse: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 enable_unload_physical_type_optimization: Optional[pulumi.Input[bool]] = None,
                 enable_unredacted_query_syntax_error: Optional[pulumi.Input[bool]] = None,
                 error_on_nondeterministic_merge: Optional[pulumi.Input[bool]] = None,
                 error_on_nondeterministic_update: Optional[pulumi.Input[bool]] = None,
                 fully_qualified_name: Optional[pulumi.Input[str]] = None,
                 geography_output_format: Optional[pulumi.Input[str]] = None,
                 geometry_output_format: Optional[pulumi.Input[str]] = None,
                 jdbc_treat_decimal_as_int: Optional[pulumi.Input[bool]] = None,
                 jdbc_treat_timestamp_ntz_as_utc: Optional[pulumi.Input[bool]] = None,
                 jdbc_use_session_timezone: Optional[pulumi.Input[bool]] = None,
                 json_indent: Optional[pulumi.Input[int]] = None,
                 lock_timeout: Optional[pulumi.Input[int]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 login_name: Optional[pulumi.Input[str]] = None,
                 mins_to_unlock: Optional[pulumi.Input[int]] = None,
                 multi_statement_count: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_policy: Optional[pulumi.Input[str]] = None,
                 noorder_sequence_as_default: Optional[pulumi.Input[bool]] = None,
                 odbc_treat_decimal_as_int: Optional[pulumi.Input[bool]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterArgs']]]] = None,
                 prevent_unload_to_internal_stages: Optional[pulumi.Input[bool]] = None,
                 query_tag: Optional[pulumi.Input[str]] = None,
                 quoted_identifiers_ignore_case: Optional[pulumi.Input[bool]] = None,
                 rows_per_resultset: Optional[pulumi.Input[int]] = None,
                 rsa_public_key: Optional[pulumi.Input[str]] = None,
                 rsa_public_key2: Optional[pulumi.Input[str]] = None,
                 s3_stage_vpce_dns_name: Optional[pulumi.Input[str]] = None,
                 search_path: Optional[pulumi.Input[str]] = None,
                 show_outputs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserShowOutputArgs']]]] = None,
                 simulated_data_sharing_consumer: Optional[pulumi.Input[str]] = None,
                 statement_queued_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 statement_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 strict_json_output: Optional[pulumi.Input[bool]] = None,
                 time_input_format: Optional[pulumi.Input[str]] = None,
                 time_output_format: Optional[pulumi.Input[str]] = None,
                 timestamp_day_is_always24h: Optional[pulumi.Input[bool]] = None,
                 timestamp_input_format: Optional[pulumi.Input[str]] = None,
                 timestamp_ltz_output_format: Optional[pulumi.Input[str]] = None,
                 timestamp_ntz_output_format: Optional[pulumi.Input[str]] = None,
                 timestamp_output_format: Optional[pulumi.Input[str]] = None,
                 timestamp_type_mapping: Optional[pulumi.Input[str]] = None,
                 timestamp_tz_output_format: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 trace_level: Optional[pulumi.Input[str]] = None,
                 transaction_abort_on_error: Optional[pulumi.Input[bool]] = None,
                 transaction_default_isolation_level: Optional[pulumi.Input[str]] = None,
                 two_digit_century_start: Optional[pulumi.Input[int]] = None,
                 unsupported_ddl_action: Optional[pulumi.Input[str]] = None,
                 use_cached_result: Optional[pulumi.Input[bool]] = None,
                 user_type: Optional[pulumi.Input[str]] = None,
                 week_of_year_policy: Optional[pulumi.Input[int]] = None,
                 week_start: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering ServiceUser resources.
        :param pulumi.Input[bool] abort_detached_query: Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).
        :param pulumi.Input[bool] autocommit: Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).
        :param pulumi.Input[str] binary_input_format: The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).
        :param pulumi.Input[str] binary_output_format: The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).
        :param pulumi.Input[int] client_memory_limit: Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).
        :param pulumi.Input[bool] client_metadata_request_use_connection_ctx: For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).
        :param pulumi.Input[int] client_prefetch_threads: Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).
        :param pulumi.Input[int] client_result_chunk_size: Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).
        :param pulumi.Input[bool] client_result_column_case_insensitive: Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).
        :param pulumi.Input[bool] client_session_keep_alive: Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).
        :param pulumi.Input[int] client_session_keep_alive_heartbeat_frequency: Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).
        :param pulumi.Input[str] client_timestamp_type_mapping: Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).
        :param pulumi.Input[str] comment: Specifies a comment for the user.
        :param pulumi.Input[str] date_input_format: Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).
        :param pulumi.Input[str] date_output_format: Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).
        :param pulumi.Input[str] default_namespace: Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the namespace exists.
        :param pulumi.Input[str] default_role: Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role for a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT ROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does not verify that the role exists.
        :param pulumi.Input[str] default_secondary_roles_option: Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive): `DEFAULT` | `NONE` | `ALL`. More information can be found in [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).
        :param pulumi.Input[str] default_warehouse: Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the warehouse exists.
        :param pulumi.Input[str] disabled: Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the user. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        :param pulumi.Input[str] display_name: Name displayed for the user in the Snowflake web interface.
        :param pulumi.Input[str] email: Email address for the user.
        :param pulumi.Input[bool] enable_unload_physical_type_optimization: Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).
        :param pulumi.Input[bool] enable_unredacted_query_syntax_error: Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).
        :param pulumi.Input[bool] error_on_nondeterministic_merge: Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).
        :param pulumi.Input[bool] error_on_nondeterministic_update: Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).
        :param pulumi.Input[str] fully_qualified_name: Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
        :param pulumi.Input[str] geography_output_format: Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).
        :param pulumi.Input[str] geometry_output_format: Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).
        :param pulumi.Input[bool] jdbc_treat_decimal_as_int: Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).
        :param pulumi.Input[bool] jdbc_treat_timestamp_ntz_as_utc: Specifies how JDBC processes TIMESTAMP*NTZ values. For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).
        :param pulumi.Input[bool] jdbc_use_session_timezone: Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).
        :param pulumi.Input[int] json_indent: Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).
        :param pulumi.Input[int] lock_timeout: Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).
        :param pulumi.Input[str] log_level: Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
        :param pulumi.Input[str] login_name: The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.
        :param pulumi.Input[int] multi_statement_count: Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).
        :param pulumi.Input[str] name: Name of the user. Note that if you do not supply login*name this will be used as login*name. Check the [docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`
        :param pulumi.Input[str] network_policy: Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE NETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).
        :param pulumi.Input[bool] noorder_sequence_as_default: Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).
        :param pulumi.Input[bool] odbc_treat_decimal_as_int: Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).
        :param pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterArgs']]] parameters: Outputs the result of `SHOW PARAMETERS IN USER` for the given user.
        :param pulumi.Input[bool] prevent_unload_to_internal_stages: Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO \\n\\n](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).
        :param pulumi.Input[str] query_tag: Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).
        :param pulumi.Input[bool] quoted_identifiers_ignore_case: Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).
        :param pulumi.Input[int] rows_per_resultset: Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).
        :param pulumi.Input[str] rsa_public_key: Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.
        :param pulumi.Input[str] rsa_public_key2: Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
        :param pulumi.Input[str] s3_stage_vpce_dns_name: Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).
        :param pulumi.Input[str] search_path: Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).
        :param pulumi.Input[Sequence[pulumi.Input['ServiceUserShowOutputArgs']]] show_outputs: Outputs the result of `SHOW USER` for the given user.
        :param pulumi.Input[str] simulated_data_sharing_consumer: Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, see [Introduction to Secure Data Sharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with shares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).
        :param pulumi.Input[int] statement_queued_timeout_in_seconds: Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).
        :param pulumi.Input[int] statement_timeout_in_seconds: Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).
        :param pulumi.Input[bool] strict_json_output: This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).
        :param pulumi.Input[str] time_input_format: Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).
        :param pulumi.Input[str] time_output_format: Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).
        :param pulumi.Input[bool] timestamp_day_is_always24h: Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).
        :param pulumi.Input[str] timestamp_input_format: Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).
        :param pulumi.Input[str] timestamp_ltz_output_format: Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).
        :param pulumi.Input[str] timestamp_ntz_output_format: Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).
        :param pulumi.Input[str] timestamp_output_format: Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).
        :param pulumi.Input[str] timestamp_type_mapping: Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).
        :param pulumi.Input[str] timestamp_tz_output_format: Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).
        :param pulumi.Input[str] timezone: Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).
        :param pulumi.Input[str] trace_level: Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
        :param pulumi.Input[bool] transaction_abort_on_error: Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).
        :param pulumi.Input[str] transaction_default_isolation_level: Specifies the isolation level for transactions in the user session. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).
        :param pulumi.Input[int] two_digit_century_start: Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).
        :param pulumi.Input[str] unsupported_ddl_action: Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).
        :param pulumi.Input[bool] use_cached_result: Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).
        :param pulumi.Input[str] user_type: Specifies a type for the user.
        :param pulumi.Input[int] week_of_year_policy: Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).
        :param pulumi.Input[int] week_start: Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).
        """
        if abort_detached_query is not None:
            pulumi.set(__self__, "abort_detached_query", abort_detached_query)
        if autocommit is not None:
            pulumi.set(__self__, "autocommit", autocommit)
        if binary_input_format is not None:
            pulumi.set(__self__, "binary_input_format", binary_input_format)
        if binary_output_format is not None:
            pulumi.set(__self__, "binary_output_format", binary_output_format)
        if client_memory_limit is not None:
            pulumi.set(__self__, "client_memory_limit", client_memory_limit)
        if client_metadata_request_use_connection_ctx is not None:
            pulumi.set(__self__, "client_metadata_request_use_connection_ctx", client_metadata_request_use_connection_ctx)
        if client_prefetch_threads is not None:
            pulumi.set(__self__, "client_prefetch_threads", client_prefetch_threads)
        if client_result_chunk_size is not None:
            pulumi.set(__self__, "client_result_chunk_size", client_result_chunk_size)
        if client_result_column_case_insensitive is not None:
            pulumi.set(__self__, "client_result_column_case_insensitive", client_result_column_case_insensitive)
        if client_session_keep_alive is not None:
            pulumi.set(__self__, "client_session_keep_alive", client_session_keep_alive)
        if client_session_keep_alive_heartbeat_frequency is not None:
            pulumi.set(__self__, "client_session_keep_alive_heartbeat_frequency", client_session_keep_alive_heartbeat_frequency)
        if client_timestamp_type_mapping is not None:
            pulumi.set(__self__, "client_timestamp_type_mapping", client_timestamp_type_mapping)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if date_input_format is not None:
            pulumi.set(__self__, "date_input_format", date_input_format)
        if date_output_format is not None:
            pulumi.set(__self__, "date_output_format", date_output_format)
        if days_to_expiry is not None:
            pulumi.set(__self__, "days_to_expiry", days_to_expiry)
        if default_namespace is not None:
            pulumi.set(__self__, "default_namespace", default_namespace)
        if default_role is not None:
            pulumi.set(__self__, "default_role", default_role)
        if default_secondary_roles_option is not None:
            pulumi.set(__self__, "default_secondary_roles_option", default_secondary_roles_option)
        if default_warehouse is not None:
            pulumi.set(__self__, "default_warehouse", default_warehouse)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if enable_unload_physical_type_optimization is not None:
            pulumi.set(__self__, "enable_unload_physical_type_optimization", enable_unload_physical_type_optimization)
        if enable_unredacted_query_syntax_error is not None:
            pulumi.set(__self__, "enable_unredacted_query_syntax_error", enable_unredacted_query_syntax_error)
        if error_on_nondeterministic_merge is not None:
            pulumi.set(__self__, "error_on_nondeterministic_merge", error_on_nondeterministic_merge)
        if error_on_nondeterministic_update is not None:
            pulumi.set(__self__, "error_on_nondeterministic_update", error_on_nondeterministic_update)
        if fully_qualified_name is not None:
            pulumi.set(__self__, "fully_qualified_name", fully_qualified_name)
        if geography_output_format is not None:
            pulumi.set(__self__, "geography_output_format", geography_output_format)
        if geometry_output_format is not None:
            pulumi.set(__self__, "geometry_output_format", geometry_output_format)
        if jdbc_treat_decimal_as_int is not None:
            pulumi.set(__self__, "jdbc_treat_decimal_as_int", jdbc_treat_decimal_as_int)
        if jdbc_treat_timestamp_ntz_as_utc is not None:
            pulumi.set(__self__, "jdbc_treat_timestamp_ntz_as_utc", jdbc_treat_timestamp_ntz_as_utc)
        if jdbc_use_session_timezone is not None:
            pulumi.set(__self__, "jdbc_use_session_timezone", jdbc_use_session_timezone)
        if json_indent is not None:
            pulumi.set(__self__, "json_indent", json_indent)
        if lock_timeout is not None:
            pulumi.set(__self__, "lock_timeout", lock_timeout)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if login_name is not None:
            pulumi.set(__self__, "login_name", login_name)
        if mins_to_unlock is not None:
            pulumi.set(__self__, "mins_to_unlock", mins_to_unlock)
        if multi_statement_count is not None:
            pulumi.set(__self__, "multi_statement_count", multi_statement_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_policy is not None:
            pulumi.set(__self__, "network_policy", network_policy)
        if noorder_sequence_as_default is not None:
            pulumi.set(__self__, "noorder_sequence_as_default", noorder_sequence_as_default)
        if odbc_treat_decimal_as_int is not None:
            pulumi.set(__self__, "odbc_treat_decimal_as_int", odbc_treat_decimal_as_int)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if prevent_unload_to_internal_stages is not None:
            pulumi.set(__self__, "prevent_unload_to_internal_stages", prevent_unload_to_internal_stages)
        if query_tag is not None:
            pulumi.set(__self__, "query_tag", query_tag)
        if quoted_identifiers_ignore_case is not None:
            pulumi.set(__self__, "quoted_identifiers_ignore_case", quoted_identifiers_ignore_case)
        if rows_per_resultset is not None:
            pulumi.set(__self__, "rows_per_resultset", rows_per_resultset)
        if rsa_public_key is not None:
            pulumi.set(__self__, "rsa_public_key", rsa_public_key)
        if rsa_public_key2 is not None:
            pulumi.set(__self__, "rsa_public_key2", rsa_public_key2)
        if s3_stage_vpce_dns_name is not None:
            pulumi.set(__self__, "s3_stage_vpce_dns_name", s3_stage_vpce_dns_name)
        if search_path is not None:
            pulumi.set(__self__, "search_path", search_path)
        if show_outputs is not None:
            pulumi.set(__self__, "show_outputs", show_outputs)
        if simulated_data_sharing_consumer is not None:
            pulumi.set(__self__, "simulated_data_sharing_consumer", simulated_data_sharing_consumer)
        if statement_queued_timeout_in_seconds is not None:
            pulumi.set(__self__, "statement_queued_timeout_in_seconds", statement_queued_timeout_in_seconds)
        if statement_timeout_in_seconds is not None:
            pulumi.set(__self__, "statement_timeout_in_seconds", statement_timeout_in_seconds)
        if strict_json_output is not None:
            pulumi.set(__self__, "strict_json_output", strict_json_output)
        if time_input_format is not None:
            pulumi.set(__self__, "time_input_format", time_input_format)
        if time_output_format is not None:
            pulumi.set(__self__, "time_output_format", time_output_format)
        if timestamp_day_is_always24h is not None:
            pulumi.set(__self__, "timestamp_day_is_always24h", timestamp_day_is_always24h)
        if timestamp_input_format is not None:
            pulumi.set(__self__, "timestamp_input_format", timestamp_input_format)
        if timestamp_ltz_output_format is not None:
            pulumi.set(__self__, "timestamp_ltz_output_format", timestamp_ltz_output_format)
        if timestamp_ntz_output_format is not None:
            pulumi.set(__self__, "timestamp_ntz_output_format", timestamp_ntz_output_format)
        if timestamp_output_format is not None:
            pulumi.set(__self__, "timestamp_output_format", timestamp_output_format)
        if timestamp_type_mapping is not None:
            pulumi.set(__self__, "timestamp_type_mapping", timestamp_type_mapping)
        if timestamp_tz_output_format is not None:
            pulumi.set(__self__, "timestamp_tz_output_format", timestamp_tz_output_format)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if trace_level is not None:
            pulumi.set(__self__, "trace_level", trace_level)
        if transaction_abort_on_error is not None:
            pulumi.set(__self__, "transaction_abort_on_error", transaction_abort_on_error)
        if transaction_default_isolation_level is not None:
            pulumi.set(__self__, "transaction_default_isolation_level", transaction_default_isolation_level)
        if two_digit_century_start is not None:
            pulumi.set(__self__, "two_digit_century_start", two_digit_century_start)
        if unsupported_ddl_action is not None:
            pulumi.set(__self__, "unsupported_ddl_action", unsupported_ddl_action)
        if use_cached_result is not None:
            pulumi.set(__self__, "use_cached_result", use_cached_result)
        if user_type is not None:
            pulumi.set(__self__, "user_type", user_type)
        if week_of_year_policy is not None:
            pulumi.set(__self__, "week_of_year_policy", week_of_year_policy)
        if week_start is not None:
            pulumi.set(__self__, "week_start", week_start)

    @property
    @pulumi.getter(name="abortDetachedQuery")
    def abort_detached_query(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).
        """
        return pulumi.get(self, "abort_detached_query")

    @abort_detached_query.setter
    def abort_detached_query(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "abort_detached_query", value)

    @property
    @pulumi.getter
    def autocommit(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).
        """
        return pulumi.get(self, "autocommit")

    @autocommit.setter
    def autocommit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "autocommit", value)

    @property
    @pulumi.getter(name="binaryInputFormat")
    def binary_input_format(self) -> Optional[pulumi.Input[str]]:
        """
        The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).
        """
        return pulumi.get(self, "binary_input_format")

    @binary_input_format.setter
    def binary_input_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "binary_input_format", value)

    @property
    @pulumi.getter(name="binaryOutputFormat")
    def binary_output_format(self) -> Optional[pulumi.Input[str]]:
        """
        The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).
        """
        return pulumi.get(self, "binary_output_format")

    @binary_output_format.setter
    def binary_output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "binary_output_format", value)

    @property
    @pulumi.getter(name="clientMemoryLimit")
    def client_memory_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).
        """
        return pulumi.get(self, "client_memory_limit")

    @client_memory_limit.setter
    def client_memory_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_memory_limit", value)

    @property
    @pulumi.getter(name="clientMetadataRequestUseConnectionCtx")
    def client_metadata_request_use_connection_ctx(self) -> Optional[pulumi.Input[bool]]:
        """
        For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).
        """
        return pulumi.get(self, "client_metadata_request_use_connection_ctx")

    @client_metadata_request_use_connection_ctx.setter
    def client_metadata_request_use_connection_ctx(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "client_metadata_request_use_connection_ctx", value)

    @property
    @pulumi.getter(name="clientPrefetchThreads")
    def client_prefetch_threads(self) -> Optional[pulumi.Input[int]]:
        """
        Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).
        """
        return pulumi.get(self, "client_prefetch_threads")

    @client_prefetch_threads.setter
    def client_prefetch_threads(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_prefetch_threads", value)

    @property
    @pulumi.getter(name="clientResultChunkSize")
    def client_result_chunk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).
        """
        return pulumi.get(self, "client_result_chunk_size")

    @client_result_chunk_size.setter
    def client_result_chunk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_result_chunk_size", value)

    @property
    @pulumi.getter(name="clientResultColumnCaseInsensitive")
    def client_result_column_case_insensitive(self) -> Optional[pulumi.Input[bool]]:
        """
        Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).
        """
        return pulumi.get(self, "client_result_column_case_insensitive")

    @client_result_column_case_insensitive.setter
    def client_result_column_case_insensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "client_result_column_case_insensitive", value)

    @property
    @pulumi.getter(name="clientSessionKeepAlive")
    def client_session_keep_alive(self) -> Optional[pulumi.Input[bool]]:
        """
        Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).
        """
        return pulumi.get(self, "client_session_keep_alive")

    @client_session_keep_alive.setter
    def client_session_keep_alive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "client_session_keep_alive", value)

    @property
    @pulumi.getter(name="clientSessionKeepAliveHeartbeatFrequency")
    def client_session_keep_alive_heartbeat_frequency(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).
        """
        return pulumi.get(self, "client_session_keep_alive_heartbeat_frequency")

    @client_session_keep_alive_heartbeat_frequency.setter
    def client_session_keep_alive_heartbeat_frequency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_session_keep_alive_heartbeat_frequency", value)

    @property
    @pulumi.getter(name="clientTimestampTypeMapping")
    def client_timestamp_type_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).
        """
        return pulumi.get(self, "client_timestamp_type_mapping")

    @client_timestamp_type_mapping.setter
    def client_timestamp_type_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_timestamp_type_mapping", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies a comment for the user.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dateInputFormat")
    def date_input_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).
        """
        return pulumi.get(self, "date_input_format")

    @date_input_format.setter
    def date_input_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_input_format", value)

    @property
    @pulumi.getter(name="dateOutputFormat")
    def date_output_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).
        """
        return pulumi.get(self, "date_output_format")

    @date_output_format.setter
    def date_output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_output_format", value)

    @property
    @pulumi.getter(name="daysToExpiry")
    def days_to_expiry(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "days_to_expiry")

    @days_to_expiry.setter
    def days_to_expiry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "days_to_expiry", value)

    @property
    @pulumi.getter(name="defaultNamespace")
    def default_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the namespace exists.
        """
        return pulumi.get(self, "default_namespace")

    @default_namespace.setter
    def default_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_namespace", value)

    @property
    @pulumi.getter(name="defaultRole")
    def default_role(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role for a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT ROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does not verify that the role exists.
        """
        return pulumi.get(self, "default_role")

    @default_role.setter
    def default_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_role", value)

    @property
    @pulumi.getter(name="defaultSecondaryRolesOption")
    def default_secondary_roles_option(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive): `DEFAULT` | `NONE` | `ALL`. More information can be found in [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).
        """
        return pulumi.get(self, "default_secondary_roles_option")

    @default_secondary_roles_option.setter
    def default_secondary_roles_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_secondary_roles_option", value)

    @property
    @pulumi.getter(name="defaultWarehouse")
    def default_warehouse(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the warehouse exists.
        """
        return pulumi.get(self, "default_warehouse")

    @default_warehouse.setter
    def default_warehouse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_warehouse", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the user. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name displayed for the user in the Snowflake web interface.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email address for the user.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="enableUnloadPhysicalTypeOptimization")
    def enable_unload_physical_type_optimization(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).
        """
        return pulumi.get(self, "enable_unload_physical_type_optimization")

    @enable_unload_physical_type_optimization.setter
    def enable_unload_physical_type_optimization(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_unload_physical_type_optimization", value)

    @property
    @pulumi.getter(name="enableUnredactedQuerySyntaxError")
    def enable_unredacted_query_syntax_error(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).
        """
        return pulumi.get(self, "enable_unredacted_query_syntax_error")

    @enable_unredacted_query_syntax_error.setter
    def enable_unredacted_query_syntax_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_unredacted_query_syntax_error", value)

    @property
    @pulumi.getter(name="errorOnNondeterministicMerge")
    def error_on_nondeterministic_merge(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).
        """
        return pulumi.get(self, "error_on_nondeterministic_merge")

    @error_on_nondeterministic_merge.setter
    def error_on_nondeterministic_merge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "error_on_nondeterministic_merge", value)

    @property
    @pulumi.getter(name="errorOnNondeterministicUpdate")
    def error_on_nondeterministic_update(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).
        """
        return pulumi.get(self, "error_on_nondeterministic_update")

    @error_on_nondeterministic_update.setter
    def error_on_nondeterministic_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "error_on_nondeterministic_update", value)

    @property
    @pulumi.getter(name="fullyQualifiedName")
    def fully_qualified_name(self) -> Optional[pulumi.Input[str]]:
        """
        Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
        """
        return pulumi.get(self, "fully_qualified_name")

    @fully_qualified_name.setter
    def fully_qualified_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fully_qualified_name", value)

    @property
    @pulumi.getter(name="geographyOutputFormat")
    def geography_output_format(self) -> Optional[pulumi.Input[str]]:
        """
        Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).
        """
        return pulumi.get(self, "geography_output_format")

    @geography_output_format.setter
    def geography_output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "geography_output_format", value)

    @property
    @pulumi.getter(name="geometryOutputFormat")
    def geometry_output_format(self) -> Optional[pulumi.Input[str]]:
        """
        Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).
        """
        return pulumi.get(self, "geometry_output_format")

    @geometry_output_format.setter
    def geometry_output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "geometry_output_format", value)

    @property
    @pulumi.getter(name="jdbcTreatDecimalAsInt")
    def jdbc_treat_decimal_as_int(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).
        """
        return pulumi.get(self, "jdbc_treat_decimal_as_int")

    @jdbc_treat_decimal_as_int.setter
    def jdbc_treat_decimal_as_int(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "jdbc_treat_decimal_as_int", value)

    @property
    @pulumi.getter(name="jdbcTreatTimestampNtzAsUtc")
    def jdbc_treat_timestamp_ntz_as_utc(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies how JDBC processes TIMESTAMP*NTZ values. For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).
        """
        return pulumi.get(self, "jdbc_treat_timestamp_ntz_as_utc")

    @jdbc_treat_timestamp_ntz_as_utc.setter
    def jdbc_treat_timestamp_ntz_as_utc(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "jdbc_treat_timestamp_ntz_as_utc", value)

    @property
    @pulumi.getter(name="jdbcUseSessionTimezone")
    def jdbc_use_session_timezone(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).
        """
        return pulumi.get(self, "jdbc_use_session_timezone")

    @jdbc_use_session_timezone.setter
    def jdbc_use_session_timezone(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "jdbc_use_session_timezone", value)

    @property
    @pulumi.getter(name="jsonIndent")
    def json_indent(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).
        """
        return pulumi.get(self, "json_indent")

    @json_indent.setter
    def json_indent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "json_indent", value)

    @property
    @pulumi.getter(name="lockTimeout")
    def lock_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).
        """
        return pulumi.get(self, "lock_timeout")

    @lock_timeout.setter
    def lock_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lock_timeout", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.
        """
        return pulumi.get(self, "login_name")

    @login_name.setter
    def login_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_name", value)

    @property
    @pulumi.getter(name="minsToUnlock")
    def mins_to_unlock(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mins_to_unlock")

    @mins_to_unlock.setter
    def mins_to_unlock(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mins_to_unlock", value)

    @property
    @pulumi.getter(name="multiStatementCount")
    def multi_statement_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).
        """
        return pulumi.get(self, "multi_statement_count")

    @multi_statement_count.setter
    def multi_statement_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "multi_statement_count", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the user. Note that if you do not supply login*name this will be used as login*name. Check the [docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkPolicy")
    def network_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE NETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).
        """
        return pulumi.get(self, "network_policy")

    @network_policy.setter
    def network_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_policy", value)

    @property
    @pulumi.getter(name="noorderSequenceAsDefault")
    def noorder_sequence_as_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).
        """
        return pulumi.get(self, "noorder_sequence_as_default")

    @noorder_sequence_as_default.setter
    def noorder_sequence_as_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "noorder_sequence_as_default", value)

    @property
    @pulumi.getter(name="odbcTreatDecimalAsInt")
    def odbc_treat_decimal_as_int(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).
        """
        return pulumi.get(self, "odbc_treat_decimal_as_int")

    @odbc_treat_decimal_as_int.setter
    def odbc_treat_decimal_as_int(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "odbc_treat_decimal_as_int", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterArgs']]]]:
        """
        Outputs the result of `SHOW PARAMETERS IN USER` for the given user.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="preventUnloadToInternalStages")
    def prevent_unload_to_internal_stages(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO \\n\\n](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).
        """
        return pulumi.get(self, "prevent_unload_to_internal_stages")

    @prevent_unload_to_internal_stages.setter
    def prevent_unload_to_internal_stages(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prevent_unload_to_internal_stages", value)

    @property
    @pulumi.getter(name="queryTag")
    def query_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).
        """
        return pulumi.get(self, "query_tag")

    @query_tag.setter
    def query_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_tag", value)

    @property
    @pulumi.getter(name="quotedIdentifiersIgnoreCase")
    def quoted_identifiers_ignore_case(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).
        """
        return pulumi.get(self, "quoted_identifiers_ignore_case")

    @quoted_identifiers_ignore_case.setter
    def quoted_identifiers_ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "quoted_identifiers_ignore_case", value)

    @property
    @pulumi.getter(name="rowsPerResultset")
    def rows_per_resultset(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).
        """
        return pulumi.get(self, "rows_per_resultset")

    @rows_per_resultset.setter
    def rows_per_resultset(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rows_per_resultset", value)

    @property
    @pulumi.getter(name="rsaPublicKey")
    def rsa_public_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.
        """
        return pulumi.get(self, "rsa_public_key")

    @rsa_public_key.setter
    def rsa_public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsa_public_key", value)

    @property
    @pulumi.getter(name="rsaPublicKey2")
    def rsa_public_key2(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
        """
        return pulumi.get(self, "rsa_public_key2")

    @rsa_public_key2.setter
    def rsa_public_key2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsa_public_key2", value)

    @property
    @pulumi.getter(name="s3StageVpceDnsName")
    def s3_stage_vpce_dns_name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).
        """
        return pulumi.get(self, "s3_stage_vpce_dns_name")

    @s3_stage_vpce_dns_name.setter
    def s3_stage_vpce_dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_stage_vpce_dns_name", value)

    @property
    @pulumi.getter(name="searchPath")
    def search_path(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).
        """
        return pulumi.get(self, "search_path")

    @search_path.setter
    def search_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_path", value)

    @property
    @pulumi.getter(name="showOutputs")
    def show_outputs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserShowOutputArgs']]]]:
        """
        Outputs the result of `SHOW USER` for the given user.
        """
        return pulumi.get(self, "show_outputs")

    @show_outputs.setter
    def show_outputs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUserShowOutputArgs']]]]):
        pulumi.set(self, "show_outputs", value)

    @property
    @pulumi.getter(name="simulatedDataSharingConsumer")
    def simulated_data_sharing_consumer(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, see [Introduction to Secure Data Sharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with shares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).
        """
        return pulumi.get(self, "simulated_data_sharing_consumer")

    @simulated_data_sharing_consumer.setter
    def simulated_data_sharing_consumer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "simulated_data_sharing_consumer", value)

    @property
    @pulumi.getter(name="statementQueuedTimeoutInSeconds")
    def statement_queued_timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).
        """
        return pulumi.get(self, "statement_queued_timeout_in_seconds")

    @statement_queued_timeout_in_seconds.setter
    def statement_queued_timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "statement_queued_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="statementTimeoutInSeconds")
    def statement_timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).
        """
        return pulumi.get(self, "statement_timeout_in_seconds")

    @statement_timeout_in_seconds.setter
    def statement_timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "statement_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="strictJsonOutput")
    def strict_json_output(self) -> Optional[pulumi.Input[bool]]:
        """
        This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).
        """
        return pulumi.get(self, "strict_json_output")

    @strict_json_output.setter
    def strict_json_output(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "strict_json_output", value)

    @property
    @pulumi.getter(name="timeInputFormat")
    def time_input_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).
        """
        return pulumi.get(self, "time_input_format")

    @time_input_format.setter
    def time_input_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_input_format", value)

    @property
    @pulumi.getter(name="timeOutputFormat")
    def time_output_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).
        """
        return pulumi.get(self, "time_output_format")

    @time_output_format.setter
    def time_output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_output_format", value)

    @property
    @pulumi.getter(name="timestampDayIsAlways24h")
    def timestamp_day_is_always24h(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).
        """
        return pulumi.get(self, "timestamp_day_is_always24h")

    @timestamp_day_is_always24h.setter
    def timestamp_day_is_always24h(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamp_day_is_always24h", value)

    @property
    @pulumi.getter(name="timestampInputFormat")
    def timestamp_input_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).
        """
        return pulumi.get(self, "timestamp_input_format")

    @timestamp_input_format.setter
    def timestamp_input_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp_input_format", value)

    @property
    @pulumi.getter(name="timestampLtzOutputFormat")
    def timestamp_ltz_output_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).
        """
        return pulumi.get(self, "timestamp_ltz_output_format")

    @timestamp_ltz_output_format.setter
    def timestamp_ltz_output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp_ltz_output_format", value)

    @property
    @pulumi.getter(name="timestampNtzOutputFormat")
    def timestamp_ntz_output_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).
        """
        return pulumi.get(self, "timestamp_ntz_output_format")

    @timestamp_ntz_output_format.setter
    def timestamp_ntz_output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp_ntz_output_format", value)

    @property
    @pulumi.getter(name="timestampOutputFormat")
    def timestamp_output_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).
        """
        return pulumi.get(self, "timestamp_output_format")

    @timestamp_output_format.setter
    def timestamp_output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp_output_format", value)

    @property
    @pulumi.getter(name="timestampTypeMapping")
    def timestamp_type_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).
        """
        return pulumi.get(self, "timestamp_type_mapping")

    @timestamp_type_mapping.setter
    def timestamp_type_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp_type_mapping", value)

    @property
    @pulumi.getter(name="timestampTzOutputFormat")
    def timestamp_tz_output_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).
        """
        return pulumi.get(self, "timestamp_tz_output_format")

    @timestamp_tz_output_format.setter
    def timestamp_tz_output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp_tz_output_format", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="traceLevel")
    def trace_level(self) -> Optional[pulumi.Input[str]]:
        """
        Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
        """
        return pulumi.get(self, "trace_level")

    @trace_level.setter
    def trace_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trace_level", value)

    @property
    @pulumi.getter(name="transactionAbortOnError")
    def transaction_abort_on_error(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).
        """
        return pulumi.get(self, "transaction_abort_on_error")

    @transaction_abort_on_error.setter
    def transaction_abort_on_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "transaction_abort_on_error", value)

    @property
    @pulumi.getter(name="transactionDefaultIsolationLevel")
    def transaction_default_isolation_level(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the isolation level for transactions in the user session. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).
        """
        return pulumi.get(self, "transaction_default_isolation_level")

    @transaction_default_isolation_level.setter
    def transaction_default_isolation_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transaction_default_isolation_level", value)

    @property
    @pulumi.getter(name="twoDigitCenturyStart")
    def two_digit_century_start(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).
        """
        return pulumi.get(self, "two_digit_century_start")

    @two_digit_century_start.setter
    def two_digit_century_start(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "two_digit_century_start", value)

    @property
    @pulumi.getter(name="unsupportedDdlAction")
    def unsupported_ddl_action(self) -> Optional[pulumi.Input[str]]:
        """
        Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).
        """
        return pulumi.get(self, "unsupported_ddl_action")

    @unsupported_ddl_action.setter
    def unsupported_ddl_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ddl_action", value)

    @property
    @pulumi.getter(name="useCachedResult")
    def use_cached_result(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).
        """
        return pulumi.get(self, "use_cached_result")

    @use_cached_result.setter
    def use_cached_result(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_cached_result", value)

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies a type for the user.
        """
        return pulumi.get(self, "user_type")

    @user_type.setter
    def user_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_type", value)

    @property
    @pulumi.getter(name="weekOfYearPolicy")
    def week_of_year_policy(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).
        """
        return pulumi.get(self, "week_of_year_policy")

    @week_of_year_policy.setter
    def week_of_year_policy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "week_of_year_policy", value)

    @property
    @pulumi.getter(name="weekStart")
    def week_start(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).
        """
        return pulumi.get(self, "week_start")

    @week_start.setter
    def week_start(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "week_start", value)


class ServiceUser(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 abort_detached_query: Optional[pulumi.Input[bool]] = None,
                 autocommit: Optional[pulumi.Input[bool]] = None,
                 binary_input_format: Optional[pulumi.Input[str]] = None,
                 binary_output_format: Optional[pulumi.Input[str]] = None,
                 client_memory_limit: Optional[pulumi.Input[int]] = None,
                 client_metadata_request_use_connection_ctx: Optional[pulumi.Input[bool]] = None,
                 client_prefetch_threads: Optional[pulumi.Input[int]] = None,
                 client_result_chunk_size: Optional[pulumi.Input[int]] = None,
                 client_result_column_case_insensitive: Optional[pulumi.Input[bool]] = None,
                 client_session_keep_alive: Optional[pulumi.Input[bool]] = None,
                 client_session_keep_alive_heartbeat_frequency: Optional[pulumi.Input[int]] = None,
                 client_timestamp_type_mapping: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 date_input_format: Optional[pulumi.Input[str]] = None,
                 date_output_format: Optional[pulumi.Input[str]] = None,
                 days_to_expiry: Optional[pulumi.Input[int]] = None,
                 default_namespace: Optional[pulumi.Input[str]] = None,
                 default_role: Optional[pulumi.Input[str]] = None,
                 default_secondary_roles_option: Optional[pulumi.Input[str]] = None,
                 default_warehouse: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 enable_unload_physical_type_optimization: Optional[pulumi.Input[bool]] = None,
                 enable_unredacted_query_syntax_error: Optional[pulumi.Input[bool]] = None,
                 error_on_nondeterministic_merge: Optional[pulumi.Input[bool]] = None,
                 error_on_nondeterministic_update: Optional[pulumi.Input[bool]] = None,
                 geography_output_format: Optional[pulumi.Input[str]] = None,
                 geometry_output_format: Optional[pulumi.Input[str]] = None,
                 jdbc_treat_decimal_as_int: Optional[pulumi.Input[bool]] = None,
                 jdbc_treat_timestamp_ntz_as_utc: Optional[pulumi.Input[bool]] = None,
                 jdbc_use_session_timezone: Optional[pulumi.Input[bool]] = None,
                 json_indent: Optional[pulumi.Input[int]] = None,
                 lock_timeout: Optional[pulumi.Input[int]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 login_name: Optional[pulumi.Input[str]] = None,
                 mins_to_unlock: Optional[pulumi.Input[int]] = None,
                 multi_statement_count: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_policy: Optional[pulumi.Input[str]] = None,
                 noorder_sequence_as_default: Optional[pulumi.Input[bool]] = None,
                 odbc_treat_decimal_as_int: Optional[pulumi.Input[bool]] = None,
                 prevent_unload_to_internal_stages: Optional[pulumi.Input[bool]] = None,
                 query_tag: Optional[pulumi.Input[str]] = None,
                 quoted_identifiers_ignore_case: Optional[pulumi.Input[bool]] = None,
                 rows_per_resultset: Optional[pulumi.Input[int]] = None,
                 rsa_public_key: Optional[pulumi.Input[str]] = None,
                 rsa_public_key2: Optional[pulumi.Input[str]] = None,
                 s3_stage_vpce_dns_name: Optional[pulumi.Input[str]] = None,
                 search_path: Optional[pulumi.Input[str]] = None,
                 simulated_data_sharing_consumer: Optional[pulumi.Input[str]] = None,
                 statement_queued_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 statement_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 strict_json_output: Optional[pulumi.Input[bool]] = None,
                 time_input_format: Optional[pulumi.Input[str]] = None,
                 time_output_format: Optional[pulumi.Input[str]] = None,
                 timestamp_day_is_always24h: Optional[pulumi.Input[bool]] = None,
                 timestamp_input_format: Optional[pulumi.Input[str]] = None,
                 timestamp_ltz_output_format: Optional[pulumi.Input[str]] = None,
                 timestamp_ntz_output_format: Optional[pulumi.Input[str]] = None,
                 timestamp_output_format: Optional[pulumi.Input[str]] = None,
                 timestamp_type_mapping: Optional[pulumi.Input[str]] = None,
                 timestamp_tz_output_format: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 trace_level: Optional[pulumi.Input[str]] = None,
                 transaction_abort_on_error: Optional[pulumi.Input[bool]] = None,
                 transaction_default_isolation_level: Optional[pulumi.Input[str]] = None,
                 two_digit_century_start: Optional[pulumi.Input[int]] = None,
                 unsupported_ddl_action: Optional[pulumi.Input[str]] = None,
                 use_cached_result: Optional[pulumi.Input[bool]] = None,
                 week_of_year_policy: Optional[pulumi.Input[int]] = None,
                 week_start: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        ## Import

        ```sh
        $ pulumi import snowflake:index/serviceUser:ServiceUser example '"<user_name>"'
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] abort_detached_query: Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).
        :param pulumi.Input[bool] autocommit: Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).
        :param pulumi.Input[str] binary_input_format: The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).
        :param pulumi.Input[str] binary_output_format: The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).
        :param pulumi.Input[int] client_memory_limit: Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).
        :param pulumi.Input[bool] client_metadata_request_use_connection_ctx: For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).
        :param pulumi.Input[int] client_prefetch_threads: Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).
        :param pulumi.Input[int] client_result_chunk_size: Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).
        :param pulumi.Input[bool] client_result_column_case_insensitive: Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).
        :param pulumi.Input[bool] client_session_keep_alive: Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).
        :param pulumi.Input[int] client_session_keep_alive_heartbeat_frequency: Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).
        :param pulumi.Input[str] client_timestamp_type_mapping: Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).
        :param pulumi.Input[str] comment: Specifies a comment for the user.
        :param pulumi.Input[str] date_input_format: Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).
        :param pulumi.Input[str] date_output_format: Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).
        :param pulumi.Input[str] default_namespace: Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the namespace exists.
        :param pulumi.Input[str] default_role: Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role for a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT ROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does not verify that the role exists.
        :param pulumi.Input[str] default_secondary_roles_option: Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive): `DEFAULT` | `NONE` | `ALL`. More information can be found in [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).
        :param pulumi.Input[str] default_warehouse: Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the warehouse exists.
        :param pulumi.Input[str] disabled: Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the user. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        :param pulumi.Input[str] display_name: Name displayed for the user in the Snowflake web interface.
        :param pulumi.Input[str] email: Email address for the user.
        :param pulumi.Input[bool] enable_unload_physical_type_optimization: Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).
        :param pulumi.Input[bool] enable_unredacted_query_syntax_error: Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).
        :param pulumi.Input[bool] error_on_nondeterministic_merge: Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).
        :param pulumi.Input[bool] error_on_nondeterministic_update: Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).
        :param pulumi.Input[str] geography_output_format: Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).
        :param pulumi.Input[str] geometry_output_format: Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).
        :param pulumi.Input[bool] jdbc_treat_decimal_as_int: Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).
        :param pulumi.Input[bool] jdbc_treat_timestamp_ntz_as_utc: Specifies how JDBC processes TIMESTAMP*NTZ values. For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).
        :param pulumi.Input[bool] jdbc_use_session_timezone: Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).
        :param pulumi.Input[int] json_indent: Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).
        :param pulumi.Input[int] lock_timeout: Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).
        :param pulumi.Input[str] log_level: Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
        :param pulumi.Input[str] login_name: The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.
        :param pulumi.Input[int] multi_statement_count: Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).
        :param pulumi.Input[str] name: Name of the user. Note that if you do not supply login*name this will be used as login*name. Check the [docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`
        :param pulumi.Input[str] network_policy: Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE NETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).
        :param pulumi.Input[bool] noorder_sequence_as_default: Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).
        :param pulumi.Input[bool] odbc_treat_decimal_as_int: Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).
        :param pulumi.Input[bool] prevent_unload_to_internal_stages: Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO \\n\\n](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).
        :param pulumi.Input[str] query_tag: Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).
        :param pulumi.Input[bool] quoted_identifiers_ignore_case: Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).
        :param pulumi.Input[int] rows_per_resultset: Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).
        :param pulumi.Input[str] rsa_public_key: Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.
        :param pulumi.Input[str] rsa_public_key2: Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
        :param pulumi.Input[str] s3_stage_vpce_dns_name: Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).
        :param pulumi.Input[str] search_path: Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).
        :param pulumi.Input[str] simulated_data_sharing_consumer: Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, see [Introduction to Secure Data Sharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with shares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).
        :param pulumi.Input[int] statement_queued_timeout_in_seconds: Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).
        :param pulumi.Input[int] statement_timeout_in_seconds: Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).
        :param pulumi.Input[bool] strict_json_output: This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).
        :param pulumi.Input[str] time_input_format: Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).
        :param pulumi.Input[str] time_output_format: Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).
        :param pulumi.Input[bool] timestamp_day_is_always24h: Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).
        :param pulumi.Input[str] timestamp_input_format: Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).
        :param pulumi.Input[str] timestamp_ltz_output_format: Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).
        :param pulumi.Input[str] timestamp_ntz_output_format: Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).
        :param pulumi.Input[str] timestamp_output_format: Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).
        :param pulumi.Input[str] timestamp_type_mapping: Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).
        :param pulumi.Input[str] timestamp_tz_output_format: Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).
        :param pulumi.Input[str] timezone: Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).
        :param pulumi.Input[str] trace_level: Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
        :param pulumi.Input[bool] transaction_abort_on_error: Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).
        :param pulumi.Input[str] transaction_default_isolation_level: Specifies the isolation level for transactions in the user session. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).
        :param pulumi.Input[int] two_digit_century_start: Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).
        :param pulumi.Input[str] unsupported_ddl_action: Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).
        :param pulumi.Input[bool] use_cached_result: Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).
        :param pulumi.Input[int] week_of_year_policy: Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).
        :param pulumi.Input[int] week_start: Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ServiceUserArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        ```sh
        $ pulumi import snowflake:index/serviceUser:ServiceUser example '"<user_name>"'
        ```

        :param str resource_name: The name of the resource.
        :param ServiceUserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceUserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 abort_detached_query: Optional[pulumi.Input[bool]] = None,
                 autocommit: Optional[pulumi.Input[bool]] = None,
                 binary_input_format: Optional[pulumi.Input[str]] = None,
                 binary_output_format: Optional[pulumi.Input[str]] = None,
                 client_memory_limit: Optional[pulumi.Input[int]] = None,
                 client_metadata_request_use_connection_ctx: Optional[pulumi.Input[bool]] = None,
                 client_prefetch_threads: Optional[pulumi.Input[int]] = None,
                 client_result_chunk_size: Optional[pulumi.Input[int]] = None,
                 client_result_column_case_insensitive: Optional[pulumi.Input[bool]] = None,
                 client_session_keep_alive: Optional[pulumi.Input[bool]] = None,
                 client_session_keep_alive_heartbeat_frequency: Optional[pulumi.Input[int]] = None,
                 client_timestamp_type_mapping: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 date_input_format: Optional[pulumi.Input[str]] = None,
                 date_output_format: Optional[pulumi.Input[str]] = None,
                 days_to_expiry: Optional[pulumi.Input[int]] = None,
                 default_namespace: Optional[pulumi.Input[str]] = None,
                 default_role: Optional[pulumi.Input[str]] = None,
                 default_secondary_roles_option: Optional[pulumi.Input[str]] = None,
                 default_warehouse: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 enable_unload_physical_type_optimization: Optional[pulumi.Input[bool]] = None,
                 enable_unredacted_query_syntax_error: Optional[pulumi.Input[bool]] = None,
                 error_on_nondeterministic_merge: Optional[pulumi.Input[bool]] = None,
                 error_on_nondeterministic_update: Optional[pulumi.Input[bool]] = None,
                 geography_output_format: Optional[pulumi.Input[str]] = None,
                 geometry_output_format: Optional[pulumi.Input[str]] = None,
                 jdbc_treat_decimal_as_int: Optional[pulumi.Input[bool]] = None,
                 jdbc_treat_timestamp_ntz_as_utc: Optional[pulumi.Input[bool]] = None,
                 jdbc_use_session_timezone: Optional[pulumi.Input[bool]] = None,
                 json_indent: Optional[pulumi.Input[int]] = None,
                 lock_timeout: Optional[pulumi.Input[int]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 login_name: Optional[pulumi.Input[str]] = None,
                 mins_to_unlock: Optional[pulumi.Input[int]] = None,
                 multi_statement_count: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_policy: Optional[pulumi.Input[str]] = None,
                 noorder_sequence_as_default: Optional[pulumi.Input[bool]] = None,
                 odbc_treat_decimal_as_int: Optional[pulumi.Input[bool]] = None,
                 prevent_unload_to_internal_stages: Optional[pulumi.Input[bool]] = None,
                 query_tag: Optional[pulumi.Input[str]] = None,
                 quoted_identifiers_ignore_case: Optional[pulumi.Input[bool]] = None,
                 rows_per_resultset: Optional[pulumi.Input[int]] = None,
                 rsa_public_key: Optional[pulumi.Input[str]] = None,
                 rsa_public_key2: Optional[pulumi.Input[str]] = None,
                 s3_stage_vpce_dns_name: Optional[pulumi.Input[str]] = None,
                 search_path: Optional[pulumi.Input[str]] = None,
                 simulated_data_sharing_consumer: Optional[pulumi.Input[str]] = None,
                 statement_queued_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 statement_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 strict_json_output: Optional[pulumi.Input[bool]] = None,
                 time_input_format: Optional[pulumi.Input[str]] = None,
                 time_output_format: Optional[pulumi.Input[str]] = None,
                 timestamp_day_is_always24h: Optional[pulumi.Input[bool]] = None,
                 timestamp_input_format: Optional[pulumi.Input[str]] = None,
                 timestamp_ltz_output_format: Optional[pulumi.Input[str]] = None,
                 timestamp_ntz_output_format: Optional[pulumi.Input[str]] = None,
                 timestamp_output_format: Optional[pulumi.Input[str]] = None,
                 timestamp_type_mapping: Optional[pulumi.Input[str]] = None,
                 timestamp_tz_output_format: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 trace_level: Optional[pulumi.Input[str]] = None,
                 transaction_abort_on_error: Optional[pulumi.Input[bool]] = None,
                 transaction_default_isolation_level: Optional[pulumi.Input[str]] = None,
                 two_digit_century_start: Optional[pulumi.Input[int]] = None,
                 unsupported_ddl_action: Optional[pulumi.Input[str]] = None,
                 use_cached_result: Optional[pulumi.Input[bool]] = None,
                 week_of_year_policy: Optional[pulumi.Input[int]] = None,
                 week_start: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceUserArgs.__new__(ServiceUserArgs)

            __props__.__dict__["abort_detached_query"] = abort_detached_query
            __props__.__dict__["autocommit"] = autocommit
            __props__.__dict__["binary_input_format"] = binary_input_format
            __props__.__dict__["binary_output_format"] = binary_output_format
            __props__.__dict__["client_memory_limit"] = client_memory_limit
            __props__.__dict__["client_metadata_request_use_connection_ctx"] = client_metadata_request_use_connection_ctx
            __props__.__dict__["client_prefetch_threads"] = client_prefetch_threads
            __props__.__dict__["client_result_chunk_size"] = client_result_chunk_size
            __props__.__dict__["client_result_column_case_insensitive"] = client_result_column_case_insensitive
            __props__.__dict__["client_session_keep_alive"] = client_session_keep_alive
            __props__.__dict__["client_session_keep_alive_heartbeat_frequency"] = client_session_keep_alive_heartbeat_frequency
            __props__.__dict__["client_timestamp_type_mapping"] = client_timestamp_type_mapping
            __props__.__dict__["comment"] = comment
            __props__.__dict__["date_input_format"] = date_input_format
            __props__.__dict__["date_output_format"] = date_output_format
            __props__.__dict__["days_to_expiry"] = days_to_expiry
            __props__.__dict__["default_namespace"] = default_namespace
            __props__.__dict__["default_role"] = default_role
            __props__.__dict__["default_secondary_roles_option"] = default_secondary_roles_option
            __props__.__dict__["default_warehouse"] = default_warehouse
            __props__.__dict__["disabled"] = disabled
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["email"] = None if email is None else pulumi.Output.secret(email)
            __props__.__dict__["enable_unload_physical_type_optimization"] = enable_unload_physical_type_optimization
            __props__.__dict__["enable_unredacted_query_syntax_error"] = enable_unredacted_query_syntax_error
            __props__.__dict__["error_on_nondeterministic_merge"] = error_on_nondeterministic_merge
            __props__.__dict__["error_on_nondeterministic_update"] = error_on_nondeterministic_update
            __props__.__dict__["geography_output_format"] = geography_output_format
            __props__.__dict__["geometry_output_format"] = geometry_output_format
            __props__.__dict__["jdbc_treat_decimal_as_int"] = jdbc_treat_decimal_as_int
            __props__.__dict__["jdbc_treat_timestamp_ntz_as_utc"] = jdbc_treat_timestamp_ntz_as_utc
            __props__.__dict__["jdbc_use_session_timezone"] = jdbc_use_session_timezone
            __props__.__dict__["json_indent"] = json_indent
            __props__.__dict__["lock_timeout"] = lock_timeout
            __props__.__dict__["log_level"] = log_level
            __props__.__dict__["login_name"] = None if login_name is None else pulumi.Output.secret(login_name)
            __props__.__dict__["mins_to_unlock"] = mins_to_unlock
            __props__.__dict__["multi_statement_count"] = multi_statement_count
            __props__.__dict__["name"] = name
            __props__.__dict__["network_policy"] = network_policy
            __props__.__dict__["noorder_sequence_as_default"] = noorder_sequence_as_default
            __props__.__dict__["odbc_treat_decimal_as_int"] = odbc_treat_decimal_as_int
            __props__.__dict__["prevent_unload_to_internal_stages"] = prevent_unload_to_internal_stages
            __props__.__dict__["query_tag"] = query_tag
            __props__.__dict__["quoted_identifiers_ignore_case"] = quoted_identifiers_ignore_case
            __props__.__dict__["rows_per_resultset"] = rows_per_resultset
            __props__.__dict__["rsa_public_key"] = rsa_public_key
            __props__.__dict__["rsa_public_key2"] = rsa_public_key2
            __props__.__dict__["s3_stage_vpce_dns_name"] = s3_stage_vpce_dns_name
            __props__.__dict__["search_path"] = search_path
            __props__.__dict__["simulated_data_sharing_consumer"] = simulated_data_sharing_consumer
            __props__.__dict__["statement_queued_timeout_in_seconds"] = statement_queued_timeout_in_seconds
            __props__.__dict__["statement_timeout_in_seconds"] = statement_timeout_in_seconds
            __props__.__dict__["strict_json_output"] = strict_json_output
            __props__.__dict__["time_input_format"] = time_input_format
            __props__.__dict__["time_output_format"] = time_output_format
            __props__.__dict__["timestamp_day_is_always24h"] = timestamp_day_is_always24h
            __props__.__dict__["timestamp_input_format"] = timestamp_input_format
            __props__.__dict__["timestamp_ltz_output_format"] = timestamp_ltz_output_format
            __props__.__dict__["timestamp_ntz_output_format"] = timestamp_ntz_output_format
            __props__.__dict__["timestamp_output_format"] = timestamp_output_format
            __props__.__dict__["timestamp_type_mapping"] = timestamp_type_mapping
            __props__.__dict__["timestamp_tz_output_format"] = timestamp_tz_output_format
            __props__.__dict__["timezone"] = timezone
            __props__.__dict__["trace_level"] = trace_level
            __props__.__dict__["transaction_abort_on_error"] = transaction_abort_on_error
            __props__.__dict__["transaction_default_isolation_level"] = transaction_default_isolation_level
            __props__.__dict__["two_digit_century_start"] = two_digit_century_start
            __props__.__dict__["unsupported_ddl_action"] = unsupported_ddl_action
            __props__.__dict__["use_cached_result"] = use_cached_result
            __props__.__dict__["week_of_year_policy"] = week_of_year_policy
            __props__.__dict__["week_start"] = week_start
            __props__.__dict__["fully_qualified_name"] = None
            __props__.__dict__["parameters"] = None
            __props__.__dict__["show_outputs"] = None
            __props__.__dict__["user_type"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["email", "loginName"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ServiceUser, __self__).__init__(
            'snowflake:index/serviceUser:ServiceUser',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            abort_detached_query: Optional[pulumi.Input[bool]] = None,
            autocommit: Optional[pulumi.Input[bool]] = None,
            binary_input_format: Optional[pulumi.Input[str]] = None,
            binary_output_format: Optional[pulumi.Input[str]] = None,
            client_memory_limit: Optional[pulumi.Input[int]] = None,
            client_metadata_request_use_connection_ctx: Optional[pulumi.Input[bool]] = None,
            client_prefetch_threads: Optional[pulumi.Input[int]] = None,
            client_result_chunk_size: Optional[pulumi.Input[int]] = None,
            client_result_column_case_insensitive: Optional[pulumi.Input[bool]] = None,
            client_session_keep_alive: Optional[pulumi.Input[bool]] = None,
            client_session_keep_alive_heartbeat_frequency: Optional[pulumi.Input[int]] = None,
            client_timestamp_type_mapping: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            date_input_format: Optional[pulumi.Input[str]] = None,
            date_output_format: Optional[pulumi.Input[str]] = None,
            days_to_expiry: Optional[pulumi.Input[int]] = None,
            default_namespace: Optional[pulumi.Input[str]] = None,
            default_role: Optional[pulumi.Input[str]] = None,
            default_secondary_roles_option: Optional[pulumi.Input[str]] = None,
            default_warehouse: Optional[pulumi.Input[str]] = None,
            disabled: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            email: Optional[pulumi.Input[str]] = None,
            enable_unload_physical_type_optimization: Optional[pulumi.Input[bool]] = None,
            enable_unredacted_query_syntax_error: Optional[pulumi.Input[bool]] = None,
            error_on_nondeterministic_merge: Optional[pulumi.Input[bool]] = None,
            error_on_nondeterministic_update: Optional[pulumi.Input[bool]] = None,
            fully_qualified_name: Optional[pulumi.Input[str]] = None,
            geography_output_format: Optional[pulumi.Input[str]] = None,
            geometry_output_format: Optional[pulumi.Input[str]] = None,
            jdbc_treat_decimal_as_int: Optional[pulumi.Input[bool]] = None,
            jdbc_treat_timestamp_ntz_as_utc: Optional[pulumi.Input[bool]] = None,
            jdbc_use_session_timezone: Optional[pulumi.Input[bool]] = None,
            json_indent: Optional[pulumi.Input[int]] = None,
            lock_timeout: Optional[pulumi.Input[int]] = None,
            log_level: Optional[pulumi.Input[str]] = None,
            login_name: Optional[pulumi.Input[str]] = None,
            mins_to_unlock: Optional[pulumi.Input[int]] = None,
            multi_statement_count: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_policy: Optional[pulumi.Input[str]] = None,
            noorder_sequence_as_default: Optional[pulumi.Input[bool]] = None,
            odbc_treat_decimal_as_int: Optional[pulumi.Input[bool]] = None,
            parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceUserParameterArgs', 'ServiceUserParameterArgsDict']]]]] = None,
            prevent_unload_to_internal_stages: Optional[pulumi.Input[bool]] = None,
            query_tag: Optional[pulumi.Input[str]] = None,
            quoted_identifiers_ignore_case: Optional[pulumi.Input[bool]] = None,
            rows_per_resultset: Optional[pulumi.Input[int]] = None,
            rsa_public_key: Optional[pulumi.Input[str]] = None,
            rsa_public_key2: Optional[pulumi.Input[str]] = None,
            s3_stage_vpce_dns_name: Optional[pulumi.Input[str]] = None,
            search_path: Optional[pulumi.Input[str]] = None,
            show_outputs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceUserShowOutputArgs', 'ServiceUserShowOutputArgsDict']]]]] = None,
            simulated_data_sharing_consumer: Optional[pulumi.Input[str]] = None,
            statement_queued_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
            statement_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
            strict_json_output: Optional[pulumi.Input[bool]] = None,
            time_input_format: Optional[pulumi.Input[str]] = None,
            time_output_format: Optional[pulumi.Input[str]] = None,
            timestamp_day_is_always24h: Optional[pulumi.Input[bool]] = None,
            timestamp_input_format: Optional[pulumi.Input[str]] = None,
            timestamp_ltz_output_format: Optional[pulumi.Input[str]] = None,
            timestamp_ntz_output_format: Optional[pulumi.Input[str]] = None,
            timestamp_output_format: Optional[pulumi.Input[str]] = None,
            timestamp_type_mapping: Optional[pulumi.Input[str]] = None,
            timestamp_tz_output_format: Optional[pulumi.Input[str]] = None,
            timezone: Optional[pulumi.Input[str]] = None,
            trace_level: Optional[pulumi.Input[str]] = None,
            transaction_abort_on_error: Optional[pulumi.Input[bool]] = None,
            transaction_default_isolation_level: Optional[pulumi.Input[str]] = None,
            two_digit_century_start: Optional[pulumi.Input[int]] = None,
            unsupported_ddl_action: Optional[pulumi.Input[str]] = None,
            use_cached_result: Optional[pulumi.Input[bool]] = None,
            user_type: Optional[pulumi.Input[str]] = None,
            week_of_year_policy: Optional[pulumi.Input[int]] = None,
            week_start: Optional[pulumi.Input[int]] = None) -> 'ServiceUser':
        """
        Get an existing ServiceUser resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] abort_detached_query: Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).
        :param pulumi.Input[bool] autocommit: Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).
        :param pulumi.Input[str] binary_input_format: The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).
        :param pulumi.Input[str] binary_output_format: The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).
        :param pulumi.Input[int] client_memory_limit: Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).
        :param pulumi.Input[bool] client_metadata_request_use_connection_ctx: For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).
        :param pulumi.Input[int] client_prefetch_threads: Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).
        :param pulumi.Input[int] client_result_chunk_size: Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).
        :param pulumi.Input[bool] client_result_column_case_insensitive: Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).
        :param pulumi.Input[bool] client_session_keep_alive: Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).
        :param pulumi.Input[int] client_session_keep_alive_heartbeat_frequency: Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).
        :param pulumi.Input[str] client_timestamp_type_mapping: Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).
        :param pulumi.Input[str] comment: Specifies a comment for the user.
        :param pulumi.Input[str] date_input_format: Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).
        :param pulumi.Input[str] date_output_format: Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).
        :param pulumi.Input[str] default_namespace: Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the namespace exists.
        :param pulumi.Input[str] default_role: Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role for a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT ROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does not verify that the role exists.
        :param pulumi.Input[str] default_secondary_roles_option: Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive): `DEFAULT` | `NONE` | `ALL`. More information can be found in [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).
        :param pulumi.Input[str] default_warehouse: Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the warehouse exists.
        :param pulumi.Input[str] disabled: Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the user. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        :param pulumi.Input[str] display_name: Name displayed for the user in the Snowflake web interface.
        :param pulumi.Input[str] email: Email address for the user.
        :param pulumi.Input[bool] enable_unload_physical_type_optimization: Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).
        :param pulumi.Input[bool] enable_unredacted_query_syntax_error: Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).
        :param pulumi.Input[bool] error_on_nondeterministic_merge: Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).
        :param pulumi.Input[bool] error_on_nondeterministic_update: Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).
        :param pulumi.Input[str] fully_qualified_name: Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
        :param pulumi.Input[str] geography_output_format: Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).
        :param pulumi.Input[str] geometry_output_format: Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).
        :param pulumi.Input[bool] jdbc_treat_decimal_as_int: Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).
        :param pulumi.Input[bool] jdbc_treat_timestamp_ntz_as_utc: Specifies how JDBC processes TIMESTAMP*NTZ values. For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).
        :param pulumi.Input[bool] jdbc_use_session_timezone: Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).
        :param pulumi.Input[int] json_indent: Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).
        :param pulumi.Input[int] lock_timeout: Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).
        :param pulumi.Input[str] log_level: Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
        :param pulumi.Input[str] login_name: The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.
        :param pulumi.Input[int] multi_statement_count: Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).
        :param pulumi.Input[str] name: Name of the user. Note that if you do not supply login*name this will be used as login*name. Check the [docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`
        :param pulumi.Input[str] network_policy: Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE NETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).
        :param pulumi.Input[bool] noorder_sequence_as_default: Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).
        :param pulumi.Input[bool] odbc_treat_decimal_as_int: Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceUserParameterArgs', 'ServiceUserParameterArgsDict']]]] parameters: Outputs the result of `SHOW PARAMETERS IN USER` for the given user.
        :param pulumi.Input[bool] prevent_unload_to_internal_stages: Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO \\n\\n](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).
        :param pulumi.Input[str] query_tag: Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).
        :param pulumi.Input[bool] quoted_identifiers_ignore_case: Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).
        :param pulumi.Input[int] rows_per_resultset: Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).
        :param pulumi.Input[str] rsa_public_key: Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.
        :param pulumi.Input[str] rsa_public_key2: Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
        :param pulumi.Input[str] s3_stage_vpce_dns_name: Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).
        :param pulumi.Input[str] search_path: Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceUserShowOutputArgs', 'ServiceUserShowOutputArgsDict']]]] show_outputs: Outputs the result of `SHOW USER` for the given user.
        :param pulumi.Input[str] simulated_data_sharing_consumer: Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, see [Introduction to Secure Data Sharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with shares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).
        :param pulumi.Input[int] statement_queued_timeout_in_seconds: Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).
        :param pulumi.Input[int] statement_timeout_in_seconds: Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).
        :param pulumi.Input[bool] strict_json_output: This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).
        :param pulumi.Input[str] time_input_format: Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).
        :param pulumi.Input[str] time_output_format: Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).
        :param pulumi.Input[bool] timestamp_day_is_always24h: Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).
        :param pulumi.Input[str] timestamp_input_format: Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).
        :param pulumi.Input[str] timestamp_ltz_output_format: Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).
        :param pulumi.Input[str] timestamp_ntz_output_format: Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).
        :param pulumi.Input[str] timestamp_output_format: Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).
        :param pulumi.Input[str] timestamp_type_mapping: Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).
        :param pulumi.Input[str] timestamp_tz_output_format: Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).
        :param pulumi.Input[str] timezone: Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).
        :param pulumi.Input[str] trace_level: Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
        :param pulumi.Input[bool] transaction_abort_on_error: Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).
        :param pulumi.Input[str] transaction_default_isolation_level: Specifies the isolation level for transactions in the user session. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).
        :param pulumi.Input[int] two_digit_century_start: Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).
        :param pulumi.Input[str] unsupported_ddl_action: Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).
        :param pulumi.Input[bool] use_cached_result: Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).
        :param pulumi.Input[str] user_type: Specifies a type for the user.
        :param pulumi.Input[int] week_of_year_policy: Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).
        :param pulumi.Input[int] week_start: Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceUserState.__new__(_ServiceUserState)

        __props__.__dict__["abort_detached_query"] = abort_detached_query
        __props__.__dict__["autocommit"] = autocommit
        __props__.__dict__["binary_input_format"] = binary_input_format
        __props__.__dict__["binary_output_format"] = binary_output_format
        __props__.__dict__["client_memory_limit"] = client_memory_limit
        __props__.__dict__["client_metadata_request_use_connection_ctx"] = client_metadata_request_use_connection_ctx
        __props__.__dict__["client_prefetch_threads"] = client_prefetch_threads
        __props__.__dict__["client_result_chunk_size"] = client_result_chunk_size
        __props__.__dict__["client_result_column_case_insensitive"] = client_result_column_case_insensitive
        __props__.__dict__["client_session_keep_alive"] = client_session_keep_alive
        __props__.__dict__["client_session_keep_alive_heartbeat_frequency"] = client_session_keep_alive_heartbeat_frequency
        __props__.__dict__["client_timestamp_type_mapping"] = client_timestamp_type_mapping
        __props__.__dict__["comment"] = comment
        __props__.__dict__["date_input_format"] = date_input_format
        __props__.__dict__["date_output_format"] = date_output_format
        __props__.__dict__["days_to_expiry"] = days_to_expiry
        __props__.__dict__["default_namespace"] = default_namespace
        __props__.__dict__["default_role"] = default_role
        __props__.__dict__["default_secondary_roles_option"] = default_secondary_roles_option
        __props__.__dict__["default_warehouse"] = default_warehouse
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["email"] = email
        __props__.__dict__["enable_unload_physical_type_optimization"] = enable_unload_physical_type_optimization
        __props__.__dict__["enable_unredacted_query_syntax_error"] = enable_unredacted_query_syntax_error
        __props__.__dict__["error_on_nondeterministic_merge"] = error_on_nondeterministic_merge
        __props__.__dict__["error_on_nondeterministic_update"] = error_on_nondeterministic_update
        __props__.__dict__["fully_qualified_name"] = fully_qualified_name
        __props__.__dict__["geography_output_format"] = geography_output_format
        __props__.__dict__["geometry_output_format"] = geometry_output_format
        __props__.__dict__["jdbc_treat_decimal_as_int"] = jdbc_treat_decimal_as_int
        __props__.__dict__["jdbc_treat_timestamp_ntz_as_utc"] = jdbc_treat_timestamp_ntz_as_utc
        __props__.__dict__["jdbc_use_session_timezone"] = jdbc_use_session_timezone
        __props__.__dict__["json_indent"] = json_indent
        __props__.__dict__["lock_timeout"] = lock_timeout
        __props__.__dict__["log_level"] = log_level
        __props__.__dict__["login_name"] = login_name
        __props__.__dict__["mins_to_unlock"] = mins_to_unlock
        __props__.__dict__["multi_statement_count"] = multi_statement_count
        __props__.__dict__["name"] = name
        __props__.__dict__["network_policy"] = network_policy
        __props__.__dict__["noorder_sequence_as_default"] = noorder_sequence_as_default
        __props__.__dict__["odbc_treat_decimal_as_int"] = odbc_treat_decimal_as_int
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["prevent_unload_to_internal_stages"] = prevent_unload_to_internal_stages
        __props__.__dict__["query_tag"] = query_tag
        __props__.__dict__["quoted_identifiers_ignore_case"] = quoted_identifiers_ignore_case
        __props__.__dict__["rows_per_resultset"] = rows_per_resultset
        __props__.__dict__["rsa_public_key"] = rsa_public_key
        __props__.__dict__["rsa_public_key2"] = rsa_public_key2
        __props__.__dict__["s3_stage_vpce_dns_name"] = s3_stage_vpce_dns_name
        __props__.__dict__["search_path"] = search_path
        __props__.__dict__["show_outputs"] = show_outputs
        __props__.__dict__["simulated_data_sharing_consumer"] = simulated_data_sharing_consumer
        __props__.__dict__["statement_queued_timeout_in_seconds"] = statement_queued_timeout_in_seconds
        __props__.__dict__["statement_timeout_in_seconds"] = statement_timeout_in_seconds
        __props__.__dict__["strict_json_output"] = strict_json_output
        __props__.__dict__["time_input_format"] = time_input_format
        __props__.__dict__["time_output_format"] = time_output_format
        __props__.__dict__["timestamp_day_is_always24h"] = timestamp_day_is_always24h
        __props__.__dict__["timestamp_input_format"] = timestamp_input_format
        __props__.__dict__["timestamp_ltz_output_format"] = timestamp_ltz_output_format
        __props__.__dict__["timestamp_ntz_output_format"] = timestamp_ntz_output_format
        __props__.__dict__["timestamp_output_format"] = timestamp_output_format
        __props__.__dict__["timestamp_type_mapping"] = timestamp_type_mapping
        __props__.__dict__["timestamp_tz_output_format"] = timestamp_tz_output_format
        __props__.__dict__["timezone"] = timezone
        __props__.__dict__["trace_level"] = trace_level
        __props__.__dict__["transaction_abort_on_error"] = transaction_abort_on_error
        __props__.__dict__["transaction_default_isolation_level"] = transaction_default_isolation_level
        __props__.__dict__["two_digit_century_start"] = two_digit_century_start
        __props__.__dict__["unsupported_ddl_action"] = unsupported_ddl_action
        __props__.__dict__["use_cached_result"] = use_cached_result
        __props__.__dict__["user_type"] = user_type
        __props__.__dict__["week_of_year_policy"] = week_of_year_policy
        __props__.__dict__["week_start"] = week_start
        return ServiceUser(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="abortDetachedQuery")
    def abort_detached_query(self) -> pulumi.Output[bool]:
        """
        Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).
        """
        return pulumi.get(self, "abort_detached_query")

    @property
    @pulumi.getter
    def autocommit(self) -> pulumi.Output[bool]:
        """
        Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).
        """
        return pulumi.get(self, "autocommit")

    @property
    @pulumi.getter(name="binaryInputFormat")
    def binary_input_format(self) -> pulumi.Output[str]:
        """
        The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).
        """
        return pulumi.get(self, "binary_input_format")

    @property
    @pulumi.getter(name="binaryOutputFormat")
    def binary_output_format(self) -> pulumi.Output[str]:
        """
        The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).
        """
        return pulumi.get(self, "binary_output_format")

    @property
    @pulumi.getter(name="clientMemoryLimit")
    def client_memory_limit(self) -> pulumi.Output[int]:
        """
        Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).
        """
        return pulumi.get(self, "client_memory_limit")

    @property
    @pulumi.getter(name="clientMetadataRequestUseConnectionCtx")
    def client_metadata_request_use_connection_ctx(self) -> pulumi.Output[bool]:
        """
        For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).
        """
        return pulumi.get(self, "client_metadata_request_use_connection_ctx")

    @property
    @pulumi.getter(name="clientPrefetchThreads")
    def client_prefetch_threads(self) -> pulumi.Output[int]:
        """
        Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).
        """
        return pulumi.get(self, "client_prefetch_threads")

    @property
    @pulumi.getter(name="clientResultChunkSize")
    def client_result_chunk_size(self) -> pulumi.Output[int]:
        """
        Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).
        """
        return pulumi.get(self, "client_result_chunk_size")

    @property
    @pulumi.getter(name="clientResultColumnCaseInsensitive")
    def client_result_column_case_insensitive(self) -> pulumi.Output[bool]:
        """
        Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).
        """
        return pulumi.get(self, "client_result_column_case_insensitive")

    @property
    @pulumi.getter(name="clientSessionKeepAlive")
    def client_session_keep_alive(self) -> pulumi.Output[bool]:
        """
        Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).
        """
        return pulumi.get(self, "client_session_keep_alive")

    @property
    @pulumi.getter(name="clientSessionKeepAliveHeartbeatFrequency")
    def client_session_keep_alive_heartbeat_frequency(self) -> pulumi.Output[int]:
        """
        Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).
        """
        return pulumi.get(self, "client_session_keep_alive_heartbeat_frequency")

    @property
    @pulumi.getter(name="clientTimestampTypeMapping")
    def client_timestamp_type_mapping(self) -> pulumi.Output[str]:
        """
        Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).
        """
        return pulumi.get(self, "client_timestamp_type_mapping")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies a comment for the user.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="dateInputFormat")
    def date_input_format(self) -> pulumi.Output[str]:
        """
        Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).
        """
        return pulumi.get(self, "date_input_format")

    @property
    @pulumi.getter(name="dateOutputFormat")
    def date_output_format(self) -> pulumi.Output[str]:
        """
        Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).
        """
        return pulumi.get(self, "date_output_format")

    @property
    @pulumi.getter(name="daysToExpiry")
    def days_to_expiry(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "days_to_expiry")

    @property
    @pulumi.getter(name="defaultNamespace")
    def default_namespace(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the namespace exists.
        """
        return pulumi.get(self, "default_namespace")

    @property
    @pulumi.getter(name="defaultRole")
    def default_role(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role for a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT ROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does not verify that the role exists.
        """
        return pulumi.get(self, "default_role")

    @property
    @pulumi.getter(name="defaultSecondaryRolesOption")
    def default_secondary_roles_option(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive): `DEFAULT` | `NONE` | `ALL`. More information can be found in [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).
        """
        return pulumi.get(self, "default_secondary_roles_option")

    @property
    @pulumi.getter(name="defaultWarehouse")
    def default_warehouse(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the warehouse exists.
        """
        return pulumi.get(self, "default_warehouse")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the user. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        """
        Name displayed for the user in the Snowflake web interface.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[Optional[str]]:
        """
        Email address for the user.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="enableUnloadPhysicalTypeOptimization")
    def enable_unload_physical_type_optimization(self) -> pulumi.Output[bool]:
        """
        Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).
        """
        return pulumi.get(self, "enable_unload_physical_type_optimization")

    @property
    @pulumi.getter(name="enableUnredactedQuerySyntaxError")
    def enable_unredacted_query_syntax_error(self) -> pulumi.Output[bool]:
        """
        Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).
        """
        return pulumi.get(self, "enable_unredacted_query_syntax_error")

    @property
    @pulumi.getter(name="errorOnNondeterministicMerge")
    def error_on_nondeterministic_merge(self) -> pulumi.Output[bool]:
        """
        Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).
        """
        return pulumi.get(self, "error_on_nondeterministic_merge")

    @property
    @pulumi.getter(name="errorOnNondeterministicUpdate")
    def error_on_nondeterministic_update(self) -> pulumi.Output[bool]:
        """
        Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).
        """
        return pulumi.get(self, "error_on_nondeterministic_update")

    @property
    @pulumi.getter(name="fullyQualifiedName")
    def fully_qualified_name(self) -> pulumi.Output[str]:
        """
        Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
        """
        return pulumi.get(self, "fully_qualified_name")

    @property
    @pulumi.getter(name="geographyOutputFormat")
    def geography_output_format(self) -> pulumi.Output[str]:
        """
        Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).
        """
        return pulumi.get(self, "geography_output_format")

    @property
    @pulumi.getter(name="geometryOutputFormat")
    def geometry_output_format(self) -> pulumi.Output[str]:
        """
        Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).
        """
        return pulumi.get(self, "geometry_output_format")

    @property
    @pulumi.getter(name="jdbcTreatDecimalAsInt")
    def jdbc_treat_decimal_as_int(self) -> pulumi.Output[bool]:
        """
        Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).
        """
        return pulumi.get(self, "jdbc_treat_decimal_as_int")

    @property
    @pulumi.getter(name="jdbcTreatTimestampNtzAsUtc")
    def jdbc_treat_timestamp_ntz_as_utc(self) -> pulumi.Output[bool]:
        """
        Specifies how JDBC processes TIMESTAMP*NTZ values. For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).
        """
        return pulumi.get(self, "jdbc_treat_timestamp_ntz_as_utc")

    @property
    @pulumi.getter(name="jdbcUseSessionTimezone")
    def jdbc_use_session_timezone(self) -> pulumi.Output[bool]:
        """
        Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).
        """
        return pulumi.get(self, "jdbc_use_session_timezone")

    @property
    @pulumi.getter(name="jsonIndent")
    def json_indent(self) -> pulumi.Output[int]:
        """
        Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).
        """
        return pulumi.get(self, "json_indent")

    @property
    @pulumi.getter(name="lockTimeout")
    def lock_timeout(self) -> pulumi.Output[int]:
        """
        Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).
        """
        return pulumi.get(self, "lock_timeout")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> pulumi.Output[str]:
        """
        Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
        """
        return pulumi.get(self, "log_level")

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.
        """
        return pulumi.get(self, "login_name")

    @property
    @pulumi.getter(name="minsToUnlock")
    def mins_to_unlock(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "mins_to_unlock")

    @property
    @pulumi.getter(name="multiStatementCount")
    def multi_statement_count(self) -> pulumi.Output[int]:
        """
        Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).
        """
        return pulumi.get(self, "multi_statement_count")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the user. Note that if you do not supply login*name this will be used as login*name. Check the [docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkPolicy")
    def network_policy(self) -> pulumi.Output[str]:
        """
        Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE NETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).
        """
        return pulumi.get(self, "network_policy")

    @property
    @pulumi.getter(name="noorderSequenceAsDefault")
    def noorder_sequence_as_default(self) -> pulumi.Output[bool]:
        """
        Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).
        """
        return pulumi.get(self, "noorder_sequence_as_default")

    @property
    @pulumi.getter(name="odbcTreatDecimalAsInt")
    def odbc_treat_decimal_as_int(self) -> pulumi.Output[bool]:
        """
        Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).
        """
        return pulumi.get(self, "odbc_treat_decimal_as_int")

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Sequence['outputs.ServiceUserParameter']]:
        """
        Outputs the result of `SHOW PARAMETERS IN USER` for the given user.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="preventUnloadToInternalStages")
    def prevent_unload_to_internal_stages(self) -> pulumi.Output[bool]:
        """
        Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO \\n\\n](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).
        """
        return pulumi.get(self, "prevent_unload_to_internal_stages")

    @property
    @pulumi.getter(name="queryTag")
    def query_tag(self) -> pulumi.Output[str]:
        """
        Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).
        """
        return pulumi.get(self, "query_tag")

    @property
    @pulumi.getter(name="quotedIdentifiersIgnoreCase")
    def quoted_identifiers_ignore_case(self) -> pulumi.Output[bool]:
        """
        Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).
        """
        return pulumi.get(self, "quoted_identifiers_ignore_case")

    @property
    @pulumi.getter(name="rowsPerResultset")
    def rows_per_resultset(self) -> pulumi.Output[int]:
        """
        Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).
        """
        return pulumi.get(self, "rows_per_resultset")

    @property
    @pulumi.getter(name="rsaPublicKey")
    def rsa_public_key(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.
        """
        return pulumi.get(self, "rsa_public_key")

    @property
    @pulumi.getter(name="rsaPublicKey2")
    def rsa_public_key2(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
        """
        return pulumi.get(self, "rsa_public_key2")

    @property
    @pulumi.getter(name="s3StageVpceDnsName")
    def s3_stage_vpce_dns_name(self) -> pulumi.Output[str]:
        """
        Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).
        """
        return pulumi.get(self, "s3_stage_vpce_dns_name")

    @property
    @pulumi.getter(name="searchPath")
    def search_path(self) -> pulumi.Output[str]:
        """
        Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).
        """
        return pulumi.get(self, "search_path")

    @property
    @pulumi.getter(name="showOutputs")
    def show_outputs(self) -> pulumi.Output[Sequence['outputs.ServiceUserShowOutput']]:
        """
        Outputs the result of `SHOW USER` for the given user.
        """
        return pulumi.get(self, "show_outputs")

    @property
    @pulumi.getter(name="simulatedDataSharingConsumer")
    def simulated_data_sharing_consumer(self) -> pulumi.Output[str]:
        """
        Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, see [Introduction to Secure Data Sharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with shares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).
        """
        return pulumi.get(self, "simulated_data_sharing_consumer")

    @property
    @pulumi.getter(name="statementQueuedTimeoutInSeconds")
    def statement_queued_timeout_in_seconds(self) -> pulumi.Output[int]:
        """
        Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).
        """
        return pulumi.get(self, "statement_queued_timeout_in_seconds")

    @property
    @pulumi.getter(name="statementTimeoutInSeconds")
    def statement_timeout_in_seconds(self) -> pulumi.Output[int]:
        """
        Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).
        """
        return pulumi.get(self, "statement_timeout_in_seconds")

    @property
    @pulumi.getter(name="strictJsonOutput")
    def strict_json_output(self) -> pulumi.Output[bool]:
        """
        This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).
        """
        return pulumi.get(self, "strict_json_output")

    @property
    @pulumi.getter(name="timeInputFormat")
    def time_input_format(self) -> pulumi.Output[str]:
        """
        Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).
        """
        return pulumi.get(self, "time_input_format")

    @property
    @pulumi.getter(name="timeOutputFormat")
    def time_output_format(self) -> pulumi.Output[str]:
        """
        Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).
        """
        return pulumi.get(self, "time_output_format")

    @property
    @pulumi.getter(name="timestampDayIsAlways24h")
    def timestamp_day_is_always24h(self) -> pulumi.Output[bool]:
        """
        Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).
        """
        return pulumi.get(self, "timestamp_day_is_always24h")

    @property
    @pulumi.getter(name="timestampInputFormat")
    def timestamp_input_format(self) -> pulumi.Output[str]:
        """
        Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).
        """
        return pulumi.get(self, "timestamp_input_format")

    @property
    @pulumi.getter(name="timestampLtzOutputFormat")
    def timestamp_ltz_output_format(self) -> pulumi.Output[str]:
        """
        Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).
        """
        return pulumi.get(self, "timestamp_ltz_output_format")

    @property
    @pulumi.getter(name="timestampNtzOutputFormat")
    def timestamp_ntz_output_format(self) -> pulumi.Output[str]:
        """
        Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).
        """
        return pulumi.get(self, "timestamp_ntz_output_format")

    @property
    @pulumi.getter(name="timestampOutputFormat")
    def timestamp_output_format(self) -> pulumi.Output[str]:
        """
        Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).
        """
        return pulumi.get(self, "timestamp_output_format")

    @property
    @pulumi.getter(name="timestampTypeMapping")
    def timestamp_type_mapping(self) -> pulumi.Output[str]:
        """
        Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).
        """
        return pulumi.get(self, "timestamp_type_mapping")

    @property
    @pulumi.getter(name="timestampTzOutputFormat")
    def timestamp_tz_output_format(self) -> pulumi.Output[str]:
        """
        Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).
        """
        return pulumi.get(self, "timestamp_tz_output_format")

    @property
    @pulumi.getter
    def timezone(self) -> pulumi.Output[str]:
        """
        Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).
        """
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="traceLevel")
    def trace_level(self) -> pulumi.Output[str]:
        """
        Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
        """
        return pulumi.get(self, "trace_level")

    @property
    @pulumi.getter(name="transactionAbortOnError")
    def transaction_abort_on_error(self) -> pulumi.Output[bool]:
        """
        Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).
        """
        return pulumi.get(self, "transaction_abort_on_error")

    @property
    @pulumi.getter(name="transactionDefaultIsolationLevel")
    def transaction_default_isolation_level(self) -> pulumi.Output[str]:
        """
        Specifies the isolation level for transactions in the user session. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).
        """
        return pulumi.get(self, "transaction_default_isolation_level")

    @property
    @pulumi.getter(name="twoDigitCenturyStart")
    def two_digit_century_start(self) -> pulumi.Output[int]:
        """
        Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).
        """
        return pulumi.get(self, "two_digit_century_start")

    @property
    @pulumi.getter(name="unsupportedDdlAction")
    def unsupported_ddl_action(self) -> pulumi.Output[str]:
        """
        Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).
        """
        return pulumi.get(self, "unsupported_ddl_action")

    @property
    @pulumi.getter(name="useCachedResult")
    def use_cached_result(self) -> pulumi.Output[bool]:
        """
        Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).
        """
        return pulumi.get(self, "use_cached_result")

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> pulumi.Output[str]:
        """
        Specifies a type for the user.
        """
        return pulumi.get(self, "user_type")

    @property
    @pulumi.getter(name="weekOfYearPolicy")
    def week_of_year_policy(self) -> pulumi.Output[int]:
        """
        Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).
        """
        return pulumi.get(self, "week_of_year_policy")

    @property
    @pulumi.getter(name="weekStart")
    def week_start(self) -> pulumi.Output[int]:
        """
        Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).
        """
        return pulumi.get(self, "week_start")

