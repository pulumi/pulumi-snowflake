// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * ```sh
 * $ pulumi import snowflake:index/authenticationPolicy:AuthenticationPolicy example '"<database_name>"."<schema_name>"."<authentication_policy_name>"'
 * ```
 */
export class AuthenticationPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AuthenticationPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthenticationPolicyState, opts?: pulumi.CustomResourceOptions): AuthenticationPolicy {
        return new AuthenticationPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/authenticationPolicy:AuthenticationPolicy';

    /**
     * Returns true if the given object is an instance of AuthenticationPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthenticationPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthenticationPolicy.__pulumiType;
    }

    /**
     * A list of authentication methods that are allowed during login. Valid values are (case-insensitive): `ALL` | `SAML` | `PASSWORD` | `OAUTH` | `KEYPAIR` | `PROGRAMMATIC_ACCESS_TOKEN` | `WORKLOAD_IDENTITY`.
     */
    declare public readonly authenticationMethods: pulumi.Output<string[] | undefined>;
    /**
     * A list of clients that can authenticate with Snowflake. If a client tries to connect, and the client is not one of the valid `clientTypes`, then the login attempt fails. Valid values are (case-insensitive): `ALL` | `SNOWFLAKE_UI` | `DRIVERS` | `SNOWSQL` | `SNOWFLAKE_CLI`. The `clientTypes` property of an authentication policy is a best effort method to block user logins based on specific clients. It should not be used as the sole control to establish a security boundary.
     */
    declare public readonly clientTypes: pulumi.Output<string[] | undefined>;
    /**
     * Specifies a comment for the authentication policy.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * The database in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    declare public readonly database: pulumi.Output<string>;
    /**
     * Outputs the result of `DESCRIBE AUTHENTICATION POLICY` for the given policy.
     */
    declare public /*out*/ readonly describeOutputs: pulumi.Output<outputs.AuthenticationPolicyDescribeOutput[]>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    declare public /*out*/ readonly fullyQualifiedName: pulumi.Output<string>;
    /**
     * A list of authentication methods that enforce multi-factor authentication (MFA) during login. Authentication methods not listed in this parameter do not prompt for multi-factor authentication. Allowed values are `ALL` | `SAML` | `PASSWORD`.
     *
     * @deprecated This field is deprecated and will be removed in the future. The new field `ENFORCE_MFA_ON_EXTERNAL_AUTHENTICATION` will be added in the next versions of the provider. Read our [BCR Migration Guide](https://github.com/snowflakedb/terraform-provider-snowflake/blob/main/SNOWFLAKE_BCR_MIGRATION_GUIDE.md#changes-in-authentication-policies) for more migration steps and more details.
     */
    declare public readonly mfaAuthenticationMethods: pulumi.Output<string[] | undefined>;
    /**
     * Determines whether a user must enroll in multi-factor authentication. Valid values are (case-insensitive): `REQUIRED` | `REQUIRED_PASSWORD_ONLY` | `OPTIONAL`. When REQUIRED is specified, Enforces users to enroll in MFA. If this value is used, then the `clientTypes` parameter must include `snowflakeUi`, because Snowsight is the only place users can enroll in multi-factor authentication (MFA).
     */
    declare public readonly mfaEnrollment: pulumi.Output<string | undefined>;
    /**
     * Specifies the multi-factor authentication (MFA) methods that users can use as a second factor of authentication.
     */
    declare public readonly mfaPolicy: pulumi.Output<outputs.AuthenticationPolicyMfaPolicy | undefined>;
    /**
     * Specifies the identifier for the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies the policy for programmatic access tokens.
     */
    declare public readonly patPolicy: pulumi.Output<outputs.AuthenticationPolicyPatPolicy | undefined>;
    /**
     * The schema in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    declare public readonly schema: pulumi.Output<string>;
    /**
     * A list of security integrations the authentication policy is associated with. This parameter has no effect when `saml` or `oauth` are not in the `authenticationMethods` list. All values in the `securityIntegrations` list must be compatible with the values in the `authenticationMethods` list. For example, if `securityIntegrations` contains a SAML security integration, and `authenticationMethods` contains OAUTH, then you cannot create the authentication policy. To allow all security integrations use `ALL` as parameter.
     */
    declare public readonly securityIntegrations: pulumi.Output<string[] | undefined>;
    /**
     * Outputs the result of `SHOW AUTHENTICATION POLICIES` for the given policy.
     */
    declare public /*out*/ readonly showOutputs: pulumi.Output<outputs.AuthenticationPolicyShowOutput[]>;
    /**
     * Specifies the policy for workload identity federation.
     */
    declare public readonly workloadIdentityPolicy: pulumi.Output<outputs.AuthenticationPolicyWorkloadIdentityPolicy | undefined>;

    /**
     * Create a AuthenticationPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthenticationPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthenticationPolicyArgs | AuthenticationPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthenticationPolicyState | undefined;
            resourceInputs["authenticationMethods"] = state?.authenticationMethods;
            resourceInputs["clientTypes"] = state?.clientTypes;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["database"] = state?.database;
            resourceInputs["describeOutputs"] = state?.describeOutputs;
            resourceInputs["fullyQualifiedName"] = state?.fullyQualifiedName;
            resourceInputs["mfaAuthenticationMethods"] = state?.mfaAuthenticationMethods;
            resourceInputs["mfaEnrollment"] = state?.mfaEnrollment;
            resourceInputs["mfaPolicy"] = state?.mfaPolicy;
            resourceInputs["name"] = state?.name;
            resourceInputs["patPolicy"] = state?.patPolicy;
            resourceInputs["schema"] = state?.schema;
            resourceInputs["securityIntegrations"] = state?.securityIntegrations;
            resourceInputs["showOutputs"] = state?.showOutputs;
            resourceInputs["workloadIdentityPolicy"] = state?.workloadIdentityPolicy;
        } else {
            const args = argsOrState as AuthenticationPolicyArgs | undefined;
            if (args?.database === undefined && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if (args?.schema === undefined && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            resourceInputs["authenticationMethods"] = args?.authenticationMethods;
            resourceInputs["clientTypes"] = args?.clientTypes;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["database"] = args?.database;
            resourceInputs["mfaAuthenticationMethods"] = args?.mfaAuthenticationMethods;
            resourceInputs["mfaEnrollment"] = args?.mfaEnrollment;
            resourceInputs["mfaPolicy"] = args?.mfaPolicy;
            resourceInputs["name"] = args?.name;
            resourceInputs["patPolicy"] = args?.patPolicy;
            resourceInputs["schema"] = args?.schema;
            resourceInputs["securityIntegrations"] = args?.securityIntegrations;
            resourceInputs["workloadIdentityPolicy"] = args?.workloadIdentityPolicy;
            resourceInputs["describeOutputs"] = undefined /*out*/;
            resourceInputs["fullyQualifiedName"] = undefined /*out*/;
            resourceInputs["showOutputs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuthenticationPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuthenticationPolicy resources.
 */
export interface AuthenticationPolicyState {
    /**
     * A list of authentication methods that are allowed during login. Valid values are (case-insensitive): `ALL` | `SAML` | `PASSWORD` | `OAUTH` | `KEYPAIR` | `PROGRAMMATIC_ACCESS_TOKEN` | `WORKLOAD_IDENTITY`.
     */
    authenticationMethods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of clients that can authenticate with Snowflake. If a client tries to connect, and the client is not one of the valid `clientTypes`, then the login attempt fails. Valid values are (case-insensitive): `ALL` | `SNOWFLAKE_UI` | `DRIVERS` | `SNOWSQL` | `SNOWFLAKE_CLI`. The `clientTypes` property of an authentication policy is a best effort method to block user logins based on specific clients. It should not be used as the sole control to establish a security boundary.
     */
    clientTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a comment for the authentication policy.
     */
    comment?: pulumi.Input<string>;
    /**
     * The database in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    database?: pulumi.Input<string>;
    /**
     * Outputs the result of `DESCRIBE AUTHENTICATION POLICY` for the given policy.
     */
    describeOutputs?: pulumi.Input<pulumi.Input<inputs.AuthenticationPolicyDescribeOutput>[]>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    fullyQualifiedName?: pulumi.Input<string>;
    /**
     * A list of authentication methods that enforce multi-factor authentication (MFA) during login. Authentication methods not listed in this parameter do not prompt for multi-factor authentication. Allowed values are `ALL` | `SAML` | `PASSWORD`.
     *
     * @deprecated This field is deprecated and will be removed in the future. The new field `ENFORCE_MFA_ON_EXTERNAL_AUTHENTICATION` will be added in the next versions of the provider. Read our [BCR Migration Guide](https://github.com/snowflakedb/terraform-provider-snowflake/blob/main/SNOWFLAKE_BCR_MIGRATION_GUIDE.md#changes-in-authentication-policies) for more migration steps and more details.
     */
    mfaAuthenticationMethods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Determines whether a user must enroll in multi-factor authentication. Valid values are (case-insensitive): `REQUIRED` | `REQUIRED_PASSWORD_ONLY` | `OPTIONAL`. When REQUIRED is specified, Enforces users to enroll in MFA. If this value is used, then the `clientTypes` parameter must include `snowflakeUi`, because Snowsight is the only place users can enroll in multi-factor authentication (MFA).
     */
    mfaEnrollment?: pulumi.Input<string>;
    /**
     * Specifies the multi-factor authentication (MFA) methods that users can use as a second factor of authentication.
     */
    mfaPolicy?: pulumi.Input<inputs.AuthenticationPolicyMfaPolicy>;
    /**
     * Specifies the identifier for the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the policy for programmatic access tokens.
     */
    patPolicy?: pulumi.Input<inputs.AuthenticationPolicyPatPolicy>;
    /**
     * The schema in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    schema?: pulumi.Input<string>;
    /**
     * A list of security integrations the authentication policy is associated with. This parameter has no effect when `saml` or `oauth` are not in the `authenticationMethods` list. All values in the `securityIntegrations` list must be compatible with the values in the `authenticationMethods` list. For example, if `securityIntegrations` contains a SAML security integration, and `authenticationMethods` contains OAUTH, then you cannot create the authentication policy. To allow all security integrations use `ALL` as parameter.
     */
    securityIntegrations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Outputs the result of `SHOW AUTHENTICATION POLICIES` for the given policy.
     */
    showOutputs?: pulumi.Input<pulumi.Input<inputs.AuthenticationPolicyShowOutput>[]>;
    /**
     * Specifies the policy for workload identity federation.
     */
    workloadIdentityPolicy?: pulumi.Input<inputs.AuthenticationPolicyWorkloadIdentityPolicy>;
}

/**
 * The set of arguments for constructing a AuthenticationPolicy resource.
 */
export interface AuthenticationPolicyArgs {
    /**
     * A list of authentication methods that are allowed during login. Valid values are (case-insensitive): `ALL` | `SAML` | `PASSWORD` | `OAUTH` | `KEYPAIR` | `PROGRAMMATIC_ACCESS_TOKEN` | `WORKLOAD_IDENTITY`.
     */
    authenticationMethods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of clients that can authenticate with Snowflake. If a client tries to connect, and the client is not one of the valid `clientTypes`, then the login attempt fails. Valid values are (case-insensitive): `ALL` | `SNOWFLAKE_UI` | `DRIVERS` | `SNOWSQL` | `SNOWFLAKE_CLI`. The `clientTypes` property of an authentication policy is a best effort method to block user logins based on specific clients. It should not be used as the sole control to establish a security boundary.
     */
    clientTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a comment for the authentication policy.
     */
    comment?: pulumi.Input<string>;
    /**
     * The database in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    database: pulumi.Input<string>;
    /**
     * A list of authentication methods that enforce multi-factor authentication (MFA) during login. Authentication methods not listed in this parameter do not prompt for multi-factor authentication. Allowed values are `ALL` | `SAML` | `PASSWORD`.
     *
     * @deprecated This field is deprecated and will be removed in the future. The new field `ENFORCE_MFA_ON_EXTERNAL_AUTHENTICATION` will be added in the next versions of the provider. Read our [BCR Migration Guide](https://github.com/snowflakedb/terraform-provider-snowflake/blob/main/SNOWFLAKE_BCR_MIGRATION_GUIDE.md#changes-in-authentication-policies) for more migration steps and more details.
     */
    mfaAuthenticationMethods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Determines whether a user must enroll in multi-factor authentication. Valid values are (case-insensitive): `REQUIRED` | `REQUIRED_PASSWORD_ONLY` | `OPTIONAL`. When REQUIRED is specified, Enforces users to enroll in MFA. If this value is used, then the `clientTypes` parameter must include `snowflakeUi`, because Snowsight is the only place users can enroll in multi-factor authentication (MFA).
     */
    mfaEnrollment?: pulumi.Input<string>;
    /**
     * Specifies the multi-factor authentication (MFA) methods that users can use as a second factor of authentication.
     */
    mfaPolicy?: pulumi.Input<inputs.AuthenticationPolicyMfaPolicy>;
    /**
     * Specifies the identifier for the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the policy for programmatic access tokens.
     */
    patPolicy?: pulumi.Input<inputs.AuthenticationPolicyPatPolicy>;
    /**
     * The schema in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    schema: pulumi.Input<string>;
    /**
     * A list of security integrations the authentication policy is associated with. This parameter has no effect when `saml` or `oauth` are not in the `authenticationMethods` list. All values in the `securityIntegrations` list must be compatible with the values in the `authenticationMethods` list. For example, if `securityIntegrations` contains a SAML security integration, and `authenticationMethods` contains OAUTH, then you cannot create the authentication policy. To allow all security integrations use `ALL` as parameter.
     */
    securityIntegrations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the policy for workload identity federation.
     */
    workloadIdentityPolicy?: pulumi.Input<inputs.AuthenticationPolicyWorkloadIdentityPolicy>;
}
