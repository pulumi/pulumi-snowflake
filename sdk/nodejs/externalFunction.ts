// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * format is <database_name>.<schema_name>.<external_function_name>(<arg types, separated with ','>)
 *
 * ```sh
 * $ pulumi import snowflake:index/externalFunction:ExternalFunction example 'dbName.schemaName.externalFunctionName(varchar, varchar, varchar)'
 * ```
 */
export class ExternalFunction extends pulumi.CustomResource {
    /**
     * Get an existing ExternalFunction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExternalFunctionState, opts?: pulumi.CustomResourceOptions): ExternalFunction {
        return new ExternalFunction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/externalFunction:ExternalFunction';

    /**
     * Returns true if the given object is an instance of ExternalFunction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExternalFunction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExternalFunction.__pulumiType;
    }

    /**
     * The name of the API integration object that should be used to authenticate the call to the proxy service.
     */
    declare public readonly apiIntegration: pulumi.Output<string>;
    /**
     * Specifies the arguments/inputs for the external function. These should correspond to the arguments that the remote service expects.
     */
    declare public readonly args: pulumi.Output<outputs.ExternalFunctionArg[] | undefined>;
    /**
     * (Default: `user-defined function`) A description of the external function.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * (Default: `AUTO`) If specified, the JSON payload is compressed when sent from Snowflake to the proxy service, and when sent back from the proxy service to Snowflake.
     */
    declare public readonly compression: pulumi.Output<string | undefined>;
    /**
     * Binds Snowflake context function results to HTTP headers.
     */
    declare public readonly contextHeaders: pulumi.Output<string[] | undefined>;
    /**
     * Date and time when the external function was created.
     */
    declare public /*out*/ readonly createdOn: pulumi.Output<string>;
    /**
     * The database in which to create the external function.
     */
    declare public readonly database: pulumi.Output<string>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    declare public /*out*/ readonly fullyQualifiedName: pulumi.Output<string>;
    /**
     * Allows users to specify key-value metadata that is sent with every request as HTTP headers.
     */
    declare public readonly headers: pulumi.Output<outputs.ExternalFunctionHeader[] | undefined>;
    /**
     * This specifies the maximum number of rows in each batch sent to the proxy service.
     */
    declare public readonly maxBatchRows: pulumi.Output<number | undefined>;
    /**
     * Specifies the identifier for the external function. The identifier can contain the schema name and database name, as well as the function name. The function's signature (name and argument data types) must be unique within the schema.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * (Default: `CALLED ON NULL INPUT`) Specifies the behavior of the external function when called with null inputs.
     */
    declare public readonly nullInputBehavior: pulumi.Output<string | undefined>;
    /**
     * This specifies the name of the request translator function
     */
    declare public readonly requestTranslator: pulumi.Output<string | undefined>;
    /**
     * This specifies the name of the response translator function.
     */
    declare public readonly responseTranslator: pulumi.Output<string | undefined>;
    /**
     * Specifies the behavior of the function when returning results
     */
    declare public readonly returnBehavior: pulumi.Output<string>;
    /**
     * (Default: `true`) Indicates whether the function can return NULL values (true) or must return only NON-NULL values (false).
     */
    declare public readonly returnNullAllowed: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the data type returned by the external function.
     */
    declare public readonly returnType: pulumi.Output<string>;
    /**
     * The schema in which to create the external function.
     */
    declare public readonly schema: pulumi.Output<string>;
    /**
     * This is the invocation URL of the proxy service and resource through which Snowflake calls the remote service.
     */
    declare public readonly urlOfProxyAndResource: pulumi.Output<string>;

    /**
     * Create a ExternalFunction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExternalFunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExternalFunctionArgs | ExternalFunctionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExternalFunctionState | undefined;
            resourceInputs["apiIntegration"] = state?.apiIntegration;
            resourceInputs["args"] = state?.args;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["compression"] = state?.compression;
            resourceInputs["contextHeaders"] = state?.contextHeaders;
            resourceInputs["createdOn"] = state?.createdOn;
            resourceInputs["database"] = state?.database;
            resourceInputs["fullyQualifiedName"] = state?.fullyQualifiedName;
            resourceInputs["headers"] = state?.headers;
            resourceInputs["maxBatchRows"] = state?.maxBatchRows;
            resourceInputs["name"] = state?.name;
            resourceInputs["nullInputBehavior"] = state?.nullInputBehavior;
            resourceInputs["requestTranslator"] = state?.requestTranslator;
            resourceInputs["responseTranslator"] = state?.responseTranslator;
            resourceInputs["returnBehavior"] = state?.returnBehavior;
            resourceInputs["returnNullAllowed"] = state?.returnNullAllowed;
            resourceInputs["returnType"] = state?.returnType;
            resourceInputs["schema"] = state?.schema;
            resourceInputs["urlOfProxyAndResource"] = state?.urlOfProxyAndResource;
        } else {
            const args = argsOrState as ExternalFunctionArgs | undefined;
            if (args?.apiIntegration === undefined && !opts.urn) {
                throw new Error("Missing required property 'apiIntegration'");
            }
            if (args?.database === undefined && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if (args?.returnBehavior === undefined && !opts.urn) {
                throw new Error("Missing required property 'returnBehavior'");
            }
            if (args?.returnType === undefined && !opts.urn) {
                throw new Error("Missing required property 'returnType'");
            }
            if (args?.schema === undefined && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            if (args?.urlOfProxyAndResource === undefined && !opts.urn) {
                throw new Error("Missing required property 'urlOfProxyAndResource'");
            }
            resourceInputs["apiIntegration"] = args?.apiIntegration;
            resourceInputs["args"] = args?.args;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["compression"] = args?.compression;
            resourceInputs["contextHeaders"] = args?.contextHeaders;
            resourceInputs["database"] = args?.database;
            resourceInputs["headers"] = args?.headers;
            resourceInputs["maxBatchRows"] = args?.maxBatchRows;
            resourceInputs["name"] = args?.name;
            resourceInputs["nullInputBehavior"] = args?.nullInputBehavior;
            resourceInputs["requestTranslator"] = args?.requestTranslator;
            resourceInputs["responseTranslator"] = args?.responseTranslator;
            resourceInputs["returnBehavior"] = args?.returnBehavior;
            resourceInputs["returnNullAllowed"] = args?.returnNullAllowed;
            resourceInputs["returnType"] = args?.returnType;
            resourceInputs["schema"] = args?.schema;
            resourceInputs["urlOfProxyAndResource"] = args?.urlOfProxyAndResource;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["fullyQualifiedName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExternalFunction.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExternalFunction resources.
 */
export interface ExternalFunctionState {
    /**
     * The name of the API integration object that should be used to authenticate the call to the proxy service.
     */
    apiIntegration?: pulumi.Input<string>;
    /**
     * Specifies the arguments/inputs for the external function. These should correspond to the arguments that the remote service expects.
     */
    args?: pulumi.Input<pulumi.Input<inputs.ExternalFunctionArg>[]>;
    /**
     * (Default: `user-defined function`) A description of the external function.
     */
    comment?: pulumi.Input<string>;
    /**
     * (Default: `AUTO`) If specified, the JSON payload is compressed when sent from Snowflake to the proxy service, and when sent back from the proxy service to Snowflake.
     */
    compression?: pulumi.Input<string>;
    /**
     * Binds Snowflake context function results to HTTP headers.
     */
    contextHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Date and time when the external function was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * The database in which to create the external function.
     */
    database?: pulumi.Input<string>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    fullyQualifiedName?: pulumi.Input<string>;
    /**
     * Allows users to specify key-value metadata that is sent with every request as HTTP headers.
     */
    headers?: pulumi.Input<pulumi.Input<inputs.ExternalFunctionHeader>[]>;
    /**
     * This specifies the maximum number of rows in each batch sent to the proxy service.
     */
    maxBatchRows?: pulumi.Input<number>;
    /**
     * Specifies the identifier for the external function. The identifier can contain the schema name and database name, as well as the function name. The function's signature (name and argument data types) must be unique within the schema.
     */
    name?: pulumi.Input<string>;
    /**
     * (Default: `CALLED ON NULL INPUT`) Specifies the behavior of the external function when called with null inputs.
     */
    nullInputBehavior?: pulumi.Input<string>;
    /**
     * This specifies the name of the request translator function
     */
    requestTranslator?: pulumi.Input<string>;
    /**
     * This specifies the name of the response translator function.
     */
    responseTranslator?: pulumi.Input<string>;
    /**
     * Specifies the behavior of the function when returning results
     */
    returnBehavior?: pulumi.Input<string>;
    /**
     * (Default: `true`) Indicates whether the function can return NULL values (true) or must return only NON-NULL values (false).
     */
    returnNullAllowed?: pulumi.Input<boolean>;
    /**
     * Specifies the data type returned by the external function.
     */
    returnType?: pulumi.Input<string>;
    /**
     * The schema in which to create the external function.
     */
    schema?: pulumi.Input<string>;
    /**
     * This is the invocation URL of the proxy service and resource through which Snowflake calls the remote service.
     */
    urlOfProxyAndResource?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ExternalFunction resource.
 */
export interface ExternalFunctionArgs {
    /**
     * The name of the API integration object that should be used to authenticate the call to the proxy service.
     */
    apiIntegration: pulumi.Input<string>;
    /**
     * Specifies the arguments/inputs for the external function. These should correspond to the arguments that the remote service expects.
     */
    args?: pulumi.Input<pulumi.Input<inputs.ExternalFunctionArg>[]>;
    /**
     * (Default: `user-defined function`) A description of the external function.
     */
    comment?: pulumi.Input<string>;
    /**
     * (Default: `AUTO`) If specified, the JSON payload is compressed when sent from Snowflake to the proxy service, and when sent back from the proxy service to Snowflake.
     */
    compression?: pulumi.Input<string>;
    /**
     * Binds Snowflake context function results to HTTP headers.
     */
    contextHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The database in which to create the external function.
     */
    database: pulumi.Input<string>;
    /**
     * Allows users to specify key-value metadata that is sent with every request as HTTP headers.
     */
    headers?: pulumi.Input<pulumi.Input<inputs.ExternalFunctionHeader>[]>;
    /**
     * This specifies the maximum number of rows in each batch sent to the proxy service.
     */
    maxBatchRows?: pulumi.Input<number>;
    /**
     * Specifies the identifier for the external function. The identifier can contain the schema name and database name, as well as the function name. The function's signature (name and argument data types) must be unique within the schema.
     */
    name?: pulumi.Input<string>;
    /**
     * (Default: `CALLED ON NULL INPUT`) Specifies the behavior of the external function when called with null inputs.
     */
    nullInputBehavior?: pulumi.Input<string>;
    /**
     * This specifies the name of the request translator function
     */
    requestTranslator?: pulumi.Input<string>;
    /**
     * This specifies the name of the response translator function.
     */
    responseTranslator?: pulumi.Input<string>;
    /**
     * Specifies the behavior of the function when returning results
     */
    returnBehavior: pulumi.Input<string>;
    /**
     * (Default: `true`) Indicates whether the function can return NULL values (true) or must return only NON-NULL values (false).
     */
    returnNullAllowed?: pulumi.Input<boolean>;
    /**
     * Specifies the data type returned by the external function.
     */
    returnType: pulumi.Input<string>;
    /**
     * The schema in which to create the external function.
     */
    schema: pulumi.Input<string>;
    /**
     * This is the invocation URL of the proxy service and resource through which Snowflake calls the remote service.
     */
    urlOfProxyAndResource: pulumi.Input<string>;
}
