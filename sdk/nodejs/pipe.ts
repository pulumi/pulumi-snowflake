// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * format is database name | schema name | pipe name
 *
 * ```sh
 * $ pulumi import snowflake:index/pipe:Pipe example 'dbName|schemaName|pipeName'
 * ```
 */
export class Pipe extends pulumi.CustomResource {
    /**
     * Get an existing Pipe resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PipeState, opts?: pulumi.CustomResourceOptions): Pipe {
        return new Pipe(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/pipe:Pipe';

    /**
     * Returns true if the given object is an instance of Pipe.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Pipe {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pipe.__pulumiType;
    }

    /**
     * (Default: `false`) Specifies a autoIngest param for the pipe.
     */
    declare public readonly autoIngest: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the Amazon Resource Name (ARN) for the SNS topic for your S3 bucket.
     */
    declare public readonly awsSnsTopicArn: pulumi.Output<string | undefined>;
    /**
     * Specifies a comment for the pipe.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * Specifies the copy statement for the pipe.
     */
    declare public readonly copyStatement: pulumi.Output<string>;
    /**
     * The database in which to create the pipe.
     */
    declare public readonly database: pulumi.Output<string>;
    /**
     * Specifies the name of the notification integration used for error notifications.
     */
    declare public readonly errorIntegration: pulumi.Output<string | undefined>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    declare public /*out*/ readonly fullyQualifiedName: pulumi.Output<string>;
    /**
     * Specifies an integration for the pipe.
     */
    declare public readonly integration: pulumi.Output<string | undefined>;
    /**
     * Specifies the identifier for the pipe; must be unique for the database and schema in which the pipe is created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Amazon Resource Name of the Amazon SQS queue for the stage named in the DEFINITION column.
     */
    declare public /*out*/ readonly notificationChannel: pulumi.Output<string>;
    /**
     * Name of the role that owns the pipe.
     */
    declare public /*out*/ readonly owner: pulumi.Output<string>;
    /**
     * The schema in which to create the pipe.
     */
    declare public readonly schema: pulumi.Output<string>;

    /**
     * Create a Pipe resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PipeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PipeArgs | PipeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PipeState | undefined;
            resourceInputs["autoIngest"] = state?.autoIngest;
            resourceInputs["awsSnsTopicArn"] = state?.awsSnsTopicArn;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["copyStatement"] = state?.copyStatement;
            resourceInputs["database"] = state?.database;
            resourceInputs["errorIntegration"] = state?.errorIntegration;
            resourceInputs["fullyQualifiedName"] = state?.fullyQualifiedName;
            resourceInputs["integration"] = state?.integration;
            resourceInputs["name"] = state?.name;
            resourceInputs["notificationChannel"] = state?.notificationChannel;
            resourceInputs["owner"] = state?.owner;
            resourceInputs["schema"] = state?.schema;
        } else {
            const args = argsOrState as PipeArgs | undefined;
            if (args?.copyStatement === undefined && !opts.urn) {
                throw new Error("Missing required property 'copyStatement'");
            }
            if (args?.database === undefined && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if (args?.schema === undefined && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            resourceInputs["autoIngest"] = args?.autoIngest;
            resourceInputs["awsSnsTopicArn"] = args?.awsSnsTopicArn;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["copyStatement"] = args?.copyStatement;
            resourceInputs["database"] = args?.database;
            resourceInputs["errorIntegration"] = args?.errorIntegration;
            resourceInputs["integration"] = args?.integration;
            resourceInputs["name"] = args?.name;
            resourceInputs["schema"] = args?.schema;
            resourceInputs["fullyQualifiedName"] = undefined /*out*/;
            resourceInputs["notificationChannel"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Pipe.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Pipe resources.
 */
export interface PipeState {
    /**
     * (Default: `false`) Specifies a autoIngest param for the pipe.
     */
    autoIngest?: pulumi.Input<boolean>;
    /**
     * Specifies the Amazon Resource Name (ARN) for the SNS topic for your S3 bucket.
     */
    awsSnsTopicArn?: pulumi.Input<string>;
    /**
     * Specifies a comment for the pipe.
     */
    comment?: pulumi.Input<string>;
    /**
     * Specifies the copy statement for the pipe.
     */
    copyStatement?: pulumi.Input<string>;
    /**
     * The database in which to create the pipe.
     */
    database?: pulumi.Input<string>;
    /**
     * Specifies the name of the notification integration used for error notifications.
     */
    errorIntegration?: pulumi.Input<string>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    fullyQualifiedName?: pulumi.Input<string>;
    /**
     * Specifies an integration for the pipe.
     */
    integration?: pulumi.Input<string>;
    /**
     * Specifies the identifier for the pipe; must be unique for the database and schema in which the pipe is created.
     */
    name?: pulumi.Input<string>;
    /**
     * Amazon Resource Name of the Amazon SQS queue for the stage named in the DEFINITION column.
     */
    notificationChannel?: pulumi.Input<string>;
    /**
     * Name of the role that owns the pipe.
     */
    owner?: pulumi.Input<string>;
    /**
     * The schema in which to create the pipe.
     */
    schema?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Pipe resource.
 */
export interface PipeArgs {
    /**
     * (Default: `false`) Specifies a autoIngest param for the pipe.
     */
    autoIngest?: pulumi.Input<boolean>;
    /**
     * Specifies the Amazon Resource Name (ARN) for the SNS topic for your S3 bucket.
     */
    awsSnsTopicArn?: pulumi.Input<string>;
    /**
     * Specifies a comment for the pipe.
     */
    comment?: pulumi.Input<string>;
    /**
     * Specifies the copy statement for the pipe.
     */
    copyStatement: pulumi.Input<string>;
    /**
     * The database in which to create the pipe.
     */
    database: pulumi.Input<string>;
    /**
     * Specifies the name of the notification integration used for error notifications.
     */
    errorIntegration?: pulumi.Input<string>;
    /**
     * Specifies an integration for the pipe.
     */
    integration?: pulumi.Input<string>;
    /**
     * Specifies the identifier for the pipe; must be unique for the database and schema in which the pipe is created.
     */
    name?: pulumi.Input<string>;
    /**
     * The schema in which to create the pipe.
     */
    schema: pulumi.Input<string>;
}
