// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * ```sh
 * $ pulumi import snowflake:index/dynamicTable:DynamicTable dt "mydb|myschema|product"
 * ```
 */
export class DynamicTable extends pulumi.CustomResource {
    /**
     * Get an existing DynamicTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DynamicTableState, opts?: pulumi.CustomResourceOptions): DynamicTable {
        return new DynamicTable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/dynamicTable:DynamicTable';

    /**
     * Returns true if the given object is an instance of DynamicTable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DynamicTable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DynamicTable.__pulumiType;
    }

    /**
     * Whether auto-clustering is enabled on the dynamic table. Not currently supported for dynamic tables.
     */
    declare public /*out*/ readonly automaticClustering: pulumi.Output<boolean>;
    /**
     * Number of bytes that will be scanned if the entire dynamic table is scanned in a query.
     */
    declare public /*out*/ readonly bytes: pulumi.Output<number>;
    /**
     * The clustering key for the dynamic table.
     */
    declare public /*out*/ readonly clusterBy: pulumi.Output<string>;
    /**
     * Specifies a comment for the dynamic table.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * Time when this dynamic table was created.
     */
    declare public /*out*/ readonly createdOn: pulumi.Output<string>;
    /**
     * Timestamp of the data in the base object(s) that is included in the dynamic table.
     */
    declare public /*out*/ readonly dataTimestamp: pulumi.Output<string>;
    /**
     * The database in which to create the dynamic table.
     */
    declare public readonly database: pulumi.Output<string>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    declare public /*out*/ readonly fullyQualifiedName: pulumi.Output<string>;
    /**
     * (Default: `ON_CREATE`) Initialize trigger for the dynamic table. Can only be set on creation. Available options are ON*CREATE and ON*SCHEDULE.
     */
    declare public readonly initialize: pulumi.Output<string | undefined>;
    /**
     * TRUE if the dynamic table has been cloned, else FALSE.
     */
    declare public /*out*/ readonly isClone: pulumi.Output<boolean>;
    /**
     * TRUE if the dynamic table is a replica. else FALSE.
     */
    declare public /*out*/ readonly isReplica: pulumi.Output<boolean>;
    /**
     * Timestamp of last suspension.
     */
    declare public /*out*/ readonly lastSuspendedOn: pulumi.Output<string>;
    /**
     * Specifies the identifier (i.e. name) for the dynamic table; must be unique for the schema in which the dynamic table is created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * (Default: `false`) Specifies whether to replace the dynamic table if it already exists.
     */
    declare public readonly orReplace: pulumi.Output<boolean | undefined>;
    /**
     * Role that owns the dynamic table.
     */
    declare public /*out*/ readonly owner: pulumi.Output<string>;
    /**
     * Specifies the query to use to populate the dynamic table.
     */
    declare public readonly query: pulumi.Output<string>;
    /**
     * (Default: `AUTO`) INCREMENTAL to use incremental refreshes, FULL to recompute the whole table on every refresh, or AUTO to let Snowflake decide.
     */
    declare public readonly refreshMode: pulumi.Output<string | undefined>;
    /**
     * Explanation for why FULL refresh mode was chosen. NULL if refresh mode is not FULL.
     */
    declare public /*out*/ readonly refreshModeReason: pulumi.Output<string>;
    /**
     * Number of rows in the table.
     */
    declare public /*out*/ readonly rows: pulumi.Output<number>;
    /**
     * Displays ACTIVE for dynamic tables that are actively scheduling refreshes and SUSPENDED for suspended dynamic tables.
     */
    declare public /*out*/ readonly schedulingState: pulumi.Output<string>;
    /**
     * The schema in which to create the dynamic table.
     */
    declare public readonly schema: pulumi.Output<string>;
    /**
     * Specifies the target lag time for the dynamic table.
     */
    declare public readonly targetLag: pulumi.Output<outputs.DynamicTableTargetLag>;
    /**
     * The warehouse in which to create the dynamic table.
     */
    declare public readonly warehouse: pulumi.Output<string>;

    /**
     * Create a DynamicTable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DynamicTableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DynamicTableArgs | DynamicTableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DynamicTableState | undefined;
            resourceInputs["automaticClustering"] = state?.automaticClustering;
            resourceInputs["bytes"] = state?.bytes;
            resourceInputs["clusterBy"] = state?.clusterBy;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["createdOn"] = state?.createdOn;
            resourceInputs["dataTimestamp"] = state?.dataTimestamp;
            resourceInputs["database"] = state?.database;
            resourceInputs["fullyQualifiedName"] = state?.fullyQualifiedName;
            resourceInputs["initialize"] = state?.initialize;
            resourceInputs["isClone"] = state?.isClone;
            resourceInputs["isReplica"] = state?.isReplica;
            resourceInputs["lastSuspendedOn"] = state?.lastSuspendedOn;
            resourceInputs["name"] = state?.name;
            resourceInputs["orReplace"] = state?.orReplace;
            resourceInputs["owner"] = state?.owner;
            resourceInputs["query"] = state?.query;
            resourceInputs["refreshMode"] = state?.refreshMode;
            resourceInputs["refreshModeReason"] = state?.refreshModeReason;
            resourceInputs["rows"] = state?.rows;
            resourceInputs["schedulingState"] = state?.schedulingState;
            resourceInputs["schema"] = state?.schema;
            resourceInputs["targetLag"] = state?.targetLag;
            resourceInputs["warehouse"] = state?.warehouse;
        } else {
            const args = argsOrState as DynamicTableArgs | undefined;
            if (args?.database === undefined && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if (args?.query === undefined && !opts.urn) {
                throw new Error("Missing required property 'query'");
            }
            if (args?.schema === undefined && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            if (args?.targetLag === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetLag'");
            }
            if (args?.warehouse === undefined && !opts.urn) {
                throw new Error("Missing required property 'warehouse'");
            }
            resourceInputs["comment"] = args?.comment;
            resourceInputs["database"] = args?.database;
            resourceInputs["initialize"] = args?.initialize;
            resourceInputs["name"] = args?.name;
            resourceInputs["orReplace"] = args?.orReplace;
            resourceInputs["query"] = args?.query;
            resourceInputs["refreshMode"] = args?.refreshMode;
            resourceInputs["schema"] = args?.schema;
            resourceInputs["targetLag"] = args?.targetLag;
            resourceInputs["warehouse"] = args?.warehouse;
            resourceInputs["automaticClustering"] = undefined /*out*/;
            resourceInputs["bytes"] = undefined /*out*/;
            resourceInputs["clusterBy"] = undefined /*out*/;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["dataTimestamp"] = undefined /*out*/;
            resourceInputs["fullyQualifiedName"] = undefined /*out*/;
            resourceInputs["isClone"] = undefined /*out*/;
            resourceInputs["isReplica"] = undefined /*out*/;
            resourceInputs["lastSuspendedOn"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["refreshModeReason"] = undefined /*out*/;
            resourceInputs["rows"] = undefined /*out*/;
            resourceInputs["schedulingState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DynamicTable.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DynamicTable resources.
 */
export interface DynamicTableState {
    /**
     * Whether auto-clustering is enabled on the dynamic table. Not currently supported for dynamic tables.
     */
    automaticClustering?: pulumi.Input<boolean>;
    /**
     * Number of bytes that will be scanned if the entire dynamic table is scanned in a query.
     */
    bytes?: pulumi.Input<number>;
    /**
     * The clustering key for the dynamic table.
     */
    clusterBy?: pulumi.Input<string>;
    /**
     * Specifies a comment for the dynamic table.
     */
    comment?: pulumi.Input<string>;
    /**
     * Time when this dynamic table was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * Timestamp of the data in the base object(s) that is included in the dynamic table.
     */
    dataTimestamp?: pulumi.Input<string>;
    /**
     * The database in which to create the dynamic table.
     */
    database?: pulumi.Input<string>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    fullyQualifiedName?: pulumi.Input<string>;
    /**
     * (Default: `ON_CREATE`) Initialize trigger for the dynamic table. Can only be set on creation. Available options are ON*CREATE and ON*SCHEDULE.
     */
    initialize?: pulumi.Input<string>;
    /**
     * TRUE if the dynamic table has been cloned, else FALSE.
     */
    isClone?: pulumi.Input<boolean>;
    /**
     * TRUE if the dynamic table is a replica. else FALSE.
     */
    isReplica?: pulumi.Input<boolean>;
    /**
     * Timestamp of last suspension.
     */
    lastSuspendedOn?: pulumi.Input<string>;
    /**
     * Specifies the identifier (i.e. name) for the dynamic table; must be unique for the schema in which the dynamic table is created.
     */
    name?: pulumi.Input<string>;
    /**
     * (Default: `false`) Specifies whether to replace the dynamic table if it already exists.
     */
    orReplace?: pulumi.Input<boolean>;
    /**
     * Role that owns the dynamic table.
     */
    owner?: pulumi.Input<string>;
    /**
     * Specifies the query to use to populate the dynamic table.
     */
    query?: pulumi.Input<string>;
    /**
     * (Default: `AUTO`) INCREMENTAL to use incremental refreshes, FULL to recompute the whole table on every refresh, or AUTO to let Snowflake decide.
     */
    refreshMode?: pulumi.Input<string>;
    /**
     * Explanation for why FULL refresh mode was chosen. NULL if refresh mode is not FULL.
     */
    refreshModeReason?: pulumi.Input<string>;
    /**
     * Number of rows in the table.
     */
    rows?: pulumi.Input<number>;
    /**
     * Displays ACTIVE for dynamic tables that are actively scheduling refreshes and SUSPENDED for suspended dynamic tables.
     */
    schedulingState?: pulumi.Input<string>;
    /**
     * The schema in which to create the dynamic table.
     */
    schema?: pulumi.Input<string>;
    /**
     * Specifies the target lag time for the dynamic table.
     */
    targetLag?: pulumi.Input<inputs.DynamicTableTargetLag>;
    /**
     * The warehouse in which to create the dynamic table.
     */
    warehouse?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DynamicTable resource.
 */
export interface DynamicTableArgs {
    /**
     * Specifies a comment for the dynamic table.
     */
    comment?: pulumi.Input<string>;
    /**
     * The database in which to create the dynamic table.
     */
    database: pulumi.Input<string>;
    /**
     * (Default: `ON_CREATE`) Initialize trigger for the dynamic table. Can only be set on creation. Available options are ON*CREATE and ON*SCHEDULE.
     */
    initialize?: pulumi.Input<string>;
    /**
     * Specifies the identifier (i.e. name) for the dynamic table; must be unique for the schema in which the dynamic table is created.
     */
    name?: pulumi.Input<string>;
    /**
     * (Default: `false`) Specifies whether to replace the dynamic table if it already exists.
     */
    orReplace?: pulumi.Input<boolean>;
    /**
     * Specifies the query to use to populate the dynamic table.
     */
    query: pulumi.Input<string>;
    /**
     * (Default: `AUTO`) INCREMENTAL to use incremental refreshes, FULL to recompute the whole table on every refresh, or AUTO to let Snowflake decide.
     */
    refreshMode?: pulumi.Input<string>;
    /**
     * The schema in which to create the dynamic table.
     */
    schema: pulumi.Input<string>;
    /**
     * Specifies the target lag time for the dynamic table.
     */
    targetLag: pulumi.Input<inputs.DynamicTableTargetLag>;
    /**
     * The warehouse in which to create the dynamic table.
     */
    warehouse: pulumi.Input<string>;
}
