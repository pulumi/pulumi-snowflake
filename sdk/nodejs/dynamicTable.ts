// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as snowflake from "@pulumi/snowflake";
 *
 * // https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#examples
 * const dt = new snowflake.DynamicTable("dt", {
 *     name: "product",
 *     database: "mydb",
 *     schema: "myschema",
 *     targetLag: {
 *         maximumDuration: "20 minutes",
 *     },
 *     warehouse: "mywh",
 *     query: "SELECT product_id, product_name FROM \"mydb\".\"myschema\".\"staging_table\"",
 *     comment: "example comment",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import snowflake:index/dynamicTable:DynamicTable dt "mydb|myschema|product"
 * ```
 */
export class DynamicTable extends pulumi.CustomResource {
    /**
     * Get an existing DynamicTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DynamicTableState, opts?: pulumi.CustomResourceOptions): DynamicTable {
        return new DynamicTable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/dynamicTable:DynamicTable';

    /**
     * Returns true if the given object is an instance of DynamicTable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DynamicTable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DynamicTable.__pulumiType;
    }

    /**
     * Whether auto-clustering is enabled on the dynamic table. Not currently supported for dynamic tables.
     */
    public /*out*/ readonly automaticClustering!: pulumi.Output<boolean>;
    /**
     * Number of bytes that will be scanned if the entire dynamic table is scanned in a query.
     */
    public /*out*/ readonly bytes!: pulumi.Output<number>;
    /**
     * The clustering key for the dynamic table.
     */
    public /*out*/ readonly clusterBy!: pulumi.Output<string>;
    /**
     * Specifies a comment for the dynamic table.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Time when this dynamic table was created.
     */
    public /*out*/ readonly createdOn!: pulumi.Output<string>;
    /**
     * Timestamp of the data in the base object(s) that is included in the dynamic table.
     */
    public /*out*/ readonly dataTimestamp!: pulumi.Output<string>;
    /**
     * The database in which to create the dynamic table.
     */
    public readonly database!: pulumi.Output<string>;
    /**
     * Initialize trigger for the dynamic table. Can only be set on creation. Available options are ON*CREATE and ON*SCHEDULE.
     */
    public readonly initialize!: pulumi.Output<string | undefined>;
    /**
     * TRUE if the dynamic table has been cloned, else FALSE.
     */
    public /*out*/ readonly isClone!: pulumi.Output<boolean>;
    /**
     * TRUE if the dynamic table is a replica. else FALSE.
     */
    public /*out*/ readonly isReplica!: pulumi.Output<boolean>;
    /**
     * Timestamp of last suspension.
     */
    public /*out*/ readonly lastSuspendedOn!: pulumi.Output<string>;
    /**
     * Specifies the identifier (i.e. name) for the dynamic table; must be unique for the schema in which the dynamic table is created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies whether to replace the dynamic table if it already exists.
     */
    public readonly orReplace!: pulumi.Output<boolean | undefined>;
    /**
     * Role that owns the dynamic table.
     */
    public /*out*/ readonly owner!: pulumi.Output<string>;
    /**
     * Specifies the query to use to populate the dynamic table.
     */
    public readonly query!: pulumi.Output<string>;
    /**
     * INCREMENTAL to use incremental refreshes, FULL to recompute the whole table on every refresh, or AUTO to let Snowflake decide.
     */
    public readonly refreshMode!: pulumi.Output<string | undefined>;
    /**
     * Explanation for why FULL refresh mode was chosen. NULL if refresh mode is not FULL.
     */
    public /*out*/ readonly refreshModeReason!: pulumi.Output<string>;
    /**
     * Number of rows in the table.
     */
    public /*out*/ readonly rows!: pulumi.Output<number>;
    /**
     * Displays ACTIVE for dynamic tables that are actively scheduling refreshes and SUSPENDED for suspended dynamic tables.
     */
    public /*out*/ readonly schedulingState!: pulumi.Output<string>;
    /**
     * The schema in which to create the dynamic table.
     */
    public readonly schema!: pulumi.Output<string>;
    /**
     * Specifies the target lag time for the dynamic table.
     */
    public readonly targetLag!: pulumi.Output<outputs.DynamicTableTargetLag>;
    /**
     * The warehouse in which to create the dynamic table.
     */
    public readonly warehouse!: pulumi.Output<string>;

    /**
     * Create a DynamicTable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DynamicTableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DynamicTableArgs | DynamicTableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DynamicTableState | undefined;
            resourceInputs["automaticClustering"] = state ? state.automaticClustering : undefined;
            resourceInputs["bytes"] = state ? state.bytes : undefined;
            resourceInputs["clusterBy"] = state ? state.clusterBy : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["dataTimestamp"] = state ? state.dataTimestamp : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["initialize"] = state ? state.initialize : undefined;
            resourceInputs["isClone"] = state ? state.isClone : undefined;
            resourceInputs["isReplica"] = state ? state.isReplica : undefined;
            resourceInputs["lastSuspendedOn"] = state ? state.lastSuspendedOn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orReplace"] = state ? state.orReplace : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["query"] = state ? state.query : undefined;
            resourceInputs["refreshMode"] = state ? state.refreshMode : undefined;
            resourceInputs["refreshModeReason"] = state ? state.refreshModeReason : undefined;
            resourceInputs["rows"] = state ? state.rows : undefined;
            resourceInputs["schedulingState"] = state ? state.schedulingState : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["targetLag"] = state ? state.targetLag : undefined;
            resourceInputs["warehouse"] = state ? state.warehouse : undefined;
        } else {
            const args = argsOrState as DynamicTableArgs | undefined;
            if ((!args || args.database === undefined) && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if ((!args || args.query === undefined) && !opts.urn) {
                throw new Error("Missing required property 'query'");
            }
            if ((!args || args.schema === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            if ((!args || args.targetLag === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetLag'");
            }
            if ((!args || args.warehouse === undefined) && !opts.urn) {
                throw new Error("Missing required property 'warehouse'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["initialize"] = args ? args.initialize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orReplace"] = args ? args.orReplace : undefined;
            resourceInputs["query"] = args ? args.query : undefined;
            resourceInputs["refreshMode"] = args ? args.refreshMode : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["targetLag"] = args ? args.targetLag : undefined;
            resourceInputs["warehouse"] = args ? args.warehouse : undefined;
            resourceInputs["automaticClustering"] = undefined /*out*/;
            resourceInputs["bytes"] = undefined /*out*/;
            resourceInputs["clusterBy"] = undefined /*out*/;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["dataTimestamp"] = undefined /*out*/;
            resourceInputs["isClone"] = undefined /*out*/;
            resourceInputs["isReplica"] = undefined /*out*/;
            resourceInputs["lastSuspendedOn"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["refreshModeReason"] = undefined /*out*/;
            resourceInputs["rows"] = undefined /*out*/;
            resourceInputs["schedulingState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DynamicTable.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DynamicTable resources.
 */
export interface DynamicTableState {
    /**
     * Whether auto-clustering is enabled on the dynamic table. Not currently supported for dynamic tables.
     */
    automaticClustering?: pulumi.Input<boolean>;
    /**
     * Number of bytes that will be scanned if the entire dynamic table is scanned in a query.
     */
    bytes?: pulumi.Input<number>;
    /**
     * The clustering key for the dynamic table.
     */
    clusterBy?: pulumi.Input<string>;
    /**
     * Specifies a comment for the dynamic table.
     */
    comment?: pulumi.Input<string>;
    /**
     * Time when this dynamic table was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * Timestamp of the data in the base object(s) that is included in the dynamic table.
     */
    dataTimestamp?: pulumi.Input<string>;
    /**
     * The database in which to create the dynamic table.
     */
    database?: pulumi.Input<string>;
    /**
     * Initialize trigger for the dynamic table. Can only be set on creation. Available options are ON*CREATE and ON*SCHEDULE.
     */
    initialize?: pulumi.Input<string>;
    /**
     * TRUE if the dynamic table has been cloned, else FALSE.
     */
    isClone?: pulumi.Input<boolean>;
    /**
     * TRUE if the dynamic table is a replica. else FALSE.
     */
    isReplica?: pulumi.Input<boolean>;
    /**
     * Timestamp of last suspension.
     */
    lastSuspendedOn?: pulumi.Input<string>;
    /**
     * Specifies the identifier (i.e. name) for the dynamic table; must be unique for the schema in which the dynamic table is created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies whether to replace the dynamic table if it already exists.
     */
    orReplace?: pulumi.Input<boolean>;
    /**
     * Role that owns the dynamic table.
     */
    owner?: pulumi.Input<string>;
    /**
     * Specifies the query to use to populate the dynamic table.
     */
    query?: pulumi.Input<string>;
    /**
     * INCREMENTAL to use incremental refreshes, FULL to recompute the whole table on every refresh, or AUTO to let Snowflake decide.
     */
    refreshMode?: pulumi.Input<string>;
    /**
     * Explanation for why FULL refresh mode was chosen. NULL if refresh mode is not FULL.
     */
    refreshModeReason?: pulumi.Input<string>;
    /**
     * Number of rows in the table.
     */
    rows?: pulumi.Input<number>;
    /**
     * Displays ACTIVE for dynamic tables that are actively scheduling refreshes and SUSPENDED for suspended dynamic tables.
     */
    schedulingState?: pulumi.Input<string>;
    /**
     * The schema in which to create the dynamic table.
     */
    schema?: pulumi.Input<string>;
    /**
     * Specifies the target lag time for the dynamic table.
     */
    targetLag?: pulumi.Input<inputs.DynamicTableTargetLag>;
    /**
     * The warehouse in which to create the dynamic table.
     */
    warehouse?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DynamicTable resource.
 */
export interface DynamicTableArgs {
    /**
     * Specifies a comment for the dynamic table.
     */
    comment?: pulumi.Input<string>;
    /**
     * The database in which to create the dynamic table.
     */
    database: pulumi.Input<string>;
    /**
     * Initialize trigger for the dynamic table. Can only be set on creation. Available options are ON*CREATE and ON*SCHEDULE.
     */
    initialize?: pulumi.Input<string>;
    /**
     * Specifies the identifier (i.e. name) for the dynamic table; must be unique for the schema in which the dynamic table is created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies whether to replace the dynamic table if it already exists.
     */
    orReplace?: pulumi.Input<boolean>;
    /**
     * Specifies the query to use to populate the dynamic table.
     */
    query: pulumi.Input<string>;
    /**
     * INCREMENTAL to use incremental refreshes, FULL to recompute the whole table on every refresh, or AUTO to let Snowflake decide.
     */
    refreshMode?: pulumi.Input<string>;
    /**
     * The schema in which to create the dynamic table.
     */
    schema: pulumi.Input<string>;
    /**
     * Specifies the target lag time for the dynamic table.
     */
    targetLag: pulumi.Input<inputs.DynamicTableTargetLag>;
    /**
     * The warehouse in which to create the dynamic table.
     */
    warehouse: pulumi.Input<string>;
}
