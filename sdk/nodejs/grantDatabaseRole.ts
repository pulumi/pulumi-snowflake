// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as snowflake from "@pulumi/snowflake";
 *
 * //#################################
 * //## grant database role to account role
 * //#################################
 * const databaseRoleDatabaseRole = new snowflake.DatabaseRole("databaseRoleDatabaseRole", {database: _var.database});
 * const parentRole = new snowflake.Role("parentRole", {});
 * const grantDatabaseRole = new snowflake.GrantDatabaseRole("grantDatabaseRole", {
 *     databaseRoleName: pulumi.interpolate`"${_var.database}"."${databaseRoleDatabaseRole.name}"`,
 *     parentRoleName: parentRole.name,
 * });
 * //#################################
 * //## grant database role to database role
 * //#################################
 * const databaseRoleIndex_databaseRoleDatabaseRole = new snowflake.DatabaseRole("databaseRoleIndex/databaseRoleDatabaseRole", {database: _var.database});
 * const parentDatabaseRole = new snowflake.DatabaseRole("parentDatabaseRole", {database: _var.database});
 * const index_grantDatabaseRoleGrantDatabaseRole = new snowflake.GrantDatabaseRole("index/grantDatabaseRoleGrantDatabaseRole", {
 *     databaseRoleName: pulumi.interpolate`"${_var.database}"."${databaseRoleDatabaseRole.name}"`,
 *     parentDatabaseRoleName: pulumi.interpolate`"${_var.database}"."${parentDatabaseRole.name}"`,
 * });
 * //#################################
 * //## grant database role to share
 * //#################################
 * const snowflakeIndex_grantDatabaseRoleGrantDatabaseRole = new snowflake.GrantDatabaseRole("snowflakeIndex/grantDatabaseRoleGrantDatabaseRole", {
 *     databaseRoleName: pulumi.interpolate`"${_var.database}"."${databaseRoleDatabaseRole.name}"`,
 *     shareName: snowflake_share.share.name,
 * });
 * ```
 *
 * ## Import
 *
 * format is database_role_name (string) | object_type (ROLE|DATABASE ROLE|SHARE) | grantee_name (string)
 *
 * ```sh
 * $ pulumi import snowflake:index/grantDatabaseRole:GrantDatabaseRole \"test_db_role\"|ROLE|\"test_parent_role\""
 * ```
 */
export class GrantDatabaseRole extends pulumi.CustomResource {
    /**
     * Get an existing GrantDatabaseRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GrantDatabaseRoleState, opts?: pulumi.CustomResourceOptions): GrantDatabaseRole {
        return new GrantDatabaseRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/grantDatabaseRole:GrantDatabaseRole';

    /**
     * Returns true if the given object is an instance of GrantDatabaseRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GrantDatabaseRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GrantDatabaseRole.__pulumiType;
    }

    /**
     * The fully qualified name of the database role which will be granted to share or parent role.
     */
    public readonly databaseRoleName!: pulumi.Output<string>;
    /**
     * The fully qualified name of the parent database role which will create a parent-child relationship between the roles.
     */
    public readonly parentDatabaseRoleName!: pulumi.Output<string | undefined>;
    /**
     * The fully qualified name of the parent account role which will create a parent-child relationship between the roles.
     */
    public readonly parentRoleName!: pulumi.Output<string | undefined>;
    /**
     * The fully qualified name of the share on which privileges will be granted.
     */
    public readonly shareName!: pulumi.Output<string | undefined>;

    /**
     * Create a GrantDatabaseRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GrantDatabaseRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GrantDatabaseRoleArgs | GrantDatabaseRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GrantDatabaseRoleState | undefined;
            resourceInputs["databaseRoleName"] = state ? state.databaseRoleName : undefined;
            resourceInputs["parentDatabaseRoleName"] = state ? state.parentDatabaseRoleName : undefined;
            resourceInputs["parentRoleName"] = state ? state.parentRoleName : undefined;
            resourceInputs["shareName"] = state ? state.shareName : undefined;
        } else {
            const args = argsOrState as GrantDatabaseRoleArgs | undefined;
            if ((!args || args.databaseRoleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseRoleName'");
            }
            resourceInputs["databaseRoleName"] = args ? args.databaseRoleName : undefined;
            resourceInputs["parentDatabaseRoleName"] = args ? args.parentDatabaseRoleName : undefined;
            resourceInputs["parentRoleName"] = args ? args.parentRoleName : undefined;
            resourceInputs["shareName"] = args ? args.shareName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GrantDatabaseRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GrantDatabaseRole resources.
 */
export interface GrantDatabaseRoleState {
    /**
     * The fully qualified name of the database role which will be granted to share or parent role.
     */
    databaseRoleName?: pulumi.Input<string>;
    /**
     * The fully qualified name of the parent database role which will create a parent-child relationship between the roles.
     */
    parentDatabaseRoleName?: pulumi.Input<string>;
    /**
     * The fully qualified name of the parent account role which will create a parent-child relationship between the roles.
     */
    parentRoleName?: pulumi.Input<string>;
    /**
     * The fully qualified name of the share on which privileges will be granted.
     */
    shareName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GrantDatabaseRole resource.
 */
export interface GrantDatabaseRoleArgs {
    /**
     * The fully qualified name of the database role which will be granted to share or parent role.
     */
    databaseRoleName: pulumi.Input<string>;
    /**
     * The fully qualified name of the parent database role which will create a parent-child relationship between the roles.
     */
    parentDatabaseRoleName?: pulumi.Input<string>;
    /**
     * The fully qualified name of the parent account role which will create a parent-child relationship between the roles.
     */
    parentRoleName?: pulumi.Input<string>;
    /**
     * The fully qualified name of the share on which privileges will be granted.
     */
    shareName?: pulumi.Input<string>;
}
