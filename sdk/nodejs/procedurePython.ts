// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ProcedurePython extends pulumi.CustomResource {
    /**
     * Get an existing ProcedurePython resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProcedurePythonState, opts?: pulumi.CustomResourceOptions): ProcedurePython {
        return new ProcedurePython(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/procedurePython:ProcedurePython';

    /**
     * Returns true if the given object is an instance of ProcedurePython.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProcedurePython {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProcedurePython.__pulumiType;
    }

    /**
     * List of the arguments for the procedure. Consult the
     * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.
     */
    public readonly arguments!: pulumi.Output<outputs.ProcedurePythonArgument[] | undefined>;
    /**
     * Specifies a comment for the procedure.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `"`.
     */
    public readonly database!: pulumi.Output<string>;
    /**
     * Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL). For
     * more information, check [ENABLE_CONSOLE_OUTPUT
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
     */
    public readonly enableConsoleOutput!: pulumi.Output<boolean>;
    /**
     * Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored
     * procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the
     * statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights
     * procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights
     * procedure. For more information, see [Understanding caller’s rights and owner’s rights stored
     * procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are
     * (case-insensitive): `CALLER` | `OWNER`.
     */
    public readonly executeAs!: pulumi.Output<string | undefined>;
    /**
     * The names of [external access
     * integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
     * this procedure’s handler code to access external networks. An external access integration specifies [network
     * rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
     * [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
     * (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
     */
    public readonly externalAccessIntegrations!: pulumi.Output<string[] | undefined>;
    /**
     * Fully qualified name of the resource. For more information, see [object name
     * resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    public /*out*/ readonly fullyQualifiedName!: pulumi.Output<string>;
    /**
     * Use the name of the stored procedure’s function or method. This can differ depending on whether the code is in-line or
     * referenced at a stage. When the code is in-line, you can specify just the function name. When the code is imported from
     * a stage, specify the fully-qualified handler function name as `<module_name>.<function_name>`.
     */
    public readonly handler!: pulumi.Output<string>;
    /**
     * The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that
     * your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your
     * code depends on classes defined outside the stored procedure or resource files. If your stored procedure’s code will
     * be on a stage, you must also include a path to the module file your code is in. The IMPORTS definition cannot reference
     * variables from arguments that are passed into the stored procedure. Each file in the IMPORTS clause must have a unique
     * name, even if the files are in different subdirectories or different stages.
     */
    public readonly imports!: pulumi.Output<outputs.ProcedurePythonImport[] | undefined>;
    /**
     * Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive
     * Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure).
     * Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default"
     * there which means to use the Snowflake default for this value.
     */
    public readonly isSecure!: pulumi.Output<string | undefined>;
    /**
     * LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
     */
    public readonly logLevel!: pulumi.Output<string>;
    /**
     * METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
     */
    public readonly metricLevel!: pulumi.Output<string>;
    /**
     * The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created
     * because stored procedures are [identified and resolved by the combination of the name and argument
     * types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading).
     * Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON
     * NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
     */
    public readonly nullInputBehavior!: pulumi.Output<string | undefined>;
    /**
     * List of the names of packages deployed in Snowflake that should be included in the handler code’s execution
     * environment. The Snowpark package is required for stored procedures, but is specified in the `snowparkPackage`
     * attribute. For more information about Snowpark, see [Snowpark
     * API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
     */
    public readonly packages!: pulumi.Output<string[] | undefined>;
    /**
     * Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.
     */
    public /*out*/ readonly parameters!: pulumi.Output<outputs.ProcedurePythonParameter[]>;
    /**
     * Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are
     * added by the provider automatically; do not include them. The `procedureDefinition` value must be Python source code.
     * For more information, see [Python (using
     * Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-overview). To mitigate
     * permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases
     * where a change in case or run of whitespace is semantically significant.
     */
    public readonly procedureDefinition!: pulumi.Output<string | undefined>;
    /**
     * Specifies language for the procedure. Used to detect external changes.
     */
    public /*out*/ readonly procedureLanguage!: pulumi.Output<string>;
    /**
     * Specifies the type of the result returned by the stored procedure. For `<result_data_type>`, use the Snowflake data type
     * that corresponds to the type of the language that you are using (see [SQL-Python Data Type
     * Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-python-data-type-mappings)).
     * For `RETURNS TABLE ( [ colName col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the
     * returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run
     * time), you can omit the column names and types (i.e. `TABLE ()`).
     */
    public readonly returnType!: pulumi.Output<string>;
    /**
     * The language runtime version to use. Currently, the supported versions are: 3.9, 3.10, and 3.11.
     */
    public readonly runtimeVersion!: pulumi.Output<string>;
    /**
     * The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `"`.
     */
    public readonly schema!: pulumi.Output<string>;
    /**
     * Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
     * can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
     * specify here must be allowed by the [external access
     * integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
     * this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
     */
    public readonly secrets!: pulumi.Output<outputs.ProcedurePythonSecret[] | undefined>;
    /**
     * Outputs the result of `SHOW PROCEDURE` for the given procedure.
     */
    public /*out*/ readonly showOutputs!: pulumi.Output<outputs.ProcedurePythonShowOutput[]>;
    /**
     * The Snowpark package is required for stored procedures, so it must always be present. For more information about
     * Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
     */
    public readonly snowparkPackage!: pulumi.Output<string>;
    /**
     * Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
     */
    public readonly traceLevel!: pulumi.Output<string>;

    /**
     * Create a ProcedurePython resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProcedurePythonArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProcedurePythonArgs | ProcedurePythonState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProcedurePythonState | undefined;
            resourceInputs["arguments"] = state ? state.arguments : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["enableConsoleOutput"] = state ? state.enableConsoleOutput : undefined;
            resourceInputs["executeAs"] = state ? state.executeAs : undefined;
            resourceInputs["externalAccessIntegrations"] = state ? state.externalAccessIntegrations : undefined;
            resourceInputs["fullyQualifiedName"] = state ? state.fullyQualifiedName : undefined;
            resourceInputs["handler"] = state ? state.handler : undefined;
            resourceInputs["imports"] = state ? state.imports : undefined;
            resourceInputs["isSecure"] = state ? state.isSecure : undefined;
            resourceInputs["logLevel"] = state ? state.logLevel : undefined;
            resourceInputs["metricLevel"] = state ? state.metricLevel : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nullInputBehavior"] = state ? state.nullInputBehavior : undefined;
            resourceInputs["packages"] = state ? state.packages : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["procedureDefinition"] = state ? state.procedureDefinition : undefined;
            resourceInputs["procedureLanguage"] = state ? state.procedureLanguage : undefined;
            resourceInputs["returnType"] = state ? state.returnType : undefined;
            resourceInputs["runtimeVersion"] = state ? state.runtimeVersion : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["secrets"] = state ? state.secrets : undefined;
            resourceInputs["showOutputs"] = state ? state.showOutputs : undefined;
            resourceInputs["snowparkPackage"] = state ? state.snowparkPackage : undefined;
            resourceInputs["traceLevel"] = state ? state.traceLevel : undefined;
        } else {
            const args = argsOrState as ProcedurePythonArgs | undefined;
            if ((!args || args.database === undefined) && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if ((!args || args.handler === undefined) && !opts.urn) {
                throw new Error("Missing required property 'handler'");
            }
            if ((!args || args.returnType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'returnType'");
            }
            if ((!args || args.runtimeVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtimeVersion'");
            }
            if ((!args || args.schema === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            if ((!args || args.snowparkPackage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snowparkPackage'");
            }
            resourceInputs["arguments"] = args ? args.arguments : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["enableConsoleOutput"] = args ? args.enableConsoleOutput : undefined;
            resourceInputs["executeAs"] = args ? args.executeAs : undefined;
            resourceInputs["externalAccessIntegrations"] = args ? args.externalAccessIntegrations : undefined;
            resourceInputs["handler"] = args ? args.handler : undefined;
            resourceInputs["imports"] = args ? args.imports : undefined;
            resourceInputs["isSecure"] = args ? args.isSecure : undefined;
            resourceInputs["logLevel"] = args ? args.logLevel : undefined;
            resourceInputs["metricLevel"] = args ? args.metricLevel : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nullInputBehavior"] = args ? args.nullInputBehavior : undefined;
            resourceInputs["packages"] = args ? args.packages : undefined;
            resourceInputs["procedureDefinition"] = args ? args.procedureDefinition : undefined;
            resourceInputs["returnType"] = args ? args.returnType : undefined;
            resourceInputs["runtimeVersion"] = args ? args.runtimeVersion : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["secrets"] = args ? args.secrets : undefined;
            resourceInputs["snowparkPackage"] = args ? args.snowparkPackage : undefined;
            resourceInputs["traceLevel"] = args ? args.traceLevel : undefined;
            resourceInputs["fullyQualifiedName"] = undefined /*out*/;
            resourceInputs["parameters"] = undefined /*out*/;
            resourceInputs["procedureLanguage"] = undefined /*out*/;
            resourceInputs["showOutputs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProcedurePython.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProcedurePython resources.
 */
export interface ProcedurePythonState {
    /**
     * List of the arguments for the procedure. Consult the
     * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.
     */
    arguments?: pulumi.Input<pulumi.Input<inputs.ProcedurePythonArgument>[]>;
    /**
     * Specifies a comment for the procedure.
     */
    comment?: pulumi.Input<string>;
    /**
     * The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `"`.
     */
    database?: pulumi.Input<string>;
    /**
     * Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL). For
     * more information, check [ENABLE_CONSOLE_OUTPUT
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
     */
    enableConsoleOutput?: pulumi.Input<boolean>;
    /**
     * Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored
     * procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the
     * statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights
     * procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights
     * procedure. For more information, see [Understanding caller’s rights and owner’s rights stored
     * procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are
     * (case-insensitive): `CALLER` | `OWNER`.
     */
    executeAs?: pulumi.Input<string>;
    /**
     * The names of [external access
     * integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
     * this procedure’s handler code to access external networks. An external access integration specifies [network
     * rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
     * [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
     * (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
     */
    externalAccessIntegrations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Fully qualified name of the resource. For more information, see [object name
     * resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    fullyQualifiedName?: pulumi.Input<string>;
    /**
     * Use the name of the stored procedure’s function or method. This can differ depending on whether the code is in-line or
     * referenced at a stage. When the code is in-line, you can specify just the function name. When the code is imported from
     * a stage, specify the fully-qualified handler function name as `<module_name>.<function_name>`.
     */
    handler?: pulumi.Input<string>;
    /**
     * The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that
     * your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your
     * code depends on classes defined outside the stored procedure or resource files. If your stored procedure’s code will
     * be on a stage, you must also include a path to the module file your code is in. The IMPORTS definition cannot reference
     * variables from arguments that are passed into the stored procedure. Each file in the IMPORTS clause must have a unique
     * name, even if the files are in different subdirectories or different stages.
     */
    imports?: pulumi.Input<pulumi.Input<inputs.ProcedurePythonImport>[]>;
    /**
     * Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive
     * Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure).
     * Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default"
     * there which means to use the Snowflake default for this value.
     */
    isSecure?: pulumi.Input<string>;
    /**
     * LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
     */
    logLevel?: pulumi.Input<string>;
    /**
     * METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
     */
    metricLevel?: pulumi.Input<string>;
    /**
     * The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created
     * because stored procedures are [identified and resolved by the combination of the name and argument
     * types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading).
     * Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON
     * NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
     */
    nullInputBehavior?: pulumi.Input<string>;
    /**
     * List of the names of packages deployed in Snowflake that should be included in the handler code’s execution
     * environment. The Snowpark package is required for stored procedures, but is specified in the `snowparkPackage`
     * attribute. For more information about Snowpark, see [Snowpark
     * API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
     */
    packages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.
     */
    parameters?: pulumi.Input<pulumi.Input<inputs.ProcedurePythonParameter>[]>;
    /**
     * Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are
     * added by the provider automatically; do not include them. The `procedureDefinition` value must be Python source code.
     * For more information, see [Python (using
     * Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-overview). To mitigate
     * permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases
     * where a change in case or run of whitespace is semantically significant.
     */
    procedureDefinition?: pulumi.Input<string>;
    /**
     * Specifies language for the procedure. Used to detect external changes.
     */
    procedureLanguage?: pulumi.Input<string>;
    /**
     * Specifies the type of the result returned by the stored procedure. For `<result_data_type>`, use the Snowflake data type
     * that corresponds to the type of the language that you are using (see [SQL-Python Data Type
     * Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-python-data-type-mappings)).
     * For `RETURNS TABLE ( [ colName col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the
     * returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run
     * time), you can omit the column names and types (i.e. `TABLE ()`).
     */
    returnType?: pulumi.Input<string>;
    /**
     * The language runtime version to use. Currently, the supported versions are: 3.9, 3.10, and 3.11.
     */
    runtimeVersion?: pulumi.Input<string>;
    /**
     * The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `"`.
     */
    schema?: pulumi.Input<string>;
    /**
     * Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
     * can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
     * specify here must be allowed by the [external access
     * integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
     * this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
     */
    secrets?: pulumi.Input<pulumi.Input<inputs.ProcedurePythonSecret>[]>;
    /**
     * Outputs the result of `SHOW PROCEDURE` for the given procedure.
     */
    showOutputs?: pulumi.Input<pulumi.Input<inputs.ProcedurePythonShowOutput>[]>;
    /**
     * The Snowpark package is required for stored procedures, so it must always be present. For more information about
     * Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
     */
    snowparkPackage?: pulumi.Input<string>;
    /**
     * Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
     */
    traceLevel?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProcedurePython resource.
 */
export interface ProcedurePythonArgs {
    /**
     * List of the arguments for the procedure. Consult the
     * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.
     */
    arguments?: pulumi.Input<pulumi.Input<inputs.ProcedurePythonArgument>[]>;
    /**
     * Specifies a comment for the procedure.
     */
    comment?: pulumi.Input<string>;
    /**
     * The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `"`.
     */
    database: pulumi.Input<string>;
    /**
     * Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL). For
     * more information, check [ENABLE_CONSOLE_OUTPUT
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
     */
    enableConsoleOutput?: pulumi.Input<boolean>;
    /**
     * Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored
     * procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the
     * statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights
     * procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights
     * procedure. For more information, see [Understanding caller’s rights and owner’s rights stored
     * procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are
     * (case-insensitive): `CALLER` | `OWNER`.
     */
    executeAs?: pulumi.Input<string>;
    /**
     * The names of [external access
     * integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
     * this procedure’s handler code to access external networks. An external access integration specifies [network
     * rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
     * [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
     * (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
     */
    externalAccessIntegrations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Use the name of the stored procedure’s function or method. This can differ depending on whether the code is in-line or
     * referenced at a stage. When the code is in-line, you can specify just the function name. When the code is imported from
     * a stage, specify the fully-qualified handler function name as `<module_name>.<function_name>`.
     */
    handler: pulumi.Input<string>;
    /**
     * The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that
     * your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your
     * code depends on classes defined outside the stored procedure or resource files. If your stored procedure’s code will
     * be on a stage, you must also include a path to the module file your code is in. The IMPORTS definition cannot reference
     * variables from arguments that are passed into the stored procedure. Each file in the IMPORTS clause must have a unique
     * name, even if the files are in different subdirectories or different stages.
     */
    imports?: pulumi.Input<pulumi.Input<inputs.ProcedurePythonImport>[]>;
    /**
     * Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive
     * Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure).
     * Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default"
     * there which means to use the Snowflake default for this value.
     */
    isSecure?: pulumi.Input<string>;
    /**
     * LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
     */
    logLevel?: pulumi.Input<string>;
    /**
     * METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
     */
    metricLevel?: pulumi.Input<string>;
    /**
     * The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created
     * because stored procedures are [identified and resolved by the combination of the name and argument
     * types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading).
     * Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON
     * NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
     */
    nullInputBehavior?: pulumi.Input<string>;
    /**
     * List of the names of packages deployed in Snowflake that should be included in the handler code’s execution
     * environment. The Snowpark package is required for stored procedures, but is specified in the `snowparkPackage`
     * attribute. For more information about Snowpark, see [Snowpark
     * API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
     */
    packages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are
     * added by the provider automatically; do not include them. The `procedureDefinition` value must be Python source code.
     * For more information, see [Python (using
     * Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-overview). To mitigate
     * permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases
     * where a change in case or run of whitespace is semantically significant.
     */
    procedureDefinition?: pulumi.Input<string>;
    /**
     * Specifies the type of the result returned by the stored procedure. For `<result_data_type>`, use the Snowflake data type
     * that corresponds to the type of the language that you are using (see [SQL-Python Data Type
     * Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-python-data-type-mappings)).
     * For `RETURNS TABLE ( [ colName col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the
     * returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run
     * time), you can omit the column names and types (i.e. `TABLE ()`).
     */
    returnType: pulumi.Input<string>;
    /**
     * The language runtime version to use. Currently, the supported versions are: 3.9, 3.10, and 3.11.
     */
    runtimeVersion: pulumi.Input<string>;
    /**
     * The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `"`.
     */
    schema: pulumi.Input<string>;
    /**
     * Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
     * can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
     * specify here must be allowed by the [external access
     * integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
     * this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
     */
    secrets?: pulumi.Input<pulumi.Input<inputs.ProcedurePythonSecret>[]>;
    /**
     * The Snowpark package is required for stored procedures, so it must always be present. For more information about
     * Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
     */
    snowparkPackage: pulumi.Input<string>;
    /**
     * Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
     */
    traceLevel?: pulumi.Input<string>;
}
