// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as snowflake from "@pulumi/snowflake";
 *
 * // list all grants on account
 * const grants = pulumi.output(snowflake.getGrants({
 *     grantsOn: {
 *         account: true,
 *     },
 * }));
 * // list all grants in database with name "tst"
 * const grants2 = pulumi.output(snowflake.getGrants({
 *     grantsOn: {
 *         objectName: "\"tst\"",
 *         objectType: "DATABASE",
 *     },
 * }));
 * // list all grants to role with name "ACCOUNTADMIN"
 * const grants3 = pulumi.output(snowflake.getGrants({
 *     grantsTo: {
 *         role: "ACCOUNTADMIN",
 *     },
 * }));
 * // list all grants of role with name "ACCOUNTADMIN"
 * const grants4 = pulumi.output(snowflake.getGrants({
 *     grantsOf: {
 *         role: "ACCOUNTADMIN",
 *     },
 * }));
 * // list all grants in database with name "tst"
 * const grants5 = pulumi.output(snowflake.getGrants({
 *     futureGrantsIn: {
 *         database: "\"tst\"",
 *     },
 * }));
 * // list all future grants in schema with name "mydatabase" and database with name "myschema"
 * const grants6 = pulumi.output(snowflake.getGrants({
 *     futureGrantsIn: {
 *         schema: {
 *             databaseName: "\"mydatabase\"",
 *             schemaName: "\"myschema\"",
 *         },
 *     },
 * }));
 * // list all future grants to role with name "ACCOUNTADMIN"
 * const grants7 = pulumi.output(snowflake.getGrants({
 *     futureGrantsTo: {
 *         role: "ACCOUNTADMIN",
 *     },
 * }));
 * ```
 */
export function getGrants(args?: GetGrantsArgs, opts?: pulumi.InvokeOptions): Promise<GetGrantsResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("snowflake:index/getGrants:getGrants", {
        "futureGrantsIn": args.futureGrantsIn,
        "futureGrantsTo": args.futureGrantsTo,
        "grantsOf": args.grantsOf,
        "grantsOn": args.grantsOn,
        "grantsTo": args.grantsTo,
    }, opts);
}

/**
 * A collection of arguments for invoking getGrants.
 */
export interface GetGrantsArgs {
    /**
     * Lists all privileges on new (i.e. future) objects
     */
    futureGrantsIn?: inputs.GetGrantsFutureGrantsIn;
    /**
     * Lists all privileges granted to the object on new (i.e. future) objects
     */
    futureGrantsTo?: inputs.GetGrantsFutureGrantsTo;
    /**
     * Lists all objects to which the given object has been granted
     */
    grantsOf?: inputs.GetGrantsGrantsOf;
    /**
     * Lists all privileges that have been granted on an object or account
     */
    grantsOn?: inputs.GetGrantsGrantsOn;
    /**
     * Lists all privileges granted to the object
     */
    grantsTo?: inputs.GetGrantsGrantsTo;
}

/**
 * A collection of values returned by getGrants.
 */
export interface GetGrantsResult {
    /**
     * Lists all privileges on new (i.e. future) objects
     */
    readonly futureGrantsIn?: outputs.GetGrantsFutureGrantsIn;
    /**
     * Lists all privileges granted to the object on new (i.e. future) objects
     */
    readonly futureGrantsTo?: outputs.GetGrantsFutureGrantsTo;
    /**
     * The list of grants
     */
    readonly grants: outputs.GetGrantsGrant[];
    /**
     * Lists all objects to which the given object has been granted
     */
    readonly grantsOf?: outputs.GetGrantsGrantsOf;
    /**
     * Lists all privileges that have been granted on an object or account
     */
    readonly grantsOn?: outputs.GetGrantsGrantsOn;
    /**
     * Lists all privileges granted to the object
     */
    readonly grantsTo?: outputs.GetGrantsGrantsTo;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
}

export function getGrantsOutput(args?: GetGrantsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGrantsResult> {
    return pulumi.output(args).apply(a => getGrants(a, opts))
}

/**
 * A collection of arguments for invoking getGrants.
 */
export interface GetGrantsOutputArgs {
    /**
     * Lists all privileges on new (i.e. future) objects
     */
    futureGrantsIn?: pulumi.Input<inputs.GetGrantsFutureGrantsInArgs>;
    /**
     * Lists all privileges granted to the object on new (i.e. future) objects
     */
    futureGrantsTo?: pulumi.Input<inputs.GetGrantsFutureGrantsToArgs>;
    /**
     * Lists all objects to which the given object has been granted
     */
    grantsOf?: pulumi.Input<inputs.GetGrantsGrantsOfArgs>;
    /**
     * Lists all privileges that have been granted on an object or account
     */
    grantsOn?: pulumi.Input<inputs.GetGrantsGrantsOnArgs>;
    /**
     * Lists all privileges granted to the object
     */
    grantsTo?: pulumi.Input<inputs.GetGrantsGrantsToArgs>;
}
