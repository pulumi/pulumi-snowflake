// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The provider type for the snowflake package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'snowflake';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * Specifies your Snowflake account name assigned by Snowflake. For information about account identifiers, see the [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#account-name). Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_ACCOUNT_NAME` environment variable.
     */
    declare public readonly accountName: pulumi.Output<string | undefined>;
    /**
     * Specifies the [authentication type](https://pkg.go.dev/github.com/snowflakedb/gosnowflake#AuthType) to use when connecting to Snowflake. Valid options are: `SNOWFLAKE` | `OAUTH` | `EXTERNALBROWSER` | `OKTA` | `SNOWFLAKE_JWT` | `TOKENACCESSOR` | `USERNAMEPASSWORDMFA` | `PROGRAMMATIC_ACCESS_TOKEN` | `OAUTH_CLIENT_CREDENTIALS` | `OAUTH_AUTHORIZATION_CODE` | `WORKLOAD_IDENTITY`. Can also be sourced from the `SNOWFLAKE_AUTHENTICATOR` environment variable.
     */
    declare public readonly authenticator: pulumi.Output<string | undefined>;
    /**
     * IP address for network checks. Can also be sourced from the `SNOWFLAKE_CLIENT_IP` environment variable.
     */
    declare public readonly clientIp: pulumi.Output<string | undefined>;
    /**
     * When true the MFA token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be sourced from the `SNOWFLAKE_CLIENT_REQUEST_MFA_TOKEN` environment variable.
     */
    declare public readonly clientRequestMfaToken: pulumi.Output<string | undefined>;
    /**
     * When true the ID token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be sourced from the `SNOWFLAKE_CLIENT_STORE_TEMPORARY_CREDENTIAL` environment variable.
     */
    declare public readonly clientStoreTemporaryCredential: pulumi.Output<string | undefined>;
    /**
     * Indicates whether console login should be disabled in the driver. Can also be sourced from the `SNOWFLAKE_DISABLE_CONSOLE_LOGIN` environment variable.
     */
    declare public readonly disableConsoleLogin: pulumi.Output<string | undefined>;
    /**
     * Specifies the logging level to be used by the driver. Valid options are: `trace` | `debug` | `info` | `print` | `warning` | `error` | `fatal` | `panic`. Can also be sourced from the `SNOWFLAKE_DRIVER_TRACING` environment variable.
     */
    declare public readonly driverTracing: pulumi.Output<string | undefined>;
    /**
     * Specifies a custom host value used by the driver for privatelink connections. Can also be sourced from the `SNOWFLAKE_HOST` environment variable.
     */
    declare public readonly host: pulumi.Output<string | undefined>;
    /**
     * Should retried request contain retry reason. Can also be sourced from the `SNOWFLAKE_INCLUDE_RETRY_REASON` environment variable.
     */
    declare public readonly includeRetryReason: pulumi.Output<string | undefined>;
    /**
     * Authorization URL of OAuth2 external IdP. See [Snowflake OAuth documentation](https://docs.snowflake.com/en/user-guide/oauth). Can also be sourced from the `SNOWFLAKE_OAUTH_AUTHORIZATION_URL` environment variable.
     */
    declare public readonly oauthAuthorizationUrl: pulumi.Output<string | undefined>;
    /**
     * Client id for OAuth2 external IdP. See [Snowflake OAuth documentation](https://docs.snowflake.com/en/user-guide/oauth). Can also be sourced from the `SNOWFLAKE_OAUTH_CLIENT_ID` environment variable.
     */
    declare public readonly oauthClientId: pulumi.Output<string | undefined>;
    /**
     * Client secret for OAuth2 external IdP. See [Snowflake OAuth documentation](https://docs.snowflake.com/en/user-guide/oauth). Can also be sourced from the `SNOWFLAKE_OAUTH_CLIENT_SECRET` environment variable.
     */
    declare public readonly oauthClientSecret: pulumi.Output<string | undefined>;
    /**
     * Redirect URI registered in IdP. See [Snowflake OAuth documentation](https://docs.snowflake.com/en/user-guide/oauth). Can also be sourced from the `SNOWFLAKE_OAUTH_REDIRECT_URI` environment variable.
     */
    declare public readonly oauthRedirectUri: pulumi.Output<string | undefined>;
    /**
     * Comma separated list of scopes. If empty it is derived from role. See [Snowflake OAuth documentation](https://docs.snowflake.com/en/user-guide/oauth). Can also be sourced from the `SNOWFLAKE_OAUTH_SCOPE` environment variable.
     */
    declare public readonly oauthScope: pulumi.Output<string | undefined>;
    /**
     * Token request URL of OAuth2 external IdP. See [Snowflake OAuth documentation](https://docs.snowflake.com/en/user-guide/oauth). Can also be sourced from the `SNOWFLAKE_OAUTH_TOKEN_REQUEST_URL` environment variable.
     */
    declare public readonly oauthTokenRequestUrl: pulumi.Output<string | undefined>;
    /**
     * True represents OCSP fail open mode. False represents OCSP fail closed mode. Fail open true by default. Can also be sourced from the `SNOWFLAKE_OCSP_FAIL_OPEN` environment variable.
     */
    declare public readonly ocspFailOpen: pulumi.Output<string | undefined>;
    /**
     * The URL of the Okta server. e.g. https://example.okta.com. Okta URL host needs to to have a suffix `okta.com`. Read more in Snowflake [docs](https://docs.snowflake.com/en/user-guide/oauth-okta). Can also be sourced from the `SNOWFLAKE_OKTA_URL` environment variable.
     */
    declare public readonly oktaUrl: pulumi.Output<string | undefined>;
    /**
     * Specifies your Snowflake organization name assigned by Snowflake. For information about account identifiers, see the [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#organization-name). Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_ORGANIZATION_NAME` environment variable.
     */
    declare public readonly organizationName: pulumi.Output<string | undefined>;
    /**
     * Specifies the passcode provided by Duo when using multi-factor authentication (MFA) for login. Can also be sourced from the `SNOWFLAKE_PASSCODE` environment variable.
     */
    declare public readonly passcode: pulumi.Output<string | undefined>;
    /**
     * Password for user + password or [token](https://docs.snowflake.com/en/user-guide/programmatic-access-tokens#generating-a-programmatic-access-token) for [PAT auth](https://docs.snowflake.com/en/user-guide/programmatic-access-tokens). Cannot be used with `privateKey` and `privateKeyPassphrase`. Can also be sourced from the `SNOWFLAKE_PASSWORD` environment variable.
     */
    declare public readonly password: pulumi.Output<string | undefined>;
    /**
     * Private Key for username+private-key auth. Cannot be used with `password`. Can also be sourced from the `SNOWFLAKE_PRIVATE_KEY` environment variable.
     */
    declare public readonly privateKey: pulumi.Output<string | undefined>;
    /**
     * Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and des-ede3-cbc. Can also be sourced from the `SNOWFLAKE_PRIVATE_KEY_PASSPHRASE` environment variable.
     */
    declare public readonly privateKeyPassphrase: pulumi.Output<string | undefined>;
    /**
     * Sets the profile to read from ~/.snowflake/config file. Can also be sourced from the `SNOWFLAKE_PROFILE` environment variable.
     */
    declare public readonly profile: pulumi.Output<string | undefined>;
    /**
     * A protocol used in the connection. Valid options are: `http` | `https`. Can also be sourced from the `SNOWFLAKE_PROTOCOL` environment variable.
     */
    declare public readonly protocol: pulumi.Output<string | undefined>;
    /**
     * Specifies the role to use by default for accessing Snowflake objects in the client session. Can also be sourced from the `SNOWFLAKE_ROLE` environment variable.
     */
    declare public readonly role: pulumi.Output<string | undefined>;
    /**
     * Sets temporary directory used by the driver for operations like encrypting, compressing etc. Can also be sourced from the `SNOWFLAKE_TMP_DIRECTORY_PATH` environment variable.
     */
    declare public readonly tmpDirectoryPath: pulumi.Output<string | undefined>;
    /**
     * Token to use for OAuth and other forms of token based auth. When this field is set here, or in the TOML file, the provider sets the `authenticator` to `OAUTH`. Optionally, set the `authenticator` field to the authenticator you want to use. Can also be sourced from the `SNOWFLAKE_TOKEN` environment variable.
     */
    declare public readonly token: pulumi.Output<string | undefined>;
    /**
     * Username. Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_USER` environment variable.
     */
    declare public readonly user: pulumi.Output<string | undefined>;
    /**
     * True by default. If false, disables the validation checks for Database, Schema, Warehouse and Role at the time a connection is established. Can also be sourced from the `SNOWFLAKE_VALIDATE_DEFAULT_PARAMETERS` environment variable.
     */
    declare public readonly validateDefaultParameters: pulumi.Output<string | undefined>;
    /**
     * Specifies the virtual warehouse to use by default for queries, loading, etc. in the client session. Can also be sourced from the `SNOWFLAKE_WAREHOUSE` environment variable.
     */
    declare public readonly warehouse: pulumi.Output<string | undefined>;
    /**
     * The resource to use for WIF authentication on Azure environment. Can also be sourced from the `SNOWFLAKE_WORKLOAD_IDENTITY_ENTRA_RESOURCE` environment variable.
     */
    declare public readonly workloadIdentityEntraResource: pulumi.Output<string | undefined>;
    /**
     * The workload identity provider to use for WIF authentication. Can also be sourced from the `SNOWFLAKE_WORKLOAD_IDENTITY_PROVIDER` environment variable.
     */
    declare public readonly workloadIdentityProvider: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            resourceInputs["accountName"] = args?.accountName;
            resourceInputs["authenticator"] = args?.authenticator;
            resourceInputs["clientIp"] = args?.clientIp;
            resourceInputs["clientRequestMfaToken"] = args?.clientRequestMfaToken;
            resourceInputs["clientStoreTemporaryCredential"] = args?.clientStoreTemporaryCredential;
            resourceInputs["clientTimeout"] = pulumi.output(args?.clientTimeout).apply(JSON.stringify);
            resourceInputs["disableConsoleLogin"] = args?.disableConsoleLogin;
            resourceInputs["disableQueryContextCache"] = pulumi.output(args?.disableQueryContextCache).apply(JSON.stringify);
            resourceInputs["disableTelemetry"] = pulumi.output(args?.disableTelemetry).apply(JSON.stringify);
            resourceInputs["driverTracing"] = args?.driverTracing;
            resourceInputs["enableSingleUseRefreshTokens"] = pulumi.output(args?.enableSingleUseRefreshTokens).apply(JSON.stringify);
            resourceInputs["experimentalFeaturesEnableds"] = pulumi.output(args?.experimentalFeaturesEnableds).apply(JSON.stringify);
            resourceInputs["externalBrowserTimeout"] = pulumi.output(args?.externalBrowserTimeout).apply(JSON.stringify);
            resourceInputs["host"] = (args?.host) ?? utilities.getEnv("SNOWFLAKE_HOST");
            resourceInputs["includeRetryReason"] = args?.includeRetryReason;
            resourceInputs["insecureMode"] = pulumi.output(args?.insecureMode).apply(JSON.stringify);
            resourceInputs["jwtClientTimeout"] = pulumi.output(args?.jwtClientTimeout).apply(JSON.stringify);
            resourceInputs["jwtExpireTimeout"] = pulumi.output(args?.jwtExpireTimeout).apply(JSON.stringify);
            resourceInputs["keepSessionAlive"] = pulumi.output(args?.keepSessionAlive).apply(JSON.stringify);
            resourceInputs["loginTimeout"] = pulumi.output(args?.loginTimeout).apply(JSON.stringify);
            resourceInputs["maxRetryCount"] = pulumi.output(args?.maxRetryCount).apply(JSON.stringify);
            resourceInputs["oauthAuthorizationUrl"] = args?.oauthAuthorizationUrl ? pulumi.secret(args.oauthAuthorizationUrl) : undefined;
            resourceInputs["oauthClientId"] = args?.oauthClientId ? pulumi.secret(args.oauthClientId) : undefined;
            resourceInputs["oauthClientSecret"] = args?.oauthClientSecret ? pulumi.secret(args.oauthClientSecret) : undefined;
            resourceInputs["oauthRedirectUri"] = args?.oauthRedirectUri ? pulumi.secret(args.oauthRedirectUri) : undefined;
            resourceInputs["oauthScope"] = args?.oauthScope;
            resourceInputs["oauthTokenRequestUrl"] = args?.oauthTokenRequestUrl ? pulumi.secret(args.oauthTokenRequestUrl) : undefined;
            resourceInputs["ocspFailOpen"] = args?.ocspFailOpen;
            resourceInputs["oktaUrl"] = args?.oktaUrl;
            resourceInputs["organizationName"] = args?.organizationName;
            resourceInputs["params"] = pulumi.output(args?.params).apply(JSON.stringify);
            resourceInputs["passcode"] = args?.passcode ? pulumi.secret(args.passcode) : undefined;
            resourceInputs["passcodeInPassword"] = pulumi.output(args?.passcodeInPassword).apply(JSON.stringify);
            resourceInputs["password"] = (args?.password ? pulumi.secret(args.password) : undefined) ?? utilities.getEnv("SNOWFLAKE_PASSWORD");
            resourceInputs["port"] = pulumi.output((args?.port) ?? utilities.getEnvNumber("SNOWFLAKE_PORT")).apply(JSON.stringify);
            resourceInputs["previewFeaturesEnabled"] = pulumi.output(args?.previewFeaturesEnabled).apply(JSON.stringify);
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["privateKeyPassphrase"] = (args?.privateKeyPassphrase ? pulumi.secret(args.privateKeyPassphrase) : undefined) ?? utilities.getEnv("SNOWFLAKE_PRIVATE_KEY_PASSPHRASE");
            resourceInputs["profile"] = args?.profile;
            resourceInputs["protocol"] = (args?.protocol) ?? utilities.getEnv("SNOWFLAKE_PROTOCOL");
            resourceInputs["requestTimeout"] = pulumi.output(args?.requestTimeout).apply(JSON.stringify);
            resourceInputs["role"] = (args?.role) ?? utilities.getEnv("SNOWFLAKE_ROLE");
            resourceInputs["skipTomlFilePermissionVerification"] = pulumi.output(args?.skipTomlFilePermissionVerification).apply(JSON.stringify);
            resourceInputs["tmpDirectoryPath"] = args?.tmpDirectoryPath;
            resourceInputs["token"] = args?.token ? pulumi.secret(args.token) : undefined;
            resourceInputs["tokenAccessor"] = pulumi.output(args?.tokenAccessor).apply(JSON.stringify);
            resourceInputs["useLegacyTomlFile"] = pulumi.output(args?.useLegacyTomlFile).apply(JSON.stringify);
            resourceInputs["user"] = args?.user;
            resourceInputs["validateDefaultParameters"] = args?.validateDefaultParameters;
            resourceInputs["warehouse"] = (args?.warehouse) ?? utilities.getEnv("SNOWFLAKE_WAREHOUSE");
            resourceInputs["workloadIdentityEntraResource"] = args?.workloadIdentityEntraResource;
            resourceInputs["workloadIdentityProvider"] = args?.workloadIdentityProvider;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["oauthAuthorizationUrl", "oauthClientId", "oauthClientSecret", "oauthRedirectUri", "oauthTokenRequestUrl", "passcode", "password", "privateKey", "privateKeyPassphrase", "token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts);
    }

    /**
     * This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
     */
    terraformConfig(): pulumi.Output<Provider.TerraformConfigResult> {
        return pulumi.runtime.call("pulumi:providers:snowflake/terraformConfig", {
            "__self__": this,
        }, this);
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * Specifies your Snowflake account name assigned by Snowflake. For information about account identifiers, see the [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#account-name). Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_ACCOUNT_NAME` environment variable.
     */
    accountName?: pulumi.Input<string>;
    /**
     * Specifies the [authentication type](https://pkg.go.dev/github.com/snowflakedb/gosnowflake#AuthType) to use when connecting to Snowflake. Valid options are: `SNOWFLAKE` | `OAUTH` | `EXTERNALBROWSER` | `OKTA` | `SNOWFLAKE_JWT` | `TOKENACCESSOR` | `USERNAMEPASSWORDMFA` | `PROGRAMMATIC_ACCESS_TOKEN` | `OAUTH_CLIENT_CREDENTIALS` | `OAUTH_AUTHORIZATION_CODE` | `WORKLOAD_IDENTITY`. Can also be sourced from the `SNOWFLAKE_AUTHENTICATOR` environment variable.
     */
    authenticator?: pulumi.Input<string>;
    /**
     * IP address for network checks. Can also be sourced from the `SNOWFLAKE_CLIENT_IP` environment variable.
     */
    clientIp?: pulumi.Input<string>;
    /**
     * When true the MFA token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be sourced from the `SNOWFLAKE_CLIENT_REQUEST_MFA_TOKEN` environment variable.
     */
    clientRequestMfaToken?: pulumi.Input<string>;
    /**
     * When true the ID token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be sourced from the `SNOWFLAKE_CLIENT_STORE_TEMPORARY_CREDENTIAL` environment variable.
     */
    clientStoreTemporaryCredential?: pulumi.Input<string>;
    /**
     * The timeout in seconds for the client to complete the authentication. Can also be sourced from the `SNOWFLAKE_CLIENT_TIMEOUT` environment variable.
     */
    clientTimeout?: pulumi.Input<number>;
    /**
     * Indicates whether console login should be disabled in the driver. Can also be sourced from the `SNOWFLAKE_DISABLE_CONSOLE_LOGIN` environment variable.
     */
    disableConsoleLogin?: pulumi.Input<string>;
    /**
     * Disables HTAP query context cache in the driver. Can also be sourced from the `SNOWFLAKE_DISABLE_QUERY_CONTEXT_CACHE` environment variable.
     */
    disableQueryContextCache?: pulumi.Input<boolean>;
    /**
     * Disables telemetry in the driver. Can also be sourced from the `DISABLE_TELEMETRY` environment variable.
     */
    disableTelemetry?: pulumi.Input<boolean>;
    /**
     * Specifies the logging level to be used by the driver. Valid options are: `trace` | `debug` | `info` | `print` | `warning` | `error` | `fatal` | `panic`. Can also be sourced from the `SNOWFLAKE_DRIVER_TRACING` environment variable.
     */
    driverTracing?: pulumi.Input<string>;
    /**
     * Enables single use refresh tokens for Snowflake IdP. Can also be sourced from the `SNOWFLAKE_ENABLE_SINGLE_USE_REFRESH_TOKENS` environment variable.
     */
    enableSingleUseRefreshTokens?: pulumi.Input<boolean>;
    /**
     * A list of experimental features. Similarly to preview features, they are not yet stable features of the provider. Enabling given experiment is still considered a preview feature, even when applied to the stable resource. These switches offer experiments altering the provider behavior. If the given experiment is successful, it can be considered an addition in the future provider versions. This field can not be set with environmental variables. Valid options are: `WAREHOUSE_SHOW_IMPROVED_PERFORMANCE`.
     */
    experimentalFeaturesEnableds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The timeout in seconds for the external browser to complete the authentication. Can also be sourced from the `SNOWFLAKE_EXTERNAL_BROWSER_TIMEOUT` environment variable.
     */
    externalBrowserTimeout?: pulumi.Input<number>;
    /**
     * Specifies a custom host value used by the driver for privatelink connections. Can also be sourced from the `SNOWFLAKE_HOST` environment variable.
     */
    host?: pulumi.Input<string>;
    /**
     * Should retried request contain retry reason. Can also be sourced from the `SNOWFLAKE_INCLUDE_RETRY_REASON` environment variable.
     */
    includeRetryReason?: pulumi.Input<string>;
    /**
     * If true, bypass the Online Certificate Status Protocol (OCSP) certificate revocation check. IMPORTANT: Change the default value for testing or emergency situations only. Can also be sourced from the `SNOWFLAKE_INSECURE_MODE` environment variable.
     */
    insecureMode?: pulumi.Input<boolean>;
    /**
     * The timeout in seconds for the JWT client to complete the authentication. Can also be sourced from the `SNOWFLAKE_JWT_CLIENT_TIMEOUT` environment variable.
     */
    jwtClientTimeout?: pulumi.Input<number>;
    /**
     * JWT expire after timeout in seconds. Can also be sourced from the `SNOWFLAKE_JWT_EXPIRE_TIMEOUT` environment variable.
     */
    jwtExpireTimeout?: pulumi.Input<number>;
    /**
     * Enables the session to persist even after the connection is closed. Can also be sourced from the `SNOWFLAKE_KEEP_SESSION_ALIVE` environment variable.
     */
    keepSessionAlive?: pulumi.Input<boolean>;
    /**
     * Login retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the `SNOWFLAKE_LOGIN_TIMEOUT` environment variable.
     */
    loginTimeout?: pulumi.Input<number>;
    /**
     * Specifies how many times non-periodic HTTP request can be retried by the driver. Can also be sourced from the `SNOWFLAKE_MAX_RETRY_COUNT` environment variable.
     */
    maxRetryCount?: pulumi.Input<number>;
    /**
     * Authorization URL of OAuth2 external IdP. See [Snowflake OAuth documentation](https://docs.snowflake.com/en/user-guide/oauth). Can also be sourced from the `SNOWFLAKE_OAUTH_AUTHORIZATION_URL` environment variable.
     */
    oauthAuthorizationUrl?: pulumi.Input<string>;
    /**
     * Client id for OAuth2 external IdP. See [Snowflake OAuth documentation](https://docs.snowflake.com/en/user-guide/oauth). Can also be sourced from the `SNOWFLAKE_OAUTH_CLIENT_ID` environment variable.
     */
    oauthClientId?: pulumi.Input<string>;
    /**
     * Client secret for OAuth2 external IdP. See [Snowflake OAuth documentation](https://docs.snowflake.com/en/user-guide/oauth). Can also be sourced from the `SNOWFLAKE_OAUTH_CLIENT_SECRET` environment variable.
     */
    oauthClientSecret?: pulumi.Input<string>;
    /**
     * Redirect URI registered in IdP. See [Snowflake OAuth documentation](https://docs.snowflake.com/en/user-guide/oauth). Can also be sourced from the `SNOWFLAKE_OAUTH_REDIRECT_URI` environment variable.
     */
    oauthRedirectUri?: pulumi.Input<string>;
    /**
     * Comma separated list of scopes. If empty it is derived from role. See [Snowflake OAuth documentation](https://docs.snowflake.com/en/user-guide/oauth). Can also be sourced from the `SNOWFLAKE_OAUTH_SCOPE` environment variable.
     */
    oauthScope?: pulumi.Input<string>;
    /**
     * Token request URL of OAuth2 external IdP. See [Snowflake OAuth documentation](https://docs.snowflake.com/en/user-guide/oauth). Can also be sourced from the `SNOWFLAKE_OAUTH_TOKEN_REQUEST_URL` environment variable.
     */
    oauthTokenRequestUrl?: pulumi.Input<string>;
    /**
     * True represents OCSP fail open mode. False represents OCSP fail closed mode. Fail open true by default. Can also be sourced from the `SNOWFLAKE_OCSP_FAIL_OPEN` environment variable.
     */
    ocspFailOpen?: pulumi.Input<string>;
    /**
     * The URL of the Okta server. e.g. https://example.okta.com. Okta URL host needs to to have a suffix `okta.com`. Read more in Snowflake [docs](https://docs.snowflake.com/en/user-guide/oauth-okta). Can also be sourced from the `SNOWFLAKE_OKTA_URL` environment variable.
     */
    oktaUrl?: pulumi.Input<string>;
    /**
     * Specifies your Snowflake organization name assigned by Snowflake. For information about account identifiers, see the [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#organization-name). Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_ORGANIZATION_NAME` environment variable.
     */
    organizationName?: pulumi.Input<string>;
    /**
     * Sets other connection (i.e. session) parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters). This field can not be set with environmental variables.
     */
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the passcode provided by Duo when using multi-factor authentication (MFA) for login. Can also be sourced from the `SNOWFLAKE_PASSCODE` environment variable.
     */
    passcode?: pulumi.Input<string>;
    /**
     * False by default. Set to true if the MFA passcode is embedded to the configured password. Can also be sourced from the `SNOWFLAKE_PASSCODE_IN_PASSWORD` environment variable.
     */
    passcodeInPassword?: pulumi.Input<boolean>;
    /**
     * Password for user + password or [token](https://docs.snowflake.com/en/user-guide/programmatic-access-tokens#generating-a-programmatic-access-token) for [PAT auth](https://docs.snowflake.com/en/user-guide/programmatic-access-tokens). Cannot be used with `privateKey` and `privateKeyPassphrase`. Can also be sourced from the `SNOWFLAKE_PASSWORD` environment variable.
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies a custom port value used by the driver for privatelink connections. Can also be sourced from the `SNOWFLAKE_PORT` environment variable.
     */
    port?: pulumi.Input<number>;
    previewFeaturesEnabled?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Private Key for username+private-key auth. Cannot be used with `password`. Can also be sourced from the `SNOWFLAKE_PRIVATE_KEY` environment variable.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and des-ede3-cbc. Can also be sourced from the `SNOWFLAKE_PRIVATE_KEY_PASSPHRASE` environment variable.
     */
    privateKeyPassphrase?: pulumi.Input<string>;
    /**
     * Sets the profile to read from ~/.snowflake/config file. Can also be sourced from the `SNOWFLAKE_PROFILE` environment variable.
     */
    profile?: pulumi.Input<string>;
    /**
     * A protocol used in the connection. Valid options are: `http` | `https`. Can also be sourced from the `SNOWFLAKE_PROTOCOL` environment variable.
     */
    protocol?: pulumi.Input<string>;
    /**
     * request retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the `SNOWFLAKE_REQUEST_TIMEOUT` environment variable.
     */
    requestTimeout?: pulumi.Input<number>;
    /**
     * Specifies the role to use by default for accessing Snowflake objects in the client session. Can also be sourced from the `SNOWFLAKE_ROLE` environment variable.
     */
    role?: pulumi.Input<string>;
    /**
     * False by default. Skips TOML configuration file permission verification. This flag has no effect on Windows systems, as the permissions are not checked on this platform. Instead of skipping the permissions verification, we recommend setting the proper privileges - see the section below. Can also be sourced from the `SNOWFLAKE_SKIP_TOML_FILE_PERMISSION_VERIFICATION` environment variable.
     */
    skipTomlFilePermissionVerification?: pulumi.Input<boolean>;
    /**
     * Sets temporary directory used by the driver for operations like encrypting, compressing etc. Can also be sourced from the `SNOWFLAKE_TMP_DIRECTORY_PATH` environment variable.
     */
    tmpDirectoryPath?: pulumi.Input<string>;
    /**
     * Token to use for OAuth and other forms of token based auth. When this field is set here, or in the TOML file, the provider sets the `authenticator` to `OAUTH`. Optionally, set the `authenticator` field to the authenticator you want to use. Can also be sourced from the `SNOWFLAKE_TOKEN` environment variable.
     */
    token?: pulumi.Input<string>;
    /**
     * If you are using the OAuth authentication flows, use the dedicated `authenticator` and `oauth...` fields instead. See our authentication methods guide for more information.
     */
    tokenAccessor?: pulumi.Input<inputs.ProviderTokenAccessor>;
    /**
     * False by default. When this is set to true, the provider expects the legacy TOML format. Otherwise, it expects the new format. See more in the section below Can also be sourced from the `SNOWFLAKE_USE_LEGACY_TOML_FILE` environment variable.
     */
    useLegacyTomlFile?: pulumi.Input<boolean>;
    /**
     * Username. Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_USER` environment variable.
     */
    user?: pulumi.Input<string>;
    /**
     * True by default. If false, disables the validation checks for Database, Schema, Warehouse and Role at the time a connection is established. Can also be sourced from the `SNOWFLAKE_VALIDATE_DEFAULT_PARAMETERS` environment variable.
     */
    validateDefaultParameters?: pulumi.Input<string>;
    /**
     * Specifies the virtual warehouse to use by default for queries, loading, etc. in the client session. Can also be sourced from the `SNOWFLAKE_WAREHOUSE` environment variable.
     */
    warehouse?: pulumi.Input<string>;
    /**
     * The resource to use for WIF authentication on Azure environment. Can also be sourced from the `SNOWFLAKE_WORKLOAD_IDENTITY_ENTRA_RESOURCE` environment variable.
     */
    workloadIdentityEntraResource?: pulumi.Input<string>;
    /**
     * The workload identity provider to use for WIF authentication. Can also be sourced from the `SNOWFLAKE_WORKLOAD_IDENTITY_PROVIDER` environment variable.
     */
    workloadIdentityProvider?: pulumi.Input<string>;
}

export namespace Provider {
    /**
     * The results of the Provider.terraformConfig method.
     */
    export interface TerraformConfigResult {
        readonly result: {[key: string]: any};
    }

}
