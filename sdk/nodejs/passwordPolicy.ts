// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * !> **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `previewFeaturesEnabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
 *
 * !> **Note** According to Snowflake [docs](https://docs.snowflake.com/en/sql-reference/sql/drop-password-policy#usage-notes), a password policy cannot be dropped successfully if it is currently assigned to another object. Currently, the provider does not unassign such objects automatically. Before dropping the resource, first unassign the policy from the relevant objects. See guide for more details.
 *
 * A password policy specifies the requirements that must be met to create and reset a password to authenticate to Snowflake.
 *
 * > **Note** If a field has a default value, it is shown next to the type in the schema.
 */
export class PasswordPolicy extends pulumi.CustomResource {
    /**
     * Get an existing PasswordPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PasswordPolicyState, opts?: pulumi.CustomResourceOptions): PasswordPolicy {
        return new PasswordPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/passwordPolicy:PasswordPolicy';

    /**
     * Returns true if the given object is an instance of PasswordPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PasswordPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PasswordPolicy.__pulumiType;
    }

    /**
     * Adds a comment or overwrites an existing comment for the password policy.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * The database this password policy belongs to.
     */
    declare public readonly database: pulumi.Output<string>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    declare public /*out*/ readonly fullyQualifiedName: pulumi.Output<string>;
    /**
     * (Default: `0`) Specifies the number of the most recent passwords that Snowflake stores. These stored passwords cannot be repeated when a user updates their password value. The current password value does not count towards the history. When you increase the history value, Snowflake saves the previous values. When you decrease the value, Snowflake saves the stored values up to that value that is set. For example, if the history value is 8 and you change the history value to 3, Snowflake stores the most recent 3 passwords and deletes the 5 older password values from the history. Default: 0 Max: 24
     */
    declare public readonly history: pulumi.Output<number | undefined>;
    /**
     * (Default: `false`) Prevent overwriting a previous password policy with the same name.
     */
    declare public readonly ifNotExists: pulumi.Output<boolean | undefined>;
    /**
     * (Default: `15`) Specifies the number of minutes the user account will be locked after exhausting the designated number of password retries (i.e. PASSWORD*MAX*RETRIES). Supported range: 1 to 999, inclusive. Default: 15
     */
    declare public readonly lockoutTimeMins: pulumi.Output<number | undefined>;
    /**
     * (Default: `90`) Specifies the maximum number of days before the password must be changed. Supported range: 0 to 999, inclusive. A value of zero (i.e. 0) indicates that the password does not need to be changed. Snowflake does not recommend choosing this value for a default account-level password policy or for any user-level policy. Instead, choose a value that meets your internal security guidelines. Default: 90, which means the password must be changed every 90 days.
     */
    declare public readonly maxAgeDays: pulumi.Output<number | undefined>;
    /**
     * (Default: `256`) Specifies the maximum number of characters the password must contain. This number must be greater than or equal to the sum of PASSWORD*MIN*LENGTH, PASSWORD*MIN*UPPER*CASE*CHARS, and PASSWORD*MIN*LOWER*CASE*CHARS. Supported range: 8 to 256, inclusive. Default: 256
     */
    declare public readonly maxLength: pulumi.Output<number | undefined>;
    /**
     * (Default: `5`) Specifies the maximum number of attempts to enter a password before being locked out. Supported range: 1 to 10, inclusive. Default: 5
     */
    declare public readonly maxRetries: pulumi.Output<number | undefined>;
    /**
     * (Default: `0`) Specifies the number of days the user must wait before a recently changed password can be changed again. Supported range: 0 to 999, inclusive. Default: 0
     */
    declare public readonly minAgeDays: pulumi.Output<number | undefined>;
    /**
     * (Default: `8`) Specifies the minimum number of characters the password must contain. Supported range: 8 to 256, inclusive. Default: 8
     */
    declare public readonly minLength: pulumi.Output<number | undefined>;
    /**
     * (Default: `1`) Specifies the minimum number of lowercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1
     */
    declare public readonly minLowerCaseChars: pulumi.Output<number | undefined>;
    /**
     * (Default: `1`) Specifies the minimum number of numeric characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1
     */
    declare public readonly minNumericChars: pulumi.Output<number | undefined>;
    /**
     * (Default: `1`) Specifies the minimum number of special characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1
     */
    declare public readonly minSpecialChars: pulumi.Output<number | undefined>;
    /**
     * (Default: `1`) Specifies the minimum number of uppercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1
     */
    declare public readonly minUpperCaseChars: pulumi.Output<number | undefined>;
    /**
     * Identifier for the password policy; must be unique for your account.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * (Default: `false`) Whether to override a previous password policy with the same name.
     */
    declare public readonly orReplace: pulumi.Output<boolean | undefined>;
    /**
     * The schema this password policy belongs to.
     */
    declare public readonly schema: pulumi.Output<string>;

    /**
     * Create a PasswordPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PasswordPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PasswordPolicyArgs | PasswordPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PasswordPolicyState | undefined;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["database"] = state?.database;
            resourceInputs["fullyQualifiedName"] = state?.fullyQualifiedName;
            resourceInputs["history"] = state?.history;
            resourceInputs["ifNotExists"] = state?.ifNotExists;
            resourceInputs["lockoutTimeMins"] = state?.lockoutTimeMins;
            resourceInputs["maxAgeDays"] = state?.maxAgeDays;
            resourceInputs["maxLength"] = state?.maxLength;
            resourceInputs["maxRetries"] = state?.maxRetries;
            resourceInputs["minAgeDays"] = state?.minAgeDays;
            resourceInputs["minLength"] = state?.minLength;
            resourceInputs["minLowerCaseChars"] = state?.minLowerCaseChars;
            resourceInputs["minNumericChars"] = state?.minNumericChars;
            resourceInputs["minSpecialChars"] = state?.minSpecialChars;
            resourceInputs["minUpperCaseChars"] = state?.minUpperCaseChars;
            resourceInputs["name"] = state?.name;
            resourceInputs["orReplace"] = state?.orReplace;
            resourceInputs["schema"] = state?.schema;
        } else {
            const args = argsOrState as PasswordPolicyArgs | undefined;
            if (args?.database === undefined && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if (args?.schema === undefined && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            resourceInputs["comment"] = args?.comment;
            resourceInputs["database"] = args?.database;
            resourceInputs["history"] = args?.history;
            resourceInputs["ifNotExists"] = args?.ifNotExists;
            resourceInputs["lockoutTimeMins"] = args?.lockoutTimeMins;
            resourceInputs["maxAgeDays"] = args?.maxAgeDays;
            resourceInputs["maxLength"] = args?.maxLength;
            resourceInputs["maxRetries"] = args?.maxRetries;
            resourceInputs["minAgeDays"] = args?.minAgeDays;
            resourceInputs["minLength"] = args?.minLength;
            resourceInputs["minLowerCaseChars"] = args?.minLowerCaseChars;
            resourceInputs["minNumericChars"] = args?.minNumericChars;
            resourceInputs["minSpecialChars"] = args?.minSpecialChars;
            resourceInputs["minUpperCaseChars"] = args?.minUpperCaseChars;
            resourceInputs["name"] = args?.name;
            resourceInputs["orReplace"] = args?.orReplace;
            resourceInputs["schema"] = args?.schema;
            resourceInputs["fullyQualifiedName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PasswordPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PasswordPolicy resources.
 */
export interface PasswordPolicyState {
    /**
     * Adds a comment or overwrites an existing comment for the password policy.
     */
    comment?: pulumi.Input<string>;
    /**
     * The database this password policy belongs to.
     */
    database?: pulumi.Input<string>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    fullyQualifiedName?: pulumi.Input<string>;
    /**
     * (Default: `0`) Specifies the number of the most recent passwords that Snowflake stores. These stored passwords cannot be repeated when a user updates their password value. The current password value does not count towards the history. When you increase the history value, Snowflake saves the previous values. When you decrease the value, Snowflake saves the stored values up to that value that is set. For example, if the history value is 8 and you change the history value to 3, Snowflake stores the most recent 3 passwords and deletes the 5 older password values from the history. Default: 0 Max: 24
     */
    history?: pulumi.Input<number>;
    /**
     * (Default: `false`) Prevent overwriting a previous password policy with the same name.
     */
    ifNotExists?: pulumi.Input<boolean>;
    /**
     * (Default: `15`) Specifies the number of minutes the user account will be locked after exhausting the designated number of password retries (i.e. PASSWORD*MAX*RETRIES). Supported range: 1 to 999, inclusive. Default: 15
     */
    lockoutTimeMins?: pulumi.Input<number>;
    /**
     * (Default: `90`) Specifies the maximum number of days before the password must be changed. Supported range: 0 to 999, inclusive. A value of zero (i.e. 0) indicates that the password does not need to be changed. Snowflake does not recommend choosing this value for a default account-level password policy or for any user-level policy. Instead, choose a value that meets your internal security guidelines. Default: 90, which means the password must be changed every 90 days.
     */
    maxAgeDays?: pulumi.Input<number>;
    /**
     * (Default: `256`) Specifies the maximum number of characters the password must contain. This number must be greater than or equal to the sum of PASSWORD*MIN*LENGTH, PASSWORD*MIN*UPPER*CASE*CHARS, and PASSWORD*MIN*LOWER*CASE*CHARS. Supported range: 8 to 256, inclusive. Default: 256
     */
    maxLength?: pulumi.Input<number>;
    /**
     * (Default: `5`) Specifies the maximum number of attempts to enter a password before being locked out. Supported range: 1 to 10, inclusive. Default: 5
     */
    maxRetries?: pulumi.Input<number>;
    /**
     * (Default: `0`) Specifies the number of days the user must wait before a recently changed password can be changed again. Supported range: 0 to 999, inclusive. Default: 0
     */
    minAgeDays?: pulumi.Input<number>;
    /**
     * (Default: `8`) Specifies the minimum number of characters the password must contain. Supported range: 8 to 256, inclusive. Default: 8
     */
    minLength?: pulumi.Input<number>;
    /**
     * (Default: `1`) Specifies the minimum number of lowercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1
     */
    minLowerCaseChars?: pulumi.Input<number>;
    /**
     * (Default: `1`) Specifies the minimum number of numeric characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1
     */
    minNumericChars?: pulumi.Input<number>;
    /**
     * (Default: `1`) Specifies the minimum number of special characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1
     */
    minSpecialChars?: pulumi.Input<number>;
    /**
     * (Default: `1`) Specifies the minimum number of uppercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1
     */
    minUpperCaseChars?: pulumi.Input<number>;
    /**
     * Identifier for the password policy; must be unique for your account.
     */
    name?: pulumi.Input<string>;
    /**
     * (Default: `false`) Whether to override a previous password policy with the same name.
     */
    orReplace?: pulumi.Input<boolean>;
    /**
     * The schema this password policy belongs to.
     */
    schema?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PasswordPolicy resource.
 */
export interface PasswordPolicyArgs {
    /**
     * Adds a comment or overwrites an existing comment for the password policy.
     */
    comment?: pulumi.Input<string>;
    /**
     * The database this password policy belongs to.
     */
    database: pulumi.Input<string>;
    /**
     * (Default: `0`) Specifies the number of the most recent passwords that Snowflake stores. These stored passwords cannot be repeated when a user updates their password value. The current password value does not count towards the history. When you increase the history value, Snowflake saves the previous values. When you decrease the value, Snowflake saves the stored values up to that value that is set. For example, if the history value is 8 and you change the history value to 3, Snowflake stores the most recent 3 passwords and deletes the 5 older password values from the history. Default: 0 Max: 24
     */
    history?: pulumi.Input<number>;
    /**
     * (Default: `false`) Prevent overwriting a previous password policy with the same name.
     */
    ifNotExists?: pulumi.Input<boolean>;
    /**
     * (Default: `15`) Specifies the number of minutes the user account will be locked after exhausting the designated number of password retries (i.e. PASSWORD*MAX*RETRIES). Supported range: 1 to 999, inclusive. Default: 15
     */
    lockoutTimeMins?: pulumi.Input<number>;
    /**
     * (Default: `90`) Specifies the maximum number of days before the password must be changed. Supported range: 0 to 999, inclusive. A value of zero (i.e. 0) indicates that the password does not need to be changed. Snowflake does not recommend choosing this value for a default account-level password policy or for any user-level policy. Instead, choose a value that meets your internal security guidelines. Default: 90, which means the password must be changed every 90 days.
     */
    maxAgeDays?: pulumi.Input<number>;
    /**
     * (Default: `256`) Specifies the maximum number of characters the password must contain. This number must be greater than or equal to the sum of PASSWORD*MIN*LENGTH, PASSWORD*MIN*UPPER*CASE*CHARS, and PASSWORD*MIN*LOWER*CASE*CHARS. Supported range: 8 to 256, inclusive. Default: 256
     */
    maxLength?: pulumi.Input<number>;
    /**
     * (Default: `5`) Specifies the maximum number of attempts to enter a password before being locked out. Supported range: 1 to 10, inclusive. Default: 5
     */
    maxRetries?: pulumi.Input<number>;
    /**
     * (Default: `0`) Specifies the number of days the user must wait before a recently changed password can be changed again. Supported range: 0 to 999, inclusive. Default: 0
     */
    minAgeDays?: pulumi.Input<number>;
    /**
     * (Default: `8`) Specifies the minimum number of characters the password must contain. Supported range: 8 to 256, inclusive. Default: 8
     */
    minLength?: pulumi.Input<number>;
    /**
     * (Default: `1`) Specifies the minimum number of lowercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1
     */
    minLowerCaseChars?: pulumi.Input<number>;
    /**
     * (Default: `1`) Specifies the minimum number of numeric characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1
     */
    minNumericChars?: pulumi.Input<number>;
    /**
     * (Default: `1`) Specifies the minimum number of special characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1
     */
    minSpecialChars?: pulumi.Input<number>;
    /**
     * (Default: `1`) Specifies the minimum number of uppercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1
     */
    minUpperCaseChars?: pulumi.Input<number>;
    /**
     * Identifier for the password policy; must be unique for your account.
     */
    name?: pulumi.Input<string>;
    /**
     * (Default: `false`) Whether to override a previous password policy with the same name.
     */
    orReplace?: pulumi.Input<boolean>;
    /**
     * The schema this password policy belongs to.
     */
    schema: pulumi.Input<string>;
}
