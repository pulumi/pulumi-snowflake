// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * !> **V1 release candidate** This resource was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the resource if needed. Any errors reported will be resolved with a higher priority. We encourage checking this resource out before the V1 release. Please follow the migration guide to use it.
 *
 * A shared database creates a database from a share provided by another Snowflake account. For more information about shares, see [Introduction to Secure Data Sharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro).
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import snowflake:index/sharedDatabase:SharedDatabase example 'shared_database_name'
 * ```
 */
export class SharedDatabase extends pulumi.CustomResource {
    /**
     * Get an existing SharedDatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SharedDatabaseState, opts?: pulumi.CustomResourceOptions): SharedDatabase {
        return new SharedDatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/sharedDatabase:SharedDatabase';

    /**
     * Returns true if the given object is an instance of SharedDatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SharedDatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SharedDatabase.__pulumiType;
    }

    /**
     * The database parameter that specifies the default catalog to use for Iceberg tables.
     */
    public readonly catalog!: pulumi.Output<string>;
    /**
     * Specifies a comment for the database.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).
     */
    public readonly defaultDdlCollation!: pulumi.Output<string>;
    /**
     * If true, enables stdout/stderr fast path logging for anonymous stored procedures.
     */
    public readonly enableConsoleOutput!: pulumi.Output<boolean>;
    /**
     * The database parameter that specifies the default external volume to use for Iceberg tables.
     */
    public readonly externalVolume!: pulumi.Output<string>;
    /**
     * A fully qualified path to a share from which the database will be created. A fully qualified path follows the format of `"<organization_name>"."<account_name>"."<share_name>"`.
     */
    public readonly fromShare!: pulumi.Output<string>;
    /**
     * Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).
     */
    public readonly logLevel!: pulumi.Output<string>;
    /**
     * Specifies the identifier for the database; must be unique for your account.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * If true, the case of quoted identifiers is ignored.
     */
    public readonly quotedIdentifiersIgnoreCase!: pulumi.Output<boolean>;
    /**
     * Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (ï¿½) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog.
     */
    public readonly replaceInvalidCharacters!: pulumi.Output<boolean>;
    /**
     * The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake.
     */
    public readonly storageSerializationPolicy!: pulumi.Output<string>;
    /**
     * How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending.
     */
    public readonly suspendTaskAfterNumFailures!: pulumi.Output<number>;
    /**
     * Maximum automatic retries allowed for a user task.
     */
    public readonly taskAutoRetryAttempts!: pulumi.Output<number>;
    /**
     * Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).
     */
    public readonly traceLevel!: pulumi.Output<string>;
    /**
     * The initial size of warehouse to use for managed warehouses in the absence of history.
     */
    public readonly userTaskManagedInitialWarehouseSize!: pulumi.Output<string>;
    /**
     * Minimum amount of time between Triggered Task executions in seconds.
     */
    public readonly userTaskMinimumTriggerIntervalInSeconds!: pulumi.Output<number>;
    /**
     * User task execution timeout in milliseconds.
     */
    public readonly userTaskTimeoutMs!: pulumi.Output<number>;

    /**
     * Create a SharedDatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SharedDatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SharedDatabaseArgs | SharedDatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SharedDatabaseState | undefined;
            resourceInputs["catalog"] = state ? state.catalog : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["defaultDdlCollation"] = state ? state.defaultDdlCollation : undefined;
            resourceInputs["enableConsoleOutput"] = state ? state.enableConsoleOutput : undefined;
            resourceInputs["externalVolume"] = state ? state.externalVolume : undefined;
            resourceInputs["fromShare"] = state ? state.fromShare : undefined;
            resourceInputs["logLevel"] = state ? state.logLevel : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["quotedIdentifiersIgnoreCase"] = state ? state.quotedIdentifiersIgnoreCase : undefined;
            resourceInputs["replaceInvalidCharacters"] = state ? state.replaceInvalidCharacters : undefined;
            resourceInputs["storageSerializationPolicy"] = state ? state.storageSerializationPolicy : undefined;
            resourceInputs["suspendTaskAfterNumFailures"] = state ? state.suspendTaskAfterNumFailures : undefined;
            resourceInputs["taskAutoRetryAttempts"] = state ? state.taskAutoRetryAttempts : undefined;
            resourceInputs["traceLevel"] = state ? state.traceLevel : undefined;
            resourceInputs["userTaskManagedInitialWarehouseSize"] = state ? state.userTaskManagedInitialWarehouseSize : undefined;
            resourceInputs["userTaskMinimumTriggerIntervalInSeconds"] = state ? state.userTaskMinimumTriggerIntervalInSeconds : undefined;
            resourceInputs["userTaskTimeoutMs"] = state ? state.userTaskTimeoutMs : undefined;
        } else {
            const args = argsOrState as SharedDatabaseArgs | undefined;
            if ((!args || args.fromShare === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fromShare'");
            }
            resourceInputs["catalog"] = args ? args.catalog : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["defaultDdlCollation"] = args ? args.defaultDdlCollation : undefined;
            resourceInputs["enableConsoleOutput"] = args ? args.enableConsoleOutput : undefined;
            resourceInputs["externalVolume"] = args ? args.externalVolume : undefined;
            resourceInputs["fromShare"] = args ? args.fromShare : undefined;
            resourceInputs["logLevel"] = args ? args.logLevel : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["quotedIdentifiersIgnoreCase"] = args ? args.quotedIdentifiersIgnoreCase : undefined;
            resourceInputs["replaceInvalidCharacters"] = args ? args.replaceInvalidCharacters : undefined;
            resourceInputs["storageSerializationPolicy"] = args ? args.storageSerializationPolicy : undefined;
            resourceInputs["suspendTaskAfterNumFailures"] = args ? args.suspendTaskAfterNumFailures : undefined;
            resourceInputs["taskAutoRetryAttempts"] = args ? args.taskAutoRetryAttempts : undefined;
            resourceInputs["traceLevel"] = args ? args.traceLevel : undefined;
            resourceInputs["userTaskManagedInitialWarehouseSize"] = args ? args.userTaskManagedInitialWarehouseSize : undefined;
            resourceInputs["userTaskMinimumTriggerIntervalInSeconds"] = args ? args.userTaskMinimumTriggerIntervalInSeconds : undefined;
            resourceInputs["userTaskTimeoutMs"] = args ? args.userTaskTimeoutMs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SharedDatabase.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SharedDatabase resources.
 */
export interface SharedDatabaseState {
    /**
     * The database parameter that specifies the default catalog to use for Iceberg tables.
     */
    catalog?: pulumi.Input<string>;
    /**
     * Specifies a comment for the database.
     */
    comment?: pulumi.Input<string>;
    /**
     * Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).
     */
    defaultDdlCollation?: pulumi.Input<string>;
    /**
     * If true, enables stdout/stderr fast path logging for anonymous stored procedures.
     */
    enableConsoleOutput?: pulumi.Input<boolean>;
    /**
     * The database parameter that specifies the default external volume to use for Iceberg tables.
     */
    externalVolume?: pulumi.Input<string>;
    /**
     * A fully qualified path to a share from which the database will be created. A fully qualified path follows the format of `"<organization_name>"."<account_name>"."<share_name>"`.
     */
    fromShare?: pulumi.Input<string>;
    /**
     * Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).
     */
    logLevel?: pulumi.Input<string>;
    /**
     * Specifies the identifier for the database; must be unique for your account.
     */
    name?: pulumi.Input<string>;
    /**
     * If true, the case of quoted identifiers is ignored.
     */
    quotedIdentifiersIgnoreCase?: pulumi.Input<boolean>;
    /**
     * Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (ï¿½) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog.
     */
    replaceInvalidCharacters?: pulumi.Input<boolean>;
    /**
     * The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake.
     */
    storageSerializationPolicy?: pulumi.Input<string>;
    /**
     * How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending.
     */
    suspendTaskAfterNumFailures?: pulumi.Input<number>;
    /**
     * Maximum automatic retries allowed for a user task.
     */
    taskAutoRetryAttempts?: pulumi.Input<number>;
    /**
     * Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).
     */
    traceLevel?: pulumi.Input<string>;
    /**
     * The initial size of warehouse to use for managed warehouses in the absence of history.
     */
    userTaskManagedInitialWarehouseSize?: pulumi.Input<string>;
    /**
     * Minimum amount of time between Triggered Task executions in seconds.
     */
    userTaskMinimumTriggerIntervalInSeconds?: pulumi.Input<number>;
    /**
     * User task execution timeout in milliseconds.
     */
    userTaskTimeoutMs?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SharedDatabase resource.
 */
export interface SharedDatabaseArgs {
    /**
     * The database parameter that specifies the default catalog to use for Iceberg tables.
     */
    catalog?: pulumi.Input<string>;
    /**
     * Specifies a comment for the database.
     */
    comment?: pulumi.Input<string>;
    /**
     * Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).
     */
    defaultDdlCollation?: pulumi.Input<string>;
    /**
     * If true, enables stdout/stderr fast path logging for anonymous stored procedures.
     */
    enableConsoleOutput?: pulumi.Input<boolean>;
    /**
     * The database parameter that specifies the default external volume to use for Iceberg tables.
     */
    externalVolume?: pulumi.Input<string>;
    /**
     * A fully qualified path to a share from which the database will be created. A fully qualified path follows the format of `"<organization_name>"."<account_name>"."<share_name>"`.
     */
    fromShare: pulumi.Input<string>;
    /**
     * Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).
     */
    logLevel?: pulumi.Input<string>;
    /**
     * Specifies the identifier for the database; must be unique for your account.
     */
    name?: pulumi.Input<string>;
    /**
     * If true, the case of quoted identifiers is ignored.
     */
    quotedIdentifiersIgnoreCase?: pulumi.Input<boolean>;
    /**
     * Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (ï¿½) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog.
     */
    replaceInvalidCharacters?: pulumi.Input<boolean>;
    /**
     * The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake.
     */
    storageSerializationPolicy?: pulumi.Input<string>;
    /**
     * How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending.
     */
    suspendTaskAfterNumFailures?: pulumi.Input<number>;
    /**
     * Maximum automatic retries allowed for a user task.
     */
    taskAutoRetryAttempts?: pulumi.Input<number>;
    /**
     * Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).
     */
    traceLevel?: pulumi.Input<string>;
    /**
     * The initial size of warehouse to use for managed warehouses in the absence of history.
     */
    userTaskManagedInitialWarehouseSize?: pulumi.Input<string>;
    /**
     * Minimum amount of time between Triggered Task executions in seconds.
     */
    userTaskMinimumTriggerIntervalInSeconds?: pulumi.Input<number>;
    /**
     * User task execution timeout in milliseconds.
     */
    userTaskTimeoutMs?: pulumi.Input<number>;
}
