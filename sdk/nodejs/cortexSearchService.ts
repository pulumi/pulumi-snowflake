// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * ```sh
 * $ pulumi import snowflake:index/cortexSearchService:CortexSearchService example 'dbName|schemaName|fileFormatName'
 * ```
 */
export class CortexSearchService extends pulumi.CustomResource {
    /**
     * Get an existing CortexSearchService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CortexSearchServiceState, opts?: pulumi.CustomResourceOptions): CortexSearchService {
        return new CortexSearchService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/cortexSearchService:CortexSearchService';

    /**
     * Returns true if the given object is an instance of CortexSearchService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CortexSearchService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CortexSearchService.__pulumiType;
    }

    /**
     * Specifies the list of columns in the base table to enable filtering on when issuing queries to the service.
     */
    declare public readonly attributes: pulumi.Output<string[] | undefined>;
    /**
     * Specifies a comment for the Cortex search service.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * Creation date for the given Cortex search service.
     */
    declare public /*out*/ readonly createdOn: pulumi.Output<string>;
    /**
     * The database in which to create the Cortex search service.
     */
    declare public readonly database: pulumi.Output<string>;
    /**
     * Outputs the result of `DESCRIBE CORTEX SEARCH SERVICE` for the given cortex search service.
     */
    declare public /*out*/ readonly describeOutputs: pulumi.Output<outputs.CortexSearchServiceDescribeOutput[]>;
    /**
     * Specifies the embedding model to use for the Cortex search service.
     */
    declare public readonly embeddingModel: pulumi.Output<string | undefined>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    declare public /*out*/ readonly fullyQualifiedName: pulumi.Output<string>;
    /**
     * Specifies the name of the Cortex search service. The name must be unique for the schema in which the service is created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies the column to use as the search column for the Cortex search service; must be a text value.
     */
    declare public readonly on: pulumi.Output<string>;
    /**
     * Specifies the query to use to populate the Cortex search service.
     */
    declare public readonly query: pulumi.Output<string>;
    /**
     * The schema in which to create the Cortex search service.
     */
    declare public readonly schema: pulumi.Output<string>;
    /**
     * Specifies the maximum target lag time for the Cortex search service.
     */
    declare public readonly targetLag: pulumi.Output<string>;
    /**
     * The warehouse in which to create the Cortex search service.
     */
    declare public readonly warehouse: pulumi.Output<string>;

    /**
     * Create a CortexSearchService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CortexSearchServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CortexSearchServiceArgs | CortexSearchServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CortexSearchServiceState | undefined;
            resourceInputs["attributes"] = state?.attributes;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["createdOn"] = state?.createdOn;
            resourceInputs["database"] = state?.database;
            resourceInputs["describeOutputs"] = state?.describeOutputs;
            resourceInputs["embeddingModel"] = state?.embeddingModel;
            resourceInputs["fullyQualifiedName"] = state?.fullyQualifiedName;
            resourceInputs["name"] = state?.name;
            resourceInputs["on"] = state?.on;
            resourceInputs["query"] = state?.query;
            resourceInputs["schema"] = state?.schema;
            resourceInputs["targetLag"] = state?.targetLag;
            resourceInputs["warehouse"] = state?.warehouse;
        } else {
            const args = argsOrState as CortexSearchServiceArgs | undefined;
            if (args?.database === undefined && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if (args?.on === undefined && !opts.urn) {
                throw new Error("Missing required property 'on'");
            }
            if (args?.query === undefined && !opts.urn) {
                throw new Error("Missing required property 'query'");
            }
            if (args?.schema === undefined && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            if (args?.targetLag === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetLag'");
            }
            if (args?.warehouse === undefined && !opts.urn) {
                throw new Error("Missing required property 'warehouse'");
            }
            resourceInputs["attributes"] = args?.attributes;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["database"] = args?.database;
            resourceInputs["embeddingModel"] = args?.embeddingModel;
            resourceInputs["name"] = args?.name;
            resourceInputs["on"] = args?.on;
            resourceInputs["query"] = args?.query;
            resourceInputs["schema"] = args?.schema;
            resourceInputs["targetLag"] = args?.targetLag;
            resourceInputs["warehouse"] = args?.warehouse;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["describeOutputs"] = undefined /*out*/;
            resourceInputs["fullyQualifiedName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CortexSearchService.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CortexSearchService resources.
 */
export interface CortexSearchServiceState {
    /**
     * Specifies the list of columns in the base table to enable filtering on when issuing queries to the service.
     */
    attributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a comment for the Cortex search service.
     */
    comment?: pulumi.Input<string>;
    /**
     * Creation date for the given Cortex search service.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * The database in which to create the Cortex search service.
     */
    database?: pulumi.Input<string>;
    /**
     * Outputs the result of `DESCRIBE CORTEX SEARCH SERVICE` for the given cortex search service.
     */
    describeOutputs?: pulumi.Input<pulumi.Input<inputs.CortexSearchServiceDescribeOutput>[]>;
    /**
     * Specifies the embedding model to use for the Cortex search service.
     */
    embeddingModel?: pulumi.Input<string>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    fullyQualifiedName?: pulumi.Input<string>;
    /**
     * Specifies the name of the Cortex search service. The name must be unique for the schema in which the service is created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the column to use as the search column for the Cortex search service; must be a text value.
     */
    on?: pulumi.Input<string>;
    /**
     * Specifies the query to use to populate the Cortex search service.
     */
    query?: pulumi.Input<string>;
    /**
     * The schema in which to create the Cortex search service.
     */
    schema?: pulumi.Input<string>;
    /**
     * Specifies the maximum target lag time for the Cortex search service.
     */
    targetLag?: pulumi.Input<string>;
    /**
     * The warehouse in which to create the Cortex search service.
     */
    warehouse?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CortexSearchService resource.
 */
export interface CortexSearchServiceArgs {
    /**
     * Specifies the list of columns in the base table to enable filtering on when issuing queries to the service.
     */
    attributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a comment for the Cortex search service.
     */
    comment?: pulumi.Input<string>;
    /**
     * The database in which to create the Cortex search service.
     */
    database: pulumi.Input<string>;
    /**
     * Specifies the embedding model to use for the Cortex search service.
     */
    embeddingModel?: pulumi.Input<string>;
    /**
     * Specifies the name of the Cortex search service. The name must be unique for the schema in which the service is created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the column to use as the search column for the Cortex search service; must be a text value.
     */
    on: pulumi.Input<string>;
    /**
     * Specifies the query to use to populate the Cortex search service.
     */
    query: pulumi.Input<string>;
    /**
     * The schema in which to create the Cortex search service.
     */
    schema: pulumi.Input<string>;
    /**
     * Specifies the maximum target lag time for the Cortex search service.
     */
    targetLag: pulumi.Input<string>;
    /**
     * The warehouse in which to create the Cortex search service.
     */
    warehouse: pulumi.Input<string>;
}
