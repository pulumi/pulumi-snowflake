// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * ```sh
 * $ pulumi import snowflake:index/tableConstraint:TableConstraint example 'myconstraintfk❄️FOREIGN KEY❄️databaseName|schemaName|tableName'
 * ```
 */
export class TableConstraint extends pulumi.CustomResource {
    /**
     * Get an existing TableConstraint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TableConstraintState, opts?: pulumi.CustomResourceOptions): TableConstraint {
        return new TableConstraint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/tableConstraint:TableConstraint';

    /**
     * Returns true if the given object is an instance of TableConstraint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TableConstraint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TableConstraint.__pulumiType;
    }

    /**
     * Columns to use in constraint key
     */
    declare public readonly columns: pulumi.Output<string[]>;
    /**
     * Comment for the table constraint
     *
     * @deprecated Not used. Will be removed.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * (Default: `true`) Whether the constraint is deferrable
     */
    declare public readonly deferrable: pulumi.Output<boolean | undefined>;
    /**
     * (Default: `true`) Specifies whether the constraint is enabled or disabled. These properties are provided for compatibility with Oracle.
     */
    declare public readonly enable: pulumi.Output<boolean | undefined>;
    /**
     * (Default: `false`) Whether the constraint is enforced
     */
    declare public readonly enforced: pulumi.Output<boolean | undefined>;
    /**
     * Additional properties when type is set to foreign key. Not applicable for primary/unique keys
     */
    declare public readonly foreignKeyProperties: pulumi.Output<outputs.TableConstraintForeignKeyProperties | undefined>;
    /**
     * (Default: `DEFERRED`) Whether the constraint is initially deferred or immediate
     */
    declare public readonly initially: pulumi.Output<string | undefined>;
    /**
     * Name of constraint
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * (Default: `true`) Specifies whether a constraint in NOVALIDATE mode is taken into account during query rewrite.
     */
    declare public readonly rely: pulumi.Output<boolean | undefined>;
    /**
     * Identifier for table to create constraint on. Format must follow: "\"&lt;db*name&gt;\".\"&lt;schema*name&gt;\".\"&lt;table*name&gt;\"" or "&lt;db*name&gt;.&lt;schema*name&gt;.&lt;table*name&gt;" (snowflake*table.my*table.id)
     */
    declare public readonly tableId: pulumi.Output<string>;
    /**
     * Type of constraint, one of 'UNIQUE', 'PRIMARY KEY', or 'FOREIGN KEY'
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * (Default: `false`) Specifies whether to validate existing data on the table when a constraint is created. Only used in conjunction with the ENABLE property.
     */
    declare public readonly validate: pulumi.Output<boolean | undefined>;

    /**
     * Create a TableConstraint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TableConstraintArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TableConstraintArgs | TableConstraintState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TableConstraintState | undefined;
            resourceInputs["columns"] = state?.columns;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["deferrable"] = state?.deferrable;
            resourceInputs["enable"] = state?.enable;
            resourceInputs["enforced"] = state?.enforced;
            resourceInputs["foreignKeyProperties"] = state?.foreignKeyProperties;
            resourceInputs["initially"] = state?.initially;
            resourceInputs["name"] = state?.name;
            resourceInputs["rely"] = state?.rely;
            resourceInputs["tableId"] = state?.tableId;
            resourceInputs["type"] = state?.type;
            resourceInputs["validate"] = state?.validate;
        } else {
            const args = argsOrState as TableConstraintArgs | undefined;
            if (args?.columns === undefined && !opts.urn) {
                throw new Error("Missing required property 'columns'");
            }
            if (args?.tableId === undefined && !opts.urn) {
                throw new Error("Missing required property 'tableId'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["columns"] = args?.columns;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["deferrable"] = args?.deferrable;
            resourceInputs["enable"] = args?.enable;
            resourceInputs["enforced"] = args?.enforced;
            resourceInputs["foreignKeyProperties"] = args?.foreignKeyProperties;
            resourceInputs["initially"] = args?.initially;
            resourceInputs["name"] = args?.name;
            resourceInputs["rely"] = args?.rely;
            resourceInputs["tableId"] = args?.tableId;
            resourceInputs["type"] = args?.type;
            resourceInputs["validate"] = args?.validate;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TableConstraint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TableConstraint resources.
 */
export interface TableConstraintState {
    /**
     * Columns to use in constraint key
     */
    columns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Comment for the table constraint
     *
     * @deprecated Not used. Will be removed.
     */
    comment?: pulumi.Input<string>;
    /**
     * (Default: `true`) Whether the constraint is deferrable
     */
    deferrable?: pulumi.Input<boolean>;
    /**
     * (Default: `true`) Specifies whether the constraint is enabled or disabled. These properties are provided for compatibility with Oracle.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * (Default: `false`) Whether the constraint is enforced
     */
    enforced?: pulumi.Input<boolean>;
    /**
     * Additional properties when type is set to foreign key. Not applicable for primary/unique keys
     */
    foreignKeyProperties?: pulumi.Input<inputs.TableConstraintForeignKeyProperties>;
    /**
     * (Default: `DEFERRED`) Whether the constraint is initially deferred or immediate
     */
    initially?: pulumi.Input<string>;
    /**
     * Name of constraint
     */
    name?: pulumi.Input<string>;
    /**
     * (Default: `true`) Specifies whether a constraint in NOVALIDATE mode is taken into account during query rewrite.
     */
    rely?: pulumi.Input<boolean>;
    /**
     * Identifier for table to create constraint on. Format must follow: "\"&lt;db*name&gt;\".\"&lt;schema*name&gt;\".\"&lt;table*name&gt;\"" or "&lt;db*name&gt;.&lt;schema*name&gt;.&lt;table*name&gt;" (snowflake*table.my*table.id)
     */
    tableId?: pulumi.Input<string>;
    /**
     * Type of constraint, one of 'UNIQUE', 'PRIMARY KEY', or 'FOREIGN KEY'
     */
    type?: pulumi.Input<string>;
    /**
     * (Default: `false`) Specifies whether to validate existing data on the table when a constraint is created. Only used in conjunction with the ENABLE property.
     */
    validate?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a TableConstraint resource.
 */
export interface TableConstraintArgs {
    /**
     * Columns to use in constraint key
     */
    columns: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Comment for the table constraint
     *
     * @deprecated Not used. Will be removed.
     */
    comment?: pulumi.Input<string>;
    /**
     * (Default: `true`) Whether the constraint is deferrable
     */
    deferrable?: pulumi.Input<boolean>;
    /**
     * (Default: `true`) Specifies whether the constraint is enabled or disabled. These properties are provided for compatibility with Oracle.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * (Default: `false`) Whether the constraint is enforced
     */
    enforced?: pulumi.Input<boolean>;
    /**
     * Additional properties when type is set to foreign key. Not applicable for primary/unique keys
     */
    foreignKeyProperties?: pulumi.Input<inputs.TableConstraintForeignKeyProperties>;
    /**
     * (Default: `DEFERRED`) Whether the constraint is initially deferred or immediate
     */
    initially?: pulumi.Input<string>;
    /**
     * Name of constraint
     */
    name?: pulumi.Input<string>;
    /**
     * (Default: `true`) Specifies whether a constraint in NOVALIDATE mode is taken into account during query rewrite.
     */
    rely?: pulumi.Input<boolean>;
    /**
     * Identifier for table to create constraint on. Format must follow: "\"&lt;db*name&gt;\".\"&lt;schema*name&gt;\".\"&lt;table*name&gt;\"" or "&lt;db*name&gt;.&lt;schema*name&gt;.&lt;table*name&gt;" (snowflake*table.my*table.id)
     */
    tableId: pulumi.Input<string>;
    /**
     * Type of constraint, one of 'UNIQUE', 'PRIMARY KEY', or 'FOREIGN KEY'
     */
    type: pulumi.Input<string>;
    /**
     * (Default: `false`) Specifies whether to validate existing data on the table when a constraint is created. Only used in conjunction with the ENABLE property.
     */
    validate?: pulumi.Input<boolean>;
}
