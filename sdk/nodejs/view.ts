// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * ```sh
 * $ pulumi import snowflake:index/view:View example '"<database_name>"."<schema_name>"."<view_name>"'
 * ```
 */
export class View extends pulumi.CustomResource {
    /**
     * Get an existing View resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ViewState, opts?: pulumi.CustomResourceOptions): View {
        return new View(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/view:View';

    /**
     * Returns true if the given object is an instance of View.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is View {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === View.__pulumiType;
    }

    /**
     * Specifies the aggregation policy to set on a view.
     */
    declare public readonly aggregationPolicy: pulumi.Output<outputs.ViewAggregationPolicy | undefined>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies to enable or disable change tracking on the table. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
     */
    declare public readonly changeTracking: pulumi.Output<string | undefined>;
    /**
     * If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.
     */
    declare public readonly columns: pulumi.Output<outputs.ViewColumn[] | undefined>;
    /**
     * Specifies a comment for the view.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    declare public readonly copyGrants: pulumi.Output<boolean | undefined>;
    /**
     * Data metric functions used for the view.
     */
    declare public readonly dataMetricFunctions: pulumi.Output<outputs.ViewDataMetricFunction[] | undefined>;
    /**
     * Specifies the schedule to run the data metric functions periodically.
     */
    declare public readonly dataMetricSchedule: pulumi.Output<outputs.ViewDataMetricSchedule | undefined>;
    /**
     * The database in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    declare public readonly database: pulumi.Output<string>;
    /**
     * Outputs the result of `DESCRIBE VIEW` for the given view.
     */
    declare public /*out*/ readonly describeOutputs: pulumi.Output<outputs.ViewDescribeOutput[]>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    declare public /*out*/ readonly fullyQualifiedName: pulumi.Output<string>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
     */
    declare public readonly isRecursive: pulumi.Output<string | undefined>;
    declare public readonly isSecure: pulumi.Output<string | undefined>;
    declare public readonly isTemporary: pulumi.Output<string | undefined>;
    /**
     * Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies the row access policy to set on a view.
     */
    declare public readonly rowAccessPolicy: pulumi.Output<outputs.ViewRowAccessPolicy | undefined>;
    /**
     * The schema in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    declare public readonly schema: pulumi.Output<string>;
    /**
     * Outputs the result of `SHOW VIEW` for the given view.
     */
    declare public /*out*/ readonly showOutputs: pulumi.Output<outputs.ViewShowOutput[]>;
    /**
     * Specifies the query used to create the view. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
     */
    declare public readonly statement: pulumi.Output<string>;

    /**
     * Create a View resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ViewArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ViewArgs | ViewState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ViewState | undefined;
            resourceInputs["aggregationPolicy"] = state?.aggregationPolicy;
            resourceInputs["changeTracking"] = state?.changeTracking;
            resourceInputs["columns"] = state?.columns;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["copyGrants"] = state?.copyGrants;
            resourceInputs["dataMetricFunctions"] = state?.dataMetricFunctions;
            resourceInputs["dataMetricSchedule"] = state?.dataMetricSchedule;
            resourceInputs["database"] = state?.database;
            resourceInputs["describeOutputs"] = state?.describeOutputs;
            resourceInputs["fullyQualifiedName"] = state?.fullyQualifiedName;
            resourceInputs["isRecursive"] = state?.isRecursive;
            resourceInputs["isSecure"] = state?.isSecure;
            resourceInputs["isTemporary"] = state?.isTemporary;
            resourceInputs["name"] = state?.name;
            resourceInputs["rowAccessPolicy"] = state?.rowAccessPolicy;
            resourceInputs["schema"] = state?.schema;
            resourceInputs["showOutputs"] = state?.showOutputs;
            resourceInputs["statement"] = state?.statement;
        } else {
            const args = argsOrState as ViewArgs | undefined;
            if (args?.database === undefined && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if (args?.schema === undefined && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            if (args?.statement === undefined && !opts.urn) {
                throw new Error("Missing required property 'statement'");
            }
            resourceInputs["aggregationPolicy"] = args?.aggregationPolicy;
            resourceInputs["changeTracking"] = args?.changeTracking;
            resourceInputs["columns"] = args?.columns;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["copyGrants"] = args?.copyGrants;
            resourceInputs["dataMetricFunctions"] = args?.dataMetricFunctions;
            resourceInputs["dataMetricSchedule"] = args?.dataMetricSchedule;
            resourceInputs["database"] = args?.database;
            resourceInputs["isRecursive"] = args?.isRecursive;
            resourceInputs["isSecure"] = args?.isSecure;
            resourceInputs["isTemporary"] = args?.isTemporary;
            resourceInputs["name"] = args?.name;
            resourceInputs["rowAccessPolicy"] = args?.rowAccessPolicy;
            resourceInputs["schema"] = args?.schema;
            resourceInputs["statement"] = args?.statement;
            resourceInputs["describeOutputs"] = undefined /*out*/;
            resourceInputs["fullyQualifiedName"] = undefined /*out*/;
            resourceInputs["showOutputs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(View.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering View resources.
 */
export interface ViewState {
    /**
     * Specifies the aggregation policy to set on a view.
     */
    aggregationPolicy?: pulumi.Input<inputs.ViewAggregationPolicy>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies to enable or disable change tracking on the table. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
     */
    changeTracking?: pulumi.Input<string>;
    /**
     * If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.
     */
    columns?: pulumi.Input<pulumi.Input<inputs.ViewColumn>[]>;
    /**
     * Specifies a comment for the view.
     */
    comment?: pulumi.Input<string>;
    copyGrants?: pulumi.Input<boolean>;
    /**
     * Data metric functions used for the view.
     */
    dataMetricFunctions?: pulumi.Input<pulumi.Input<inputs.ViewDataMetricFunction>[]>;
    /**
     * Specifies the schedule to run the data metric functions periodically.
     */
    dataMetricSchedule?: pulumi.Input<inputs.ViewDataMetricSchedule>;
    /**
     * The database in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    database?: pulumi.Input<string>;
    /**
     * Outputs the result of `DESCRIBE VIEW` for the given view.
     */
    describeOutputs?: pulumi.Input<pulumi.Input<inputs.ViewDescribeOutput>[]>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    fullyQualifiedName?: pulumi.Input<string>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
     */
    isRecursive?: pulumi.Input<string>;
    isSecure?: pulumi.Input<string>;
    isTemporary?: pulumi.Input<string>;
    /**
     * Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the row access policy to set on a view.
     */
    rowAccessPolicy?: pulumi.Input<inputs.ViewRowAccessPolicy>;
    /**
     * The schema in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    schema?: pulumi.Input<string>;
    /**
     * Outputs the result of `SHOW VIEW` for the given view.
     */
    showOutputs?: pulumi.Input<pulumi.Input<inputs.ViewShowOutput>[]>;
    /**
     * Specifies the query used to create the view. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
     */
    statement?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a View resource.
 */
export interface ViewArgs {
    /**
     * Specifies the aggregation policy to set on a view.
     */
    aggregationPolicy?: pulumi.Input<inputs.ViewAggregationPolicy>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies to enable or disable change tracking on the table. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
     */
    changeTracking?: pulumi.Input<string>;
    /**
     * If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.
     */
    columns?: pulumi.Input<pulumi.Input<inputs.ViewColumn>[]>;
    /**
     * Specifies a comment for the view.
     */
    comment?: pulumi.Input<string>;
    copyGrants?: pulumi.Input<boolean>;
    /**
     * Data metric functions used for the view.
     */
    dataMetricFunctions?: pulumi.Input<pulumi.Input<inputs.ViewDataMetricFunction>[]>;
    /**
     * Specifies the schedule to run the data metric functions periodically.
     */
    dataMetricSchedule?: pulumi.Input<inputs.ViewDataMetricSchedule>;
    /**
     * The database in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    database: pulumi.Input<string>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
     */
    isRecursive?: pulumi.Input<string>;
    isSecure?: pulumi.Input<string>;
    isTemporary?: pulumi.Input<string>;
    /**
     * Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the row access policy to set on a view.
     */
    rowAccessPolicy?: pulumi.Input<inputs.ViewRowAccessPolicy>;
    /**
     * The schema in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    schema: pulumi.Input<string>;
    /**
     * Specifies the query used to create the view. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
     */
    statement: pulumi.Input<string>;
}
