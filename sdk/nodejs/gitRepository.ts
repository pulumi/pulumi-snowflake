// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * ```sh
 * $ pulumi import snowflake:index/gitRepository:GitRepository example '"<db_name>"."<schema_name>"."<git_repository_name>"'
 * ```
 */
export class GitRepository extends pulumi.CustomResource {
    /**
     * Get an existing GitRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GitRepositoryState, opts?: pulumi.CustomResourceOptions): GitRepository {
        return new GitRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/gitRepository:GitRepository';

    /**
     * Returns true if the given object is an instance of GitRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GitRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GitRepository.__pulumiType;
    }

    /**
     * Identifier of API INTEGRATION containing information about the remote Git repository such as allowed credentials and prefixes for target URLs.
     */
    public readonly apiIntegration!: pulumi.Output<string>;
    /**
     * Specifies a comment for the git repository.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * The database in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    public readonly database!: pulumi.Output<string>;
    /**
     * Outputs the result of `DESCRIBE GIT REPOSITORY` for the given git repository.
     */
    public /*out*/ readonly describeOutputs!: pulumi.Output<outputs.GitRepositoryDescribeOutput[]>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    public /*out*/ readonly fullyQualifiedName!: pulumi.Output<string>;
    /**
     * Specifies the Snowflake secret fully qualified name (e.g `"\"<db_name>\".\"<schema_name>\".\"<secret_name>\""`) containing the credentials to use for authenticating with the remote Git repository. Omit this parameter to use the default secret specified by the API integration or if this integration does not require authentication.
     */
    public readonly gitCredentials!: pulumi.Output<string | undefined>;
    /**
     * Specifies the identifier for the git repository; must be unique for the schema in which the git repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the origin URL of the remote Git repository that this Git repository clone represents. The URL must use HTTPS.
     */
    public readonly origin!: pulumi.Output<string>;
    /**
     * The schema in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    public readonly schema!: pulumi.Output<string>;
    /**
     * Outputs the result of `SHOW GIT REPOSITORIES` for the given git repository.
     */
    public /*out*/ readonly showOutputs!: pulumi.Output<outputs.GitRepositoryShowOutput[]>;

    /**
     * Create a GitRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GitRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GitRepositoryArgs | GitRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GitRepositoryState | undefined;
            resourceInputs["apiIntegration"] = state ? state.apiIntegration : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["describeOutputs"] = state ? state.describeOutputs : undefined;
            resourceInputs["fullyQualifiedName"] = state ? state.fullyQualifiedName : undefined;
            resourceInputs["gitCredentials"] = state ? state.gitCredentials : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["origin"] = state ? state.origin : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["showOutputs"] = state ? state.showOutputs : undefined;
        } else {
            const args = argsOrState as GitRepositoryArgs | undefined;
            if ((!args || args.apiIntegration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiIntegration'");
            }
            if ((!args || args.database === undefined) && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if ((!args || args.origin === undefined) && !opts.urn) {
                throw new Error("Missing required property 'origin'");
            }
            if ((!args || args.schema === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            resourceInputs["apiIntegration"] = args ? args.apiIntegration : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["gitCredentials"] = args ? args.gitCredentials : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["origin"] = args ? args.origin : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["describeOutputs"] = undefined /*out*/;
            resourceInputs["fullyQualifiedName"] = undefined /*out*/;
            resourceInputs["showOutputs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GitRepository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GitRepository resources.
 */
export interface GitRepositoryState {
    /**
     * Identifier of API INTEGRATION containing information about the remote Git repository such as allowed credentials and prefixes for target URLs.
     */
    apiIntegration?: pulumi.Input<string>;
    /**
     * Specifies a comment for the git repository.
     */
    comment?: pulumi.Input<string>;
    /**
     * The database in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    database?: pulumi.Input<string>;
    /**
     * Outputs the result of `DESCRIBE GIT REPOSITORY` for the given git repository.
     */
    describeOutputs?: pulumi.Input<pulumi.Input<inputs.GitRepositoryDescribeOutput>[]>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    fullyQualifiedName?: pulumi.Input<string>;
    /**
     * Specifies the Snowflake secret fully qualified name (e.g `"\"<db_name>\".\"<schema_name>\".\"<secret_name>\""`) containing the credentials to use for authenticating with the remote Git repository. Omit this parameter to use the default secret specified by the API integration or if this integration does not require authentication.
     */
    gitCredentials?: pulumi.Input<string>;
    /**
     * Specifies the identifier for the git repository; must be unique for the schema in which the git repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the origin URL of the remote Git repository that this Git repository clone represents. The URL must use HTTPS.
     */
    origin?: pulumi.Input<string>;
    /**
     * The schema in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    schema?: pulumi.Input<string>;
    /**
     * Outputs the result of `SHOW GIT REPOSITORIES` for the given git repository.
     */
    showOutputs?: pulumi.Input<pulumi.Input<inputs.GitRepositoryShowOutput>[]>;
}

/**
 * The set of arguments for constructing a GitRepository resource.
 */
export interface GitRepositoryArgs {
    /**
     * Identifier of API INTEGRATION containing information about the remote Git repository such as allowed credentials and prefixes for target URLs.
     */
    apiIntegration: pulumi.Input<string>;
    /**
     * Specifies a comment for the git repository.
     */
    comment?: pulumi.Input<string>;
    /**
     * The database in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    database: pulumi.Input<string>;
    /**
     * Specifies the Snowflake secret fully qualified name (e.g `"\"<db_name>\".\"<schema_name>\".\"<secret_name>\""`) containing the credentials to use for authenticating with the remote Git repository. Omit this parameter to use the default secret specified by the API integration or if this integration does not require authentication.
     */
    gitCredentials?: pulumi.Input<string>;
    /**
     * Specifies the identifier for the git repository; must be unique for the schema in which the git repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the origin URL of the remote Git repository that this Git repository clone represents. The URL must use HTTPS.
     */
    origin: pulumi.Input<string>;
    /**
     * The schema in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    schema: pulumi.Input<string>;
}
