// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * format is database name | schema name | stage name
 *
 * ```sh
 * $ pulumi import snowflake:index/stage:Stage example 'dbName|schemaName|stageName'
 * ```
 */
export class Stage extends pulumi.CustomResource {
    /**
     * Get an existing Stage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StageState, opts?: pulumi.CustomResourceOptions): Stage {
        return new Stage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/stage:Stage';

    /**
     * Returns true if the given object is an instance of Stage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Stage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Stage.__pulumiType;
    }

    /**
     * A unique ID assigned to the specific stage. The ID has the following format: &lt;snowflakeAccount&gt;*SFCRole=&lt;snowflakeRoleId&gt;*&lt;randomId&gt;
     */
    declare public readonly awsExternalId: pulumi.Output<string>;
    /**
     * Specifies a comment for the stage.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * Specifies the copy options for the stage.
     */
    declare public readonly copyOptions: pulumi.Output<string | undefined>;
    /**
     * Specifies the credentials for the stage.
     */
    declare public readonly credentials: pulumi.Output<string | undefined>;
    /**
     * The database in which to create the stage.
     */
    declare public readonly database: pulumi.Output<string>;
    /**
     * Specifies the directory settings for the stage.
     */
    declare public readonly directory: pulumi.Output<string | undefined>;
    /**
     * Specifies the encryption settings for the stage.
     */
    declare public readonly encryption: pulumi.Output<string | undefined>;
    /**
     * Specifies the file format for the stage. Specifying the default Snowflake value (e.g. TYPE = CSV) will currently result in a permadiff (check #2679). For now, omit the default values; it will be fixed in the upcoming provider versions. Examples of usage: \n\n1. with hardcoding value:\n\n `file_format="FORMAT_NAME = DB.SCHEMA.FORMATNAME"` \n\n2. from dynamic value:\n\n `fileFormat = "FORMAT_NAME = ${snowflake_file_format.myfileformat.fully_qualified_name}"` \n\n3. from expression:\n\n `fileFormat = format("FORMAT_NAME =%s.%s.MYFILEFORMAT", var.db_name, each.value.schema_name)`. Reference: #265
     */
    declare public readonly fileFormat: pulumi.Output<string | undefined>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    declare public /*out*/ readonly fullyQualifiedName: pulumi.Output<string>;
    /**
     * Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The schema in which to create the stage.
     */
    declare public readonly schema: pulumi.Output<string>;
    /**
     * An AWS IAM user created for your Snowflake account. This user is the same for every external S3 stage created in your account.
     */
    declare public readonly snowflakeIamUser: pulumi.Output<string>;
    /**
     * Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage to a Snowflake identity and access management (IAM) entity.
     */
    declare public readonly storageIntegration: pulumi.Output<string | undefined>;
    /**
     * Definitions of a tag to associate with the resource.
     *
     * @deprecated Use the 'snowflake_tag_association' resource instead.
     */
    declare public readonly tags: pulumi.Output<outputs.StageTag[] | undefined>;
    /**
     * Specifies the URL for the stage.
     */
    declare public readonly url: pulumi.Output<string | undefined>;

    /**
     * Create a Stage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StageArgs | StageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StageState | undefined;
            resourceInputs["awsExternalId"] = state?.awsExternalId;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["copyOptions"] = state?.copyOptions;
            resourceInputs["credentials"] = state?.credentials;
            resourceInputs["database"] = state?.database;
            resourceInputs["directory"] = state?.directory;
            resourceInputs["encryption"] = state?.encryption;
            resourceInputs["fileFormat"] = state?.fileFormat;
            resourceInputs["fullyQualifiedName"] = state?.fullyQualifiedName;
            resourceInputs["name"] = state?.name;
            resourceInputs["schema"] = state?.schema;
            resourceInputs["snowflakeIamUser"] = state?.snowflakeIamUser;
            resourceInputs["storageIntegration"] = state?.storageIntegration;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["url"] = state?.url;
        } else {
            const args = argsOrState as StageArgs | undefined;
            if (args?.database === undefined && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if (args?.schema === undefined && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            resourceInputs["awsExternalId"] = args?.awsExternalId;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["copyOptions"] = args?.copyOptions;
            resourceInputs["credentials"] = args?.credentials ? pulumi.secret(args.credentials) : undefined;
            resourceInputs["database"] = args?.database;
            resourceInputs["directory"] = args?.directory;
            resourceInputs["encryption"] = args?.encryption;
            resourceInputs["fileFormat"] = args?.fileFormat;
            resourceInputs["name"] = args?.name;
            resourceInputs["schema"] = args?.schema;
            resourceInputs["snowflakeIamUser"] = args?.snowflakeIamUser;
            resourceInputs["storageIntegration"] = args?.storageIntegration;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["url"] = args?.url;
            resourceInputs["fullyQualifiedName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["credentials"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Stage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Stage resources.
 */
export interface StageState {
    /**
     * A unique ID assigned to the specific stage. The ID has the following format: &lt;snowflakeAccount&gt;*SFCRole=&lt;snowflakeRoleId&gt;*&lt;randomId&gt;
     */
    awsExternalId?: pulumi.Input<string>;
    /**
     * Specifies a comment for the stage.
     */
    comment?: pulumi.Input<string>;
    /**
     * Specifies the copy options for the stage.
     */
    copyOptions?: pulumi.Input<string>;
    /**
     * Specifies the credentials for the stage.
     */
    credentials?: pulumi.Input<string>;
    /**
     * The database in which to create the stage.
     */
    database?: pulumi.Input<string>;
    /**
     * Specifies the directory settings for the stage.
     */
    directory?: pulumi.Input<string>;
    /**
     * Specifies the encryption settings for the stage.
     */
    encryption?: pulumi.Input<string>;
    /**
     * Specifies the file format for the stage. Specifying the default Snowflake value (e.g. TYPE = CSV) will currently result in a permadiff (check #2679). For now, omit the default values; it will be fixed in the upcoming provider versions. Examples of usage: \n\n1. with hardcoding value:\n\n `file_format="FORMAT_NAME = DB.SCHEMA.FORMATNAME"` \n\n2. from dynamic value:\n\n `fileFormat = "FORMAT_NAME = ${snowflake_file_format.myfileformat.fully_qualified_name}"` \n\n3. from expression:\n\n `fileFormat = format("FORMAT_NAME =%s.%s.MYFILEFORMAT", var.db_name, each.value.schema_name)`. Reference: #265
     */
    fileFormat?: pulumi.Input<string>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    fullyQualifiedName?: pulumi.Input<string>;
    /**
     * Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.
     */
    name?: pulumi.Input<string>;
    /**
     * The schema in which to create the stage.
     */
    schema?: pulumi.Input<string>;
    /**
     * An AWS IAM user created for your Snowflake account. This user is the same for every external S3 stage created in your account.
     */
    snowflakeIamUser?: pulumi.Input<string>;
    /**
     * Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage to a Snowflake identity and access management (IAM) entity.
     */
    storageIntegration?: pulumi.Input<string>;
    /**
     * Definitions of a tag to associate with the resource.
     *
     * @deprecated Use the 'snowflake_tag_association' resource instead.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.StageTag>[]>;
    /**
     * Specifies the URL for the stage.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Stage resource.
 */
export interface StageArgs {
    /**
     * A unique ID assigned to the specific stage. The ID has the following format: &lt;snowflakeAccount&gt;*SFCRole=&lt;snowflakeRoleId&gt;*&lt;randomId&gt;
     */
    awsExternalId?: pulumi.Input<string>;
    /**
     * Specifies a comment for the stage.
     */
    comment?: pulumi.Input<string>;
    /**
     * Specifies the copy options for the stage.
     */
    copyOptions?: pulumi.Input<string>;
    /**
     * Specifies the credentials for the stage.
     */
    credentials?: pulumi.Input<string>;
    /**
     * The database in which to create the stage.
     */
    database: pulumi.Input<string>;
    /**
     * Specifies the directory settings for the stage.
     */
    directory?: pulumi.Input<string>;
    /**
     * Specifies the encryption settings for the stage.
     */
    encryption?: pulumi.Input<string>;
    /**
     * Specifies the file format for the stage. Specifying the default Snowflake value (e.g. TYPE = CSV) will currently result in a permadiff (check #2679). For now, omit the default values; it will be fixed in the upcoming provider versions. Examples of usage: \n\n1. with hardcoding value:\n\n `file_format="FORMAT_NAME = DB.SCHEMA.FORMATNAME"` \n\n2. from dynamic value:\n\n `fileFormat = "FORMAT_NAME = ${snowflake_file_format.myfileformat.fully_qualified_name}"` \n\n3. from expression:\n\n `fileFormat = format("FORMAT_NAME =%s.%s.MYFILEFORMAT", var.db_name, each.value.schema_name)`. Reference: #265
     */
    fileFormat?: pulumi.Input<string>;
    /**
     * Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.
     */
    name?: pulumi.Input<string>;
    /**
     * The schema in which to create the stage.
     */
    schema: pulumi.Input<string>;
    /**
     * An AWS IAM user created for your Snowflake account. This user is the same for every external S3 stage created in your account.
     */
    snowflakeIamUser?: pulumi.Input<string>;
    /**
     * Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage to a Snowflake identity and access management (IAM) entity.
     */
    storageIntegration?: pulumi.Input<string>;
    /**
     * Definitions of a tag to associate with the resource.
     *
     * @deprecated Use the 'snowflake_tag_association' resource instead.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.StageTag>[]>;
    /**
     * Specifies the URL for the stage.
     */
    url?: pulumi.Input<string>;
}
