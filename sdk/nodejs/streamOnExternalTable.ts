// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * ```sh
 * $ pulumi import snowflake:index/streamOnExternalTable:StreamOnExternalTable example '"<database_name>"."<schema_name>"."<stream_name>"'
 * ```
 */
export class StreamOnExternalTable extends pulumi.CustomResource {
    /**
     * Get an existing StreamOnExternalTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamOnExternalTableState, opts?: pulumi.CustomResourceOptions): StreamOnExternalTable {
        return new StreamOnExternalTable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/streamOnExternalTable:StreamOnExternalTable';

    /**
     * Returns true if the given object is an instance of StreamOnExternalTable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StreamOnExternalTable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamOnExternalTable.__pulumiType;
    }

    declare public readonly at: pulumi.Output<outputs.StreamOnExternalTableAt | undefined>;
    declare public readonly before: pulumi.Output<outputs.StreamOnExternalTableBefore | undefined>;
    /**
     * Specifies a comment for the stream.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    declare public readonly copyGrants: pulumi.Output<boolean | undefined>;
    /**
     * The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    declare public readonly database: pulumi.Output<string>;
    /**
     * Outputs the result of `DESCRIBE STREAM` for the given stream.
     */
    declare public /*out*/ readonly describeOutputs: pulumi.Output<outputs.StreamOnExternalTableDescribeOutput[]>;
    /**
     * Specifies an identifier for the external table the stream will monitor. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
     */
    declare public readonly externalTable: pulumi.Output<string>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    declare public /*out*/ readonly fullyQualifiedName: pulumi.Output<string>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this is an insert-only stream. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
     */
    declare public readonly insertOnly: pulumi.Output<string | undefined>;
    /**
     * Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    declare public readonly schema: pulumi.Output<string>;
    /**
     * Outputs the result of `SHOW STREAMS` for the given stream.
     */
    declare public /*out*/ readonly showOutputs: pulumi.Output<outputs.StreamOnExternalTableShowOutput[]>;
    declare public /*out*/ readonly stale: pulumi.Output<boolean>;
    /**
     * Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.
     */
    declare public /*out*/ readonly streamType: pulumi.Output<string>;

    /**
     * Create a StreamOnExternalTable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamOnExternalTableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamOnExternalTableArgs | StreamOnExternalTableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamOnExternalTableState | undefined;
            resourceInputs["at"] = state?.at;
            resourceInputs["before"] = state?.before;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["copyGrants"] = state?.copyGrants;
            resourceInputs["database"] = state?.database;
            resourceInputs["describeOutputs"] = state?.describeOutputs;
            resourceInputs["externalTable"] = state?.externalTable;
            resourceInputs["fullyQualifiedName"] = state?.fullyQualifiedName;
            resourceInputs["insertOnly"] = state?.insertOnly;
            resourceInputs["name"] = state?.name;
            resourceInputs["schema"] = state?.schema;
            resourceInputs["showOutputs"] = state?.showOutputs;
            resourceInputs["stale"] = state?.stale;
            resourceInputs["streamType"] = state?.streamType;
        } else {
            const args = argsOrState as StreamOnExternalTableArgs | undefined;
            if (args?.database === undefined && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if (args?.externalTable === undefined && !opts.urn) {
                throw new Error("Missing required property 'externalTable'");
            }
            if (args?.schema === undefined && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            resourceInputs["at"] = args?.at;
            resourceInputs["before"] = args?.before;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["copyGrants"] = args?.copyGrants;
            resourceInputs["database"] = args?.database;
            resourceInputs["externalTable"] = args?.externalTable;
            resourceInputs["insertOnly"] = args?.insertOnly;
            resourceInputs["name"] = args?.name;
            resourceInputs["schema"] = args?.schema;
            resourceInputs["describeOutputs"] = undefined /*out*/;
            resourceInputs["fullyQualifiedName"] = undefined /*out*/;
            resourceInputs["showOutputs"] = undefined /*out*/;
            resourceInputs["stale"] = undefined /*out*/;
            resourceInputs["streamType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StreamOnExternalTable.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StreamOnExternalTable resources.
 */
export interface StreamOnExternalTableState {
    at?: pulumi.Input<inputs.StreamOnExternalTableAt>;
    before?: pulumi.Input<inputs.StreamOnExternalTableBefore>;
    /**
     * Specifies a comment for the stream.
     */
    comment?: pulumi.Input<string>;
    copyGrants?: pulumi.Input<boolean>;
    /**
     * The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    database?: pulumi.Input<string>;
    /**
     * Outputs the result of `DESCRIBE STREAM` for the given stream.
     */
    describeOutputs?: pulumi.Input<pulumi.Input<inputs.StreamOnExternalTableDescribeOutput>[]>;
    /**
     * Specifies an identifier for the external table the stream will monitor. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
     */
    externalTable?: pulumi.Input<string>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    fullyQualifiedName?: pulumi.Input<string>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this is an insert-only stream. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
     */
    insertOnly?: pulumi.Input<string>;
    /**
     * Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    name?: pulumi.Input<string>;
    /**
     * The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    schema?: pulumi.Input<string>;
    /**
     * Outputs the result of `SHOW STREAMS` for the given stream.
     */
    showOutputs?: pulumi.Input<pulumi.Input<inputs.StreamOnExternalTableShowOutput>[]>;
    stale?: pulumi.Input<boolean>;
    /**
     * Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.
     */
    streamType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StreamOnExternalTable resource.
 */
export interface StreamOnExternalTableArgs {
    at?: pulumi.Input<inputs.StreamOnExternalTableAt>;
    before?: pulumi.Input<inputs.StreamOnExternalTableBefore>;
    /**
     * Specifies a comment for the stream.
     */
    comment?: pulumi.Input<string>;
    copyGrants?: pulumi.Input<boolean>;
    /**
     * The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    database: pulumi.Input<string>;
    /**
     * Specifies an identifier for the external table the stream will monitor. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
     */
    externalTable: pulumi.Input<string>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this is an insert-only stream. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
     */
    insertOnly?: pulumi.Input<string>;
    /**
     * Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    name?: pulumi.Input<string>;
    /**
     * The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    schema: pulumi.Input<string>;
}
