// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * ```sh
 * $ pulumi import snowflake:index/listing:Listing example '"<listing_name>"'
 * ```
 */
export class Listing extends pulumi.CustomResource {
    /**
     * Get an existing Listing resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ListingState, opts?: pulumi.CustomResourceOptions): Listing {
        return new Listing(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/listing:Listing';

    /**
     * Returns true if the given object is an instance of Listing.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Listing {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Listing.__pulumiType;
    }

    /**
     * Specifies the application package attached to the listing.
     */
    declare public readonly applicationPackage: pulumi.Output<string | undefined>;
    /**
     * Specifies a comment for the listing.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    declare public /*out*/ readonly fullyQualifiedName: pulumi.Output<string>;
    declare public readonly manifest: pulumi.Output<outputs.ListingManifest>;
    /**
     * Specifies the listing identifier (name). It must be unique within the organization, regardless of which Snowflake region the account is located in. Must start with an alphabetic character and cannot contain spaces or special characters except for underscores.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Determines if the listing should be published.
     */
    declare public readonly publish: pulumi.Output<string | undefined>;
    /**
     * Specifies the identifier for the share to attach to the listing.
     */
    declare public readonly share: pulumi.Output<string | undefined>;
    /**
     * Outputs the result of `SHOW LISTINGS` for the given listing.
     */
    declare public /*out*/ readonly showOutputs: pulumi.Output<outputs.ListingShowOutput[]>;

    /**
     * Create a Listing resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ListingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ListingArgs | ListingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ListingState | undefined;
            resourceInputs["applicationPackage"] = state?.applicationPackage;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["fullyQualifiedName"] = state?.fullyQualifiedName;
            resourceInputs["manifest"] = state?.manifest;
            resourceInputs["name"] = state?.name;
            resourceInputs["publish"] = state?.publish;
            resourceInputs["share"] = state?.share;
            resourceInputs["showOutputs"] = state?.showOutputs;
        } else {
            const args = argsOrState as ListingArgs | undefined;
            if (args?.manifest === undefined && !opts.urn) {
                throw new Error("Missing required property 'manifest'");
            }
            resourceInputs["applicationPackage"] = args?.applicationPackage;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["manifest"] = args?.manifest;
            resourceInputs["name"] = args?.name;
            resourceInputs["publish"] = args?.publish;
            resourceInputs["share"] = args?.share;
            resourceInputs["fullyQualifiedName"] = undefined /*out*/;
            resourceInputs["showOutputs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Listing.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Listing resources.
 */
export interface ListingState {
    /**
     * Specifies the application package attached to the listing.
     */
    applicationPackage?: pulumi.Input<string>;
    /**
     * Specifies a comment for the listing.
     */
    comment?: pulumi.Input<string>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    fullyQualifiedName?: pulumi.Input<string>;
    manifest?: pulumi.Input<inputs.ListingManifest>;
    /**
     * Specifies the listing identifier (name). It must be unique within the organization, regardless of which Snowflake region the account is located in. Must start with an alphabetic character and cannot contain spaces or special characters except for underscores.
     */
    name?: pulumi.Input<string>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Determines if the listing should be published.
     */
    publish?: pulumi.Input<string>;
    /**
     * Specifies the identifier for the share to attach to the listing.
     */
    share?: pulumi.Input<string>;
    /**
     * Outputs the result of `SHOW LISTINGS` for the given listing.
     */
    showOutputs?: pulumi.Input<pulumi.Input<inputs.ListingShowOutput>[]>;
}

/**
 * The set of arguments for constructing a Listing resource.
 */
export interface ListingArgs {
    /**
     * Specifies the application package attached to the listing.
     */
    applicationPackage?: pulumi.Input<string>;
    /**
     * Specifies a comment for the listing.
     */
    comment?: pulumi.Input<string>;
    manifest: pulumi.Input<inputs.ListingManifest>;
    /**
     * Specifies the listing identifier (name). It must be unique within the organization, regardless of which Snowflake region the account is located in. Must start with an alphabetic character and cannot contain spaces or special characters except for underscores.
     */
    name?: pulumi.Input<string>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Determines if the listing should be published.
     */
    publish?: pulumi.Input<string>;
    /**
     * Specifies the identifier for the share to attach to the listing.
     */
    share?: pulumi.Input<string>;
}
