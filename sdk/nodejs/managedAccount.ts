// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * ```sh
 * $ pulumi import snowflake:index/managedAccount:ManagedAccount example name
 * ```
 */
export class ManagedAccount extends pulumi.CustomResource {
    /**
     * Get an existing ManagedAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagedAccountState, opts?: pulumi.CustomResourceOptions): ManagedAccount {
        return new ManagedAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/managedAccount:ManagedAccount';

    /**
     * Returns true if the given object is an instance of ManagedAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedAccount.__pulumiType;
    }

    /**
     * Identifier, as well as login name, for the initial user in the managed account. This user serves as the account administrator for the account.
     */
    declare public readonly adminName: pulumi.Output<string>;
    /**
     * Password for the initial user in the managed account. Check [Snowflake-provided password policy](https://docs.snowflake.com/en/user-guide/admin-user-management#snowflake-provided-password-policy).
     */
    declare public readonly adminPassword: pulumi.Output<string>;
    /**
     * Cloud in which the managed account is located.
     */
    declare public /*out*/ readonly cloud: pulumi.Output<string>;
    /**
     * Specifies a comment for the managed account.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * Date and time when the managed account was created.
     */
    declare public /*out*/ readonly createdOn: pulumi.Output<string>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    declare public /*out*/ readonly fullyQualifiedName: pulumi.Output<string>;
    /**
     * Display name of the managed account.
     */
    declare public /*out*/ readonly locator: pulumi.Output<string>;
    /**
     * Identifier for the managed account; must be unique for your account.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Snowflake Region in which the managed account is located.
     */
    declare public /*out*/ readonly region: pulumi.Output<string>;
    /**
     * (Default: `READER`) Specifies the type of managed account.
     */
    declare public readonly type: pulumi.Output<string | undefined>;
    /**
     * URL for accessing the managed account, particularly through the web interface.
     */
    declare public /*out*/ readonly url: pulumi.Output<string>;

    /**
     * Create a ManagedAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagedAccountArgs | ManagedAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagedAccountState | undefined;
            resourceInputs["adminName"] = state?.adminName;
            resourceInputs["adminPassword"] = state?.adminPassword;
            resourceInputs["cloud"] = state?.cloud;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["createdOn"] = state?.createdOn;
            resourceInputs["fullyQualifiedName"] = state?.fullyQualifiedName;
            resourceInputs["locator"] = state?.locator;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["type"] = state?.type;
            resourceInputs["url"] = state?.url;
        } else {
            const args = argsOrState as ManagedAccountArgs | undefined;
            if (args?.adminName === undefined && !opts.urn) {
                throw new Error("Missing required property 'adminName'");
            }
            if (args?.adminPassword === undefined && !opts.urn) {
                throw new Error("Missing required property 'adminPassword'");
            }
            resourceInputs["adminName"] = args?.adminName;
            resourceInputs["adminPassword"] = args?.adminPassword ? pulumi.secret(args.adminPassword) : undefined;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["name"] = args?.name;
            resourceInputs["type"] = args?.type;
            resourceInputs["cloud"] = undefined /*out*/;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["fullyQualifiedName"] = undefined /*out*/;
            resourceInputs["locator"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ManagedAccount.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ManagedAccount resources.
 */
export interface ManagedAccountState {
    /**
     * Identifier, as well as login name, for the initial user in the managed account. This user serves as the account administrator for the account.
     */
    adminName?: pulumi.Input<string>;
    /**
     * Password for the initial user in the managed account. Check [Snowflake-provided password policy](https://docs.snowflake.com/en/user-guide/admin-user-management#snowflake-provided-password-policy).
     */
    adminPassword?: pulumi.Input<string>;
    /**
     * Cloud in which the managed account is located.
     */
    cloud?: pulumi.Input<string>;
    /**
     * Specifies a comment for the managed account.
     */
    comment?: pulumi.Input<string>;
    /**
     * Date and time when the managed account was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    fullyQualifiedName?: pulumi.Input<string>;
    /**
     * Display name of the managed account.
     */
    locator?: pulumi.Input<string>;
    /**
     * Identifier for the managed account; must be unique for your account.
     */
    name?: pulumi.Input<string>;
    /**
     * Snowflake Region in which the managed account is located.
     */
    region?: pulumi.Input<string>;
    /**
     * (Default: `READER`) Specifies the type of managed account.
     */
    type?: pulumi.Input<string>;
    /**
     * URL for accessing the managed account, particularly through the web interface.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagedAccount resource.
 */
export interface ManagedAccountArgs {
    /**
     * Identifier, as well as login name, for the initial user in the managed account. This user serves as the account administrator for the account.
     */
    adminName: pulumi.Input<string>;
    /**
     * Password for the initial user in the managed account. Check [Snowflake-provided password policy](https://docs.snowflake.com/en/user-guide/admin-user-management#snowflake-provided-password-policy).
     */
    adminPassword: pulumi.Input<string>;
    /**
     * Specifies a comment for the managed account.
     */
    comment?: pulumi.Input<string>;
    /**
     * Identifier for the managed account; must be unique for your account.
     */
    name?: pulumi.Input<string>;
    /**
     * (Default: `READER`) Specifies the type of managed account.
     */
    type?: pulumi.Input<string>;
}
