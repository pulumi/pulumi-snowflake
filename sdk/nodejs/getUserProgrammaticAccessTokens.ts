// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * !> **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `previewFeaturesEnabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
 *
 * Data source used to get details of filtered user programmatic access tokens. Filtering is aligned with the current possibilities for [SHOW USER PROGRAMMATIC ACCESS TOKENS](https://docs.snowflake.com/en/sql-reference/sql/show-user-programmatic-access-tokens) query. The results of SHOW are encapsulated in one output collection `userProgrammaticAccessTokens`.
 */
export function getUserProgrammaticAccessTokens(args: GetUserProgrammaticAccessTokensArgs, opts?: pulumi.InvokeOptions): Promise<GetUserProgrammaticAccessTokensResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("snowflake:index/getUserProgrammaticAccessTokens:getUserProgrammaticAccessTokens", {
        "forUser": args.forUser,
    }, opts);
}

/**
 * A collection of arguments for invoking getUserProgrammaticAccessTokens.
 */
export interface GetUserProgrammaticAccessTokensArgs {
    /**
     * Returns programmatic access tokens for the specified user.
     */
    forUser: string;
}

/**
 * A collection of values returned by getUserProgrammaticAccessTokens.
 */
export interface GetUserProgrammaticAccessTokensResult {
    /**
     * Returns programmatic access tokens for the specified user.
     */
    readonly forUser: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Holds the aggregated output of all user programmatic access tokens details queries.
     */
    readonly userProgrammaticAccessTokens: outputs.GetUserProgrammaticAccessTokensUserProgrammaticAccessToken[];
}
/**
 * !> **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `previewFeaturesEnabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
 *
 * Data source used to get details of filtered user programmatic access tokens. Filtering is aligned with the current possibilities for [SHOW USER PROGRAMMATIC ACCESS TOKENS](https://docs.snowflake.com/en/sql-reference/sql/show-user-programmatic-access-tokens) query. The results of SHOW are encapsulated in one output collection `userProgrammaticAccessTokens`.
 */
export function getUserProgrammaticAccessTokensOutput(args: GetUserProgrammaticAccessTokensOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetUserProgrammaticAccessTokensResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("snowflake:index/getUserProgrammaticAccessTokens:getUserProgrammaticAccessTokens", {
        "forUser": args.forUser,
    }, opts);
}

/**
 * A collection of arguments for invoking getUserProgrammaticAccessTokens.
 */
export interface GetUserProgrammaticAccessTokensOutputArgs {
    /**
     * Returns programmatic access tokens for the specified user.
     */
    forUser: pulumi.Input<string>;
}
