// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * !> **V1 release candidate** This resource was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the resource if needed. Any errors reported will be resolved with a higher priority. We encourage checking this resource out before the V1 release. Please follow the migration guide to use it.
 *
 * Resource used to control network traffic. For more information, check an [official guide](https://docs.snowflake.com/en/user-guide/network-policies) on controlling network traffic with network policies.
 *
 * ## Minimal
 *
 * resource "snowflake.NetworkPolicy" "basic" {
 *   name = "networkPolicyName"
 * }
 *
 * ## Complete (with every optional set)
 *
 * resource "snowflake.NetworkPolicy" "basic" {
 *   name                      = "networkPolicyName"
 *   allowedNetworkRuleList = ["<fully qualified network rule id>"]
 *   blockedNetworkRuleList = ["<fully qualified network rule id>"]
 *   allowedIpList           = ["192.168.1.0/24"]
 *   blockedIpList           = ["192.168.1.99"]
 *   comment                   = "my network policy"
 * }
 */
export class NetworkPolicy extends pulumi.CustomResource {
    /**
     * Get an existing NetworkPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkPolicyState, opts?: pulumi.CustomResourceOptions): NetworkPolicy {
        return new NetworkPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/networkPolicy:NetworkPolicy';

    /**
     * Returns true if the given object is an instance of NetworkPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkPolicy.__pulumiType;
    }

    /**
     * Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account.
     */
    public readonly allowedIpLists!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies a list of fully qualified network rules that contain the network identifiers that are allowed access to Snowflake.
     */
    public readonly allowedNetworkRuleLists!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account. **Do not** add `0.0.0.0/0` to `blockedIpList`, in order to block all IP addresses except a select list, you only need to add IP addresses to `allowedIpList`.
     */
    public readonly blockedIpLists!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies a list of fully qualified network rules that contain the network identifiers that are denied access to Snowflake.
     */
    public readonly blockedNetworkRuleLists!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies a comment for the network policy.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Outputs the result of `DESCRIBE NETWORK POLICY` for the given network policy.
     */
    public /*out*/ readonly describeOutputs!: pulumi.Output<outputs.NetworkPolicyDescribeOutput[]>;
    /**
     * Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Outputs the result of `SHOW NETWORK POLICIES` for the given network policy.
     */
    public /*out*/ readonly showOutputs!: pulumi.Output<outputs.NetworkPolicyShowOutput[]>;

    /**
     * Create a NetworkPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NetworkPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkPolicyArgs | NetworkPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkPolicyState | undefined;
            resourceInputs["allowedIpLists"] = state ? state.allowedIpLists : undefined;
            resourceInputs["allowedNetworkRuleLists"] = state ? state.allowedNetworkRuleLists : undefined;
            resourceInputs["blockedIpLists"] = state ? state.blockedIpLists : undefined;
            resourceInputs["blockedNetworkRuleLists"] = state ? state.blockedNetworkRuleLists : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["describeOutputs"] = state ? state.describeOutputs : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["showOutputs"] = state ? state.showOutputs : undefined;
        } else {
            const args = argsOrState as NetworkPolicyArgs | undefined;
            resourceInputs["allowedIpLists"] = args ? args.allowedIpLists : undefined;
            resourceInputs["allowedNetworkRuleLists"] = args ? args.allowedNetworkRuleLists : undefined;
            resourceInputs["blockedIpLists"] = args ? args.blockedIpLists : undefined;
            resourceInputs["blockedNetworkRuleLists"] = args ? args.blockedNetworkRuleLists : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["describeOutputs"] = undefined /*out*/;
            resourceInputs["showOutputs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkPolicy resources.
 */
export interface NetworkPolicyState {
    /**
     * Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account.
     */
    allowedIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a list of fully qualified network rules that contain the network identifiers that are allowed access to Snowflake.
     */
    allowedNetworkRuleLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account. **Do not** add `0.0.0.0/0` to `blockedIpList`, in order to block all IP addresses except a select list, you only need to add IP addresses to `allowedIpList`.
     */
    blockedIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a list of fully qualified network rules that contain the network identifiers that are denied access to Snowflake.
     */
    blockedNetworkRuleLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a comment for the network policy.
     */
    comment?: pulumi.Input<string>;
    /**
     * Outputs the result of `DESCRIBE NETWORK POLICY` for the given network policy.
     */
    describeOutputs?: pulumi.Input<pulumi.Input<inputs.NetworkPolicyDescribeOutput>[]>;
    /**
     * Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.
     */
    name?: pulumi.Input<string>;
    /**
     * Outputs the result of `SHOW NETWORK POLICIES` for the given network policy.
     */
    showOutputs?: pulumi.Input<pulumi.Input<inputs.NetworkPolicyShowOutput>[]>;
}

/**
 * The set of arguments for constructing a NetworkPolicy resource.
 */
export interface NetworkPolicyArgs {
    /**
     * Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account.
     */
    allowedIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a list of fully qualified network rules that contain the network identifiers that are allowed access to Snowflake.
     */
    allowedNetworkRuleLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account. **Do not** add `0.0.0.0/0` to `blockedIpList`, in order to block all IP addresses except a select list, you only need to add IP addresses to `allowedIpList`.
     */
    blockedIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a list of fully qualified network rules that contain the network identifiers that are denied access to Snowflake.
     */
    blockedNetworkRuleLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a comment for the network policy.
     */
    comment?: pulumi.Input<string>;
    /**
     * Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.
     */
    name?: pulumi.Input<string>;
}
