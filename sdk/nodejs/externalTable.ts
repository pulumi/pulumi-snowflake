// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * format is database name | schema name | external table name
 *
 * ```sh
 * $ pulumi import snowflake:index/externalTable:ExternalTable example 'dbName|schemaName|externalTableName'
 * ```
 */
export class ExternalTable extends pulumi.CustomResource {
    /**
     * Get an existing ExternalTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExternalTableState, opts?: pulumi.CustomResourceOptions): ExternalTable {
        return new ExternalTable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/externalTable:ExternalTable';

    /**
     * Returns true if the given object is an instance of ExternalTable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExternalTable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExternalTable.__pulumiType;
    }

    /**
     * (Default: `true`) Specifies whether to automatically refresh the external table metadata once, immediately after the external table is created.
     */
    declare public readonly autoRefresh: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the aws sns topic for the external table.
     */
    declare public readonly awsSnsTopic: pulumi.Output<string | undefined>;
    /**
     * Definitions of a column to create in the external table. Minimum one required.
     */
    declare public readonly columns: pulumi.Output<outputs.ExternalTableColumn[]>;
    /**
     * Specifies a comment for the external table.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * (Default: `false`) Specifies to retain the access permissions from the original table when an external table is recreated using the CREATE OR REPLACE TABLE variant
     */
    declare public readonly copyGrants: pulumi.Output<boolean | undefined>;
    /**
     * The database in which to create the external table.
     */
    declare public readonly database: pulumi.Output<string>;
    /**
     * Specifies the file format for the external table.
     */
    declare public readonly fileFormat: pulumi.Output<string>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    declare public /*out*/ readonly fullyQualifiedName: pulumi.Output<string>;
    /**
     * Specifies a location for the external table, using its FQDN. You can hardcode it (`"@MYDB.MYSCHEMA.MYSTAGE"`), or populate dynamically (`"@${snowflake_stage.mystage.fully_qualified_name}"`)
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Specifies the identifier for the external table; must be unique for the database and schema in which the externalTable is created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Name of the role that owns the external table.
     */
    declare public /*out*/ readonly owner: pulumi.Output<string>;
    /**
     * Specifies any partition columns to evaluate for the external table.
     */
    declare public readonly partitionBies: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the file names and/or paths on the external stage to match.
     */
    declare public readonly pattern: pulumi.Output<string | undefined>;
    /**
     * (Default: `true`) Specifies weather to refresh when an external table is created.
     */
    declare public readonly refreshOnCreate: pulumi.Output<boolean | undefined>;
    /**
     * The schema in which to create the external table.
     */
    declare public readonly schema: pulumi.Output<string>;
    /**
     * Identifies the external table table type. For now, only "delta" for Delta Lake table format is supported.
     */
    declare public readonly tableFormat: pulumi.Output<string | undefined>;
    /**
     * Definitions of a tag to associate with the resource.
     *
     * @deprecated Use the 'snowflake_tag_association' resource instead.
     */
    declare public readonly tags: pulumi.Output<outputs.ExternalTableTag[] | undefined>;

    /**
     * Create a ExternalTable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExternalTableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExternalTableArgs | ExternalTableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExternalTableState | undefined;
            resourceInputs["autoRefresh"] = state?.autoRefresh;
            resourceInputs["awsSnsTopic"] = state?.awsSnsTopic;
            resourceInputs["columns"] = state?.columns;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["copyGrants"] = state?.copyGrants;
            resourceInputs["database"] = state?.database;
            resourceInputs["fileFormat"] = state?.fileFormat;
            resourceInputs["fullyQualifiedName"] = state?.fullyQualifiedName;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["owner"] = state?.owner;
            resourceInputs["partitionBies"] = state?.partitionBies;
            resourceInputs["pattern"] = state?.pattern;
            resourceInputs["refreshOnCreate"] = state?.refreshOnCreate;
            resourceInputs["schema"] = state?.schema;
            resourceInputs["tableFormat"] = state?.tableFormat;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as ExternalTableArgs | undefined;
            if (args?.columns === undefined && !opts.urn) {
                throw new Error("Missing required property 'columns'");
            }
            if (args?.database === undefined && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if (args?.fileFormat === undefined && !opts.urn) {
                throw new Error("Missing required property 'fileFormat'");
            }
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if (args?.schema === undefined && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            resourceInputs["autoRefresh"] = args?.autoRefresh;
            resourceInputs["awsSnsTopic"] = args?.awsSnsTopic;
            resourceInputs["columns"] = args?.columns;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["copyGrants"] = args?.copyGrants;
            resourceInputs["database"] = args?.database;
            resourceInputs["fileFormat"] = args?.fileFormat;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["partitionBies"] = args?.partitionBies;
            resourceInputs["pattern"] = args?.pattern;
            resourceInputs["refreshOnCreate"] = args?.refreshOnCreate;
            resourceInputs["schema"] = args?.schema;
            resourceInputs["tableFormat"] = args?.tableFormat;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["fullyQualifiedName"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExternalTable.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExternalTable resources.
 */
export interface ExternalTableState {
    /**
     * (Default: `true`) Specifies whether to automatically refresh the external table metadata once, immediately after the external table is created.
     */
    autoRefresh?: pulumi.Input<boolean>;
    /**
     * Specifies the aws sns topic for the external table.
     */
    awsSnsTopic?: pulumi.Input<string>;
    /**
     * Definitions of a column to create in the external table. Minimum one required.
     */
    columns?: pulumi.Input<pulumi.Input<inputs.ExternalTableColumn>[]>;
    /**
     * Specifies a comment for the external table.
     */
    comment?: pulumi.Input<string>;
    /**
     * (Default: `false`) Specifies to retain the access permissions from the original table when an external table is recreated using the CREATE OR REPLACE TABLE variant
     */
    copyGrants?: pulumi.Input<boolean>;
    /**
     * The database in which to create the external table.
     */
    database?: pulumi.Input<string>;
    /**
     * Specifies the file format for the external table.
     */
    fileFormat?: pulumi.Input<string>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    fullyQualifiedName?: pulumi.Input<string>;
    /**
     * Specifies a location for the external table, using its FQDN. You can hardcode it (`"@MYDB.MYSCHEMA.MYSTAGE"`), or populate dynamically (`"@${snowflake_stage.mystage.fully_qualified_name}"`)
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the identifier for the external table; must be unique for the database and schema in which the externalTable is created.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the role that owns the external table.
     */
    owner?: pulumi.Input<string>;
    /**
     * Specifies any partition columns to evaluate for the external table.
     */
    partitionBies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the file names and/or paths on the external stage to match.
     */
    pattern?: pulumi.Input<string>;
    /**
     * (Default: `true`) Specifies weather to refresh when an external table is created.
     */
    refreshOnCreate?: pulumi.Input<boolean>;
    /**
     * The schema in which to create the external table.
     */
    schema?: pulumi.Input<string>;
    /**
     * Identifies the external table table type. For now, only "delta" for Delta Lake table format is supported.
     */
    tableFormat?: pulumi.Input<string>;
    /**
     * Definitions of a tag to associate with the resource.
     *
     * @deprecated Use the 'snowflake_tag_association' resource instead.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ExternalTableTag>[]>;
}

/**
 * The set of arguments for constructing a ExternalTable resource.
 */
export interface ExternalTableArgs {
    /**
     * (Default: `true`) Specifies whether to automatically refresh the external table metadata once, immediately after the external table is created.
     */
    autoRefresh?: pulumi.Input<boolean>;
    /**
     * Specifies the aws sns topic for the external table.
     */
    awsSnsTopic?: pulumi.Input<string>;
    /**
     * Definitions of a column to create in the external table. Minimum one required.
     */
    columns: pulumi.Input<pulumi.Input<inputs.ExternalTableColumn>[]>;
    /**
     * Specifies a comment for the external table.
     */
    comment?: pulumi.Input<string>;
    /**
     * (Default: `false`) Specifies to retain the access permissions from the original table when an external table is recreated using the CREATE OR REPLACE TABLE variant
     */
    copyGrants?: pulumi.Input<boolean>;
    /**
     * The database in which to create the external table.
     */
    database: pulumi.Input<string>;
    /**
     * Specifies the file format for the external table.
     */
    fileFormat: pulumi.Input<string>;
    /**
     * Specifies a location for the external table, using its FQDN. You can hardcode it (`"@MYDB.MYSCHEMA.MYSTAGE"`), or populate dynamically (`"@${snowflake_stage.mystage.fully_qualified_name}"`)
     */
    location: pulumi.Input<string>;
    /**
     * Specifies the identifier for the external table; must be unique for the database and schema in which the externalTable is created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies any partition columns to evaluate for the external table.
     */
    partitionBies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the file names and/or paths on the external stage to match.
     */
    pattern?: pulumi.Input<string>;
    /**
     * (Default: `true`) Specifies weather to refresh when an external table is created.
     */
    refreshOnCreate?: pulumi.Input<boolean>;
    /**
     * The schema in which to create the external table.
     */
    schema: pulumi.Input<string>;
    /**
     * Identifies the external table table type. For now, only "delta" for Delta Lake table format is supported.
     */
    tableFormat?: pulumi.Input<string>;
    /**
     * Definitions of a tag to associate with the resource.
     *
     * @deprecated Use the 'snowflake_tag_association' resource instead.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ExternalTableTag>[]>;
}
