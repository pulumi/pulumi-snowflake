// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as snowflake from "@pulumi/snowflake";
 *
 * const aad = new snowflake.ScimIntegration("aad", {
 *     networkPolicy: "AAD_NETWORK_POLICY",
 *     provisionerRole: "AAD_PROVISIONER",
 *     scimClient: "AZURE",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import snowflake:index/scimIntegration:ScimIntegration example name
 * ```
 */
export class ScimIntegration extends pulumi.CustomResource {
    /**
     * Get an existing ScimIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScimIntegrationState, opts?: pulumi.CustomResourceOptions): ScimIntegration {
        return new ScimIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/scimIntegration:ScimIntegration';

    /**
     * Returns true if the given object is an instance of ScimIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScimIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScimIntegration.__pulumiType;
    }

    /**
     * Date and time when the SCIM integration was created.
     */
    public /*out*/ readonly createdOn!: pulumi.Output<string>;
    /**
     * Specifies the name of the SCIM integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies an existing network policy active for your account. The network policy restricts the list of user IP addresses when exchanging an authorization code for an access or refresh token and when using a refresh token to obtain a new access token. If this parameter is not set, the network policy for the account (if any) is used instead.
     */
    public readonly networkPolicy!: pulumi.Output<string | undefined>;
    /**
     * Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into Snowflake using SCIM.
     */
    public readonly provisionerRole!: pulumi.Output<string>;
    /**
     * Specifies the client type for the scim integration
     */
    public readonly scimClient!: pulumi.Output<string>;

    /**
     * Create a ScimIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScimIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScimIntegrationArgs | ScimIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScimIntegrationState | undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkPolicy"] = state ? state.networkPolicy : undefined;
            resourceInputs["provisionerRole"] = state ? state.provisionerRole : undefined;
            resourceInputs["scimClient"] = state ? state.scimClient : undefined;
        } else {
            const args = argsOrState as ScimIntegrationArgs | undefined;
            if ((!args || args.provisionerRole === undefined) && !opts.urn) {
                throw new Error("Missing required property 'provisionerRole'");
            }
            if ((!args || args.scimClient === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scimClient'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkPolicy"] = args ? args.networkPolicy : undefined;
            resourceInputs["provisionerRole"] = args ? args.provisionerRole : undefined;
            resourceInputs["scimClient"] = args ? args.scimClient : undefined;
            resourceInputs["createdOn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScimIntegration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScimIntegration resources.
 */
export interface ScimIntegrationState {
    /**
     * Date and time when the SCIM integration was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * Specifies the name of the SCIM integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies an existing network policy active for your account. The network policy restricts the list of user IP addresses when exchanging an authorization code for an access or refresh token and when using a refresh token to obtain a new access token. If this parameter is not set, the network policy for the account (if any) is used instead.
     */
    networkPolicy?: pulumi.Input<string>;
    /**
     * Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into Snowflake using SCIM.
     */
    provisionerRole?: pulumi.Input<string>;
    /**
     * Specifies the client type for the scim integration
     */
    scimClient?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ScimIntegration resource.
 */
export interface ScimIntegrationArgs {
    /**
     * Specifies the name of the SCIM integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies an existing network policy active for your account. The network policy restricts the list of user IP addresses when exchanging an authorization code for an access or refresh token and when using a refresh token to obtain a new access token. If this parameter is not set, the network policy for the account (if any) is used instead.
     */
    networkPolicy?: pulumi.Input<string>;
    /**
     * Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into Snowflake using SCIM.
     */
    provisionerRole: pulumi.Input<string>;
    /**
     * Specifies the client type for the scim integration
     */
    scimClient: pulumi.Input<string>;
}
