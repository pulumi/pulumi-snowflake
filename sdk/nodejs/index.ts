// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { AccountAuthenticationPolicyAttachmentArgs, AccountAuthenticationPolicyAttachmentState } from "./accountAuthenticationPolicyAttachment";
export type AccountAuthenticationPolicyAttachment = import("./accountAuthenticationPolicyAttachment").AccountAuthenticationPolicyAttachment;
export const AccountAuthenticationPolicyAttachment: typeof import("./accountAuthenticationPolicyAttachment").AccountAuthenticationPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["AccountAuthenticationPolicyAttachment"], () => require("./accountAuthenticationPolicyAttachment"));

export { AccountParameterArgs, AccountParameterState } from "./accountParameter";
export type AccountParameter = import("./accountParameter").AccountParameter;
export const AccountParameter: typeof import("./accountParameter").AccountParameter = null as any;
utilities.lazyLoad(exports, ["AccountParameter"], () => require("./accountParameter"));

export { AccountPasswordPolicyAttachmentArgs, AccountPasswordPolicyAttachmentState } from "./accountPasswordPolicyAttachment";
export type AccountPasswordPolicyAttachment = import("./accountPasswordPolicyAttachment").AccountPasswordPolicyAttachment;
export const AccountPasswordPolicyAttachment: typeof import("./accountPasswordPolicyAttachment").AccountPasswordPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["AccountPasswordPolicyAttachment"], () => require("./accountPasswordPolicyAttachment"));

export { AccountRoleArgs, AccountRoleState } from "./accountRole";
export type AccountRole = import("./accountRole").AccountRole;
export const AccountRole: typeof import("./accountRole").AccountRole = null as any;
utilities.lazyLoad(exports, ["AccountRole"], () => require("./accountRole"));

export { AlertArgs, AlertState } from "./alert";
export type Alert = import("./alert").Alert;
export const Alert: typeof import("./alert").Alert = null as any;
utilities.lazyLoad(exports, ["Alert"], () => require("./alert"));

export { ApiAuthenticationIntegrationWithAuthorizationCodeGrantArgs, ApiAuthenticationIntegrationWithAuthorizationCodeGrantState } from "./apiAuthenticationIntegrationWithAuthorizationCodeGrant";
export type ApiAuthenticationIntegrationWithAuthorizationCodeGrant = import("./apiAuthenticationIntegrationWithAuthorizationCodeGrant").ApiAuthenticationIntegrationWithAuthorizationCodeGrant;
export const ApiAuthenticationIntegrationWithAuthorizationCodeGrant: typeof import("./apiAuthenticationIntegrationWithAuthorizationCodeGrant").ApiAuthenticationIntegrationWithAuthorizationCodeGrant = null as any;
utilities.lazyLoad(exports, ["ApiAuthenticationIntegrationWithAuthorizationCodeGrant"], () => require("./apiAuthenticationIntegrationWithAuthorizationCodeGrant"));

export { ApiAuthenticationIntegrationWithClientCredentialsArgs, ApiAuthenticationIntegrationWithClientCredentialsState } from "./apiAuthenticationIntegrationWithClientCredentials";
export type ApiAuthenticationIntegrationWithClientCredentials = import("./apiAuthenticationIntegrationWithClientCredentials").ApiAuthenticationIntegrationWithClientCredentials;
export const ApiAuthenticationIntegrationWithClientCredentials: typeof import("./apiAuthenticationIntegrationWithClientCredentials").ApiAuthenticationIntegrationWithClientCredentials = null as any;
utilities.lazyLoad(exports, ["ApiAuthenticationIntegrationWithClientCredentials"], () => require("./apiAuthenticationIntegrationWithClientCredentials"));

export { ApiAuthenticationIntegrationWithJwtBearerArgs, ApiAuthenticationIntegrationWithJwtBearerState } from "./apiAuthenticationIntegrationWithJwtBearer";
export type ApiAuthenticationIntegrationWithJwtBearer = import("./apiAuthenticationIntegrationWithJwtBearer").ApiAuthenticationIntegrationWithJwtBearer;
export const ApiAuthenticationIntegrationWithJwtBearer: typeof import("./apiAuthenticationIntegrationWithJwtBearer").ApiAuthenticationIntegrationWithJwtBearer = null as any;
utilities.lazyLoad(exports, ["ApiAuthenticationIntegrationWithJwtBearer"], () => require("./apiAuthenticationIntegrationWithJwtBearer"));

export { ApiIntegrationArgs, ApiIntegrationState } from "./apiIntegration";
export type ApiIntegration = import("./apiIntegration").ApiIntegration;
export const ApiIntegration: typeof import("./apiIntegration").ApiIntegration = null as any;
utilities.lazyLoad(exports, ["ApiIntegration"], () => require("./apiIntegration"));

export { AuthenticationPolicyArgs, AuthenticationPolicyState } from "./authenticationPolicy";
export type AuthenticationPolicy = import("./authenticationPolicy").AuthenticationPolicy;
export const AuthenticationPolicy: typeof import("./authenticationPolicy").AuthenticationPolicy = null as any;
utilities.lazyLoad(exports, ["AuthenticationPolicy"], () => require("./authenticationPolicy"));

export { CortexSearchServiceArgs, CortexSearchServiceState } from "./cortexSearchService";
export type CortexSearchService = import("./cortexSearchService").CortexSearchService;
export const CortexSearchService: typeof import("./cortexSearchService").CortexSearchService = null as any;
utilities.lazyLoad(exports, ["CortexSearchService"], () => require("./cortexSearchService"));

export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { DatabaseRoleArgs, DatabaseRoleState } from "./databaseRole";
export type DatabaseRole = import("./databaseRole").DatabaseRole;
export const DatabaseRole: typeof import("./databaseRole").DatabaseRole = null as any;
utilities.lazyLoad(exports, ["DatabaseRole"], () => require("./databaseRole"));

export { DynamicTableArgs, DynamicTableState } from "./dynamicTable";
export type DynamicTable = import("./dynamicTable").DynamicTable;
export const DynamicTable: typeof import("./dynamicTable").DynamicTable = null as any;
utilities.lazyLoad(exports, ["DynamicTable"], () => require("./dynamicTable"));

export { EmailNotificationIntegrationArgs, EmailNotificationIntegrationState } from "./emailNotificationIntegration";
export type EmailNotificationIntegration = import("./emailNotificationIntegration").EmailNotificationIntegration;
export const EmailNotificationIntegration: typeof import("./emailNotificationIntegration").EmailNotificationIntegration = null as any;
utilities.lazyLoad(exports, ["EmailNotificationIntegration"], () => require("./emailNotificationIntegration"));

export { ExecuteArgs, ExecuteState } from "./execute";
export type Execute = import("./execute").Execute;
export const Execute: typeof import("./execute").Execute = null as any;
utilities.lazyLoad(exports, ["Execute"], () => require("./execute"));

export { ExternalFunctionArgs, ExternalFunctionState } from "./externalFunction";
export type ExternalFunction = import("./externalFunction").ExternalFunction;
export const ExternalFunction: typeof import("./externalFunction").ExternalFunction = null as any;
utilities.lazyLoad(exports, ["ExternalFunction"], () => require("./externalFunction"));

export { ExternalOauthIntegrationArgs, ExternalOauthIntegrationState } from "./externalOauthIntegration";
export type ExternalOauthIntegration = import("./externalOauthIntegration").ExternalOauthIntegration;
export const ExternalOauthIntegration: typeof import("./externalOauthIntegration").ExternalOauthIntegration = null as any;
utilities.lazyLoad(exports, ["ExternalOauthIntegration"], () => require("./externalOauthIntegration"));

export { ExternalTableArgs, ExternalTableState } from "./externalTable";
export type ExternalTable = import("./externalTable").ExternalTable;
export const ExternalTable: typeof import("./externalTable").ExternalTable = null as any;
utilities.lazyLoad(exports, ["ExternalTable"], () => require("./externalTable"));

export { ExternalVolumeArgs, ExternalVolumeState } from "./externalVolume";
export type ExternalVolume = import("./externalVolume").ExternalVolume;
export const ExternalVolume: typeof import("./externalVolume").ExternalVolume = null as any;
utilities.lazyLoad(exports, ["ExternalVolume"], () => require("./externalVolume"));

export { FailoverGroupArgs, FailoverGroupState } from "./failoverGroup";
export type FailoverGroup = import("./failoverGroup").FailoverGroup;
export const FailoverGroup: typeof import("./failoverGroup").FailoverGroup = null as any;
utilities.lazyLoad(exports, ["FailoverGroup"], () => require("./failoverGroup"));

export { FileFormatArgs, FileFormatState } from "./fileFormat";
export type FileFormat = import("./fileFormat").FileFormat;
export const FileFormat: typeof import("./fileFormat").FileFormat = null as any;
utilities.lazyLoad(exports, ["FileFormat"], () => require("./fileFormat"));

export { FunctionJavaArgs, FunctionJavaState } from "./functionJava";
export type FunctionJava = import("./functionJava").FunctionJava;
export const FunctionJava: typeof import("./functionJava").FunctionJava = null as any;
utilities.lazyLoad(exports, ["FunctionJava"], () => require("./functionJava"));

export { FunctionJavascriptArgs, FunctionJavascriptState } from "./functionJavascript";
export type FunctionJavascript = import("./functionJavascript").FunctionJavascript;
export const FunctionJavascript: typeof import("./functionJavascript").FunctionJavascript = null as any;
utilities.lazyLoad(exports, ["FunctionJavascript"], () => require("./functionJavascript"));

export { FunctionPythonArgs, FunctionPythonState } from "./functionPython";
export type FunctionPython = import("./functionPython").FunctionPython;
export const FunctionPython: typeof import("./functionPython").FunctionPython = null as any;
utilities.lazyLoad(exports, ["FunctionPython"], () => require("./functionPython"));

export { FunctionScalaArgs, FunctionScalaState } from "./functionScala";
export type FunctionScala = import("./functionScala").FunctionScala;
export const FunctionScala: typeof import("./functionScala").FunctionScala = null as any;
utilities.lazyLoad(exports, ["FunctionScala"], () => require("./functionScala"));

export { FunctionSqlArgs, FunctionSqlState } from "./functionSql";
export type FunctionSql = import("./functionSql").FunctionSql;
export const FunctionSql: typeof import("./functionSql").FunctionSql = null as any;
utilities.lazyLoad(exports, ["FunctionSql"], () => require("./functionSql"));

export { GetAccountRolesArgs, GetAccountRolesResult, GetAccountRolesOutputArgs } from "./getAccountRoles";
export const getAccountRoles: typeof import("./getAccountRoles").getAccountRoles = null as any;
export const getAccountRolesOutput: typeof import("./getAccountRoles").getAccountRolesOutput = null as any;
utilities.lazyLoad(exports, ["getAccountRoles","getAccountRolesOutput"], () => require("./getAccountRoles"));

export { GetAccountsArgs, GetAccountsResult, GetAccountsOutputArgs } from "./getAccounts";
export const getAccounts: typeof import("./getAccounts").getAccounts = null as any;
export const getAccountsOutput: typeof import("./getAccounts").getAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getAccounts","getAccountsOutput"], () => require("./getAccounts"));

export { GetAlertsArgs, GetAlertsResult, GetAlertsOutputArgs } from "./getAlerts";
export const getAlerts: typeof import("./getAlerts").getAlerts = null as any;
export const getAlertsOutput: typeof import("./getAlerts").getAlertsOutput = null as any;
utilities.lazyLoad(exports, ["getAlerts","getAlertsOutput"], () => require("./getAlerts"));

export { GetConnectionsArgs, GetConnectionsResult, GetConnectionsOutputArgs } from "./getConnections";
export const getConnections: typeof import("./getConnections").getConnections = null as any;
export const getConnectionsOutput: typeof import("./getConnections").getConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getConnections","getConnectionsOutput"], () => require("./getConnections"));

export { GetCortexSearchServicesArgs, GetCortexSearchServicesResult, GetCortexSearchServicesOutputArgs } from "./getCortexSearchServices";
export const getCortexSearchServices: typeof import("./getCortexSearchServices").getCortexSearchServices = null as any;
export const getCortexSearchServicesOutput: typeof import("./getCortexSearchServices").getCortexSearchServicesOutput = null as any;
utilities.lazyLoad(exports, ["getCortexSearchServices","getCortexSearchServicesOutput"], () => require("./getCortexSearchServices"));

export { GetCurrentAccountResult } from "./getCurrentAccount";
export const getCurrentAccount: typeof import("./getCurrentAccount").getCurrentAccount = null as any;
export const getCurrentAccountOutput: typeof import("./getCurrentAccount").getCurrentAccountOutput = null as any;
utilities.lazyLoad(exports, ["getCurrentAccount","getCurrentAccountOutput"], () => require("./getCurrentAccount"));

export { GetCurrentRoleResult } from "./getCurrentRole";
export const getCurrentRole: typeof import("./getCurrentRole").getCurrentRole = null as any;
export const getCurrentRoleOutput: typeof import("./getCurrentRole").getCurrentRoleOutput = null as any;
utilities.lazyLoad(exports, ["getCurrentRole","getCurrentRoleOutput"], () => require("./getCurrentRole"));

export { GetDatabaseArgs, GetDatabaseResult, GetDatabaseOutputArgs } from "./getDatabase";
export const getDatabase: typeof import("./getDatabase").getDatabase = null as any;
export const getDatabaseOutput: typeof import("./getDatabase").getDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabase","getDatabaseOutput"], () => require("./getDatabase"));

export { GetDatabaseRoleArgs, GetDatabaseRoleResult, GetDatabaseRoleOutputArgs } from "./getDatabaseRole";
export const getDatabaseRole: typeof import("./getDatabaseRole").getDatabaseRole = null as any;
export const getDatabaseRoleOutput: typeof import("./getDatabaseRole").getDatabaseRoleOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseRole","getDatabaseRoleOutput"], () => require("./getDatabaseRole"));

export { GetDatabaseRolesArgs, GetDatabaseRolesResult, GetDatabaseRolesOutputArgs } from "./getDatabaseRoles";
export const getDatabaseRoles: typeof import("./getDatabaseRoles").getDatabaseRoles = null as any;
export const getDatabaseRolesOutput: typeof import("./getDatabaseRoles").getDatabaseRolesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseRoles","getDatabaseRolesOutput"], () => require("./getDatabaseRoles"));

export { GetDatabasesArgs, GetDatabasesResult, GetDatabasesOutputArgs } from "./getDatabases";
export const getDatabases: typeof import("./getDatabases").getDatabases = null as any;
export const getDatabasesOutput: typeof import("./getDatabases").getDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabases","getDatabasesOutput"], () => require("./getDatabases"));

export { GetDynamicTablesArgs, GetDynamicTablesResult, GetDynamicTablesOutputArgs } from "./getDynamicTables";
export const getDynamicTables: typeof import("./getDynamicTables").getDynamicTables = null as any;
export const getDynamicTablesOutput: typeof import("./getDynamicTables").getDynamicTablesOutput = null as any;
utilities.lazyLoad(exports, ["getDynamicTables","getDynamicTablesOutput"], () => require("./getDynamicTables"));

export { GetExternalFunctionsArgs, GetExternalFunctionsResult, GetExternalFunctionsOutputArgs } from "./getExternalFunctions";
export const getExternalFunctions: typeof import("./getExternalFunctions").getExternalFunctions = null as any;
export const getExternalFunctionsOutput: typeof import("./getExternalFunctions").getExternalFunctionsOutput = null as any;
utilities.lazyLoad(exports, ["getExternalFunctions","getExternalFunctionsOutput"], () => require("./getExternalFunctions"));

export { GetExternalTablesArgs, GetExternalTablesResult, GetExternalTablesOutputArgs } from "./getExternalTables";
export const getExternalTables: typeof import("./getExternalTables").getExternalTables = null as any;
export const getExternalTablesOutput: typeof import("./getExternalTables").getExternalTablesOutput = null as any;
utilities.lazyLoad(exports, ["getExternalTables","getExternalTablesOutput"], () => require("./getExternalTables"));

export { GetFailoverGroupsArgs, GetFailoverGroupsResult, GetFailoverGroupsOutputArgs } from "./getFailoverGroups";
export const getFailoverGroups: typeof import("./getFailoverGroups").getFailoverGroups = null as any;
export const getFailoverGroupsOutput: typeof import("./getFailoverGroups").getFailoverGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getFailoverGroups","getFailoverGroupsOutput"], () => require("./getFailoverGroups"));

export { GetFileFormatsArgs, GetFileFormatsResult, GetFileFormatsOutputArgs } from "./getFileFormats";
export const getFileFormats: typeof import("./getFileFormats").getFileFormats = null as any;
export const getFileFormatsOutput: typeof import("./getFileFormats").getFileFormatsOutput = null as any;
utilities.lazyLoad(exports, ["getFileFormats","getFileFormatsOutput"], () => require("./getFileFormats"));

export { GetFunctionsArgs, GetFunctionsResult, GetFunctionsOutputArgs } from "./getFunctions";
export const getFunctions: typeof import("./getFunctions").getFunctions = null as any;
export const getFunctionsOutput: typeof import("./getFunctions").getFunctionsOutput = null as any;
utilities.lazyLoad(exports, ["getFunctions","getFunctionsOutput"], () => require("./getFunctions"));

export { GetGrantsArgs, GetGrantsResult, GetGrantsOutputArgs } from "./getGrants";
export const getGrants: typeof import("./getGrants").getGrants = null as any;
export const getGrantsOutput: typeof import("./getGrants").getGrantsOutput = null as any;
utilities.lazyLoad(exports, ["getGrants","getGrantsOutput"], () => require("./getGrants"));

export { GetMaskingPoliciesArgs, GetMaskingPoliciesResult, GetMaskingPoliciesOutputArgs } from "./getMaskingPolicies";
export const getMaskingPolicies: typeof import("./getMaskingPolicies").getMaskingPolicies = null as any;
export const getMaskingPoliciesOutput: typeof import("./getMaskingPolicies").getMaskingPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getMaskingPolicies","getMaskingPoliciesOutput"], () => require("./getMaskingPolicies"));

export { GetMaterializedViewsArgs, GetMaterializedViewsResult, GetMaterializedViewsOutputArgs } from "./getMaterializedViews";
export const getMaterializedViews: typeof import("./getMaterializedViews").getMaterializedViews = null as any;
export const getMaterializedViewsOutput: typeof import("./getMaterializedViews").getMaterializedViewsOutput = null as any;
utilities.lazyLoad(exports, ["getMaterializedViews","getMaterializedViewsOutput"], () => require("./getMaterializedViews"));

export { GetNetworkPoliciesArgs, GetNetworkPoliciesResult, GetNetworkPoliciesOutputArgs } from "./getNetworkPolicies";
export const getNetworkPolicies: typeof import("./getNetworkPolicies").getNetworkPolicies = null as any;
export const getNetworkPoliciesOutput: typeof import("./getNetworkPolicies").getNetworkPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkPolicies","getNetworkPoliciesOutput"], () => require("./getNetworkPolicies"));

export { GetParametersArgs, GetParametersResult, GetParametersOutputArgs } from "./getParameters";
export const getParameters: typeof import("./getParameters").getParameters = null as any;
export const getParametersOutput: typeof import("./getParameters").getParametersOutput = null as any;
utilities.lazyLoad(exports, ["getParameters","getParametersOutput"], () => require("./getParameters"));

export { GetPipesArgs, GetPipesResult, GetPipesOutputArgs } from "./getPipes";
export const getPipes: typeof import("./getPipes").getPipes = null as any;
export const getPipesOutput: typeof import("./getPipes").getPipesOutput = null as any;
utilities.lazyLoad(exports, ["getPipes","getPipesOutput"], () => require("./getPipes"));

export { GetProceduresArgs, GetProceduresResult, GetProceduresOutputArgs } from "./getProcedures";
export const getProcedures: typeof import("./getProcedures").getProcedures = null as any;
export const getProceduresOutput: typeof import("./getProcedures").getProceduresOutput = null as any;
utilities.lazyLoad(exports, ["getProcedures","getProceduresOutput"], () => require("./getProcedures"));

export { GetResourceMonitorsArgs, GetResourceMonitorsResult, GetResourceMonitorsOutputArgs } from "./getResourceMonitors";
export const getResourceMonitors: typeof import("./getResourceMonitors").getResourceMonitors = null as any;
export const getResourceMonitorsOutput: typeof import("./getResourceMonitors").getResourceMonitorsOutput = null as any;
utilities.lazyLoad(exports, ["getResourceMonitors","getResourceMonitorsOutput"], () => require("./getResourceMonitors"));

export { GetRowAccessPoliciesArgs, GetRowAccessPoliciesResult, GetRowAccessPoliciesOutputArgs } from "./getRowAccessPolicies";
export const getRowAccessPolicies: typeof import("./getRowAccessPolicies").getRowAccessPolicies = null as any;
export const getRowAccessPoliciesOutput: typeof import("./getRowAccessPolicies").getRowAccessPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getRowAccessPolicies","getRowAccessPoliciesOutput"], () => require("./getRowAccessPolicies"));

export { GetSchemasArgs, GetSchemasResult, GetSchemasOutputArgs } from "./getSchemas";
export const getSchemas: typeof import("./getSchemas").getSchemas = null as any;
export const getSchemasOutput: typeof import("./getSchemas").getSchemasOutput = null as any;
utilities.lazyLoad(exports, ["getSchemas","getSchemasOutput"], () => require("./getSchemas"));

export { GetSecretsArgs, GetSecretsResult, GetSecretsOutputArgs } from "./getSecrets";
export const getSecrets: typeof import("./getSecrets").getSecrets = null as any;
export const getSecretsOutput: typeof import("./getSecrets").getSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getSecrets","getSecretsOutput"], () => require("./getSecrets"));

export { GetSecurityIntegrationsArgs, GetSecurityIntegrationsResult, GetSecurityIntegrationsOutputArgs } from "./getSecurityIntegrations";
export const getSecurityIntegrations: typeof import("./getSecurityIntegrations").getSecurityIntegrations = null as any;
export const getSecurityIntegrationsOutput: typeof import("./getSecurityIntegrations").getSecurityIntegrationsOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityIntegrations","getSecurityIntegrationsOutput"], () => require("./getSecurityIntegrations"));

export { GetSequencesArgs, GetSequencesResult, GetSequencesOutputArgs } from "./getSequences";
export const getSequences: typeof import("./getSequences").getSequences = null as any;
export const getSequencesOutput: typeof import("./getSequences").getSequencesOutput = null as any;
utilities.lazyLoad(exports, ["getSequences","getSequencesOutput"], () => require("./getSequences"));

export { GetSharesArgs, GetSharesResult, GetSharesOutputArgs } from "./getShares";
export const getShares: typeof import("./getShares").getShares = null as any;
export const getSharesOutput: typeof import("./getShares").getSharesOutput = null as any;
utilities.lazyLoad(exports, ["getShares","getSharesOutput"], () => require("./getShares"));

export { GetStagesArgs, GetStagesResult, GetStagesOutputArgs } from "./getStages";
export const getStages: typeof import("./getStages").getStages = null as any;
export const getStagesOutput: typeof import("./getStages").getStagesOutput = null as any;
utilities.lazyLoad(exports, ["getStages","getStagesOutput"], () => require("./getStages"));

export { GetStorageIntegrationsResult } from "./getStorageIntegrations";
export const getStorageIntegrations: typeof import("./getStorageIntegrations").getStorageIntegrations = null as any;
export const getStorageIntegrationsOutput: typeof import("./getStorageIntegrations").getStorageIntegrationsOutput = null as any;
utilities.lazyLoad(exports, ["getStorageIntegrations","getStorageIntegrationsOutput"], () => require("./getStorageIntegrations"));

export { GetStreamlitsArgs, GetStreamlitsResult, GetStreamlitsOutputArgs } from "./getStreamlits";
export const getStreamlits: typeof import("./getStreamlits").getStreamlits = null as any;
export const getStreamlitsOutput: typeof import("./getStreamlits").getStreamlitsOutput = null as any;
utilities.lazyLoad(exports, ["getStreamlits","getStreamlitsOutput"], () => require("./getStreamlits"));

export { GetStreamsArgs, GetStreamsResult, GetStreamsOutputArgs } from "./getStreams";
export const getStreams: typeof import("./getStreams").getStreams = null as any;
export const getStreamsOutput: typeof import("./getStreams").getStreamsOutput = null as any;
utilities.lazyLoad(exports, ["getStreams","getStreamsOutput"], () => require("./getStreams"));

export { GetSystemGenerateScimAccessTokenArgs, GetSystemGenerateScimAccessTokenResult, GetSystemGenerateScimAccessTokenOutputArgs } from "./getSystemGenerateScimAccessToken";
export const getSystemGenerateScimAccessToken: typeof import("./getSystemGenerateScimAccessToken").getSystemGenerateScimAccessToken = null as any;
export const getSystemGenerateScimAccessTokenOutput: typeof import("./getSystemGenerateScimAccessToken").getSystemGenerateScimAccessTokenOutput = null as any;
utilities.lazyLoad(exports, ["getSystemGenerateScimAccessToken","getSystemGenerateScimAccessTokenOutput"], () => require("./getSystemGenerateScimAccessToken"));

export { GetSystemGetAwsSnsIamPolicyArgs, GetSystemGetAwsSnsIamPolicyResult, GetSystemGetAwsSnsIamPolicyOutputArgs } from "./getSystemGetAwsSnsIamPolicy";
export const getSystemGetAwsSnsIamPolicy: typeof import("./getSystemGetAwsSnsIamPolicy").getSystemGetAwsSnsIamPolicy = null as any;
export const getSystemGetAwsSnsIamPolicyOutput: typeof import("./getSystemGetAwsSnsIamPolicy").getSystemGetAwsSnsIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSystemGetAwsSnsIamPolicy","getSystemGetAwsSnsIamPolicyOutput"], () => require("./getSystemGetAwsSnsIamPolicy"));

export { GetSystemGetPrivateLinkConfigResult } from "./getSystemGetPrivateLinkConfig";
export const getSystemGetPrivateLinkConfig: typeof import("./getSystemGetPrivateLinkConfig").getSystemGetPrivateLinkConfig = null as any;
export const getSystemGetPrivateLinkConfigOutput: typeof import("./getSystemGetPrivateLinkConfig").getSystemGetPrivateLinkConfigOutput = null as any;
utilities.lazyLoad(exports, ["getSystemGetPrivateLinkConfig","getSystemGetPrivateLinkConfigOutput"], () => require("./getSystemGetPrivateLinkConfig"));

export { GetSystemGetSnowflakePlatformInfoResult } from "./getSystemGetSnowflakePlatformInfo";
export const getSystemGetSnowflakePlatformInfo: typeof import("./getSystemGetSnowflakePlatformInfo").getSystemGetSnowflakePlatformInfo = null as any;
export const getSystemGetSnowflakePlatformInfoOutput: typeof import("./getSystemGetSnowflakePlatformInfo").getSystemGetSnowflakePlatformInfoOutput = null as any;
utilities.lazyLoad(exports, ["getSystemGetSnowflakePlatformInfo","getSystemGetSnowflakePlatformInfoOutput"], () => require("./getSystemGetSnowflakePlatformInfo"));

export { GetTablesArgs, GetTablesResult, GetTablesOutputArgs } from "./getTables";
export const getTables: typeof import("./getTables").getTables = null as any;
export const getTablesOutput: typeof import("./getTables").getTablesOutput = null as any;
utilities.lazyLoad(exports, ["getTables","getTablesOutput"], () => require("./getTables"));

export { GetTagsArgs, GetTagsResult, GetTagsOutputArgs } from "./getTags";
export const getTags: typeof import("./getTags").getTags = null as any;
export const getTagsOutput: typeof import("./getTags").getTagsOutput = null as any;
utilities.lazyLoad(exports, ["getTags","getTagsOutput"], () => require("./getTags"));

export { GetTasksArgs, GetTasksResult, GetTasksOutputArgs } from "./getTasks";
export const getTasks: typeof import("./getTasks").getTasks = null as any;
export const getTasksOutput: typeof import("./getTasks").getTasksOutput = null as any;
utilities.lazyLoad(exports, ["getTasks","getTasksOutput"], () => require("./getTasks"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GetViewsArgs, GetViewsResult, GetViewsOutputArgs } from "./getViews";
export const getViews: typeof import("./getViews").getViews = null as any;
export const getViewsOutput: typeof import("./getViews").getViewsOutput = null as any;
utilities.lazyLoad(exports, ["getViews","getViewsOutput"], () => require("./getViews"));

export { GetWarehousesArgs, GetWarehousesResult, GetWarehousesOutputArgs } from "./getWarehouses";
export const getWarehouses: typeof import("./getWarehouses").getWarehouses = null as any;
export const getWarehousesOutput: typeof import("./getWarehouses").getWarehousesOutput = null as any;
utilities.lazyLoad(exports, ["getWarehouses","getWarehousesOutput"], () => require("./getWarehouses"));

export { GrantAccountRoleArgs, GrantAccountRoleState } from "./grantAccountRole";
export type GrantAccountRole = import("./grantAccountRole").GrantAccountRole;
export const GrantAccountRole: typeof import("./grantAccountRole").GrantAccountRole = null as any;
utilities.lazyLoad(exports, ["GrantAccountRole"], () => require("./grantAccountRole"));

export { GrantApplicationRoleArgs, GrantApplicationRoleState } from "./grantApplicationRole";
export type GrantApplicationRole = import("./grantApplicationRole").GrantApplicationRole;
export const GrantApplicationRole: typeof import("./grantApplicationRole").GrantApplicationRole = null as any;
utilities.lazyLoad(exports, ["GrantApplicationRole"], () => require("./grantApplicationRole"));

export { GrantDatabaseRoleArgs, GrantDatabaseRoleState } from "./grantDatabaseRole";
export type GrantDatabaseRole = import("./grantDatabaseRole").GrantDatabaseRole;
export const GrantDatabaseRole: typeof import("./grantDatabaseRole").GrantDatabaseRole = null as any;
utilities.lazyLoad(exports, ["GrantDatabaseRole"], () => require("./grantDatabaseRole"));

export { GrantOwnershipArgs, GrantOwnershipState } from "./grantOwnership";
export type GrantOwnership = import("./grantOwnership").GrantOwnership;
export const GrantOwnership: typeof import("./grantOwnership").GrantOwnership = null as any;
utilities.lazyLoad(exports, ["GrantOwnership"], () => require("./grantOwnership"));

export { GrantPrivilegesToAccountRoleArgs, GrantPrivilegesToAccountRoleState } from "./grantPrivilegesToAccountRole";
export type GrantPrivilegesToAccountRole = import("./grantPrivilegesToAccountRole").GrantPrivilegesToAccountRole;
export const GrantPrivilegesToAccountRole: typeof import("./grantPrivilegesToAccountRole").GrantPrivilegesToAccountRole = null as any;
utilities.lazyLoad(exports, ["GrantPrivilegesToAccountRole"], () => require("./grantPrivilegesToAccountRole"));

export { GrantPrivilegesToDatabaseRoleArgs, GrantPrivilegesToDatabaseRoleState } from "./grantPrivilegesToDatabaseRole";
export type GrantPrivilegesToDatabaseRole = import("./grantPrivilegesToDatabaseRole").GrantPrivilegesToDatabaseRole;
export const GrantPrivilegesToDatabaseRole: typeof import("./grantPrivilegesToDatabaseRole").GrantPrivilegesToDatabaseRole = null as any;
utilities.lazyLoad(exports, ["GrantPrivilegesToDatabaseRole"], () => require("./grantPrivilegesToDatabaseRole"));

export { GrantPrivilegesToShareArgs, GrantPrivilegesToShareState } from "./grantPrivilegesToShare";
export type GrantPrivilegesToShare = import("./grantPrivilegesToShare").GrantPrivilegesToShare;
export const GrantPrivilegesToShare: typeof import("./grantPrivilegesToShare").GrantPrivilegesToShare = null as any;
utilities.lazyLoad(exports, ["GrantPrivilegesToShare"], () => require("./grantPrivilegesToShare"));

export { LegacyServiceUserArgs, LegacyServiceUserState } from "./legacyServiceUser";
export type LegacyServiceUser = import("./legacyServiceUser").LegacyServiceUser;
export const LegacyServiceUser: typeof import("./legacyServiceUser").LegacyServiceUser = null as any;
utilities.lazyLoad(exports, ["LegacyServiceUser"], () => require("./legacyServiceUser"));

export { ManagedAccountArgs, ManagedAccountState } from "./managedAccount";
export type ManagedAccount = import("./managedAccount").ManagedAccount;
export const ManagedAccount: typeof import("./managedAccount").ManagedAccount = null as any;
utilities.lazyLoad(exports, ["ManagedAccount"], () => require("./managedAccount"));

export { MaskingPolicyArgs, MaskingPolicyState } from "./maskingPolicy";
export type MaskingPolicy = import("./maskingPolicy").MaskingPolicy;
export const MaskingPolicy: typeof import("./maskingPolicy").MaskingPolicy = null as any;
utilities.lazyLoad(exports, ["MaskingPolicy"], () => require("./maskingPolicy"));

export { MaterializedViewArgs, MaterializedViewState } from "./materializedView";
export type MaterializedView = import("./materializedView").MaterializedView;
export const MaterializedView: typeof import("./materializedView").MaterializedView = null as any;
utilities.lazyLoad(exports, ["MaterializedView"], () => require("./materializedView"));

export { NetworkPolicyArgs, NetworkPolicyState } from "./networkPolicy";
export type NetworkPolicy = import("./networkPolicy").NetworkPolicy;
export const NetworkPolicy: typeof import("./networkPolicy").NetworkPolicy = null as any;
utilities.lazyLoad(exports, ["NetworkPolicy"], () => require("./networkPolicy"));

export { NetworkPolicyAttachmentArgs, NetworkPolicyAttachmentState } from "./networkPolicyAttachment";
export type NetworkPolicyAttachment = import("./networkPolicyAttachment").NetworkPolicyAttachment;
export const NetworkPolicyAttachment: typeof import("./networkPolicyAttachment").NetworkPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["NetworkPolicyAttachment"], () => require("./networkPolicyAttachment"));

export { NetworkRuleArgs, NetworkRuleState } from "./networkRule";
export type NetworkRule = import("./networkRule").NetworkRule;
export const NetworkRule: typeof import("./networkRule").NetworkRule = null as any;
utilities.lazyLoad(exports, ["NetworkRule"], () => require("./networkRule"));

export { NotificationIntegrationArgs, NotificationIntegrationState } from "./notificationIntegration";
export type NotificationIntegration = import("./notificationIntegration").NotificationIntegration;
export const NotificationIntegration: typeof import("./notificationIntegration").NotificationIntegration = null as any;
utilities.lazyLoad(exports, ["NotificationIntegration"], () => require("./notificationIntegration"));

export { OauthIntegrationForCustomClientsArgs, OauthIntegrationForCustomClientsState } from "./oauthIntegrationForCustomClients";
export type OauthIntegrationForCustomClients = import("./oauthIntegrationForCustomClients").OauthIntegrationForCustomClients;
export const OauthIntegrationForCustomClients: typeof import("./oauthIntegrationForCustomClients").OauthIntegrationForCustomClients = null as any;
utilities.lazyLoad(exports, ["OauthIntegrationForCustomClients"], () => require("./oauthIntegrationForCustomClients"));

export { OauthIntegrationForPartnerApplicationsArgs, OauthIntegrationForPartnerApplicationsState } from "./oauthIntegrationForPartnerApplications";
export type OauthIntegrationForPartnerApplications = import("./oauthIntegrationForPartnerApplications").OauthIntegrationForPartnerApplications;
export const OauthIntegrationForPartnerApplications: typeof import("./oauthIntegrationForPartnerApplications").OauthIntegrationForPartnerApplications = null as any;
utilities.lazyLoad(exports, ["OauthIntegrationForPartnerApplications"], () => require("./oauthIntegrationForPartnerApplications"));

export { ObjectParameterArgs, ObjectParameterState } from "./objectParameter";
export type ObjectParameter = import("./objectParameter").ObjectParameter;
export const ObjectParameter: typeof import("./objectParameter").ObjectParameter = null as any;
utilities.lazyLoad(exports, ["ObjectParameter"], () => require("./objectParameter"));

export { PasswordPolicyArgs, PasswordPolicyState } from "./passwordPolicy";
export type PasswordPolicy = import("./passwordPolicy").PasswordPolicy;
export const PasswordPolicy: typeof import("./passwordPolicy").PasswordPolicy = null as any;
utilities.lazyLoad(exports, ["PasswordPolicy"], () => require("./passwordPolicy"));

export { PipeArgs, PipeState } from "./pipe";
export type Pipe = import("./pipe").Pipe;
export const Pipe: typeof import("./pipe").Pipe = null as any;
utilities.lazyLoad(exports, ["Pipe"], () => require("./pipe"));

export { PrimaryConnectionArgs, PrimaryConnectionState } from "./primaryConnection";
export type PrimaryConnection = import("./primaryConnection").PrimaryConnection;
export const PrimaryConnection: typeof import("./primaryConnection").PrimaryConnection = null as any;
utilities.lazyLoad(exports, ["PrimaryConnection"], () => require("./primaryConnection"));

export { ProcedureJavaArgs, ProcedureJavaState } from "./procedureJava";
export type ProcedureJava = import("./procedureJava").ProcedureJava;
export const ProcedureJava: typeof import("./procedureJava").ProcedureJava = null as any;
utilities.lazyLoad(exports, ["ProcedureJava"], () => require("./procedureJava"));

export { ProcedureJavascriptArgs, ProcedureJavascriptState } from "./procedureJavascript";
export type ProcedureJavascript = import("./procedureJavascript").ProcedureJavascript;
export const ProcedureJavascript: typeof import("./procedureJavascript").ProcedureJavascript = null as any;
utilities.lazyLoad(exports, ["ProcedureJavascript"], () => require("./procedureJavascript"));

export { ProcedurePythonArgs, ProcedurePythonState } from "./procedurePython";
export type ProcedurePython = import("./procedurePython").ProcedurePython;
export const ProcedurePython: typeof import("./procedurePython").ProcedurePython = null as any;
utilities.lazyLoad(exports, ["ProcedurePython"], () => require("./procedurePython"));

export { ProcedureScalaArgs, ProcedureScalaState } from "./procedureScala";
export type ProcedureScala = import("./procedureScala").ProcedureScala;
export const ProcedureScala: typeof import("./procedureScala").ProcedureScala = null as any;
utilities.lazyLoad(exports, ["ProcedureScala"], () => require("./procedureScala"));

export { ProcedureSqlArgs, ProcedureSqlState } from "./procedureSql";
export type ProcedureSql = import("./procedureSql").ProcedureSql;
export const ProcedureSql: typeof import("./procedureSql").ProcedureSql = null as any;
utilities.lazyLoad(exports, ["ProcedureSql"], () => require("./procedureSql"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ResourceMonitorArgs, ResourceMonitorState } from "./resourceMonitor";
export type ResourceMonitor = import("./resourceMonitor").ResourceMonitor;
export const ResourceMonitor: typeof import("./resourceMonitor").ResourceMonitor = null as any;
utilities.lazyLoad(exports, ["ResourceMonitor"], () => require("./resourceMonitor"));

export { RowAccessPolicyArgs, RowAccessPolicyState } from "./rowAccessPolicy";
export type RowAccessPolicy = import("./rowAccessPolicy").RowAccessPolicy;
export const RowAccessPolicy: typeof import("./rowAccessPolicy").RowAccessPolicy = null as any;
utilities.lazyLoad(exports, ["RowAccessPolicy"], () => require("./rowAccessPolicy"));

export { Saml2IntegrationArgs, Saml2IntegrationState } from "./saml2Integration";
export type Saml2Integration = import("./saml2Integration").Saml2Integration;
export const Saml2Integration: typeof import("./saml2Integration").Saml2Integration = null as any;
utilities.lazyLoad(exports, ["Saml2Integration"], () => require("./saml2Integration"));

export { SchemaArgs, SchemaState } from "./schema";
export type Schema = import("./schema").Schema;
export const Schema: typeof import("./schema").Schema = null as any;
utilities.lazyLoad(exports, ["Schema"], () => require("./schema"));

export { ScimIntegrationArgs, ScimIntegrationState } from "./scimIntegration";
export type ScimIntegration = import("./scimIntegration").ScimIntegration;
export const ScimIntegration: typeof import("./scimIntegration").ScimIntegration = null as any;
utilities.lazyLoad(exports, ["ScimIntegration"], () => require("./scimIntegration"));

export { SecondaryConnectionArgs, SecondaryConnectionState } from "./secondaryConnection";
export type SecondaryConnection = import("./secondaryConnection").SecondaryConnection;
export const SecondaryConnection: typeof import("./secondaryConnection").SecondaryConnection = null as any;
utilities.lazyLoad(exports, ["SecondaryConnection"], () => require("./secondaryConnection"));

export { SecondaryDatabaseArgs, SecondaryDatabaseState } from "./secondaryDatabase";
export type SecondaryDatabase = import("./secondaryDatabase").SecondaryDatabase;
export const SecondaryDatabase: typeof import("./secondaryDatabase").SecondaryDatabase = null as any;
utilities.lazyLoad(exports, ["SecondaryDatabase"], () => require("./secondaryDatabase"));

export { SecretWithAuthorizationCodeGrantArgs, SecretWithAuthorizationCodeGrantState } from "./secretWithAuthorizationCodeGrant";
export type SecretWithAuthorizationCodeGrant = import("./secretWithAuthorizationCodeGrant").SecretWithAuthorizationCodeGrant;
export const SecretWithAuthorizationCodeGrant: typeof import("./secretWithAuthorizationCodeGrant").SecretWithAuthorizationCodeGrant = null as any;
utilities.lazyLoad(exports, ["SecretWithAuthorizationCodeGrant"], () => require("./secretWithAuthorizationCodeGrant"));

export { SecretWithBasicAuthenticationArgs, SecretWithBasicAuthenticationState } from "./secretWithBasicAuthentication";
export type SecretWithBasicAuthentication = import("./secretWithBasicAuthentication").SecretWithBasicAuthentication;
export const SecretWithBasicAuthentication: typeof import("./secretWithBasicAuthentication").SecretWithBasicAuthentication = null as any;
utilities.lazyLoad(exports, ["SecretWithBasicAuthentication"], () => require("./secretWithBasicAuthentication"));

export { SecretWithClientCredentialsArgs, SecretWithClientCredentialsState } from "./secretWithClientCredentials";
export type SecretWithClientCredentials = import("./secretWithClientCredentials").SecretWithClientCredentials;
export const SecretWithClientCredentials: typeof import("./secretWithClientCredentials").SecretWithClientCredentials = null as any;
utilities.lazyLoad(exports, ["SecretWithClientCredentials"], () => require("./secretWithClientCredentials"));

export { SecretWithGenericStringArgs, SecretWithGenericStringState } from "./secretWithGenericString";
export type SecretWithGenericString = import("./secretWithGenericString").SecretWithGenericString;
export const SecretWithGenericString: typeof import("./secretWithGenericString").SecretWithGenericString = null as any;
utilities.lazyLoad(exports, ["SecretWithGenericString"], () => require("./secretWithGenericString"));

export { SequenceArgs, SequenceState } from "./sequence";
export type Sequence = import("./sequence").Sequence;
export const Sequence: typeof import("./sequence").Sequence = null as any;
utilities.lazyLoad(exports, ["Sequence"], () => require("./sequence"));

export { ServiceUserArgs, ServiceUserState } from "./serviceUser";
export type ServiceUser = import("./serviceUser").ServiceUser;
export const ServiceUser: typeof import("./serviceUser").ServiceUser = null as any;
utilities.lazyLoad(exports, ["ServiceUser"], () => require("./serviceUser"));

export { ShareArgs, ShareState } from "./share";
export type Share = import("./share").Share;
export const Share: typeof import("./share").Share = null as any;
utilities.lazyLoad(exports, ["Share"], () => require("./share"));

export { SharedDatabaseArgs, SharedDatabaseState } from "./sharedDatabase";
export type SharedDatabase = import("./sharedDatabase").SharedDatabase;
export const SharedDatabase: typeof import("./sharedDatabase").SharedDatabase = null as any;
utilities.lazyLoad(exports, ["SharedDatabase"], () => require("./sharedDatabase"));

export { StageArgs, StageState } from "./stage";
export type Stage = import("./stage").Stage;
export const Stage: typeof import("./stage").Stage = null as any;
utilities.lazyLoad(exports, ["Stage"], () => require("./stage"));

export { StorageIntegrationArgs, StorageIntegrationState } from "./storageIntegration";
export type StorageIntegration = import("./storageIntegration").StorageIntegration;
export const StorageIntegration: typeof import("./storageIntegration").StorageIntegration = null as any;
utilities.lazyLoad(exports, ["StorageIntegration"], () => require("./storageIntegration"));

export { StreamOnDirectoryTableArgs, StreamOnDirectoryTableState } from "./streamOnDirectoryTable";
export type StreamOnDirectoryTable = import("./streamOnDirectoryTable").StreamOnDirectoryTable;
export const StreamOnDirectoryTable: typeof import("./streamOnDirectoryTable").StreamOnDirectoryTable = null as any;
utilities.lazyLoad(exports, ["StreamOnDirectoryTable"], () => require("./streamOnDirectoryTable"));

export { StreamOnExternalTableArgs, StreamOnExternalTableState } from "./streamOnExternalTable";
export type StreamOnExternalTable = import("./streamOnExternalTable").StreamOnExternalTable;
export const StreamOnExternalTable: typeof import("./streamOnExternalTable").StreamOnExternalTable = null as any;
utilities.lazyLoad(exports, ["StreamOnExternalTable"], () => require("./streamOnExternalTable"));

export { StreamOnTableArgs, StreamOnTableState } from "./streamOnTable";
export type StreamOnTable = import("./streamOnTable").StreamOnTable;
export const StreamOnTable: typeof import("./streamOnTable").StreamOnTable = null as any;
utilities.lazyLoad(exports, ["StreamOnTable"], () => require("./streamOnTable"));

export { StreamOnViewArgs, StreamOnViewState } from "./streamOnView";
export type StreamOnView = import("./streamOnView").StreamOnView;
export const StreamOnView: typeof import("./streamOnView").StreamOnView = null as any;
utilities.lazyLoad(exports, ["StreamOnView"], () => require("./streamOnView"));

export { StreamlitArgs, StreamlitState } from "./streamlit";
export type Streamlit = import("./streamlit").Streamlit;
export const Streamlit: typeof import("./streamlit").Streamlit = null as any;
utilities.lazyLoad(exports, ["Streamlit"], () => require("./streamlit"));

export { TableArgs, TableState } from "./table";
export type Table = import("./table").Table;
export const Table: typeof import("./table").Table = null as any;
utilities.lazyLoad(exports, ["Table"], () => require("./table"));

export { TableColumnMaskingPolicyApplicationArgs, TableColumnMaskingPolicyApplicationState } from "./tableColumnMaskingPolicyApplication";
export type TableColumnMaskingPolicyApplication = import("./tableColumnMaskingPolicyApplication").TableColumnMaskingPolicyApplication;
export const TableColumnMaskingPolicyApplication: typeof import("./tableColumnMaskingPolicyApplication").TableColumnMaskingPolicyApplication = null as any;
utilities.lazyLoad(exports, ["TableColumnMaskingPolicyApplication"], () => require("./tableColumnMaskingPolicyApplication"));

export { TableConstraintArgs, TableConstraintState } from "./tableConstraint";
export type TableConstraint = import("./tableConstraint").TableConstraint;
export const TableConstraint: typeof import("./tableConstraint").TableConstraint = null as any;
utilities.lazyLoad(exports, ["TableConstraint"], () => require("./tableConstraint"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));

export { TagAssociationArgs, TagAssociationState } from "./tagAssociation";
export type TagAssociation = import("./tagAssociation").TagAssociation;
export const TagAssociation: typeof import("./tagAssociation").TagAssociation = null as any;
utilities.lazyLoad(exports, ["TagAssociation"], () => require("./tagAssociation"));

export { TaskArgs, TaskState } from "./task";
export type Task = import("./task").Task;
export const Task: typeof import("./task").Task = null as any;
utilities.lazyLoad(exports, ["Task"], () => require("./task"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserAuthenticationPolicyAttachmentArgs, UserAuthenticationPolicyAttachmentState } from "./userAuthenticationPolicyAttachment";
export type UserAuthenticationPolicyAttachment = import("./userAuthenticationPolicyAttachment").UserAuthenticationPolicyAttachment;
export const UserAuthenticationPolicyAttachment: typeof import("./userAuthenticationPolicyAttachment").UserAuthenticationPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["UserAuthenticationPolicyAttachment"], () => require("./userAuthenticationPolicyAttachment"));

export { UserPasswordPolicyAttachmentArgs, UserPasswordPolicyAttachmentState } from "./userPasswordPolicyAttachment";
export type UserPasswordPolicyAttachment = import("./userPasswordPolicyAttachment").UserPasswordPolicyAttachment;
export const UserPasswordPolicyAttachment: typeof import("./userPasswordPolicyAttachment").UserPasswordPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["UserPasswordPolicyAttachment"], () => require("./userPasswordPolicyAttachment"));

export { UserPublicKeysArgs, UserPublicKeysState } from "./userPublicKeys";
export type UserPublicKeys = import("./userPublicKeys").UserPublicKeys;
export const UserPublicKeys: typeof import("./userPublicKeys").UserPublicKeys = null as any;
utilities.lazyLoad(exports, ["UserPublicKeys"], () => require("./userPublicKeys"));

export { ViewArgs, ViewState } from "./view";
export type View = import("./view").View;
export const View: typeof import("./view").View = null as any;
utilities.lazyLoad(exports, ["View"], () => require("./view"));

export { WarehouseArgs, WarehouseState } from "./warehouse";
export type Warehouse = import("./warehouse").Warehouse;
export const Warehouse: typeof import("./warehouse").Warehouse = null as any;
utilities.lazyLoad(exports, ["Warehouse"], () => require("./warehouse"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "snowflake:index/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "snowflake:index/accountAuthenticationPolicyAttachment:AccountAuthenticationPolicyAttachment":
                return new AccountAuthenticationPolicyAttachment(name, <any>undefined, { urn })
            case "snowflake:index/accountParameter:AccountParameter":
                return new AccountParameter(name, <any>undefined, { urn })
            case "snowflake:index/accountPasswordPolicyAttachment:AccountPasswordPolicyAttachment":
                return new AccountPasswordPolicyAttachment(name, <any>undefined, { urn })
            case "snowflake:index/accountRole:AccountRole":
                return new AccountRole(name, <any>undefined, { urn })
            case "snowflake:index/alert:Alert":
                return new Alert(name, <any>undefined, { urn })
            case "snowflake:index/apiAuthenticationIntegrationWithAuthorizationCodeGrant:ApiAuthenticationIntegrationWithAuthorizationCodeGrant":
                return new ApiAuthenticationIntegrationWithAuthorizationCodeGrant(name, <any>undefined, { urn })
            case "snowflake:index/apiAuthenticationIntegrationWithClientCredentials:ApiAuthenticationIntegrationWithClientCredentials":
                return new ApiAuthenticationIntegrationWithClientCredentials(name, <any>undefined, { urn })
            case "snowflake:index/apiAuthenticationIntegrationWithJwtBearer:ApiAuthenticationIntegrationWithJwtBearer":
                return new ApiAuthenticationIntegrationWithJwtBearer(name, <any>undefined, { urn })
            case "snowflake:index/apiIntegration:ApiIntegration":
                return new ApiIntegration(name, <any>undefined, { urn })
            case "snowflake:index/authenticationPolicy:AuthenticationPolicy":
                return new AuthenticationPolicy(name, <any>undefined, { urn })
            case "snowflake:index/cortexSearchService:CortexSearchService":
                return new CortexSearchService(name, <any>undefined, { urn })
            case "snowflake:index/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "snowflake:index/databaseRole:DatabaseRole":
                return new DatabaseRole(name, <any>undefined, { urn })
            case "snowflake:index/dynamicTable:DynamicTable":
                return new DynamicTable(name, <any>undefined, { urn })
            case "snowflake:index/emailNotificationIntegration:EmailNotificationIntegration":
                return new EmailNotificationIntegration(name, <any>undefined, { urn })
            case "snowflake:index/execute:Execute":
                return new Execute(name, <any>undefined, { urn })
            case "snowflake:index/externalFunction:ExternalFunction":
                return new ExternalFunction(name, <any>undefined, { urn })
            case "snowflake:index/externalOauthIntegration:ExternalOauthIntegration":
                return new ExternalOauthIntegration(name, <any>undefined, { urn })
            case "snowflake:index/externalTable:ExternalTable":
                return new ExternalTable(name, <any>undefined, { urn })
            case "snowflake:index/externalVolume:ExternalVolume":
                return new ExternalVolume(name, <any>undefined, { urn })
            case "snowflake:index/failoverGroup:FailoverGroup":
                return new FailoverGroup(name, <any>undefined, { urn })
            case "snowflake:index/fileFormat:FileFormat":
                return new FileFormat(name, <any>undefined, { urn })
            case "snowflake:index/functionJava:FunctionJava":
                return new FunctionJava(name, <any>undefined, { urn })
            case "snowflake:index/functionJavascript:FunctionJavascript":
                return new FunctionJavascript(name, <any>undefined, { urn })
            case "snowflake:index/functionPython:FunctionPython":
                return new FunctionPython(name, <any>undefined, { urn })
            case "snowflake:index/functionScala:FunctionScala":
                return new FunctionScala(name, <any>undefined, { urn })
            case "snowflake:index/functionSql:FunctionSql":
                return new FunctionSql(name, <any>undefined, { urn })
            case "snowflake:index/grantAccountRole:GrantAccountRole":
                return new GrantAccountRole(name, <any>undefined, { urn })
            case "snowflake:index/grantApplicationRole:GrantApplicationRole":
                return new GrantApplicationRole(name, <any>undefined, { urn })
            case "snowflake:index/grantDatabaseRole:GrantDatabaseRole":
                return new GrantDatabaseRole(name, <any>undefined, { urn })
            case "snowflake:index/grantOwnership:GrantOwnership":
                return new GrantOwnership(name, <any>undefined, { urn })
            case "snowflake:index/grantPrivilegesToAccountRole:GrantPrivilegesToAccountRole":
                return new GrantPrivilegesToAccountRole(name, <any>undefined, { urn })
            case "snowflake:index/grantPrivilegesToDatabaseRole:GrantPrivilegesToDatabaseRole":
                return new GrantPrivilegesToDatabaseRole(name, <any>undefined, { urn })
            case "snowflake:index/grantPrivilegesToShare:GrantPrivilegesToShare":
                return new GrantPrivilegesToShare(name, <any>undefined, { urn })
            case "snowflake:index/legacyServiceUser:LegacyServiceUser":
                return new LegacyServiceUser(name, <any>undefined, { urn })
            case "snowflake:index/managedAccount:ManagedAccount":
                return new ManagedAccount(name, <any>undefined, { urn })
            case "snowflake:index/maskingPolicy:MaskingPolicy":
                return new MaskingPolicy(name, <any>undefined, { urn })
            case "snowflake:index/materializedView:MaterializedView":
                return new MaterializedView(name, <any>undefined, { urn })
            case "snowflake:index/networkPolicy:NetworkPolicy":
                return new NetworkPolicy(name, <any>undefined, { urn })
            case "snowflake:index/networkPolicyAttachment:NetworkPolicyAttachment":
                return new NetworkPolicyAttachment(name, <any>undefined, { urn })
            case "snowflake:index/networkRule:NetworkRule":
                return new NetworkRule(name, <any>undefined, { urn })
            case "snowflake:index/notificationIntegration:NotificationIntegration":
                return new NotificationIntegration(name, <any>undefined, { urn })
            case "snowflake:index/oauthIntegrationForCustomClients:OauthIntegrationForCustomClients":
                return new OauthIntegrationForCustomClients(name, <any>undefined, { urn })
            case "snowflake:index/oauthIntegrationForPartnerApplications:OauthIntegrationForPartnerApplications":
                return new OauthIntegrationForPartnerApplications(name, <any>undefined, { urn })
            case "snowflake:index/objectParameter:ObjectParameter":
                return new ObjectParameter(name, <any>undefined, { urn })
            case "snowflake:index/passwordPolicy:PasswordPolicy":
                return new PasswordPolicy(name, <any>undefined, { urn })
            case "snowflake:index/pipe:Pipe":
                return new Pipe(name, <any>undefined, { urn })
            case "snowflake:index/primaryConnection:PrimaryConnection":
                return new PrimaryConnection(name, <any>undefined, { urn })
            case "snowflake:index/procedureJava:ProcedureJava":
                return new ProcedureJava(name, <any>undefined, { urn })
            case "snowflake:index/procedureJavascript:ProcedureJavascript":
                return new ProcedureJavascript(name, <any>undefined, { urn })
            case "snowflake:index/procedurePython:ProcedurePython":
                return new ProcedurePython(name, <any>undefined, { urn })
            case "snowflake:index/procedureScala:ProcedureScala":
                return new ProcedureScala(name, <any>undefined, { urn })
            case "snowflake:index/procedureSql:ProcedureSql":
                return new ProcedureSql(name, <any>undefined, { urn })
            case "snowflake:index/resourceMonitor:ResourceMonitor":
                return new ResourceMonitor(name, <any>undefined, { urn })
            case "snowflake:index/rowAccessPolicy:RowAccessPolicy":
                return new RowAccessPolicy(name, <any>undefined, { urn })
            case "snowflake:index/saml2Integration:Saml2Integration":
                return new Saml2Integration(name, <any>undefined, { urn })
            case "snowflake:index/schema:Schema":
                return new Schema(name, <any>undefined, { urn })
            case "snowflake:index/scimIntegration:ScimIntegration":
                return new ScimIntegration(name, <any>undefined, { urn })
            case "snowflake:index/secondaryConnection:SecondaryConnection":
                return new SecondaryConnection(name, <any>undefined, { urn })
            case "snowflake:index/secondaryDatabase:SecondaryDatabase":
                return new SecondaryDatabase(name, <any>undefined, { urn })
            case "snowflake:index/secretWithAuthorizationCodeGrant:SecretWithAuthorizationCodeGrant":
                return new SecretWithAuthorizationCodeGrant(name, <any>undefined, { urn })
            case "snowflake:index/secretWithBasicAuthentication:SecretWithBasicAuthentication":
                return new SecretWithBasicAuthentication(name, <any>undefined, { urn })
            case "snowflake:index/secretWithClientCredentials:SecretWithClientCredentials":
                return new SecretWithClientCredentials(name, <any>undefined, { urn })
            case "snowflake:index/secretWithGenericString:SecretWithGenericString":
                return new SecretWithGenericString(name, <any>undefined, { urn })
            case "snowflake:index/sequence:Sequence":
                return new Sequence(name, <any>undefined, { urn })
            case "snowflake:index/serviceUser:ServiceUser":
                return new ServiceUser(name, <any>undefined, { urn })
            case "snowflake:index/share:Share":
                return new Share(name, <any>undefined, { urn })
            case "snowflake:index/sharedDatabase:SharedDatabase":
                return new SharedDatabase(name, <any>undefined, { urn })
            case "snowflake:index/stage:Stage":
                return new Stage(name, <any>undefined, { urn })
            case "snowflake:index/storageIntegration:StorageIntegration":
                return new StorageIntegration(name, <any>undefined, { urn })
            case "snowflake:index/streamOnDirectoryTable:StreamOnDirectoryTable":
                return new StreamOnDirectoryTable(name, <any>undefined, { urn })
            case "snowflake:index/streamOnExternalTable:StreamOnExternalTable":
                return new StreamOnExternalTable(name, <any>undefined, { urn })
            case "snowflake:index/streamOnTable:StreamOnTable":
                return new StreamOnTable(name, <any>undefined, { urn })
            case "snowflake:index/streamOnView:StreamOnView":
                return new StreamOnView(name, <any>undefined, { urn })
            case "snowflake:index/streamlit:Streamlit":
                return new Streamlit(name, <any>undefined, { urn })
            case "snowflake:index/table:Table":
                return new Table(name, <any>undefined, { urn })
            case "snowflake:index/tableColumnMaskingPolicyApplication:TableColumnMaskingPolicyApplication":
                return new TableColumnMaskingPolicyApplication(name, <any>undefined, { urn })
            case "snowflake:index/tableConstraint:TableConstraint":
                return new TableConstraint(name, <any>undefined, { urn })
            case "snowflake:index/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "snowflake:index/tagAssociation:TagAssociation":
                return new TagAssociation(name, <any>undefined, { urn })
            case "snowflake:index/task:Task":
                return new Task(name, <any>undefined, { urn })
            case "snowflake:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "snowflake:index/userAuthenticationPolicyAttachment:UserAuthenticationPolicyAttachment":
                return new UserAuthenticationPolicyAttachment(name, <any>undefined, { urn })
            case "snowflake:index/userPasswordPolicyAttachment:UserPasswordPolicyAttachment":
                return new UserPasswordPolicyAttachment(name, <any>undefined, { urn })
            case "snowflake:index/userPublicKeys:UserPublicKeys":
                return new UserPublicKeys(name, <any>undefined, { urn })
            case "snowflake:index/view:View":
                return new View(name, <any>undefined, { urn })
            case "snowflake:index/warehouse:Warehouse":
                return new Warehouse(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("snowflake", "index/account", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/accountAuthenticationPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/accountParameter", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/accountPasswordPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/accountRole", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/alert", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/apiAuthenticationIntegrationWithAuthorizationCodeGrant", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/apiAuthenticationIntegrationWithClientCredentials", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/apiAuthenticationIntegrationWithJwtBearer", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/apiIntegration", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/authenticationPolicy", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/cortexSearchService", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/database", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/databaseRole", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/dynamicTable", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/emailNotificationIntegration", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/execute", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/externalFunction", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/externalOauthIntegration", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/externalTable", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/externalVolume", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/failoverGroup", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/fileFormat", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/functionJava", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/functionJavascript", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/functionPython", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/functionScala", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/functionSql", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/grantAccountRole", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/grantApplicationRole", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/grantDatabaseRole", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/grantOwnership", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/grantPrivilegesToAccountRole", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/grantPrivilegesToDatabaseRole", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/grantPrivilegesToShare", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/legacyServiceUser", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/managedAccount", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/maskingPolicy", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/materializedView", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/networkPolicy", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/networkPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/networkRule", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/notificationIntegration", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/oauthIntegrationForCustomClients", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/oauthIntegrationForPartnerApplications", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/objectParameter", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/passwordPolicy", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/pipe", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/primaryConnection", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/procedureJava", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/procedureJavascript", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/procedurePython", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/procedureScala", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/procedureSql", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/resourceMonitor", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/rowAccessPolicy", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/saml2Integration", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/schema", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/scimIntegration", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/secondaryConnection", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/secondaryDatabase", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/secretWithAuthorizationCodeGrant", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/secretWithBasicAuthentication", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/secretWithClientCredentials", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/secretWithGenericString", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/sequence", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/serviceUser", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/share", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/sharedDatabase", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/stage", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/storageIntegration", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/streamOnDirectoryTable", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/streamOnExternalTable", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/streamOnTable", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/streamOnView", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/streamlit", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/table", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/tableColumnMaskingPolicyApplication", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/tableConstraint", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/tag", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/tagAssociation", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/task", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/user", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/userAuthenticationPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/userPasswordPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/userPublicKeys", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/view", _module)
pulumi.runtime.registerResourceModule("snowflake", "index/warehouse", _module)
pulumi.runtime.registerResourcePackage("snowflake", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:snowflake") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
