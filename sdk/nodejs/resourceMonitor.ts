// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * format is the resource monitor name
 *
 * ```sh
 * $ pulumi import snowflake:index/resourceMonitor:ResourceMonitor example 'resourceMonitorName'
 * ```
 */
export class ResourceMonitor extends pulumi.CustomResource {
    /**
     * Get an existing ResourceMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceMonitorState, opts?: pulumi.CustomResourceOptions): ResourceMonitor {
        return new ResourceMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/resourceMonitor:ResourceMonitor';

    /**
     * Returns true if the given object is an instance of ResourceMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceMonitor.__pulumiType;
    }

    /**
     * The number of credits allocated to the resource monitor per frequency interval. When total usage for all warehouses assigned to the monitor reaches this number for the current frequency interval, the resource monitor is considered to be at 100% of quota.
     */
    public readonly creditQuota!: pulumi.Output<number | undefined>;
    /**
     * The date and time when the resource monitor suspends the assigned warehouses.
     */
    public readonly endTimestamp!: pulumi.Output<string | undefined>;
    /**
     * The frequency interval at which the credit usage resets to 0. Valid values are (case-insensitive): `MONTHLY` | `DAILY` | `WEEKLY` | `YEARLY` | `NEVER`. If you set a `frequency` for a resource monitor, you must also set `startTimestamp`. If you specify `NEVER` for the frequency, the credit usage for the warehouse does not reset. After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
     */
    public readonly frequency!: pulumi.Output<string | undefined>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    public /*out*/ readonly fullyQualifiedName!: pulumi.Output<string>;
    /**
     * Identifier for the resource monitor; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies a list of percentages of the credit quota. After reaching any of the values the users passed in the notifyUsers field will be notified (to receive the notification they should have notifications enabled). Values over 100 are supported.
     */
    public readonly notifyTriggers!: pulumi.Output<number[] | undefined>;
    /**
     * Specifies the list of users (their identifiers) to receive email notifications on resource monitors.
     */
    public readonly notifyUsers!: pulumi.Output<string[] | undefined>;
    /**
     * Outputs the result of `SHOW RESOURCE MONITORS` for the given resource monitor.
     */
    public /*out*/ readonly showOutputs!: pulumi.Output<outputs.ResourceMonitorShowOutput[]>;
    /**
     * The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses. If you set a `startTimestamp` for a resource monitor, you must also set `frequency`.  After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
     */
    public readonly startTimestamp!: pulumi.Output<string | undefined>;
    /**
     * Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses immediately cancel any currently running queries or statements. In addition, this action sends a notification to all users who have enabled notifications for themselves.
     */
    public readonly suspendImmediateTrigger!: pulumi.Output<number | undefined>;
    /**
     * Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses while allowing currently running queries to complete will be suspended. No new queries can be executed by the warehouses until the credit quota for the resource monitor is increased. In addition, this action sends a notification to all users who have enabled notifications for themselves.
     */
    public readonly suspendTrigger!: pulumi.Output<number | undefined>;

    /**
     * Create a ResourceMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ResourceMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceMonitorArgs | ResourceMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceMonitorState | undefined;
            resourceInputs["creditQuota"] = state ? state.creditQuota : undefined;
            resourceInputs["endTimestamp"] = state ? state.endTimestamp : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["fullyQualifiedName"] = state ? state.fullyQualifiedName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifyTriggers"] = state ? state.notifyTriggers : undefined;
            resourceInputs["notifyUsers"] = state ? state.notifyUsers : undefined;
            resourceInputs["showOutputs"] = state ? state.showOutputs : undefined;
            resourceInputs["startTimestamp"] = state ? state.startTimestamp : undefined;
            resourceInputs["suspendImmediateTrigger"] = state ? state.suspendImmediateTrigger : undefined;
            resourceInputs["suspendTrigger"] = state ? state.suspendTrigger : undefined;
        } else {
            const args = argsOrState as ResourceMonitorArgs | undefined;
            resourceInputs["creditQuota"] = args ? args.creditQuota : undefined;
            resourceInputs["endTimestamp"] = args ? args.endTimestamp : undefined;
            resourceInputs["frequency"] = args ? args.frequency : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifyTriggers"] = args ? args.notifyTriggers : undefined;
            resourceInputs["notifyUsers"] = args ? args.notifyUsers : undefined;
            resourceInputs["startTimestamp"] = args ? args.startTimestamp : undefined;
            resourceInputs["suspendImmediateTrigger"] = args ? args.suspendImmediateTrigger : undefined;
            resourceInputs["suspendTrigger"] = args ? args.suspendTrigger : undefined;
            resourceInputs["fullyQualifiedName"] = undefined /*out*/;
            resourceInputs["showOutputs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceMonitor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ResourceMonitor resources.
 */
export interface ResourceMonitorState {
    /**
     * The number of credits allocated to the resource monitor per frequency interval. When total usage for all warehouses assigned to the monitor reaches this number for the current frequency interval, the resource monitor is considered to be at 100% of quota.
     */
    creditQuota?: pulumi.Input<number>;
    /**
     * The date and time when the resource monitor suspends the assigned warehouses.
     */
    endTimestamp?: pulumi.Input<string>;
    /**
     * The frequency interval at which the credit usage resets to 0. Valid values are (case-insensitive): `MONTHLY` | `DAILY` | `WEEKLY` | `YEARLY` | `NEVER`. If you set a `frequency` for a resource monitor, you must also set `startTimestamp`. If you specify `NEVER` for the frequency, the credit usage for the warehouse does not reset. After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
     */
    frequency?: pulumi.Input<string>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    fullyQualifiedName?: pulumi.Input<string>;
    /**
     * Identifier for the resource monitor; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies a list of percentages of the credit quota. After reaching any of the values the users passed in the notifyUsers field will be notified (to receive the notification they should have notifications enabled). Values over 100 are supported.
     */
    notifyTriggers?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Specifies the list of users (their identifiers) to receive email notifications on resource monitors.
     */
    notifyUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Outputs the result of `SHOW RESOURCE MONITORS` for the given resource monitor.
     */
    showOutputs?: pulumi.Input<pulumi.Input<inputs.ResourceMonitorShowOutput>[]>;
    /**
     * The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses. If you set a `startTimestamp` for a resource monitor, you must also set `frequency`.  After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
     */
    startTimestamp?: pulumi.Input<string>;
    /**
     * Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses immediately cancel any currently running queries or statements. In addition, this action sends a notification to all users who have enabled notifications for themselves.
     */
    suspendImmediateTrigger?: pulumi.Input<number>;
    /**
     * Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses while allowing currently running queries to complete will be suspended. No new queries can be executed by the warehouses until the credit quota for the resource monitor is increased. In addition, this action sends a notification to all users who have enabled notifications for themselves.
     */
    suspendTrigger?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ResourceMonitor resource.
 */
export interface ResourceMonitorArgs {
    /**
     * The number of credits allocated to the resource monitor per frequency interval. When total usage for all warehouses assigned to the monitor reaches this number for the current frequency interval, the resource monitor is considered to be at 100% of quota.
     */
    creditQuota?: pulumi.Input<number>;
    /**
     * The date and time when the resource monitor suspends the assigned warehouses.
     */
    endTimestamp?: pulumi.Input<string>;
    /**
     * The frequency interval at which the credit usage resets to 0. Valid values are (case-insensitive): `MONTHLY` | `DAILY` | `WEEKLY` | `YEARLY` | `NEVER`. If you set a `frequency` for a resource monitor, you must also set `startTimestamp`. If you specify `NEVER` for the frequency, the credit usage for the warehouse does not reset. After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
     */
    frequency?: pulumi.Input<string>;
    /**
     * Identifier for the resource monitor; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies a list of percentages of the credit quota. After reaching any of the values the users passed in the notifyUsers field will be notified (to receive the notification they should have notifications enabled). Values over 100 are supported.
     */
    notifyTriggers?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Specifies the list of users (their identifiers) to receive email notifications on resource monitors.
     */
    notifyUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses. If you set a `startTimestamp` for a resource monitor, you must also set `frequency`.  After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
     */
    startTimestamp?: pulumi.Input<string>;
    /**
     * Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses immediately cancel any currently running queries or statements. In addition, this action sends a notification to all users who have enabled notifications for themselves.
     */
    suspendImmediateTrigger?: pulumi.Input<number>;
    /**
     * Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses while allowing currently running queries to complete will be suspended. No new queries can be executed by the warehouses until the credit quota for the resource monitor is increased. In addition, this action sends a notification to all users who have enabled notifications for themselves.
     */
    suspendTrigger?: pulumi.Input<number>;
}
