// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FunctionPython extends pulumi.CustomResource {
    /**
     * Get an existing FunctionPython resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FunctionPythonState, opts?: pulumi.CustomResourceOptions): FunctionPython {
        return new FunctionPython(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/functionPython:FunctionPython';

    /**
     * Returns true if the given object is an instance of FunctionPython.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FunctionPython {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FunctionPython.__pulumiType;
    }

    /**
     * List of the arguments for the function. Consult the
     * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
     */
    public readonly arguments!: pulumi.Output<outputs.FunctionPythonArgument[] | undefined>;
    /**
     * Specifies a comment for the function.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * The database in which to create the function. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `"`.
     */
    public readonly database!: pulumi.Output<string>;
    /**
     * Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).
     * For more information, check [ENABLE_CONSOLE_OUTPUT
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
     */
    public readonly enableConsoleOutput!: pulumi.Output<boolean>;
    /**
     * The names of [external access
     * integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
     * this function’s handler code to access external networks. An external access integration specifies [network
     * rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
     * [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
     * (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
     */
    public readonly externalAccessIntegrations!: pulumi.Output<string[] | undefined>;
    /**
     * Fully qualified name of the resource. For more information, see [object name
     * resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    public /*out*/ readonly fullyQualifiedName!: pulumi.Output<string>;
    /**
     * Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;
     * do not include them. The `functionDefinition` value must be Python source code. For more information, see [Introduction
     * to Python UDFs](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-introduction). To mitigate permadiff
     * on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a
     * change in case or run of whitespace is semantically significant.
     */
    public readonly functionDefinition!: pulumi.Output<string | undefined>;
    /**
     * Specifies language for the user. Used to detect external changes.
     */
    public /*out*/ readonly functionLanguage!: pulumi.Output<string>;
    /**
     * The name of the handler function or class. If the handler is for a scalar UDF, returning a non-tabular value, the
     * HANDLER value should be a function name. If the handler code is in-line with the CREATE FUNCTION statement, you can use
     * the function name alone. When the handler code is referenced at a stage, this value should be qualified with the module
     * name, as in the following form: `my_module.my_function`. If the handler is for a tabular UDF, the HANDLER value should
     * be the name of a handler class.
     */
    public readonly handler!: pulumi.Output<string>;
    /**
     * The location (stage), path, and name of the file(s) to import. A file can be a `.py` file or another type of file.
     * Python UDFs can also read non-Python files, such as text files. For an example, see [Reading a
     * file](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-examples.html#label-udf-python-read-files).
     * Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#python).
     */
    public readonly imports!: pulumi.Output<outputs.FunctionPythonImport[] | undefined>;
    /**
     * Specifies that the function is an aggregate function. For more information about user-defined aggregate functions, see
     * [Python user-defined aggregate
     * functions](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-aggregate-functions). Available options
     * are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means
     * to use the Snowflake default for this value.
     */
    public readonly isAggregate!: pulumi.Output<string | undefined>;
    public readonly isSecure!: pulumi.Output<string | undefined>;
    /**
     * LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
     */
    public readonly logLevel!: pulumi.Output<string>;
    /**
     * METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
     */
    public readonly metricLevel!: pulumi.Output<string>;
    /**
     * The name of the function; the identifier does not need to be unique for the schema in which the function is created
     * because UDFs are identified and resolved by the combination of the name and argument types. Check the
     * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations
     * (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON
     * NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
     */
    public readonly nullInputBehavior!: pulumi.Output<string | undefined>;
    /**
     * The name and version number of packages required as dependencies. The value should be of the form
     * `package_name==version_number`.
     */
    public readonly packages!: pulumi.Output<string[] | undefined>;
    /**
     * Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.
     */
    public /*out*/ readonly parameters!: pulumi.Output<outputs.FunctionPythonParameter[]>;
    /**
     * Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |
     * `IMMUTABLE`.
     */
    public readonly returnResultsBehavior!: pulumi.Output<string | undefined>;
    /**
     * Specifies the results returned by the UDF, which determines the UDF type. Use `<result_data_type>` to create a scalar
     * UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a
     * table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult
     * the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
     */
    public readonly returnType!: pulumi.Output<string>;
    /**
     * Specifies the Python version to use. The supported versions of Python are: 3.9, 3.10, and 3.11.
     */
    public readonly runtimeVersion!: pulumi.Output<string>;
    /**
     * The schema in which to create the function. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `"`.
     */
    public readonly schema!: pulumi.Output<string>;
    /**
     * Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
     * can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
     * specify here must be allowed by the [external access
     * integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
     * this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
     */
    public readonly secrets!: pulumi.Output<outputs.FunctionPythonSecret[] | undefined>;
    /**
     * Outputs the result of `SHOW FUNCTION` for the given function.
     */
    public /*out*/ readonly showOutputs!: pulumi.Output<outputs.FunctionPythonShowOutput[]>;
    /**
     * Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
     */
    public readonly traceLevel!: pulumi.Output<string>;

    /**
     * Create a FunctionPython resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FunctionPythonArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FunctionPythonArgs | FunctionPythonState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FunctionPythonState | undefined;
            resourceInputs["arguments"] = state ? state.arguments : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["enableConsoleOutput"] = state ? state.enableConsoleOutput : undefined;
            resourceInputs["externalAccessIntegrations"] = state ? state.externalAccessIntegrations : undefined;
            resourceInputs["fullyQualifiedName"] = state ? state.fullyQualifiedName : undefined;
            resourceInputs["functionDefinition"] = state ? state.functionDefinition : undefined;
            resourceInputs["functionLanguage"] = state ? state.functionLanguage : undefined;
            resourceInputs["handler"] = state ? state.handler : undefined;
            resourceInputs["imports"] = state ? state.imports : undefined;
            resourceInputs["isAggregate"] = state ? state.isAggregate : undefined;
            resourceInputs["isSecure"] = state ? state.isSecure : undefined;
            resourceInputs["logLevel"] = state ? state.logLevel : undefined;
            resourceInputs["metricLevel"] = state ? state.metricLevel : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nullInputBehavior"] = state ? state.nullInputBehavior : undefined;
            resourceInputs["packages"] = state ? state.packages : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["returnResultsBehavior"] = state ? state.returnResultsBehavior : undefined;
            resourceInputs["returnType"] = state ? state.returnType : undefined;
            resourceInputs["runtimeVersion"] = state ? state.runtimeVersion : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["secrets"] = state ? state.secrets : undefined;
            resourceInputs["showOutputs"] = state ? state.showOutputs : undefined;
            resourceInputs["traceLevel"] = state ? state.traceLevel : undefined;
        } else {
            const args = argsOrState as FunctionPythonArgs | undefined;
            if ((!args || args.database === undefined) && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if ((!args || args.handler === undefined) && !opts.urn) {
                throw new Error("Missing required property 'handler'");
            }
            if ((!args || args.returnType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'returnType'");
            }
            if ((!args || args.runtimeVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtimeVersion'");
            }
            if ((!args || args.schema === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            resourceInputs["arguments"] = args ? args.arguments : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["enableConsoleOutput"] = args ? args.enableConsoleOutput : undefined;
            resourceInputs["externalAccessIntegrations"] = args ? args.externalAccessIntegrations : undefined;
            resourceInputs["functionDefinition"] = args ? args.functionDefinition : undefined;
            resourceInputs["handler"] = args ? args.handler : undefined;
            resourceInputs["imports"] = args ? args.imports : undefined;
            resourceInputs["isAggregate"] = args ? args.isAggregate : undefined;
            resourceInputs["isSecure"] = args ? args.isSecure : undefined;
            resourceInputs["logLevel"] = args ? args.logLevel : undefined;
            resourceInputs["metricLevel"] = args ? args.metricLevel : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nullInputBehavior"] = args ? args.nullInputBehavior : undefined;
            resourceInputs["packages"] = args ? args.packages : undefined;
            resourceInputs["returnResultsBehavior"] = args ? args.returnResultsBehavior : undefined;
            resourceInputs["returnType"] = args ? args.returnType : undefined;
            resourceInputs["runtimeVersion"] = args ? args.runtimeVersion : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["secrets"] = args ? args.secrets : undefined;
            resourceInputs["traceLevel"] = args ? args.traceLevel : undefined;
            resourceInputs["fullyQualifiedName"] = undefined /*out*/;
            resourceInputs["functionLanguage"] = undefined /*out*/;
            resourceInputs["parameters"] = undefined /*out*/;
            resourceInputs["showOutputs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FunctionPython.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FunctionPython resources.
 */
export interface FunctionPythonState {
    /**
     * List of the arguments for the function. Consult the
     * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
     */
    arguments?: pulumi.Input<pulumi.Input<inputs.FunctionPythonArgument>[]>;
    /**
     * Specifies a comment for the function.
     */
    comment?: pulumi.Input<string>;
    /**
     * The database in which to create the function. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `"`.
     */
    database?: pulumi.Input<string>;
    /**
     * Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).
     * For more information, check [ENABLE_CONSOLE_OUTPUT
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
     */
    enableConsoleOutput?: pulumi.Input<boolean>;
    /**
     * The names of [external access
     * integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
     * this function’s handler code to access external networks. An external access integration specifies [network
     * rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
     * [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
     * (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
     */
    externalAccessIntegrations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Fully qualified name of the resource. For more information, see [object name
     * resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    fullyQualifiedName?: pulumi.Input<string>;
    /**
     * Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;
     * do not include them. The `functionDefinition` value must be Python source code. For more information, see [Introduction
     * to Python UDFs](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-introduction). To mitigate permadiff
     * on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a
     * change in case or run of whitespace is semantically significant.
     */
    functionDefinition?: pulumi.Input<string>;
    /**
     * Specifies language for the user. Used to detect external changes.
     */
    functionLanguage?: pulumi.Input<string>;
    /**
     * The name of the handler function or class. If the handler is for a scalar UDF, returning a non-tabular value, the
     * HANDLER value should be a function name. If the handler code is in-line with the CREATE FUNCTION statement, you can use
     * the function name alone. When the handler code is referenced at a stage, this value should be qualified with the module
     * name, as in the following form: `my_module.my_function`. If the handler is for a tabular UDF, the HANDLER value should
     * be the name of a handler class.
     */
    handler?: pulumi.Input<string>;
    /**
     * The location (stage), path, and name of the file(s) to import. A file can be a `.py` file or another type of file.
     * Python UDFs can also read non-Python files, such as text files. For an example, see [Reading a
     * file](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-examples.html#label-udf-python-read-files).
     * Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#python).
     */
    imports?: pulumi.Input<pulumi.Input<inputs.FunctionPythonImport>[]>;
    /**
     * Specifies that the function is an aggregate function. For more information about user-defined aggregate functions, see
     * [Python user-defined aggregate
     * functions](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-aggregate-functions). Available options
     * are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means
     * to use the Snowflake default for this value.
     */
    isAggregate?: pulumi.Input<string>;
    isSecure?: pulumi.Input<string>;
    /**
     * LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
     */
    logLevel?: pulumi.Input<string>;
    /**
     * METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
     */
    metricLevel?: pulumi.Input<string>;
    /**
     * The name of the function; the identifier does not need to be unique for the schema in which the function is created
     * because UDFs are identified and resolved by the combination of the name and argument types. Check the
     * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations
     * (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON
     * NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
     */
    nullInputBehavior?: pulumi.Input<string>;
    /**
     * The name and version number of packages required as dependencies. The value should be of the form
     * `package_name==version_number`.
     */
    packages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.
     */
    parameters?: pulumi.Input<pulumi.Input<inputs.FunctionPythonParameter>[]>;
    /**
     * Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |
     * `IMMUTABLE`.
     */
    returnResultsBehavior?: pulumi.Input<string>;
    /**
     * Specifies the results returned by the UDF, which determines the UDF type. Use `<result_data_type>` to create a scalar
     * UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a
     * table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult
     * the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
     */
    returnType?: pulumi.Input<string>;
    /**
     * Specifies the Python version to use. The supported versions of Python are: 3.9, 3.10, and 3.11.
     */
    runtimeVersion?: pulumi.Input<string>;
    /**
     * The schema in which to create the function. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `"`.
     */
    schema?: pulumi.Input<string>;
    /**
     * Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
     * can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
     * specify here must be allowed by the [external access
     * integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
     * this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
     */
    secrets?: pulumi.Input<pulumi.Input<inputs.FunctionPythonSecret>[]>;
    /**
     * Outputs the result of `SHOW FUNCTION` for the given function.
     */
    showOutputs?: pulumi.Input<pulumi.Input<inputs.FunctionPythonShowOutput>[]>;
    /**
     * Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
     */
    traceLevel?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FunctionPython resource.
 */
export interface FunctionPythonArgs {
    /**
     * List of the arguments for the function. Consult the
     * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
     */
    arguments?: pulumi.Input<pulumi.Input<inputs.FunctionPythonArgument>[]>;
    /**
     * Specifies a comment for the function.
     */
    comment?: pulumi.Input<string>;
    /**
     * The database in which to create the function. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `"`.
     */
    database: pulumi.Input<string>;
    /**
     * Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).
     * For more information, check [ENABLE_CONSOLE_OUTPUT
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
     */
    enableConsoleOutput?: pulumi.Input<boolean>;
    /**
     * The names of [external access
     * integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
     * this function’s handler code to access external networks. An external access integration specifies [network
     * rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
     * [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
     * (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
     */
    externalAccessIntegrations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;
     * do not include them. The `functionDefinition` value must be Python source code. For more information, see [Introduction
     * to Python UDFs](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-introduction). To mitigate permadiff
     * on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a
     * change in case or run of whitespace is semantically significant.
     */
    functionDefinition?: pulumi.Input<string>;
    /**
     * The name of the handler function or class. If the handler is for a scalar UDF, returning a non-tabular value, the
     * HANDLER value should be a function name. If the handler code is in-line with the CREATE FUNCTION statement, you can use
     * the function name alone. When the handler code is referenced at a stage, this value should be qualified with the module
     * name, as in the following form: `my_module.my_function`. If the handler is for a tabular UDF, the HANDLER value should
     * be the name of a handler class.
     */
    handler: pulumi.Input<string>;
    /**
     * The location (stage), path, and name of the file(s) to import. A file can be a `.py` file or another type of file.
     * Python UDFs can also read non-Python files, such as text files. For an example, see [Reading a
     * file](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-examples.html#label-udf-python-read-files).
     * Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#python).
     */
    imports?: pulumi.Input<pulumi.Input<inputs.FunctionPythonImport>[]>;
    /**
     * Specifies that the function is an aggregate function. For more information about user-defined aggregate functions, see
     * [Python user-defined aggregate
     * functions](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-aggregate-functions). Available options
     * are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means
     * to use the Snowflake default for this value.
     */
    isAggregate?: pulumi.Input<string>;
    isSecure?: pulumi.Input<string>;
    /**
     * LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
     */
    logLevel?: pulumi.Input<string>;
    /**
     * METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
     */
    metricLevel?: pulumi.Input<string>;
    /**
     * The name of the function; the identifier does not need to be unique for the schema in which the function is created
     * because UDFs are identified and resolved by the combination of the name and argument types. Check the
     * [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations
     * (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON
     * NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
     */
    nullInputBehavior?: pulumi.Input<string>;
    /**
     * The name and version number of packages required as dependencies. The value should be of the form
     * `package_name==version_number`.
     */
    packages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |
     * `IMMUTABLE`.
     */
    returnResultsBehavior?: pulumi.Input<string>;
    /**
     * Specifies the results returned by the UDF, which determines the UDF type. Use `<result_data_type>` to create a scalar
     * UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a
     * table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult
     * the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
     */
    returnType: pulumi.Input<string>;
    /**
     * Specifies the Python version to use. The supported versions of Python are: 3.9, 3.10, and 3.11.
     */
    runtimeVersion: pulumi.Input<string>;
    /**
     * The schema in which to create the function. Due to technical limitations (read more here), avoid using the following
     * characters: `|`, `.`, `"`.
     */
    schema: pulumi.Input<string>;
    /**
     * Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
     * can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
     * specify here must be allowed by the [external access
     * integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
     * this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
     */
    secrets?: pulumi.Input<pulumi.Input<inputs.FunctionPythonSecret>[]>;
    /**
     * Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
     * docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
     */
    traceLevel?: pulumi.Input<string>;
}
