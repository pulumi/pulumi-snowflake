// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * ```sh
 * $ pulumi import snowflake:index/functionPython:FunctionPython example '"<database_name>"."<schema_name>"."<function_name>"(varchar, varchar, varchar)'
 * ```
 *
 * Note: Snowflake is not returning all information needed to populate the state correctly after import (e.g. data types with attributes like NUMBER(32, 10) are returned as NUMBER, default values for arguments are not returned at all).
 *
 * Also, `ALTER` for functions is very limited so most of the attributes on this resource are marked as force new. Because of that, in multiple situations plan won't be empty after importing and manual state operations may be required.
 */
export class FunctionPython extends pulumi.CustomResource {
    /**
     * Get an existing FunctionPython resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FunctionPythonState, opts?: pulumi.CustomResourceOptions): FunctionPython {
        return new FunctionPython(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/functionPython:FunctionPython';

    /**
     * Returns true if the given object is an instance of FunctionPython.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FunctionPython {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FunctionPython.__pulumiType;
    }

    /**
     * List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
     */
    declare public readonly arguments: pulumi.Output<outputs.FunctionPythonArgument[] | undefined>;
    /**
     * (Default: `user-defined function`) Specifies a comment for the function.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    declare public readonly database: pulumi.Output<string>;
    /**
     * Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
     */
    declare public readonly enableConsoleOutput: pulumi.Output<boolean>;
    /**
     * The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this functionâ€™s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
     */
    declare public readonly externalAccessIntegrations: pulumi.Output<string[] | undefined>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    declare public /*out*/ readonly fullyQualifiedName: pulumi.Output<string>;
    /**
     * Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `functionDefinition` value must be Python source code. For more information, see [Introduction to Python UDFs](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
     */
    declare public readonly functionDefinition: pulumi.Output<string | undefined>;
    /**
     * Specifies language for the user. Used to detect external changes.
     */
    declare public /*out*/ readonly functionLanguage: pulumi.Output<string>;
    /**
     * The name of the handler function or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER value should be a function name. If the handler code is in-line with the CREATE FUNCTION statement, you can use the function name alone. When the handler code is referenced at a stage, this value should be qualified with the module name, as in the following form: `my_module.my_function`. If the handler is for a tabular UDF, the HANDLER value should be the name of a handler class.
     */
    declare public readonly handler: pulumi.Output<string>;
    /**
     * The location (stage), path, and name of the file(s) to import. A file can be a `.py` file or another type of file. Python UDFs can also read non-Python files, such as text files. For an example, see [Reading a file](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-examples.html#label-udf-python-read-files). Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#python).
     */
    declare public readonly imports: pulumi.Output<outputs.FunctionPythonImport[] | undefined>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the function is an aggregate function. For more information about user-defined aggregate functions, see [Python user-defined aggregate functions](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-aggregate-functions). Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
     */
    declare public readonly isAggregate: pulumi.Output<string | undefined>;
    declare public readonly isSecure: pulumi.Output<string | undefined>;
    /**
     * LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
     */
    declare public readonly logLevel: pulumi.Output<string>;
    /**
     * METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
     */
    declare public readonly metricLevel: pulumi.Output<string>;
    /**
     * The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
     */
    declare public readonly nullInputBehavior: pulumi.Output<string | undefined>;
    /**
     * The name and version number of packages required as dependencies. The value should be of the form `package_name==version_number`.
     */
    declare public readonly packages: pulumi.Output<string[] | undefined>;
    /**
     * Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.
     */
    declare public /*out*/ readonly parameters: pulumi.Output<outputs.FunctionPythonParameter[]>;
    /**
     * Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.
     */
    declare public readonly returnResultsBehavior: pulumi.Output<string | undefined>;
    /**
     * Specifies the results returned by the UDF, which determines the UDF type. Use `<result_data_type>` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
     */
    declare public readonly returnType: pulumi.Output<string>;
    /**
     * Specifies the Python version to use. The supported versions of Python are: 3.9, 3.10, and 3.11.
     */
    declare public readonly runtimeVersion: pulumi.Output<string>;
    /**
     * The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    declare public readonly schema: pulumi.Output<string>;
    /**
     * Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION commandâ€™s EXTERNAL*ACCESS*INTEGRATIONS parameter.
     */
    declare public readonly secrets: pulumi.Output<outputs.FunctionPythonSecret[] | undefined>;
    /**
     * Outputs the result of `SHOW FUNCTION` for the given function.
     */
    declare public /*out*/ readonly showOutputs: pulumi.Output<outputs.FunctionPythonShowOutput[]>;
    /**
     * Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
     */
    declare public readonly traceLevel: pulumi.Output<string>;

    /**
     * Create a FunctionPython resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FunctionPythonArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FunctionPythonArgs | FunctionPythonState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FunctionPythonState | undefined;
            resourceInputs["arguments"] = state?.arguments;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["database"] = state?.database;
            resourceInputs["enableConsoleOutput"] = state?.enableConsoleOutput;
            resourceInputs["externalAccessIntegrations"] = state?.externalAccessIntegrations;
            resourceInputs["fullyQualifiedName"] = state?.fullyQualifiedName;
            resourceInputs["functionDefinition"] = state?.functionDefinition;
            resourceInputs["functionLanguage"] = state?.functionLanguage;
            resourceInputs["handler"] = state?.handler;
            resourceInputs["imports"] = state?.imports;
            resourceInputs["isAggregate"] = state?.isAggregate;
            resourceInputs["isSecure"] = state?.isSecure;
            resourceInputs["logLevel"] = state?.logLevel;
            resourceInputs["metricLevel"] = state?.metricLevel;
            resourceInputs["name"] = state?.name;
            resourceInputs["nullInputBehavior"] = state?.nullInputBehavior;
            resourceInputs["packages"] = state?.packages;
            resourceInputs["parameters"] = state?.parameters;
            resourceInputs["returnResultsBehavior"] = state?.returnResultsBehavior;
            resourceInputs["returnType"] = state?.returnType;
            resourceInputs["runtimeVersion"] = state?.runtimeVersion;
            resourceInputs["schema"] = state?.schema;
            resourceInputs["secrets"] = state?.secrets;
            resourceInputs["showOutputs"] = state?.showOutputs;
            resourceInputs["traceLevel"] = state?.traceLevel;
        } else {
            const args = argsOrState as FunctionPythonArgs | undefined;
            if (args?.database === undefined && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if (args?.handler === undefined && !opts.urn) {
                throw new Error("Missing required property 'handler'");
            }
            if (args?.returnType === undefined && !opts.urn) {
                throw new Error("Missing required property 'returnType'");
            }
            if (args?.runtimeVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'runtimeVersion'");
            }
            if (args?.schema === undefined && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            resourceInputs["arguments"] = args?.arguments;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["database"] = args?.database;
            resourceInputs["enableConsoleOutput"] = args?.enableConsoleOutput;
            resourceInputs["externalAccessIntegrations"] = args?.externalAccessIntegrations;
            resourceInputs["functionDefinition"] = args?.functionDefinition;
            resourceInputs["handler"] = args?.handler;
            resourceInputs["imports"] = args?.imports;
            resourceInputs["isAggregate"] = args?.isAggregate;
            resourceInputs["isSecure"] = args?.isSecure;
            resourceInputs["logLevel"] = args?.logLevel;
            resourceInputs["metricLevel"] = args?.metricLevel;
            resourceInputs["name"] = args?.name;
            resourceInputs["nullInputBehavior"] = args?.nullInputBehavior;
            resourceInputs["packages"] = args?.packages;
            resourceInputs["returnResultsBehavior"] = args?.returnResultsBehavior;
            resourceInputs["returnType"] = args?.returnType;
            resourceInputs["runtimeVersion"] = args?.runtimeVersion;
            resourceInputs["schema"] = args?.schema;
            resourceInputs["secrets"] = args?.secrets;
            resourceInputs["traceLevel"] = args?.traceLevel;
            resourceInputs["fullyQualifiedName"] = undefined /*out*/;
            resourceInputs["functionLanguage"] = undefined /*out*/;
            resourceInputs["parameters"] = undefined /*out*/;
            resourceInputs["showOutputs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FunctionPython.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FunctionPython resources.
 */
export interface FunctionPythonState {
    /**
     * List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
     */
    arguments?: pulumi.Input<pulumi.Input<inputs.FunctionPythonArgument>[]>;
    /**
     * (Default: `user-defined function`) Specifies a comment for the function.
     */
    comment?: pulumi.Input<string>;
    /**
     * The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    database?: pulumi.Input<string>;
    /**
     * Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
     */
    enableConsoleOutput?: pulumi.Input<boolean>;
    /**
     * The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this functionâ€™s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
     */
    externalAccessIntegrations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    fullyQualifiedName?: pulumi.Input<string>;
    /**
     * Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `functionDefinition` value must be Python source code. For more information, see [Introduction to Python UDFs](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
     */
    functionDefinition?: pulumi.Input<string>;
    /**
     * Specifies language for the user. Used to detect external changes.
     */
    functionLanguage?: pulumi.Input<string>;
    /**
     * The name of the handler function or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER value should be a function name. If the handler code is in-line with the CREATE FUNCTION statement, you can use the function name alone. When the handler code is referenced at a stage, this value should be qualified with the module name, as in the following form: `my_module.my_function`. If the handler is for a tabular UDF, the HANDLER value should be the name of a handler class.
     */
    handler?: pulumi.Input<string>;
    /**
     * The location (stage), path, and name of the file(s) to import. A file can be a `.py` file or another type of file. Python UDFs can also read non-Python files, such as text files. For an example, see [Reading a file](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-examples.html#label-udf-python-read-files). Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#python).
     */
    imports?: pulumi.Input<pulumi.Input<inputs.FunctionPythonImport>[]>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the function is an aggregate function. For more information about user-defined aggregate functions, see [Python user-defined aggregate functions](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-aggregate-functions). Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
     */
    isAggregate?: pulumi.Input<string>;
    isSecure?: pulumi.Input<string>;
    /**
     * LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
     */
    logLevel?: pulumi.Input<string>;
    /**
     * METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
     */
    metricLevel?: pulumi.Input<string>;
    /**
     * The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
     */
    nullInputBehavior?: pulumi.Input<string>;
    /**
     * The name and version number of packages required as dependencies. The value should be of the form `package_name==version_number`.
     */
    packages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.
     */
    parameters?: pulumi.Input<pulumi.Input<inputs.FunctionPythonParameter>[]>;
    /**
     * Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.
     */
    returnResultsBehavior?: pulumi.Input<string>;
    /**
     * Specifies the results returned by the UDF, which determines the UDF type. Use `<result_data_type>` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
     */
    returnType?: pulumi.Input<string>;
    /**
     * Specifies the Python version to use. The supported versions of Python are: 3.9, 3.10, and 3.11.
     */
    runtimeVersion?: pulumi.Input<string>;
    /**
     * The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    schema?: pulumi.Input<string>;
    /**
     * Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION commandâ€™s EXTERNAL*ACCESS*INTEGRATIONS parameter.
     */
    secrets?: pulumi.Input<pulumi.Input<inputs.FunctionPythonSecret>[]>;
    /**
     * Outputs the result of `SHOW FUNCTION` for the given function.
     */
    showOutputs?: pulumi.Input<pulumi.Input<inputs.FunctionPythonShowOutput>[]>;
    /**
     * Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
     */
    traceLevel?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FunctionPython resource.
 */
export interface FunctionPythonArgs {
    /**
     * List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
     */
    arguments?: pulumi.Input<pulumi.Input<inputs.FunctionPythonArgument>[]>;
    /**
     * (Default: `user-defined function`) Specifies a comment for the function.
     */
    comment?: pulumi.Input<string>;
    /**
     * The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    database: pulumi.Input<string>;
    /**
     * Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
     */
    enableConsoleOutput?: pulumi.Input<boolean>;
    /**
     * The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this functionâ€™s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
     */
    externalAccessIntegrations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `functionDefinition` value must be Python source code. For more information, see [Introduction to Python UDFs](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
     */
    functionDefinition?: pulumi.Input<string>;
    /**
     * The name of the handler function or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER value should be a function name. If the handler code is in-line with the CREATE FUNCTION statement, you can use the function name alone. When the handler code is referenced at a stage, this value should be qualified with the module name, as in the following form: `my_module.my_function`. If the handler is for a tabular UDF, the HANDLER value should be the name of a handler class.
     */
    handler: pulumi.Input<string>;
    /**
     * The location (stage), path, and name of the file(s) to import. A file can be a `.py` file or another type of file. Python UDFs can also read non-Python files, such as text files. For an example, see [Reading a file](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-examples.html#label-udf-python-read-files). Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#python).
     */
    imports?: pulumi.Input<pulumi.Input<inputs.FunctionPythonImport>[]>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the function is an aggregate function. For more information about user-defined aggregate functions, see [Python user-defined aggregate functions](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-aggregate-functions). Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
     */
    isAggregate?: pulumi.Input<string>;
    isSecure?: pulumi.Input<string>;
    /**
     * LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
     */
    logLevel?: pulumi.Input<string>;
    /**
     * METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
     */
    metricLevel?: pulumi.Input<string>;
    /**
     * The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
     */
    nullInputBehavior?: pulumi.Input<string>;
    /**
     * The name and version number of packages required as dependencies. The value should be of the form `package_name==version_number`.
     */
    packages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.
     */
    returnResultsBehavior?: pulumi.Input<string>;
    /**
     * Specifies the results returned by the UDF, which determines the UDF type. Use `<result_data_type>` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
     */
    returnType: pulumi.Input<string>;
    /**
     * Specifies the Python version to use. The supported versions of Python are: 3.9, 3.10, and 3.11.
     */
    runtimeVersion: pulumi.Input<string>;
    /**
     * The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    schema: pulumi.Input<string>;
    /**
     * Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION commandâ€™s EXTERNAL*ACCESS*INTEGRATIONS parameter.
     */
    secrets?: pulumi.Input<pulumi.Input<inputs.FunctionPythonSecret>[]>;
    /**
     * Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
     */
    traceLevel?: pulumi.Input<string>;
}
