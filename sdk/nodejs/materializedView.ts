// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * format is database name | schema name | view name
 *
 * ```sh
 * $ pulumi import snowflake:index/materializedView:MaterializedView example 'dbName|schemaName|viewName'
 * ```
 */
export class MaterializedView extends pulumi.CustomResource {
    /**
     * Get an existing MaterializedView resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MaterializedViewState, opts?: pulumi.CustomResourceOptions): MaterializedView {
        return new MaterializedView(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/materializedView:MaterializedView';

    /**
     * Returns true if the given object is an instance of MaterializedView.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MaterializedView {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MaterializedView.__pulumiType;
    }

    /**
     * Specifies a comment for the view.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * The database in which to create the view. Don't use the | character.
     */
    declare public readonly database: pulumi.Output<string>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    declare public /*out*/ readonly fullyQualifiedName: pulumi.Output<string>;
    /**
     * (Default: `false`) Specifies that the view is secure.
     */
    declare public readonly isSecure: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the identifier for the view; must be unique for the schema in which the view is created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * (Default: `false`) Overwrites the View if it exists.
     */
    declare public readonly orReplace: pulumi.Output<boolean | undefined>;
    /**
     * The schema in which to create the view. Don't use the | character.
     */
    declare public readonly schema: pulumi.Output<string>;
    /**
     * Specifies the query used to create the view.
     */
    declare public readonly statement: pulumi.Output<string>;
    /**
     * Definitions of a tag to associate with the resource.
     *
     * @deprecated Use the 'snowflake_tag_association' resource instead.
     */
    declare public readonly tags: pulumi.Output<outputs.MaterializedViewTag[] | undefined>;
    /**
     * The warehouse name.
     */
    declare public readonly warehouse: pulumi.Output<string>;

    /**
     * Create a MaterializedView resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MaterializedViewArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MaterializedViewArgs | MaterializedViewState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MaterializedViewState | undefined;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["database"] = state?.database;
            resourceInputs["fullyQualifiedName"] = state?.fullyQualifiedName;
            resourceInputs["isSecure"] = state?.isSecure;
            resourceInputs["name"] = state?.name;
            resourceInputs["orReplace"] = state?.orReplace;
            resourceInputs["schema"] = state?.schema;
            resourceInputs["statement"] = state?.statement;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["warehouse"] = state?.warehouse;
        } else {
            const args = argsOrState as MaterializedViewArgs | undefined;
            if (args?.database === undefined && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if (args?.schema === undefined && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            if (args?.statement === undefined && !opts.urn) {
                throw new Error("Missing required property 'statement'");
            }
            if (args?.warehouse === undefined && !opts.urn) {
                throw new Error("Missing required property 'warehouse'");
            }
            resourceInputs["comment"] = args?.comment;
            resourceInputs["database"] = args?.database;
            resourceInputs["isSecure"] = args?.isSecure;
            resourceInputs["name"] = args?.name;
            resourceInputs["orReplace"] = args?.orReplace;
            resourceInputs["schema"] = args?.schema;
            resourceInputs["statement"] = args?.statement;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["warehouse"] = args?.warehouse;
            resourceInputs["fullyQualifiedName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MaterializedView.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MaterializedView resources.
 */
export interface MaterializedViewState {
    /**
     * Specifies a comment for the view.
     */
    comment?: pulumi.Input<string>;
    /**
     * The database in which to create the view. Don't use the | character.
     */
    database?: pulumi.Input<string>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    fullyQualifiedName?: pulumi.Input<string>;
    /**
     * (Default: `false`) Specifies that the view is secure.
     */
    isSecure?: pulumi.Input<boolean>;
    /**
     * Specifies the identifier for the view; must be unique for the schema in which the view is created.
     */
    name?: pulumi.Input<string>;
    /**
     * (Default: `false`) Overwrites the View if it exists.
     */
    orReplace?: pulumi.Input<boolean>;
    /**
     * The schema in which to create the view. Don't use the | character.
     */
    schema?: pulumi.Input<string>;
    /**
     * Specifies the query used to create the view.
     */
    statement?: pulumi.Input<string>;
    /**
     * Definitions of a tag to associate with the resource.
     *
     * @deprecated Use the 'snowflake_tag_association' resource instead.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.MaterializedViewTag>[]>;
    /**
     * The warehouse name.
     */
    warehouse?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MaterializedView resource.
 */
export interface MaterializedViewArgs {
    /**
     * Specifies a comment for the view.
     */
    comment?: pulumi.Input<string>;
    /**
     * The database in which to create the view. Don't use the | character.
     */
    database: pulumi.Input<string>;
    /**
     * (Default: `false`) Specifies that the view is secure.
     */
    isSecure?: pulumi.Input<boolean>;
    /**
     * Specifies the identifier for the view; must be unique for the schema in which the view is created.
     */
    name?: pulumi.Input<string>;
    /**
     * (Default: `false`) Overwrites the View if it exists.
     */
    orReplace?: pulumi.Input<boolean>;
    /**
     * The schema in which to create the view. Don't use the | character.
     */
    schema: pulumi.Input<string>;
    /**
     * Specifies the query used to create the view.
     */
    statement: pulumi.Input<string>;
    /**
     * Definitions of a tag to associate with the resource.
     *
     * @deprecated Use the 'snowflake_tag_association' resource instead.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.MaterializedViewTag>[]>;
    /**
     * The warehouse name.
     */
    warehouse: pulumi.Input<string>;
}
