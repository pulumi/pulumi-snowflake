// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AlertAlertSchedule {
    /**
     * Specifies the cron expression for the alert. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
     */
    cron?: outputs.AlertAlertScheduleCron;
    /**
     * Specifies the interval in minutes for the alert schedule. The interval must be greater than 0 and less than 1440 (24 hours).
     */
    interval?: number;
}

export interface AlertAlertScheduleCron {
    expression: string;
    timeZone: string;
}

export interface DatabaseReplicationConfiguration {
    accounts: string[];
    ignoreEditionCheck?: boolean;
}

export interface ExternalFunctionArg {
    /**
     * Argument name
     */
    name: string;
    /**
     * Argument type, e.g. VARCHAR
     */
    type: string;
}

export interface ExternalFunctionHeader {
    /**
     * Header name
     */
    name: string;
    /**
     * Header value
     */
    value: string;
}

export interface ExternalTableColumn {
    /**
     * String that specifies the expression for the column. When queried, the column returns results derived from this expression.
     */
    as: string;
    /**
     * Column name
     */
    name: string;
    /**
     * Column type, e.g. VARIANT
     */
    type: string;
}

export interface ExternalTableTag {
    /**
     * Name of the database that the tag was created in.
     */
    database?: string;
    /**
     * Tag name, e.g. department.
     */
    name: string;
    /**
     * Name of the schema that the tag was created in.
     */
    schema?: string;
    /**
     * Tag value, e.g. marketing_info.
     */
    value: string;
}

export interface FailoverGroupFromReplica {
    /**
     * Identifier for the primary failover group in the source account.
     */
    name: string;
    /**
     * Name of your Snowflake organization.
     */
    organizationName: string;
    /**
     * Source account from which you are enabling replication and failover of the specified objects.
     */
    sourceAccountName: string;
}

export interface FailoverGroupReplicationSchedule {
    /**
     * Specifies the cron expression for the replication schedule. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
     */
    cron?: outputs.FailoverGroupReplicationScheduleCron;
    /**
     * Specifies the interval in minutes for the replication schedule. The interval must be greater than 0 and less than 1440 (24 hours).
     */
    interval?: number;
}

export interface FailoverGroupReplicationScheduleCron {
    expression: string;
    timeZone: string;
}

export interface FunctionArgument {
    /**
     * The argument name
     */
    name: string;
    /**
     * The argument type
     */
    type: string;
}

export interface GetAccountsAccount {
    accountLocator: string;
    accountLocatorUrl: string;
    accountName: string;
    accountUrl: string;
    comment: string;
    consumptionBillingEntityName: string;
    createdOn: string;
    edition: string;
    isOrgAdmin: boolean;
    managedAccounts: number;
    marketplaceConsumerBillingEntityName: string;
    marketplaceProviderBillingEntityName: string;
    oldAccountUrl: string;
    organizationName: string;
    regionGroup: string;
    snowflakeRegion: string;
}

export interface GetAlertsAlert {
    action: string;
    comment: string;
    condition: string;
    databaseName: string;
    name: string;
    owner: string;
    schemaName: string;
}

export interface GetDatabaseRolesDatabaseRole {
    comment: string;
    name: string;
    owner: string;
}

export interface GetDatabasesDatabase {
    comment: string;
    createdOn: string;
    isCurrent: boolean;
    isDefault: boolean;
    name: string;
    options: string;
    origin: string;
    owner: string;
    replicationConfigurations: outputs.GetDatabasesDatabaseReplicationConfiguration[];
    retentionTime: number;
}

export interface GetDatabasesDatabaseReplicationConfiguration {
    accounts: string[];
    ignoreEditionCheck: boolean;
}

export interface GetExternalFunctionsExternalFunction {
    comment: string;
    /**
     * The database from which to return the schemas from.
     */
    database: string;
    language: string;
    name: string;
    /**
     * The schema from which to return the external functions from.
     */
    schema: string;
}

export interface GetExternalTablesExternalTable {
    comment: string;
    /**
     * The database from which to return the schemas from.
     */
    database: string;
    name: string;
    /**
     * The schema from which to return the external tables from.
     */
    schema: string;
}

export interface GetFailoverGroupsFailoverGroup {
    accountLocator: string;
    accountName: string;
    allowedAccounts: any[];
    allowedIntegrationTypes: any[];
    comment: string;
    createdOn: string;
    isPrimary: boolean;
    nextScheduledRefresh: string;
    objectTypes: any[];
    organizationName: string;
    owner: string;
    primary: string;
    regionGroup: string;
    replicationSchedule: string;
    secondaryState: string;
    snowflakeRegion: string;
    type: string;
}

export interface GetFileFormatsFileFormat {
    comment: string;
    /**
     * The database from which to return the schemas from.
     */
    database: string;
    formatType: string;
    name: string;
    /**
     * The schema from which to return the file formats from.
     */
    schema: string;
}

export interface GetFunctionsFunction {
    argumentTypes: string[];
    comment: string;
    /**
     * The database from which to return the schemas from.
     */
    database: string;
    name: string;
    returnType: string;
    /**
     * The schema from which to return the functions from.
     */
    schema: string;
}

export interface GetGrantsFutureGrantsIn {
    /**
     * Lists all privileges on new (i.e. future) objects of a specified type in the database granted to a role.
     */
    database?: string;
    /**
     * Lists all privileges on new (i.e. future) objects of a specified type in the schema granted to a role.
     */
    schema?: outputs.GetGrantsFutureGrantsInSchema;
}

export interface GetGrantsFutureGrantsInSchema {
    databaseName?: string;
    schemaName: string;
}

export interface GetGrantsFutureGrantsTo {
    /**
     * Lists all privileges on new (i.e. future) objects of a specified type in a database or schema granted to the role.
     */
    role: string;
}

export interface GetGrantsGrant {
    createdOn: string;
    grantOption: boolean;
    grantedBy: string;
    grantedOn: string;
    grantedTo: string;
    granteeName: string;
    name: string;
    privilege: string;
}

export interface GetGrantsGrantsOf {
    /**
     * Lists all users and roles to which the role has been granted
     */
    role?: string;
    /**
     * Lists all the accounts for the share and indicates the accounts that are using the share.
     */
    share?: string;
}

export interface GetGrantsGrantsOn {
    /**
     * Object hierarchy to list privileges on. The only valid value is: ACCOUNT. Setting this attribute lists all the account-level (i.e. global) privileges that have been granted to roles.
     */
    account?: boolean;
    /**
     * Name of object to list privileges on
     */
    objectName?: string;
    /**
     * Type of object to list privileges on.
     */
    objectType?: string;
}

export interface GetGrantsGrantsTo {
    /**
     * Lists all privileges and roles granted to the role
     */
    role?: string;
    /**
     * Lists all the privileges granted to the share
     */
    share?: string;
    /**
     * Lists all the roles granted to the user. Note that the PUBLIC role, which is automatically available to every user, is not listed
     */
    user?: string;
}

export interface GetMaskingPoliciesMaskingPolicy {
    comment: string;
    /**
     * The database from which to return the schemas from.
     */
    database: string;
    kind: string;
    name: string;
    /**
     * The schema from which to return the maskingPolicies from.
     */
    schema: string;
}

export interface GetMaterializedViewsMaterializedView {
    comment: string;
    /**
     * The database from which to return the schemas from.
     */
    database: string;
    name: string;
    /**
     * The schema from which to return the views from.
     */
    schema: string;
}

export interface GetParametersParameter {
    default: string;
    description: string;
    key: string;
    level: string;
    type: string;
    value: string;
}

export interface GetPipesPipe {
    comment: string;
    /**
     * The database from which to return the schemas from.
     */
    database: string;
    integration: string;
    name: string;
    /**
     * The schema from which to return the pipes from.
     */
    schema: string;
}

export interface GetProceduresProcedure {
    argumentTypes: string[];
    comment: string;
    /**
     * The database from which to return the schemas from.
     */
    database: string;
    name: string;
    returnType: string;
    /**
     * The schema from which to return the procedures from.
     */
    schema: string;
}

export interface GetResourceMonitorsResourceMonitor {
    comment: string;
    creditQuota: string;
    frequency: string;
    name: string;
}

export interface GetRolesRole {
    comment: string;
    name: string;
    owner: string;
}

export interface GetRowAccessPoliciesRowAccessPolicy {
    comment: string;
    /**
     * The database from which to return the schemas from.
     */
    database: string;
    name: string;
    /**
     * The schema from which to return the row access policyfrom.
     */
    schema: string;
}

export interface GetSchemasSchema {
    comment: string;
    /**
     * The database from which to return the schemas from.
     */
    database: string;
    name: string;
}

export interface GetSequencesSequence {
    comment: string;
    /**
     * The database from which to return the schemas from.
     */
    database: string;
    name: string;
    /**
     * The schema from which to return the sequences from.
     */
    schema: string;
}

export interface GetSharesShare {
    comment: string;
    kind: string;
    name: string;
    owner: string;
    tos: any[];
}

export interface GetStagesStage {
    comment: string;
    /**
     * The database from which to return the schemas from.
     */
    database: string;
    name: string;
    /**
     * The schema from which to return the stages from.
     */
    schema: string;
    storageIntegration: string;
}

export interface GetStorageIntegrationsStorageIntegration {
    comment: string;
    enabled: boolean;
    name: string;
    type: string;
}

export interface GetStreamsStream {
    comment: string;
    /**
     * The database from which to return the streams from.
     */
    database: string;
    name: string;
    /**
     * The schema from which to return the streams from.
     */
    schema: string;
    table: string;
}

export interface GetTablesTable {
    comment: string;
    /**
     * The database from which to return the schemas from.
     */
    database: string;
    name: string;
    /**
     * The schema from which to return the tables from.
     */
    schema: string;
}

export interface GetTasksTask {
    comment: string;
    /**
     * The database from which to return the schemas from.
     */
    database: string;
    name: string;
    /**
     * The schema from which to return the tasks from.
     */
    schema: string;
    warehouse: string;
}

export interface GetUsersUser {
    comment: string;
    defaultNamespace: string;
    defaultRole: string;
    defaultSecondaryRoles: string[];
    defaultWarehouse: string;
    disabled: boolean;
    displayName: string;
    email: string;
    firstName: string;
    hasRsaPublicKey: boolean;
    lastName: string;
    loginName: string;
    name: string;
}

export interface GetViewsView {
    comment: string;
    /**
     * The database from which to return the schemas from.
     */
    database: string;
    name: string;
    /**
     * The schema from which to return the views from.
     */
    schema: string;
}

export interface GetWarehousesWarehouse {
    comment: string;
    name: string;
    scalingPolicy: string;
    size: string;
    state: string;
    type: string;
}

export interface GrantPrivilegesToRoleOnAccountObject {
    /**
     * The fully qualified name of the object on which privileges will be granted.
     */
    objectName: string;
    /**
     * The object type of the account object on which privileges will be granted. Valid values are: USER | RESOURCE MONITOR | WAREHOUSE | DATABASE | INTEGRATION | FAILOVER GROUP | REPLICATION GROUP
     */
    objectType: string;
}

export interface GrantPrivilegesToRoleOnSchema {
    /**
     * The fully qualified name of the database.
     */
    allSchemasInDatabase?: string;
    /**
     * The fully qualified name of the database.
     */
    futureSchemasInDatabase?: string;
    /**
     * The fully qualified name of the schema.
     */
    schemaName?: string;
}

export interface GrantPrivilegesToRoleOnSchemaObject {
    /**
     * Configures the privilege to be granted on all objects in eihter a database or schema.
     */
    all?: outputs.GrantPrivilegesToRoleOnSchemaObjectAll;
    /**
     * Configures the privilege to be granted on future objects in eihter a database or schema.
     */
    future?: outputs.GrantPrivilegesToRoleOnSchemaObjectFuture;
    /**
     * The fully qualified name of the object on which privileges will be granted.
     */
    objectName?: string;
    /**
     * The object type of the schema object on which privileges will be granted. Valid values are: ALERT | EVENT TABLE | FILE FORMAT | FUNCTION | PROCEDURE | SECRET | SEQUENCE | PIPE | MASKING POLICY | PASSWORD POLICY | ROW ACCESS POLICY | SESSION POLICY | TAG | STAGE | STREAM | TABLE | EXTERNAL TABLE | TASK | VIEW | MATERIALIZED VIEW
     */
    objectType?: string;
}

export interface GrantPrivilegesToRoleOnSchemaObjectAll {
    inDatabase?: string;
    inSchema?: string;
    objectTypePlural: string;
}

export interface GrantPrivilegesToRoleOnSchemaObjectFuture {
    inDatabase?: string;
    inSchema?: string;
    objectTypePlural: string;
}

export interface MaskingPolicySignature {
    columns: outputs.MaskingPolicySignatureColumn[];
}

export interface MaskingPolicySignatureColumn {
    /**
     * Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created.
     */
    name: string;
    type: string;
}

export interface MaterializedViewTag {
    /**
     * Name of the database that the tag was created in.
     */
    database?: string;
    /**
     * Tag name, e.g. department.
     */
    name: string;
    /**
     * Name of the schema that the tag was created in.
     */
    schema?: string;
    /**
     * Tag value, e.g. marketing_info.
     */
    value: string;
}

export interface ObjectParameterObjectIdentifier {
    /**
     * Name of the database that the object was created in.
     */
    database?: string;
    /**
     * Name of the object to set the parameter for.
     */
    name: string;
    /**
     * Name of the schema that the object was created in.
     */
    schema?: string;
}

export interface ProcedureArgument {
    /**
     * The argument name
     */
    name: string;
    /**
     * The argument type
     */
    type: string;
}

export interface RoleTag {
    /**
     * Name of the database that the tag was created in.
     */
    database?: string;
    /**
     * Tag name, e.g. department.
     */
    name: string;
    /**
     * Name of the schema that the tag was created in.
     */
    schema?: string;
    /**
     * Tag value, e.g. marketing_info.
     */
    value: string;
}

export interface SchemaTag {
    /**
     * Name of the database that the tag was created in.
     */
    database?: string;
    /**
     * Tag name, e.g. department.
     */
    name: string;
    /**
     * Name of the schema that the tag was created in.
     */
    schema?: string;
    /**
     * Tag value, e.g. marketing_info.
     */
    value: string;
}

export interface StageTag {
    /**
     * Name of the database that the tag was created in.
     */
    database?: string;
    /**
     * Tag name, e.g. department.
     */
    name: string;
    /**
     * Name of the schema that the tag was created in.
     */
    schema?: string;
    /**
     * Tag value, e.g. marketing_info.
     */
    value: string;
}

export interface TableColumn {
    /**
     * Column comment
     */
    comment?: string;
    /**
     * Defines the column default value; note due to limitations of Snowflake's ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied
     */
    default?: outputs.TableColumnDefault;
    /**
     * Defines the identity start/step values for a column. **Note** Identity/default are mutually exclusive.
     */
    identity?: outputs.TableColumnIdentity;
    /**
     * Masking policy to apply on column
     */
    maskingPolicy?: string;
    /**
     * Column name
     */
    name: string;
    /**
     * Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
     */
    nullable?: boolean;
    /**
     * Column type, e.g. VARIANT
     */
    type: string;
}

export interface TableColumnDefault {
    constant?: string;
    expression?: string;
    sequence?: string;
}

export interface TableColumnIdentity {
    startNum?: number;
    stepNum?: number;
}

export interface TableConstraintForeignKeyProperties {
    /**
     * The match type for the foreign key. Not applicable for primary/unique keys
     */
    match?: string;
    /**
     * Specifies the action performed when the primary/unique key for the foreign key is deleted. Not applicable for primary/unique keys
     */
    onDelete?: string;
    /**
     * Specifies the action performed when the primary/unique key for the foreign key is updated. Not applicable for primary/unique keys
     */
    onUpdate?: string;
    /**
     * The table and columns that the foreign key references. Not applicable for primary/unique keys
     */
    references?: outputs.TableConstraintForeignKeyPropertiesReferences;
}

export interface TableConstraintForeignKeyPropertiesReferences {
    /**
     * Columns to use in constraint key
     */
    columns: string[];
    /**
     * Idenfifier for table to create constraint on. Must be of the form Note: format must follow: "\n\n"."\n\n"."\n\n" or "\n\n.\n\n.\n\n" or "\n\n|\n\n.\n\n" (snowflake*table.my*table.id)
     */
    tableId: string;
}

export interface TablePrimaryKey {
    /**
     * Columns to use in primary key
     */
    keys: string[];
    /**
     * Name of constraint
     */
    name?: string;
}

export interface TableTag {
    /**
     * Name of the database that the tag was created in.
     */
    database?: string;
    /**
     * Tag name, e.g. department.
     */
    name: string;
    /**
     * Name of the schema that the tag was created in.
     */
    schema?: string;
    /**
     * Tag value, e.g. marketing_info.
     */
    value: string;
}

export interface TagAssociationObjectIdentifier {
    /**
     * Name of the database that the object was created in.
     */
    database?: string;
    /**
     * Name of the object to associate the tag with.
     */
    name: string;
    /**
     * Name of the schema that the object was created in.
     */
    schema?: string;
}

export interface ViewTag {
    /**
     * Name of the database that the tag was created in.
     */
    database?: string;
    /**
     * Tag name, e.g. department.
     */
    name: string;
    /**
     * Name of the schema that the tag was created in.
     */
    schema?: string;
    /**
     * Tag value, e.g. marketing_info.
     */
    value: string;
}

