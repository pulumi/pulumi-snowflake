// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AccountRoleShowOutput {
    assignedToUsers: number;
    comment: string;
    createdOn: string;
    grantedRoles: number;
    grantedToRoles: number;
    isCurrent: boolean;
    isDefault: boolean;
    isInherited: boolean;
    name: string;
    owner: string;
}

export interface AccountShowOutput {
    accountLocator: string;
    accountLocatorUrl: string;
    accountName: string;
    accountOldUrlLastUsed: string;
    accountOldUrlSavedOn: string;
    accountUrl: string;
    comment: string;
    consumptionBillingEntityName: string;
    createdOn: string;
    droppedOn: string;
    edition: string;
    isEventsAccount: boolean;
    isOrgAdmin: boolean;
    isOrganizationAccount: boolean;
    managedAccounts: number;
    marketplaceConsumerBillingEntityName: string;
    marketplaceProviderBillingEntityName: string;
    movedOn: string;
    movedToOrganization: string;
    oldAccountUrl: string;
    organizationName: string;
    organizationOldUrl: string;
    organizationOldUrlLastUsed: string;
    organizationOldUrlSavedOn: string;
    organizationUrlExpirationOn: string;
    regionGroup: string;
    restoredOn: string;
    scheduledDeletionTime: string;
    snowflakeRegion: string;
}

export interface AlertAlertSchedule {
    /**
     * Specifies the cron expression for the alert. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
     */
    cron?: outputs.AlertAlertScheduleCron;
    /**
     * Specifies the interval in minutes for the alert schedule. The interval must be greater than 0 and less than 1440 (24 hours).
     */
    interval?: number;
}

export interface AlertAlertScheduleCron {
    /**
     * Specifies the cron expression for the alert. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
     */
    expression: string;
    /**
     * Specifies the time zone for alert refresh.
     */
    timeZone: string;
}

export interface ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutput {
    authTypes: outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthType[];
    comments: outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputComment[];
    enableds: outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabled[];
    oauthAccessTokenValidities: outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidity[];
    oauthAllowedScopes: outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScope[];
    oauthAuthorizationEndpoints: outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpoint[];
    oauthClientAuthMethods: outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethod[];
    oauthGrants: outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrant[];
    oauthRefreshTokenValidities: outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidity[];
    oauthTokenEndpoints: outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpoint[];
    parentIntegrations: outputs.ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegration[];
}

export interface ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthType {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputComment {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabled {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidity {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScope {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpoint {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethod {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrant {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidity {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpoint {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegration {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutput {
    category: string;
    comment: string;
    createdOn: string;
    enabled: boolean;
    integrationType: string;
    name: string;
}

export interface ApiAuthenticationIntegrationWithClientCredentialsDescribeOutput {
    authTypes: outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthType[];
    comments: outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputComment[];
    enableds: outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabled[];
    oauthAccessTokenValidities: outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidity[];
    oauthAllowedScopes: outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScope[];
    oauthAuthorizationEndpoints: outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpoint[];
    oauthClientAuthMethods: outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethod[];
    oauthGrants: outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrant[];
    oauthRefreshTokenValidities: outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidity[];
    oauthTokenEndpoints: outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpoint[];
    parentIntegrations: outputs.ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegration[];
}

export interface ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthType {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputComment {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabled {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidity {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScope {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpoint {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethod {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrant {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidity {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpoint {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegration {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithClientCredentialsShowOutput {
    category: string;
    comment: string;
    createdOn: string;
    enabled: boolean;
    integrationType: string;
    name: string;
}

export interface ApiAuthenticationIntegrationWithJwtBearerDescribeOutput {
    authTypes: outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthType[];
    comments: outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputComment[];
    enableds: outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabled[];
    oauthAccessTokenValidities: outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidity[];
    oauthAllowedScopes: outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScope[];
    oauthAuthorizationEndpoints: outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpoint[];
    oauthClientAuthMethods: outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethod[];
    oauthGrants: outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrant[];
    oauthRefreshTokenValidities: outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidity[];
    oauthTokenEndpoints: outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpoint[];
    parentIntegrations: outputs.ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegration[];
}

export interface ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthType {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithJwtBearerDescribeOutputComment {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabled {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidity {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScope {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpoint {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethod {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrant {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidity {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpoint {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegration {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ApiAuthenticationIntegrationWithJwtBearerShowOutput {
    category: string;
    comment: string;
    createdOn: string;
    enabled: boolean;
    integrationType: string;
    name: string;
}

export interface AuthenticationPolicyDescribeOutput {
    authenticationMethods: string;
    clientTypes: string;
    comment: string;
    mfaAuthenticationMethods: string;
    mfaEnrollment: string;
    name: string;
    owner: string;
    securityIntegrations: string;
}

export interface AuthenticationPolicyShowOutput {
    comment: string;
    createdOn: string;
    databaseName: string;
    name: string;
    options: string;
    owner: string;
    ownerRoleType: string;
    schemaName: string;
}

export interface DatabaseReplication {
    /**
     * Entry to enable replication and optionally failover for a given account identifier.
     */
    enableToAccounts: outputs.DatabaseReplicationEnableToAccount[];
    /**
     * Allows replicating data to accounts on lower editions in either of the following scenarios: 1. The primary database is in a Business Critical (or higher) account but one or more of the accounts approved for replication are on lower editions. Business Critical Edition is intended for Snowflake accounts with extremely sensitive data. 2. The primary database is in a Business Critical (or higher) account and a signed business associate agreement is in place to store PHI data in the account per HIPAA and HITRUST regulations, but no such agreement is in place for one or more of the accounts approved for replication, regardless if they are Business Critical (or higher) accounts. Both scenarios are prohibited by default in an effort to help prevent account administrators for Business Critical (or higher) accounts from inadvertently replicating sensitive data to accounts on lower editions.
     */
    ignoreEditionCheck?: boolean;
}

export interface DatabaseReplicationEnableToAccount {
    /**
     * Specifies account identifier for which replication should be enabled. The account identifiers should be in the form of `"<organization_name>"."<account_name>"`. For more information about this resource, see docs.
     */
    accountIdentifier: string;
    /**
     * Specifies if failover should be enabled for the specified account identifier
     */
    withFailover?: boolean;
}

export interface DatabaseRoleShowOutput {
    comment: string;
    createdOn: string;
    databaseName: string;
    grantedDatabaseRoles: number;
    grantedToDatabaseRoles: number;
    grantedToRoles: number;
    isCurrent: boolean;
    isDefault: boolean;
    isInherited: boolean;
    name: string;
    owner: string;
    ownerRoleType: string;
}

export interface DynamicTableTargetLag {
    /**
     * Specifies whether the target lag time is downstream.
     */
    downstream?: boolean;
    /**
     * Specifies the maximum target lag time for the dynamic table.
     */
    maximumDuration?: string;
}

export interface ExternalFunctionArg {
    /**
     * Argument name
     */
    name: string;
    /**
     * Argument type, e.g. VARCHAR
     */
    type: string;
}

export interface ExternalFunctionHeader {
    /**
     * Header name
     */
    name: string;
    /**
     * Header value
     */
    value: string;
}

export interface ExternalOauthIntegrationDescribeOutput {
    comments: outputs.ExternalOauthIntegrationDescribeOutputComment[];
    enableds: outputs.ExternalOauthIntegrationDescribeOutputEnabled[];
    externalOauthAllowedRolesLists: outputs.ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesList[];
    externalOauthAnyRoleModes: outputs.ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleMode[];
    externalOauthAudienceLists: outputs.ExternalOauthIntegrationDescribeOutputExternalOauthAudienceList[];
    externalOauthBlockedRolesLists: outputs.ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesList[];
    externalOauthIssuers: outputs.ExternalOauthIntegrationDescribeOutputExternalOauthIssuer[];
    externalOauthJwsKeysUrls: outputs.ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrl[];
    externalOauthRsaPublicKey2s: outputs.ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2[];
    externalOauthRsaPublicKeys: outputs.ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey[];
    externalOauthScopeDelimiters: outputs.ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiter[];
    externalOauthSnowflakeUserMappingAttributes: outputs.ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute[];
    externalOauthTokenUserMappingClaims: outputs.ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaim[];
}

export interface ExternalOauthIntegrationDescribeOutputComment {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ExternalOauthIntegrationDescribeOutputEnabled {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesList {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleMode {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ExternalOauthIntegrationDescribeOutputExternalOauthAudienceList {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesList {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ExternalOauthIntegrationDescribeOutputExternalOauthIssuer {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrl {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2 {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiter {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaim {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ExternalOauthIntegrationRelatedParameter {
    externalOauthAddPrivilegedRolesToBlockedLists: outputs.ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedList[];
}

export interface ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedList {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ExternalOauthIntegrationShowOutput {
    category: string;
    comment: string;
    createdOn: string;
    enabled: boolean;
    integrationType: string;
    name: string;
}

export interface ExternalTableColumn {
    /**
     * String that specifies the expression for the column. When queried, the column returns results derived from this expression.
     */
    as: string;
    /**
     * Column name
     */
    name: string;
    /**
     * Column type, e.g. VARIANT
     */
    type: string;
}

export interface ExternalTableTag {
    /**
     * Name of the database that the tag was created in.
     */
    database?: string;
    /**
     * Tag name, e.g. department.
     */
    name: string;
    /**
     * Name of the schema that the tag was created in.
     */
    schema?: string;
    /**
     * Tag value, e.g. marketing_info.
     */
    value: string;
}

export interface ExternalVolumeDescribeOutput {
    default: string;
    name: string;
    parent: string;
    type: string;
    value: string;
}

export interface ExternalVolumeShowOutput {
    allowWrites: boolean;
    comment: string;
    name: string;
}

export interface ExternalVolumeStorageLocation {
    /**
     * Specifies the ID for your Office 365 tenant that the allowed and blocked storage accounts belong to.
     */
    azureTenantId?: string;
    /**
     * Specifies the ID for the KMS-managed key used to encrypt files.
     */
    encryptionKmsKeyId?: string;
    /**
     * Specifies the encryption type used.
     */
    encryptionType?: string;
    /**
     * External ID that Snowflake uses to establish a trust relationship with AWS.
     */
    storageAwsExternalId: string;
    /**
     * Specifies the case-sensitive Amazon Resource Name (ARN) of the AWS identity and access management (IAM) role that grants privileges on the S3 bucket containing your data files.
     */
    storageAwsRoleArn?: string;
    /**
     * Specifies the base URL for your cloud storage location.
     */
    storageBaseUrl: string;
    storageLocationName: string;
    /**
     * Specifies the cloud storage provider that stores your data files. Valid values are (case-insensitive): `GCS` | `AZURE` | `S3` | `S3GOV`.
     */
    storageProvider: string;
}

export interface FailoverGroupFromReplica {
    /**
     * Identifier for the primary failover group in the source account.
     */
    name: string;
    /**
     * Name of your Snowflake organization.
     */
    organizationName: string;
    /**
     * Source account from which you are enabling replication and failover of the specified objects.
     */
    sourceAccountName: string;
}

export interface FailoverGroupReplicationSchedule {
    /**
     * Specifies the cron expression for the replication schedule. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
     */
    cron?: outputs.FailoverGroupReplicationScheduleCron;
    /**
     * Specifies the interval in minutes for the replication schedule. The interval must be greater than 0 and less than 1440 (24 hours).
     */
    interval?: number;
}

export interface FailoverGroupReplicationScheduleCron {
    /**
     * Specifies the cron expression for the replication schedule. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
     */
    expression: string;
    /**
     * Specifies the time zone for secondary group refresh.
     */
    timeZone: string;
}

export interface FunctionJavaArgument {
    /**
     * The argument type.
     */
    argDataType: string;
    argDefaultValue?: string;
    /**
     * The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the function definition.
     */
    argName: string;
}

export interface FunctionJavaImport {
    /**
     * Path for import on stage, without the leading `/`.
     */
    pathOnStage: string;
    stageLocation: string;
}

export interface FunctionJavaParameter {
    enableConsoleOutputs: outputs.FunctionJavaParameterEnableConsoleOutput[];
    logLevels: outputs.FunctionJavaParameterLogLevel[];
    metricLevels: outputs.FunctionJavaParameterMetricLevel[];
    traceLevels: outputs.FunctionJavaParameterTraceLevel[];
}

export interface FunctionJavaParameterEnableConsoleOutput {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface FunctionJavaParameterLogLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface FunctionJavaParameterMetricLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface FunctionJavaParameterTraceLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface FunctionJavaSecret {
    /**
     * Fully qualified name of the allowed [secret](https://docs.snowflake.com/en/sql-reference/sql/create-secret). You will receive an error if you specify a SECRETS value whose secret isn’t also included in an integration specified by the EXTERNAL*ACCESS*INTEGRATIONS parameter.
     */
    secretId: string;
    /**
     * The variable that will be used in handler code when retrieving information from the secret.
     */
    secretVariableName: string;
}

export interface FunctionJavaShowOutput {
    argumentsRaw: string;
    catalogName: string;
    createdOn: string;
    description: string;
    externalAccessIntegrations: string;
    isAggregate: boolean;
    isAnsi: boolean;
    isBuiltin: boolean;
    isDataMetric: boolean;
    isExternalFunction: boolean;
    isMemoizable: boolean;
    isSecure: boolean;
    isTableFunction: boolean;
    language: string;
    maxNumArguments: number;
    minNumArguments: number;
    name: string;
    schemaName: string;
    secrets: string;
    validForClustering: boolean;
}

export interface FunctionJavaTargetPath {
    /**
     * Path for import on stage, without the leading `/`.
     */
    pathOnStage: string;
    stageLocation: string;
}

export interface FunctionJavascriptArgument {
    /**
     * The argument type.
     */
    argDataType: string;
    argDefaultValue?: string;
    /**
     * The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the function definition.
     */
    argName: string;
}

export interface FunctionJavascriptParameter {
    enableConsoleOutputs: outputs.FunctionJavascriptParameterEnableConsoleOutput[];
    logLevels: outputs.FunctionJavascriptParameterLogLevel[];
    metricLevels: outputs.FunctionJavascriptParameterMetricLevel[];
    traceLevels: outputs.FunctionJavascriptParameterTraceLevel[];
}

export interface FunctionJavascriptParameterEnableConsoleOutput {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface FunctionJavascriptParameterLogLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface FunctionJavascriptParameterMetricLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface FunctionJavascriptParameterTraceLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface FunctionJavascriptShowOutput {
    argumentsRaw: string;
    catalogName: string;
    createdOn: string;
    description: string;
    externalAccessIntegrations: string;
    isAggregate: boolean;
    isAnsi: boolean;
    isBuiltin: boolean;
    isDataMetric: boolean;
    isExternalFunction: boolean;
    isMemoizable: boolean;
    isSecure: boolean;
    isTableFunction: boolean;
    language: string;
    maxNumArguments: number;
    minNumArguments: number;
    name: string;
    schemaName: string;
    secrets: string;
    validForClustering: boolean;
}

export interface FunctionPythonArgument {
    /**
     * The argument type.
     */
    argDataType: string;
    argDefaultValue?: string;
    /**
     * The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the function definition.
     */
    argName: string;
}

export interface FunctionPythonImport {
    /**
     * Path for import on stage, without the leading `/`.
     */
    pathOnStage: string;
    stageLocation: string;
}

export interface FunctionPythonParameter {
    enableConsoleOutputs: outputs.FunctionPythonParameterEnableConsoleOutput[];
    logLevels: outputs.FunctionPythonParameterLogLevel[];
    metricLevels: outputs.FunctionPythonParameterMetricLevel[];
    traceLevels: outputs.FunctionPythonParameterTraceLevel[];
}

export interface FunctionPythonParameterEnableConsoleOutput {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface FunctionPythonParameterLogLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface FunctionPythonParameterMetricLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface FunctionPythonParameterTraceLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface FunctionPythonSecret {
    /**
     * Fully qualified name of the allowed [secret](https://docs.snowflake.com/en/sql-reference/sql/create-secret). You will receive an error if you specify a SECRETS value whose secret isn’t also included in an integration specified by the EXTERNAL*ACCESS*INTEGRATIONS parameter.
     */
    secretId: string;
    /**
     * The variable that will be used in handler code when retrieving information from the secret.
     */
    secretVariableName: string;
}

export interface FunctionPythonShowOutput {
    argumentsRaw: string;
    catalogName: string;
    createdOn: string;
    description: string;
    externalAccessIntegrations: string;
    isAggregate: boolean;
    isAnsi: boolean;
    isBuiltin: boolean;
    isDataMetric: boolean;
    isExternalFunction: boolean;
    isMemoizable: boolean;
    isSecure: boolean;
    isTableFunction: boolean;
    language: string;
    maxNumArguments: number;
    minNumArguments: number;
    name: string;
    schemaName: string;
    secrets: string;
    validForClustering: boolean;
}

export interface FunctionScalaArgument {
    /**
     * The argument type.
     */
    argDataType: string;
    argDefaultValue?: string;
    /**
     * The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the function definition.
     */
    argName: string;
}

export interface FunctionScalaImport {
    /**
     * Path for import on stage, without the leading `/`.
     */
    pathOnStage: string;
    stageLocation: string;
}

export interface FunctionScalaParameter {
    enableConsoleOutputs: outputs.FunctionScalaParameterEnableConsoleOutput[];
    logLevels: outputs.FunctionScalaParameterLogLevel[];
    metricLevels: outputs.FunctionScalaParameterMetricLevel[];
    traceLevels: outputs.FunctionScalaParameterTraceLevel[];
}

export interface FunctionScalaParameterEnableConsoleOutput {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface FunctionScalaParameterLogLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface FunctionScalaParameterMetricLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface FunctionScalaParameterTraceLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface FunctionScalaSecret {
    /**
     * Fully qualified name of the allowed [secret](https://docs.snowflake.com/en/sql-reference/sql/create-secret). You will receive an error if you specify a SECRETS value whose secret isn’t also included in an integration specified by the EXTERNAL*ACCESS*INTEGRATIONS parameter.
     */
    secretId: string;
    /**
     * The variable that will be used in handler code when retrieving information from the secret.
     */
    secretVariableName: string;
}

export interface FunctionScalaShowOutput {
    argumentsRaw: string;
    catalogName: string;
    createdOn: string;
    description: string;
    externalAccessIntegrations: string;
    isAggregate: boolean;
    isAnsi: boolean;
    isBuiltin: boolean;
    isDataMetric: boolean;
    isExternalFunction: boolean;
    isMemoizable: boolean;
    isSecure: boolean;
    isTableFunction: boolean;
    language: string;
    maxNumArguments: number;
    minNumArguments: number;
    name: string;
    schemaName: string;
    secrets: string;
    validForClustering: boolean;
}

export interface FunctionScalaTargetPath {
    /**
     * Path for import on stage, without the leading `/`.
     */
    pathOnStage: string;
    stageLocation: string;
}

export interface FunctionSqlArgument {
    /**
     * The argument type.
     */
    argDataType: string;
    argDefaultValue?: string;
    /**
     * The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the function definition.
     */
    argName: string;
}

export interface FunctionSqlParameter {
    enableConsoleOutputs: outputs.FunctionSqlParameterEnableConsoleOutput[];
    logLevels: outputs.FunctionSqlParameterLogLevel[];
    metricLevels: outputs.FunctionSqlParameterMetricLevel[];
    traceLevels: outputs.FunctionSqlParameterTraceLevel[];
}

export interface FunctionSqlParameterEnableConsoleOutput {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface FunctionSqlParameterLogLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface FunctionSqlParameterMetricLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface FunctionSqlParameterTraceLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface FunctionSqlShowOutput {
    argumentsRaw: string;
    catalogName: string;
    createdOn: string;
    description: string;
    externalAccessIntegrations: string;
    isAggregate: boolean;
    isAnsi: boolean;
    isBuiltin: boolean;
    isDataMetric: boolean;
    isExternalFunction: boolean;
    isMemoizable: boolean;
    isSecure: boolean;
    isTableFunction: boolean;
    language: string;
    maxNumArguments: number;
    minNumArguments: number;
    name: string;
    schemaName: string;
    secrets: string;
    validForClustering: boolean;
}

export interface GetAccountRolesAccountRole {
    /**
     * Holds the output of SHOW ROLES.
     */
    showOutputs: outputs.GetAccountRolesAccountRoleShowOutput[];
}

export interface GetAccountRolesAccountRoleShowOutput {
    assignedToUsers: number;
    comment: string;
    createdOn: string;
    grantedRoles: number;
    grantedToRoles: number;
    isCurrent: boolean;
    isDefault: boolean;
    isInherited: boolean;
    name: string;
    owner: string;
}

export interface GetAccountsAccount {
    /**
     * Holds the output of SHOW ACCOUNTS.
     */
    showOutputs: outputs.GetAccountsAccountShowOutput[];
}

export interface GetAccountsAccountShowOutput {
    accountLocator: string;
    accountLocatorUrl: string;
    accountName: string;
    accountOldUrlLastUsed: string;
    accountOldUrlSavedOn: string;
    accountUrl: string;
    comment: string;
    consumptionBillingEntityName: string;
    createdOn: string;
    droppedOn: string;
    edition: string;
    isEventsAccount: boolean;
    isOrgAdmin: boolean;
    isOrganizationAccount: boolean;
    managedAccounts: number;
    marketplaceConsumerBillingEntityName: string;
    marketplaceProviderBillingEntityName: string;
    movedOn: string;
    movedToOrganization: string;
    oldAccountUrl: string;
    organizationName: string;
    organizationOldUrl: string;
    organizationOldUrlLastUsed: string;
    organizationOldUrlSavedOn: string;
    organizationUrlExpirationOn: string;
    regionGroup: string;
    restoredOn: string;
    scheduledDeletionTime: string;
    snowflakeRegion: string;
}

export interface GetAlertsAlert {
    /**
     * The text of the SQL statement that should be executed when the alert is triggered.
     */
    action: string;
    /**
     * Comment for the alert.
     */
    comment: string;
    /**
     * The text of the SQL statement that serves as the condition when the alert should be triggered.
     */
    condition: string;
    /**
     * Database in which the alert is stored.
     */
    databaseName: string;
    /**
     * Name of the alert.
     */
    name: string;
    /**
     * Role that owns the alert (i.e. has the OWNERSHIP privilege on the alert)
     */
    owner: string;
    /**
     * Schema in which the alert is stored.
     */
    schemaName: string;
}

export interface GetConnectionsConnection {
    /**
     * Holds the output of SHOW CONNECTIONS.
     */
    showOutputs: outputs.GetConnectionsConnectionShowOutput[];
}

export interface GetConnectionsConnectionShowOutput {
    accountLocator: string;
    accountName: string;
    comment: string;
    connectionUrl: string;
    createdOn: string;
    failoverAllowedToAccounts: string[];
    isPrimary: boolean;
    name: string;
    organizationName: string;
    primary: string;
    regionGroup: string;
    snowflakeRegion: string;
}

export interface GetCortexSearchServicesCortexSearchService {
    /**
     * Comment for the cortex search service.
     */
    comment: string;
    /**
     * Date and time when the cortex search service was created.
     */
    createdOn: string;
    /**
     * Database in which the cortex search service is stored.
     */
    databaseName: string;
    /**
     * Name of the cortex search service.
     */
    name: string;
    /**
     * Schema in which the cortex search service is stored.
     */
    schemaName: string;
}

export interface GetCortexSearchServicesIn {
    /**
     * Returns records for the entire account.
     */
    account?: boolean;
    /**
     * Returns records for the current database in use or for a specified database (db_name).
     */
    database?: string;
    /**
     * Returns records for the current schema in use or a specified schema (schema_name).
     */
    schema?: string;
}

export interface GetCortexSearchServicesLimit {
    /**
     * Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
     */
    from?: string;
    /**
     * The maximum number of rows to return.
     */
    rows: number;
}

export interface GetDatabaseRolesDatabaseRole {
    /**
     * Holds the output of SHOW DATABASE ROLES.
     */
    showOutputs: outputs.GetDatabaseRolesDatabaseRoleShowOutput[];
}

export interface GetDatabaseRolesDatabaseRoleShowOutput {
    comment: string;
    createdOn: string;
    databaseName: string;
    grantedDatabaseRoles: number;
    grantedToDatabaseRoles: number;
    grantedToRoles: number;
    isCurrent: boolean;
    isDefault: boolean;
    isInherited: boolean;
    name: string;
    owner: string;
    ownerRoleType: string;
}

export interface GetDatabaseRolesLimit {
    /**
     * Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
     */
    from?: string;
    /**
     * The maximum number of rows to return.
     */
    rows: number;
}

export interface GetDatabasesDatabase {
    /**
     * Holds the output of DESCRIBE DATABASE.
     */
    describeOutputs: outputs.GetDatabasesDatabaseDescribeOutput[];
    /**
     * Holds the output of SHOW PARAMETERS FOR DATABASE.
     */
    parameters: outputs.GetDatabasesDatabaseParameter[];
    /**
     * Holds the output of SHOW DATABASES.
     */
    showOutputs: outputs.GetDatabasesDatabaseShowOutput[];
}

export interface GetDatabasesDatabaseDescribeOutput {
    createdOn: string;
    kind: string;
    name: string;
}

export interface GetDatabasesDatabaseParameter {
    catalogs: outputs.GetDatabasesDatabaseParameterCatalog[];
    dataRetentionTimeInDays: outputs.GetDatabasesDatabaseParameterDataRetentionTimeInDay[];
    defaultDdlCollations: outputs.GetDatabasesDatabaseParameterDefaultDdlCollation[];
    enableConsoleOutputs: outputs.GetDatabasesDatabaseParameterEnableConsoleOutput[];
    externalVolumes: outputs.GetDatabasesDatabaseParameterExternalVolume[];
    logLevels: outputs.GetDatabasesDatabaseParameterLogLevel[];
    maxDataExtensionTimeInDays: outputs.GetDatabasesDatabaseParameterMaxDataExtensionTimeInDay[];
    quotedIdentifiersIgnoreCases: outputs.GetDatabasesDatabaseParameterQuotedIdentifiersIgnoreCase[];
    replaceInvalidCharacters: outputs.GetDatabasesDatabaseParameterReplaceInvalidCharacter[];
    storageSerializationPolicies: outputs.GetDatabasesDatabaseParameterStorageSerializationPolicy[];
    suspendTaskAfterNumFailures: outputs.GetDatabasesDatabaseParameterSuspendTaskAfterNumFailure[];
    taskAutoRetryAttempts: outputs.GetDatabasesDatabaseParameterTaskAutoRetryAttempt[];
    traceLevels: outputs.GetDatabasesDatabaseParameterTraceLevel[];
    userTaskManagedInitialWarehouseSizes: outputs.GetDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSize[];
    userTaskMinimumTriggerIntervalInSeconds: outputs.GetDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecond[];
    userTaskTimeoutMs: outputs.GetDatabasesDatabaseParameterUserTaskTimeoutM[];
}

export interface GetDatabasesDatabaseParameterCatalog {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetDatabasesDatabaseParameterDataRetentionTimeInDay {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetDatabasesDatabaseParameterDefaultDdlCollation {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetDatabasesDatabaseParameterEnableConsoleOutput {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetDatabasesDatabaseParameterExternalVolume {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetDatabasesDatabaseParameterLogLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetDatabasesDatabaseParameterMaxDataExtensionTimeInDay {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetDatabasesDatabaseParameterQuotedIdentifiersIgnoreCase {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetDatabasesDatabaseParameterReplaceInvalidCharacter {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetDatabasesDatabaseParameterStorageSerializationPolicy {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetDatabasesDatabaseParameterSuspendTaskAfterNumFailure {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetDatabasesDatabaseParameterTaskAutoRetryAttempt {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetDatabasesDatabaseParameterTraceLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSize {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecond {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetDatabasesDatabaseParameterUserTaskTimeoutM {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetDatabasesDatabaseShowOutput {
    comment: string;
    createdOn: string;
    droppedOn: string;
    isCurrent: boolean;
    isDefault: boolean;
    kind: string;
    name: string;
    options: string;
    origin: string;
    owner: string;
    ownerRoleType: string;
    resourceGroup: string;
    retentionTime: number;
    transient: boolean;
}

export interface GetDatabasesLimit {
    /**
     * Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
     */
    from?: string;
    /**
     * The maximum number of rows to return.
     */
    rows: number;
}

export interface GetDynamicTablesIn {
    /**
     * Returns records for the entire account.
     */
    account?: boolean;
    /**
     * Returns records for the current database in use or for a specified database (db_name).
     */
    database?: string;
    /**
     * Returns records for the current schema in use or a specified schema (schema_name).
     */
    schema?: string;
}

export interface GetDynamicTablesLike {
    /**
     * Filters the command output by object name. The filter uses case-insensitive pattern matching with support for SQL wildcard characters (% and _).
     */
    pattern: string;
}

export interface GetDynamicTablesLimit {
    /**
     * The optional FROM 'name_string' subclause effectively serves as a “cursor” for the results. This enables fetching the specified number of rows following the first row whose object name matches the specified string
     */
    from?: string;
    /**
     * Specifies the maximum number of rows to return.
     */
    rows?: number;
}

export interface GetDynamicTablesRecord {
    /**
     * Whether auto-clustering is enabled on the dynamic table. Not currently supported for dynamic tables.
     */
    automaticClustering: boolean;
    /**
     * Number of bytes that will be scanned if the entire dynamic table is scanned in a query.
     */
    bytes: number;
    /**
     * The clustering key for the dynamic table.
     */
    clusterBy: string;
    /**
     * Comment for the dynamic table.
     */
    comment: string;
    /**
     * Date and time when the dynamic table was created.
     */
    createdOn: string;
    /**
     * Timestamp of the data in the base object(s) that is included in the dynamic table.
     */
    dataTimestamp: string;
    /**
     * Database in which the dynamic table is stored.
     */
    databaseName: string;
    /**
     * TRUE if the dynamic table has been cloned, else FALSE.
     */
    isClone: boolean;
    /**
     * TRUE if the dynamic table is a replica. else FALSE.
     */
    isReplica: boolean;
    /**
     * Timestamp of last suspension.
     */
    lastSuspendedOn: string;
    /**
     * Name of the dynamic table.
     */
    name: string;
    /**
     * Role that owns the dynamic table.
     */
    owner: string;
    /**
     * INCREMENTAL if the dynamic table will use incremental refreshes, or FULL if it will recompute the whole table on every refresh.
     */
    refreshMode: string;
    /**
     * Explanation for why FULL refresh mode was chosen. NULL if refresh mode is not FULL.
     */
    refreshModeReason: string;
    /**
     * Number of rows in the table.
     */
    rows: number;
    /**
     * Displays RUNNING for dynamic tables that are actively scheduling refreshes and SUSPENDED for suspended dynamic tables.
     */
    schedulingState: string;
    /**
     * Schema in which the dynamic table is stored.
     */
    schemaName: string;
    /**
     * The maximum duration that the dynamic table’s content should lag behind real time.
     */
    targetLag: string;
    /**
     * The text of the command that created this dynamic table (e.g. CREATE DYNAMIC TABLE ...).
     */
    text: string;
    /**
     * Warehouse that provides the required resources to perform the incremental refreshes.
     */
    warehouse: string;
}

export interface GetExternalFunctionsExternalFunction {
    comment: string;
    database: string;
    language: string;
    name: string;
    schema: string;
}

export interface GetExternalTablesExternalTable {
    comment: string;
    database: string;
    name: string;
    schema: string;
}

export interface GetFailoverGroupsFailoverGroup {
    /**
     * Account locator in a region.
     */
    accountLocator: string;
    /**
     * Name of the account.
     */
    accountName: string;
    /**
     * List of accounts enabled for replication and failover.
     */
    allowedAccounts: any[];
    /**
     * A list of integration types that are enabled for replication.
     */
    allowedIntegrationTypes: any[];
    /**
     * Comment string.
     */
    comment: string;
    /**
     * Date and time failover group was created.
     */
    createdOn: string;
    /**
     * Indicates whether the failover group is the primary group.
     */
    isPrimary: boolean;
    /**
     * Date and time of the next scheduled refresh.
     */
    nextScheduledRefresh: string;
    /**
     * List of specified object types enabled for replication and failover.
     */
    objectTypes: any[];
    /**
     * Name of your Snowflake organization.
     */
    organizationName: string;
    /**
     * Name of the role with the OWNERSHIP privilege on the failover group. NULL if the failover group is in a different region.
     */
    owner: string;
    /**
     * Name of the primary group.
     */
    primary: string;
    /**
     * Region group where the account is located. Note: this column is only visible to organizations that span multiple Region Groups.
     */
    regionGroup: string;
    /**
     * Scheduled interval for refresh; NULL if no replication schedule is set.
     */
    replicationSchedule: string;
    /**
     * Current state of scheduled refresh. Valid values are started or suspended. NULL if no replication schedule is set.
     */
    secondaryState: string;
    /**
     * Snowflake Region where the account is located. A Snowflake Region is a distinct location within a cloud platform region that is isolated from other Snowflake Regions. A Snowflake Region can be either multi-tenant or single-tenant (for a Virtual Private Snowflake account).
     */
    snowflakeRegion: string;
    /**
     * Type of group. Valid value is FAILOVER.
     */
    type: string;
}

export interface GetFileFormatsFileFormat {
    comment: string;
    database: string;
    formatType: string;
    name: string;
    schema: string;
}

export interface GetFunctionsFunction {
    argumentTypes: string[];
    comment: string;
    database: string;
    name: string;
    returnType: string;
    schema: string;
}

export interface GetGrantsFutureGrantsIn {
    /**
     * Lists all privileges on new (i.e. future) objects of a specified type in the database granted to a role.
     */
    database?: string;
    /**
     * Lists all privileges on new (i.e. future) objects of a specified type in the schema granted to a role. Schema must be a fully qualified name ("&lt;db*name&gt;"."&lt;schema*name&gt;").
     */
    schema?: string;
}

export interface GetGrantsFutureGrantsTo {
    /**
     * Lists all privileges on new (i.e. future) objects of a specified type in a database or schema granted to the account role.
     */
    accountRole?: string;
    /**
     * Lists all privileges on new (i.e. future) objects granted to the database role. Must be a fully qualified name ("&lt;db*name&gt;"."&lt;database*role_name&gt;").
     */
    databaseRole?: string;
}

export interface GetGrantsGrant {
    /**
     * The date and time the grant was created.
     */
    createdOn: string;
    /**
     * Whether the grantee can grant the privilege to others.
     */
    grantOption: boolean;
    /**
     * The role that granted the privilege.
     */
    grantedBy: string;
    /**
     * The object on which the privilege was granted.
     */
    grantedOn: string;
    /**
     * The role to which the privilege was granted.
     */
    grantedTo: string;
    /**
     * The name of the role to which the privilege was granted.
     */
    granteeName: string;
    /**
     * The name of the object on which the privilege was granted.
     */
    name: string;
    /**
     * The privilege granted.
     */
    privilege: string;
}

export interface GetGrantsGrantsOf {
    /**
     * Lists all users and roles to which the account role has been granted.
     */
    accountRole?: string;
    /**
     * Lists all the users and roles to which the application role has been granted. Must be a fully qualified name ("&lt;db*name&gt;"."&lt;database*role_name&gt;").
     */
    applicationRole?: string;
    /**
     * Lists all users and roles to which the database role has been granted. Must be a fully qualified name ("&lt;db*name&gt;"."&lt;database*role_name&gt;").
     */
    databaseRole?: string;
    /**
     * Lists all the accounts for the share and indicates the accounts that are using the share.
     */
    share?: string;
}

export interface GetGrantsGrantsOn {
    /**
     * Object hierarchy to list privileges on. The only valid value is: ACCOUNT. Setting this attribute lists all the account-level (i.e. global) privileges that have been granted to roles.
     */
    account?: boolean;
    /**
     * Name of object to list privileges on.
     */
    objectName?: string;
    /**
     * Type of object to list privileges on.
     */
    objectType?: string;
}

export interface GetGrantsGrantsTo {
    /**
     * Lists all privileges and roles granted to the role.
     */
    accountRole?: string;
    /**
     * Lists all the privileges and roles granted to the application.
     */
    application?: string;
    /**
     * Lists all the privileges and roles granted to the application role. Must be a fully qualified name ("&lt;app*name&gt;"."&lt;app*role_name&gt;").
     */
    applicationRole?: string;
    /**
     * Lists all privileges and roles granted to the database role. Must be a fully qualified name ("&lt;db*name&gt;"."&lt;database*role_name&gt;").
     */
    databaseRole?: string;
    /**
     * Lists all the privileges granted to the share.
     */
    share?: outputs.GetGrantsGrantsToShare;
    /**
     * Lists all the roles granted to the user. Note that the PUBLIC role, which is automatically available to every user, is not listed.
     */
    user?: string;
}

export interface GetGrantsGrantsToShare {
    /**
     * Lists all of the privileges and roles granted to the specified share.
     */
    shareName: string;
}

export interface GetMaskingPoliciesIn {
    /**
     * Returns records for the entire account.
     */
    account?: boolean;
    /**
     * Returns records for the specified application.
     */
    application?: string;
    /**
     * Returns records for the specified application package.
     */
    applicationPackage?: string;
    /**
     * Returns records for the current database in use or for a specified database.
     */
    database?: string;
    /**
     * Returns records for the current schema in use or a specified schema. Use fully qualified name.
     */
    schema?: string;
}

export interface GetMaskingPoliciesLimit {
    /**
     * Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
     */
    from?: string;
    /**
     * The maximum number of rows to return.
     */
    rows: number;
}

export interface GetMaskingPoliciesMaskingPolicy {
    /**
     * Holds the output of DESCRIBE MASKING POLICY.
     */
    describeOutputs: outputs.GetMaskingPoliciesMaskingPolicyDescribeOutput[];
    /**
     * Holds the output of SHOW MASKING POLICIES.
     */
    showOutputs: outputs.GetMaskingPoliciesMaskingPolicyShowOutput[];
}

export interface GetMaskingPoliciesMaskingPolicyDescribeOutput {
    body: string;
    name: string;
    returnType: string;
    signatures: outputs.GetMaskingPoliciesMaskingPolicyDescribeOutputSignature[];
}

export interface GetMaskingPoliciesMaskingPolicyDescribeOutputSignature {
    name: string;
    type: string;
}

export interface GetMaskingPoliciesMaskingPolicyShowOutput {
    comment: string;
    createdOn: string;
    databaseName: string;
    exemptOtherPolicies: boolean;
    kind: string;
    name: string;
    owner: string;
    ownerRoleType: string;
    schemaName: string;
}

export interface GetMaterializedViewsMaterializedView {
    comment: string;
    database: string;
    name: string;
    schema: string;
}

export interface GetNetworkPoliciesNetworkPolicy {
    /**
     * Holds the output of DESCRIBE NETWORK POLICIES.
     */
    describeOutputs: outputs.GetNetworkPoliciesNetworkPolicyDescribeOutput[];
    /**
     * Holds the output of SHOW NETWORK POLICIES.
     */
    showOutputs: outputs.GetNetworkPoliciesNetworkPolicyShowOutput[];
}

export interface GetNetworkPoliciesNetworkPolicyDescribeOutput {
    allowedIpList: string;
    allowedNetworkRuleList: string;
    blockedIpList: string;
    blockedNetworkRuleList: string;
}

export interface GetNetworkPoliciesNetworkPolicyShowOutput {
    comment: string;
    createdOn: string;
    entriesInAllowedIpList: number;
    entriesInAllowedNetworkRules: number;
    entriesInBlockedIpList: number;
    entriesInBlockedNetworkRules: number;
    name: string;
}

export interface GetParametersParameter {
    /**
     * The default value of the parameter
     */
    default: string;
    /**
     * The description of the parameter
     */
    description: string;
    /**
     * The name of the parameter
     */
    key: string;
    /**
     * The level of the parameter
     */
    level: string;
    /**
     * The value of the parameter
     */
    value: string;
}

export interface GetPipesPipe {
    comment: string;
    database: string;
    integration: string;
    name: string;
    schema: string;
}

export interface GetProceduresProcedure {
    argumentTypes: string[];
    comment: string;
    database: string;
    name: string;
    returnType: string;
    schema: string;
}

export interface GetResourceMonitorsResourceMonitor {
    /**
     * Holds the output of SHOW RESOURCE MONITORS.
     */
    showOutputs: outputs.GetResourceMonitorsResourceMonitorShowOutput[];
}

export interface GetResourceMonitorsResourceMonitorShowOutput {
    comment: string;
    createdOn: string;
    creditQuota: number;
    endTime: string;
    frequency: string;
    level: string;
    name: string;
    owner: string;
    remainingCredits: number;
    startTime: string;
    suspendAt: number;
    suspendImmediateAt: number;
    usedCredits: number;
}

export interface GetRowAccessPoliciesIn {
    /**
     * Returns records for the entire account.
     */
    account?: boolean;
    /**
     * Returns records for the specified application.
     */
    application?: string;
    /**
     * Returns records for the specified application package.
     */
    applicationPackage?: string;
    /**
     * Returns records for the current database in use or for a specified database.
     */
    database?: string;
    /**
     * Returns records for the current schema in use or a specified schema. Use fully qualified name.
     */
    schema?: string;
}

export interface GetRowAccessPoliciesLimit {
    /**
     * Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
     */
    from?: string;
    /**
     * The maximum number of rows to return.
     */
    rows: number;
}

export interface GetRowAccessPoliciesRowAccessPolicy {
    /**
     * Holds the output of DESCRIBE ROW ACCESS POLICY.
     */
    describeOutputs: outputs.GetRowAccessPoliciesRowAccessPolicyDescribeOutput[];
    /**
     * Holds the output of SHOW ROW ACCESS POLICIES.
     */
    showOutputs: outputs.GetRowAccessPoliciesRowAccessPolicyShowOutput[];
}

export interface GetRowAccessPoliciesRowAccessPolicyDescribeOutput {
    body: string;
    name: string;
    returnType: string;
    signatures: outputs.GetRowAccessPoliciesRowAccessPolicyDescribeOutputSignature[];
}

export interface GetRowAccessPoliciesRowAccessPolicyDescribeOutputSignature {
    name: string;
    type: string;
}

export interface GetRowAccessPoliciesRowAccessPolicyShowOutput {
    comment: string;
    createdOn: string;
    databaseName: string;
    kind: string;
    name: string;
    options: string;
    owner: string;
    ownerRoleType: string;
    schemaName: string;
}

export interface GetSchemasIn {
    /**
     * Returns records for the entire account.
     */
    account?: boolean;
    /**
     * Returns records for the specified application.
     */
    application?: string;
    /**
     * Returns records for the specified application package.
     */
    applicationPackage?: string;
    /**
     * Returns records for the current database in use or for a specified database (db_name).
     */
    database?: string;
}

export interface GetSchemasLimit {
    /**
     * Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
     */
    from?: string;
    /**
     * The maximum number of rows to return.
     */
    rows: number;
}

export interface GetSchemasSchema {
    /**
     * Holds the output of DESCRIBE SCHEMA.
     */
    describeOutputs: outputs.GetSchemasSchemaDescribeOutput[];
    /**
     * Holds the output of SHOW PARAMETERS FOR SCHEMA.
     */
    parameters: outputs.GetSchemasSchemaParameter[];
    /**
     * Holds the output of SHOW SCHEMAS.
     */
    showOutputs: outputs.GetSchemasSchemaShowOutput[];
}

export interface GetSchemasSchemaDescribeOutput {
    createdOn: string;
    kind: string;
    name: string;
}

export interface GetSchemasSchemaParameter {
    catalogs: outputs.GetSchemasSchemaParameterCatalog[];
    dataRetentionTimeInDays: outputs.GetSchemasSchemaParameterDataRetentionTimeInDay[];
    defaultDdlCollations: outputs.GetSchemasSchemaParameterDefaultDdlCollation[];
    enableConsoleOutputs: outputs.GetSchemasSchemaParameterEnableConsoleOutput[];
    externalVolumes: outputs.GetSchemasSchemaParameterExternalVolume[];
    logLevels: outputs.GetSchemasSchemaParameterLogLevel[];
    maxDataExtensionTimeInDays: outputs.GetSchemasSchemaParameterMaxDataExtensionTimeInDay[];
    pipeExecutionPauseds: outputs.GetSchemasSchemaParameterPipeExecutionPaused[];
    quotedIdentifiersIgnoreCases: outputs.GetSchemasSchemaParameterQuotedIdentifiersIgnoreCase[];
    replaceInvalidCharacters: outputs.GetSchemasSchemaParameterReplaceInvalidCharacter[];
    storageSerializationPolicies: outputs.GetSchemasSchemaParameterStorageSerializationPolicy[];
    suspendTaskAfterNumFailures: outputs.GetSchemasSchemaParameterSuspendTaskAfterNumFailure[];
    taskAutoRetryAttempts: outputs.GetSchemasSchemaParameterTaskAutoRetryAttempt[];
    traceLevels: outputs.GetSchemasSchemaParameterTraceLevel[];
    userTaskManagedInitialWarehouseSizes: outputs.GetSchemasSchemaParameterUserTaskManagedInitialWarehouseSize[];
    userTaskMinimumTriggerIntervalInSeconds: outputs.GetSchemasSchemaParameterUserTaskMinimumTriggerIntervalInSecond[];
    userTaskTimeoutMs: outputs.GetSchemasSchemaParameterUserTaskTimeoutM[];
}

export interface GetSchemasSchemaParameterCatalog {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetSchemasSchemaParameterDataRetentionTimeInDay {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetSchemasSchemaParameterDefaultDdlCollation {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetSchemasSchemaParameterEnableConsoleOutput {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetSchemasSchemaParameterExternalVolume {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetSchemasSchemaParameterLogLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetSchemasSchemaParameterMaxDataExtensionTimeInDay {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetSchemasSchemaParameterPipeExecutionPaused {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetSchemasSchemaParameterQuotedIdentifiersIgnoreCase {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetSchemasSchemaParameterReplaceInvalidCharacter {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetSchemasSchemaParameterStorageSerializationPolicy {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetSchemasSchemaParameterSuspendTaskAfterNumFailure {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetSchemasSchemaParameterTaskAutoRetryAttempt {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetSchemasSchemaParameterTraceLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetSchemasSchemaParameterUserTaskManagedInitialWarehouseSize {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetSchemasSchemaParameterUserTaskMinimumTriggerIntervalInSecond {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetSchemasSchemaParameterUserTaskTimeoutM {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetSchemasSchemaShowOutput {
    comment: string;
    createdOn: string;
    databaseName: string;
    droppedOn: string;
    isCurrent: boolean;
    isDefault: boolean;
    name: string;
    options: string;
    owner: string;
    ownerRoleType: string;
    retentionTime: string;
}

export interface GetSecretsIn {
    /**
     * Returns records for the entire account.
     */
    account?: boolean;
    /**
     * Returns records for the specified application.
     */
    application?: string;
    /**
     * Returns records for the specified application package.
     */
    applicationPackage?: string;
    /**
     * Returns records for the current database in use or for a specified database.
     */
    database?: string;
    /**
     * Returns records for the current schema in use or a specified schema. Use fully qualified name.
     */
    schema?: string;
}

export interface GetSecretsSecret {
    /**
     * Holds the output of DESCRIBE SECRET.
     */
    describeOutputs: outputs.GetSecretsSecretDescribeOutput[];
    /**
     * Holds the output of SHOW SECRETS.
     */
    showOutputs: outputs.GetSecretsSecretShowOutput[];
}

export interface GetSecretsSecretDescribeOutput {
    comment: string;
    createdOn: string;
    databaseName: string;
    integrationName: string;
    name: string;
    oauthAccessTokenExpiryTime: string;
    oauthRefreshTokenExpiryTime: string;
    oauthScopes: string[];
    owner: string;
    schemaName: string;
    secretType: string;
    username: string;
}

export interface GetSecretsSecretShowOutput {
    comment: string;
    createdOn: string;
    databaseName: string;
    name: string;
    oauthScopes: string[];
    owner: string;
    ownerRoleType: string;
    schemaName: string;
    secretType: string;
}

export interface GetSecurityIntegrationsSecurityIntegration {
    /**
     * Holds the output of DESCRIBE SECURITY INTEGRATIONS.
     */
    describeOutputs: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutput[];
    /**
     * Holds the output of SHOW SECURITY INTEGRATIONS.
     */
    showOutputs: outputs.GetSecurityIntegrationsSecurityIntegrationShowOutput[];
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutput {
    allowedEmailPatterns: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedEmailPattern[];
    allowedUserDomains: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedUserDomain[];
    authTypes: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputAuthType[];
    blockedRolesLists: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputBlockedRolesList[];
    comments: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputComment[];
    enableds: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputEnabled[];
    externalOauthAllowedRolesLists: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAllowedRolesList[];
    externalOauthAnyRoleModes: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAnyRoleMode[];
    externalOauthAudienceLists: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAudienceList[];
    externalOauthBlockedRolesLists: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthBlockedRolesList[];
    externalOauthIssuers: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthIssuer[];
    externalOauthJwsKeysUrls: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthJwsKeysUrl[];
    externalOauthRsaPublicKey2s: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey2[];
    externalOauthRsaPublicKeys: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey[];
    externalOauthScopeDelimiters: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthScopeDelimiter[];
    externalOauthSnowflakeUserMappingAttributes: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute[];
    externalOauthTokenUserMappingClaims: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthTokenUserMappingClaim[];
    networkPolicies: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputNetworkPolicy[];
    oauthAccessTokenValidities: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAccessTokenValidity[];
    oauthAllowNonTlsRedirectUris: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowNonTlsRedirectUri[];
    oauthAllowedAuthorizationEndpoints: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedAuthorizationEndpoint[];
    oauthAllowedScopes: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedScope[];
    oauthAllowedTokenEndpoints: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedTokenEndpoint[];
    oauthAuthorizationEndpoints: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAuthorizationEndpoint[];
    oauthClientAuthMethods: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientAuthMethod[];
    oauthClientRsaPublicKey2Fps: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKey2Fp[];
    oauthClientRsaPublicKeyFps: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKeyFp[];
    oauthClientTypes: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientType[];
    oauthEnforcePkces: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthEnforcePkce[];
    oauthGrants: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthGrant[];
    oauthIssueRefreshTokens: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthIssueRefreshToken[];
    oauthRefreshTokenValidities: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRefreshTokenValidity[];
    oauthTokenEndpoints: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthTokenEndpoint[];
    oauthUseSecondaryRoles: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthUseSecondaryRole[];
    parentIntegrations: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputParentIntegration[];
    preAuthorizedRolesLists: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputPreAuthorizedRolesList[];
    runAsRoles: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputRunAsRole[];
    saml2DigestMethodsUseds: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2DigestMethodsUsed[];
    saml2EnableSpInitiateds: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2EnableSpInitiated[];
    saml2ForceAuthns: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2ForceAuthn[];
    saml2Issuers: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Issuer[];
    saml2PostLogoutRedirectUrls: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2PostLogoutRedirectUrl[];
    saml2Providers: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Provider[];
    saml2RequestedNameidFormats: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2RequestedNameidFormat[];
    saml2SignRequests: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignRequest[];
    saml2SignatureMethodsUseds: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignatureMethodsUsed[];
    saml2SnowflakeAcsUrls: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeAcsUrl[];
    saml2SnowflakeIssuerUrls: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeIssuerUrl[];
    saml2SnowflakeMetadatas: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeMetadata[];
    saml2SpInitiatedLoginPageLabels: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel[];
    saml2SsoUrls: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SsoUrl[];
    syncPasswords: outputs.GetSecurityIntegrationsSecurityIntegrationDescribeOutputSyncPassword[];
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedEmailPattern {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedUserDomain {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputAuthType {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputBlockedRolesList {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputComment {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputEnabled {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAllowedRolesList {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAnyRoleMode {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAudienceList {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthBlockedRolesList {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthIssuer {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthJwsKeysUrl {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey2 {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthScopeDelimiter {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthTokenUserMappingClaim {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputNetworkPolicy {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAccessTokenValidity {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowNonTlsRedirectUri {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedAuthorizationEndpoint {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedScope {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedTokenEndpoint {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAuthorizationEndpoint {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientAuthMethod {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKey2Fp {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKeyFp {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientType {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthEnforcePkce {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthGrant {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthIssueRefreshToken {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRefreshTokenValidity {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthTokenEndpoint {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputOauthUseSecondaryRole {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputParentIntegration {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputPreAuthorizedRolesList {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputRunAsRole {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2DigestMethodsUsed {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2EnableSpInitiated {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2ForceAuthn {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Issuer {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2PostLogoutRedirectUrl {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Provider {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2RequestedNameidFormat {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignRequest {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignatureMethodsUsed {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeAcsUrl {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeIssuerUrl {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeMetadata {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SsoUrl {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationDescribeOutputSyncPassword {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface GetSecurityIntegrationsSecurityIntegrationShowOutput {
    category: string;
    comment: string;
    createdOn: string;
    enabled: boolean;
    integrationType: string;
    name: string;
}

export interface GetSequencesSequence {
    comment: string;
    database: string;
    name: string;
    schema: string;
}

export interface GetSharesShare {
    /**
     * The comment on the share.
     */
    comment: string;
    /**
     * The kind of the share.
     */
    kind: string;
    /**
     * Identifier for the share.
     */
    name: string;
    /**
     * The owner of the share.
     */
    owner: string;
    /**
     * For the OUTBOUND share, list of consumers.
     */
    tos: any[];
}

export interface GetStagesStage {
    comment: string;
    database: string;
    name: string;
    schema: string;
    storageIntegration: string;
}

export interface GetStorageIntegrationsStorageIntegration {
    comment: string;
    enabled: boolean;
    name: string;
    type: string;
}

export interface GetStreamlitsIn {
    /**
     * Returns records for the entire account.
     */
    account?: boolean;
    /**
     * Returns records for the current database in use or for a specified database (db_name).
     */
    database?: string;
    /**
     * Returns records for the current schema in use or a specified schema (schema_name).
     */
    schema?: string;
}

export interface GetStreamlitsLimit {
    /**
     * Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
     */
    from?: string;
    /**
     * The maximum number of rows to return.
     */
    rows: number;
}

export interface GetStreamlitsStreamlit {
    /**
     * Holds the output of DESCRIBE STREAMLIT.
     */
    describeOutputs: outputs.GetStreamlitsStreamlitDescribeOutput[];
    /**
     * Holds the output of SHOW STREAMLITS.
     */
    showOutputs: outputs.GetStreamlitsStreamlitShowOutput[];
}

export interface GetStreamlitsStreamlitDescribeOutput {
    defaultPackages: string;
    externalAccessIntegrations: string[];
    externalAccessSecrets: string;
    importUrls: string[];
    mainFile: string;
    name: string;
    queryWarehouse: string;
    rootLocation: string;
    title: string;
    urlId: string;
    userPackages: string[];
}

export interface GetStreamlitsStreamlitShowOutput {
    comment: string;
    createdOn: string;
    databaseName: string;
    name: string;
    owner: string;
    ownerRoleType: string;
    queryWarehouse: string;
    schemaName: string;
    title: string;
    urlId: string;
}

export interface GetStreamsIn {
    /**
     * Returns records for the entire account.
     */
    account?: boolean;
    /**
     * Returns records for the specified application.
     */
    application?: string;
    /**
     * Returns records for the specified application package.
     */
    applicationPackage?: string;
    /**
     * Returns records for the current database in use or for a specified database.
     */
    database?: string;
    /**
     * Returns records for the current schema in use or a specified schema. Use fully qualified name.
     */
    schema?: string;
}

export interface GetStreamsLimit {
    /**
     * Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
     */
    from?: string;
    /**
     * The maximum number of rows to return.
     */
    rows: number;
}

export interface GetStreamsStream {
    /**
     * Holds the output of DESCRIBE STREAM.
     */
    describeOutputs: outputs.GetStreamsStreamDescribeOutput[];
    /**
     * Holds the output of SHOW STREAMS.
     */
    showOutputs: outputs.GetStreamsStreamShowOutput[];
}

export interface GetStreamsStreamDescribeOutput {
    baseTables: string[];
    comment: string;
    createdOn: string;
    databaseName: string;
    invalidReason: string;
    mode: string;
    name: string;
    owner: string;
    ownerRoleType: string;
    schemaName: string;
    sourceType: string;
    stale: boolean;
    staleAfter: string;
    tableName: string;
    type: string;
}

export interface GetStreamsStreamShowOutput {
    baseTables: string[];
    comment: string;
    createdOn: string;
    databaseName: string;
    invalidReason: string;
    mode: string;
    name: string;
    owner: string;
    ownerRoleType: string;
    schemaName: string;
    sourceType: string;
    stale: boolean;
    staleAfter: string;
    tableName: string;
    type: string;
}

export interface GetTablesTable {
    comment: string;
    database: string;
    name: string;
    schema: string;
}

export interface GetTagsIn {
    /**
     * Returns records for the entire account.
     */
    account?: boolean;
    /**
     * Returns records for the specified application.
     */
    application?: string;
    /**
     * Returns records for the specified application package.
     */
    applicationPackage?: string;
    /**
     * Returns records for the current database in use or for a specified database.
     */
    database?: string;
    /**
     * Returns records for the current schema in use or a specified schema. Use fully qualified name.
     */
    schema?: string;
}

export interface GetTagsTag {
    /**
     * Holds the output of SHOW TAGS.
     */
    showOutputs: outputs.GetTagsTagShowOutput[];
}

export interface GetTagsTagShowOutput {
    allowedValues: string[];
    comment: string;
    createdOn: string;
    databaseName: string;
    name: string;
    owner: string;
    ownerRoleType: string;
    schemaName: string;
}

export interface GetTasksIn {
    /**
     * Returns records for the entire account.
     */
    account?: boolean;
    /**
     * Returns records for the specified application.
     */
    application?: string;
    /**
     * Returns records for the specified application package.
     */
    applicationPackage?: string;
    /**
     * Returns records for the current database in use or for a specified database.
     */
    database?: string;
    /**
     * Returns records for the current schema in use or a specified schema. Use fully qualified name.
     */
    schema?: string;
}

export interface GetTasksLimit {
    /**
     * Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
     */
    from?: string;
    /**
     * The maximum number of rows to return.
     */
    rows: number;
}

export interface GetTasksTask {
    /**
     * Holds the output of SHOW PARAMETERS FOR TASK.
     */
    parameters: outputs.GetTasksTaskParameter[];
    /**
     * Holds the output of SHOW TASKS.
     */
    showOutputs: outputs.GetTasksTaskShowOutput[];
}

export interface GetTasksTaskParameter {
    abortDetachedQueries: outputs.GetTasksTaskParameterAbortDetachedQuery[];
    autocommits: outputs.GetTasksTaskParameterAutocommit[];
    binaryInputFormats: outputs.GetTasksTaskParameterBinaryInputFormat[];
    binaryOutputFormats: outputs.GetTasksTaskParameterBinaryOutputFormat[];
    clientMemoryLimits: outputs.GetTasksTaskParameterClientMemoryLimit[];
    clientMetadataRequestUseConnectionCtxes: outputs.GetTasksTaskParameterClientMetadataRequestUseConnectionCtx[];
    clientPrefetchThreads: outputs.GetTasksTaskParameterClientPrefetchThread[];
    clientResultChunkSizes: outputs.GetTasksTaskParameterClientResultChunkSize[];
    clientResultColumnCaseInsensitives: outputs.GetTasksTaskParameterClientResultColumnCaseInsensitive[];
    clientSessionKeepAliveHeartbeatFrequencies: outputs.GetTasksTaskParameterClientSessionKeepAliveHeartbeatFrequency[];
    clientSessionKeepAlives: outputs.GetTasksTaskParameterClientSessionKeepAlife[];
    clientTimestampTypeMappings: outputs.GetTasksTaskParameterClientTimestampTypeMapping[];
    dateInputFormats: outputs.GetTasksTaskParameterDateInputFormat[];
    dateOutputFormats: outputs.GetTasksTaskParameterDateOutputFormat[];
    enableUnloadPhysicalTypeOptimizations: outputs.GetTasksTaskParameterEnableUnloadPhysicalTypeOptimization[];
    errorOnNondeterministicMerges: outputs.GetTasksTaskParameterErrorOnNondeterministicMerge[];
    errorOnNondeterministicUpdates: outputs.GetTasksTaskParameterErrorOnNondeterministicUpdate[];
    geographyOutputFormats: outputs.GetTasksTaskParameterGeographyOutputFormat[];
    geometryOutputFormats: outputs.GetTasksTaskParameterGeometryOutputFormat[];
    jdbcTreatTimestampNtzAsUtcs: outputs.GetTasksTaskParameterJdbcTreatTimestampNtzAsUtc[];
    jdbcUseSessionTimezones: outputs.GetTasksTaskParameterJdbcUseSessionTimezone[];
    jsonIndents: outputs.GetTasksTaskParameterJsonIndent[];
    lockTimeouts: outputs.GetTasksTaskParameterLockTimeout[];
    logLevels: outputs.GetTasksTaskParameterLogLevel[];
    multiStatementCounts: outputs.GetTasksTaskParameterMultiStatementCount[];
    noorderSequenceAsDefaults: outputs.GetTasksTaskParameterNoorderSequenceAsDefault[];
    odbcTreatDecimalAsInts: outputs.GetTasksTaskParameterOdbcTreatDecimalAsInt[];
    queryTags: outputs.GetTasksTaskParameterQueryTag[];
    quotedIdentifiersIgnoreCases: outputs.GetTasksTaskParameterQuotedIdentifiersIgnoreCase[];
    rowsPerResultsets: outputs.GetTasksTaskParameterRowsPerResultset[];
    s3StageVpceDnsNames: outputs.GetTasksTaskParameterS3StageVpceDnsName[];
    searchPaths: outputs.GetTasksTaskParameterSearchPath[];
    statementQueuedTimeoutInSeconds: outputs.GetTasksTaskParameterStatementQueuedTimeoutInSecond[];
    statementTimeoutInSeconds: outputs.GetTasksTaskParameterStatementTimeoutInSecond[];
    strictJsonOutputs: outputs.GetTasksTaskParameterStrictJsonOutput[];
    suspendTaskAfterNumFailures: outputs.GetTasksTaskParameterSuspendTaskAfterNumFailure[];
    taskAutoRetryAttempts: outputs.GetTasksTaskParameterTaskAutoRetryAttempt[];
    timeInputFormats: outputs.GetTasksTaskParameterTimeInputFormat[];
    timeOutputFormats: outputs.GetTasksTaskParameterTimeOutputFormat[];
    timestampDayIsAlways24hs: outputs.GetTasksTaskParameterTimestampDayIsAlways24h[];
    timestampInputFormats: outputs.GetTasksTaskParameterTimestampInputFormat[];
    timestampLtzOutputFormats: outputs.GetTasksTaskParameterTimestampLtzOutputFormat[];
    timestampNtzOutputFormats: outputs.GetTasksTaskParameterTimestampNtzOutputFormat[];
    timestampOutputFormats: outputs.GetTasksTaskParameterTimestampOutputFormat[];
    timestampTypeMappings: outputs.GetTasksTaskParameterTimestampTypeMapping[];
    timestampTzOutputFormats: outputs.GetTasksTaskParameterTimestampTzOutputFormat[];
    timezones: outputs.GetTasksTaskParameterTimezone[];
    traceLevels: outputs.GetTasksTaskParameterTraceLevel[];
    transactionAbortOnErrors: outputs.GetTasksTaskParameterTransactionAbortOnError[];
    transactionDefaultIsolationLevels: outputs.GetTasksTaskParameterTransactionDefaultIsolationLevel[];
    twoDigitCenturyStarts: outputs.GetTasksTaskParameterTwoDigitCenturyStart[];
    unsupportedDdlActions: outputs.GetTasksTaskParameterUnsupportedDdlAction[];
    useCachedResults: outputs.GetTasksTaskParameterUseCachedResult[];
    userTaskManagedInitialWarehouseSizes: outputs.GetTasksTaskParameterUserTaskManagedInitialWarehouseSize[];
    userTaskMinimumTriggerIntervalInSeconds: outputs.GetTasksTaskParameterUserTaskMinimumTriggerIntervalInSecond[];
    userTaskTimeoutMs: outputs.GetTasksTaskParameterUserTaskTimeoutM[];
    weekOfYearPolicies: outputs.GetTasksTaskParameterWeekOfYearPolicy[];
    weekStarts: outputs.GetTasksTaskParameterWeekStart[];
}

export interface GetTasksTaskParameterAbortDetachedQuery {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterAutocommit {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterBinaryInputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterBinaryOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterClientMemoryLimit {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterClientMetadataRequestUseConnectionCtx {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterClientPrefetchThread {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterClientResultChunkSize {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterClientResultColumnCaseInsensitive {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterClientSessionKeepAlife {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterClientSessionKeepAliveHeartbeatFrequency {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterClientTimestampTypeMapping {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterDateInputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterDateOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterEnableUnloadPhysicalTypeOptimization {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterErrorOnNondeterministicMerge {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterErrorOnNondeterministicUpdate {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterGeographyOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterGeometryOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterJdbcTreatTimestampNtzAsUtc {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterJdbcUseSessionTimezone {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterJsonIndent {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterLockTimeout {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterLogLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterMultiStatementCount {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterNoorderSequenceAsDefault {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterOdbcTreatDecimalAsInt {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterQueryTag {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterQuotedIdentifiersIgnoreCase {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterRowsPerResultset {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterS3StageVpceDnsName {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterSearchPath {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterStatementQueuedTimeoutInSecond {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterStatementTimeoutInSecond {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterStrictJsonOutput {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterSuspendTaskAfterNumFailure {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterTaskAutoRetryAttempt {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterTimeInputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterTimeOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterTimestampDayIsAlways24h {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterTimestampInputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterTimestampLtzOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterTimestampNtzOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterTimestampOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterTimestampTypeMapping {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterTimestampTzOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterTimezone {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterTraceLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterTransactionAbortOnError {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterTransactionDefaultIsolationLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterTwoDigitCenturyStart {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterUnsupportedDdlAction {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterUseCachedResult {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterUserTaskManagedInitialWarehouseSize {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterUserTaskMinimumTriggerIntervalInSecond {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterUserTaskTimeoutM {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterWeekOfYearPolicy {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskParameterWeekStart {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetTasksTaskShowOutput {
    allowOverlappingExecution: boolean;
    budget: string;
    comment: string;
    condition: string;
    config: string;
    createdOn: string;
    databaseName: string;
    definition: string;
    errorIntegration: string;
    id: string;
    lastCommittedOn: string;
    lastSuspendedOn: string;
    lastSuspendedReason: string;
    name: string;
    owner: string;
    ownerRoleType: string;
    predecessors: string[];
    schedule: string;
    schemaName: string;
    state: string;
    taskRelations: outputs.GetTasksTaskShowOutputTaskRelation[];
    warehouse: string;
}

export interface GetTasksTaskShowOutputTaskRelation {
    finalizedRootTask: string;
    finalizer: string;
    predecessors: string[];
}

export interface GetUsersLimit {
    /**
     * Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
     */
    from?: string;
    /**
     * The maximum number of rows to return.
     */
    rows: number;
}

export interface GetUsersUser {
    /**
     * Holds the output of DESCRIBE USER.
     */
    describeOutputs: outputs.GetUsersUserDescribeOutput[];
    /**
     * Holds the output of SHOW PARAMETERS FOR USER.
     */
    parameters: outputs.GetUsersUserParameter[];
    /**
     * Holds the output of SHOW USERS.
     */
    showOutputs: outputs.GetUsersUserShowOutput[];
}

export interface GetUsersUserDescribeOutput {
    comment: string;
    customLandingPageUrl: string;
    customLandingPageUrlFlushNextUiLoad: boolean;
    daysToExpiry: number;
    defaultNamespace: string;
    defaultRole: string;
    defaultSecondaryRoles: string;
    defaultWarehouse: string;
    disabled: boolean;
    displayName: string;
    email: string;
    extAuthnDuo: boolean;
    extAuthnUid: string;
    firstName: string;
    hasMfa: boolean;
    lastName: string;
    loginName: string;
    middleName: string;
    minsToBypassMfa: number;
    minsToBypassNetworkPolicy: number;
    minsToUnlock: number;
    mustChangePassword: boolean;
    name: string;
    passwordLastSetTime: string;
    rsaPublicKey: string;
    rsaPublicKey2: string;
    rsaPublicKey2Fp: string;
    rsaPublicKeyFp: string;
    snowflakeLock: boolean;
    snowflakeSupport: boolean;
    type: string;
}

export interface GetUsersUserParameter {
    abortDetachedQueries: outputs.GetUsersUserParameterAbortDetachedQuery[];
    autocommits: outputs.GetUsersUserParameterAutocommit[];
    binaryInputFormats: outputs.GetUsersUserParameterBinaryInputFormat[];
    binaryOutputFormats: outputs.GetUsersUserParameterBinaryOutputFormat[];
    clientMemoryLimits: outputs.GetUsersUserParameterClientMemoryLimit[];
    clientMetadataRequestUseConnectionCtxes: outputs.GetUsersUserParameterClientMetadataRequestUseConnectionCtx[];
    clientPrefetchThreads: outputs.GetUsersUserParameterClientPrefetchThread[];
    clientResultChunkSizes: outputs.GetUsersUserParameterClientResultChunkSize[];
    clientResultColumnCaseInsensitives: outputs.GetUsersUserParameterClientResultColumnCaseInsensitive[];
    clientSessionKeepAliveHeartbeatFrequencies: outputs.GetUsersUserParameterClientSessionKeepAliveHeartbeatFrequency[];
    clientSessionKeepAlives: outputs.GetUsersUserParameterClientSessionKeepAlife[];
    clientTimestampTypeMappings: outputs.GetUsersUserParameterClientTimestampTypeMapping[];
    dateInputFormats: outputs.GetUsersUserParameterDateInputFormat[];
    dateOutputFormats: outputs.GetUsersUserParameterDateOutputFormat[];
    enableUnloadPhysicalTypeOptimizations: outputs.GetUsersUserParameterEnableUnloadPhysicalTypeOptimization[];
    enableUnredactedQuerySyntaxErrors: outputs.GetUsersUserParameterEnableUnredactedQuerySyntaxError[];
    errorOnNondeterministicMerges: outputs.GetUsersUserParameterErrorOnNondeterministicMerge[];
    errorOnNondeterministicUpdates: outputs.GetUsersUserParameterErrorOnNondeterministicUpdate[];
    geographyOutputFormats: outputs.GetUsersUserParameterGeographyOutputFormat[];
    geometryOutputFormats: outputs.GetUsersUserParameterGeometryOutputFormat[];
    jdbcTreatDecimalAsInts: outputs.GetUsersUserParameterJdbcTreatDecimalAsInt[];
    jdbcTreatTimestampNtzAsUtcs: outputs.GetUsersUserParameterJdbcTreatTimestampNtzAsUtc[];
    jdbcUseSessionTimezones: outputs.GetUsersUserParameterJdbcUseSessionTimezone[];
    jsonIndents: outputs.GetUsersUserParameterJsonIndent[];
    lockTimeouts: outputs.GetUsersUserParameterLockTimeout[];
    logLevels: outputs.GetUsersUserParameterLogLevel[];
    multiStatementCounts: outputs.GetUsersUserParameterMultiStatementCount[];
    networkPolicies: outputs.GetUsersUserParameterNetworkPolicy[];
    noorderSequenceAsDefaults: outputs.GetUsersUserParameterNoorderSequenceAsDefault[];
    odbcTreatDecimalAsInts: outputs.GetUsersUserParameterOdbcTreatDecimalAsInt[];
    preventUnloadToInternalStages: outputs.GetUsersUserParameterPreventUnloadToInternalStage[];
    queryTags: outputs.GetUsersUserParameterQueryTag[];
    quotedIdentifiersIgnoreCases: outputs.GetUsersUserParameterQuotedIdentifiersIgnoreCase[];
    rowsPerResultsets: outputs.GetUsersUserParameterRowsPerResultset[];
    s3StageVpceDnsNames: outputs.GetUsersUserParameterS3StageVpceDnsName[];
    searchPaths: outputs.GetUsersUserParameterSearchPath[];
    simulatedDataSharingConsumers: outputs.GetUsersUserParameterSimulatedDataSharingConsumer[];
    statementQueuedTimeoutInSeconds: outputs.GetUsersUserParameterStatementQueuedTimeoutInSecond[];
    statementTimeoutInSeconds: outputs.GetUsersUserParameterStatementTimeoutInSecond[];
    strictJsonOutputs: outputs.GetUsersUserParameterStrictJsonOutput[];
    timeInputFormats: outputs.GetUsersUserParameterTimeInputFormat[];
    timeOutputFormats: outputs.GetUsersUserParameterTimeOutputFormat[];
    timestampDayIsAlways24hs: outputs.GetUsersUserParameterTimestampDayIsAlways24h[];
    timestampInputFormats: outputs.GetUsersUserParameterTimestampInputFormat[];
    timestampLtzOutputFormats: outputs.GetUsersUserParameterTimestampLtzOutputFormat[];
    timestampNtzOutputFormats: outputs.GetUsersUserParameterTimestampNtzOutputFormat[];
    timestampOutputFormats: outputs.GetUsersUserParameterTimestampOutputFormat[];
    timestampTypeMappings: outputs.GetUsersUserParameterTimestampTypeMapping[];
    timestampTzOutputFormats: outputs.GetUsersUserParameterTimestampTzOutputFormat[];
    timezones: outputs.GetUsersUserParameterTimezone[];
    traceLevels: outputs.GetUsersUserParameterTraceLevel[];
    transactionAbortOnErrors: outputs.GetUsersUserParameterTransactionAbortOnError[];
    transactionDefaultIsolationLevels: outputs.GetUsersUserParameterTransactionDefaultIsolationLevel[];
    twoDigitCenturyStarts: outputs.GetUsersUserParameterTwoDigitCenturyStart[];
    unsupportedDdlActions: outputs.GetUsersUserParameterUnsupportedDdlAction[];
    useCachedResults: outputs.GetUsersUserParameterUseCachedResult[];
    weekOfYearPolicies: outputs.GetUsersUserParameterWeekOfYearPolicy[];
    weekStarts: outputs.GetUsersUserParameterWeekStart[];
}

export interface GetUsersUserParameterAbortDetachedQuery {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterAutocommit {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterBinaryInputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterBinaryOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterClientMemoryLimit {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterClientMetadataRequestUseConnectionCtx {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterClientPrefetchThread {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterClientResultChunkSize {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterClientResultColumnCaseInsensitive {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterClientSessionKeepAlife {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterClientSessionKeepAliveHeartbeatFrequency {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterClientTimestampTypeMapping {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterDateInputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterDateOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterEnableUnloadPhysicalTypeOptimization {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterEnableUnredactedQuerySyntaxError {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterErrorOnNondeterministicMerge {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterErrorOnNondeterministicUpdate {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterGeographyOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterGeometryOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterJdbcTreatDecimalAsInt {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterJdbcTreatTimestampNtzAsUtc {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterJdbcUseSessionTimezone {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterJsonIndent {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterLockTimeout {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterLogLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterMultiStatementCount {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterNetworkPolicy {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterNoorderSequenceAsDefault {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterOdbcTreatDecimalAsInt {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterPreventUnloadToInternalStage {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterQueryTag {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterQuotedIdentifiersIgnoreCase {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterRowsPerResultset {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterS3StageVpceDnsName {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterSearchPath {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterSimulatedDataSharingConsumer {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterStatementQueuedTimeoutInSecond {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterStatementTimeoutInSecond {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterStrictJsonOutput {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterTimeInputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterTimeOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterTimestampDayIsAlways24h {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterTimestampInputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterTimestampLtzOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterTimestampNtzOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterTimestampOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterTimestampTypeMapping {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterTimestampTzOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterTimezone {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterTraceLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterTransactionAbortOnError {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterTransactionDefaultIsolationLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterTwoDigitCenturyStart {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterUnsupportedDdlAction {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterUseCachedResult {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterWeekOfYearPolicy {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserParameterWeekStart {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetUsersUserShowOutput {
    comment: string;
    createdOn: string;
    daysToExpiry: string;
    defaultNamespace: string;
    defaultRole: string;
    defaultSecondaryRoles: string;
    defaultWarehouse: string;
    disabled: boolean;
    displayName: string;
    email: string;
    expiresAtTime: string;
    extAuthnDuo: boolean;
    extAuthnUid: string;
    firstName: string;
    hasMfa: boolean;
    hasPassword: boolean;
    hasRsaPublicKey: boolean;
    lastName: string;
    lastSuccessLogin: string;
    lockedUntilTime: string;
    loginName: string;
    minsToBypassMfa: string;
    minsToUnlock: string;
    mustChangePassword: boolean;
    name: string;
    owner: string;
    snowflakeLock: boolean;
    type: string;
}

export interface GetViewsIn {
    /**
     * Returns records for the entire account.
     */
    account?: boolean;
    /**
     * Returns records for the current database in use or for a specified database.
     */
    database?: string;
    /**
     * Returns records for the current schema in use or a specified schema. Use fully qualified name.
     */
    schema?: string;
}

export interface GetViewsLimit {
    /**
     * Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.
     */
    from?: string;
    /**
     * The maximum number of rows to return.
     */
    rows: number;
}

export interface GetViewsView {
    /**
     * Holds the output of DESCRIBE VIEW.
     */
    describeOutputs: outputs.GetViewsViewDescribeOutput[];
    /**
     * Holds the output of SHOW VIEWS.
     */
    showOutputs: outputs.GetViewsViewShowOutput[];
}

export interface GetViewsViewDescribeOutput {
    check: string;
    comment: string;
    default: string;
    expression: string;
    isNullable: boolean;
    isPrimary: boolean;
    isUnique: boolean;
    kind: string;
    name: string;
    policyName: string;
    privacyDomain: string;
    type: string;
}

export interface GetViewsViewShowOutput {
    changeTracking: string;
    comment: string;
    createdOn: string;
    databaseName: string;
    isMaterialized: boolean;
    isSecure: boolean;
    kind: string;
    name: string;
    owner: string;
    ownerRoleType: string;
    reserved: string;
    schemaName: string;
    text: string;
}

export interface GetWarehousesWarehouse {
    /**
     * Holds the output of DESCRIBE WAREHOUSE.
     */
    describeOutputs: outputs.GetWarehousesWarehouseDescribeOutput[];
    /**
     * Holds the output of SHOW PARAMETERS FOR WAREHOUSE.
     */
    parameters: outputs.GetWarehousesWarehouseParameter[];
    /**
     * Holds the output of SHOW WAREHOUSES.
     */
    showOutputs: outputs.GetWarehousesWarehouseShowOutput[];
}

export interface GetWarehousesWarehouseDescribeOutput {
    createdOn: string;
    kind: string;
    name: string;
}

export interface GetWarehousesWarehouseParameter {
    maxConcurrencyLevels: outputs.GetWarehousesWarehouseParameterMaxConcurrencyLevel[];
    statementQueuedTimeoutInSeconds: outputs.GetWarehousesWarehouseParameterStatementQueuedTimeoutInSecond[];
    statementTimeoutInSeconds: outputs.GetWarehousesWarehouseParameterStatementTimeoutInSecond[];
}

export interface GetWarehousesWarehouseParameterMaxConcurrencyLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetWarehousesWarehouseParameterStatementQueuedTimeoutInSecond {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetWarehousesWarehouseParameterStatementTimeoutInSecond {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface GetWarehousesWarehouseShowOutput {
    autoResume: boolean;
    autoSuspend: number;
    available: number;
    comment: string;
    createdOn: string;
    enableQueryAcceleration: boolean;
    isCurrent: boolean;
    isDefault: boolean;
    maxClusterCount: number;
    minClusterCount: number;
    name: string;
    other: number;
    owner: string;
    ownerRoleType: string;
    provisioning: number;
    queryAccelerationMaxScaleFactor: number;
    queued: number;
    quiescing: number;
    resourceMonitor: string;
    resumedOn: string;
    running: number;
    scalingPolicy: string;
    size: string;
    startedClusters: number;
    state: string;
    type: string;
    updatedOn: string;
}

export interface GrantOwnershipOn {
    /**
     * Configures the privilege to be granted on all objects in either a database or schema.
     */
    all?: outputs.GrantOwnershipOnAll;
    /**
     * Configures the privilege to be granted on all objects in either a database or schema.
     */
    future?: outputs.GrantOwnershipOnFuture;
    /**
     * Specifies the identifier for the object on which you are transferring ownership.
     */
    objectName?: string;
    /**
     * Specifies the type of object on which you are transferring ownership. Available values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | COMPUTE POOL | DATA METRIC FUNCTION | DATABASE | DATABASE ROLE | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | EXTERNAL VOLUME | FAILOVER GROUP | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | ICEBERG TABLE | IMAGE REPOSITORY | INTEGRATION | MATERIALIZED VIEW | NETWORK POLICY | NETWORK RULE | PACKAGES POLICY | PIPE | PROCEDURE | MASKING POLICY | PASSWORD POLICY | PROJECTION POLICY | REPLICATION GROUP | RESOURCE MONITOR | ROLE | ROW ACCESS POLICY | SCHEMA | SESSION POLICY | SECRET | SEQUENCE | STAGE | STREAM | TABLE | TAG | TASK | USER | VIEW | WAREHOUSE
     */
    objectType?: string;
}

export interface GrantOwnershipOnAll {
    /**
     * The fully qualified name of the database. For more information about this resource, see docs.
     */
    inDatabase?: string;
    /**
     * The fully qualified name of the schema. For more information about this resource, see docs.
     */
    inSchema?: string;
    /**
     * Specifies the type of object in plural form on which you are transferring ownership. Available values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | COMPUTE POOLS | DATA METRIC FUNCTIONS | DATABASES | DATABASE ROLES | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | EXTERNAL VOLUMES | FAILOVER GROUPS | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | IMAGE REPOSITORIES | INTEGRATIONS | MATERIALIZED VIEWS | NETWORK POLICIES | NETWORK RULES | PACKAGES POLICIES | PIPES | PROCEDURES | MASKING POLICIES | PASSWORD POLICIES | PROJECTION POLICIES | REPLICATION GROUPS | RESOURCE MONITORS | ROLES | ROW ACCESS POLICIES | SCHEMAS | SESSION POLICIES | SECRETS | SEQUENCES | STAGES | STREAMS | TABLES | TAGS | TASKS | USERS | VIEWS | WAREHOUSES. For more information head over to [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#required-parameters).
     */
    objectTypePlural: string;
}

export interface GrantOwnershipOnFuture {
    /**
     * The fully qualified name of the database. For more information about this resource, see docs.
     */
    inDatabase?: string;
    /**
     * The fully qualified name of the schema. For more information about this resource, see docs.
     */
    inSchema?: string;
    /**
     * Specifies the type of object in plural form on which you are transferring ownership. Available values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | COMPUTE POOLS | DATA METRIC FUNCTIONS | DATABASES | DATABASE ROLES | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | EXTERNAL VOLUMES | FAILOVER GROUPS | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | IMAGE REPOSITORIES | INTEGRATIONS | MATERIALIZED VIEWS | NETWORK POLICIES | NETWORK RULES | PACKAGES POLICIES | PIPES | PROCEDURES | MASKING POLICIES | PASSWORD POLICIES | PROJECTION POLICIES | REPLICATION GROUPS | RESOURCE MONITORS | ROLES | ROW ACCESS POLICIES | SCHEMAS | SESSION POLICIES | SECRETS | SEQUENCES | STAGES | STREAMS | TABLES | TAGS | TASKS | USERS | VIEWS | WAREHOUSES. For more information head over to [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#required-parameters).
     */
    objectTypePlural: string;
}

export interface GrantPrivilegesToAccountRoleOnAccountObject {
    /**
     * The fully qualified name of the object on which privileges will be granted.
     */
    objectName: string;
    /**
     * The object type of the account object on which privileges will be granted. Valid values are: USER | RESOURCE MONITOR | WAREHOUSE | COMPUTE POOL | DATABASE | INTEGRATION | FAILOVER GROUP | REPLICATION GROUP | EXTERNAL VOLUME
     */
    objectType: string;
}

export interface GrantPrivilegesToAccountRoleOnSchema {
    /**
     * The fully qualified name of the database.
     */
    allSchemasInDatabase?: string;
    /**
     * The fully qualified name of the database.
     */
    futureSchemasInDatabase?: string;
    /**
     * The fully qualified name of the schema.
     */
    schemaName?: string;
}

export interface GrantPrivilegesToAccountRoleOnSchemaObject {
    /**
     * Configures the privilege to be granted on all objects in either a database or schema.
     */
    all?: outputs.GrantPrivilegesToAccountRoleOnSchemaObjectAll;
    /**
     * Configures the privilege to be granted on future objects in either a database or schema.
     */
    future?: outputs.GrantPrivilegesToAccountRoleOnSchemaObjectFuture;
    /**
     * The fully qualified name of the object on which privileges will be granted.
     */
    objectName?: string;
    /**
     * The object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | CORTEX SEARCH SERVICE | DATA METRIC FUNCTION | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | IMAGE REPOSITORY | ICEBERG TABLE | MASKING POLICY | MATERIALIZED VIEW | MODEL | NETWORK RULE | NOTEBOOK | PACKAGES POLICY | PASSWORD POLICY | PIPE | PROCEDURE | PROJECTION POLICY | ROW ACCESS POLICY | SECRET | SERVICE | SESSION POLICY | SEQUENCE | SNAPSHOT | STAGE | STREAM | TABLE | TAG | TASK | VIEW | STREAMLIT | DATASET
     */
    objectType?: string;
}

export interface GrantPrivilegesToAccountRoleOnSchemaObjectAll {
    inDatabase?: string;
    inSchema?: string;
    /**
     * The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.
     */
    objectTypePlural: string;
}

export interface GrantPrivilegesToAccountRoleOnSchemaObjectFuture {
    inDatabase?: string;
    inSchema?: string;
    /**
     * The plural object type of the schema object on which privileges will be granted. Valid values are: ALERTS | AUTHENTICATION POLICIES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PASSWORD POLICIES | PIPES | PROCEDURES | SECRETS | SERVICES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TASKS | VIEWS | STREAMLITS | DATASETS.
     */
    objectTypePlural: string;
}

export interface GrantPrivilegesToDatabaseRoleOnSchema {
    /**
     * The fully qualified name of the database.
     */
    allSchemasInDatabase?: string;
    /**
     * The fully qualified name of the database.
     */
    futureSchemasInDatabase?: string;
    /**
     * The fully qualified name of the schema.
     */
    schemaName?: string;
}

export interface GrantPrivilegesToDatabaseRoleOnSchemaObject {
    /**
     * Configures the privilege to be granted on all objects in either a database or schema.
     */
    all?: outputs.GrantPrivilegesToDatabaseRoleOnSchemaObjectAll;
    /**
     * Configures the privilege to be granted on future objects in either a database or schema.
     */
    future?: outputs.GrantPrivilegesToDatabaseRoleOnSchemaObjectFuture;
    /**
     * The fully qualified name of the object on which privileges will be granted.
     */
    objectName?: string;
    /**
     * The object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | CORTEX SEARCH SERVICE | DATA METRIC FUNCTION | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | IMAGE REPOSITORY | ICEBERG TABLE | MASKING POLICY | MATERIALIZED VIEW | MODEL | NETWORK RULE | NOTEBOOK | PACKAGES POLICY | PASSWORD POLICY | PIPE | PROCEDURE | PROJECTION POLICY | ROW ACCESS POLICY | SECRET | SERVICE | SESSION POLICY | SEQUENCE | SNAPSHOT | STAGE | STREAM | TABLE | TAG | TASK | VIEW | STREAMLIT | DATASET
     */
    objectType?: string;
}

export interface GrantPrivilegesToDatabaseRoleOnSchemaObjectAll {
    /**
     * The fully qualified name of the database.
     */
    inDatabase?: string;
    /**
     * The fully qualified name of the schema.
     */
    inSchema?: string;
    /**
     * The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.
     */
    objectTypePlural: string;
}

export interface GrantPrivilegesToDatabaseRoleOnSchemaObjectFuture {
    /**
     * The fully qualified name of the database.
     */
    inDatabase?: string;
    /**
     * The fully qualified name of the schema.
     */
    inSchema?: string;
    /**
     * The plural object type of the schema object on which privileges will be granted. Valid values are: ALERTS | AUTHENTICATION POLICIES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PASSWORD POLICIES | PIPES | PROCEDURES | SECRETS | SERVICES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TASKS | VIEWS | STREAMLITS | DATASETS.
     */
    objectTypePlural: string;
}

export interface LegacyServiceUserParameter {
    abortDetachedQueries: outputs.LegacyServiceUserParameterAbortDetachedQuery[];
    autocommits: outputs.LegacyServiceUserParameterAutocommit[];
    binaryInputFormats: outputs.LegacyServiceUserParameterBinaryInputFormat[];
    binaryOutputFormats: outputs.LegacyServiceUserParameterBinaryOutputFormat[];
    clientMemoryLimits: outputs.LegacyServiceUserParameterClientMemoryLimit[];
    clientMetadataRequestUseConnectionCtxes: outputs.LegacyServiceUserParameterClientMetadataRequestUseConnectionCtx[];
    clientPrefetchThreads: outputs.LegacyServiceUserParameterClientPrefetchThread[];
    clientResultChunkSizes: outputs.LegacyServiceUserParameterClientResultChunkSize[];
    clientResultColumnCaseInsensitives: outputs.LegacyServiceUserParameterClientResultColumnCaseInsensitive[];
    clientSessionKeepAliveHeartbeatFrequencies: outputs.LegacyServiceUserParameterClientSessionKeepAliveHeartbeatFrequency[];
    clientSessionKeepAlives: outputs.LegacyServiceUserParameterClientSessionKeepAlife[];
    clientTimestampTypeMappings: outputs.LegacyServiceUserParameterClientTimestampTypeMapping[];
    dateInputFormats: outputs.LegacyServiceUserParameterDateInputFormat[];
    dateOutputFormats: outputs.LegacyServiceUserParameterDateOutputFormat[];
    enableUnloadPhysicalTypeOptimizations: outputs.LegacyServiceUserParameterEnableUnloadPhysicalTypeOptimization[];
    enableUnredactedQuerySyntaxErrors: outputs.LegacyServiceUserParameterEnableUnredactedQuerySyntaxError[];
    errorOnNondeterministicMerges: outputs.LegacyServiceUserParameterErrorOnNondeterministicMerge[];
    errorOnNondeterministicUpdates: outputs.LegacyServiceUserParameterErrorOnNondeterministicUpdate[];
    geographyOutputFormats: outputs.LegacyServiceUserParameterGeographyOutputFormat[];
    geometryOutputFormats: outputs.LegacyServiceUserParameterGeometryOutputFormat[];
    jdbcTreatDecimalAsInts: outputs.LegacyServiceUserParameterJdbcTreatDecimalAsInt[];
    jdbcTreatTimestampNtzAsUtcs: outputs.LegacyServiceUserParameterJdbcTreatTimestampNtzAsUtc[];
    jdbcUseSessionTimezones: outputs.LegacyServiceUserParameterJdbcUseSessionTimezone[];
    jsonIndents: outputs.LegacyServiceUserParameterJsonIndent[];
    lockTimeouts: outputs.LegacyServiceUserParameterLockTimeout[];
    logLevels: outputs.LegacyServiceUserParameterLogLevel[];
    multiStatementCounts: outputs.LegacyServiceUserParameterMultiStatementCount[];
    networkPolicies: outputs.LegacyServiceUserParameterNetworkPolicy[];
    noorderSequenceAsDefaults: outputs.LegacyServiceUserParameterNoorderSequenceAsDefault[];
    odbcTreatDecimalAsInts: outputs.LegacyServiceUserParameterOdbcTreatDecimalAsInt[];
    preventUnloadToInternalStages: outputs.LegacyServiceUserParameterPreventUnloadToInternalStage[];
    queryTags: outputs.LegacyServiceUserParameterQueryTag[];
    quotedIdentifiersIgnoreCases: outputs.LegacyServiceUserParameterQuotedIdentifiersIgnoreCase[];
    rowsPerResultsets: outputs.LegacyServiceUserParameterRowsPerResultset[];
    s3StageVpceDnsNames: outputs.LegacyServiceUserParameterS3StageVpceDnsName[];
    searchPaths: outputs.LegacyServiceUserParameterSearchPath[];
    simulatedDataSharingConsumers: outputs.LegacyServiceUserParameterSimulatedDataSharingConsumer[];
    statementQueuedTimeoutInSeconds: outputs.LegacyServiceUserParameterStatementQueuedTimeoutInSecond[];
    statementTimeoutInSeconds: outputs.LegacyServiceUserParameterStatementTimeoutInSecond[];
    strictJsonOutputs: outputs.LegacyServiceUserParameterStrictJsonOutput[];
    timeInputFormats: outputs.LegacyServiceUserParameterTimeInputFormat[];
    timeOutputFormats: outputs.LegacyServiceUserParameterTimeOutputFormat[];
    timestampDayIsAlways24hs: outputs.LegacyServiceUserParameterTimestampDayIsAlways24h[];
    timestampInputFormats: outputs.LegacyServiceUserParameterTimestampInputFormat[];
    timestampLtzOutputFormats: outputs.LegacyServiceUserParameterTimestampLtzOutputFormat[];
    timestampNtzOutputFormats: outputs.LegacyServiceUserParameterTimestampNtzOutputFormat[];
    timestampOutputFormats: outputs.LegacyServiceUserParameterTimestampOutputFormat[];
    timestampTypeMappings: outputs.LegacyServiceUserParameterTimestampTypeMapping[];
    timestampTzOutputFormats: outputs.LegacyServiceUserParameterTimestampTzOutputFormat[];
    timezones: outputs.LegacyServiceUserParameterTimezone[];
    traceLevels: outputs.LegacyServiceUserParameterTraceLevel[];
    transactionAbortOnErrors: outputs.LegacyServiceUserParameterTransactionAbortOnError[];
    transactionDefaultIsolationLevels: outputs.LegacyServiceUserParameterTransactionDefaultIsolationLevel[];
    twoDigitCenturyStarts: outputs.LegacyServiceUserParameterTwoDigitCenturyStart[];
    unsupportedDdlActions: outputs.LegacyServiceUserParameterUnsupportedDdlAction[];
    useCachedResults: outputs.LegacyServiceUserParameterUseCachedResult[];
    weekOfYearPolicies: outputs.LegacyServiceUserParameterWeekOfYearPolicy[];
    weekStarts: outputs.LegacyServiceUserParameterWeekStart[];
}

export interface LegacyServiceUserParameterAbortDetachedQuery {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterAutocommit {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterBinaryInputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterBinaryOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterClientMemoryLimit {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterClientMetadataRequestUseConnectionCtx {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterClientPrefetchThread {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterClientResultChunkSize {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterClientResultColumnCaseInsensitive {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterClientSessionKeepAlife {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterClientSessionKeepAliveHeartbeatFrequency {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterClientTimestampTypeMapping {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterDateInputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterDateOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterEnableUnloadPhysicalTypeOptimization {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterEnableUnredactedQuerySyntaxError {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterErrorOnNondeterministicMerge {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterErrorOnNondeterministicUpdate {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterGeographyOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterGeometryOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterJdbcTreatDecimalAsInt {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterJdbcTreatTimestampNtzAsUtc {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterJdbcUseSessionTimezone {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterJsonIndent {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterLockTimeout {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterLogLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterMultiStatementCount {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterNetworkPolicy {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterNoorderSequenceAsDefault {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterOdbcTreatDecimalAsInt {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterPreventUnloadToInternalStage {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterQueryTag {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterQuotedIdentifiersIgnoreCase {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterRowsPerResultset {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterS3StageVpceDnsName {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterSearchPath {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterSimulatedDataSharingConsumer {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterStatementQueuedTimeoutInSecond {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterStatementTimeoutInSecond {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterStrictJsonOutput {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterTimeInputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterTimeOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterTimestampDayIsAlways24h {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterTimestampInputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterTimestampLtzOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterTimestampNtzOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterTimestampOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterTimestampTypeMapping {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterTimestampTzOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterTimezone {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterTraceLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterTransactionAbortOnError {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterTransactionDefaultIsolationLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterTwoDigitCenturyStart {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterUnsupportedDdlAction {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterUseCachedResult {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterWeekOfYearPolicy {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserParameterWeekStart {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface LegacyServiceUserShowOutput {
    comment: string;
    createdOn: string;
    daysToExpiry: string;
    defaultNamespace: string;
    defaultRole: string;
    defaultSecondaryRoles: string;
    defaultWarehouse: string;
    disabled: boolean;
    displayName: string;
    email: string;
    expiresAtTime: string;
    extAuthnDuo: boolean;
    extAuthnUid: string;
    firstName: string;
    hasMfa: boolean;
    hasPassword: boolean;
    hasRsaPublicKey: boolean;
    lastName: string;
    lastSuccessLogin: string;
    lockedUntilTime: string;
    loginName: string;
    minsToBypassMfa: string;
    minsToUnlock: string;
    mustChangePassword: boolean;
    name: string;
    owner: string;
    snowflakeLock: boolean;
    type: string;
}

export interface MaskingPolicyArgument {
    /**
     * The argument name
     */
    name: string;
    /**
     * The argument type. VECTOR data types are not yet supported. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
     */
    type: string;
}

export interface MaskingPolicyDescribeOutput {
    body: string;
    name: string;
    returnType: string;
    signatures: outputs.MaskingPolicyDescribeOutputSignature[];
}

export interface MaskingPolicyDescribeOutputSignature {
    name: string;
    type: string;
}

export interface MaskingPolicyShowOutput {
    comment: string;
    createdOn: string;
    databaseName: string;
    exemptOtherPolicies: boolean;
    kind: string;
    name: string;
    owner: string;
    ownerRoleType: string;
    schemaName: string;
}

export interface MaterializedViewTag {
    /**
     * Name of the database that the tag was created in.
     */
    database?: string;
    /**
     * Tag name, e.g. department.
     */
    name: string;
    /**
     * Name of the schema that the tag was created in.
     */
    schema?: string;
    /**
     * Tag value, e.g. marketing_info.
     */
    value: string;
}

export interface NetworkPolicyDescribeOutput {
    allowedIpList: string;
    allowedNetworkRuleList: string;
    blockedIpList: string;
    blockedNetworkRuleList: string;
}

export interface NetworkPolicyShowOutput {
    comment: string;
    createdOn: string;
    entriesInAllowedIpList: number;
    entriesInAllowedNetworkRules: number;
    entriesInBlockedIpList: number;
    entriesInBlockedNetworkRules: number;
    name: string;
}

export interface OauthIntegrationForCustomClientsDescribeOutput {
    blockedRolesLists: outputs.OauthIntegrationForCustomClientsDescribeOutputBlockedRolesList[];
    comments: outputs.OauthIntegrationForCustomClientsDescribeOutputComment[];
    enableds: outputs.OauthIntegrationForCustomClientsDescribeOutputEnabled[];
    networkPolicies: outputs.OauthIntegrationForCustomClientsDescribeOutputNetworkPolicy[];
    oauthAllowNonTlsRedirectUris: outputs.OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUri[];
    oauthAllowedAuthorizationEndpoints: outputs.OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpoint[];
    oauthAllowedTokenEndpoints: outputs.OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpoint[];
    oauthAuthorizationEndpoints: outputs.OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpoint[];
    oauthClientRsaPublicKey2Fps: outputs.OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2Fp[];
    oauthClientRsaPublicKeyFps: outputs.OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFp[];
    oauthClientTypes: outputs.OauthIntegrationForCustomClientsDescribeOutputOauthClientType[];
    oauthEnforcePkces: outputs.OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkce[];
    oauthIssueRefreshTokens: outputs.OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshToken[];
    oauthRefreshTokenValidities: outputs.OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidity[];
    oauthTokenEndpoints: outputs.OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpoint[];
    oauthUseSecondaryRoles: outputs.OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRole[];
    preAuthorizedRolesLists: outputs.OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesList[];
}

export interface OauthIntegrationForCustomClientsDescribeOutputBlockedRolesList {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForCustomClientsDescribeOutputComment {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForCustomClientsDescribeOutputEnabled {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForCustomClientsDescribeOutputNetworkPolicy {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUri {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpoint {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpoint {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpoint {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2Fp {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFp {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForCustomClientsDescribeOutputOauthClientType {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkce {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshToken {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidity {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpoint {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRole {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesList {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForCustomClientsRelatedParameter {
    oauthAddPrivilegedRolesToBlockedLists: outputs.OauthIntegrationForCustomClientsRelatedParameterOauthAddPrivilegedRolesToBlockedList[];
}

export interface OauthIntegrationForCustomClientsRelatedParameterOauthAddPrivilegedRolesToBlockedList {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface OauthIntegrationForCustomClientsShowOutput {
    category: string;
    comment: string;
    createdOn: string;
    enabled: boolean;
    integrationType: string;
    name: string;
}

export interface OauthIntegrationForPartnerApplicationsDescribeOutput {
    blockedRolesLists: outputs.OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesList[];
    comments: outputs.OauthIntegrationForPartnerApplicationsDescribeOutputComment[];
    enableds: outputs.OauthIntegrationForPartnerApplicationsDescribeOutputEnabled[];
    networkPolicies: outputs.OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicy[];
    oauthAllowNonTlsRedirectUris: outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUri[];
    oauthAllowedAuthorizationEndpoints: outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpoint[];
    oauthAllowedTokenEndpoints: outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpoint[];
    oauthAuthorizationEndpoints: outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpoint[];
    oauthClientRsaPublicKey2Fps: outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2Fp[];
    oauthClientRsaPublicKeyFps: outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFp[];
    oauthClientTypes: outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientType[];
    oauthEnforcePkces: outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkce[];
    oauthIssueRefreshTokens: outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshToken[];
    oauthRefreshTokenValidities: outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidity[];
    oauthTokenEndpoints: outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpoint[];
    oauthUseSecondaryRoles: outputs.OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRole[];
    preAuthorizedRolesLists: outputs.OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesList[];
}

export interface OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesList {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForPartnerApplicationsDescribeOutputComment {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForPartnerApplicationsDescribeOutputEnabled {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicy {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUri {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpoint {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpoint {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpoint {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2Fp {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFp {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientType {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkce {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshToken {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidity {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpoint {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRole {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesList {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface OauthIntegrationForPartnerApplicationsRelatedParameter {
    oauthAddPrivilegedRolesToBlockedLists: outputs.OauthIntegrationForPartnerApplicationsRelatedParameterOauthAddPrivilegedRolesToBlockedList[];
}

export interface OauthIntegrationForPartnerApplicationsRelatedParameterOauthAddPrivilegedRolesToBlockedList {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface OauthIntegrationForPartnerApplicationsShowOutput {
    category: string;
    comment: string;
    createdOn: string;
    enabled: boolean;
    integrationType: string;
    name: string;
}

export interface ObjectParameterObjectIdentifier {
    /**
     * Name of the database that the object was created in.
     */
    database?: string;
    /**
     * Name of the object to set the parameter for.
     */
    name: string;
    /**
     * Name of the schema that the object was created in.
     */
    schema?: string;
}

export interface PrimaryConnectionShowOutput {
    accountLocator: string;
    accountName: string;
    comment: string;
    connectionUrl: string;
    createdOn: string;
    failoverAllowedToAccounts: string[];
    isPrimary: boolean;
    name: string;
    organizationName: string;
    primary: string;
    regionGroup: string;
    snowflakeRegion: string;
}

export interface ProcedureJavaArgument {
    /**
     * The argument type.
     */
    argDataType: string;
    argDefaultValue?: string;
    /**
     * The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the procedure definition.
     */
    argName: string;
}

export interface ProcedureJavaImport {
    /**
     * Path for import on stage, without the leading `/`.
     */
    pathOnStage: string;
    stageLocation: string;
}

export interface ProcedureJavaParameter {
    enableConsoleOutputs: outputs.ProcedureJavaParameterEnableConsoleOutput[];
    logLevels: outputs.ProcedureJavaParameterLogLevel[];
    metricLevels: outputs.ProcedureJavaParameterMetricLevel[];
    traceLevels: outputs.ProcedureJavaParameterTraceLevel[];
}

export interface ProcedureJavaParameterEnableConsoleOutput {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ProcedureJavaParameterLogLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ProcedureJavaParameterMetricLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ProcedureJavaParameterTraceLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ProcedureJavaSecret {
    /**
     * Fully qualified name of the allowed [secret](https://docs.snowflake.com/en/sql-reference/sql/create-secret). You will receive an error if you specify a SECRETS value whose secret isn’t also included in an integration specified by the EXTERNAL*ACCESS*INTEGRATIONS parameter.
     */
    secretId: string;
    /**
     * The variable that will be used in handler code when retrieving information from the secret.
     */
    secretVariableName: string;
}

export interface ProcedureJavaShowOutput {
    argumentsRaw: string;
    catalogName: string;
    createdOn: string;
    description: string;
    externalAccessIntegrations: string;
    isAggregate: boolean;
    isAnsi: boolean;
    isBuiltin: boolean;
    isSecure: boolean;
    isTableFunction: boolean;
    maxNumArguments: number;
    minNumArguments: number;
    name: string;
    schemaName: string;
    secrets: string;
    validForClustering: boolean;
}

export interface ProcedureJavaTargetPath {
    /**
     * Path for import on stage, without the leading `/`.
     */
    pathOnStage: string;
    stageLocation: string;
}

export interface ProcedureJavascriptArgument {
    /**
     * The argument type.
     */
    argDataType: string;
    argDefaultValue?: string;
    /**
     * The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the procedure definition.
     */
    argName: string;
}

export interface ProcedureJavascriptParameter {
    enableConsoleOutputs: outputs.ProcedureJavascriptParameterEnableConsoleOutput[];
    logLevels: outputs.ProcedureJavascriptParameterLogLevel[];
    metricLevels: outputs.ProcedureJavascriptParameterMetricLevel[];
    traceLevels: outputs.ProcedureJavascriptParameterTraceLevel[];
}

export interface ProcedureJavascriptParameterEnableConsoleOutput {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ProcedureJavascriptParameterLogLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ProcedureJavascriptParameterMetricLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ProcedureJavascriptParameterTraceLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ProcedureJavascriptShowOutput {
    argumentsRaw: string;
    catalogName: string;
    createdOn: string;
    description: string;
    externalAccessIntegrations: string;
    isAggregate: boolean;
    isAnsi: boolean;
    isBuiltin: boolean;
    isSecure: boolean;
    isTableFunction: boolean;
    maxNumArguments: number;
    minNumArguments: number;
    name: string;
    schemaName: string;
    secrets: string;
    validForClustering: boolean;
}

export interface ProcedurePythonArgument {
    /**
     * The argument type.
     */
    argDataType: string;
    argDefaultValue?: string;
    /**
     * The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the procedure definition.
     */
    argName: string;
}

export interface ProcedurePythonImport {
    /**
     * Path for import on stage, without the leading `/`.
     */
    pathOnStage: string;
    stageLocation: string;
}

export interface ProcedurePythonParameter {
    enableConsoleOutputs: outputs.ProcedurePythonParameterEnableConsoleOutput[];
    logLevels: outputs.ProcedurePythonParameterLogLevel[];
    metricLevels: outputs.ProcedurePythonParameterMetricLevel[];
    traceLevels: outputs.ProcedurePythonParameterTraceLevel[];
}

export interface ProcedurePythonParameterEnableConsoleOutput {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ProcedurePythonParameterLogLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ProcedurePythonParameterMetricLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ProcedurePythonParameterTraceLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ProcedurePythonSecret {
    /**
     * Fully qualified name of the allowed [secret](https://docs.snowflake.com/en/sql-reference/sql/create-secret). You will receive an error if you specify a SECRETS value whose secret isn’t also included in an integration specified by the EXTERNAL*ACCESS*INTEGRATIONS parameter.
     */
    secretId: string;
    /**
     * The variable that will be used in handler code when retrieving information from the secret.
     */
    secretVariableName: string;
}

export interface ProcedurePythonShowOutput {
    argumentsRaw: string;
    catalogName: string;
    createdOn: string;
    description: string;
    externalAccessIntegrations: string;
    isAggregate: boolean;
    isAnsi: boolean;
    isBuiltin: boolean;
    isSecure: boolean;
    isTableFunction: boolean;
    maxNumArguments: number;
    minNumArguments: number;
    name: string;
    schemaName: string;
    secrets: string;
    validForClustering: boolean;
}

export interface ProcedureScalaArgument {
    /**
     * The argument type.
     */
    argDataType: string;
    argDefaultValue?: string;
    /**
     * The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the procedure definition.
     */
    argName: string;
}

export interface ProcedureScalaImport {
    /**
     * Path for import on stage, without the leading `/`.
     */
    pathOnStage: string;
    stageLocation: string;
}

export interface ProcedureScalaParameter {
    enableConsoleOutputs: outputs.ProcedureScalaParameterEnableConsoleOutput[];
    logLevels: outputs.ProcedureScalaParameterLogLevel[];
    metricLevels: outputs.ProcedureScalaParameterMetricLevel[];
    traceLevels: outputs.ProcedureScalaParameterTraceLevel[];
}

export interface ProcedureScalaParameterEnableConsoleOutput {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ProcedureScalaParameterLogLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ProcedureScalaParameterMetricLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ProcedureScalaParameterTraceLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ProcedureScalaSecret {
    /**
     * Fully qualified name of the allowed [secret](https://docs.snowflake.com/en/sql-reference/sql/create-secret). You will receive an error if you specify a SECRETS value whose secret isn’t also included in an integration specified by the EXTERNAL*ACCESS*INTEGRATIONS parameter.
     */
    secretId: string;
    /**
     * The variable that will be used in handler code when retrieving information from the secret.
     */
    secretVariableName: string;
}

export interface ProcedureScalaShowOutput {
    argumentsRaw: string;
    catalogName: string;
    createdOn: string;
    description: string;
    externalAccessIntegrations: string;
    isAggregate: boolean;
    isAnsi: boolean;
    isBuiltin: boolean;
    isSecure: boolean;
    isTableFunction: boolean;
    maxNumArguments: number;
    minNumArguments: number;
    name: string;
    schemaName: string;
    secrets: string;
    validForClustering: boolean;
}

export interface ProcedureScalaTargetPath {
    /**
     * Path for import on stage, without the leading `/`.
     */
    pathOnStage: string;
    stageLocation: string;
}

export interface ProcedureSqlArgument {
    /**
     * The argument type.
     */
    argDataType: string;
    argDefaultValue?: string;
    /**
     * The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the procedure definition.
     */
    argName: string;
}

export interface ProcedureSqlParameter {
    enableConsoleOutputs: outputs.ProcedureSqlParameterEnableConsoleOutput[];
    logLevels: outputs.ProcedureSqlParameterLogLevel[];
    metricLevels: outputs.ProcedureSqlParameterMetricLevel[];
    traceLevels: outputs.ProcedureSqlParameterTraceLevel[];
}

export interface ProcedureSqlParameterEnableConsoleOutput {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ProcedureSqlParameterLogLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ProcedureSqlParameterMetricLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ProcedureSqlParameterTraceLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ProcedureSqlShowOutput {
    argumentsRaw: string;
    catalogName: string;
    createdOn: string;
    description: string;
    externalAccessIntegrations: string;
    isAggregate: boolean;
    isAnsi: boolean;
    isBuiltin: boolean;
    isSecure: boolean;
    isTableFunction: boolean;
    maxNumArguments: number;
    minNumArguments: number;
    name: string;
    schemaName: string;
    secrets: string;
    validForClustering: boolean;
}

export interface ResourceMonitorShowOutput {
    comment: string;
    createdOn: string;
    creditQuota: number;
    endTime: string;
    frequency: string;
    level: string;
    name: string;
    owner: string;
    remainingCredits: number;
    startTime: string;
    suspendAt: number;
    suspendImmediateAt: number;
    usedCredits: number;
}

export interface RowAccessPolicyArgument {
    /**
     * The argument name
     */
    name: string;
    /**
     * The argument type. VECTOR data types are not yet supported. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
     */
    type: string;
}

export interface RowAccessPolicyDescribeOutput {
    body: string;
    name: string;
    returnType: string;
    signatures: outputs.RowAccessPolicyDescribeOutputSignature[];
}

export interface RowAccessPolicyDescribeOutputSignature {
    name: string;
    type: string;
}

export interface RowAccessPolicyShowOutput {
    comment: string;
    createdOn: string;
    databaseName: string;
    kind: string;
    name: string;
    options: string;
    owner: string;
    ownerRoleType: string;
    schemaName: string;
}

export interface Saml2IntegrationDescribeOutput {
    allowedEmailPatterns: outputs.Saml2IntegrationDescribeOutputAllowedEmailPattern[];
    allowedUserDomains: outputs.Saml2IntegrationDescribeOutputAllowedUserDomain[];
    comments: outputs.Saml2IntegrationDescribeOutputComment[];
    saml2DigestMethodsUseds: outputs.Saml2IntegrationDescribeOutputSaml2DigestMethodsUsed[];
    saml2EnableSpInitiateds: outputs.Saml2IntegrationDescribeOutputSaml2EnableSpInitiated[];
    saml2ForceAuthns: outputs.Saml2IntegrationDescribeOutputSaml2ForceAuthn[];
    saml2Issuers: outputs.Saml2IntegrationDescribeOutputSaml2Issuer[];
    saml2PostLogoutRedirectUrls: outputs.Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrl[];
    saml2Providers: outputs.Saml2IntegrationDescribeOutputSaml2Provider[];
    saml2RequestedNameidFormats: outputs.Saml2IntegrationDescribeOutputSaml2RequestedNameidFormat[];
    saml2SignRequests: outputs.Saml2IntegrationDescribeOutputSaml2SignRequest[];
    saml2SignatureMethodsUseds: outputs.Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsed[];
    saml2SnowflakeAcsUrls: outputs.Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrl[];
    saml2SnowflakeIssuerUrls: outputs.Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrl[];
    saml2SnowflakeMetadatas: outputs.Saml2IntegrationDescribeOutputSaml2SnowflakeMetadata[];
    saml2SpInitiatedLoginPageLabels: outputs.Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel[];
    saml2SsoUrls: outputs.Saml2IntegrationDescribeOutputSaml2SsoUrl[];
}

export interface Saml2IntegrationDescribeOutputAllowedEmailPattern {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface Saml2IntegrationDescribeOutputAllowedUserDomain {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface Saml2IntegrationDescribeOutputComment {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface Saml2IntegrationDescribeOutputSaml2DigestMethodsUsed {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface Saml2IntegrationDescribeOutputSaml2EnableSpInitiated {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface Saml2IntegrationDescribeOutputSaml2ForceAuthn {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface Saml2IntegrationDescribeOutputSaml2Issuer {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrl {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface Saml2IntegrationDescribeOutputSaml2Provider {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface Saml2IntegrationDescribeOutputSaml2RequestedNameidFormat {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface Saml2IntegrationDescribeOutputSaml2SignRequest {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsed {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrl {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrl {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface Saml2IntegrationDescribeOutputSaml2SnowflakeMetadata {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface Saml2IntegrationDescribeOutputSaml2SsoUrl {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface Saml2IntegrationShowOutput {
    category: string;
    comment: string;
    createdOn: string;
    enabled: boolean;
    integrationType: string;
    name: string;
}

export interface SchemaDescribeOutput {
    createdOn: string;
    kind: string;
    name: string;
}

export interface SchemaParameter {
    catalogs: outputs.SchemaParameterCatalog[];
    dataRetentionTimeInDays: outputs.SchemaParameterDataRetentionTimeInDay[];
    defaultDdlCollations: outputs.SchemaParameterDefaultDdlCollation[];
    enableConsoleOutputs: outputs.SchemaParameterEnableConsoleOutput[];
    externalVolumes: outputs.SchemaParameterExternalVolume[];
    logLevels: outputs.SchemaParameterLogLevel[];
    maxDataExtensionTimeInDays: outputs.SchemaParameterMaxDataExtensionTimeInDay[];
    pipeExecutionPauseds: outputs.SchemaParameterPipeExecutionPaused[];
    quotedIdentifiersIgnoreCases: outputs.SchemaParameterQuotedIdentifiersIgnoreCase[];
    replaceInvalidCharacters: outputs.SchemaParameterReplaceInvalidCharacter[];
    storageSerializationPolicies: outputs.SchemaParameterStorageSerializationPolicy[];
    suspendTaskAfterNumFailures: outputs.SchemaParameterSuspendTaskAfterNumFailure[];
    taskAutoRetryAttempts: outputs.SchemaParameterTaskAutoRetryAttempt[];
    traceLevels: outputs.SchemaParameterTraceLevel[];
    userTaskManagedInitialWarehouseSizes: outputs.SchemaParameterUserTaskManagedInitialWarehouseSize[];
    userTaskMinimumTriggerIntervalInSeconds: outputs.SchemaParameterUserTaskMinimumTriggerIntervalInSecond[];
    userTaskTimeoutMs: outputs.SchemaParameterUserTaskTimeoutM[];
}

export interface SchemaParameterCatalog {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface SchemaParameterDataRetentionTimeInDay {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface SchemaParameterDefaultDdlCollation {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface SchemaParameterEnableConsoleOutput {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface SchemaParameterExternalVolume {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface SchemaParameterLogLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface SchemaParameterMaxDataExtensionTimeInDay {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface SchemaParameterPipeExecutionPaused {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface SchemaParameterQuotedIdentifiersIgnoreCase {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface SchemaParameterReplaceInvalidCharacter {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface SchemaParameterStorageSerializationPolicy {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface SchemaParameterSuspendTaskAfterNumFailure {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface SchemaParameterTaskAutoRetryAttempt {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface SchemaParameterTraceLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface SchemaParameterUserTaskManagedInitialWarehouseSize {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface SchemaParameterUserTaskMinimumTriggerIntervalInSecond {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface SchemaParameterUserTaskTimeoutM {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface SchemaShowOutput {
    comment: string;
    createdOn: string;
    databaseName: string;
    droppedOn: string;
    isCurrent: boolean;
    isDefault: boolean;
    name: string;
    options: string;
    owner: string;
    ownerRoleType: string;
    retentionTime: string;
}

export interface ScimIntegrationDescribeOutput {
    comments: outputs.ScimIntegrationDescribeOutputComment[];
    enableds: outputs.ScimIntegrationDescribeOutputEnabled[];
    networkPolicies: outputs.ScimIntegrationDescribeOutputNetworkPolicy[];
    runAsRoles: outputs.ScimIntegrationDescribeOutputRunAsRole[];
    syncPasswords: outputs.ScimIntegrationDescribeOutputSyncPassword[];
}

export interface ScimIntegrationDescribeOutputComment {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ScimIntegrationDescribeOutputEnabled {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ScimIntegrationDescribeOutputNetworkPolicy {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ScimIntegrationDescribeOutputRunAsRole {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ScimIntegrationDescribeOutputSyncPassword {
    default: string;
    name: string;
    type: string;
    value: string;
}

export interface ScimIntegrationShowOutput {
    category: string;
    comment: string;
    createdOn: string;
    enabled: boolean;
    integrationType: string;
    name: string;
}

export interface SecondaryConnectionShowOutput {
    accountLocator: string;
    accountName: string;
    comment: string;
    connectionUrl: string;
    createdOn: string;
    failoverAllowedToAccounts: string[];
    isPrimary: boolean;
    name: string;
    organizationName: string;
    primary: string;
    regionGroup: string;
    snowflakeRegion: string;
}

export interface SecretWithAuthorizationCodeGrantDescribeOutput {
    comment: string;
    createdOn: string;
    databaseName: string;
    integrationName: string;
    name: string;
    oauthAccessTokenExpiryTime: string;
    oauthRefreshTokenExpiryTime: string;
    oauthScopes: string[];
    owner: string;
    schemaName: string;
    secretType: string;
    username: string;
}

export interface SecretWithAuthorizationCodeGrantShowOutput {
    comment: string;
    createdOn: string;
    databaseName: string;
    name: string;
    oauthScopes: string[];
    owner: string;
    ownerRoleType: string;
    schemaName: string;
    secretType: string;
}

export interface SecretWithBasicAuthenticationDescribeOutput {
    comment: string;
    createdOn: string;
    databaseName: string;
    integrationName: string;
    name: string;
    oauthAccessTokenExpiryTime: string;
    oauthRefreshTokenExpiryTime: string;
    oauthScopes: string[];
    owner: string;
    schemaName: string;
    secretType: string;
    username: string;
}

export interface SecretWithBasicAuthenticationShowOutput {
    comment: string;
    createdOn: string;
    databaseName: string;
    name: string;
    oauthScopes: string[];
    owner: string;
    ownerRoleType: string;
    schemaName: string;
    secretType: string;
}

export interface SecretWithClientCredentialsDescribeOutput {
    comment: string;
    createdOn: string;
    databaseName: string;
    integrationName: string;
    name: string;
    oauthAccessTokenExpiryTime: string;
    oauthRefreshTokenExpiryTime: string;
    oauthScopes: string[];
    owner: string;
    schemaName: string;
    secretType: string;
    username: string;
}

export interface SecretWithClientCredentialsShowOutput {
    comment: string;
    createdOn: string;
    databaseName: string;
    name: string;
    oauthScopes: string[];
    owner: string;
    ownerRoleType: string;
    schemaName: string;
    secretType: string;
}

export interface SecretWithGenericStringDescribeOutput {
    comment: string;
    createdOn: string;
    databaseName: string;
    integrationName: string;
    name: string;
    oauthAccessTokenExpiryTime: string;
    oauthRefreshTokenExpiryTime: string;
    oauthScopes: string[];
    owner: string;
    schemaName: string;
    secretType: string;
    username: string;
}

export interface SecretWithGenericStringShowOutput {
    comment: string;
    createdOn: string;
    databaseName: string;
    name: string;
    oauthScopes: string[];
    owner: string;
    ownerRoleType: string;
    schemaName: string;
    secretType: string;
}

export interface ServiceUserParameter {
    abortDetachedQueries: outputs.ServiceUserParameterAbortDetachedQuery[];
    autocommits: outputs.ServiceUserParameterAutocommit[];
    binaryInputFormats: outputs.ServiceUserParameterBinaryInputFormat[];
    binaryOutputFormats: outputs.ServiceUserParameterBinaryOutputFormat[];
    clientMemoryLimits: outputs.ServiceUserParameterClientMemoryLimit[];
    clientMetadataRequestUseConnectionCtxes: outputs.ServiceUserParameterClientMetadataRequestUseConnectionCtx[];
    clientPrefetchThreads: outputs.ServiceUserParameterClientPrefetchThread[];
    clientResultChunkSizes: outputs.ServiceUserParameterClientResultChunkSize[];
    clientResultColumnCaseInsensitives: outputs.ServiceUserParameterClientResultColumnCaseInsensitive[];
    clientSessionKeepAliveHeartbeatFrequencies: outputs.ServiceUserParameterClientSessionKeepAliveHeartbeatFrequency[];
    clientSessionKeepAlives: outputs.ServiceUserParameterClientSessionKeepAlife[];
    clientTimestampTypeMappings: outputs.ServiceUserParameterClientTimestampTypeMapping[];
    dateInputFormats: outputs.ServiceUserParameterDateInputFormat[];
    dateOutputFormats: outputs.ServiceUserParameterDateOutputFormat[];
    enableUnloadPhysicalTypeOptimizations: outputs.ServiceUserParameterEnableUnloadPhysicalTypeOptimization[];
    enableUnredactedQuerySyntaxErrors: outputs.ServiceUserParameterEnableUnredactedQuerySyntaxError[];
    errorOnNondeterministicMerges: outputs.ServiceUserParameterErrorOnNondeterministicMerge[];
    errorOnNondeterministicUpdates: outputs.ServiceUserParameterErrorOnNondeterministicUpdate[];
    geographyOutputFormats: outputs.ServiceUserParameterGeographyOutputFormat[];
    geometryOutputFormats: outputs.ServiceUserParameterGeometryOutputFormat[];
    jdbcTreatDecimalAsInts: outputs.ServiceUserParameterJdbcTreatDecimalAsInt[];
    jdbcTreatTimestampNtzAsUtcs: outputs.ServiceUserParameterJdbcTreatTimestampNtzAsUtc[];
    jdbcUseSessionTimezones: outputs.ServiceUserParameterJdbcUseSessionTimezone[];
    jsonIndents: outputs.ServiceUserParameterJsonIndent[];
    lockTimeouts: outputs.ServiceUserParameterLockTimeout[];
    logLevels: outputs.ServiceUserParameterLogLevel[];
    multiStatementCounts: outputs.ServiceUserParameterMultiStatementCount[];
    networkPolicies: outputs.ServiceUserParameterNetworkPolicy[];
    noorderSequenceAsDefaults: outputs.ServiceUserParameterNoorderSequenceAsDefault[];
    odbcTreatDecimalAsInts: outputs.ServiceUserParameterOdbcTreatDecimalAsInt[];
    preventUnloadToInternalStages: outputs.ServiceUserParameterPreventUnloadToInternalStage[];
    queryTags: outputs.ServiceUserParameterQueryTag[];
    quotedIdentifiersIgnoreCases: outputs.ServiceUserParameterQuotedIdentifiersIgnoreCase[];
    rowsPerResultsets: outputs.ServiceUserParameterRowsPerResultset[];
    s3StageVpceDnsNames: outputs.ServiceUserParameterS3StageVpceDnsName[];
    searchPaths: outputs.ServiceUserParameterSearchPath[];
    simulatedDataSharingConsumers: outputs.ServiceUserParameterSimulatedDataSharingConsumer[];
    statementQueuedTimeoutInSeconds: outputs.ServiceUserParameterStatementQueuedTimeoutInSecond[];
    statementTimeoutInSeconds: outputs.ServiceUserParameterStatementTimeoutInSecond[];
    strictJsonOutputs: outputs.ServiceUserParameterStrictJsonOutput[];
    timeInputFormats: outputs.ServiceUserParameterTimeInputFormat[];
    timeOutputFormats: outputs.ServiceUserParameterTimeOutputFormat[];
    timestampDayIsAlways24hs: outputs.ServiceUserParameterTimestampDayIsAlways24h[];
    timestampInputFormats: outputs.ServiceUserParameterTimestampInputFormat[];
    timestampLtzOutputFormats: outputs.ServiceUserParameterTimestampLtzOutputFormat[];
    timestampNtzOutputFormats: outputs.ServiceUserParameterTimestampNtzOutputFormat[];
    timestampOutputFormats: outputs.ServiceUserParameterTimestampOutputFormat[];
    timestampTypeMappings: outputs.ServiceUserParameterTimestampTypeMapping[];
    timestampTzOutputFormats: outputs.ServiceUserParameterTimestampTzOutputFormat[];
    timezones: outputs.ServiceUserParameterTimezone[];
    traceLevels: outputs.ServiceUserParameterTraceLevel[];
    transactionAbortOnErrors: outputs.ServiceUserParameterTransactionAbortOnError[];
    transactionDefaultIsolationLevels: outputs.ServiceUserParameterTransactionDefaultIsolationLevel[];
    twoDigitCenturyStarts: outputs.ServiceUserParameterTwoDigitCenturyStart[];
    unsupportedDdlActions: outputs.ServiceUserParameterUnsupportedDdlAction[];
    useCachedResults: outputs.ServiceUserParameterUseCachedResult[];
    weekOfYearPolicies: outputs.ServiceUserParameterWeekOfYearPolicy[];
    weekStarts: outputs.ServiceUserParameterWeekStart[];
}

export interface ServiceUserParameterAbortDetachedQuery {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterAutocommit {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterBinaryInputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterBinaryOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterClientMemoryLimit {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterClientMetadataRequestUseConnectionCtx {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterClientPrefetchThread {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterClientResultChunkSize {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterClientResultColumnCaseInsensitive {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterClientSessionKeepAlife {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterClientSessionKeepAliveHeartbeatFrequency {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterClientTimestampTypeMapping {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterDateInputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterDateOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterEnableUnloadPhysicalTypeOptimization {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterEnableUnredactedQuerySyntaxError {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterErrorOnNondeterministicMerge {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterErrorOnNondeterministicUpdate {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterGeographyOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterGeometryOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterJdbcTreatDecimalAsInt {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterJdbcTreatTimestampNtzAsUtc {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterJdbcUseSessionTimezone {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterJsonIndent {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterLockTimeout {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterLogLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterMultiStatementCount {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterNetworkPolicy {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterNoorderSequenceAsDefault {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterOdbcTreatDecimalAsInt {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterPreventUnloadToInternalStage {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterQueryTag {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterQuotedIdentifiersIgnoreCase {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterRowsPerResultset {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterS3StageVpceDnsName {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterSearchPath {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterSimulatedDataSharingConsumer {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterStatementQueuedTimeoutInSecond {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterStatementTimeoutInSecond {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterStrictJsonOutput {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterTimeInputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterTimeOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterTimestampDayIsAlways24h {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterTimestampInputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterTimestampLtzOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterTimestampNtzOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterTimestampOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterTimestampTypeMapping {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterTimestampTzOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterTimezone {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterTraceLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterTransactionAbortOnError {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterTransactionDefaultIsolationLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterTwoDigitCenturyStart {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterUnsupportedDdlAction {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterUseCachedResult {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterWeekOfYearPolicy {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserParameterWeekStart {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface ServiceUserShowOutput {
    comment: string;
    createdOn: string;
    daysToExpiry: string;
    defaultNamespace: string;
    defaultRole: string;
    defaultSecondaryRoles: string;
    defaultWarehouse: string;
    disabled: boolean;
    displayName: string;
    email: string;
    expiresAtTime: string;
    extAuthnDuo: boolean;
    extAuthnUid: string;
    firstName: string;
    hasMfa: boolean;
    hasPassword: boolean;
    hasRsaPublicKey: boolean;
    lastName: string;
    lastSuccessLogin: string;
    lockedUntilTime: string;
    loginName: string;
    minsToBypassMfa: string;
    minsToUnlock: string;
    mustChangePassword: boolean;
    name: string;
    owner: string;
    snowflakeLock: boolean;
    type: string;
}

export interface StageTag {
    /**
     * Name of the database that the tag was created in.
     */
    database?: string;
    /**
     * Tag name, e.g. department.
     */
    name: string;
    /**
     * Name of the schema that the tag was created in.
     */
    schema?: string;
    /**
     * Tag value, e.g. marketing_info.
     */
    value: string;
}

export interface StreamOnDirectoryTableDescribeOutput {
    baseTables: string[];
    comment: string;
    createdOn: string;
    databaseName: string;
    invalidReason: string;
    mode: string;
    name: string;
    owner: string;
    ownerRoleType: string;
    schemaName: string;
    sourceType: string;
    stale: boolean;
    staleAfter: string;
    tableName: string;
    type: string;
}

export interface StreamOnDirectoryTableShowOutput {
    baseTables: string[];
    comment: string;
    createdOn: string;
    databaseName: string;
    invalidReason: string;
    mode: string;
    name: string;
    owner: string;
    ownerRoleType: string;
    schemaName: string;
    sourceType: string;
    stale: boolean;
    staleAfter: string;
    tableName: string;
    type: string;
}

export interface StreamOnExternalTableAt {
    /**
     * Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
     */
    offset?: string;
    /**
     * Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
     */
    statement?: string;
    /**
     * Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
     */
    stream?: string;
    /**
     * Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
     */
    timestamp?: string;
}

export interface StreamOnExternalTableBefore {
    /**
     * Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
     */
    offset?: string;
    /**
     * Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
     */
    statement?: string;
    /**
     * Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
     */
    stream?: string;
    /**
     * Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
     */
    timestamp?: string;
}

export interface StreamOnExternalTableDescribeOutput {
    baseTables: string[];
    comment: string;
    createdOn: string;
    databaseName: string;
    invalidReason: string;
    mode: string;
    name: string;
    owner: string;
    ownerRoleType: string;
    schemaName: string;
    sourceType: string;
    stale: boolean;
    staleAfter: string;
    tableName: string;
    type: string;
}

export interface StreamOnExternalTableShowOutput {
    baseTables: string[];
    comment: string;
    createdOn: string;
    databaseName: string;
    invalidReason: string;
    mode: string;
    name: string;
    owner: string;
    ownerRoleType: string;
    schemaName: string;
    sourceType: string;
    stale: boolean;
    staleAfter: string;
    tableName: string;
    type: string;
}

export interface StreamOnTableAt {
    /**
     * Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
     */
    offset?: string;
    /**
     * Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
     */
    statement?: string;
    /**
     * Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
     */
    stream?: string;
    /**
     * Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
     */
    timestamp?: string;
}

export interface StreamOnTableBefore {
    /**
     * Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
     */
    offset?: string;
    /**
     * Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
     */
    statement?: string;
    /**
     * Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
     */
    stream?: string;
    /**
     * Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
     */
    timestamp?: string;
}

export interface StreamOnTableDescribeOutput {
    baseTables: string[];
    comment: string;
    createdOn: string;
    databaseName: string;
    invalidReason: string;
    mode: string;
    name: string;
    owner: string;
    ownerRoleType: string;
    schemaName: string;
    sourceType: string;
    stale: boolean;
    staleAfter: string;
    tableName: string;
    type: string;
}

export interface StreamOnTableShowOutput {
    baseTables: string[];
    comment: string;
    createdOn: string;
    databaseName: string;
    invalidReason: string;
    mode: string;
    name: string;
    owner: string;
    ownerRoleType: string;
    schemaName: string;
    sourceType: string;
    stale: boolean;
    staleAfter: string;
    tableName: string;
    type: string;
}

export interface StreamOnViewAt {
    /**
     * Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
     */
    offset?: string;
    /**
     * Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
     */
    statement?: string;
    /**
     * Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
     */
    stream?: string;
    /**
     * Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
     */
    timestamp?: string;
}

export interface StreamOnViewBefore {
    /**
     * Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).
     */
    offset?: string;
    /**
     * Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.
     */
    statement?: string;
    /**
     * Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.
     */
    stream?: string;
    /**
     * Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.
     */
    timestamp?: string;
}

export interface StreamOnViewDescribeOutput {
    baseTables: string[];
    comment: string;
    createdOn: string;
    databaseName: string;
    invalidReason: string;
    mode: string;
    name: string;
    owner: string;
    ownerRoleType: string;
    schemaName: string;
    sourceType: string;
    stale: boolean;
    staleAfter: string;
    tableName: string;
    type: string;
}

export interface StreamOnViewShowOutput {
    baseTables: string[];
    comment: string;
    createdOn: string;
    databaseName: string;
    invalidReason: string;
    mode: string;
    name: string;
    owner: string;
    ownerRoleType: string;
    schemaName: string;
    sourceType: string;
    stale: boolean;
    staleAfter: string;
    tableName: string;
    type: string;
}

export interface StreamlitDescribeOutput {
    defaultPackages: string;
    externalAccessIntegrations: string[];
    externalAccessSecrets: string;
    importUrls: string[];
    mainFile: string;
    name: string;
    queryWarehouse: string;
    rootLocation: string;
    title: string;
    urlId: string;
    userPackages: string[];
}

export interface StreamlitShowOutput {
    comment: string;
    createdOn: string;
    databaseName: string;
    name: string;
    owner: string;
    ownerRoleType: string;
    queryWarehouse: string;
    schemaName: string;
    title: string;
    urlId: string;
}

export interface TableColumn {
    /**
     * (Default: ``) Column collation, e.g. utf8
     */
    collate?: string;
    /**
     * (Default: ``) Column comment
     */
    comment?: string;
    /**
     * Defines the column default value; note due to limitations of Snowflake's ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied
     */
    default?: outputs.TableColumnDefault;
    /**
     * Defines the identity start/step values for a column. **Note** Identity/default are mutually exclusive.
     */
    identity?: outputs.TableColumnIdentity;
    /**
     * (Default: ``) Masking policy to apply on column. It has to be a fully qualified name.
     */
    maskingPolicy?: string;
    /**
     * Column name
     */
    name: string;
    /**
     * (Default: `true`) Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
     */
    nullable?: boolean;
    /**
     * Record of schema evolution.
     */
    schemaEvolutionRecord: string;
    /**
     * Column type, e.g. VARIANT. For a full list of column types, see [Summary of Data Types](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
     */
    type: string;
}

export interface TableColumnDefault {
    /**
     * The default constant value for the column
     */
    constant?: string;
    /**
     * The default expression value for the column
     */
    expression?: string;
    /**
     * The default sequence to use for the column
     */
    sequence?: string;
}

export interface TableColumnIdentity {
    /**
     * (Default: `1`) The number to start incrementing at.
     */
    startNum?: number;
    /**
     * (Default: `1`) Step size to increment by.
     */
    stepNum?: number;
}

export interface TableConstraintForeignKeyProperties {
    /**
     * (Default: `FULL`) The match type for the foreign key. Not applicable for primary/unique keys
     */
    match?: string;
    /**
     * (Default: `NO ACTION`) Specifies the action performed when the primary/unique key for the foreign key is deleted. Not applicable for primary/unique keys
     */
    onDelete?: string;
    /**
     * (Default: `NO ACTION`) Specifies the action performed when the primary/unique key for the foreign key is updated. Not applicable for primary/unique keys
     */
    onUpdate?: string;
    /**
     * The table and columns that the foreign key references.
     */
    references: outputs.TableConstraintForeignKeyPropertiesReferences;
}

export interface TableConstraintForeignKeyPropertiesReferences {
    /**
     * Columns to use in foreign key reference
     */
    columns: string[];
    /**
     * Name of constraint
     */
    tableId: string;
}

export interface TablePrimaryKey {
    /**
     * Columns to use in primary key
     */
    keys: string[];
    /**
     * Name of constraint
     */
    name?: string;
}

export interface TableTag {
    /**
     * Name of the database that the tag was created in.
     */
    database?: string;
    /**
     * Tag name, e.g. department.
     */
    name: string;
    /**
     * Name of the schema that the tag was created in.
     */
    schema?: string;
    /**
     * Tag value, e.g. marketing_info.
     */
    value: string;
}

export interface TagShowOutput {
    allowedValues: string[];
    comment: string;
    createdOn: string;
    databaseName: string;
    name: string;
    owner: string;
    ownerRoleType: string;
    schemaName: string;
}

export interface TaskParameter {
    abortDetachedQueries: outputs.TaskParameterAbortDetachedQuery[];
    autocommits: outputs.TaskParameterAutocommit[];
    binaryInputFormats: outputs.TaskParameterBinaryInputFormat[];
    binaryOutputFormats: outputs.TaskParameterBinaryOutputFormat[];
    clientMemoryLimits: outputs.TaskParameterClientMemoryLimit[];
    clientMetadataRequestUseConnectionCtxes: outputs.TaskParameterClientMetadataRequestUseConnectionCtx[];
    clientPrefetchThreads: outputs.TaskParameterClientPrefetchThread[];
    clientResultChunkSizes: outputs.TaskParameterClientResultChunkSize[];
    clientResultColumnCaseInsensitives: outputs.TaskParameterClientResultColumnCaseInsensitive[];
    clientSessionKeepAliveHeartbeatFrequencies: outputs.TaskParameterClientSessionKeepAliveHeartbeatFrequency[];
    clientSessionKeepAlives: outputs.TaskParameterClientSessionKeepAlife[];
    clientTimestampTypeMappings: outputs.TaskParameterClientTimestampTypeMapping[];
    dateInputFormats: outputs.TaskParameterDateInputFormat[];
    dateOutputFormats: outputs.TaskParameterDateOutputFormat[];
    enableUnloadPhysicalTypeOptimizations: outputs.TaskParameterEnableUnloadPhysicalTypeOptimization[];
    errorOnNondeterministicMerges: outputs.TaskParameterErrorOnNondeterministicMerge[];
    errorOnNondeterministicUpdates: outputs.TaskParameterErrorOnNondeterministicUpdate[];
    geographyOutputFormats: outputs.TaskParameterGeographyOutputFormat[];
    geometryOutputFormats: outputs.TaskParameterGeometryOutputFormat[];
    jdbcTreatTimestampNtzAsUtcs: outputs.TaskParameterJdbcTreatTimestampNtzAsUtc[];
    jdbcUseSessionTimezones: outputs.TaskParameterJdbcUseSessionTimezone[];
    jsonIndents: outputs.TaskParameterJsonIndent[];
    lockTimeouts: outputs.TaskParameterLockTimeout[];
    logLevels: outputs.TaskParameterLogLevel[];
    multiStatementCounts: outputs.TaskParameterMultiStatementCount[];
    noorderSequenceAsDefaults: outputs.TaskParameterNoorderSequenceAsDefault[];
    odbcTreatDecimalAsInts: outputs.TaskParameterOdbcTreatDecimalAsInt[];
    queryTags: outputs.TaskParameterQueryTag[];
    quotedIdentifiersIgnoreCases: outputs.TaskParameterQuotedIdentifiersIgnoreCase[];
    rowsPerResultsets: outputs.TaskParameterRowsPerResultset[];
    s3StageVpceDnsNames: outputs.TaskParameterS3StageVpceDnsName[];
    searchPaths: outputs.TaskParameterSearchPath[];
    statementQueuedTimeoutInSeconds: outputs.TaskParameterStatementQueuedTimeoutInSecond[];
    statementTimeoutInSeconds: outputs.TaskParameterStatementTimeoutInSecond[];
    strictJsonOutputs: outputs.TaskParameterStrictJsonOutput[];
    suspendTaskAfterNumFailures: outputs.TaskParameterSuspendTaskAfterNumFailure[];
    taskAutoRetryAttempts: outputs.TaskParameterTaskAutoRetryAttempt[];
    timeInputFormats: outputs.TaskParameterTimeInputFormat[];
    timeOutputFormats: outputs.TaskParameterTimeOutputFormat[];
    timestampDayIsAlways24hs: outputs.TaskParameterTimestampDayIsAlways24h[];
    timestampInputFormats: outputs.TaskParameterTimestampInputFormat[];
    timestampLtzOutputFormats: outputs.TaskParameterTimestampLtzOutputFormat[];
    timestampNtzOutputFormats: outputs.TaskParameterTimestampNtzOutputFormat[];
    timestampOutputFormats: outputs.TaskParameterTimestampOutputFormat[];
    timestampTypeMappings: outputs.TaskParameterTimestampTypeMapping[];
    timestampTzOutputFormats: outputs.TaskParameterTimestampTzOutputFormat[];
    timezones: outputs.TaskParameterTimezone[];
    traceLevels: outputs.TaskParameterTraceLevel[];
    transactionAbortOnErrors: outputs.TaskParameterTransactionAbortOnError[];
    transactionDefaultIsolationLevels: outputs.TaskParameterTransactionDefaultIsolationLevel[];
    twoDigitCenturyStarts: outputs.TaskParameterTwoDigitCenturyStart[];
    unsupportedDdlActions: outputs.TaskParameterUnsupportedDdlAction[];
    useCachedResults: outputs.TaskParameterUseCachedResult[];
    userTaskManagedInitialWarehouseSizes: outputs.TaskParameterUserTaskManagedInitialWarehouseSize[];
    userTaskMinimumTriggerIntervalInSeconds: outputs.TaskParameterUserTaskMinimumTriggerIntervalInSecond[];
    userTaskTimeoutMs: outputs.TaskParameterUserTaskTimeoutM[];
    weekOfYearPolicies: outputs.TaskParameterWeekOfYearPolicy[];
    weekStarts: outputs.TaskParameterWeekStart[];
}

export interface TaskParameterAbortDetachedQuery {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterAutocommit {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterBinaryInputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterBinaryOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterClientMemoryLimit {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterClientMetadataRequestUseConnectionCtx {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterClientPrefetchThread {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterClientResultChunkSize {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterClientResultColumnCaseInsensitive {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterClientSessionKeepAlife {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterClientSessionKeepAliveHeartbeatFrequency {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterClientTimestampTypeMapping {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterDateInputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterDateOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterEnableUnloadPhysicalTypeOptimization {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterErrorOnNondeterministicMerge {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterErrorOnNondeterministicUpdate {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterGeographyOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterGeometryOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterJdbcTreatTimestampNtzAsUtc {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterJdbcUseSessionTimezone {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterJsonIndent {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterLockTimeout {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterLogLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterMultiStatementCount {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterNoorderSequenceAsDefault {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterOdbcTreatDecimalAsInt {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterQueryTag {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterQuotedIdentifiersIgnoreCase {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterRowsPerResultset {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterS3StageVpceDnsName {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterSearchPath {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterStatementQueuedTimeoutInSecond {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterStatementTimeoutInSecond {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterStrictJsonOutput {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterSuspendTaskAfterNumFailure {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterTaskAutoRetryAttempt {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterTimeInputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterTimeOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterTimestampDayIsAlways24h {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterTimestampInputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterTimestampLtzOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterTimestampNtzOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterTimestampOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterTimestampTypeMapping {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterTimestampTzOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterTimezone {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterTraceLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterTransactionAbortOnError {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterTransactionDefaultIsolationLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterTwoDigitCenturyStart {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterUnsupportedDdlAction {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterUseCachedResult {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterUserTaskManagedInitialWarehouseSize {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterUserTaskMinimumTriggerIntervalInSecond {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterUserTaskTimeoutM {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterWeekOfYearPolicy {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskParameterWeekStart {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface TaskSchedule {
    /**
     * Specifies an interval (in minutes) of wait time inserted between runs of the task. Accepts positive integers only. (conflicts with `usingCron`)
     */
    minutes?: number;
    /**
     * Specifies a cron expression and time zone for periodically running the task. Supports a subset of standard cron utility syntax. (conflicts with `minutes`)
     */
    usingCron?: string;
}

export interface TaskShowOutput {
    allowOverlappingExecution: boolean;
    budget: string;
    comment: string;
    condition: string;
    config: string;
    createdOn: string;
    databaseName: string;
    definition: string;
    errorIntegration: string;
    id: string;
    lastCommittedOn: string;
    lastSuspendedOn: string;
    lastSuspendedReason: string;
    name: string;
    owner: string;
    ownerRoleType: string;
    predecessors: string[];
    schedule: string;
    schemaName: string;
    state: string;
    taskRelations: outputs.TaskShowOutputTaskRelation[];
    warehouse: string;
}

export interface TaskShowOutputTaskRelation {
    finalizedRootTask: string;
    finalizer: string;
    predecessors: string[];
}

export interface UserParameter {
    abortDetachedQueries: outputs.UserParameterAbortDetachedQuery[];
    autocommits: outputs.UserParameterAutocommit[];
    binaryInputFormats: outputs.UserParameterBinaryInputFormat[];
    binaryOutputFormats: outputs.UserParameterBinaryOutputFormat[];
    clientMemoryLimits: outputs.UserParameterClientMemoryLimit[];
    clientMetadataRequestUseConnectionCtxes: outputs.UserParameterClientMetadataRequestUseConnectionCtx[];
    clientPrefetchThreads: outputs.UserParameterClientPrefetchThread[];
    clientResultChunkSizes: outputs.UserParameterClientResultChunkSize[];
    clientResultColumnCaseInsensitives: outputs.UserParameterClientResultColumnCaseInsensitive[];
    clientSessionKeepAliveHeartbeatFrequencies: outputs.UserParameterClientSessionKeepAliveHeartbeatFrequency[];
    clientSessionKeepAlives: outputs.UserParameterClientSessionKeepAlife[];
    clientTimestampTypeMappings: outputs.UserParameterClientTimestampTypeMapping[];
    dateInputFormats: outputs.UserParameterDateInputFormat[];
    dateOutputFormats: outputs.UserParameterDateOutputFormat[];
    enableUnloadPhysicalTypeOptimizations: outputs.UserParameterEnableUnloadPhysicalTypeOptimization[];
    enableUnredactedQuerySyntaxErrors: outputs.UserParameterEnableUnredactedQuerySyntaxError[];
    errorOnNondeterministicMerges: outputs.UserParameterErrorOnNondeterministicMerge[];
    errorOnNondeterministicUpdates: outputs.UserParameterErrorOnNondeterministicUpdate[];
    geographyOutputFormats: outputs.UserParameterGeographyOutputFormat[];
    geometryOutputFormats: outputs.UserParameterGeometryOutputFormat[];
    jdbcTreatDecimalAsInts: outputs.UserParameterJdbcTreatDecimalAsInt[];
    jdbcTreatTimestampNtzAsUtcs: outputs.UserParameterJdbcTreatTimestampNtzAsUtc[];
    jdbcUseSessionTimezones: outputs.UserParameterJdbcUseSessionTimezone[];
    jsonIndents: outputs.UserParameterJsonIndent[];
    lockTimeouts: outputs.UserParameterLockTimeout[];
    logLevels: outputs.UserParameterLogLevel[];
    multiStatementCounts: outputs.UserParameterMultiStatementCount[];
    networkPolicies: outputs.UserParameterNetworkPolicy[];
    noorderSequenceAsDefaults: outputs.UserParameterNoorderSequenceAsDefault[];
    odbcTreatDecimalAsInts: outputs.UserParameterOdbcTreatDecimalAsInt[];
    preventUnloadToInternalStages: outputs.UserParameterPreventUnloadToInternalStage[];
    queryTags: outputs.UserParameterQueryTag[];
    quotedIdentifiersIgnoreCases: outputs.UserParameterQuotedIdentifiersIgnoreCase[];
    rowsPerResultsets: outputs.UserParameterRowsPerResultset[];
    s3StageVpceDnsNames: outputs.UserParameterS3StageVpceDnsName[];
    searchPaths: outputs.UserParameterSearchPath[];
    simulatedDataSharingConsumers: outputs.UserParameterSimulatedDataSharingConsumer[];
    statementQueuedTimeoutInSeconds: outputs.UserParameterStatementQueuedTimeoutInSecond[];
    statementTimeoutInSeconds: outputs.UserParameterStatementTimeoutInSecond[];
    strictJsonOutputs: outputs.UserParameterStrictJsonOutput[];
    timeInputFormats: outputs.UserParameterTimeInputFormat[];
    timeOutputFormats: outputs.UserParameterTimeOutputFormat[];
    timestampDayIsAlways24hs: outputs.UserParameterTimestampDayIsAlways24h[];
    timestampInputFormats: outputs.UserParameterTimestampInputFormat[];
    timestampLtzOutputFormats: outputs.UserParameterTimestampLtzOutputFormat[];
    timestampNtzOutputFormats: outputs.UserParameterTimestampNtzOutputFormat[];
    timestampOutputFormats: outputs.UserParameterTimestampOutputFormat[];
    timestampTypeMappings: outputs.UserParameterTimestampTypeMapping[];
    timestampTzOutputFormats: outputs.UserParameterTimestampTzOutputFormat[];
    timezones: outputs.UserParameterTimezone[];
    traceLevels: outputs.UserParameterTraceLevel[];
    transactionAbortOnErrors: outputs.UserParameterTransactionAbortOnError[];
    transactionDefaultIsolationLevels: outputs.UserParameterTransactionDefaultIsolationLevel[];
    twoDigitCenturyStarts: outputs.UserParameterTwoDigitCenturyStart[];
    unsupportedDdlActions: outputs.UserParameterUnsupportedDdlAction[];
    useCachedResults: outputs.UserParameterUseCachedResult[];
    weekOfYearPolicies: outputs.UserParameterWeekOfYearPolicy[];
    weekStarts: outputs.UserParameterWeekStart[];
}

export interface UserParameterAbortDetachedQuery {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterAutocommit {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterBinaryInputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterBinaryOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterClientMemoryLimit {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterClientMetadataRequestUseConnectionCtx {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterClientPrefetchThread {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterClientResultChunkSize {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterClientResultColumnCaseInsensitive {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterClientSessionKeepAlife {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterClientSessionKeepAliveHeartbeatFrequency {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterClientTimestampTypeMapping {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterDateInputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterDateOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterEnableUnloadPhysicalTypeOptimization {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterEnableUnredactedQuerySyntaxError {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterErrorOnNondeterministicMerge {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterErrorOnNondeterministicUpdate {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterGeographyOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterGeometryOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterJdbcTreatDecimalAsInt {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterJdbcTreatTimestampNtzAsUtc {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterJdbcUseSessionTimezone {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterJsonIndent {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterLockTimeout {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterLogLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterMultiStatementCount {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterNetworkPolicy {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterNoorderSequenceAsDefault {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterOdbcTreatDecimalAsInt {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterPreventUnloadToInternalStage {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterQueryTag {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterQuotedIdentifiersIgnoreCase {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterRowsPerResultset {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterS3StageVpceDnsName {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterSearchPath {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterSimulatedDataSharingConsumer {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterStatementQueuedTimeoutInSecond {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterStatementTimeoutInSecond {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterStrictJsonOutput {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterTimeInputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterTimeOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterTimestampDayIsAlways24h {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterTimestampInputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterTimestampLtzOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterTimestampNtzOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterTimestampOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterTimestampTypeMapping {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterTimestampTzOutputFormat {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterTimezone {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterTraceLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterTransactionAbortOnError {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterTransactionDefaultIsolationLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterTwoDigitCenturyStart {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterUnsupportedDdlAction {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterUseCachedResult {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterWeekOfYearPolicy {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserParameterWeekStart {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface UserShowOutput {
    comment: string;
    createdOn: string;
    daysToExpiry: string;
    defaultNamespace: string;
    defaultRole: string;
    defaultSecondaryRoles: string;
    defaultWarehouse: string;
    disabled: boolean;
    displayName: string;
    email: string;
    expiresAtTime: string;
    extAuthnDuo: boolean;
    extAuthnUid: string;
    firstName: string;
    hasMfa: boolean;
    hasPassword: boolean;
    hasRsaPublicKey: boolean;
    lastName: string;
    lastSuccessLogin: string;
    lockedUntilTime: string;
    loginName: string;
    minsToBypassMfa: string;
    minsToUnlock: string;
    mustChangePassword: boolean;
    name: string;
    owner: string;
    snowflakeLock: boolean;
    type: string;
}

export interface ViewAggregationPolicy {
    /**
     * Defines which columns uniquely identify an entity within the view.
     */
    entityKeys?: string[];
    /**
     * Aggregation policy name.
     */
    policyName: string;
}

export interface ViewColumn {
    /**
     * Specifies affected column name.
     */
    columnName: string;
    /**
     * Specifies a comment for the column.
     */
    comment?: string;
    maskingPolicy?: outputs.ViewColumnMaskingPolicy;
    projectionPolicy?: outputs.ViewColumnProjectionPolicy;
}

export interface ViewColumnMaskingPolicy {
    /**
     * Specifies the masking policy to set on a column. For more information about this resource, see docs.
     */
    policyName: string;
    /**
     * Specifies the arguments to pass into the conditional masking policy SQL expression. The first column in the list specifies the column for the policy conditions to mask or tokenize the data and must match the column to which the masking policy is set. The additional columns specify the columns to evaluate to determine whether to mask or tokenize the data in each row of the query result when a query is made on the first column. If the USING clause is omitted, Snowflake treats the conditional masking policy as a normal masking policy.
     */
    usings?: string[];
}

export interface ViewColumnProjectionPolicy {
    /**
     * Specifies the projection policy to set on a column.
     */
    policyName: string;
}

export interface ViewDataMetricFunction {
    /**
     * Identifier of the data metric function to add to the table or view or drop from the table or view. This function identifier must be provided without arguments in parenthesis.
     */
    functionName: string;
    /**
     * The table or view columns on which to associate the data metric function. The data types of the columns must match the data types of the columns specified in the data metric function definition.
     */
    ons: string[];
    /**
     * The status of the metrics association. Valid values are: `STARTED` | `SUSPENDED`. When status of a data metric function is changed, it is being reassigned with `DROP DATA METRIC FUNCTION` and `ADD DATA METRIC FUNCTION`, and then its status is changed by `MODIFY DATA METRIC FUNCTION`
     */
    scheduleStatus: string;
}

export interface ViewDataMetricSchedule {
    /**
     * Specifies an interval (in minutes) of wait time inserted between runs of the data metric function. Conflicts with `usingCron`. Valid values are: `5` | `15` | `30` | `60` | `720` | `1440`. Due to Snowflake limitations, changes in this field are not managed by the provider. Please consider using taint command, `usingCron` field, or replace*triggered*by metadata argument.
     */
    minutes?: number;
    /**
     * Specifies a cron expression and time zone for periodically running the data metric function. Supports a subset of standard cron utility syntax. Conflicts with `minutes`.
     */
    usingCron?: string;
}

export interface ViewDescribeOutput {
    check: string;
    comment: string;
    default: string;
    expression: string;
    isNullable: boolean;
    isPrimary: boolean;
    isUnique: boolean;
    kind: string;
    name: string;
    policyName: string;
    privacyDomain: string;
    type: string;
}

export interface ViewRowAccessPolicy {
    /**
     * Defines which columns are affected by the policy.
     */
    ons: string[];
    /**
     * Row access policy name. For more information about this resource, see docs.
     */
    policyName: string;
}

export interface ViewShowOutput {
    changeTracking: string;
    comment: string;
    createdOn: string;
    databaseName: string;
    isMaterialized: boolean;
    isSecure: boolean;
    kind: string;
    name: string;
    owner: string;
    ownerRoleType: string;
    reserved: string;
    schemaName: string;
    text: string;
}

export interface WarehouseParameter {
    maxConcurrencyLevels: outputs.WarehouseParameterMaxConcurrencyLevel[];
    statementQueuedTimeoutInSeconds: outputs.WarehouseParameterStatementQueuedTimeoutInSecond[];
    statementTimeoutInSeconds: outputs.WarehouseParameterStatementTimeoutInSecond[];
}

export interface WarehouseParameterMaxConcurrencyLevel {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface WarehouseParameterStatementQueuedTimeoutInSecond {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface WarehouseParameterStatementTimeoutInSecond {
    default: string;
    description: string;
    key: string;
    level: string;
    value: string;
}

export interface WarehouseShowOutput {
    autoResume: boolean;
    autoSuspend: number;
    available: number;
    comment: string;
    createdOn: string;
    enableQueryAcceleration: boolean;
    isCurrent: boolean;
    isDefault: boolean;
    maxClusterCount: number;
    minClusterCount: number;
    name: string;
    other: number;
    owner: string;
    ownerRoleType: string;
    provisioning: number;
    queryAccelerationMaxScaleFactor: number;
    queued: number;
    quiescing: number;
    resourceMonitor: string;
    resumedOn: string;
    running: number;
    scalingPolicy: string;
    size: string;
    startedClusters: number;
    state: string;
    type: string;
    updatedOn: string;
}

export namespace config {
    export interface TokenAccessor {
        /**
         * The client ID for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_CLIENT_ID` environment variable.
         */
        clientId: string;
        /**
         * The client secret for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_CLIENT_SECRET` environment variable.
         */
        clientSecret: string;
        /**
         * The redirect URI for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_REDIRECT_URI` environment variable.
         */
        redirectUri: string;
        /**
         * The refresh token for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_REFRESH_TOKEN` environment variable.
         */
        refreshToken: string;
        /**
         * The token endpoint for the OAuth provider e.g. https://{yourDomain}/oauth/token when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_TOKEN_ENDPOINT` environment variable.
         */
        tokenEndpoint: string;
    }

}
