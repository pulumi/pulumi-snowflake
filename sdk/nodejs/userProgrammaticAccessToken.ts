// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * ```sh
 * $ pulumi import snowflake:index/userProgrammaticAccessToken:UserProgrammaticAccessToken example '"<user_name>"|"<token_name>"'
 * ```
 */
export class UserProgrammaticAccessToken extends pulumi.CustomResource {
    /**
     * Get an existing UserProgrammaticAccessToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserProgrammaticAccessTokenState, opts?: pulumi.CustomResourceOptions): UserProgrammaticAccessToken {
        return new UserProgrammaticAccessToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/userProgrammaticAccessToken:UserProgrammaticAccessToken';

    /**
     * Returns true if the given object is an instance of UserProgrammaticAccessToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserProgrammaticAccessToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserProgrammaticAccessToken.__pulumiType;
    }

    /**
     * Descriptive comment about the programmatic access token.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly daysToExpiry!: pulumi.Output<number | undefined>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Disables or enables the programmatic access token. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
     */
    public readonly disabled!: pulumi.Output<string | undefined>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) This field is only used when the token is rotated by changing the `keeper` field. Sets the expiration time of the existing token secret to expire after the specified number of hours. You can set this to a value of 0 to expire the current token secret immediately.
     */
    public readonly expireRotatedTokenAfterHours!: pulumi.Output<number | undefined>;
    /**
     * Arbitrary string that, if and only if, changed from a non-empty to a different non-empty value (or known after apply), will trigger a key to be rotated. When you add this field to the configuration, or remove it from the configuration, the rotation is not triggered. When the token is rotated, the `token` and `rotatedTokenName` fields are marked as computed.
     */
    public readonly keeper!: pulumi.Output<string | undefined>;
    public readonly minsToBypassNetworkPolicyRequirement!: pulumi.Output<number | undefined>;
    /**
     * Specifies the name for the programmatic access token; must be unique for the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the role used for privilege evaluation and object creation. This must be one of the roles that has already been granted to the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    public readonly roleRestriction!: pulumi.Output<string | undefined>;
    /**
     * Name of the token that represents the prior secret. This field is updated only when the token is rotated. In this case, the field is marked as computed.
     */
    public /*out*/ readonly rotatedTokenName!: pulumi.Output<string>;
    /**
     * Outputs the result of `SHOW USER PROGRAMMATIC ACCESS TOKENS` for the given user programmatic access token.
     */
    public /*out*/ readonly showOutputs!: pulumi.Output<outputs.UserProgrammaticAccessTokenShowOutput[]>;
    /**
     * The token itself. Use this to authenticate to an endpoint. The data in this field is updated only when the token is created or rotated. In this case, the field is marked as computed.
     */
    public /*out*/ readonly token!: pulumi.Output<string>;
    /**
     * The name of the user that the token is associated with. A user cannot use another user's programmatic access token to authenticate. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    public readonly user!: pulumi.Output<string>;

    /**
     * Create a UserProgrammaticAccessToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserProgrammaticAccessTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserProgrammaticAccessTokenArgs | UserProgrammaticAccessTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserProgrammaticAccessTokenState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["daysToExpiry"] = state ? state.daysToExpiry : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["expireRotatedTokenAfterHours"] = state ? state.expireRotatedTokenAfterHours : undefined;
            resourceInputs["keeper"] = state ? state.keeper : undefined;
            resourceInputs["minsToBypassNetworkPolicyRequirement"] = state ? state.minsToBypassNetworkPolicyRequirement : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roleRestriction"] = state ? state.roleRestriction : undefined;
            resourceInputs["rotatedTokenName"] = state ? state.rotatedTokenName : undefined;
            resourceInputs["showOutputs"] = state ? state.showOutputs : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as UserProgrammaticAccessTokenArgs | undefined;
            if ((!args || args.user === undefined) && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["daysToExpiry"] = args ? args.daysToExpiry : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["expireRotatedTokenAfterHours"] = args ? args.expireRotatedTokenAfterHours : undefined;
            resourceInputs["keeper"] = args ? args.keeper : undefined;
            resourceInputs["minsToBypassNetworkPolicyRequirement"] = args ? args.minsToBypassNetworkPolicyRequirement : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleRestriction"] = args ? args.roleRestriction : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["rotatedTokenName"] = undefined /*out*/;
            resourceInputs["showOutputs"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(UserProgrammaticAccessToken.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserProgrammaticAccessToken resources.
 */
export interface UserProgrammaticAccessTokenState {
    /**
     * Descriptive comment about the programmatic access token.
     */
    comment?: pulumi.Input<string>;
    daysToExpiry?: pulumi.Input<number>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Disables or enables the programmatic access token. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
     */
    disabled?: pulumi.Input<string>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) This field is only used when the token is rotated by changing the `keeper` field. Sets the expiration time of the existing token secret to expire after the specified number of hours. You can set this to a value of 0 to expire the current token secret immediately.
     */
    expireRotatedTokenAfterHours?: pulumi.Input<number>;
    /**
     * Arbitrary string that, if and only if, changed from a non-empty to a different non-empty value (or known after apply), will trigger a key to be rotated. When you add this field to the configuration, or remove it from the configuration, the rotation is not triggered. When the token is rotated, the `token` and `rotatedTokenName` fields are marked as computed.
     */
    keeper?: pulumi.Input<string>;
    minsToBypassNetworkPolicyRequirement?: pulumi.Input<number>;
    /**
     * Specifies the name for the programmatic access token; must be unique for the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the role used for privilege evaluation and object creation. This must be one of the roles that has already been granted to the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    roleRestriction?: pulumi.Input<string>;
    /**
     * Name of the token that represents the prior secret. This field is updated only when the token is rotated. In this case, the field is marked as computed.
     */
    rotatedTokenName?: pulumi.Input<string>;
    /**
     * Outputs the result of `SHOW USER PROGRAMMATIC ACCESS TOKENS` for the given user programmatic access token.
     */
    showOutputs?: pulumi.Input<pulumi.Input<inputs.UserProgrammaticAccessTokenShowOutput>[]>;
    /**
     * The token itself. Use this to authenticate to an endpoint. The data in this field is updated only when the token is created or rotated. In this case, the field is marked as computed.
     */
    token?: pulumi.Input<string>;
    /**
     * The name of the user that the token is associated with. A user cannot use another user's programmatic access token to authenticate. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserProgrammaticAccessToken resource.
 */
export interface UserProgrammaticAccessTokenArgs {
    /**
     * Descriptive comment about the programmatic access token.
     */
    comment?: pulumi.Input<string>;
    daysToExpiry?: pulumi.Input<number>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Disables or enables the programmatic access token. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
     */
    disabled?: pulumi.Input<string>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) This field is only used when the token is rotated by changing the `keeper` field. Sets the expiration time of the existing token secret to expire after the specified number of hours. You can set this to a value of 0 to expire the current token secret immediately.
     */
    expireRotatedTokenAfterHours?: pulumi.Input<number>;
    /**
     * Arbitrary string that, if and only if, changed from a non-empty to a different non-empty value (or known after apply), will trigger a key to be rotated. When you add this field to the configuration, or remove it from the configuration, the rotation is not triggered. When the token is rotated, the `token` and `rotatedTokenName` fields are marked as computed.
     */
    keeper?: pulumi.Input<string>;
    minsToBypassNetworkPolicyRequirement?: pulumi.Input<number>;
    /**
     * Specifies the name for the programmatic access token; must be unique for the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the role used for privilege evaluation and object creation. This must be one of the roles that has already been granted to the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    roleRestriction?: pulumi.Input<string>;
    /**
     * The name of the user that the token is associated with. A user cannot use another user's programmatic access token to authenticate. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    user: pulumi.Input<string>;
}
