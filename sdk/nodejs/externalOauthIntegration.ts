// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as snowflake from "@pulumi/snowflake";
 *
 * const azure = new snowflake.ExternalOauthIntegration("azure", {
 *     audienceUrls: ["https://analysis.windows.net/powerbi/connector/Snowflake"],
 *     enabled: true,
 *     issuer: "https://sts.windows.net/00000000-0000-0000-0000-000000000000",
 *     jwsKeysUrls: ["https://login.windows.net/common/discovery/keys"],
 *     snowflakeUserMappingAttribute: "LOGIN_NAME",
 *     tokenUserMappingClaims: ["upn"],
 *     type: "AZURE",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import snowflake:index/externalOauthIntegration:ExternalOauthIntegration example name
 * ```
 */
export class ExternalOauthIntegration extends pulumi.CustomResource {
    /**
     * Get an existing ExternalOauthIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExternalOauthIntegrationState, opts?: pulumi.CustomResourceOptions): ExternalOauthIntegration {
        return new ExternalOauthIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/externalOauthIntegration:ExternalOauthIntegration';

    /**
     * Returns true if the given object is an instance of ExternalOauthIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExternalOauthIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExternalOauthIntegration.__pulumiType;
    }

    /**
     * Specifies the list of roles that the client can set as the primary role.
     */
    public readonly allowedRoles!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies whether the OAuth client or user can use a role that is not defined in the OAuth access token.
     */
    public readonly anyRoleMode!: pulumi.Output<string | undefined>;
    /**
     * Specifies additional values that can be used for the access token's audience validation on top of using the Customer's Snowflake Account URL
     */
    public readonly audienceUrls!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the list of roles that a client cannot set as the primary role. Do not include ACCOUNTADMIN, ORGADMIN or SECURITYADMIN as they are already implicitly enforced and will cause in-place updates.
     */
    public readonly blockedRoles!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies a comment for the OAuth integration.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Date and time when the External OAUTH integration was created.
     */
    public /*out*/ readonly createdOn!: pulumi.Output<string>;
    /**
     * Specifies whether to initiate operation of the integration or suspend it.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Specifies the URL to define the OAuth 2.0 authorization server.
     */
    public readonly issuer!: pulumi.Output<string>;
    /**
     * Specifies the endpoint or a list of endpoints from which to download public keys or certificates to validate an External OAuth access token. The maximum number of URLs that can be specified in the list is 3.
     */
    public readonly jwsKeysUrls!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the name of the External Oath integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies a Base64-encoded RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers.
     */
    public readonly rsaPublicKey!: pulumi.Output<string | undefined>;
    /**
     * Specifies a second RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. Used for key rotation.
     */
    public readonly rsaPublicKey2!: pulumi.Output<string | undefined>;
    /**
     * Specifies the scope delimiter in the authorization token.
     */
    public readonly scopeDelimiter!: pulumi.Output<string | undefined>;
    /**
     * Indicates which Snowflake user record attribute should be used to map the access token to a Snowflake user record.
     */
    public readonly snowflakeUserMappingAttribute!: pulumi.Output<string>;
    /**
     * Specifies the access token claim or claims that can be used to map the access token to a Snowflake user record.
     */
    public readonly tokenUserMappingClaims!: pulumi.Output<string[]>;
    /**
     * Specifies the OAuth 2.0 authorization server to be Okta, Microsoft Azure AD, Ping Identity PingFederate, or a Custom OAuth 2.0 authorization server.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a ExternalOauthIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExternalOauthIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExternalOauthIntegrationArgs | ExternalOauthIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExternalOauthIntegrationState | undefined;
            resourceInputs["allowedRoles"] = state ? state.allowedRoles : undefined;
            resourceInputs["anyRoleMode"] = state ? state.anyRoleMode : undefined;
            resourceInputs["audienceUrls"] = state ? state.audienceUrls : undefined;
            resourceInputs["blockedRoles"] = state ? state.blockedRoles : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["jwsKeysUrls"] = state ? state.jwsKeysUrls : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rsaPublicKey"] = state ? state.rsaPublicKey : undefined;
            resourceInputs["rsaPublicKey2"] = state ? state.rsaPublicKey2 : undefined;
            resourceInputs["scopeDelimiter"] = state ? state.scopeDelimiter : undefined;
            resourceInputs["snowflakeUserMappingAttribute"] = state ? state.snowflakeUserMappingAttribute : undefined;
            resourceInputs["tokenUserMappingClaims"] = state ? state.tokenUserMappingClaims : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ExternalOauthIntegrationArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.issuer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issuer'");
            }
            if ((!args || args.snowflakeUserMappingAttribute === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snowflakeUserMappingAttribute'");
            }
            if ((!args || args.tokenUserMappingClaims === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tokenUserMappingClaims'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["allowedRoles"] = args ? args.allowedRoles : undefined;
            resourceInputs["anyRoleMode"] = args ? args.anyRoleMode : undefined;
            resourceInputs["audienceUrls"] = args ? args.audienceUrls : undefined;
            resourceInputs["blockedRoles"] = args ? args.blockedRoles : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["issuer"] = args ? args.issuer : undefined;
            resourceInputs["jwsKeysUrls"] = args ? args.jwsKeysUrls : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rsaPublicKey"] = args ? args.rsaPublicKey : undefined;
            resourceInputs["rsaPublicKey2"] = args ? args.rsaPublicKey2 : undefined;
            resourceInputs["scopeDelimiter"] = args ? args.scopeDelimiter : undefined;
            resourceInputs["snowflakeUserMappingAttribute"] = args ? args.snowflakeUserMappingAttribute : undefined;
            resourceInputs["tokenUserMappingClaims"] = args ? args.tokenUserMappingClaims : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["createdOn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExternalOauthIntegration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExternalOauthIntegration resources.
 */
export interface ExternalOauthIntegrationState {
    /**
     * Specifies the list of roles that the client can set as the primary role.
     */
    allowedRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies whether the OAuth client or user can use a role that is not defined in the OAuth access token.
     */
    anyRoleMode?: pulumi.Input<string>;
    /**
     * Specifies additional values that can be used for the access token's audience validation on top of using the Customer's Snowflake Account URL
     */
    audienceUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of roles that a client cannot set as the primary role. Do not include ACCOUNTADMIN, ORGADMIN or SECURITYADMIN as they are already implicitly enforced and will cause in-place updates.
     */
    blockedRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a comment for the OAuth integration.
     */
    comment?: pulumi.Input<string>;
    /**
     * Date and time when the External OAUTH integration was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * Specifies whether to initiate operation of the integration or suspend it.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the URL to define the OAuth 2.0 authorization server.
     */
    issuer?: pulumi.Input<string>;
    /**
     * Specifies the endpoint or a list of endpoints from which to download public keys or certificates to validate an External OAuth access token. The maximum number of URLs that can be specified in the list is 3.
     */
    jwsKeysUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the name of the External Oath integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies a Base64-encoded RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers.
     */
    rsaPublicKey?: pulumi.Input<string>;
    /**
     * Specifies a second RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. Used for key rotation.
     */
    rsaPublicKey2?: pulumi.Input<string>;
    /**
     * Specifies the scope delimiter in the authorization token.
     */
    scopeDelimiter?: pulumi.Input<string>;
    /**
     * Indicates which Snowflake user record attribute should be used to map the access token to a Snowflake user record.
     */
    snowflakeUserMappingAttribute?: pulumi.Input<string>;
    /**
     * Specifies the access token claim or claims that can be used to map the access token to a Snowflake user record.
     */
    tokenUserMappingClaims?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the OAuth 2.0 authorization server to be Okta, Microsoft Azure AD, Ping Identity PingFederate, or a Custom OAuth 2.0 authorization server.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ExternalOauthIntegration resource.
 */
export interface ExternalOauthIntegrationArgs {
    /**
     * Specifies the list of roles that the client can set as the primary role.
     */
    allowedRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies whether the OAuth client or user can use a role that is not defined in the OAuth access token.
     */
    anyRoleMode?: pulumi.Input<string>;
    /**
     * Specifies additional values that can be used for the access token's audience validation on top of using the Customer's Snowflake Account URL
     */
    audienceUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of roles that a client cannot set as the primary role. Do not include ACCOUNTADMIN, ORGADMIN or SECURITYADMIN as they are already implicitly enforced and will cause in-place updates.
     */
    blockedRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a comment for the OAuth integration.
     */
    comment?: pulumi.Input<string>;
    /**
     * Specifies whether to initiate operation of the integration or suspend it.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Specifies the URL to define the OAuth 2.0 authorization server.
     */
    issuer: pulumi.Input<string>;
    /**
     * Specifies the endpoint or a list of endpoints from which to download public keys or certificates to validate an External OAuth access token. The maximum number of URLs that can be specified in the list is 3.
     */
    jwsKeysUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the name of the External Oath integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies a Base64-encoded RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers.
     */
    rsaPublicKey?: pulumi.Input<string>;
    /**
     * Specifies a second RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. Used for key rotation.
     */
    rsaPublicKey2?: pulumi.Input<string>;
    /**
     * Specifies the scope delimiter in the authorization token.
     */
    scopeDelimiter?: pulumi.Input<string>;
    /**
     * Indicates which Snowflake user record attribute should be used to map the access token to a Snowflake user record.
     */
    snowflakeUserMappingAttribute: pulumi.Input<string>;
    /**
     * Specifies the access token claim or claims that can be used to map the access token to a Snowflake user record.
     */
    tokenUserMappingClaims: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the OAuth 2.0 authorization server to be Okta, Microsoft Azure AD, Ping Identity PingFederate, or a Custom OAuth 2.0 authorization server.
     */
    type: pulumi.Input<string>;
}
