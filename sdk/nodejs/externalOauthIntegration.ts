// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * ```sh
 * $ pulumi import snowflake:index/externalOauthIntegration:ExternalOauthIntegration example '"<integration_name>"'
 * ```
 */
export class ExternalOauthIntegration extends pulumi.CustomResource {
    /**
     * Get an existing ExternalOauthIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExternalOauthIntegrationState, opts?: pulumi.CustomResourceOptions): ExternalOauthIntegration {
        return new ExternalOauthIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/externalOauthIntegration:ExternalOauthIntegration';

    /**
     * Returns true if the given object is an instance of ExternalOauthIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExternalOauthIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExternalOauthIntegration.__pulumiType;
    }

    /**
     * Specifies a comment for the OAuth integration.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.
     */
    declare public /*out*/ readonly describeOutputs: pulumi.Output<outputs.ExternalOauthIntegrationDescribeOutput[]>;
    /**
     * Specifies whether to initiate operation of the integration or suspend it.
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * Specifies the list of roles that the client can set as the primary role. For more information about this resource, see docs.
     */
    declare public readonly externalOauthAllowedRolesLists: pulumi.Output<string[] | undefined>;
    /**
     * Specifies whether the OAuth client or user can use a role that is not defined in the OAuth access token. Valid values are (case-insensitive): `DISABLE` | `ENABLE` | `ENABLE_FOR_PRIVILEGE`.
     */
    declare public readonly externalOauthAnyRoleMode: pulumi.Output<string | undefined>;
    /**
     * Specifies additional values that can be used for the access token's audience validation on top of using the Customer's Snowflake Account URL
     */
    declare public readonly externalOauthAudienceLists: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the list of roles that a client cannot set as the primary role. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the EXTERNAL*OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.
     */
    declare public readonly externalOauthBlockedRolesLists: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the URL to define the OAuth 2.0 authorization server.
     */
    declare public readonly externalOauthIssuer: pulumi.Output<string>;
    /**
     * Specifies the endpoint or a list of endpoints from which to download public keys or certificates to validate an External OAuth access token. The maximum number of URLs that can be specified in the list is 3. If removed from the config, the resource is recreated.
     */
    declare public readonly externalOauthJwsKeysUrls: pulumi.Output<string[] | undefined>;
    /**
     * Specifies a Base64-encoded RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. If removed from the config, the resource is recreated.
     */
    declare public readonly externalOauthRsaPublicKey: pulumi.Output<string | undefined>;
    /**
     * Specifies a second RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. Used for key rotation. If removed from the config, the resource is recreated.
     */
    declare public readonly externalOauthRsaPublicKey2: pulumi.Output<string | undefined>;
    /**
     * Specifies the scope delimiter in the authorization token.
     */
    declare public readonly externalOauthScopeDelimiter: pulumi.Output<string | undefined>;
    /**
     * Specifies the access token claim to map the access token to an account role. If removed from the config, the resource is recreated.
     */
    declare public readonly externalOauthScopeMappingAttribute: pulumi.Output<string | undefined>;
    /**
     * Indicates which Snowflake user record attribute should be used to map the access token to a Snowflake user record. Valid values are (case-insensitive): `LOGIN_NAME` | `EMAIL_ADDRESS`.
     */
    declare public readonly externalOauthSnowflakeUserMappingAttribute: pulumi.Output<string>;
    /**
     * Specifies the access token claim or claims that can be used to map the access token to a Snowflake user record. If removed from the config, the resource is recreated.
     */
    declare public readonly externalOauthTokenUserMappingClaims: pulumi.Output<string[]>;
    /**
     * Specifies the OAuth 2.0 authorization server to be Okta, Microsoft Azure AD, Ping Identity PingFederate, or a Custom OAuth 2.0 authorization server. Valid values are (case-insensitive): `OKTA` | `AZURE` | `PING_FEDERATE` | `CUSTOM`.
     */
    declare public readonly externalOauthType: pulumi.Output<string>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    declare public /*out*/ readonly fullyQualifiedName: pulumi.Output<string>;
    /**
     * Specifies the name of the External Oath integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Parameters related to this security integration.
     */
    declare public /*out*/ readonly relatedParameters: pulumi.Output<outputs.ExternalOauthIntegrationRelatedParameter[]>;
    /**
     * Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.
     */
    declare public /*out*/ readonly showOutputs: pulumi.Output<outputs.ExternalOauthIntegrationShowOutput[]>;

    /**
     * Create a ExternalOauthIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExternalOauthIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExternalOauthIntegrationArgs | ExternalOauthIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExternalOauthIntegrationState | undefined;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["describeOutputs"] = state?.describeOutputs;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["externalOauthAllowedRolesLists"] = state?.externalOauthAllowedRolesLists;
            resourceInputs["externalOauthAnyRoleMode"] = state?.externalOauthAnyRoleMode;
            resourceInputs["externalOauthAudienceLists"] = state?.externalOauthAudienceLists;
            resourceInputs["externalOauthBlockedRolesLists"] = state?.externalOauthBlockedRolesLists;
            resourceInputs["externalOauthIssuer"] = state?.externalOauthIssuer;
            resourceInputs["externalOauthJwsKeysUrls"] = state?.externalOauthJwsKeysUrls;
            resourceInputs["externalOauthRsaPublicKey"] = state?.externalOauthRsaPublicKey;
            resourceInputs["externalOauthRsaPublicKey2"] = state?.externalOauthRsaPublicKey2;
            resourceInputs["externalOauthScopeDelimiter"] = state?.externalOauthScopeDelimiter;
            resourceInputs["externalOauthScopeMappingAttribute"] = state?.externalOauthScopeMappingAttribute;
            resourceInputs["externalOauthSnowflakeUserMappingAttribute"] = state?.externalOauthSnowflakeUserMappingAttribute;
            resourceInputs["externalOauthTokenUserMappingClaims"] = state?.externalOauthTokenUserMappingClaims;
            resourceInputs["externalOauthType"] = state?.externalOauthType;
            resourceInputs["fullyQualifiedName"] = state?.fullyQualifiedName;
            resourceInputs["name"] = state?.name;
            resourceInputs["relatedParameters"] = state?.relatedParameters;
            resourceInputs["showOutputs"] = state?.showOutputs;
        } else {
            const args = argsOrState as ExternalOauthIntegrationArgs | undefined;
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.externalOauthIssuer === undefined && !opts.urn) {
                throw new Error("Missing required property 'externalOauthIssuer'");
            }
            if (args?.externalOauthSnowflakeUserMappingAttribute === undefined && !opts.urn) {
                throw new Error("Missing required property 'externalOauthSnowflakeUserMappingAttribute'");
            }
            if (args?.externalOauthTokenUserMappingClaims === undefined && !opts.urn) {
                throw new Error("Missing required property 'externalOauthTokenUserMappingClaims'");
            }
            if (args?.externalOauthType === undefined && !opts.urn) {
                throw new Error("Missing required property 'externalOauthType'");
            }
            resourceInputs["comment"] = args?.comment;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["externalOauthAllowedRolesLists"] = args?.externalOauthAllowedRolesLists;
            resourceInputs["externalOauthAnyRoleMode"] = args?.externalOauthAnyRoleMode;
            resourceInputs["externalOauthAudienceLists"] = args?.externalOauthAudienceLists;
            resourceInputs["externalOauthBlockedRolesLists"] = args?.externalOauthBlockedRolesLists;
            resourceInputs["externalOauthIssuer"] = args?.externalOauthIssuer;
            resourceInputs["externalOauthJwsKeysUrls"] = args?.externalOauthJwsKeysUrls;
            resourceInputs["externalOauthRsaPublicKey"] = args?.externalOauthRsaPublicKey;
            resourceInputs["externalOauthRsaPublicKey2"] = args?.externalOauthRsaPublicKey2;
            resourceInputs["externalOauthScopeDelimiter"] = args?.externalOauthScopeDelimiter;
            resourceInputs["externalOauthScopeMappingAttribute"] = args?.externalOauthScopeMappingAttribute;
            resourceInputs["externalOauthSnowflakeUserMappingAttribute"] = args?.externalOauthSnowflakeUserMappingAttribute;
            resourceInputs["externalOauthTokenUserMappingClaims"] = args?.externalOauthTokenUserMappingClaims;
            resourceInputs["externalOauthType"] = args?.externalOauthType;
            resourceInputs["name"] = args?.name;
            resourceInputs["describeOutputs"] = undefined /*out*/;
            resourceInputs["fullyQualifiedName"] = undefined /*out*/;
            resourceInputs["relatedParameters"] = undefined /*out*/;
            resourceInputs["showOutputs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExternalOauthIntegration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExternalOauthIntegration resources.
 */
export interface ExternalOauthIntegrationState {
    /**
     * Specifies a comment for the OAuth integration.
     */
    comment?: pulumi.Input<string>;
    /**
     * Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.
     */
    describeOutputs?: pulumi.Input<pulumi.Input<inputs.ExternalOauthIntegrationDescribeOutput>[]>;
    /**
     * Specifies whether to initiate operation of the integration or suspend it.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the list of roles that the client can set as the primary role. For more information about this resource, see docs.
     */
    externalOauthAllowedRolesLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies whether the OAuth client or user can use a role that is not defined in the OAuth access token. Valid values are (case-insensitive): `DISABLE` | `ENABLE` | `ENABLE_FOR_PRIVILEGE`.
     */
    externalOauthAnyRoleMode?: pulumi.Input<string>;
    /**
     * Specifies additional values that can be used for the access token's audience validation on top of using the Customer's Snowflake Account URL
     */
    externalOauthAudienceLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of roles that a client cannot set as the primary role. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the EXTERNAL*OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.
     */
    externalOauthBlockedRolesLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the URL to define the OAuth 2.0 authorization server.
     */
    externalOauthIssuer?: pulumi.Input<string>;
    /**
     * Specifies the endpoint or a list of endpoints from which to download public keys or certificates to validate an External OAuth access token. The maximum number of URLs that can be specified in the list is 3. If removed from the config, the resource is recreated.
     */
    externalOauthJwsKeysUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a Base64-encoded RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. If removed from the config, the resource is recreated.
     */
    externalOauthRsaPublicKey?: pulumi.Input<string>;
    /**
     * Specifies a second RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. Used for key rotation. If removed from the config, the resource is recreated.
     */
    externalOauthRsaPublicKey2?: pulumi.Input<string>;
    /**
     * Specifies the scope delimiter in the authorization token.
     */
    externalOauthScopeDelimiter?: pulumi.Input<string>;
    /**
     * Specifies the access token claim to map the access token to an account role. If removed from the config, the resource is recreated.
     */
    externalOauthScopeMappingAttribute?: pulumi.Input<string>;
    /**
     * Indicates which Snowflake user record attribute should be used to map the access token to a Snowflake user record. Valid values are (case-insensitive): `LOGIN_NAME` | `EMAIL_ADDRESS`.
     */
    externalOauthSnowflakeUserMappingAttribute?: pulumi.Input<string>;
    /**
     * Specifies the access token claim or claims that can be used to map the access token to a Snowflake user record. If removed from the config, the resource is recreated.
     */
    externalOauthTokenUserMappingClaims?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the OAuth 2.0 authorization server to be Okta, Microsoft Azure AD, Ping Identity PingFederate, or a Custom OAuth 2.0 authorization server. Valid values are (case-insensitive): `OKTA` | `AZURE` | `PING_FEDERATE` | `CUSTOM`.
     */
    externalOauthType?: pulumi.Input<string>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    fullyQualifiedName?: pulumi.Input<string>;
    /**
     * Specifies the name of the External Oath integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    name?: pulumi.Input<string>;
    /**
     * Parameters related to this security integration.
     */
    relatedParameters?: pulumi.Input<pulumi.Input<inputs.ExternalOauthIntegrationRelatedParameter>[]>;
    /**
     * Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.
     */
    showOutputs?: pulumi.Input<pulumi.Input<inputs.ExternalOauthIntegrationShowOutput>[]>;
}

/**
 * The set of arguments for constructing a ExternalOauthIntegration resource.
 */
export interface ExternalOauthIntegrationArgs {
    /**
     * Specifies a comment for the OAuth integration.
     */
    comment?: pulumi.Input<string>;
    /**
     * Specifies whether to initiate operation of the integration or suspend it.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Specifies the list of roles that the client can set as the primary role. For more information about this resource, see docs.
     */
    externalOauthAllowedRolesLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies whether the OAuth client or user can use a role that is not defined in the OAuth access token. Valid values are (case-insensitive): `DISABLE` | `ENABLE` | `ENABLE_FOR_PRIVILEGE`.
     */
    externalOauthAnyRoleMode?: pulumi.Input<string>;
    /**
     * Specifies additional values that can be used for the access token's audience validation on top of using the Customer's Snowflake Account URL
     */
    externalOauthAudienceLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of roles that a client cannot set as the primary role. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the EXTERNAL*OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.
     */
    externalOauthBlockedRolesLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the URL to define the OAuth 2.0 authorization server.
     */
    externalOauthIssuer: pulumi.Input<string>;
    /**
     * Specifies the endpoint or a list of endpoints from which to download public keys or certificates to validate an External OAuth access token. The maximum number of URLs that can be specified in the list is 3. If removed from the config, the resource is recreated.
     */
    externalOauthJwsKeysUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a Base64-encoded RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. If removed from the config, the resource is recreated.
     */
    externalOauthRsaPublicKey?: pulumi.Input<string>;
    /**
     * Specifies a second RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. Used for key rotation. If removed from the config, the resource is recreated.
     */
    externalOauthRsaPublicKey2?: pulumi.Input<string>;
    /**
     * Specifies the scope delimiter in the authorization token.
     */
    externalOauthScopeDelimiter?: pulumi.Input<string>;
    /**
     * Specifies the access token claim to map the access token to an account role. If removed from the config, the resource is recreated.
     */
    externalOauthScopeMappingAttribute?: pulumi.Input<string>;
    /**
     * Indicates which Snowflake user record attribute should be used to map the access token to a Snowflake user record. Valid values are (case-insensitive): `LOGIN_NAME` | `EMAIL_ADDRESS`.
     */
    externalOauthSnowflakeUserMappingAttribute: pulumi.Input<string>;
    /**
     * Specifies the access token claim or claims that can be used to map the access token to a Snowflake user record. If removed from the config, the resource is recreated.
     */
    externalOauthTokenUserMappingClaims: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the OAuth 2.0 authorization server to be Okta, Microsoft Azure AD, Ping Identity PingFederate, or a Custom OAuth 2.0 authorization server. Valid values are (case-insensitive): `OKTA` | `AZURE` | `PING_FEDERATE` | `CUSTOM`.
     */
    externalOauthType: pulumi.Input<string>;
    /**
     * Specifies the name of the External Oath integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    name?: pulumi.Input<string>;
}
