// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * ```sh
 * $ pulumi import snowflake:index/storageIntegration:StorageIntegration example name
 * ```
 */
export class StorageIntegration extends pulumi.CustomResource {
    /**
     * Get an existing StorageIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageIntegrationState, opts?: pulumi.CustomResourceOptions): StorageIntegration {
        return new StorageIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/storageIntegration:StorageIntegration';

    /**
     * Returns true if the given object is an instance of StorageIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageIntegration.__pulumiType;
    }

    /**
     * The consent URL that is used to create an Azure Snowflake service principle inside your tenant.
     */
    declare public /*out*/ readonly azureConsentUrl: pulumi.Output<string>;
    /**
     * This is the name of the Snowflake client application created for your account.
     */
    declare public /*out*/ readonly azureMultiTenantAppName: pulumi.Output<string>;
    /**
     * (Default: ``) Specifies the ID for your Office 365 tenant that the allowed and blocked storage accounts belong to.
     */
    declare public readonly azureTenantId: pulumi.Output<string | undefined>;
    /**
     * (Default: ``) Specifies a comment for the storage integration.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * Date and time when the storage integration was created.
     */
    declare public /*out*/ readonly createdOn: pulumi.Output<string>;
    /**
     * Outputs the result of `DESCRIBE STORAGE INTEGRATION` for the given storage integration.
     */
    declare public /*out*/ readonly describeOutputs: pulumi.Output<outputs.StorageIntegrationDescribeOutput[]>;
    /**
     * (Default: `true`)
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    declare public /*out*/ readonly fullyQualifiedName: pulumi.Output<string>;
    /**
     * String that specifies the identifier (i.e. name) for the integration; must be unique in your account.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Explicitly limits external stages that use the integration to reference one or more storage locations.
     */
    declare public readonly storageAllowedLocations: pulumi.Output<string[]>;
    /**
     * Optionally specifies an external ID that Snowflake uses to establish a trust relationship with AWS.
     */
    declare public readonly storageAwsExternalId: pulumi.Output<string | undefined>;
    /**
     * The Snowflake user that will attempt to assume the AWS role.
     */
    declare public /*out*/ readonly storageAwsIamUserArn: pulumi.Output<string>;
    /**
     * "bucket-owner-full-control" Enables support for AWS access control lists (ACLs) to grant the bucket owner full control.
     */
    declare public readonly storageAwsObjectAcl: pulumi.Output<string | undefined>;
    /**
     * (Default: ``) Specifies the Amazon Resource Name (ARN) of the AWS identity and access management (IAM) role that grants privileges on the S3 bucket containing your data files.
     */
    declare public readonly storageAwsRoleArn: pulumi.Output<string | undefined>;
    /**
     * Explicitly prohibits external stages that use the integration from referencing one or more storage locations.
     */
    declare public readonly storageBlockedLocations: pulumi.Output<string[] | undefined>;
    /**
     * This is the name of the Snowflake Google Service Account created for your account.
     */
    declare public /*out*/ readonly storageGcpServiceAccount: pulumi.Output<string>;
    /**
     * Specifies the storage provider for the integration. Valid options are: `S3` | `S3GOV` | `S3CHINA` | `GCS` | `AZURE`
     */
    declare public readonly storageProvider: pulumi.Output<string>;
    /**
     * (Default: `EXTERNAL_STAGE`) Specifies the type of the storage integration.
     */
    declare public readonly type: pulumi.Output<string | undefined>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to use outbound private connectivity to harden the security posture. Supported for AWS S3 and Azure storage providers. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
     */
    declare public readonly usePrivatelinkEndpoint: pulumi.Output<string | undefined>;

    /**
     * Create a StorageIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageIntegrationArgs | StorageIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageIntegrationState | undefined;
            resourceInputs["azureConsentUrl"] = state?.azureConsentUrl;
            resourceInputs["azureMultiTenantAppName"] = state?.azureMultiTenantAppName;
            resourceInputs["azureTenantId"] = state?.azureTenantId;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["createdOn"] = state?.createdOn;
            resourceInputs["describeOutputs"] = state?.describeOutputs;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["fullyQualifiedName"] = state?.fullyQualifiedName;
            resourceInputs["name"] = state?.name;
            resourceInputs["storageAllowedLocations"] = state?.storageAllowedLocations;
            resourceInputs["storageAwsExternalId"] = state?.storageAwsExternalId;
            resourceInputs["storageAwsIamUserArn"] = state?.storageAwsIamUserArn;
            resourceInputs["storageAwsObjectAcl"] = state?.storageAwsObjectAcl;
            resourceInputs["storageAwsRoleArn"] = state?.storageAwsRoleArn;
            resourceInputs["storageBlockedLocations"] = state?.storageBlockedLocations;
            resourceInputs["storageGcpServiceAccount"] = state?.storageGcpServiceAccount;
            resourceInputs["storageProvider"] = state?.storageProvider;
            resourceInputs["type"] = state?.type;
            resourceInputs["usePrivatelinkEndpoint"] = state?.usePrivatelinkEndpoint;
        } else {
            const args = argsOrState as StorageIntegrationArgs | undefined;
            if (args?.storageAllowedLocations === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageAllowedLocations'");
            }
            if (args?.storageProvider === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageProvider'");
            }
            resourceInputs["azureTenantId"] = args?.azureTenantId;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["name"] = args?.name;
            resourceInputs["storageAllowedLocations"] = args?.storageAllowedLocations;
            resourceInputs["storageAwsExternalId"] = args?.storageAwsExternalId;
            resourceInputs["storageAwsObjectAcl"] = args?.storageAwsObjectAcl;
            resourceInputs["storageAwsRoleArn"] = args?.storageAwsRoleArn;
            resourceInputs["storageBlockedLocations"] = args?.storageBlockedLocations;
            resourceInputs["storageProvider"] = args?.storageProvider;
            resourceInputs["type"] = args?.type;
            resourceInputs["usePrivatelinkEndpoint"] = args?.usePrivatelinkEndpoint;
            resourceInputs["azureConsentUrl"] = undefined /*out*/;
            resourceInputs["azureMultiTenantAppName"] = undefined /*out*/;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["describeOutputs"] = undefined /*out*/;
            resourceInputs["fullyQualifiedName"] = undefined /*out*/;
            resourceInputs["storageAwsIamUserArn"] = undefined /*out*/;
            resourceInputs["storageGcpServiceAccount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["azureConsentUrl"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(StorageIntegration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StorageIntegration resources.
 */
export interface StorageIntegrationState {
    /**
     * The consent URL that is used to create an Azure Snowflake service principle inside your tenant.
     */
    azureConsentUrl?: pulumi.Input<string>;
    /**
     * This is the name of the Snowflake client application created for your account.
     */
    azureMultiTenantAppName?: pulumi.Input<string>;
    /**
     * (Default: ``) Specifies the ID for your Office 365 tenant that the allowed and blocked storage accounts belong to.
     */
    azureTenantId?: pulumi.Input<string>;
    /**
     * (Default: ``) Specifies a comment for the storage integration.
     */
    comment?: pulumi.Input<string>;
    /**
     * Date and time when the storage integration was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * Outputs the result of `DESCRIBE STORAGE INTEGRATION` for the given storage integration.
     */
    describeOutputs?: pulumi.Input<pulumi.Input<inputs.StorageIntegrationDescribeOutput>[]>;
    /**
     * (Default: `true`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    fullyQualifiedName?: pulumi.Input<string>;
    /**
     * String that specifies the identifier (i.e. name) for the integration; must be unique in your account.
     */
    name?: pulumi.Input<string>;
    /**
     * Explicitly limits external stages that use the integration to reference one or more storage locations.
     */
    storageAllowedLocations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optionally specifies an external ID that Snowflake uses to establish a trust relationship with AWS.
     */
    storageAwsExternalId?: pulumi.Input<string>;
    /**
     * The Snowflake user that will attempt to assume the AWS role.
     */
    storageAwsIamUserArn?: pulumi.Input<string>;
    /**
     * "bucket-owner-full-control" Enables support for AWS access control lists (ACLs) to grant the bucket owner full control.
     */
    storageAwsObjectAcl?: pulumi.Input<string>;
    /**
     * (Default: ``) Specifies the Amazon Resource Name (ARN) of the AWS identity and access management (IAM) role that grants privileges on the S3 bucket containing your data files.
     */
    storageAwsRoleArn?: pulumi.Input<string>;
    /**
     * Explicitly prohibits external stages that use the integration from referencing one or more storage locations.
     */
    storageBlockedLocations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This is the name of the Snowflake Google Service Account created for your account.
     */
    storageGcpServiceAccount?: pulumi.Input<string>;
    /**
     * Specifies the storage provider for the integration. Valid options are: `S3` | `S3GOV` | `S3CHINA` | `GCS` | `AZURE`
     */
    storageProvider?: pulumi.Input<string>;
    /**
     * (Default: `EXTERNAL_STAGE`) Specifies the type of the storage integration.
     */
    type?: pulumi.Input<string>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to use outbound private connectivity to harden the security posture. Supported for AWS S3 and Azure storage providers. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
     */
    usePrivatelinkEndpoint?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StorageIntegration resource.
 */
export interface StorageIntegrationArgs {
    /**
     * (Default: ``) Specifies the ID for your Office 365 tenant that the allowed and blocked storage accounts belong to.
     */
    azureTenantId?: pulumi.Input<string>;
    /**
     * (Default: ``) Specifies a comment for the storage integration.
     */
    comment?: pulumi.Input<string>;
    /**
     * (Default: `true`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * String that specifies the identifier (i.e. name) for the integration; must be unique in your account.
     */
    name?: pulumi.Input<string>;
    /**
     * Explicitly limits external stages that use the integration to reference one or more storage locations.
     */
    storageAllowedLocations: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optionally specifies an external ID that Snowflake uses to establish a trust relationship with AWS.
     */
    storageAwsExternalId?: pulumi.Input<string>;
    /**
     * "bucket-owner-full-control" Enables support for AWS access control lists (ACLs) to grant the bucket owner full control.
     */
    storageAwsObjectAcl?: pulumi.Input<string>;
    /**
     * (Default: ``) Specifies the Amazon Resource Name (ARN) of the AWS identity and access management (IAM) role that grants privileges on the S3 bucket containing your data files.
     */
    storageAwsRoleArn?: pulumi.Input<string>;
    /**
     * Explicitly prohibits external stages that use the integration from referencing one or more storage locations.
     */
    storageBlockedLocations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the storage provider for the integration. Valid options are: `S3` | `S3GOV` | `S3CHINA` | `GCS` | `AZURE`
     */
    storageProvider: pulumi.Input<string>;
    /**
     * (Default: `EXTERNAL_STAGE`) Specifies the type of the storage integration.
     */
    type?: pulumi.Input<string>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to use outbound private connectivity to harden the security posture. Supported for AWS S3 and Azure storage providers. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
     */
    usePrivatelinkEndpoint?: pulumi.Input<string>;
}
