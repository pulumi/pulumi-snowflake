// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * ```sh
 * $ pulumi import snowflake:index/apiIntegration:ApiIntegration example name
 * ```
 */
export class ApiIntegration extends pulumi.CustomResource {
    /**
     * Get an existing ApiIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiIntegrationState, opts?: pulumi.CustomResourceOptions): ApiIntegration {
        return new ApiIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/apiIntegration:ApiIntegration';

    /**
     * Returns true if the given object is an instance of ApiIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiIntegration.__pulumiType;
    }

    /**
     * Explicitly limits external functions that use the integration to reference one or more HTTPS proxy service endpoints and resources within those proxies.
     */
    declare public readonly apiAllowedPrefixes: pulumi.Output<string[]>;
    /**
     * The external ID that Snowflake will use when assuming the AWS role.
     */
    declare public /*out*/ readonly apiAwsExternalId: pulumi.Output<string>;
    /**
     * The Snowflake user that will attempt to assume the AWS role.
     */
    declare public /*out*/ readonly apiAwsIamUserArn: pulumi.Output<string>;
    /**
     * (Default: ``) ARN of a cloud platform role.
     */
    declare public readonly apiAwsRoleArn: pulumi.Output<string | undefined>;
    /**
     * Lists the endpoints and resources in the HTTPS proxy service that are not allowed to be called from Snowflake.
     */
    declare public readonly apiBlockedPrefixes: pulumi.Output<string[] | undefined>;
    /**
     * The service account used for communication with the Google API Gateway.
     */
    declare public readonly apiGcpServiceAccount: pulumi.Output<string>;
    /**
     * The API key (also called a “subscription key”).
     */
    declare public readonly apiKey: pulumi.Output<string | undefined>;
    /**
     * Specifies the HTTPS proxy service type.
     */
    declare public readonly apiProvider: pulumi.Output<string>;
    /**
     * (Default: ``) The 'Application (client) id' of the Azure AD app for your remote service.
     */
    declare public readonly azureAdApplicationId: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly azureConsentUrl: pulumi.Output<string>;
    declare public /*out*/ readonly azureMultiTenantAppName: pulumi.Output<string>;
    /**
     * (Default: ``) Specifies the ID for your Office 365 tenant that all Azure API Management instances belong to.
     */
    declare public readonly azureTenantId: pulumi.Output<string | undefined>;
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * Date and time when the API integration was created.
     */
    declare public /*out*/ readonly createdOn: pulumi.Output<string>;
    /**
     * (Default: `true`) Specifies whether this API integration is enabled or disabled. If the API integration is disabled, any external function that relies on it will not work.
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    declare public /*out*/ readonly fullyQualifiedName: pulumi.Output<string>;
    /**
     * (Default: ``) The audience claim when generating the JWT (JSON Web Token) to authenticate to the Google API Gateway.
     */
    declare public readonly googleAudience: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of the API integration. This name follows the rules for Object Identifiers. The name should be unique among api integrations in your account.
     */
    declare public readonly name: pulumi.Output<string>;

    /**
     * Create a ApiIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiIntegrationArgs | ApiIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiIntegrationState | undefined;
            resourceInputs["apiAllowedPrefixes"] = state?.apiAllowedPrefixes;
            resourceInputs["apiAwsExternalId"] = state?.apiAwsExternalId;
            resourceInputs["apiAwsIamUserArn"] = state?.apiAwsIamUserArn;
            resourceInputs["apiAwsRoleArn"] = state?.apiAwsRoleArn;
            resourceInputs["apiBlockedPrefixes"] = state?.apiBlockedPrefixes;
            resourceInputs["apiGcpServiceAccount"] = state?.apiGcpServiceAccount;
            resourceInputs["apiKey"] = state?.apiKey;
            resourceInputs["apiProvider"] = state?.apiProvider;
            resourceInputs["azureAdApplicationId"] = state?.azureAdApplicationId;
            resourceInputs["azureConsentUrl"] = state?.azureConsentUrl;
            resourceInputs["azureMultiTenantAppName"] = state?.azureMultiTenantAppName;
            resourceInputs["azureTenantId"] = state?.azureTenantId;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["createdOn"] = state?.createdOn;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["fullyQualifiedName"] = state?.fullyQualifiedName;
            resourceInputs["googleAudience"] = state?.googleAudience;
            resourceInputs["name"] = state?.name;
        } else {
            const args = argsOrState as ApiIntegrationArgs | undefined;
            if (args?.apiAllowedPrefixes === undefined && !opts.urn) {
                throw new Error("Missing required property 'apiAllowedPrefixes'");
            }
            if (args?.apiProvider === undefined && !opts.urn) {
                throw new Error("Missing required property 'apiProvider'");
            }
            resourceInputs["apiAllowedPrefixes"] = args?.apiAllowedPrefixes;
            resourceInputs["apiAwsRoleArn"] = args?.apiAwsRoleArn;
            resourceInputs["apiBlockedPrefixes"] = args?.apiBlockedPrefixes;
            resourceInputs["apiGcpServiceAccount"] = args?.apiGcpServiceAccount;
            resourceInputs["apiKey"] = args?.apiKey ? pulumi.secret(args.apiKey) : undefined;
            resourceInputs["apiProvider"] = args?.apiProvider;
            resourceInputs["azureAdApplicationId"] = args?.azureAdApplicationId;
            resourceInputs["azureTenantId"] = args?.azureTenantId;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["googleAudience"] = args?.googleAudience;
            resourceInputs["name"] = args?.name;
            resourceInputs["apiAwsExternalId"] = undefined /*out*/;
            resourceInputs["apiAwsIamUserArn"] = undefined /*out*/;
            resourceInputs["azureConsentUrl"] = undefined /*out*/;
            resourceInputs["azureMultiTenantAppName"] = undefined /*out*/;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["fullyQualifiedName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ApiIntegration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApiIntegration resources.
 */
export interface ApiIntegrationState {
    /**
     * Explicitly limits external functions that use the integration to reference one or more HTTPS proxy service endpoints and resources within those proxies.
     */
    apiAllowedPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The external ID that Snowflake will use when assuming the AWS role.
     */
    apiAwsExternalId?: pulumi.Input<string>;
    /**
     * The Snowflake user that will attempt to assume the AWS role.
     */
    apiAwsIamUserArn?: pulumi.Input<string>;
    /**
     * (Default: ``) ARN of a cloud platform role.
     */
    apiAwsRoleArn?: pulumi.Input<string>;
    /**
     * Lists the endpoints and resources in the HTTPS proxy service that are not allowed to be called from Snowflake.
     */
    apiBlockedPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The service account used for communication with the Google API Gateway.
     */
    apiGcpServiceAccount?: pulumi.Input<string>;
    /**
     * The API key (also called a “subscription key”).
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Specifies the HTTPS proxy service type.
     */
    apiProvider?: pulumi.Input<string>;
    /**
     * (Default: ``) The 'Application (client) id' of the Azure AD app for your remote service.
     */
    azureAdApplicationId?: pulumi.Input<string>;
    azureConsentUrl?: pulumi.Input<string>;
    azureMultiTenantAppName?: pulumi.Input<string>;
    /**
     * (Default: ``) Specifies the ID for your Office 365 tenant that all Azure API Management instances belong to.
     */
    azureTenantId?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    /**
     * Date and time when the API integration was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * (Default: `true`) Specifies whether this API integration is enabled or disabled. If the API integration is disabled, any external function that relies on it will not work.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    fullyQualifiedName?: pulumi.Input<string>;
    /**
     * (Default: ``) The audience claim when generating the JWT (JSON Web Token) to authenticate to the Google API Gateway.
     */
    googleAudience?: pulumi.Input<string>;
    /**
     * Specifies the name of the API integration. This name follows the rules for Object Identifiers. The name should be unique among api integrations in your account.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApiIntegration resource.
 */
export interface ApiIntegrationArgs {
    /**
     * Explicitly limits external functions that use the integration to reference one or more HTTPS proxy service endpoints and resources within those proxies.
     */
    apiAllowedPrefixes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Default: ``) ARN of a cloud platform role.
     */
    apiAwsRoleArn?: pulumi.Input<string>;
    /**
     * Lists the endpoints and resources in the HTTPS proxy service that are not allowed to be called from Snowflake.
     */
    apiBlockedPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The service account used for communication with the Google API Gateway.
     */
    apiGcpServiceAccount?: pulumi.Input<string>;
    /**
     * The API key (also called a “subscription key”).
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Specifies the HTTPS proxy service type.
     */
    apiProvider: pulumi.Input<string>;
    /**
     * (Default: ``) The 'Application (client) id' of the Azure AD app for your remote service.
     */
    azureAdApplicationId?: pulumi.Input<string>;
    /**
     * (Default: ``) Specifies the ID for your Office 365 tenant that all Azure API Management instances belong to.
     */
    azureTenantId?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    /**
     * (Default: `true`) Specifies whether this API integration is enabled or disabled. If the API integration is disabled, any external function that relies on it will not work.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * (Default: ``) The audience claim when generating the JWT (JSON Web Token) to authenticate to the Google API Gateway.
     */
    googleAudience?: pulumi.Input<string>;
    /**
     * Specifies the name of the API integration. This name follows the rules for Object Identifiers. The name should be unique among api integrations in your account.
     */
    name?: pulumi.Input<string>;
}
