// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * !> **V1 release candidate** This resource was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the resource if needed. Any errors reported will be resolved with a higher priority. We encourage checking this resource out before the V1 release. Please follow the migration guide to use it.
 *
 * The resource is used for role management, where roles can be assigned privileges and, in turn, granted to users and other roles. When granted to roles they can create hierarchies of privilege structures. For more details, refer to the [official documentation](https://docs.snowflake.com/en/user-guide/security-access-control-overview).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as snowflake from "@pulumi/snowflake";
 *
 * //# Minimal
 * const minimal = new snowflake.AccountRole("minimal", {name: "role_name"});
 * //# Complete (with every optional set)
 * const complete = new snowflake.AccountRole("complete", {
 *     name: "role_name",
 *     comment: "my account role",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import snowflake:index/accountRole:AccountRole example "name"
 * ```
 */
export class AccountRole extends pulumi.CustomResource {
    /**
     * Get an existing AccountRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountRoleState, opts?: pulumi.CustomResourceOptions): AccountRole {
        return new AccountRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/accountRole:AccountRole';

    /**
     * Returns true if the given object is an instance of AccountRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccountRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountRole.__pulumiType;
    }

    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    /**
     * Outputs the result of `SHOW ROLES` for the given role.
     */
    public /*out*/ readonly showOutputs!: pulumi.Output<outputs.AccountRoleShowOutput[]>;

    /**
     * Create a AccountRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AccountRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountRoleArgs | AccountRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountRoleState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["showOutputs"] = state ? state.showOutputs : undefined;
        } else {
            const args = argsOrState as AccountRoleArgs | undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["showOutputs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccountRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccountRole resources.
 */
export interface AccountRoleState {
    comment?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Outputs the result of `SHOW ROLES` for the given role.
     */
    showOutputs?: pulumi.Input<pulumi.Input<inputs.AccountRoleShowOutput>[]>;
}

/**
 * The set of arguments for constructing a AccountRole resource.
 */
export interface AccountRoleArgs {
    comment?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
