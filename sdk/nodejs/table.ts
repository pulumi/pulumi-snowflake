// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * format is database name | schema name | table name
 *
 * ```sh
 * $ pulumi import snowflake:index/table:Table example 'databaseName|schemaName|tableName'
 * ```
 */
export class Table extends pulumi.CustomResource {
    /**
     * Get an existing Table resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TableState, opts?: pulumi.CustomResourceOptions): Table {
        return new Table(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/table:Table';

    /**
     * Returns true if the given object is an instance of Table.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Table {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Table.__pulumiType;
    }

    /**
     * (Default: `false`) Specifies whether to enable change tracking on the table. Default false.
     */
    declare public readonly changeTracking: pulumi.Output<boolean | undefined>;
    /**
     * A list of one or more table columns/expressions to be used as clustering key(s) for the table
     */
    declare public readonly clusterBies: pulumi.Output<string[] | undefined>;
    /**
     * Definitions of a column to create in the table. Minimum one required.
     */
    declare public readonly columns: pulumi.Output<outputs.TableColumn[]>;
    /**
     * Specifies a comment for the table.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the retention period for the table so that Time Travel actions (SELECT, CLONE, UNDROP) can be performed on historical data in the table. If you wish to inherit the parent schema setting then pass in the schema attribute to this argument or do not fill this parameter at all; the default value for this field is -1, which is a fallback to use Snowflake default - in this case the schema value
     */
    declare public readonly dataRetentionTimeInDays: pulumi.Output<number | undefined>;
    /**
     * The database in which to create the table.
     */
    declare public readonly database: pulumi.Output<string>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    declare public /*out*/ readonly fullyQualifiedName: pulumi.Output<string>;
    /**
     * Specifies the identifier for the table; must be unique for the database and schema in which the table is created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Name of the role that owns the table.
     */
    declare public /*out*/ readonly owner: pulumi.Output<string>;
    /**
     * Definitions of primary key constraint to create on table
     *
     * @deprecated Use snowflake.TableConstraint instead
     */
    declare public readonly primaryKey: pulumi.Output<outputs.TablePrimaryKey | undefined>;
    /**
     * The schema in which to create the table.
     */
    declare public readonly schema: pulumi.Output<string>;
    /**
     * Definitions of a tag to associate with the resource.
     *
     * @deprecated Use the 'snowflake_tag_association' resource instead.
     */
    declare public readonly tags: pulumi.Output<outputs.TableTag[] | undefined>;

    /**
     * Create a Table resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TableArgs | TableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TableState | undefined;
            resourceInputs["changeTracking"] = state?.changeTracking;
            resourceInputs["clusterBies"] = state?.clusterBies;
            resourceInputs["columns"] = state?.columns;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["dataRetentionTimeInDays"] = state?.dataRetentionTimeInDays;
            resourceInputs["database"] = state?.database;
            resourceInputs["fullyQualifiedName"] = state?.fullyQualifiedName;
            resourceInputs["name"] = state?.name;
            resourceInputs["owner"] = state?.owner;
            resourceInputs["primaryKey"] = state?.primaryKey;
            resourceInputs["schema"] = state?.schema;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as TableArgs | undefined;
            if (args?.columns === undefined && !opts.urn) {
                throw new Error("Missing required property 'columns'");
            }
            if (args?.database === undefined && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if (args?.schema === undefined && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            resourceInputs["changeTracking"] = args?.changeTracking;
            resourceInputs["clusterBies"] = args?.clusterBies;
            resourceInputs["columns"] = args?.columns;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["dataRetentionTimeInDays"] = args?.dataRetentionTimeInDays;
            resourceInputs["database"] = args?.database;
            resourceInputs["name"] = args?.name;
            resourceInputs["primaryKey"] = args?.primaryKey;
            resourceInputs["schema"] = args?.schema;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["fullyQualifiedName"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Table.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Table resources.
 */
export interface TableState {
    /**
     * (Default: `false`) Specifies whether to enable change tracking on the table. Default false.
     */
    changeTracking?: pulumi.Input<boolean>;
    /**
     * A list of one or more table columns/expressions to be used as clustering key(s) for the table
     */
    clusterBies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Definitions of a column to create in the table. Minimum one required.
     */
    columns?: pulumi.Input<pulumi.Input<inputs.TableColumn>[]>;
    /**
     * Specifies a comment for the table.
     */
    comment?: pulumi.Input<string>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the retention period for the table so that Time Travel actions (SELECT, CLONE, UNDROP) can be performed on historical data in the table. If you wish to inherit the parent schema setting then pass in the schema attribute to this argument or do not fill this parameter at all; the default value for this field is -1, which is a fallback to use Snowflake default - in this case the schema value
     */
    dataRetentionTimeInDays?: pulumi.Input<number>;
    /**
     * The database in which to create the table.
     */
    database?: pulumi.Input<string>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    fullyQualifiedName?: pulumi.Input<string>;
    /**
     * Specifies the identifier for the table; must be unique for the database and schema in which the table is created.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the role that owns the table.
     */
    owner?: pulumi.Input<string>;
    /**
     * Definitions of primary key constraint to create on table
     *
     * @deprecated Use snowflake.TableConstraint instead
     */
    primaryKey?: pulumi.Input<inputs.TablePrimaryKey>;
    /**
     * The schema in which to create the table.
     */
    schema?: pulumi.Input<string>;
    /**
     * Definitions of a tag to associate with the resource.
     *
     * @deprecated Use the 'snowflake_tag_association' resource instead.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TableTag>[]>;
}

/**
 * The set of arguments for constructing a Table resource.
 */
export interface TableArgs {
    /**
     * (Default: `false`) Specifies whether to enable change tracking on the table. Default false.
     */
    changeTracking?: pulumi.Input<boolean>;
    /**
     * A list of one or more table columns/expressions to be used as clustering key(s) for the table
     */
    clusterBies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Definitions of a column to create in the table. Minimum one required.
     */
    columns: pulumi.Input<pulumi.Input<inputs.TableColumn>[]>;
    /**
     * Specifies a comment for the table.
     */
    comment?: pulumi.Input<string>;
    /**
     * (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the retention period for the table so that Time Travel actions (SELECT, CLONE, UNDROP) can be performed on historical data in the table. If you wish to inherit the parent schema setting then pass in the schema attribute to this argument or do not fill this parameter at all; the default value for this field is -1, which is a fallback to use Snowflake default - in this case the schema value
     */
    dataRetentionTimeInDays?: pulumi.Input<number>;
    /**
     * The database in which to create the table.
     */
    database: pulumi.Input<string>;
    /**
     * Specifies the identifier for the table; must be unique for the database and schema in which the table is created.
     */
    name?: pulumi.Input<string>;
    /**
     * Definitions of primary key constraint to create on table
     *
     * @deprecated Use snowflake.TableConstraint instead
     */
    primaryKey?: pulumi.Input<inputs.TablePrimaryKey>;
    /**
     * The schema in which to create the table.
     */
    schema: pulumi.Input<string>;
    /**
     * Definitions of a tag to associate with the resource.
     *
     * @deprecated Use the 'snowflake_tag_association' resource instead.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TableTag>[]>;
}
