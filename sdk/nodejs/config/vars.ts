// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("snowflake");

/**
 * Specifies your Snowflake account name assigned by Snowflake. For information about account identifiers, see the
 * [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#account-name). Required
 * unless using `profile`. Can also be sourced from the `SNOWFLAKE_ACCOUNT_NAME` environment variable.
 */
export declare const accountName: string | undefined;
Object.defineProperty(exports, "accountName", {
    get() {
        return __config.get("accountName");
    },
    enumerable: true,
});

/**
 * Specifies the [authentication type](https://pkg.go.dev/github.com/snowflakedb/gosnowflake#AuthType) to use when
 * connecting to Snowflake. Valid options are: `SNOWFLAKE` | `OAUTH` | `EXTERNALBROWSER` | `OKTA` | `SNOWFLAKE_JWT` |
 * `TOKENACCESSOR` | `USERNAMEPASSWORDMFA`. Can also be sourced from the `SNOWFLAKE_AUTHENTICATOR` environment variable.
 */
export declare const authenticator: string | undefined;
Object.defineProperty(exports, "authenticator", {
    get() {
        return __config.get("authenticator");
    },
    enumerable: true,
});

/**
 * IP address for network checks. Can also be sourced from the `SNOWFLAKE_CLIENT_IP` environment variable.
 */
export declare const clientIp: string | undefined;
Object.defineProperty(exports, "clientIp", {
    get() {
        return __config.get("clientIp");
    },
    enumerable: true,
});

/**
 * When true the MFA token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also
 * be sourced from the `SNOWFLAKE_CLIENT_REQUEST_MFA_TOKEN` environment variable.
 */
export declare const clientRequestMfaToken: string | undefined;
Object.defineProperty(exports, "clientRequestMfaToken", {
    get() {
        return __config.get("clientRequestMfaToken");
    },
    enumerable: true,
});

/**
 * When true the ID token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be
 * sourced from the `SNOWFLAKE_CLIENT_STORE_TEMPORARY_CREDENTIAL` environment variable.
 */
export declare const clientStoreTemporaryCredential: string | undefined;
Object.defineProperty(exports, "clientStoreTemporaryCredential", {
    get() {
        return __config.get("clientStoreTemporaryCredential");
    },
    enumerable: true,
});

/**
 * The timeout in seconds for the client to complete the authentication. Can also be sourced from the
 * `SNOWFLAKE_CLIENT_TIMEOUT` environment variable.
 */
export declare const clientTimeout: number | undefined;
Object.defineProperty(exports, "clientTimeout", {
    get() {
        return __config.getObject<number>("clientTimeout");
    },
    enumerable: true,
});

/**
 * Indicates whether console login should be disabled in the driver. Can also be sourced from the
 * `SNOWFLAKE_DISABLE_CONSOLE_LOGIN` environment variable.
 */
export declare const disableConsoleLogin: string | undefined;
Object.defineProperty(exports, "disableConsoleLogin", {
    get() {
        return __config.get("disableConsoleLogin");
    },
    enumerable: true,
});

/**
 * Disables HTAP query context cache in the driver. Can also be sourced from the `SNOWFLAKE_DISABLE_QUERY_CONTEXT_CACHE`
 * environment variable.
 */
export declare const disableQueryContextCache: boolean | undefined;
Object.defineProperty(exports, "disableQueryContextCache", {
    get() {
        return __config.getObject<boolean>("disableQueryContextCache");
    },
    enumerable: true,
});

/**
 * Disables telemetry in the driver. Can also be sourced from the `DISABLE_TELEMETRY` environment variable.
 */
export declare const disableTelemetry: boolean | undefined;
Object.defineProperty(exports, "disableTelemetry", {
    get() {
        return __config.getObject<boolean>("disableTelemetry");
    },
    enumerable: true,
});

/**
 * Specifies the logging level to be used by the driver. Valid options are: `trace` | `debug` | `info` | `print` |
 * `warning` | `error` | `fatal` | `panic`. Can also be sourced from the `SNOWFLAKE_DRIVER_TRACING` environment variable.
 */
export declare const driverTracing: string | undefined;
Object.defineProperty(exports, "driverTracing", {
    get() {
        return __config.get("driverTracing");
    },
    enumerable: true,
});

/**
 * The timeout in seconds for the external browser to complete the authentication. Can also be sourced from the
 * `SNOWFLAKE_EXTERNAL_BROWSER_TIMEOUT` environment variable.
 */
export declare const externalBrowserTimeout: number | undefined;
Object.defineProperty(exports, "externalBrowserTimeout", {
    get() {
        return __config.getObject<number>("externalBrowserTimeout");
    },
    enumerable: true,
});

/**
 * Specifies a custom host value used by the driver for privatelink connections. Can also be sourced from the
 * `SNOWFLAKE_HOST` environment variable.
 */
export declare const host: string | undefined;
Object.defineProperty(exports, "host", {
    get() {
        return __config.get("host") ?? utilities.getEnv("SNOWFLAKE_HOST");
    },
    enumerable: true,
});

/**
 * Should retried request contain retry reason. Can also be sourced from the `SNOWFLAKE_INCLUDE_RETRY_REASON` environment
 * variable.
 */
export declare const includeRetryReason: string | undefined;
Object.defineProperty(exports, "includeRetryReason", {
    get() {
        return __config.get("includeRetryReason");
    },
    enumerable: true,
});

/**
 * If true, bypass the Online Certificate Status Protocol (OCSP) certificate revocation check. IMPORTANT: Change the
 * default value for testing or emergency situations only. Can also be sourced from the `SNOWFLAKE_INSECURE_MODE`
 * environment variable.
 */
export declare const insecureMode: boolean | undefined;
Object.defineProperty(exports, "insecureMode", {
    get() {
        return __config.getObject<boolean>("insecureMode");
    },
    enumerable: true,
});

/**
 * The timeout in seconds for the JWT client to complete the authentication. Can also be sourced from the
 * `SNOWFLAKE_JWT_CLIENT_TIMEOUT` environment variable.
 */
export declare const jwtClientTimeout: number | undefined;
Object.defineProperty(exports, "jwtClientTimeout", {
    get() {
        return __config.getObject<number>("jwtClientTimeout");
    },
    enumerable: true,
});

/**
 * JWT expire after timeout in seconds. Can also be sourced from the `SNOWFLAKE_JWT_EXPIRE_TIMEOUT` environment variable.
 */
export declare const jwtExpireTimeout: number | undefined;
Object.defineProperty(exports, "jwtExpireTimeout", {
    get() {
        return __config.getObject<number>("jwtExpireTimeout");
    },
    enumerable: true,
});

/**
 * Enables the session to persist even after the connection is closed. Can also be sourced from the
 * `SNOWFLAKE_KEEP_SESSION_ALIVE` environment variable.
 */
export declare const keepSessionAlive: boolean | undefined;
Object.defineProperty(exports, "keepSessionAlive", {
    get() {
        return __config.getObject<boolean>("keepSessionAlive");
    },
    enumerable: true,
});

/**
 * Login retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the
 * `SNOWFLAKE_LOGIN_TIMEOUT` environment variable.
 */
export declare const loginTimeout: number | undefined;
Object.defineProperty(exports, "loginTimeout", {
    get() {
        return __config.getObject<number>("loginTimeout");
    },
    enumerable: true,
});

/**
 * Specifies how many times non-periodic HTTP request can be retried by the driver. Can also be sourced from the
 * `SNOWFLAKE_MAX_RETRY_COUNT` environment variable.
 */
export declare const maxRetryCount: number | undefined;
Object.defineProperty(exports, "maxRetryCount", {
    get() {
        return __config.getObject<number>("maxRetryCount");
    },
    enumerable: true,
});

/**
 * True represents OCSP fail open mode. False represents OCSP fail closed mode. Fail open true by default. Can also be
 * sourced from the `SNOWFLAKE_OCSP_FAIL_OPEN` environment variable.
 */
export declare const ocspFailOpen: string | undefined;
Object.defineProperty(exports, "ocspFailOpen", {
    get() {
        return __config.get("ocspFailOpen");
    },
    enumerable: true,
});

/**
 * The URL of the Okta server. e.g. https://example.okta.com. Okta URL host needs to to have a suffix `okta.com`. Read more
 * in Snowflake [docs](https://docs.snowflake.com/en/user-guide/oauth-okta). Can also be sourced from the
 * `SNOWFLAKE_OKTA_URL` environment variable.
 */
export declare const oktaUrl: string | undefined;
Object.defineProperty(exports, "oktaUrl", {
    get() {
        return __config.get("oktaUrl");
    },
    enumerable: true,
});

/**
 * Specifies your Snowflake organization name assigned by Snowflake. For information about account identifiers, see the
 * [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#organization-name). Required
 * unless using `profile`. Can also be sourced from the `SNOWFLAKE_ORGANIZATION_NAME` environment variable.
 */
export declare const organizationName: string | undefined;
Object.defineProperty(exports, "organizationName", {
    get() {
        return __config.get("organizationName");
    },
    enumerable: true,
});

/**
 * Sets other connection (i.e. session) parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters).
 * This field can not be set with environmental variables.
 */
export declare const params: {[key: string]: string} | undefined;
Object.defineProperty(exports, "params", {
    get() {
        return __config.getObject<{[key: string]: string}>("params");
    },
    enumerable: true,
});

/**
 * Specifies the passcode provided by Duo when using multi-factor authentication (MFA) for login. Can also be sourced from
 * the `SNOWFLAKE_PASSCODE` environment variable.
 */
export declare const passcode: string | undefined;
Object.defineProperty(exports, "passcode", {
    get() {
        return __config.get("passcode");
    },
    enumerable: true,
});

/**
 * False by default. Set to true if the MFA passcode is embedded to the configured password. Can also be sourced from the
 * `SNOWFLAKE_PASSCODE_IN_PASSWORD` environment variable.
 */
export declare const passcodeInPassword: boolean | undefined;
Object.defineProperty(exports, "passcodeInPassword", {
    get() {
        return __config.getObject<boolean>("passcodeInPassword");
    },
    enumerable: true,
});

/**
 * Password for user + password or
 * [token](https://docs.snowflake.com/en/user-guide/programmatic-access-tokens#generating-a-programmatic-access-token) for
 * [PAT auth](https://docs.snowflake.com/en/user-guide/programmatic-access-tokens). Cannot be used with `privateKey` and
 * `privateKeyPassphrase`. Can also be sourced from the `SNOWFLAKE_PASSWORD` environment variable.
 */
export declare const password: string | undefined;
Object.defineProperty(exports, "password", {
    get() {
        return __config.get("password") ?? utilities.getEnv("SNOWFLAKE_PASSWORD");
    },
    enumerable: true,
});

/**
 * Specifies a custom port value used by the driver for privatelink connections. Can also be sourced from the
 * `SNOWFLAKE_PORT` environment variable.
 */
export declare const port: number | undefined;
Object.defineProperty(exports, "port", {
    get() {
        return __config.getObject<number>("port") ?? utilities.getEnvNumber("SNOWFLAKE_PORT");
    },
    enumerable: true,
});

export declare const previewFeaturesEnabled: string[] | undefined;
Object.defineProperty(exports, "previewFeaturesEnabled", {
    get() {
        return __config.getObject<string[]>("previewFeaturesEnabled");
    },
    enumerable: true,
});

/**
 * Private Key for username+private-key auth. Cannot be used with `password`. Can also be sourced from the
 * `SNOWFLAKE_PRIVATE_KEY` environment variable.
 */
export declare const privateKey: string | undefined;
Object.defineProperty(exports, "privateKey", {
    get() {
        return __config.get("privateKey");
    },
    enumerable: true,
});

/**
 * Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and
 * des-ede3-cbc. Can also be sourced from the `SNOWFLAKE_PRIVATE_KEY_PASSPHRASE` environment variable.
 */
export declare const privateKeyPassphrase: string | undefined;
Object.defineProperty(exports, "privateKeyPassphrase", {
    get() {
        return __config.get("privateKeyPassphrase") ?? utilities.getEnv("SNOWFLAKE_PRIVATE_KEY_PASSPHRASE");
    },
    enumerable: true,
});

/**
 * Sets the profile to read from ~/.snowflake/config file. Can also be sourced from the `SNOWFLAKE_PROFILE` environment
 * variable.
 */
export declare const profile: string | undefined;
Object.defineProperty(exports, "profile", {
    get() {
        return __config.get("profile");
    },
    enumerable: true,
});

/**
 * A protocol used in the connection. Valid options are: `http` | `https`. Can also be sourced from the
 * `SNOWFLAKE_PROTOCOL` environment variable.
 */
export declare const protocol: string | undefined;
Object.defineProperty(exports, "protocol", {
    get() {
        return __config.get("protocol") ?? utilities.getEnv("SNOWFLAKE_PROTOCOL");
    },
    enumerable: true,
});

/**
 * request retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the
 * `SNOWFLAKE_REQUEST_TIMEOUT` environment variable.
 */
export declare const requestTimeout: number | undefined;
Object.defineProperty(exports, "requestTimeout", {
    get() {
        return __config.getObject<number>("requestTimeout");
    },
    enumerable: true,
});

/**
 * Specifies the role to use by default for accessing Snowflake objects in the client session. Can also be sourced from the
 * `SNOWFLAKE_ROLE` environment variable.
 */
export declare const role: string | undefined;
Object.defineProperty(exports, "role", {
    get() {
        return __config.get("role") ?? utilities.getEnv("SNOWFLAKE_ROLE");
    },
    enumerable: true,
});

/**
 * False by default. Skips TOML configuration file permission verification. This flag has no effect on Windows systems, as
 * the permissions are not checked on this platform. Instead of skipping the permissions verification, we recommend setting
 * the proper privileges - see the section below. Can also be sourced from the
 * `SNOWFLAKE_SKIP_TOML_FILE_PERMISSION_VERIFICATION` environment variable.
 */
export declare const skipTomlFilePermissionVerification: boolean | undefined;
Object.defineProperty(exports, "skipTomlFilePermissionVerification", {
    get() {
        return __config.getObject<boolean>("skipTomlFilePermissionVerification");
    },
    enumerable: true,
});

/**
 * Sets temporary directory used by the driver for operations like encrypting, compressing etc. Can also be sourced from
 * the `SNOWFLAKE_TMP_DIRECTORY_PATH` environment variable.
 */
export declare const tmpDirectoryPath: string | undefined;
Object.defineProperty(exports, "tmpDirectoryPath", {
    get() {
        return __config.get("tmpDirectoryPath");
    },
    enumerable: true,
});

/**
 * Token to use for OAuth and other forms of token based auth. Can also be sourced from the `SNOWFLAKE_TOKEN` environment
 * variable.
 */
export declare const token: string | undefined;
Object.defineProperty(exports, "token", {
    get() {
        return __config.get("token");
    },
    enumerable: true,
});

export declare const tokenAccessor: outputs.config.TokenAccessor | undefined;
Object.defineProperty(exports, "tokenAccessor", {
    get() {
        return __config.getObject<outputs.config.TokenAccessor>("tokenAccessor");
    },
    enumerable: true,
});

/**
 * False by default. When this is set to true, the provider expects the legacy TOML format. Otherwise, it expects the new
 * format. See more in the section below Can also be sourced from the `SNOWFLAKE_USE_LEGACY_TOML_FILE` environment
 * variable.
 */
export declare const useLegacyTomlFile: boolean | undefined;
Object.defineProperty(exports, "useLegacyTomlFile", {
    get() {
        return __config.getObject<boolean>("useLegacyTomlFile");
    },
    enumerable: true,
});

/**
 * Username. Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_USER` environment variable.
 */
export declare const user: string | undefined;
Object.defineProperty(exports, "user", {
    get() {
        return __config.get("user");
    },
    enumerable: true,
});

/**
 * True by default. If false, disables the validation checks for Database, Schema, Warehouse and Role at the time a
 * connection is established. Can also be sourced from the `SNOWFLAKE_VALIDATE_DEFAULT_PARAMETERS` environment variable.
 */
export declare const validateDefaultParameters: string | undefined;
Object.defineProperty(exports, "validateDefaultParameters", {
    get() {
        return __config.get("validateDefaultParameters");
    },
    enumerable: true,
});

/**
 * Specifies the virtual warehouse to use by default for queries, loading, etc. in the client session. Can also be sourced
 * from the `SNOWFLAKE_WAREHOUSE` environment variable.
 */
export declare const warehouse: string | undefined;
Object.defineProperty(exports, "warehouse", {
    get() {
        return __config.get("warehouse") ?? utilities.getEnv("SNOWFLAKE_WAREHOUSE");
    },
    enumerable: true,
});

