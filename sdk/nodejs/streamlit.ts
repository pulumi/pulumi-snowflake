// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * !> **V1 release candidate** This resource was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the resource if needed. Any errors reported will be resolved with a higher priority. We encourage checking this resource out before the V1 release. Please follow the migration guide to use it.
 *
 * Resource used to manage streamlits objects. For more information, check [streamlit documentation](https://docs.snowflake.com/en/sql-reference/commands-streamlit).
 *
 * ## Import
 *
 * format is database name | schema name | streamlit name
 *
 * ```sh
 * $ pulumi import snowflake:index/streamlit:Streamlit example 'dbName|schemaName|streamlitName'
 * ```
 */
export class Streamlit extends pulumi.CustomResource {
    /**
     * Get an existing Streamlit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamlitState, opts?: pulumi.CustomResourceOptions): Streamlit {
        return new Streamlit(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/streamlit:Streamlit';

    /**
     * Returns true if the given object is an instance of Streamlit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Streamlit {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Streamlit.__pulumiType;
    }

    /**
     * Specifies a comment for the streamlit.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * The database in which to create the streamlit
     */
    public readonly database!: pulumi.Output<string>;
    /**
     * Outputs the result of `DESCRIBE STREAMLIT` for the given streamlit.
     */
    public /*out*/ readonly describeOutputs!: pulumi.Output<outputs.StreamlitDescribeOutput[]>;
    /**
     * Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml file.
     */
    public readonly directoryLocation!: pulumi.Output<string | undefined>;
    /**
     * External access integrations connected to the Streamlit.
     */
    public readonly externalAccessIntegrations!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the filename of the Streamlit Python application. This filename is relative to the value of `rootLocation`
     */
    public readonly mainFile!: pulumi.Output<string>;
    /**
     * String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the warehouse where SQL queries issued by the Streamlit application are run.
     */
    public readonly queryWarehouse!: pulumi.Output<string | undefined>;
    /**
     * The schema in which to create the streamlit.
     */
    public readonly schema!: pulumi.Output<string>;
    /**
     * Outputs the result of `SHOW STREAMLIT` for the given streamli.
     */
    public /*out*/ readonly showOutputs!: pulumi.Output<outputs.StreamlitShowOutput[]>;
    /**
     * The stage in which streamlit files are located.
     */
    public readonly stage!: pulumi.Output<string>;
    /**
     * Specifies a title for the Streamlit app to display in Snowsight.
     */
    public readonly title!: pulumi.Output<string | undefined>;

    /**
     * Create a Streamlit resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamlitArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamlitArgs | StreamlitState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamlitState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["describeOutputs"] = state ? state.describeOutputs : undefined;
            resourceInputs["directoryLocation"] = state ? state.directoryLocation : undefined;
            resourceInputs["externalAccessIntegrations"] = state ? state.externalAccessIntegrations : undefined;
            resourceInputs["mainFile"] = state ? state.mainFile : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["queryWarehouse"] = state ? state.queryWarehouse : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["showOutputs"] = state ? state.showOutputs : undefined;
            resourceInputs["stage"] = state ? state.stage : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
        } else {
            const args = argsOrState as StreamlitArgs | undefined;
            if ((!args || args.database === undefined) && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if ((!args || args.mainFile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mainFile'");
            }
            if ((!args || args.schema === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            if ((!args || args.stage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stage'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["directoryLocation"] = args ? args.directoryLocation : undefined;
            resourceInputs["externalAccessIntegrations"] = args ? args.externalAccessIntegrations : undefined;
            resourceInputs["mainFile"] = args ? args.mainFile : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["queryWarehouse"] = args ? args.queryWarehouse : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["stage"] = args ? args.stage : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["describeOutputs"] = undefined /*out*/;
            resourceInputs["showOutputs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Streamlit.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Streamlit resources.
 */
export interface StreamlitState {
    /**
     * Specifies a comment for the streamlit.
     */
    comment?: pulumi.Input<string>;
    /**
     * The database in which to create the streamlit
     */
    database?: pulumi.Input<string>;
    /**
     * Outputs the result of `DESCRIBE STREAMLIT` for the given streamlit.
     */
    describeOutputs?: pulumi.Input<pulumi.Input<inputs.StreamlitDescribeOutput>[]>;
    /**
     * Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml file.
     */
    directoryLocation?: pulumi.Input<string>;
    /**
     * External access integrations connected to the Streamlit.
     */
    externalAccessIntegrations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the filename of the Streamlit Python application. This filename is relative to the value of `rootLocation`
     */
    mainFile?: pulumi.Input<string>;
    /**
     * String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the warehouse where SQL queries issued by the Streamlit application are run.
     */
    queryWarehouse?: pulumi.Input<string>;
    /**
     * The schema in which to create the streamlit.
     */
    schema?: pulumi.Input<string>;
    /**
     * Outputs the result of `SHOW STREAMLIT` for the given streamli.
     */
    showOutputs?: pulumi.Input<pulumi.Input<inputs.StreamlitShowOutput>[]>;
    /**
     * The stage in which streamlit files are located.
     */
    stage?: pulumi.Input<string>;
    /**
     * Specifies a title for the Streamlit app to display in Snowsight.
     */
    title?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Streamlit resource.
 */
export interface StreamlitArgs {
    /**
     * Specifies a comment for the streamlit.
     */
    comment?: pulumi.Input<string>;
    /**
     * The database in which to create the streamlit
     */
    database: pulumi.Input<string>;
    /**
     * Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml file.
     */
    directoryLocation?: pulumi.Input<string>;
    /**
     * External access integrations connected to the Streamlit.
     */
    externalAccessIntegrations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the filename of the Streamlit Python application. This filename is relative to the value of `rootLocation`
     */
    mainFile: pulumi.Input<string>;
    /**
     * String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the warehouse where SQL queries issued by the Streamlit application are run.
     */
    queryWarehouse?: pulumi.Input<string>;
    /**
     * The schema in which to create the streamlit.
     */
    schema: pulumi.Input<string>;
    /**
     * The stage in which streamlit files are located.
     */
    stage: pulumi.Input<string>;
    /**
     * Specifies a title for the Streamlit app to display in Snowsight.
     */
    title?: pulumi.Input<string>;
}
