// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * ```sh
 * $ pulumi import snowflake:index/streamlit:Streamlit example '"<database_name>"."<schema_name>"."<streamlit_name>"'
 * ```
 */
export class Streamlit extends pulumi.CustomResource {
    /**
     * Get an existing Streamlit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamlitState, opts?: pulumi.CustomResourceOptions): Streamlit {
        return new Streamlit(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/streamlit:Streamlit';

    /**
     * Returns true if the given object is an instance of Streamlit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Streamlit {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Streamlit.__pulumiType;
    }

    /**
     * Specifies a comment for the streamlit.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * The database in which to create the streamlit Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    declare public readonly database: pulumi.Output<string>;
    /**
     * Outputs the result of `DESCRIBE STREAMLIT` for the given streamlit.
     */
    declare public /*out*/ readonly describeOutputs: pulumi.Output<outputs.StreamlitDescribeOutput[]>;
    /**
     * Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml file.
     */
    declare public readonly directoryLocation: pulumi.Output<string | undefined>;
    /**
     * External access integrations connected to the Streamlit.
     */
    declare public readonly externalAccessIntegrations: pulumi.Output<string[] | undefined>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    declare public /*out*/ readonly fullyQualifiedName: pulumi.Output<string>;
    /**
     * Specifies the filename of the Streamlit Python application. This filename is relative to the value of `directoryLocation`
     */
    declare public readonly mainFile: pulumi.Output<string>;
    /**
     * String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies the warehouse where SQL queries issued by the Streamlit application are run. Due to Snowflake limitations warehouse identifier can consist of only upper-cased letters. For more information about this resource, see docs.
     */
    declare public readonly queryWarehouse: pulumi.Output<string | undefined>;
    /**
     * The schema in which to create the streamlit. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    declare public readonly schema: pulumi.Output<string>;
    /**
     * Outputs the result of `SHOW STREAMLIT` for the given streamlit.
     */
    declare public /*out*/ readonly showOutputs: pulumi.Output<outputs.StreamlitShowOutput[]>;
    /**
     * The stage in which streamlit files are located. For more information about this resource, see docs.
     */
    declare public readonly stage: pulumi.Output<string>;
    /**
     * Specifies a title for the Streamlit app to display in Snowsight.
     */
    declare public readonly title: pulumi.Output<string | undefined>;

    /**
     * Create a Streamlit resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamlitArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamlitArgs | StreamlitState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamlitState | undefined;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["database"] = state?.database;
            resourceInputs["describeOutputs"] = state?.describeOutputs;
            resourceInputs["directoryLocation"] = state?.directoryLocation;
            resourceInputs["externalAccessIntegrations"] = state?.externalAccessIntegrations;
            resourceInputs["fullyQualifiedName"] = state?.fullyQualifiedName;
            resourceInputs["mainFile"] = state?.mainFile;
            resourceInputs["name"] = state?.name;
            resourceInputs["queryWarehouse"] = state?.queryWarehouse;
            resourceInputs["schema"] = state?.schema;
            resourceInputs["showOutputs"] = state?.showOutputs;
            resourceInputs["stage"] = state?.stage;
            resourceInputs["title"] = state?.title;
        } else {
            const args = argsOrState as StreamlitArgs | undefined;
            if (args?.database === undefined && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if (args?.mainFile === undefined && !opts.urn) {
                throw new Error("Missing required property 'mainFile'");
            }
            if (args?.schema === undefined && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            if (args?.stage === undefined && !opts.urn) {
                throw new Error("Missing required property 'stage'");
            }
            resourceInputs["comment"] = args?.comment;
            resourceInputs["database"] = args?.database;
            resourceInputs["directoryLocation"] = args?.directoryLocation;
            resourceInputs["externalAccessIntegrations"] = args?.externalAccessIntegrations;
            resourceInputs["mainFile"] = args?.mainFile;
            resourceInputs["name"] = args?.name;
            resourceInputs["queryWarehouse"] = args?.queryWarehouse;
            resourceInputs["schema"] = args?.schema;
            resourceInputs["stage"] = args?.stage;
            resourceInputs["title"] = args?.title;
            resourceInputs["describeOutputs"] = undefined /*out*/;
            resourceInputs["fullyQualifiedName"] = undefined /*out*/;
            resourceInputs["showOutputs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Streamlit.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Streamlit resources.
 */
export interface StreamlitState {
    /**
     * Specifies a comment for the streamlit.
     */
    comment?: pulumi.Input<string>;
    /**
     * The database in which to create the streamlit Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    database?: pulumi.Input<string>;
    /**
     * Outputs the result of `DESCRIBE STREAMLIT` for the given streamlit.
     */
    describeOutputs?: pulumi.Input<pulumi.Input<inputs.StreamlitDescribeOutput>[]>;
    /**
     * Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml file.
     */
    directoryLocation?: pulumi.Input<string>;
    /**
     * External access integrations connected to the Streamlit.
     */
    externalAccessIntegrations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
     */
    fullyQualifiedName?: pulumi.Input<string>;
    /**
     * Specifies the filename of the Streamlit Python application. This filename is relative to the value of `directoryLocation`
     */
    mainFile?: pulumi.Input<string>;
    /**
     * String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the warehouse where SQL queries issued by the Streamlit application are run. Due to Snowflake limitations warehouse identifier can consist of only upper-cased letters. For more information about this resource, see docs.
     */
    queryWarehouse?: pulumi.Input<string>;
    /**
     * The schema in which to create the streamlit. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    schema?: pulumi.Input<string>;
    /**
     * Outputs the result of `SHOW STREAMLIT` for the given streamlit.
     */
    showOutputs?: pulumi.Input<pulumi.Input<inputs.StreamlitShowOutput>[]>;
    /**
     * The stage in which streamlit files are located. For more information about this resource, see docs.
     */
    stage?: pulumi.Input<string>;
    /**
     * Specifies a title for the Streamlit app to display in Snowsight.
     */
    title?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Streamlit resource.
 */
export interface StreamlitArgs {
    /**
     * Specifies a comment for the streamlit.
     */
    comment?: pulumi.Input<string>;
    /**
     * The database in which to create the streamlit Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    database: pulumi.Input<string>;
    /**
     * Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml file.
     */
    directoryLocation?: pulumi.Input<string>;
    /**
     * External access integrations connected to the Streamlit.
     */
    externalAccessIntegrations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the filename of the Streamlit Python application. This filename is relative to the value of `directoryLocation`
     */
    mainFile: pulumi.Input<string>;
    /**
     * String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the warehouse where SQL queries issued by the Streamlit application are run. Due to Snowflake limitations warehouse identifier can consist of only upper-cased letters. For more information about this resource, see docs.
     */
    queryWarehouse?: pulumi.Input<string>;
    /**
     * The schema in which to create the streamlit. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
     */
    schema: pulumi.Input<string>;
    /**
     * The stage in which streamlit files are located. For more information about this resource, see docs.
     */
    stage: pulumi.Input<string>;
    /**
     * Specifies a title for the Streamlit app to display in Snowsight.
     */
    title?: pulumi.Input<string>;
}
