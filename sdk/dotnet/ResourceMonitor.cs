// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    /// <summary>
    /// ## Import
    /// 
    /// format is the resource monitor name
    /// 
    /// ```sh
    /// $ pulumi import snowflake:index/resourceMonitor:ResourceMonitor example 'resourceMonitorName'
    /// ```
    /// </summary>
    [SnowflakeResourceType("snowflake:index/resourceMonitor:ResourceMonitor")]
    public partial class ResourceMonitor : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The number of credits allocated to the resource monitor per frequency interval. When total usage for all warehouses assigned to the monitor reaches this number for the current frequency interval, the resource monitor is considered to be at 100% of quota.
        /// </summary>
        [Output("creditQuota")]
        public Output<int?> CreditQuota { get; private set; } = null!;

        /// <summary>
        /// The date and time when the resource monitor suspends the assigned warehouses.
        /// </summary>
        [Output("endTimestamp")]
        public Output<string?> EndTimestamp { get; private set; } = null!;

        /// <summary>
        /// The frequency interval at which the credit usage resets to 0. Valid values are (case-insensitive): `MONTHLY` | `DAILY` | `WEEKLY` | `YEARLY` | `NEVER`. If you set a `frequency` for a resource monitor, you must also set `start_timestamp`. If you specify `NEVER` for the frequency, the credit usage for the warehouse does not reset. After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
        /// </summary>
        [Output("frequency")]
        public Output<string?> Frequency { get; private set; } = null!;

        /// <summary>
        /// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
        /// </summary>
        [Output("fullyQualifiedName")]
        public Output<string> FullyQualifiedName { get; private set; } = null!;

        /// <summary>
        /// Identifier for the resource monitor; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies a list of percentages of the credit quota. After reaching any of the values the users passed in the notify_users field will be notified (to receive the notification they should have notifications enabled). Values over 100 are supported.
        /// </summary>
        [Output("notifyTriggers")]
        public Output<ImmutableArray<int>> NotifyTriggers { get; private set; } = null!;

        /// <summary>
        /// Specifies the list of users (their identifiers) to receive email notifications on resource monitors.
        /// </summary>
        [Output("notifyUsers")]
        public Output<ImmutableArray<string>> NotifyUsers { get; private set; } = null!;

        /// <summary>
        /// Outputs the result of `SHOW RESOURCE MONITORS` for the given resource monitor.
        /// </summary>
        [Output("showOutputs")]
        public Output<ImmutableArray<Outputs.ResourceMonitorShowOutput>> ShowOutputs { get; private set; } = null!;

        /// <summary>
        /// The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses. If you set a `start_timestamp` for a resource monitor, you must also set `frequency`.  After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
        /// </summary>
        [Output("startTimestamp")]
        public Output<string?> StartTimestamp { get; private set; } = null!;

        /// <summary>
        /// Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses immediately cancel any currently running queries or statements. In addition, this action sends a notification to all users who have enabled notifications for themselves.
        /// </summary>
        [Output("suspendImmediateTrigger")]
        public Output<int?> SuspendImmediateTrigger { get; private set; } = null!;

        /// <summary>
        /// Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses while allowing currently running queries to complete will be suspended. No new queries can be executed by the warehouses until the credit quota for the resource monitor is increased. In addition, this action sends a notification to all users who have enabled notifications for themselves.
        /// </summary>
        [Output("suspendTrigger")]
        public Output<int?> SuspendTrigger { get; private set; } = null!;


        /// <summary>
        /// Create a ResourceMonitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ResourceMonitor(string name, ResourceMonitorArgs? args = null, CustomResourceOptions? options = null)
            : base("snowflake:index/resourceMonitor:ResourceMonitor", name, args ?? new ResourceMonitorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ResourceMonitor(string name, Input<string> id, ResourceMonitorState? state = null, CustomResourceOptions? options = null)
            : base("snowflake:index/resourceMonitor:ResourceMonitor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ResourceMonitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ResourceMonitor Get(string name, Input<string> id, ResourceMonitorState? state = null, CustomResourceOptions? options = null)
        {
            return new ResourceMonitor(name, id, state, options);
        }
    }

    public sealed class ResourceMonitorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of credits allocated to the resource monitor per frequency interval. When total usage for all warehouses assigned to the monitor reaches this number for the current frequency interval, the resource monitor is considered to be at 100% of quota.
        /// </summary>
        [Input("creditQuota")]
        public Input<int>? CreditQuota { get; set; }

        /// <summary>
        /// The date and time when the resource monitor suspends the assigned warehouses.
        /// </summary>
        [Input("endTimestamp")]
        public Input<string>? EndTimestamp { get; set; }

        /// <summary>
        /// The frequency interval at which the credit usage resets to 0. Valid values are (case-insensitive): `MONTHLY` | `DAILY` | `WEEKLY` | `YEARLY` | `NEVER`. If you set a `frequency` for a resource monitor, you must also set `start_timestamp`. If you specify `NEVER` for the frequency, the credit usage for the warehouse does not reset. After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
        /// </summary>
        [Input("frequency")]
        public Input<string>? Frequency { get; set; }

        /// <summary>
        /// Identifier for the resource monitor; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifyTriggers")]
        private InputList<int>? _notifyTriggers;

        /// <summary>
        /// Specifies a list of percentages of the credit quota. After reaching any of the values the users passed in the notify_users field will be notified (to receive the notification they should have notifications enabled). Values over 100 are supported.
        /// </summary>
        public InputList<int> NotifyTriggers
        {
            get => _notifyTriggers ?? (_notifyTriggers = new InputList<int>());
            set => _notifyTriggers = value;
        }

        [Input("notifyUsers")]
        private InputList<string>? _notifyUsers;

        /// <summary>
        /// Specifies the list of users (their identifiers) to receive email notifications on resource monitors.
        /// </summary>
        public InputList<string> NotifyUsers
        {
            get => _notifyUsers ?? (_notifyUsers = new InputList<string>());
            set => _notifyUsers = value;
        }

        /// <summary>
        /// The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses. If you set a `start_timestamp` for a resource monitor, you must also set `frequency`.  After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
        /// </summary>
        [Input("startTimestamp")]
        public Input<string>? StartTimestamp { get; set; }

        /// <summary>
        /// Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses immediately cancel any currently running queries or statements. In addition, this action sends a notification to all users who have enabled notifications for themselves.
        /// </summary>
        [Input("suspendImmediateTrigger")]
        public Input<int>? SuspendImmediateTrigger { get; set; }

        /// <summary>
        /// Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses while allowing currently running queries to complete will be suspended. No new queries can be executed by the warehouses until the credit quota for the resource monitor is increased. In addition, this action sends a notification to all users who have enabled notifications for themselves.
        /// </summary>
        [Input("suspendTrigger")]
        public Input<int>? SuspendTrigger { get; set; }

        public ResourceMonitorArgs()
        {
        }
        public static new ResourceMonitorArgs Empty => new ResourceMonitorArgs();
    }

    public sealed class ResourceMonitorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of credits allocated to the resource monitor per frequency interval. When total usage for all warehouses assigned to the monitor reaches this number for the current frequency interval, the resource monitor is considered to be at 100% of quota.
        /// </summary>
        [Input("creditQuota")]
        public Input<int>? CreditQuota { get; set; }

        /// <summary>
        /// The date and time when the resource monitor suspends the assigned warehouses.
        /// </summary>
        [Input("endTimestamp")]
        public Input<string>? EndTimestamp { get; set; }

        /// <summary>
        /// The frequency interval at which the credit usage resets to 0. Valid values are (case-insensitive): `MONTHLY` | `DAILY` | `WEEKLY` | `YEARLY` | `NEVER`. If you set a `frequency` for a resource monitor, you must also set `start_timestamp`. If you specify `NEVER` for the frequency, the credit usage for the warehouse does not reset. After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
        /// </summary>
        [Input("frequency")]
        public Input<string>? Frequency { get; set; }

        /// <summary>
        /// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
        /// </summary>
        [Input("fullyQualifiedName")]
        public Input<string>? FullyQualifiedName { get; set; }

        /// <summary>
        /// Identifier for the resource monitor; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifyTriggers")]
        private InputList<int>? _notifyTriggers;

        /// <summary>
        /// Specifies a list of percentages of the credit quota. After reaching any of the values the users passed in the notify_users field will be notified (to receive the notification they should have notifications enabled). Values over 100 are supported.
        /// </summary>
        public InputList<int> NotifyTriggers
        {
            get => _notifyTriggers ?? (_notifyTriggers = new InputList<int>());
            set => _notifyTriggers = value;
        }

        [Input("notifyUsers")]
        private InputList<string>? _notifyUsers;

        /// <summary>
        /// Specifies the list of users (their identifiers) to receive email notifications on resource monitors.
        /// </summary>
        public InputList<string> NotifyUsers
        {
            get => _notifyUsers ?? (_notifyUsers = new InputList<string>());
            set => _notifyUsers = value;
        }

        [Input("showOutputs")]
        private InputList<Inputs.ResourceMonitorShowOutputGetArgs>? _showOutputs;

        /// <summary>
        /// Outputs the result of `SHOW RESOURCE MONITORS` for the given resource monitor.
        /// </summary>
        public InputList<Inputs.ResourceMonitorShowOutputGetArgs> ShowOutputs
        {
            get => _showOutputs ?? (_showOutputs = new InputList<Inputs.ResourceMonitorShowOutputGetArgs>());
            set => _showOutputs = value;
        }

        /// <summary>
        /// The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses. If you set a `start_timestamp` for a resource monitor, you must also set `frequency`.  After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
        /// </summary>
        [Input("startTimestamp")]
        public Input<string>? StartTimestamp { get; set; }

        /// <summary>
        /// Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses immediately cancel any currently running queries or statements. In addition, this action sends a notification to all users who have enabled notifications for themselves.
        /// </summary>
        [Input("suspendImmediateTrigger")]
        public Input<int>? SuspendImmediateTrigger { get; set; }

        /// <summary>
        /// Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses while allowing currently running queries to complete will be suspended. No new queries can be executed by the warehouses until the credit quota for the resource monitor is increased. In addition, this action sends a notification to all users who have enabled notifications for themselves.
        /// </summary>
        [Input("suspendTrigger")]
        public Input<int>? SuspendTrigger { get; set; }

        public ResourceMonitorState()
        {
        }
        public static new ResourceMonitorState Empty => new ResourceMonitorState();
    }
}
