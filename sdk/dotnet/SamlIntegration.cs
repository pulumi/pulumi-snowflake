// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Snowflake = Pulumi.Snowflake;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var samlIntegration = new Snowflake.SamlIntegration("samlIntegration", new Snowflake.SamlIntegrationArgs
    ///         {
    ///             Enabled = true,
    ///             Saml2Issuer = "test_issuer",
    ///             Saml2Provider = "CUSTOM",
    ///             Saml2SsoUrl = "https://testsamlissuer.com",
    ///             Saml2X509Cert = "MIICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUFADAuMQswCQYDVQQGEwJVUzEMMAoGA1UEChMDSUJNMREwDwYDVQQLEwhMb2NhbCBDQTAeFw05OTEyMjIwNTAwMDBaFw0wMDEyMjMwNDU5NTlaMC4xCzAJBgNVBAYTAlVTMQwwCgYDVQQKEwNJQk0xETAPBgNVBAsTCExvY2FsIENBMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD2bZEo7xGaX2/0GHkrNFZvlxBou9v1Jmt/PDiTMPve8r9FeJAQ0QdvFST/0JPQYD20rH0bimdDLgNdNynmyRoS2S/IInfpmf69iyc2G0TPyRvmHIiOZbdCd+YBHQi1adkj17NDcWj6S14tVurFX73zx0sNoMS79q3tuXKrDsxeuwIDAQABo4GQMIGNMEsGCVUdDwGG+EIBDQQ+EzxHZW5lcmF0ZWQgYnkgdGhlIFNlY3VyZVdheSBTZWN1cml0eSBTZXJ2ZXIgZm9yIE9TLzM5MCAoUkFDRikwDgYDVR0PAQH/BAQDAgAGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFJ3+ocRyCTJw067dLSwr/nalx6YMMA0GCSqGSIb3DQEBBQUAA4GBAMaQzt+zaj1GU77yzlr8iiMBXgdQrwsZZWJo5exnAucJAEYQZmOfyLiMD6oYq+ZnfvM0n8G/Y79q8nhwvuxpYOnRSAXFp6xSkrIOeZtJMY1h00LKp/JX3Ng1svZ2agE126JHsQ0bhzN5TKsYfbwfTwfjdWAGy6Vf1nYi/rO+ryMO",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import snowflake:index/samlIntegration:SamlIntegration example name
    /// ```
    /// </summary>
    [SnowflakeResourceType("snowflake:index/samlIntegration:SamlIntegration")]
    public partial class SamlIntegration : Pulumi.CustomResource
    {
        /// <summary>
        /// Date and time when the SAML integration was created.
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// Specifies whether this security integration is enabled or disabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the SAML2 integration. This name follows the rules for Object Identifiers. The name should be
        /// unique among security integrations in your account.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("saml2DigestMethodsUsed")]
        public Output<string> Saml2DigestMethodsUsed { get; private set; } = null!;

        /// <summary>
        /// The Boolean indicating if the Log In With button will be shown on the login page. TRUE: displays the Log in WIth button
        /// on the login page. FALSE: does not display the Log in With button on the login page.
        /// </summary>
        [Output("saml2EnableSpInitiated")]
        public Output<bool?> Saml2EnableSpInitiated { get; private set; } = null!;

        /// <summary>
        /// The Boolean indicating whether users, during the initial authentication flow, are forced to authenticate again to access
        /// Snowflake. When set to TRUE, Snowflake sets the ForceAuthn SAML parameter to TRUE in the outgoing request from Snowflake
        /// to the identity provider. TRUE: forces users to authenticate again to access Snowflake, even if a valid session with the
        /// identity provider exists. FALSE: does not force users to authenticate again to access Snowflake.
        /// </summary>
        [Output("saml2ForceAuthn")]
        public Output<bool?> Saml2ForceAuthn { get; private set; } = null!;

        /// <summary>
        /// The string containing the IdP EntityID / Issuer.
        /// </summary>
        [Output("saml2Issuer")]
        public Output<string> Saml2Issuer { get; private set; } = null!;

        /// <summary>
        /// The endpoint to which Snowflake redirects users after clicking the Log Out button in the classic Snowflake web
        /// interface. Snowflake terminates the Snowflake session upon redirecting to the specified endpoint.
        /// </summary>
        [Output("saml2PostLogoutRedirectUrl")]
        public Output<string?> Saml2PostLogoutRedirectUrl { get; private set; } = null!;

        /// <summary>
        /// The string describing the IdP. One of the following: OKTA, ADFS, Custom.
        /// </summary>
        [Output("saml2Provider")]
        public Output<string> Saml2Provider { get; private set; } = null!;

        /// <summary>
        /// The SAML NameID format allows Snowflake to set an expectation of the identifying attribute of the user (i.e. SAML
        /// Subject) in the SAML assertion from the IdP to ensure a valid authentication to Snowflake. If a value is not specified,
        /// Snowflake sends the urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress value in the authentication request to the
        /// IdP. NameID must be one of the following values: urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified,
        /// urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress, urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName,
        /// urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName,
        /// urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos, urn:oasis:names:tc:SAML:2.0:nameid-format:persistent,
        /// urn:oasis:names:tc:SAML:2.0:nameid-format:transient .
        /// </summary>
        [Output("saml2RequestedNameidFormat")]
        public Output<string?> Saml2RequestedNameidFormat { get; private set; } = null!;

        /// <summary>
        /// The Boolean indicating whether SAML requests are signed. TRUE: allows SAML requests to be signed. FALSE: does not allow
        /// SAML requests to be signed.
        /// </summary>
        [Output("saml2SignRequest")]
        public Output<bool?> Saml2SignRequest { get; private set; } = null!;

        [Output("saml2SignatureMethodsUsed")]
        public Output<string> Saml2SignatureMethodsUsed { get; private set; } = null!;

        /// <summary>
        /// The string containing the Snowflake Assertion Consumer Service URL to which the IdP will send its SAML authentication
        /// response back to Snowflake. This property will be set in the SAML authentication request generated by Snowflake when
        /// initiating a SAML SSO operation with the IdP. If an incorrect value is specified, Snowflake returns an error message
        /// indicating the acceptable values to use. Default: https://&lt;account_locator&gt;.&lt;region&gt;.snowflakecomputing.com/fed/login
        /// </summary>
        [Output("saml2SnowflakeAcsUrl")]
        public Output<string> Saml2SnowflakeAcsUrl { get; private set; } = null!;

        /// <summary>
        /// The string containing the EntityID / Issuer for the Snowflake service provider. If an incorrect value is specified,
        /// Snowflake returns an error message indicating the acceptable values to use.
        /// </summary>
        [Output("saml2SnowflakeIssuerUrl")]
        public Output<string> Saml2SnowflakeIssuerUrl { get; private set; } = null!;

        /// <summary>
        /// Metadata created by Snowflake to provide to SAML2 provider.
        /// </summary>
        [Output("saml2SnowflakeMetadata")]
        public Output<string> Saml2SnowflakeMetadata { get; private set; } = null!;

        /// <summary>
        /// The Base64 encoded self-signed certificate generated by Snowflake for use with Encrypting SAML Assertions and Signed
        /// SAML Requests. You must have at least one of these features (encrypted SAML assertions or signed SAML responses) enabled
        /// in your Snowflake account to access the certificate value.
        /// </summary>
        [Output("saml2SnowflakeX509Cert")]
        public Output<string> Saml2SnowflakeX509Cert { get; private set; } = null!;

        /// <summary>
        /// The string containing the label to display after the Log In With button on the login page.
        /// </summary>
        [Output("saml2SpInitiatedLoginPageLabel")]
        public Output<string?> Saml2SpInitiatedLoginPageLabel { get; private set; } = null!;

        /// <summary>
        /// The string containing the IdP SSO URL, where the user should be redirected by Snowflake (the Service Provider) with a
        /// SAML AuthnRequest message.
        /// </summary>
        [Output("saml2SsoUrl")]
        public Output<string> Saml2SsoUrl { get; private set; } = null!;

        /// <summary>
        /// The Base64 encoded IdP signing certificate on a single line without the leading -----BEGIN CERTIFICATE----- and ending
        /// -----END CERTIFICATE----- markers.
        /// </summary>
        [Output("saml2X509Cert")]
        public Output<string> Saml2X509Cert { get; private set; } = null!;


        /// <summary>
        /// Create a SamlIntegration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SamlIntegration(string name, SamlIntegrationArgs args, CustomResourceOptions? options = null)
            : base("snowflake:index/samlIntegration:SamlIntegration", name, args ?? new SamlIntegrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SamlIntegration(string name, Input<string> id, SamlIntegrationState? state = null, CustomResourceOptions? options = null)
            : base("snowflake:index/samlIntegration:SamlIntegration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SamlIntegration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SamlIntegration Get(string name, Input<string> id, SamlIntegrationState? state = null, CustomResourceOptions? options = null)
        {
            return new SamlIntegration(name, id, state, options);
        }
    }

    public sealed class SamlIntegrationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether this security integration is enabled or disabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Specifies the name of the SAML2 integration. This name follows the rules for Object Identifiers. The name should be
        /// unique among security integrations in your account.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Boolean indicating if the Log In With button will be shown on the login page. TRUE: displays the Log in WIth button
        /// on the login page. FALSE: does not display the Log in With button on the login page.
        /// </summary>
        [Input("saml2EnableSpInitiated")]
        public Input<bool>? Saml2EnableSpInitiated { get; set; }

        /// <summary>
        /// The Boolean indicating whether users, during the initial authentication flow, are forced to authenticate again to access
        /// Snowflake. When set to TRUE, Snowflake sets the ForceAuthn SAML parameter to TRUE in the outgoing request from Snowflake
        /// to the identity provider. TRUE: forces users to authenticate again to access Snowflake, even if a valid session with the
        /// identity provider exists. FALSE: does not force users to authenticate again to access Snowflake.
        /// </summary>
        [Input("saml2ForceAuthn")]
        public Input<bool>? Saml2ForceAuthn { get; set; }

        /// <summary>
        /// The string containing the IdP EntityID / Issuer.
        /// </summary>
        [Input("saml2Issuer", required: true)]
        public Input<string> Saml2Issuer { get; set; } = null!;

        /// <summary>
        /// The endpoint to which Snowflake redirects users after clicking the Log Out button in the classic Snowflake web
        /// interface. Snowflake terminates the Snowflake session upon redirecting to the specified endpoint.
        /// </summary>
        [Input("saml2PostLogoutRedirectUrl")]
        public Input<string>? Saml2PostLogoutRedirectUrl { get; set; }

        /// <summary>
        /// The string describing the IdP. One of the following: OKTA, ADFS, Custom.
        /// </summary>
        [Input("saml2Provider", required: true)]
        public Input<string> Saml2Provider { get; set; } = null!;

        /// <summary>
        /// The SAML NameID format allows Snowflake to set an expectation of the identifying attribute of the user (i.e. SAML
        /// Subject) in the SAML assertion from the IdP to ensure a valid authentication to Snowflake. If a value is not specified,
        /// Snowflake sends the urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress value in the authentication request to the
        /// IdP. NameID must be one of the following values: urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified,
        /// urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress, urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName,
        /// urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName,
        /// urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos, urn:oasis:names:tc:SAML:2.0:nameid-format:persistent,
        /// urn:oasis:names:tc:SAML:2.0:nameid-format:transient .
        /// </summary>
        [Input("saml2RequestedNameidFormat")]
        public Input<string>? Saml2RequestedNameidFormat { get; set; }

        /// <summary>
        /// The Boolean indicating whether SAML requests are signed. TRUE: allows SAML requests to be signed. FALSE: does not allow
        /// SAML requests to be signed.
        /// </summary>
        [Input("saml2SignRequest")]
        public Input<bool>? Saml2SignRequest { get; set; }

        /// <summary>
        /// The string containing the Snowflake Assertion Consumer Service URL to which the IdP will send its SAML authentication
        /// response back to Snowflake. This property will be set in the SAML authentication request generated by Snowflake when
        /// initiating a SAML SSO operation with the IdP. If an incorrect value is specified, Snowflake returns an error message
        /// indicating the acceptable values to use. Default: https://&lt;account_locator&gt;.&lt;region&gt;.snowflakecomputing.com/fed/login
        /// </summary>
        [Input("saml2SnowflakeAcsUrl")]
        public Input<string>? Saml2SnowflakeAcsUrl { get; set; }

        /// <summary>
        /// The string containing the EntityID / Issuer for the Snowflake service provider. If an incorrect value is specified,
        /// Snowflake returns an error message indicating the acceptable values to use.
        /// </summary>
        [Input("saml2SnowflakeIssuerUrl")]
        public Input<string>? Saml2SnowflakeIssuerUrl { get; set; }

        /// <summary>
        /// The Base64 encoded self-signed certificate generated by Snowflake for use with Encrypting SAML Assertions and Signed
        /// SAML Requests. You must have at least one of these features (encrypted SAML assertions or signed SAML responses) enabled
        /// in your Snowflake account to access the certificate value.
        /// </summary>
        [Input("saml2SnowflakeX509Cert")]
        public Input<string>? Saml2SnowflakeX509Cert { get; set; }

        /// <summary>
        /// The string containing the label to display after the Log In With button on the login page.
        /// </summary>
        [Input("saml2SpInitiatedLoginPageLabel")]
        public Input<string>? Saml2SpInitiatedLoginPageLabel { get; set; }

        /// <summary>
        /// The string containing the IdP SSO URL, where the user should be redirected by Snowflake (the Service Provider) with a
        /// SAML AuthnRequest message.
        /// </summary>
        [Input("saml2SsoUrl", required: true)]
        public Input<string> Saml2SsoUrl { get; set; } = null!;

        /// <summary>
        /// The Base64 encoded IdP signing certificate on a single line without the leading -----BEGIN CERTIFICATE----- and ending
        /// -----END CERTIFICATE----- markers.
        /// </summary>
        [Input("saml2X509Cert", required: true)]
        public Input<string> Saml2X509Cert { get; set; } = null!;

        public SamlIntegrationArgs()
        {
        }
    }

    public sealed class SamlIntegrationState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Date and time when the SAML integration was created.
        /// </summary>
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// Specifies whether this security integration is enabled or disabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Specifies the name of the SAML2 integration. This name follows the rules for Object Identifiers. The name should be
        /// unique among security integrations in your account.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("saml2DigestMethodsUsed")]
        public Input<string>? Saml2DigestMethodsUsed { get; set; }

        /// <summary>
        /// The Boolean indicating if the Log In With button will be shown on the login page. TRUE: displays the Log in WIth button
        /// on the login page. FALSE: does not display the Log in With button on the login page.
        /// </summary>
        [Input("saml2EnableSpInitiated")]
        public Input<bool>? Saml2EnableSpInitiated { get; set; }

        /// <summary>
        /// The Boolean indicating whether users, during the initial authentication flow, are forced to authenticate again to access
        /// Snowflake. When set to TRUE, Snowflake sets the ForceAuthn SAML parameter to TRUE in the outgoing request from Snowflake
        /// to the identity provider. TRUE: forces users to authenticate again to access Snowflake, even if a valid session with the
        /// identity provider exists. FALSE: does not force users to authenticate again to access Snowflake.
        /// </summary>
        [Input("saml2ForceAuthn")]
        public Input<bool>? Saml2ForceAuthn { get; set; }

        /// <summary>
        /// The string containing the IdP EntityID / Issuer.
        /// </summary>
        [Input("saml2Issuer")]
        public Input<string>? Saml2Issuer { get; set; }

        /// <summary>
        /// The endpoint to which Snowflake redirects users after clicking the Log Out button in the classic Snowflake web
        /// interface. Snowflake terminates the Snowflake session upon redirecting to the specified endpoint.
        /// </summary>
        [Input("saml2PostLogoutRedirectUrl")]
        public Input<string>? Saml2PostLogoutRedirectUrl { get; set; }

        /// <summary>
        /// The string describing the IdP. One of the following: OKTA, ADFS, Custom.
        /// </summary>
        [Input("saml2Provider")]
        public Input<string>? Saml2Provider { get; set; }

        /// <summary>
        /// The SAML NameID format allows Snowflake to set an expectation of the identifying attribute of the user (i.e. SAML
        /// Subject) in the SAML assertion from the IdP to ensure a valid authentication to Snowflake. If a value is not specified,
        /// Snowflake sends the urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress value in the authentication request to the
        /// IdP. NameID must be one of the following values: urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified,
        /// urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress, urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName,
        /// urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName,
        /// urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos, urn:oasis:names:tc:SAML:2.0:nameid-format:persistent,
        /// urn:oasis:names:tc:SAML:2.0:nameid-format:transient .
        /// </summary>
        [Input("saml2RequestedNameidFormat")]
        public Input<string>? Saml2RequestedNameidFormat { get; set; }

        /// <summary>
        /// The Boolean indicating whether SAML requests are signed. TRUE: allows SAML requests to be signed. FALSE: does not allow
        /// SAML requests to be signed.
        /// </summary>
        [Input("saml2SignRequest")]
        public Input<bool>? Saml2SignRequest { get; set; }

        [Input("saml2SignatureMethodsUsed")]
        public Input<string>? Saml2SignatureMethodsUsed { get; set; }

        /// <summary>
        /// The string containing the Snowflake Assertion Consumer Service URL to which the IdP will send its SAML authentication
        /// response back to Snowflake. This property will be set in the SAML authentication request generated by Snowflake when
        /// initiating a SAML SSO operation with the IdP. If an incorrect value is specified, Snowflake returns an error message
        /// indicating the acceptable values to use. Default: https://&lt;account_locator&gt;.&lt;region&gt;.snowflakecomputing.com/fed/login
        /// </summary>
        [Input("saml2SnowflakeAcsUrl")]
        public Input<string>? Saml2SnowflakeAcsUrl { get; set; }

        /// <summary>
        /// The string containing the EntityID / Issuer for the Snowflake service provider. If an incorrect value is specified,
        /// Snowflake returns an error message indicating the acceptable values to use.
        /// </summary>
        [Input("saml2SnowflakeIssuerUrl")]
        public Input<string>? Saml2SnowflakeIssuerUrl { get; set; }

        /// <summary>
        /// Metadata created by Snowflake to provide to SAML2 provider.
        /// </summary>
        [Input("saml2SnowflakeMetadata")]
        public Input<string>? Saml2SnowflakeMetadata { get; set; }

        /// <summary>
        /// The Base64 encoded self-signed certificate generated by Snowflake for use with Encrypting SAML Assertions and Signed
        /// SAML Requests. You must have at least one of these features (encrypted SAML assertions or signed SAML responses) enabled
        /// in your Snowflake account to access the certificate value.
        /// </summary>
        [Input("saml2SnowflakeX509Cert")]
        public Input<string>? Saml2SnowflakeX509Cert { get; set; }

        /// <summary>
        /// The string containing the label to display after the Log In With button on the login page.
        /// </summary>
        [Input("saml2SpInitiatedLoginPageLabel")]
        public Input<string>? Saml2SpInitiatedLoginPageLabel { get; set; }

        /// <summary>
        /// The string containing the IdP SSO URL, where the user should be redirected by Snowflake (the Service Provider) with a
        /// SAML AuthnRequest message.
        /// </summary>
        [Input("saml2SsoUrl")]
        public Input<string>? Saml2SsoUrl { get; set; }

        /// <summary>
        /// The Base64 encoded IdP signing certificate on a single line without the leading -----BEGIN CERTIFICATE----- and ending
        /// -----END CERTIFICATE----- markers.
        /// </summary>
        [Input("saml2X509Cert")]
        public Input<string>? Saml2X509Cert { get; set; }

        public SamlIntegrationState()
        {
        }
    }
}
