// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    /// <summary>
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import snowflake:index/listing:Listing example '"&lt;listing_name&gt;"'
    /// ```
    /// </summary>
    [SnowflakeResourceType("snowflake:index/listing:Listing")]
    public partial class Listing : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the application package attached to the listing.
        /// </summary>
        [Output("applicationPackage")]
        public Output<string?> ApplicationPackage { get; private set; } = null!;

        /// <summary>
        /// Specifies a comment for the listing.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
        /// </summary>
        [Output("fullyQualifiedName")]
        public Output<string> FullyQualifiedName { get; private set; } = null!;

        [Output("manifest")]
        public Output<Outputs.ListingManifest> Manifest { get; private set; } = null!;

        /// <summary>
        /// Specifies the listing identifier (name). It must be unique within the organization, regardless of which Snowflake region the account is located in. Must start with an alphabetic character and cannot contain spaces or special characters except for underscores.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`Default`)) Determines if the listing should be published.
        /// </summary>
        [Output("publish")]
        public Output<string?> Publish { get; private set; } = null!;

        /// <summary>
        /// Specifies the identifier for the share to attach to the listing.
        /// </summary>
        [Output("share")]
        public Output<string?> Share { get; private set; } = null!;

        /// <summary>
        /// Outputs the result of `SHOW LISTINGS` for the given listing.
        /// </summary>
        [Output("showOutputs")]
        public Output<ImmutableArray<Outputs.ListingShowOutput>> ShowOutputs { get; private set; } = null!;


        /// <summary>
        /// Create a Listing resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Listing(string name, ListingArgs args, CustomResourceOptions? options = null)
            : base("snowflake:index/listing:Listing", name, args ?? new ListingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Listing(string name, Input<string> id, ListingState? state = null, CustomResourceOptions? options = null)
            : base("snowflake:index/listing:Listing", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Listing resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Listing Get(string name, Input<string> id, ListingState? state = null, CustomResourceOptions? options = null)
        {
            return new Listing(name, id, state, options);
        }
    }

    public sealed class ListingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the application package attached to the listing.
        /// </summary>
        [Input("applicationPackage")]
        public Input<string>? ApplicationPackage { get; set; }

        /// <summary>
        /// Specifies a comment for the listing.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("manifest", required: true)]
        public Input<Inputs.ListingManifestArgs> Manifest { get; set; } = null!;

        /// <summary>
        /// Specifies the listing identifier (name). It must be unique within the organization, regardless of which Snowflake region the account is located in. Must start with an alphabetic character and cannot contain spaces or special characters except for underscores.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`Default`)) Determines if the listing should be published.
        /// </summary>
        [Input("publish")]
        public Input<string>? Publish { get; set; }

        /// <summary>
        /// Specifies the identifier for the share to attach to the listing.
        /// </summary>
        [Input("share")]
        public Input<string>? Share { get; set; }

        public ListingArgs()
        {
        }
        public static new ListingArgs Empty => new ListingArgs();
    }

    public sealed class ListingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the application package attached to the listing.
        /// </summary>
        [Input("applicationPackage")]
        public Input<string>? ApplicationPackage { get; set; }

        /// <summary>
        /// Specifies a comment for the listing.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
        /// </summary>
        [Input("fullyQualifiedName")]
        public Input<string>? FullyQualifiedName { get; set; }

        [Input("manifest")]
        public Input<Inputs.ListingManifestGetArgs>? Manifest { get; set; }

        /// <summary>
        /// Specifies the listing identifier (name). It must be unique within the organization, regardless of which Snowflake region the account is located in. Must start with an alphabetic character and cannot contain spaces or special characters except for underscores.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`Default`)) Determines if the listing should be published.
        /// </summary>
        [Input("publish")]
        public Input<string>? Publish { get; set; }

        /// <summary>
        /// Specifies the identifier for the share to attach to the listing.
        /// </summary>
        [Input("share")]
        public Input<string>? Share { get; set; }

        [Input("showOutputs")]
        private InputList<Inputs.ListingShowOutputGetArgs>? _showOutputs;

        /// <summary>
        /// Outputs the result of `SHOW LISTINGS` for the given listing.
        /// </summary>
        public InputList<Inputs.ListingShowOutputGetArgs> ShowOutputs
        {
            get => _showOutputs ?? (_showOutputs = new InputList<Inputs.ListingShowOutputGetArgs>());
            set => _showOutputs = value;
        }

        public ListingState()
        {
        }
        public static new ListingState Empty => new ListingState();
    }
}
