// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    public static class GetTasks
    {
        public static Task<GetTasksResult> InvokeAsync(GetTasksArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTasksResult>("snowflake:index/getTasks:getTasks", args ?? new GetTasksArgs(), options.WithDefaults());

        public static Output<GetTasksResult> Invoke(GetTasksInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTasksResult>("snowflake:index/getTasks:getTasks", args ?? new GetTasksInvokeArgs(), options.WithDefaults());

        public static Output<GetTasksResult> Invoke(GetTasksInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTasksResult>("snowflake:index/getTasks:getTasks", args ?? new GetTasksInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTasksArgs : global::Pulumi.InvokeArgs
    {
        [Input("in")]
        public Inputs.GetTasksInArgs? In { get; set; }

        [Input("like")]
        public string? Like { get; set; }

        [Input("limit")]
        public Inputs.GetTasksLimitArgs? Limit { get; set; }

        [Input("rootOnly")]
        public bool? RootOnly { get; set; }

        [Input("startsWith")]
        public string? StartsWith { get; set; }

        [Input("withParameters")]
        public bool? WithParameters { get; set; }

        public GetTasksArgs()
        {
        }
        public static new GetTasksArgs Empty => new GetTasksArgs();
    }

    public sealed class GetTasksInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("in")]
        public Input<Inputs.GetTasksInInputArgs>? In { get; set; }

        [Input("like")]
        public Input<string>? Like { get; set; }

        [Input("limit")]
        public Input<Inputs.GetTasksLimitInputArgs>? Limit { get; set; }

        [Input("rootOnly")]
        public Input<bool>? RootOnly { get; set; }

        [Input("startsWith")]
        public Input<string>? StartsWith { get; set; }

        [Input("withParameters")]
        public Input<bool>? WithParameters { get; set; }

        public GetTasksInvokeArgs()
        {
        }
        public static new GetTasksInvokeArgs Empty => new GetTasksInvokeArgs();
    }


    [OutputType]
    public sealed class GetTasksResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly Outputs.GetTasksInResult? In;
        public readonly string? Like;
        public readonly Outputs.GetTasksLimitResult? Limit;
        public readonly bool? RootOnly;
        public readonly string? StartsWith;
        public readonly ImmutableArray<Outputs.GetTasksTaskResult> Tasks;
        public readonly bool? WithParameters;

        [OutputConstructor]
        private GetTasksResult(
            string id,

            Outputs.GetTasksInResult? @in,

            string? like,

            Outputs.GetTasksLimitResult? limit,

            bool? rootOnly,

            string? startsWith,

            ImmutableArray<Outputs.GetTasksTaskResult> tasks,

            bool? withParameters)
        {
            Id = id;
            In = @in;
            Like = like;
            Limit = limit;
            RootOnly = rootOnly;
            StartsWith = startsWith;
            Tasks = tasks;
            WithParameters = withParameters;
        }
    }
}
