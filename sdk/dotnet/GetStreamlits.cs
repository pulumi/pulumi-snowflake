// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    public static class GetStreamlits
    {
        /// <summary>
        /// !&gt; **V1 release candidate** This resource was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the resource if needed. Any errors reported will be resolved with a higher priority. We encourage checking this resource out before the V1 release. Please follow the migration guide to use it.
        /// 
        /// Datasource used to get details of filtered streamlits. Filtering is aligned with the current possibilities for [SHOW STREAMLITS](https://docs.snowflake.com/en/sql-reference/sql/show-streamlits) query (only `like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection `streamlits`.
        /// </summary>
        public static Task<GetStreamlitsResult> InvokeAsync(GetStreamlitsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStreamlitsResult>("snowflake:index/getStreamlits:getStreamlits", args ?? new GetStreamlitsArgs(), options.WithDefaults());

        /// <summary>
        /// !&gt; **V1 release candidate** This resource was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the resource if needed. Any errors reported will be resolved with a higher priority. We encourage checking this resource out before the V1 release. Please follow the migration guide to use it.
        /// 
        /// Datasource used to get details of filtered streamlits. Filtering is aligned with the current possibilities for [SHOW STREAMLITS](https://docs.snowflake.com/en/sql-reference/sql/show-streamlits) query (only `like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection `streamlits`.
        /// </summary>
        public static Output<GetStreamlitsResult> Invoke(GetStreamlitsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamlitsResult>("snowflake:index/getStreamlits:getStreamlits", args ?? new GetStreamlitsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStreamlitsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// IN clause to filter the list of streamlits
        /// </summary>
        [Input("in")]
        public Inputs.GetStreamlitsInArgs? In { get; set; }

        /// <summary>
        /// Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
        /// </summary>
        [Input("like")]
        public string? Like { get; set; }

        /// <summary>
        /// Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.
        /// </summary>
        [Input("limit")]
        public Inputs.GetStreamlitsLimitArgs? Limit { get; set; }

        /// <summary>
        /// Runs DESC STREAMLIT for each streamlit returned by SHOW STREAMLITS. The output of describe is saved to the description field. By default this value is set to true.
        /// </summary>
        [Input("withDescribe")]
        public bool? WithDescribe { get; set; }

        public GetStreamlitsArgs()
        {
        }
        public static new GetStreamlitsArgs Empty => new GetStreamlitsArgs();
    }

    public sealed class GetStreamlitsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// IN clause to filter the list of streamlits
        /// </summary>
        [Input("in")]
        public Input<Inputs.GetStreamlitsInInputArgs>? In { get; set; }

        /// <summary>
        /// Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
        /// </summary>
        [Input("like")]
        public Input<string>? Like { get; set; }

        /// <summary>
        /// Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.
        /// </summary>
        [Input("limit")]
        public Input<Inputs.GetStreamlitsLimitInputArgs>? Limit { get; set; }

        /// <summary>
        /// Runs DESC STREAMLIT for each streamlit returned by SHOW STREAMLITS. The output of describe is saved to the description field. By default this value is set to true.
        /// </summary>
        [Input("withDescribe")]
        public Input<bool>? WithDescribe { get; set; }

        public GetStreamlitsInvokeArgs()
        {
        }
        public static new GetStreamlitsInvokeArgs Empty => new GetStreamlitsInvokeArgs();
    }


    [OutputType]
    public sealed class GetStreamlitsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IN clause to filter the list of streamlits
        /// </summary>
        public readonly Outputs.GetStreamlitsInResult? In;
        /// <summary>
        /// Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
        /// </summary>
        public readonly string? Like;
        /// <summary>
        /// Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.
        /// </summary>
        public readonly Outputs.GetStreamlitsLimitResult? Limit;
        /// <summary>
        /// Holds the aggregated output of all streamlits details queries.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStreamlitsStreamlitResult> Streamlits;
        /// <summary>
        /// Runs DESC STREAMLIT for each streamlit returned by SHOW STREAMLITS. The output of describe is saved to the description field. By default this value is set to true.
        /// </summary>
        public readonly bool? WithDescribe;

        [OutputConstructor]
        private GetStreamlitsResult(
            string id,

            Outputs.GetStreamlitsInResult? @in,

            string? like,

            Outputs.GetStreamlitsLimitResult? limit,

            ImmutableArray<Outputs.GetStreamlitsStreamlitResult> streamlits,

            bool? withDescribe)
        {
            Id = id;
            In = @in;
            Like = like;
            Limit = limit;
            Streamlits = streamlits;
            WithDescribe = withDescribe;
        }
    }
}
