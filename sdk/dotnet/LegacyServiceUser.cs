// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    [SnowflakeResourceType("snowflake:index/legacyServiceUser:LegacyServiceUser")]
    public partial class LegacyServiceUser : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination
        /// of a session (e.g. network outage, browser termination, service interruption). For more information, check
        /// [ABORT_DETACHED_QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).
        /// </summary>
        [Output("abortDetachedQuery")]
        public Output<bool> AbortDetachedQuery { get; private set; } = null!;

        /// <summary>
        /// Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed
        /// without an active transaction, is automatically committed after the statement successfully completes. For more
        /// information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check
        /// [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).
        /// </summary>
        [Output("autocommit")]
        public Output<bool> Autocommit { get; private set; } = null!;

        /// <summary>
        /// The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see
        /// [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check
        /// [BINARY_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).
        /// </summary>
        [Output("binaryInputFormat")]
        public Output<string> BinaryInputFormat { get; private set; } = null!;

        /// <summary>
        /// The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see
        /// [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check
        /// [BINARY_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).
        /// </summary>
        [Output("binaryOutputFormat")]
        public Output<string> BinaryOutputFormat { get; private set; } = null!;

        /// <summary>
        /// Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from
        /// queries (in MB). For more information, check [CLIENT_MEMORY_LIMIT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).
        /// </summary>
        [Output("clientMemoryLimit")]
        public Output<int> ClientMemoryLimit { get; private set; } = null!;

        /// <summary>
        /// For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all
        /// databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more
        /// quickly. For more information, check [CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).
        /// </summary>
        [Output("clientMetadataRequestUseConnectionCtx")]
        public Output<bool> ClientMetadataRequestUseConnectionCtx { get; private set; } = null!;

        /// <summary>
        /// Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will
        /// attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s
        /// resources) to improve performance. For more information, check [CLIENT_PREFETCH_THREADS
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).
        /// </summary>
        [Output("clientPrefetchThreads")]
        public Output<int> ClientPrefetchThreads { get; private set; } = null!;

        /// <summary>
        /// Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver
        /// downloads query results in chunks. For more information, check [CLIENT_RESULT_CHUNK_SIZE
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).
        /// </summary>
        [Output("clientResultChunkSize")]
        public Output<int> ClientResultChunkSize { get; private set; } = null!;

        /// <summary>
        /// Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more
        /// information, check [CLIENT_RESULT_COLUMN_CASE_INSENSITIVE
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).
        /// </summary>
        [Output("clientResultColumnCaseInsensitive")]
        public Output<bool> ClientResultColumnCaseInsensitive { get; private set; } = null!;

        /// <summary>
        /// Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more
        /// information, check [CLIENT_SESSION_KEEP_ALIVE
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).
        /// </summary>
        [Output("clientSessionKeepAlive")]
        public Output<bool> ClientSessionKeepAlive { get; private set; } = null!;

        /// <summary>
        /// Number of seconds in-between client attempts to update the token for the session. For more information, check
        /// [CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).
        /// </summary>
        [Output("clientSessionKeepAliveHeartbeatFrequency")]
        public Output<int> ClientSessionKeepAliveHeartbeatFrequency { get; private set; } = null!;

        /// <summary>
        /// Specifies the [TIMESTAMP_*
        /// variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to
        /// use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more
        /// information, check [CLIENT_TIMESTAMP_TYPE_MAPPING
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).
        /// </summary>
        [Output("clientTimestampTypeMapping")]
        public Output<string> ClientTimestampTypeMapping { get; private set; } = null!;

        /// <summary>
        /// Specifies a comment for the user.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// Specifies the input format for the DATE data type. For more information, see [Date and time input and output
        /// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
        /// [DATE_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).
        /// </summary>
        [Output("dateInputFormat")]
        public Output<string> DateInputFormat { get; private set; } = null!;

        /// <summary>
        /// Specifies the display format for the DATE data type. For more information, see [Date and time input and output
        /// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
        /// [DATE_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).
        /// </summary>
        [Output("dateOutputFormat")]
        public Output<string> DateOutputFormat { get; private set; } = null!;

        [Output("daysToExpiry")]
        public Output<int?> DaysToExpiry { get; private set; } = null!;

        /// <summary>
        /// Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon
        /// login. Note that the CREATE USER operation does not verify that the namespace exists.
        /// </summary>
        [Output("defaultNamespace")]
        public Output<string?> DefaultNamespace { get; private set; } = null!;

        /// <summary>
        /// Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role
        /// for a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT
        /// ROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does
        /// not verify that the role exists. For more information about this resource, see docs.
        /// </summary>
        [Output("defaultRole")]
        public Output<string?> DefaultRole { get; private set; } = null!;

        /// <summary>
        /// Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive):
        /// `DEFAULT` | `NONE` | `ALL`. More information can be found in
        /// [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).
        /// </summary>
        [Output("defaultSecondaryRolesOption")]
        public Output<string?> DefaultSecondaryRolesOption { get; private set; } = null!;

        /// <summary>
        /// Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER
        /// operation does not verify that the warehouse exists. For more information about this resource, see docs.
        /// </summary>
        [Output("defaultWarehouse")]
        public Output<string?> DefaultWarehouse { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the
        /// user. Available options are: "true" or "false". When the value is not set in the configuration the provider will put
        /// "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Output("disabled")]
        public Output<string?> Disabled { get; private set; } = null!;

        /// <summary>
        /// Name displayed for the user in the Snowflake web interface.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Email address for the user.
        /// </summary>
        [Output("email")]
        public Output<string?> Email { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in
        /// the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that
        /// support the values in the output columns of the unload SQL statement or source table). For more information, check
        /// [ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).
        /// </summary>
        [Output("enableUnloadPhysicalTypeOptimization")]
        public Output<bool> EnableUnloadPhysicalTypeOptimization { get; private set; } = null!;

        /// <summary>
        /// Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content
        /// of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role
        /// that is granted or inherits the AUDIT privilege can set the ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR parameter. When using
        /// the ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the
        /// query text, not the user who executed the query (if those are different users). For more information, check
        /// [ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).
        /// </summary>
        [Output("enableUnredactedQuerySyntaxError")]
        public Output<bool> EnableUnredactedQuerySyntaxError { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is
        /// used to update or delete a target row that joins multiple source rows and the system cannot determine the action to
        /// perform on the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_MERGE
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).
        /// </summary>
        [Output("errorOnNondeterministicMerge")]
        public Output<bool> ErrorOnNondeterministicMerge { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command
        /// is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on
        /// the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_UPDATE
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).
        /// </summary>
        [Output("errorOnNondeterministicUpdate")]
        public Output<bool> ErrorOnNondeterministicUpdate { get; private set; } = null!;

        /// <summary>
        /// Fully qualified name of the resource. For more information, see [object name
        /// resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
        /// </summary>
        [Output("fullyQualifiedName")]
        public Output<string> FullyQualifiedName { get; private set; } = null!;

        /// <summary>
        /// Display format for [GEOGRAPHY
        /// values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more
        /// information, check [GEOGRAPHY_OUTPUT_FORMAT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).
        /// </summary>
        [Output("geographyOutputFormat")]
        public Output<string> GeographyOutputFormat { get; private set; } = null!;

        /// <summary>
        /// Display format for [GEOMETRY
        /// values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more
        /// information, check [GEOMETRY_OUTPUT_FORMAT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).
        /// </summary>
        [Output("geometryOutputFormat")]
        public Output<string> GeometryOutputFormat { get; private set; } = null!;

        /// <summary>
        /// Specifies how JDBC processes columns that have a scale of zero (0). For more information, check
        /// [JDBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).
        /// </summary>
        [Output("jdbcTreatDecimalAsInt")]
        public Output<bool> JdbcTreatDecimalAsInt { get; private set; } = null!;

        /// <summary>
        /// Specifies how JDBC processes TIMESTAMP_NTZ values. For more information, check [JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).
        /// </summary>
        [Output("jdbcTreatTimestampNtzAsUtc")]
        public Output<bool> JdbcTreatTimestampNtzAsUtc { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the
        /// [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(),
        /// getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC_USE_SESSION_TIMEZONE
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).
        /// </summary>
        [Output("jdbcUseSessionTimezone")]
        public Output<bool> JdbcUseSessionTimezone { get; private set; } = null!;

        /// <summary>
        /// Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to
        /// insert newline characters after each element. For more information, check [JSON_INDENT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).
        /// </summary>
        [Output("jsonIndent")]
        public Output<int> JsonIndent { get; private set; } = null!;

        /// <summary>
        /// Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more
        /// information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).
        /// </summary>
        [Output("lockTimeout")]
        public Output<int> LockTimeout { get; private set; } = null!;

        /// <summary>
        /// Specifies the severity level of messages that should be ingested and made available in the active event table. Messages
        /// at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log
        /// level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check
        /// [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
        /// </summary>
        [Output("logLevel")]
        public Output<string> LogLevel { get; private set; } = null!;

        /// <summary>
        /// The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.
        /// </summary>
        [Output("loginName")]
        public Output<string?> LoginName { get; private set; } = null!;

        [Output("minsToUnlock")]
        public Output<int?> MinsToUnlock { get; private set; } = null!;

        /// <summary>
        /// Number of statements to execute when using the multi-statement capability. For more information, check
        /// [MULTI_STATEMENT_COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).
        /// </summary>
        [Output("multiStatementCount")]
        public Output<int> MultiStatementCount { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the user is forced to change their password on next login (including their first/initial login) into
        /// the system. Available options are: "true" or "false". When the value is not set in the configuration the provider will
        /// put "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Output("mustChangePassword")]
        public Output<string?> MustChangePassword { get; private set; } = null!;

        /// <summary>
        /// Name of the user. Note that if you do not supply login_name this will be used as login_name. Check the
        /// [docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical
        /// limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the network policy to enforce for your account. Network policies enable restricting access to your account
        /// based on users’ IP address. For more details, see [Controlling network traffic with network
        /// policies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE
        /// NETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check
        /// [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).
        /// </summary>
        [Output("networkPolicy")]
        public Output<string> NetworkPolicy { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table
        /// column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or
        /// auto-incremented column in [increasing or decreasing
        /// order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For
        /// more information, check [NOORDER_SEQUENCE_AS_DEFAULT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).
        /// </summary>
        [Output("noorderSequenceAsDefault")]
        public Output<bool> NoorderSequenceAsDefault { get; private set; } = null!;

        /// <summary>
        /// Specifies how ODBC processes columns that have a scale of zero (0). For more information, check
        /// [ODBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).
        /// </summary>
        [Output("odbcTreatDecimalAsInt")]
        public Output<bool> OdbcTreatDecimalAsInt { get; private set; } = null!;

        /// <summary>
        /// Outputs the result of `SHOW PARAMETERS IN USER` for the given user.
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableArray<Outputs.LegacyServiceUserParameter>> Parameters { get; private set; } = null!;

        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO
        /// &lt;location&gt;](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check
        /// [PREVENT_UNLOAD_TO_INTERNAL_STAGES
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).
        /// </summary>
        [Output("preventUnloadToInternalStages")]
        public Output<bool> PreventUnloadToInternalStages { get; private set; } = null!;

        /// <summary>
        /// Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are
        /// displayed in the output of the [QUERY_HISTORY,
        /// QUERY_HISTORY_BY_*](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more
        /// information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).
        /// </summary>
        [Output("queryTag")]
        public Output<string> QueryTag { get; private set; } = null!;

        /// <summary>
        /// Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default,
        /// Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see
        /// [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)).
        /// You can use this parameter in situations in which [third-party applications always use double quotes around
        /// identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For
        /// more information, check [QUOTED_IDENTIFIERS_IGNORE_CASE
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).
        /// </summary>
        [Output("quotedIdentifiersIgnoreCase")]
        public Output<bool> QuotedIdentifiersIgnoreCase { get; private set; } = null!;

        /// <summary>
        /// Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information,
        /// check [ROWS_PER_RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).
        /// </summary>
        [Output("rowsPerResultset")]
        public Output<int> RowsPerResultset { get; private set; } = null!;

        /// <summary>
        /// Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.
        /// </summary>
        [Output("rsaPublicKey")]
        public Output<string?> RsaPublicKey { get; private set; } = null!;

        /// <summary>
        /// Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication
        /// based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
        /// </summary>
        [Output("rsaPublicKey2")]
        public Output<string?> RsaPublicKey2 { get; private set; } = null!;

        /// <summary>
        /// Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS
        /// PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html)
        /// use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface
        /// endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation).
        /// For more information, check [S3_STAGE_VPCE_DNS_NAME
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).
        /// </summary>
        [Output("s3StageVpceDnsName")]
        public Output<string> S3StageVpceDnsName { get; private set; } = null!;

        /// <summary>
        /// Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution
        /// in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path).
        /// Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more
        /// information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).
        /// </summary>
        [Output("searchPath")]
        public Output<string> SearchPath { get; private set; } = null!;

        /// <summary>
        /// Outputs the result of `SHOW USER` for the given user.
        /// </summary>
        [Output("showOutputs")]
        public Output<ImmutableArray<Outputs.LegacyServiceUserShowOutput>> ShowOutputs { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure
        /// views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer
        /// account rather than the provider account. For more information, see [Introduction to Secure Data
        /// Sharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with
        /// shares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check
        /// [SIMULATED_DATA_SHARING_CONSUMER
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).
        /// </summary>
        [Output("simulatedDataSharingConsumer")]
        public Output<string> SimulatedDataSharingConsumer { get; private set; } = null!;

        /// <summary>
        /// Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled
        /// by the system. This parameter can be used in conjunction with the
        /// [MAX_CONCURRENCY_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to
        /// ensure a warehouse is never backlogged. For more information, check [STATEMENT_QUEUED_TIMEOUT_IN_SECONDS
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).
        /// </summary>
        [Output("statementQueuedTimeoutInSeconds")]
        public Output<int> StatementQueuedTimeoutInSeconds { get; private set; } = null!;

        /// <summary>
        /// Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For
        /// more information, check [STATEMENT_TIMEOUT_IN_SECONDS
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).
        /// </summary>
        [Output("statementTimeoutInSeconds")]
        public Output<int> StatementTimeoutInSeconds { get; private set; } = null!;

        /// <summary>
        /// This parameter specifies whether JSON output in a session is compatible with the general standard (as described by
        /// [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however,
        /// these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and
        /// languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information,
        /// check [STRICT_JSON_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).
        /// </summary>
        [Output("strictJsonOutput")]
        public Output<bool> StrictJsonOutput { get; private set; } = null!;

        /// <summary>
        /// Specifies the input format for the TIME data type. For more information, see [Date and time input and output
        /// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO
        /// (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the
        /// session). For more information, check [TIME_INPUT_FORMAT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).
        /// </summary>
        [Output("timeInputFormat")]
        public Output<string> TimeInputFormat { get; private set; } = null!;

        /// <summary>
        /// Specifies the display format for the TIME data type. For more information, see [Date and time input and output
        /// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
        /// [TIME_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).
        /// </summary>
        [Output("timeOutputFormat")]
        public Output<string> TimeOutputFormat { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its
        /// aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information,
        /// check [TIMESTAMP_DAY_IS_ALWAYS_24H
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).
        /// </summary>
        [Output("timestampDayIsAlways24h")]
        public Output<bool> TimestampDayIsAlways24h { get; private set; } = null!;

        /// <summary>
        /// Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output
        /// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or
        /// AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system
        /// during the session). For more information, check [TIMESTAMP_INPUT_FORMAT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).
        /// </summary>
        [Output("timestampInputFormat")]
        public Output<string> TimestampInputFormat { get; private set; } = null!;

        /// <summary>
        /// Specifies the display format for the TIMESTAMP_LTZ data type. If no format is specified, defaults to
        /// [TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For
        /// more information, see [Date and time input and output
        /// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
        /// [TIMESTAMP_LTZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).
        /// </summary>
        [Output("timestampLtzOutputFormat")]
        public Output<string> TimestampLtzOutputFormat { get; private set; } = null!;

        /// <summary>
        /// Specifies the display format for the TIMESTAMP_NTZ data type. For more information, check [TIMESTAMP_NTZ_OUTPUT_FORMAT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).
        /// </summary>
        [Output("timestampNtzOutputFormat")]
        public Output<string> TimestampNtzOutputFormat { get; private set; } = null!;

        /// <summary>
        /// Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and
        /// output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
        /// [TIMESTAMP_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).
        /// </summary>
        [Output("timestampOutputFormat")]
        public Output<string> TimestampOutputFormat { get; private set; } = null!;

        /// <summary>
        /// Specifies the TIMESTAMP_* variation that the TIMESTAMP data type alias maps to. For more information, check
        /// [TIMESTAMP_TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).
        /// </summary>
        [Output("timestampTypeMapping")]
        public Output<string> TimestampTypeMapping { get; private set; } = null!;

        /// <summary>
        /// Specifies the display format for the TIMESTAMP_TZ data type. If no format is specified, defaults to
        /// [TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For
        /// more information, see [Date and time input and output
        /// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
        /// [TIMESTAMP_TZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).
        /// </summary>
        [Output("timestampTzOutputFormat")]
        public Output<string> TimestampTzOutputFormat { get; private set; } = null!;

        /// <summary>
        /// Specifies the time zone for the session. You can specify a [time zone
        /// name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link
        /// name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone
        /// Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more
        /// information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).
        /// </summary>
        [Output("timezone")]
        public Output<string> Timezone { get; private set; } = null!;

        /// <summary>
        /// Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace
        /// level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check
        /// [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
        /// </summary>
        [Output("traceLevel")]
        public Output<string> TraceLevel { get; private set; } = null!;

        /// <summary>
        /// Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For
        /// more information, check [TRANSACTION_ABORT_ON_ERROR
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).
        /// </summary>
        [Output("transactionAbortOnError")]
        public Output<bool> TransactionAbortOnError { get; private set; } = null!;

        /// <summary>
        /// Specifies the isolation level for transactions in the user session. For more information, check
        /// [TRANSACTION_DEFAULT_ISOLATION_LEVEL
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).
        /// </summary>
        [Output("transactionDefaultIsolationLevel")]
        public Output<string> TransactionDefaultIsolationLevel { get; private set; } = null!;

        /// <summary>
        /// Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This
        /// parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years
        /// represented as 2 digits). For more information, check [TWO_DIGIT_CENTURY_START
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).
        /// </summary>
        [Output("twoDigitCenturyStart")]
        public Output<int> TwoDigitCenturyStart { get; private set; } = null!;

        /// <summary>
        /// Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more
        /// information, check [UNSUPPORTED_DDL_ACTION
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).
        /// </summary>
        [Output("unsupportedDdlAction")]
        public Output<string> UnsupportedDdlAction { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more
        /// information, check [USE_CACHED_RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).
        /// </summary>
        [Output("useCachedResult")]
        public Output<bool> UseCachedResult { get; private set; } = null!;

        /// <summary>
        /// Specifies a type for the user.
        /// </summary>
        [Output("userType")]
        public Output<string> UserType { get; private set; } = null!;

        /// <summary>
        /// Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in
        /// which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the
        /// first week of the year and December 31 is included in the last week of the year. For more information, check
        /// [WEEK_OF_YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).
        /// </summary>
        [Output("weekOfYearPolicy")]
        public Output<int> WeekOfYearPolicy { get; private set; } = null!;

        /// <summary>
        /// Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e.
        /// ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified
        /// day of the week. For more information, check [WEEK_START
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).
        /// </summary>
        [Output("weekStart")]
        public Output<int> WeekStart { get; private set; } = null!;


        /// <summary>
        /// Create a LegacyServiceUser resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LegacyServiceUser(string name, LegacyServiceUserArgs? args = null, CustomResourceOptions? options = null)
            : base("snowflake:index/legacyServiceUser:LegacyServiceUser", name, args ?? new LegacyServiceUserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LegacyServiceUser(string name, Input<string> id, LegacyServiceUserState? state = null, CustomResourceOptions? options = null)
            : base("snowflake:index/legacyServiceUser:LegacyServiceUser", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "email",
                    "loginName",
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LegacyServiceUser resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LegacyServiceUser Get(string name, Input<string> id, LegacyServiceUserState? state = null, CustomResourceOptions? options = null)
        {
            return new LegacyServiceUser(name, id, state, options);
        }
    }

    public sealed class LegacyServiceUserArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination
        /// of a session (e.g. network outage, browser termination, service interruption). For more information, check
        /// [ABORT_DETACHED_QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).
        /// </summary>
        [Input("abortDetachedQuery")]
        public Input<bool>? AbortDetachedQuery { get; set; }

        /// <summary>
        /// Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed
        /// without an active transaction, is automatically committed after the statement successfully completes. For more
        /// information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check
        /// [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).
        /// </summary>
        [Input("autocommit")]
        public Input<bool>? Autocommit { get; set; }

        /// <summary>
        /// The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see
        /// [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check
        /// [BINARY_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).
        /// </summary>
        [Input("binaryInputFormat")]
        public Input<string>? BinaryInputFormat { get; set; }

        /// <summary>
        /// The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see
        /// [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check
        /// [BINARY_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).
        /// </summary>
        [Input("binaryOutputFormat")]
        public Input<string>? BinaryOutputFormat { get; set; }

        /// <summary>
        /// Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from
        /// queries (in MB). For more information, check [CLIENT_MEMORY_LIMIT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).
        /// </summary>
        [Input("clientMemoryLimit")]
        public Input<int>? ClientMemoryLimit { get; set; }

        /// <summary>
        /// For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all
        /// databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more
        /// quickly. For more information, check [CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).
        /// </summary>
        [Input("clientMetadataRequestUseConnectionCtx")]
        public Input<bool>? ClientMetadataRequestUseConnectionCtx { get; set; }

        /// <summary>
        /// Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will
        /// attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s
        /// resources) to improve performance. For more information, check [CLIENT_PREFETCH_THREADS
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).
        /// </summary>
        [Input("clientPrefetchThreads")]
        public Input<int>? ClientPrefetchThreads { get; set; }

        /// <summary>
        /// Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver
        /// downloads query results in chunks. For more information, check [CLIENT_RESULT_CHUNK_SIZE
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).
        /// </summary>
        [Input("clientResultChunkSize")]
        public Input<int>? ClientResultChunkSize { get; set; }

        /// <summary>
        /// Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more
        /// information, check [CLIENT_RESULT_COLUMN_CASE_INSENSITIVE
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).
        /// </summary>
        [Input("clientResultColumnCaseInsensitive")]
        public Input<bool>? ClientResultColumnCaseInsensitive { get; set; }

        /// <summary>
        /// Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more
        /// information, check [CLIENT_SESSION_KEEP_ALIVE
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).
        /// </summary>
        [Input("clientSessionKeepAlive")]
        public Input<bool>? ClientSessionKeepAlive { get; set; }

        /// <summary>
        /// Number of seconds in-between client attempts to update the token for the session. For more information, check
        /// [CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).
        /// </summary>
        [Input("clientSessionKeepAliveHeartbeatFrequency")]
        public Input<int>? ClientSessionKeepAliveHeartbeatFrequency { get; set; }

        /// <summary>
        /// Specifies the [TIMESTAMP_*
        /// variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to
        /// use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more
        /// information, check [CLIENT_TIMESTAMP_TYPE_MAPPING
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).
        /// </summary>
        [Input("clientTimestampTypeMapping")]
        public Input<string>? ClientTimestampTypeMapping { get; set; }

        /// <summary>
        /// Specifies a comment for the user.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Specifies the input format for the DATE data type. For more information, see [Date and time input and output
        /// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
        /// [DATE_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).
        /// </summary>
        [Input("dateInputFormat")]
        public Input<string>? DateInputFormat { get; set; }

        /// <summary>
        /// Specifies the display format for the DATE data type. For more information, see [Date and time input and output
        /// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
        /// [DATE_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).
        /// </summary>
        [Input("dateOutputFormat")]
        public Input<string>? DateOutputFormat { get; set; }

        [Input("daysToExpiry")]
        public Input<int>? DaysToExpiry { get; set; }

        /// <summary>
        /// Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon
        /// login. Note that the CREATE USER operation does not verify that the namespace exists.
        /// </summary>
        [Input("defaultNamespace")]
        public Input<string>? DefaultNamespace { get; set; }

        /// <summary>
        /// Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role
        /// for a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT
        /// ROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does
        /// not verify that the role exists. For more information about this resource, see docs.
        /// </summary>
        [Input("defaultRole")]
        public Input<string>? DefaultRole { get; set; }

        /// <summary>
        /// Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive):
        /// `DEFAULT` | `NONE` | `ALL`. More information can be found in
        /// [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).
        /// </summary>
        [Input("defaultSecondaryRolesOption")]
        public Input<string>? DefaultSecondaryRolesOption { get; set; }

        /// <summary>
        /// Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER
        /// operation does not verify that the warehouse exists. For more information about this resource, see docs.
        /// </summary>
        [Input("defaultWarehouse")]
        public Input<string>? DefaultWarehouse { get; set; }

        /// <summary>
        /// Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the
        /// user. Available options are: "true" or "false". When the value is not set in the configuration the provider will put
        /// "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Input("disabled")]
        public Input<string>? Disabled { get; set; }

        /// <summary>
        /// Name displayed for the user in the Snowflake web interface.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("email")]
        private Input<string>? _email;

        /// <summary>
        /// Email address for the user.
        /// </summary>
        public Input<string>? Email
        {
            get => _email;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _email = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in
        /// the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that
        /// support the values in the output columns of the unload SQL statement or source table). For more information, check
        /// [ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).
        /// </summary>
        [Input("enableUnloadPhysicalTypeOptimization")]
        public Input<bool>? EnableUnloadPhysicalTypeOptimization { get; set; }

        /// <summary>
        /// Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content
        /// of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role
        /// that is granted or inherits the AUDIT privilege can set the ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR parameter. When using
        /// the ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the
        /// query text, not the user who executed the query (if those are different users). For more information, check
        /// [ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).
        /// </summary>
        [Input("enableUnredactedQuerySyntaxError")]
        public Input<bool>? EnableUnredactedQuerySyntaxError { get; set; }

        /// <summary>
        /// Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is
        /// used to update or delete a target row that joins multiple source rows and the system cannot determine the action to
        /// perform on the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_MERGE
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).
        /// </summary>
        [Input("errorOnNondeterministicMerge")]
        public Input<bool>? ErrorOnNondeterministicMerge { get; set; }

        /// <summary>
        /// Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command
        /// is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on
        /// the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_UPDATE
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).
        /// </summary>
        [Input("errorOnNondeterministicUpdate")]
        public Input<bool>? ErrorOnNondeterministicUpdate { get; set; }

        /// <summary>
        /// Display format for [GEOGRAPHY
        /// values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more
        /// information, check [GEOGRAPHY_OUTPUT_FORMAT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).
        /// </summary>
        [Input("geographyOutputFormat")]
        public Input<string>? GeographyOutputFormat { get; set; }

        /// <summary>
        /// Display format for [GEOMETRY
        /// values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more
        /// information, check [GEOMETRY_OUTPUT_FORMAT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).
        /// </summary>
        [Input("geometryOutputFormat")]
        public Input<string>? GeometryOutputFormat { get; set; }

        /// <summary>
        /// Specifies how JDBC processes columns that have a scale of zero (0). For more information, check
        /// [JDBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).
        /// </summary>
        [Input("jdbcTreatDecimalAsInt")]
        public Input<bool>? JdbcTreatDecimalAsInt { get; set; }

        /// <summary>
        /// Specifies how JDBC processes TIMESTAMP_NTZ values. For more information, check [JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).
        /// </summary>
        [Input("jdbcTreatTimestampNtzAsUtc")]
        public Input<bool>? JdbcTreatTimestampNtzAsUtc { get; set; }

        /// <summary>
        /// Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the
        /// [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(),
        /// getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC_USE_SESSION_TIMEZONE
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).
        /// </summary>
        [Input("jdbcUseSessionTimezone")]
        public Input<bool>? JdbcUseSessionTimezone { get; set; }

        /// <summary>
        /// Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to
        /// insert newline characters after each element. For more information, check [JSON_INDENT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).
        /// </summary>
        [Input("jsonIndent")]
        public Input<int>? JsonIndent { get; set; }

        /// <summary>
        /// Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more
        /// information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).
        /// </summary>
        [Input("lockTimeout")]
        public Input<int>? LockTimeout { get; set; }

        /// <summary>
        /// Specifies the severity level of messages that should be ingested and made available in the active event table. Messages
        /// at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log
        /// level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check
        /// [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
        /// </summary>
        [Input("logLevel")]
        public Input<string>? LogLevel { get; set; }

        [Input("loginName")]
        private Input<string>? _loginName;

        /// <summary>
        /// The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.
        /// </summary>
        public Input<string>? LoginName
        {
            get => _loginName;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _loginName = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("minsToUnlock")]
        public Input<int>? MinsToUnlock { get; set; }

        /// <summary>
        /// Number of statements to execute when using the multi-statement capability. For more information, check
        /// [MULTI_STATEMENT_COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).
        /// </summary>
        [Input("multiStatementCount")]
        public Input<int>? MultiStatementCount { get; set; }

        /// <summary>
        /// Specifies whether the user is forced to change their password on next login (including their first/initial login) into
        /// the system. Available options are: "true" or "false". When the value is not set in the configuration the provider will
        /// put "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Input("mustChangePassword")]
        public Input<string>? MustChangePassword { get; set; }

        /// <summary>
        /// Name of the user. Note that if you do not supply login_name this will be used as login_name. Check the
        /// [docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical
        /// limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the network policy to enforce for your account. Network policies enable restricting access to your account
        /// based on users’ IP address. For more details, see [Controlling network traffic with network
        /// policies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE
        /// NETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check
        /// [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).
        /// </summary>
        [Input("networkPolicy")]
        public Input<string>? NetworkPolicy { get; set; }

        /// <summary>
        /// Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table
        /// column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or
        /// auto-incremented column in [increasing or decreasing
        /// order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For
        /// more information, check [NOORDER_SEQUENCE_AS_DEFAULT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).
        /// </summary>
        [Input("noorderSequenceAsDefault")]
        public Input<bool>? NoorderSequenceAsDefault { get; set; }

        /// <summary>
        /// Specifies how ODBC processes columns that have a scale of zero (0). For more information, check
        /// [ODBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).
        /// </summary>
        [Input("odbcTreatDecimalAsInt")]
        public Input<bool>? OdbcTreatDecimalAsInt { get; set; }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO
        /// &lt;location&gt;](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check
        /// [PREVENT_UNLOAD_TO_INTERNAL_STAGES
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).
        /// </summary>
        [Input("preventUnloadToInternalStages")]
        public Input<bool>? PreventUnloadToInternalStages { get; set; }

        /// <summary>
        /// Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are
        /// displayed in the output of the [QUERY_HISTORY,
        /// QUERY_HISTORY_BY_*](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more
        /// information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).
        /// </summary>
        [Input("queryTag")]
        public Input<string>? QueryTag { get; set; }

        /// <summary>
        /// Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default,
        /// Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see
        /// [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)).
        /// You can use this parameter in situations in which [third-party applications always use double quotes around
        /// identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For
        /// more information, check [QUOTED_IDENTIFIERS_IGNORE_CASE
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).
        /// </summary>
        [Input("quotedIdentifiersIgnoreCase")]
        public Input<bool>? QuotedIdentifiersIgnoreCase { get; set; }

        /// <summary>
        /// Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information,
        /// check [ROWS_PER_RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).
        /// </summary>
        [Input("rowsPerResultset")]
        public Input<int>? RowsPerResultset { get; set; }

        /// <summary>
        /// Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.
        /// </summary>
        [Input("rsaPublicKey")]
        public Input<string>? RsaPublicKey { get; set; }

        /// <summary>
        /// Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication
        /// based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
        /// </summary>
        [Input("rsaPublicKey2")]
        public Input<string>? RsaPublicKey2 { get; set; }

        /// <summary>
        /// Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS
        /// PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html)
        /// use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface
        /// endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation).
        /// For more information, check [S3_STAGE_VPCE_DNS_NAME
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).
        /// </summary>
        [Input("s3StageVpceDnsName")]
        public Input<string>? S3StageVpceDnsName { get; set; }

        /// <summary>
        /// Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution
        /// in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path).
        /// Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more
        /// information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).
        /// </summary>
        [Input("searchPath")]
        public Input<string>? SearchPath { get; set; }

        /// <summary>
        /// Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure
        /// views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer
        /// account rather than the provider account. For more information, see [Introduction to Secure Data
        /// Sharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with
        /// shares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check
        /// [SIMULATED_DATA_SHARING_CONSUMER
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).
        /// </summary>
        [Input("simulatedDataSharingConsumer")]
        public Input<string>? SimulatedDataSharingConsumer { get; set; }

        /// <summary>
        /// Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled
        /// by the system. This parameter can be used in conjunction with the
        /// [MAX_CONCURRENCY_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to
        /// ensure a warehouse is never backlogged. For more information, check [STATEMENT_QUEUED_TIMEOUT_IN_SECONDS
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).
        /// </summary>
        [Input("statementQueuedTimeoutInSeconds")]
        public Input<int>? StatementQueuedTimeoutInSeconds { get; set; }

        /// <summary>
        /// Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For
        /// more information, check [STATEMENT_TIMEOUT_IN_SECONDS
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).
        /// </summary>
        [Input("statementTimeoutInSeconds")]
        public Input<int>? StatementTimeoutInSeconds { get; set; }

        /// <summary>
        /// This parameter specifies whether JSON output in a session is compatible with the general standard (as described by
        /// [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however,
        /// these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and
        /// languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information,
        /// check [STRICT_JSON_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).
        /// </summary>
        [Input("strictJsonOutput")]
        public Input<bool>? StrictJsonOutput { get; set; }

        /// <summary>
        /// Specifies the input format for the TIME data type. For more information, see [Date and time input and output
        /// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO
        /// (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the
        /// session). For more information, check [TIME_INPUT_FORMAT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).
        /// </summary>
        [Input("timeInputFormat")]
        public Input<string>? TimeInputFormat { get; set; }

        /// <summary>
        /// Specifies the display format for the TIME data type. For more information, see [Date and time input and output
        /// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
        /// [TIME_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).
        /// </summary>
        [Input("timeOutputFormat")]
        public Input<string>? TimeOutputFormat { get; set; }

        /// <summary>
        /// Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its
        /// aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information,
        /// check [TIMESTAMP_DAY_IS_ALWAYS_24H
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).
        /// </summary>
        [Input("timestampDayIsAlways24h")]
        public Input<bool>? TimestampDayIsAlways24h { get; set; }

        /// <summary>
        /// Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output
        /// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or
        /// AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system
        /// during the session). For more information, check [TIMESTAMP_INPUT_FORMAT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).
        /// </summary>
        [Input("timestampInputFormat")]
        public Input<string>? TimestampInputFormat { get; set; }

        /// <summary>
        /// Specifies the display format for the TIMESTAMP_LTZ data type. If no format is specified, defaults to
        /// [TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For
        /// more information, see [Date and time input and output
        /// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
        /// [TIMESTAMP_LTZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).
        /// </summary>
        [Input("timestampLtzOutputFormat")]
        public Input<string>? TimestampLtzOutputFormat { get; set; }

        /// <summary>
        /// Specifies the display format for the TIMESTAMP_NTZ data type. For more information, check [TIMESTAMP_NTZ_OUTPUT_FORMAT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).
        /// </summary>
        [Input("timestampNtzOutputFormat")]
        public Input<string>? TimestampNtzOutputFormat { get; set; }

        /// <summary>
        /// Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and
        /// output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
        /// [TIMESTAMP_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).
        /// </summary>
        [Input("timestampOutputFormat")]
        public Input<string>? TimestampOutputFormat { get; set; }

        /// <summary>
        /// Specifies the TIMESTAMP_* variation that the TIMESTAMP data type alias maps to. For more information, check
        /// [TIMESTAMP_TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).
        /// </summary>
        [Input("timestampTypeMapping")]
        public Input<string>? TimestampTypeMapping { get; set; }

        /// <summary>
        /// Specifies the display format for the TIMESTAMP_TZ data type. If no format is specified, defaults to
        /// [TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For
        /// more information, see [Date and time input and output
        /// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
        /// [TIMESTAMP_TZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).
        /// </summary>
        [Input("timestampTzOutputFormat")]
        public Input<string>? TimestampTzOutputFormat { get; set; }

        /// <summary>
        /// Specifies the time zone for the session. You can specify a [time zone
        /// name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link
        /// name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone
        /// Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more
        /// information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace
        /// level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check
        /// [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
        /// </summary>
        [Input("traceLevel")]
        public Input<string>? TraceLevel { get; set; }

        /// <summary>
        /// Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For
        /// more information, check [TRANSACTION_ABORT_ON_ERROR
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).
        /// </summary>
        [Input("transactionAbortOnError")]
        public Input<bool>? TransactionAbortOnError { get; set; }

        /// <summary>
        /// Specifies the isolation level for transactions in the user session. For more information, check
        /// [TRANSACTION_DEFAULT_ISOLATION_LEVEL
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).
        /// </summary>
        [Input("transactionDefaultIsolationLevel")]
        public Input<string>? TransactionDefaultIsolationLevel { get; set; }

        /// <summary>
        /// Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This
        /// parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years
        /// represented as 2 digits). For more information, check [TWO_DIGIT_CENTURY_START
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).
        /// </summary>
        [Input("twoDigitCenturyStart")]
        public Input<int>? TwoDigitCenturyStart { get; set; }

        /// <summary>
        /// Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more
        /// information, check [UNSUPPORTED_DDL_ACTION
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).
        /// </summary>
        [Input("unsupportedDdlAction")]
        public Input<string>? UnsupportedDdlAction { get; set; }

        /// <summary>
        /// Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more
        /// information, check [USE_CACHED_RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).
        /// </summary>
        [Input("useCachedResult")]
        public Input<bool>? UseCachedResult { get; set; }

        /// <summary>
        /// Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in
        /// which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the
        /// first week of the year and December 31 is included in the last week of the year. For more information, check
        /// [WEEK_OF_YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).
        /// </summary>
        [Input("weekOfYearPolicy")]
        public Input<int>? WeekOfYearPolicy { get; set; }

        /// <summary>
        /// Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e.
        /// ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified
        /// day of the week. For more information, check [WEEK_START
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).
        /// </summary>
        [Input("weekStart")]
        public Input<int>? WeekStart { get; set; }

        public LegacyServiceUserArgs()
        {
        }
        public static new LegacyServiceUserArgs Empty => new LegacyServiceUserArgs();
    }

    public sealed class LegacyServiceUserState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination
        /// of a session (e.g. network outage, browser termination, service interruption). For more information, check
        /// [ABORT_DETACHED_QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).
        /// </summary>
        [Input("abortDetachedQuery")]
        public Input<bool>? AbortDetachedQuery { get; set; }

        /// <summary>
        /// Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed
        /// without an active transaction, is automatically committed after the statement successfully completes. For more
        /// information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check
        /// [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).
        /// </summary>
        [Input("autocommit")]
        public Input<bool>? Autocommit { get; set; }

        /// <summary>
        /// The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see
        /// [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check
        /// [BINARY_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).
        /// </summary>
        [Input("binaryInputFormat")]
        public Input<string>? BinaryInputFormat { get; set; }

        /// <summary>
        /// The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see
        /// [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check
        /// [BINARY_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).
        /// </summary>
        [Input("binaryOutputFormat")]
        public Input<string>? BinaryOutputFormat { get; set; }

        /// <summary>
        /// Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from
        /// queries (in MB). For more information, check [CLIENT_MEMORY_LIMIT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).
        /// </summary>
        [Input("clientMemoryLimit")]
        public Input<int>? ClientMemoryLimit { get; set; }

        /// <summary>
        /// For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all
        /// databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more
        /// quickly. For more information, check [CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).
        /// </summary>
        [Input("clientMetadataRequestUseConnectionCtx")]
        public Input<bool>? ClientMetadataRequestUseConnectionCtx { get; set; }

        /// <summary>
        /// Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will
        /// attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s
        /// resources) to improve performance. For more information, check [CLIENT_PREFETCH_THREADS
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).
        /// </summary>
        [Input("clientPrefetchThreads")]
        public Input<int>? ClientPrefetchThreads { get; set; }

        /// <summary>
        /// Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver
        /// downloads query results in chunks. For more information, check [CLIENT_RESULT_CHUNK_SIZE
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).
        /// </summary>
        [Input("clientResultChunkSize")]
        public Input<int>? ClientResultChunkSize { get; set; }

        /// <summary>
        /// Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more
        /// information, check [CLIENT_RESULT_COLUMN_CASE_INSENSITIVE
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).
        /// </summary>
        [Input("clientResultColumnCaseInsensitive")]
        public Input<bool>? ClientResultColumnCaseInsensitive { get; set; }

        /// <summary>
        /// Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more
        /// information, check [CLIENT_SESSION_KEEP_ALIVE
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).
        /// </summary>
        [Input("clientSessionKeepAlive")]
        public Input<bool>? ClientSessionKeepAlive { get; set; }

        /// <summary>
        /// Number of seconds in-between client attempts to update the token for the session. For more information, check
        /// [CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).
        /// </summary>
        [Input("clientSessionKeepAliveHeartbeatFrequency")]
        public Input<int>? ClientSessionKeepAliveHeartbeatFrequency { get; set; }

        /// <summary>
        /// Specifies the [TIMESTAMP_*
        /// variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to
        /// use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more
        /// information, check [CLIENT_TIMESTAMP_TYPE_MAPPING
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).
        /// </summary>
        [Input("clientTimestampTypeMapping")]
        public Input<string>? ClientTimestampTypeMapping { get; set; }

        /// <summary>
        /// Specifies a comment for the user.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Specifies the input format for the DATE data type. For more information, see [Date and time input and output
        /// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
        /// [DATE_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).
        /// </summary>
        [Input("dateInputFormat")]
        public Input<string>? DateInputFormat { get; set; }

        /// <summary>
        /// Specifies the display format for the DATE data type. For more information, see [Date and time input and output
        /// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
        /// [DATE_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).
        /// </summary>
        [Input("dateOutputFormat")]
        public Input<string>? DateOutputFormat { get; set; }

        [Input("daysToExpiry")]
        public Input<int>? DaysToExpiry { get; set; }

        /// <summary>
        /// Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon
        /// login. Note that the CREATE USER operation does not verify that the namespace exists.
        /// </summary>
        [Input("defaultNamespace")]
        public Input<string>? DefaultNamespace { get; set; }

        /// <summary>
        /// Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role
        /// for a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT
        /// ROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does
        /// not verify that the role exists. For more information about this resource, see docs.
        /// </summary>
        [Input("defaultRole")]
        public Input<string>? DefaultRole { get; set; }

        /// <summary>
        /// Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive):
        /// `DEFAULT` | `NONE` | `ALL`. More information can be found in
        /// [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).
        /// </summary>
        [Input("defaultSecondaryRolesOption")]
        public Input<string>? DefaultSecondaryRolesOption { get; set; }

        /// <summary>
        /// Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER
        /// operation does not verify that the warehouse exists. For more information about this resource, see docs.
        /// </summary>
        [Input("defaultWarehouse")]
        public Input<string>? DefaultWarehouse { get; set; }

        /// <summary>
        /// Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the
        /// user. Available options are: "true" or "false". When the value is not set in the configuration the provider will put
        /// "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Input("disabled")]
        public Input<string>? Disabled { get; set; }

        /// <summary>
        /// Name displayed for the user in the Snowflake web interface.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("email")]
        private Input<string>? _email;

        /// <summary>
        /// Email address for the user.
        /// </summary>
        public Input<string>? Email
        {
            get => _email;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _email = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in
        /// the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that
        /// support the values in the output columns of the unload SQL statement or source table). For more information, check
        /// [ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).
        /// </summary>
        [Input("enableUnloadPhysicalTypeOptimization")]
        public Input<bool>? EnableUnloadPhysicalTypeOptimization { get; set; }

        /// <summary>
        /// Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content
        /// of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role
        /// that is granted or inherits the AUDIT privilege can set the ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR parameter. When using
        /// the ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the
        /// query text, not the user who executed the query (if those are different users). For more information, check
        /// [ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).
        /// </summary>
        [Input("enableUnredactedQuerySyntaxError")]
        public Input<bool>? EnableUnredactedQuerySyntaxError { get; set; }

        /// <summary>
        /// Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is
        /// used to update or delete a target row that joins multiple source rows and the system cannot determine the action to
        /// perform on the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_MERGE
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).
        /// </summary>
        [Input("errorOnNondeterministicMerge")]
        public Input<bool>? ErrorOnNondeterministicMerge { get; set; }

        /// <summary>
        /// Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command
        /// is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on
        /// the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_UPDATE
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).
        /// </summary>
        [Input("errorOnNondeterministicUpdate")]
        public Input<bool>? ErrorOnNondeterministicUpdate { get; set; }

        /// <summary>
        /// Fully qualified name of the resource. For more information, see [object name
        /// resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
        /// </summary>
        [Input("fullyQualifiedName")]
        public Input<string>? FullyQualifiedName { get; set; }

        /// <summary>
        /// Display format for [GEOGRAPHY
        /// values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more
        /// information, check [GEOGRAPHY_OUTPUT_FORMAT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).
        /// </summary>
        [Input("geographyOutputFormat")]
        public Input<string>? GeographyOutputFormat { get; set; }

        /// <summary>
        /// Display format for [GEOMETRY
        /// values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more
        /// information, check [GEOMETRY_OUTPUT_FORMAT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).
        /// </summary>
        [Input("geometryOutputFormat")]
        public Input<string>? GeometryOutputFormat { get; set; }

        /// <summary>
        /// Specifies how JDBC processes columns that have a scale of zero (0). For more information, check
        /// [JDBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).
        /// </summary>
        [Input("jdbcTreatDecimalAsInt")]
        public Input<bool>? JdbcTreatDecimalAsInt { get; set; }

        /// <summary>
        /// Specifies how JDBC processes TIMESTAMP_NTZ values. For more information, check [JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).
        /// </summary>
        [Input("jdbcTreatTimestampNtzAsUtc")]
        public Input<bool>? JdbcTreatTimestampNtzAsUtc { get; set; }

        /// <summary>
        /// Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the
        /// [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(),
        /// getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC_USE_SESSION_TIMEZONE
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).
        /// </summary>
        [Input("jdbcUseSessionTimezone")]
        public Input<bool>? JdbcUseSessionTimezone { get; set; }

        /// <summary>
        /// Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to
        /// insert newline characters after each element. For more information, check [JSON_INDENT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).
        /// </summary>
        [Input("jsonIndent")]
        public Input<int>? JsonIndent { get; set; }

        /// <summary>
        /// Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more
        /// information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).
        /// </summary>
        [Input("lockTimeout")]
        public Input<int>? LockTimeout { get; set; }

        /// <summary>
        /// Specifies the severity level of messages that should be ingested and made available in the active event table. Messages
        /// at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log
        /// level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check
        /// [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
        /// </summary>
        [Input("logLevel")]
        public Input<string>? LogLevel { get; set; }

        [Input("loginName")]
        private Input<string>? _loginName;

        /// <summary>
        /// The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.
        /// </summary>
        public Input<string>? LoginName
        {
            get => _loginName;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _loginName = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("minsToUnlock")]
        public Input<int>? MinsToUnlock { get; set; }

        /// <summary>
        /// Number of statements to execute when using the multi-statement capability. For more information, check
        /// [MULTI_STATEMENT_COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).
        /// </summary>
        [Input("multiStatementCount")]
        public Input<int>? MultiStatementCount { get; set; }

        /// <summary>
        /// Specifies whether the user is forced to change their password on next login (including their first/initial login) into
        /// the system. Available options are: "true" or "false". When the value is not set in the configuration the provider will
        /// put "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Input("mustChangePassword")]
        public Input<string>? MustChangePassword { get; set; }

        /// <summary>
        /// Name of the user. Note that if you do not supply login_name this will be used as login_name. Check the
        /// [docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical
        /// limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the network policy to enforce for your account. Network policies enable restricting access to your account
        /// based on users’ IP address. For more details, see [Controlling network traffic with network
        /// policies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE
        /// NETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check
        /// [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).
        /// </summary>
        [Input("networkPolicy")]
        public Input<string>? NetworkPolicy { get; set; }

        /// <summary>
        /// Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table
        /// column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or
        /// auto-incremented column in [increasing or decreasing
        /// order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For
        /// more information, check [NOORDER_SEQUENCE_AS_DEFAULT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).
        /// </summary>
        [Input("noorderSequenceAsDefault")]
        public Input<bool>? NoorderSequenceAsDefault { get; set; }

        /// <summary>
        /// Specifies how ODBC processes columns that have a scale of zero (0). For more information, check
        /// [ODBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).
        /// </summary>
        [Input("odbcTreatDecimalAsInt")]
        public Input<bool>? OdbcTreatDecimalAsInt { get; set; }

        [Input("parameters")]
        private InputList<Inputs.LegacyServiceUserParameterGetArgs>? _parameters;

        /// <summary>
        /// Outputs the result of `SHOW PARAMETERS IN USER` for the given user.
        /// </summary>
        public InputList<Inputs.LegacyServiceUserParameterGetArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<Inputs.LegacyServiceUserParameterGetArgs>());
            set => _parameters = value;
        }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO
        /// &lt;location&gt;](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check
        /// [PREVENT_UNLOAD_TO_INTERNAL_STAGES
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).
        /// </summary>
        [Input("preventUnloadToInternalStages")]
        public Input<bool>? PreventUnloadToInternalStages { get; set; }

        /// <summary>
        /// Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are
        /// displayed in the output of the [QUERY_HISTORY,
        /// QUERY_HISTORY_BY_*](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more
        /// information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).
        /// </summary>
        [Input("queryTag")]
        public Input<string>? QueryTag { get; set; }

        /// <summary>
        /// Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default,
        /// Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see
        /// [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)).
        /// You can use this parameter in situations in which [third-party applications always use double quotes around
        /// identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For
        /// more information, check [QUOTED_IDENTIFIERS_IGNORE_CASE
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).
        /// </summary>
        [Input("quotedIdentifiersIgnoreCase")]
        public Input<bool>? QuotedIdentifiersIgnoreCase { get; set; }

        /// <summary>
        /// Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information,
        /// check [ROWS_PER_RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).
        /// </summary>
        [Input("rowsPerResultset")]
        public Input<int>? RowsPerResultset { get; set; }

        /// <summary>
        /// Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.
        /// </summary>
        [Input("rsaPublicKey")]
        public Input<string>? RsaPublicKey { get; set; }

        /// <summary>
        /// Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication
        /// based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
        /// </summary>
        [Input("rsaPublicKey2")]
        public Input<string>? RsaPublicKey2 { get; set; }

        /// <summary>
        /// Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS
        /// PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html)
        /// use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface
        /// endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation).
        /// For more information, check [S3_STAGE_VPCE_DNS_NAME
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).
        /// </summary>
        [Input("s3StageVpceDnsName")]
        public Input<string>? S3StageVpceDnsName { get; set; }

        /// <summary>
        /// Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution
        /// in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path).
        /// Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more
        /// information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).
        /// </summary>
        [Input("searchPath")]
        public Input<string>? SearchPath { get; set; }

        [Input("showOutputs")]
        private InputList<Inputs.LegacyServiceUserShowOutputGetArgs>? _showOutputs;

        /// <summary>
        /// Outputs the result of `SHOW USER` for the given user.
        /// </summary>
        public InputList<Inputs.LegacyServiceUserShowOutputGetArgs> ShowOutputs
        {
            get => _showOutputs ?? (_showOutputs = new InputList<Inputs.LegacyServiceUserShowOutputGetArgs>());
            set => _showOutputs = value;
        }

        /// <summary>
        /// Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure
        /// views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer
        /// account rather than the provider account. For more information, see [Introduction to Secure Data
        /// Sharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with
        /// shares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check
        /// [SIMULATED_DATA_SHARING_CONSUMER
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).
        /// </summary>
        [Input("simulatedDataSharingConsumer")]
        public Input<string>? SimulatedDataSharingConsumer { get; set; }

        /// <summary>
        /// Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled
        /// by the system. This parameter can be used in conjunction with the
        /// [MAX_CONCURRENCY_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to
        /// ensure a warehouse is never backlogged. For more information, check [STATEMENT_QUEUED_TIMEOUT_IN_SECONDS
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).
        /// </summary>
        [Input("statementQueuedTimeoutInSeconds")]
        public Input<int>? StatementQueuedTimeoutInSeconds { get; set; }

        /// <summary>
        /// Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For
        /// more information, check [STATEMENT_TIMEOUT_IN_SECONDS
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).
        /// </summary>
        [Input("statementTimeoutInSeconds")]
        public Input<int>? StatementTimeoutInSeconds { get; set; }

        /// <summary>
        /// This parameter specifies whether JSON output in a session is compatible with the general standard (as described by
        /// [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however,
        /// these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and
        /// languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information,
        /// check [STRICT_JSON_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).
        /// </summary>
        [Input("strictJsonOutput")]
        public Input<bool>? StrictJsonOutput { get; set; }

        /// <summary>
        /// Specifies the input format for the TIME data type. For more information, see [Date and time input and output
        /// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO
        /// (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the
        /// session). For more information, check [TIME_INPUT_FORMAT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).
        /// </summary>
        [Input("timeInputFormat")]
        public Input<string>? TimeInputFormat { get; set; }

        /// <summary>
        /// Specifies the display format for the TIME data type. For more information, see [Date and time input and output
        /// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
        /// [TIME_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).
        /// </summary>
        [Input("timeOutputFormat")]
        public Input<string>? TimeOutputFormat { get; set; }

        /// <summary>
        /// Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its
        /// aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information,
        /// check [TIMESTAMP_DAY_IS_ALWAYS_24H
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).
        /// </summary>
        [Input("timestampDayIsAlways24h")]
        public Input<bool>? TimestampDayIsAlways24h { get; set; }

        /// <summary>
        /// Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output
        /// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or
        /// AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system
        /// during the session). For more information, check [TIMESTAMP_INPUT_FORMAT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).
        /// </summary>
        [Input("timestampInputFormat")]
        public Input<string>? TimestampInputFormat { get; set; }

        /// <summary>
        /// Specifies the display format for the TIMESTAMP_LTZ data type. If no format is specified, defaults to
        /// [TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For
        /// more information, see [Date and time input and output
        /// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
        /// [TIMESTAMP_LTZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).
        /// </summary>
        [Input("timestampLtzOutputFormat")]
        public Input<string>? TimestampLtzOutputFormat { get; set; }

        /// <summary>
        /// Specifies the display format for the TIMESTAMP_NTZ data type. For more information, check [TIMESTAMP_NTZ_OUTPUT_FORMAT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).
        /// </summary>
        [Input("timestampNtzOutputFormat")]
        public Input<string>? TimestampNtzOutputFormat { get; set; }

        /// <summary>
        /// Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and
        /// output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
        /// [TIMESTAMP_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).
        /// </summary>
        [Input("timestampOutputFormat")]
        public Input<string>? TimestampOutputFormat { get; set; }

        /// <summary>
        /// Specifies the TIMESTAMP_* variation that the TIMESTAMP data type alias maps to. For more information, check
        /// [TIMESTAMP_TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).
        /// </summary>
        [Input("timestampTypeMapping")]
        public Input<string>? TimestampTypeMapping { get; set; }

        /// <summary>
        /// Specifies the display format for the TIMESTAMP_TZ data type. If no format is specified, defaults to
        /// [TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For
        /// more information, see [Date and time input and output
        /// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
        /// [TIMESTAMP_TZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).
        /// </summary>
        [Input("timestampTzOutputFormat")]
        public Input<string>? TimestampTzOutputFormat { get; set; }

        /// <summary>
        /// Specifies the time zone for the session. You can specify a [time zone
        /// name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link
        /// name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone
        /// Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more
        /// information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace
        /// level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check
        /// [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
        /// </summary>
        [Input("traceLevel")]
        public Input<string>? TraceLevel { get; set; }

        /// <summary>
        /// Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For
        /// more information, check [TRANSACTION_ABORT_ON_ERROR
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).
        /// </summary>
        [Input("transactionAbortOnError")]
        public Input<bool>? TransactionAbortOnError { get; set; }

        /// <summary>
        /// Specifies the isolation level for transactions in the user session. For more information, check
        /// [TRANSACTION_DEFAULT_ISOLATION_LEVEL
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).
        /// </summary>
        [Input("transactionDefaultIsolationLevel")]
        public Input<string>? TransactionDefaultIsolationLevel { get; set; }

        /// <summary>
        /// Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This
        /// parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years
        /// represented as 2 digits). For more information, check [TWO_DIGIT_CENTURY_START
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).
        /// </summary>
        [Input("twoDigitCenturyStart")]
        public Input<int>? TwoDigitCenturyStart { get; set; }

        /// <summary>
        /// Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more
        /// information, check [UNSUPPORTED_DDL_ACTION
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).
        /// </summary>
        [Input("unsupportedDdlAction")]
        public Input<string>? UnsupportedDdlAction { get; set; }

        /// <summary>
        /// Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more
        /// information, check [USE_CACHED_RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).
        /// </summary>
        [Input("useCachedResult")]
        public Input<bool>? UseCachedResult { get; set; }

        /// <summary>
        /// Specifies a type for the user.
        /// </summary>
        [Input("userType")]
        public Input<string>? UserType { get; set; }

        /// <summary>
        /// Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in
        /// which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the
        /// first week of the year and December 31 is included in the last week of the year. For more information, check
        /// [WEEK_OF_YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).
        /// </summary>
        [Input("weekOfYearPolicy")]
        public Input<int>? WeekOfYearPolicy { get; set; }

        /// <summary>
        /// Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e.
        /// ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified
        /// day of the week. For more information, check [WEEK_START
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).
        /// </summary>
        [Input("weekStart")]
        public Input<int>? WeekStart { get; set; }

        public LegacyServiceUserState()
        {
        }
        public static new LegacyServiceUserState Empty => new LegacyServiceUserState();
    }
}
