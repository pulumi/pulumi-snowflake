// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.Snowflake
{
    public static class Config
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("snowflake");

        private static readonly __Value<string?> _accountName = new __Value<string?>(() => __config.Get("accountName"));
        /// <summary>
        /// Specifies your Snowflake account name assigned by Snowflake. For information about account identifiers, see the [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#account-name). Required unless using `Profile`. Can also be sourced from the `SNOWFLAKE_ACCOUNT_NAME` environment variable.
        /// </summary>
        public static string? AccountName
        {
            get => _accountName.Get();
            set => _accountName.Set(value);
        }

        private static readonly __Value<string?> _authenticator = new __Value<string?>(() => __config.Get("authenticator"));
        /// <summary>
        /// Specifies the [authentication type](https://pkg.go.dev/github.com/snowflakedb/gosnowflake#AuthType) to use when connecting to Snowflake. Valid options are: `SNOWFLAKE` | `OAUTH` | `EXTERNALBROWSER` | `OKTA` | `SNOWFLAKE_JWT` | `TOKENACCESSOR` | `USERNAMEPASSWORDMFA` | `PROGRAMMATIC_ACCESS_TOKEN` | `OAUTH_CLIENT_CREDENTIALS` | `OAUTH_AUTHORIZATION_CODE` | `WORKLOAD_IDENTITY`. Can also be sourced from the `SNOWFLAKE_AUTHENTICATOR` environment variable.
        /// </summary>
        public static string? Authenticator
        {
            get => _authenticator.Get();
            set => _authenticator.Set(value);
        }

        private static readonly __Value<string?> _clientIp = new __Value<string?>(() => __config.Get("clientIp"));
        /// <summary>
        /// IP address for network checks. Can also be sourced from the `SNOWFLAKE_CLIENT_IP` environment variable.
        /// </summary>
        public static string? ClientIp
        {
            get => _clientIp.Get();
            set => _clientIp.Set(value);
        }

        private static readonly __Value<string?> _clientRequestMfaToken = new __Value<string?>(() => __config.Get("clientRequestMfaToken"));
        /// <summary>
        /// When true the MFA token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be sourced from the `SNOWFLAKE_CLIENT_REQUEST_MFA_TOKEN` environment variable.
        /// </summary>
        public static string? ClientRequestMfaToken
        {
            get => _clientRequestMfaToken.Get();
            set => _clientRequestMfaToken.Set(value);
        }

        private static readonly __Value<string?> _clientStoreTemporaryCredential = new __Value<string?>(() => __config.Get("clientStoreTemporaryCredential"));
        /// <summary>
        /// When true the ID token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be sourced from the `SNOWFLAKE_CLIENT_STORE_TEMPORARY_CREDENTIAL` environment variable.
        /// </summary>
        public static string? ClientStoreTemporaryCredential
        {
            get => _clientStoreTemporaryCredential.Get();
            set => _clientStoreTemporaryCredential.Set(value);
        }

        private static readonly __Value<int?> _clientTimeout = new __Value<int?>(() => __config.GetInt32("clientTimeout"));
        /// <summary>
        /// The timeout in seconds for the client to complete the authentication. Can also be sourced from the `SNOWFLAKE_CLIENT_TIMEOUT` environment variable.
        /// </summary>
        public static int? ClientTimeout
        {
            get => _clientTimeout.Get();
            set => _clientTimeout.Set(value);
        }

        private static readonly __Value<string?> _disableConsoleLogin = new __Value<string?>(() => __config.Get("disableConsoleLogin"));
        /// <summary>
        /// Indicates whether console login should be disabled in the driver. Can also be sourced from the `SNOWFLAKE_DISABLE_CONSOLE_LOGIN` environment variable.
        /// </summary>
        public static string? DisableConsoleLogin
        {
            get => _disableConsoleLogin.Get();
            set => _disableConsoleLogin.Set(value);
        }

        private static readonly __Value<bool?> _disableQueryContextCache = new __Value<bool?>(() => __config.GetBoolean("disableQueryContextCache"));
        /// <summary>
        /// Disables HTAP query context cache in the driver. Can also be sourced from the `SNOWFLAKE_DISABLE_QUERY_CONTEXT_CACHE` environment variable.
        /// </summary>
        public static bool? DisableQueryContextCache
        {
            get => _disableQueryContextCache.Get();
            set => _disableQueryContextCache.Set(value);
        }

        private static readonly __Value<bool?> _disableTelemetry = new __Value<bool?>(() => __config.GetBoolean("disableTelemetry"));
        /// <summary>
        /// Disables telemetry in the driver. Can also be sourced from the `DISABLE_TELEMETRY` environment variable.
        /// </summary>
        public static bool? DisableTelemetry
        {
            get => _disableTelemetry.Get();
            set => _disableTelemetry.Set(value);
        }

        private static readonly __Value<string?> _driverTracing = new __Value<string?>(() => __config.Get("driverTracing"));
        /// <summary>
        /// Specifies the logging level to be used by the driver. Valid options are: `Trace` | `Debug` | `Info` | `Print` | `Warning` | `Error` | `Fatal` | `Panic`. Can also be sourced from the `SNOWFLAKE_DRIVER_TRACING` environment variable.
        /// </summary>
        public static string? DriverTracing
        {
            get => _driverTracing.Get();
            set => _driverTracing.Set(value);
        }

        private static readonly __Value<bool?> _enableSingleUseRefreshTokens = new __Value<bool?>(() => __config.GetBoolean("enableSingleUseRefreshTokens"));
        /// <summary>
        /// Enables single use refresh tokens for Snowflake IdP. Can also be sourced from the `SNOWFLAKE_ENABLE_SINGLE_USE_REFRESH_TOKENS` environment variable.
        /// </summary>
        public static bool? EnableSingleUseRefreshTokens
        {
            get => _enableSingleUseRefreshTokens.Get();
            set => _enableSingleUseRefreshTokens.Set(value);
        }

        private static readonly __Value<ImmutableArray<string>> _experimentalFeaturesEnableds = new __Value<ImmutableArray<string>>(() => __config.GetObject<ImmutableArray<string>>("experimentalFeaturesEnableds"));
        /// <summary>
        /// A list of experimental features. Similarly to preview features, they are not yet stable features of the provider. Enabling given experiment is still considered a preview feature, even when applied to the stable resource. These switches offer experiments altering the provider behavior. If the given experiment is successful, it can be considered an addition in the future provider versions. This field can not be set with environmental variables. Valid options are: `WAREHOUSE_SHOW_IMPROVED_PERFORMANCE`.
        /// </summary>
        public static ImmutableArray<string> ExperimentalFeaturesEnableds
        {
            get => _experimentalFeaturesEnableds.Get();
            set => _experimentalFeaturesEnableds.Set(value);
        }

        private static readonly __Value<int?> _externalBrowserTimeout = new __Value<int?>(() => __config.GetInt32("externalBrowserTimeout"));
        /// <summary>
        /// The timeout in seconds for the external browser to complete the authentication. Can also be sourced from the `SNOWFLAKE_EXTERNAL_BROWSER_TIMEOUT` environment variable.
        /// </summary>
        public static int? ExternalBrowserTimeout
        {
            get => _externalBrowserTimeout.Get();
            set => _externalBrowserTimeout.Set(value);
        }

        private static readonly __Value<string?> _host = new __Value<string?>(() => __config.Get("host") ?? Utilities.GetEnv("SNOWFLAKE_HOST"));
        /// <summary>
        /// Specifies a custom host value used by the driver for privatelink connections. Can also be sourced from the `SNOWFLAKE_HOST` environment variable.
        /// </summary>
        public static string? Host
        {
            get => _host.Get();
            set => _host.Set(value);
        }

        private static readonly __Value<string?> _includeRetryReason = new __Value<string?>(() => __config.Get("includeRetryReason"));
        /// <summary>
        /// Should retried request contain retry reason. Can also be sourced from the `SNOWFLAKE_INCLUDE_RETRY_REASON` environment variable.
        /// </summary>
        public static string? IncludeRetryReason
        {
            get => _includeRetryReason.Get();
            set => _includeRetryReason.Set(value);
        }

        private static readonly __Value<bool?> _insecureMode = new __Value<bool?>(() => __config.GetBoolean("insecureMode"));
        /// <summary>
        /// If true, bypass the Online Certificate Status Protocol (OCSP) certificate revocation check. IMPORTANT: Change the default value for testing or emergency situations only. Can also be sourced from the `SNOWFLAKE_INSECURE_MODE` environment variable.
        /// </summary>
        public static bool? InsecureMode
        {
            get => _insecureMode.Get();
            set => _insecureMode.Set(value);
        }

        private static readonly __Value<int?> _jwtClientTimeout = new __Value<int?>(() => __config.GetInt32("jwtClientTimeout"));
        /// <summary>
        /// The timeout in seconds for the JWT client to complete the authentication. Can also be sourced from the `SNOWFLAKE_JWT_CLIENT_TIMEOUT` environment variable.
        /// </summary>
        public static int? JwtClientTimeout
        {
            get => _jwtClientTimeout.Get();
            set => _jwtClientTimeout.Set(value);
        }

        private static readonly __Value<int?> _jwtExpireTimeout = new __Value<int?>(() => __config.GetInt32("jwtExpireTimeout"));
        /// <summary>
        /// JWT expire after timeout in seconds. Can also be sourced from the `SNOWFLAKE_JWT_EXPIRE_TIMEOUT` environment variable.
        /// </summary>
        public static int? JwtExpireTimeout
        {
            get => _jwtExpireTimeout.Get();
            set => _jwtExpireTimeout.Set(value);
        }

        private static readonly __Value<bool?> _keepSessionAlive = new __Value<bool?>(() => __config.GetBoolean("keepSessionAlive"));
        /// <summary>
        /// Enables the session to persist even after the connection is closed. Can also be sourced from the `SNOWFLAKE_KEEP_SESSION_ALIVE` environment variable.
        /// </summary>
        public static bool? KeepSessionAlive
        {
            get => _keepSessionAlive.Get();
            set => _keepSessionAlive.Set(value);
        }

        private static readonly __Value<int?> _loginTimeout = new __Value<int?>(() => __config.GetInt32("loginTimeout"));
        /// <summary>
        /// Login retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the `SNOWFLAKE_LOGIN_TIMEOUT` environment variable.
        /// </summary>
        public static int? LoginTimeout
        {
            get => _loginTimeout.Get();
            set => _loginTimeout.Set(value);
        }

        private static readonly __Value<int?> _maxRetryCount = new __Value<int?>(() => __config.GetInt32("maxRetryCount"));
        /// <summary>
        /// Specifies how many times non-periodic HTTP request can be retried by the driver. Can also be sourced from the `SNOWFLAKE_MAX_RETRY_COUNT` environment variable.
        /// </summary>
        public static int? MaxRetryCount
        {
            get => _maxRetryCount.Get();
            set => _maxRetryCount.Set(value);
        }

        private static readonly __Value<string?> _oauthAuthorizationUrl = new __Value<string?>(() => __config.Get("oauthAuthorizationUrl"));
        /// <summary>
        /// Authorization URL of OAuth2 external IdP. See [Snowflake OAuth documentation](https://docs.snowflake.com/en/user-guide/oauth). Can also be sourced from the `SNOWFLAKE_OAUTH_AUTHORIZATION_URL` environment variable.
        /// </summary>
        public static string? OauthAuthorizationUrl
        {
            get => _oauthAuthorizationUrl.Get();
            set => _oauthAuthorizationUrl.Set(value);
        }

        private static readonly __Value<string?> _oauthClientId = new __Value<string?>(() => __config.Get("oauthClientId"));
        /// <summary>
        /// Client id for OAuth2 external IdP. See [Snowflake OAuth documentation](https://docs.snowflake.com/en/user-guide/oauth). Can also be sourced from the `SNOWFLAKE_OAUTH_CLIENT_ID` environment variable.
        /// </summary>
        public static string? OauthClientId
        {
            get => _oauthClientId.Get();
            set => _oauthClientId.Set(value);
        }

        private static readonly __Value<string?> _oauthClientSecret = new __Value<string?>(() => __config.Get("oauthClientSecret"));
        /// <summary>
        /// Client secret for OAuth2 external IdP. See [Snowflake OAuth documentation](https://docs.snowflake.com/en/user-guide/oauth). Can also be sourced from the `SNOWFLAKE_OAUTH_CLIENT_SECRET` environment variable.
        /// </summary>
        public static string? OauthClientSecret
        {
            get => _oauthClientSecret.Get();
            set => _oauthClientSecret.Set(value);
        }

        private static readonly __Value<string?> _oauthRedirectUri = new __Value<string?>(() => __config.Get("oauthRedirectUri"));
        /// <summary>
        /// Redirect URI registered in IdP. See [Snowflake OAuth documentation](https://docs.snowflake.com/en/user-guide/oauth). Can also be sourced from the `SNOWFLAKE_OAUTH_REDIRECT_URI` environment variable.
        /// </summary>
        public static string? OauthRedirectUri
        {
            get => _oauthRedirectUri.Get();
            set => _oauthRedirectUri.Set(value);
        }

        private static readonly __Value<string?> _oauthScope = new __Value<string?>(() => __config.Get("oauthScope"));
        /// <summary>
        /// Comma separated list of scopes. If empty it is derived from role. See [Snowflake OAuth documentation](https://docs.snowflake.com/en/user-guide/oauth). Can also be sourced from the `SNOWFLAKE_OAUTH_SCOPE` environment variable.
        /// </summary>
        public static string? OauthScope
        {
            get => _oauthScope.Get();
            set => _oauthScope.Set(value);
        }

        private static readonly __Value<string?> _oauthTokenRequestUrl = new __Value<string?>(() => __config.Get("oauthTokenRequestUrl"));
        /// <summary>
        /// Token request URL of OAuth2 external IdP. See [Snowflake OAuth documentation](https://docs.snowflake.com/en/user-guide/oauth). Can also be sourced from the `SNOWFLAKE_OAUTH_TOKEN_REQUEST_URL` environment variable.
        /// </summary>
        public static string? OauthTokenRequestUrl
        {
            get => _oauthTokenRequestUrl.Get();
            set => _oauthTokenRequestUrl.Set(value);
        }

        private static readonly __Value<string?> _ocspFailOpen = new __Value<string?>(() => __config.Get("ocspFailOpen"));
        /// <summary>
        /// True represents OCSP fail open mode. False represents OCSP fail closed mode. Fail open true by default. Can also be sourced from the `SNOWFLAKE_OCSP_FAIL_OPEN` environment variable.
        /// </summary>
        public static string? OcspFailOpen
        {
            get => _ocspFailOpen.Get();
            set => _ocspFailOpen.Set(value);
        }

        private static readonly __Value<string?> _oktaUrl = new __Value<string?>(() => __config.Get("oktaUrl"));
        /// <summary>
        /// The URL of the Okta server. e.g. https://example.okta.com. Okta URL host needs to to have a suffix `okta.com`. Read more in Snowflake [docs](https://docs.snowflake.com/en/user-guide/oauth-okta). Can also be sourced from the `SNOWFLAKE_OKTA_URL` environment variable.
        /// </summary>
        public static string? OktaUrl
        {
            get => _oktaUrl.Get();
            set => _oktaUrl.Set(value);
        }

        private static readonly __Value<string?> _organizationName = new __Value<string?>(() => __config.Get("organizationName"));
        /// <summary>
        /// Specifies your Snowflake organization name assigned by Snowflake. For information about account identifiers, see the [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#organization-name). Required unless using `Profile`. Can also be sourced from the `SNOWFLAKE_ORGANIZATION_NAME` environment variable.
        /// </summary>
        public static string? OrganizationName
        {
            get => _organizationName.Get();
            set => _organizationName.Set(value);
        }

        private static readonly __Value<ImmutableDictionary<string, string>?> _params = new __Value<ImmutableDictionary<string, string>?>(() => __config.GetObject<ImmutableDictionary<string, string>>("params"));
        /// <summary>
        /// Sets other connection (i.e. session) parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters). This field can not be set with environmental variables.
        /// </summary>
        public static ImmutableDictionary<string, string>? Params
        {
            get => _params.Get();
            set => _params.Set(value);
        }

        private static readonly __Value<string?> _passcode = new __Value<string?>(() => __config.Get("passcode"));
        /// <summary>
        /// Specifies the passcode provided by Duo when using multi-factor authentication (MFA) for login. Can also be sourced from the `SNOWFLAKE_PASSCODE` environment variable.
        /// </summary>
        public static string? Passcode
        {
            get => _passcode.Get();
            set => _passcode.Set(value);
        }

        private static readonly __Value<bool?> _passcodeInPassword = new __Value<bool?>(() => __config.GetBoolean("passcodeInPassword"));
        /// <summary>
        /// False by default. Set to true if the MFA passcode is embedded to the configured password. Can also be sourced from the `SNOWFLAKE_PASSCODE_IN_PASSWORD` environment variable.
        /// </summary>
        public static bool? PasscodeInPassword
        {
            get => _passcodeInPassword.Get();
            set => _passcodeInPassword.Set(value);
        }

        private static readonly __Value<string?> _password = new __Value<string?>(() => __config.Get("password") ?? Utilities.GetEnv("SNOWFLAKE_PASSWORD"));
        /// <summary>
        /// Password for user + password or [token](https://docs.snowflake.com/en/user-guide/programmatic-access-tokens#generating-a-programmatic-access-token) for [PAT auth](https://docs.snowflake.com/en/user-guide/programmatic-access-tokens). Cannot be used with `PrivateKey` and `PrivateKeyPassphrase`. Can also be sourced from the `SNOWFLAKE_PASSWORD` environment variable.
        /// </summary>
        public static string? Password
        {
            get => _password.Get();
            set => _password.Set(value);
        }

        private static readonly __Value<int?> _port = new __Value<int?>(() => __config.GetInt32("port") ?? Utilities.GetEnvInt32("SNOWFLAKE_PORT"));
        /// <summary>
        /// Specifies a custom port value used by the driver for privatelink connections. Can also be sourced from the `SNOWFLAKE_PORT` environment variable.
        /// </summary>
        public static int? Port
        {
            get => _port.Get();
            set => _port.Set(value);
        }

        private static readonly __Value<ImmutableArray<string>> _previewFeaturesEnabled = new __Value<ImmutableArray<string>>(() => __config.GetObject<ImmutableArray<string>>("previewFeaturesEnabled"));
        public static ImmutableArray<string> PreviewFeaturesEnabled
        {
            get => _previewFeaturesEnabled.Get();
            set => _previewFeaturesEnabled.Set(value);
        }

        private static readonly __Value<string?> _privateKey = new __Value<string?>(() => __config.Get("privateKey"));
        /// <summary>
        /// Private Key for username+private-key auth. Cannot be used with `Password`. Can also be sourced from the `SNOWFLAKE_PRIVATE_KEY` environment variable.
        /// </summary>
        public static string? PrivateKey
        {
            get => _privateKey.Get();
            set => _privateKey.Set(value);
        }

        private static readonly __Value<string?> _privateKeyPassphrase = new __Value<string?>(() => __config.Get("privateKeyPassphrase") ?? Utilities.GetEnv("SNOWFLAKE_PRIVATE_KEY_PASSPHRASE"));
        /// <summary>
        /// Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and des-ede3-cbc. Can also be sourced from the `SNOWFLAKE_PRIVATE_KEY_PASSPHRASE` environment variable.
        /// </summary>
        public static string? PrivateKeyPassphrase
        {
            get => _privateKeyPassphrase.Get();
            set => _privateKeyPassphrase.Set(value);
        }

        private static readonly __Value<string?> _profile = new __Value<string?>(() => __config.Get("profile"));
        /// <summary>
        /// Sets the profile to read from ~/.snowflake/config file. Can also be sourced from the `SNOWFLAKE_PROFILE` environment variable.
        /// </summary>
        public static string? Profile
        {
            get => _profile.Get();
            set => _profile.Set(value);
        }

        private static readonly __Value<string?> _protocol = new __Value<string?>(() => __config.Get("protocol") ?? Utilities.GetEnv("SNOWFLAKE_PROTOCOL"));
        /// <summary>
        /// A protocol used in the connection. Valid options are: `Http` | `Https`. Can also be sourced from the `SNOWFLAKE_PROTOCOL` environment variable.
        /// </summary>
        public static string? Protocol
        {
            get => _protocol.Get();
            set => _protocol.Set(value);
        }

        private static readonly __Value<int?> _requestTimeout = new __Value<int?>(() => __config.GetInt32("requestTimeout"));
        /// <summary>
        /// request retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the `SNOWFLAKE_REQUEST_TIMEOUT` environment variable.
        /// </summary>
        public static int? RequestTimeout
        {
            get => _requestTimeout.Get();
            set => _requestTimeout.Set(value);
        }

        private static readonly __Value<string?> _role = new __Value<string?>(() => __config.Get("role") ?? Utilities.GetEnv("SNOWFLAKE_ROLE"));
        /// <summary>
        /// Specifies the role to use by default for accessing Snowflake objects in the client session. Can also be sourced from the `SNOWFLAKE_ROLE` environment variable.
        /// </summary>
        public static string? Role
        {
            get => _role.Get();
            set => _role.Set(value);
        }

        private static readonly __Value<bool?> _skipTomlFilePermissionVerification = new __Value<bool?>(() => __config.GetBoolean("skipTomlFilePermissionVerification"));
        /// <summary>
        /// False by default. Skips TOML configuration file permission verification. This flag has no effect on Windows systems, as the permissions are not checked on this platform. Instead of skipping the permissions verification, we recommend setting the proper privileges - see the section below. Can also be sourced from the `SNOWFLAKE_SKIP_TOML_FILE_PERMISSION_VERIFICATION` environment variable.
        /// </summary>
        public static bool? SkipTomlFilePermissionVerification
        {
            get => _skipTomlFilePermissionVerification.Get();
            set => _skipTomlFilePermissionVerification.Set(value);
        }

        private static readonly __Value<string?> _tmpDirectoryPath = new __Value<string?>(() => __config.Get("tmpDirectoryPath"));
        /// <summary>
        /// Sets temporary directory used by the driver for operations like encrypting, compressing etc. Can also be sourced from the `SNOWFLAKE_TMP_DIRECTORY_PATH` environment variable.
        /// </summary>
        public static string? TmpDirectoryPath
        {
            get => _tmpDirectoryPath.Get();
            set => _tmpDirectoryPath.Set(value);
        }

        private static readonly __Value<string?> _token = new __Value<string?>(() => __config.Get("token"));
        /// <summary>
        /// Token to use for OAuth and other forms of token based auth. When this field is set here, or in the TOML file, the provider sets the `Authenticator` to `OAUTH`. Optionally, set the `Authenticator` field to the authenticator you want to use. Can also be sourced from the `SNOWFLAKE_TOKEN` environment variable.
        /// </summary>
        public static string? Token
        {
            get => _token.Get();
            set => _token.Set(value);
        }

        private static readonly __Value<Pulumi.Snowflake.Config.Types.TokenAccessor?> _tokenAccessor = new __Value<Pulumi.Snowflake.Config.Types.TokenAccessor?>(() => __config.GetObject<Pulumi.Snowflake.Config.Types.TokenAccessor>("tokenAccessor"));
        /// <summary>
        /// If you are using the OAuth authentication flows, use the dedicated `Authenticator` and `oauth...` fields instead. See our authentication methods guide for more information.
        /// </summary>
        public static Pulumi.Snowflake.Config.Types.TokenAccessor? TokenAccessor
        {
            get => _tokenAccessor.Get();
            set => _tokenAccessor.Set(value);
        }

        private static readonly __Value<bool?> _useLegacyTomlFile = new __Value<bool?>(() => __config.GetBoolean("useLegacyTomlFile"));
        /// <summary>
        /// False by default. When this is set to true, the provider expects the legacy TOML format. Otherwise, it expects the new format. See more in the section below Can also be sourced from the `SNOWFLAKE_USE_LEGACY_TOML_FILE` environment variable.
        /// </summary>
        public static bool? UseLegacyTomlFile
        {
            get => _useLegacyTomlFile.Get();
            set => _useLegacyTomlFile.Set(value);
        }

        private static readonly __Value<string?> _user = new __Value<string?>(() => __config.Get("user"));
        /// <summary>
        /// Username. Required unless using `Profile`. Can also be sourced from the `SNOWFLAKE_USER` environment variable.
        /// </summary>
        public static string? User
        {
            get => _user.Get();
            set => _user.Set(value);
        }

        private static readonly __Value<string?> _validateDefaultParameters = new __Value<string?>(() => __config.Get("validateDefaultParameters"));
        /// <summary>
        /// True by default. If false, disables the validation checks for Database, Schema, Warehouse and Role at the time a connection is established. Can also be sourced from the `SNOWFLAKE_VALIDATE_DEFAULT_PARAMETERS` environment variable.
        /// </summary>
        public static string? ValidateDefaultParameters
        {
            get => _validateDefaultParameters.Get();
            set => _validateDefaultParameters.Set(value);
        }

        private static readonly __Value<string?> _warehouse = new __Value<string?>(() => __config.Get("warehouse") ?? Utilities.GetEnv("SNOWFLAKE_WAREHOUSE"));
        /// <summary>
        /// Specifies the virtual warehouse to use by default for queries, loading, etc. in the client session. Can also be sourced from the `SNOWFLAKE_WAREHOUSE` environment variable.
        /// </summary>
        public static string? Warehouse
        {
            get => _warehouse.Get();
            set => _warehouse.Set(value);
        }

        private static readonly __Value<string?> _workloadIdentityEntraResource = new __Value<string?>(() => __config.Get("workloadIdentityEntraResource"));
        /// <summary>
        /// The resource to use for WIF authentication on Azure environment. Can also be sourced from the `SNOWFLAKE_WORKLOAD_IDENTITY_ENTRA_RESOURCE` environment variable.
        /// </summary>
        public static string? WorkloadIdentityEntraResource
        {
            get => _workloadIdentityEntraResource.Get();
            set => _workloadIdentityEntraResource.Set(value);
        }

        private static readonly __Value<string?> _workloadIdentityProvider = new __Value<string?>(() => __config.Get("workloadIdentityProvider"));
        /// <summary>
        /// The workload identity provider to use for WIF authentication. Can also be sourced from the `SNOWFLAKE_WORKLOAD_IDENTITY_PROVIDER` environment variable.
        /// </summary>
        public static string? WorkloadIdentityProvider
        {
            get => _workloadIdentityProvider.Get();
            set => _workloadIdentityProvider.Set(value);
        }

        public static class Types
        {

             public class TokenAccessor
             {
            /// <summary>
            /// The client ID for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_CLIENT_ID` environment variable.
            /// </summary>
                public string ClientId { get; set; }
            /// <summary>
            /// The client secret for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_CLIENT_SECRET` environment variable.
            /// </summary>
                public string ClientSecret { get; set; }
            /// <summary>
            /// The redirect URI for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_REDIRECT_URI` environment variable.
            /// </summary>
                public string RedirectUri { get; set; }
            /// <summary>
            /// The refresh token for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_REFRESH_TOKEN` environment variable.
            /// </summary>
                public string RefreshToken { get; set; }
            /// <summary>
            /// The token endpoint for the OAuth provider e.g. https://{yourDomain}/oauth/token when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_TOKEN_ENDPOINT` environment variable.
            /// </summary>
                public string TokenEndpoint { get; set; }
            }
        }
    }
}
