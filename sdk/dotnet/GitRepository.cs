// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    /// <summary>
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import snowflake:index/gitRepository:GitRepository example '"&lt;db_name&gt;"."&lt;schema_name&gt;"."&lt;git_repository_name&gt;"'
    /// ```
    /// </summary>
    [SnowflakeResourceType("snowflake:index/gitRepository:GitRepository")]
    public partial class GitRepository : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier of API INTEGRATION containing information about the remote Git repository such as allowed credentials and prefixes for target URLs.
        /// </summary>
        [Output("apiIntegration")]
        public Output<string> ApiIntegration { get; private set; } = null!;

        /// <summary>
        /// Specifies a comment for the git repository.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// The database in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
        /// </summary>
        [Output("database")]
        public Output<string> Database { get; private set; } = null!;

        /// <summary>
        /// Outputs the result of `DESCRIBE GIT REPOSITORY` for the given git repository.
        /// </summary>
        [Output("describeOutputs")]
        public Output<ImmutableArray<Outputs.GitRepositoryDescribeOutput>> DescribeOutputs { get; private set; } = null!;

        /// <summary>
        /// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
        /// </summary>
        [Output("fullyQualifiedName")]
        public Output<string> FullyQualifiedName { get; private set; } = null!;

        /// <summary>
        /// Specifies the Snowflake secret fully qualified name (e.g `"\"&lt;db_name&gt;\".\"&lt;schema_name&gt;\".\"&lt;secret_name&gt;\""`) containing the credentials to use for authenticating with the remote Git repository. Omit this parameter to use the default secret specified by the API integration or if this integration does not require authentication.
        /// </summary>
        [Output("gitCredentials")]
        public Output<string?> GitCredentials { get; private set; } = null!;

        /// <summary>
        /// Specifies the identifier for the git repository; must be unique for the schema in which the git repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the origin URL of the remote Git repository that this Git repository clone represents. The URL must use HTTPS.
        /// </summary>
        [Output("origin")]
        public Output<string> Origin { get; private set; } = null!;

        /// <summary>
        /// The schema in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
        /// </summary>
        [Output("schema")]
        public Output<string> Schema { get; private set; } = null!;

        /// <summary>
        /// Outputs the result of `SHOW GIT REPOSITORIES` for the given git repository.
        /// </summary>
        [Output("showOutputs")]
        public Output<ImmutableArray<Outputs.GitRepositoryShowOutput>> ShowOutputs { get; private set; } = null!;


        /// <summary>
        /// Create a GitRepository resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GitRepository(string name, GitRepositoryArgs args, CustomResourceOptions? options = null)
            : base("snowflake:index/gitRepository:GitRepository", name, args ?? new GitRepositoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GitRepository(string name, Input<string> id, GitRepositoryState? state = null, CustomResourceOptions? options = null)
            : base("snowflake:index/gitRepository:GitRepository", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GitRepository resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GitRepository Get(string name, Input<string> id, GitRepositoryState? state = null, CustomResourceOptions? options = null)
        {
            return new GitRepository(name, id, state, options);
        }
    }

    public sealed class GitRepositoryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier of API INTEGRATION containing information about the remote Git repository such as allowed credentials and prefixes for target URLs.
        /// </summary>
        [Input("apiIntegration", required: true)]
        public Input<string> ApiIntegration { get; set; } = null!;

        /// <summary>
        /// Specifies a comment for the git repository.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// The database in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
        /// </summary>
        [Input("database", required: true)]
        public Input<string> Database { get; set; } = null!;

        /// <summary>
        /// Specifies the Snowflake secret fully qualified name (e.g `"\"&lt;db_name&gt;\".\"&lt;schema_name&gt;\".\"&lt;secret_name&gt;\""`) containing the credentials to use for authenticating with the remote Git repository. Omit this parameter to use the default secret specified by the API integration or if this integration does not require authentication.
        /// </summary>
        [Input("gitCredentials")]
        public Input<string>? GitCredentials { get; set; }

        /// <summary>
        /// Specifies the identifier for the git repository; must be unique for the schema in which the git repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the origin URL of the remote Git repository that this Git repository clone represents. The URL must use HTTPS.
        /// </summary>
        [Input("origin", required: true)]
        public Input<string> Origin { get; set; } = null!;

        /// <summary>
        /// The schema in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
        /// </summary>
        [Input("schema", required: true)]
        public Input<string> Schema { get; set; } = null!;

        public GitRepositoryArgs()
        {
        }
        public static new GitRepositoryArgs Empty => new GitRepositoryArgs();
    }

    public sealed class GitRepositoryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier of API INTEGRATION containing information about the remote Git repository such as allowed credentials and prefixes for target URLs.
        /// </summary>
        [Input("apiIntegration")]
        public Input<string>? ApiIntegration { get; set; }

        /// <summary>
        /// Specifies a comment for the git repository.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// The database in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
        /// </summary>
        [Input("database")]
        public Input<string>? Database { get; set; }

        [Input("describeOutputs")]
        private InputList<Inputs.GitRepositoryDescribeOutputGetArgs>? _describeOutputs;

        /// <summary>
        /// Outputs the result of `DESCRIBE GIT REPOSITORY` for the given git repository.
        /// </summary>
        public InputList<Inputs.GitRepositoryDescribeOutputGetArgs> DescribeOutputs
        {
            get => _describeOutputs ?? (_describeOutputs = new InputList<Inputs.GitRepositoryDescribeOutputGetArgs>());
            set => _describeOutputs = value;
        }

        /// <summary>
        /// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
        /// </summary>
        [Input("fullyQualifiedName")]
        public Input<string>? FullyQualifiedName { get; set; }

        /// <summary>
        /// Specifies the Snowflake secret fully qualified name (e.g `"\"&lt;db_name&gt;\".\"&lt;schema_name&gt;\".\"&lt;secret_name&gt;\""`) containing the credentials to use for authenticating with the remote Git repository. Omit this parameter to use the default secret specified by the API integration or if this integration does not require authentication.
        /// </summary>
        [Input("gitCredentials")]
        public Input<string>? GitCredentials { get; set; }

        /// <summary>
        /// Specifies the identifier for the git repository; must be unique for the schema in which the git repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the origin URL of the remote Git repository that this Git repository clone represents. The URL must use HTTPS.
        /// </summary>
        [Input("origin")]
        public Input<string>? Origin { get; set; }

        /// <summary>
        /// The schema in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        [Input("showOutputs")]
        private InputList<Inputs.GitRepositoryShowOutputGetArgs>? _showOutputs;

        /// <summary>
        /// Outputs the result of `SHOW GIT REPOSITORIES` for the given git repository.
        /// </summary>
        public InputList<Inputs.GitRepositoryShowOutputGetArgs> ShowOutputs
        {
            get => _showOutputs ?? (_showOutputs = new InputList<Inputs.GitRepositoryShowOutputGetArgs>());
            set => _showOutputs = value;
        }

        public GitRepositoryState()
        {
        }
        public static new GitRepositoryState Empty => new GitRepositoryState();
    }
}
