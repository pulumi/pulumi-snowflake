// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    /// <summary>
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import snowflake:index/oauthIntegrationForCustomClients:OauthIntegrationForCustomClients example '"&lt;integration_name&gt;"'
    /// ```
    /// </summary>
    [SnowflakeResourceType("snowflake:index/oauthIntegrationForCustomClients:OauthIntegrationForCustomClients")]
    public partial class OauthIntegrationForCustomClients : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.
        /// </summary>
        [Output("blockedRolesLists")]
        public Output<ImmutableArray<string>> BlockedRolesLists { get; private set; } = null!;

        /// <summary>
        /// Specifies a comment for the OAuth integration.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.
        /// </summary>
        [Output("describeOutputs")]
        public Output<ImmutableArray<Outputs.OauthIntegrationForCustomClientsDescribeOutput>> DescribeOutputs { get; private set; } = null!;

        /// <summary>
        /// Specifies whether this OAuth integration is enabled or disabled. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Output("enabled")]
        public Output<string?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
        /// </summary>
        [Output("fullyQualifiedName")]
        public Output<string> FullyQualifiedName { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies an existing network policy. This network policy controls network traffic that is attempting to exchange an authorization code for an access or refresh token or to use a refresh token to obtain a new access token. For more information about this resource, see docs.
        /// </summary>
        [Output("networkPolicy")]
        public Output<string?> NetworkPolicy { get; private set; } = null!;

        /// <summary>
        /// If true, allows setting oauth*redirect*uri to a URI not protected by TLS. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Output("oauthAllowNonTlsRedirectUri")]
        public Output<string?> OauthAllowNonTlsRedirectUri { get; private set; } = null!;

        [Output("oauthClientRsaPublicKey")]
        public Output<string?> OauthClientRsaPublicKey { get; private set; } = null!;

        [Output("oauthClientRsaPublicKey2")]
        public Output<string?> OauthClientRsaPublicKey2 { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of client being registered. Snowflake supports both confidential and public clients. Valid options are: `PUBLIC` | `CONFIDENTIAL`.
        /// </summary>
        [Output("oauthClientType")]
        public Output<string> OauthClientType { get; private set; } = null!;

        /// <summary>
        /// Boolean that specifies whether Proof Key for Code Exchange (PKCE) should be required for the integration. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Output("oauthEnforcePkce")]
        public Output<string?> OauthEnforcePkce { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Output("oauthIssueRefreshTokens")]
        public Output<string?> OauthIssueRefreshTokens { get; private set; } = null!;

        /// <summary>
        /// Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.
        /// </summary>
        [Output("oauthRedirectUri")]
        public Output<string> OauthRedirectUri { get; private set; } = null!;

        /// <summary>
        /// Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.
        /// </summary>
        [Output("oauthRefreshTokenValidity")]
        public Output<int?> OauthRefreshTokenValidity { get; private set; } = null!;

        /// <summary>
        /// Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.
        /// </summary>
        [Output("oauthUseSecondaryRoles")]
        public Output<string?> OauthUseSecondaryRoles { get; private set; } = null!;

        /// <summary>
        /// A set of Snowflake roles that a user does not need to explicitly consent to using after authenticating. For more information about this resource, see docs.
        /// </summary>
        [Output("preAuthorizedRolesLists")]
        public Output<ImmutableArray<string>> PreAuthorizedRolesLists { get; private set; } = null!;

        /// <summary>
        /// Parameters related to this security integration.
        /// </summary>
        [Output("relatedParameters")]
        public Output<ImmutableArray<Outputs.OauthIntegrationForCustomClientsRelatedParameter>> RelatedParameters { get; private set; } = null!;

        /// <summary>
        /// Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.
        /// </summary>
        [Output("showOutputs")]
        public Output<ImmutableArray<Outputs.OauthIntegrationForCustomClientsShowOutput>> ShowOutputs { get; private set; } = null!;


        /// <summary>
        /// Create a OauthIntegrationForCustomClients resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OauthIntegrationForCustomClients(string name, OauthIntegrationForCustomClientsArgs args, CustomResourceOptions? options = null)
            : base("snowflake:index/oauthIntegrationForCustomClients:OauthIntegrationForCustomClients", name, args ?? new OauthIntegrationForCustomClientsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OauthIntegrationForCustomClients(string name, Input<string> id, OauthIntegrationForCustomClientsState? state = null, CustomResourceOptions? options = null)
            : base("snowflake:index/oauthIntegrationForCustomClients:OauthIntegrationForCustomClients", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OauthIntegrationForCustomClients resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OauthIntegrationForCustomClients Get(string name, Input<string> id, OauthIntegrationForCustomClientsState? state = null, CustomResourceOptions? options = null)
        {
            return new OauthIntegrationForCustomClients(name, id, state, options);
        }
    }

    public sealed class OauthIntegrationForCustomClientsArgs : global::Pulumi.ResourceArgs
    {
        [Input("blockedRolesLists")]
        private InputList<string>? _blockedRolesLists;

        /// <summary>
        /// A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.
        /// </summary>
        public InputList<string> BlockedRolesLists
        {
            get => _blockedRolesLists ?? (_blockedRolesLists = new InputList<string>());
            set => _blockedRolesLists = value;
        }

        /// <summary>
        /// Specifies a comment for the OAuth integration.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Specifies whether this OAuth integration is enabled or disabled. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Input("enabled")]
        public Input<string>? Enabled { get; set; }

        /// <summary>
        /// Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies an existing network policy. This network policy controls network traffic that is attempting to exchange an authorization code for an access or refresh token or to use a refresh token to obtain a new access token. For more information about this resource, see docs.
        /// </summary>
        [Input("networkPolicy")]
        public Input<string>? NetworkPolicy { get; set; }

        /// <summary>
        /// If true, allows setting oauth*redirect*uri to a URI not protected by TLS. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Input("oauthAllowNonTlsRedirectUri")]
        public Input<string>? OauthAllowNonTlsRedirectUri { get; set; }

        [Input("oauthClientRsaPublicKey")]
        public Input<string>? OauthClientRsaPublicKey { get; set; }

        [Input("oauthClientRsaPublicKey2")]
        public Input<string>? OauthClientRsaPublicKey2 { get; set; }

        /// <summary>
        /// Specifies the type of client being registered. Snowflake supports both confidential and public clients. Valid options are: `PUBLIC` | `CONFIDENTIAL`.
        /// </summary>
        [Input("oauthClientType", required: true)]
        public Input<string> OauthClientType { get; set; } = null!;

        /// <summary>
        /// Boolean that specifies whether Proof Key for Code Exchange (PKCE) should be required for the integration. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Input("oauthEnforcePkce")]
        public Input<string>? OauthEnforcePkce { get; set; }

        /// <summary>
        /// Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Input("oauthIssueRefreshTokens")]
        public Input<string>? OauthIssueRefreshTokens { get; set; }

        /// <summary>
        /// Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.
        /// </summary>
        [Input("oauthRedirectUri", required: true)]
        public Input<string> OauthRedirectUri { get; set; } = null!;

        /// <summary>
        /// Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.
        /// </summary>
        [Input("oauthRefreshTokenValidity")]
        public Input<int>? OauthRefreshTokenValidity { get; set; }

        /// <summary>
        /// Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.
        /// </summary>
        [Input("oauthUseSecondaryRoles")]
        public Input<string>? OauthUseSecondaryRoles { get; set; }

        [Input("preAuthorizedRolesLists")]
        private InputList<string>? _preAuthorizedRolesLists;

        /// <summary>
        /// A set of Snowflake roles that a user does not need to explicitly consent to using after authenticating. For more information about this resource, see docs.
        /// </summary>
        public InputList<string> PreAuthorizedRolesLists
        {
            get => _preAuthorizedRolesLists ?? (_preAuthorizedRolesLists = new InputList<string>());
            set => _preAuthorizedRolesLists = value;
        }

        public OauthIntegrationForCustomClientsArgs()
        {
        }
        public static new OauthIntegrationForCustomClientsArgs Empty => new OauthIntegrationForCustomClientsArgs();
    }

    public sealed class OauthIntegrationForCustomClientsState : global::Pulumi.ResourceArgs
    {
        [Input("blockedRolesLists")]
        private InputList<string>? _blockedRolesLists;

        /// <summary>
        /// A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.
        /// </summary>
        public InputList<string> BlockedRolesLists
        {
            get => _blockedRolesLists ?? (_blockedRolesLists = new InputList<string>());
            set => _blockedRolesLists = value;
        }

        /// <summary>
        /// Specifies a comment for the OAuth integration.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("describeOutputs")]
        private InputList<Inputs.OauthIntegrationForCustomClientsDescribeOutputGetArgs>? _describeOutputs;

        /// <summary>
        /// Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.
        /// </summary>
        public InputList<Inputs.OauthIntegrationForCustomClientsDescribeOutputGetArgs> DescribeOutputs
        {
            get => _describeOutputs ?? (_describeOutputs = new InputList<Inputs.OauthIntegrationForCustomClientsDescribeOutputGetArgs>());
            set => _describeOutputs = value;
        }

        /// <summary>
        /// Specifies whether this OAuth integration is enabled or disabled. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Input("enabled")]
        public Input<string>? Enabled { get; set; }

        /// <summary>
        /// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
        /// </summary>
        [Input("fullyQualifiedName")]
        public Input<string>? FullyQualifiedName { get; set; }

        /// <summary>
        /// Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies an existing network policy. This network policy controls network traffic that is attempting to exchange an authorization code for an access or refresh token or to use a refresh token to obtain a new access token. For more information about this resource, see docs.
        /// </summary>
        [Input("networkPolicy")]
        public Input<string>? NetworkPolicy { get; set; }

        /// <summary>
        /// If true, allows setting oauth*redirect*uri to a URI not protected by TLS. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Input("oauthAllowNonTlsRedirectUri")]
        public Input<string>? OauthAllowNonTlsRedirectUri { get; set; }

        [Input("oauthClientRsaPublicKey")]
        public Input<string>? OauthClientRsaPublicKey { get; set; }

        [Input("oauthClientRsaPublicKey2")]
        public Input<string>? OauthClientRsaPublicKey2 { get; set; }

        /// <summary>
        /// Specifies the type of client being registered. Snowflake supports both confidential and public clients. Valid options are: `PUBLIC` | `CONFIDENTIAL`.
        /// </summary>
        [Input("oauthClientType")]
        public Input<string>? OauthClientType { get; set; }

        /// <summary>
        /// Boolean that specifies whether Proof Key for Code Exchange (PKCE) should be required for the integration. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Input("oauthEnforcePkce")]
        public Input<string>? OauthEnforcePkce { get; set; }

        /// <summary>
        /// Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Input("oauthIssueRefreshTokens")]
        public Input<string>? OauthIssueRefreshTokens { get; set; }

        /// <summary>
        /// Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.
        /// </summary>
        [Input("oauthRedirectUri")]
        public Input<string>? OauthRedirectUri { get; set; }

        /// <summary>
        /// Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.
        /// </summary>
        [Input("oauthRefreshTokenValidity")]
        public Input<int>? OauthRefreshTokenValidity { get; set; }

        /// <summary>
        /// Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.
        /// </summary>
        [Input("oauthUseSecondaryRoles")]
        public Input<string>? OauthUseSecondaryRoles { get; set; }

        [Input("preAuthorizedRolesLists")]
        private InputList<string>? _preAuthorizedRolesLists;

        /// <summary>
        /// A set of Snowflake roles that a user does not need to explicitly consent to using after authenticating. For more information about this resource, see docs.
        /// </summary>
        public InputList<string> PreAuthorizedRolesLists
        {
            get => _preAuthorizedRolesLists ?? (_preAuthorizedRolesLists = new InputList<string>());
            set => _preAuthorizedRolesLists = value;
        }

        [Input("relatedParameters")]
        private InputList<Inputs.OauthIntegrationForCustomClientsRelatedParameterGetArgs>? _relatedParameters;

        /// <summary>
        /// Parameters related to this security integration.
        /// </summary>
        public InputList<Inputs.OauthIntegrationForCustomClientsRelatedParameterGetArgs> RelatedParameters
        {
            get => _relatedParameters ?? (_relatedParameters = new InputList<Inputs.OauthIntegrationForCustomClientsRelatedParameterGetArgs>());
            set => _relatedParameters = value;
        }

        [Input("showOutputs")]
        private InputList<Inputs.OauthIntegrationForCustomClientsShowOutputGetArgs>? _showOutputs;

        /// <summary>
        /// Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.
        /// </summary>
        public InputList<Inputs.OauthIntegrationForCustomClientsShowOutputGetArgs> ShowOutputs
        {
            get => _showOutputs ?? (_showOutputs = new InputList<Inputs.OauthIntegrationForCustomClientsShowOutputGetArgs>());
            set => _showOutputs = value;
        }

        public OauthIntegrationForCustomClientsState()
        {
        }
        public static new OauthIntegrationForCustomClientsState Empty => new OauthIntegrationForCustomClientsState();
    }
}
