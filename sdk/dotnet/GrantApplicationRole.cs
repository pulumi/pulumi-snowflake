// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    /// <summary>
    /// ## Import
    /// 
    /// format is application_role_name (string) | object_type (ACCOUNT_ROLE|APPLICATION) | grantee_name (string)
    /// 
    /// ```sh
    /// $ pulumi import snowflake:index/grantApplicationRole:GrantApplicationRole example '"my_application"."app_role_1"|ACCOUNT_ROLE|"my_role"'
    /// ```
    /// </summary>
    [SnowflakeResourceType("snowflake:index/grantApplicationRole:GrantApplicationRole")]
    public partial class GrantApplicationRole : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The fully qualified name of the application on which application role will be granted.
        /// </summary>
        [Output("applicationName")]
        public Output<string?> ApplicationName { get; private set; } = null!;

        /// <summary>
        /// Specifies the identifier for the application role to grant.
        /// </summary>
        [Output("applicationRoleName")]
        public Output<string> ApplicationRoleName { get; private set; } = null!;

        /// <summary>
        /// The fully qualified name of the account role on which application role will be granted. For more information about this resource, see docs.
        /// </summary>
        [Output("parentAccountRoleName")]
        public Output<string?> ParentAccountRoleName { get; private set; } = null!;


        /// <summary>
        /// Create a GrantApplicationRole resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GrantApplicationRole(string name, GrantApplicationRoleArgs args, CustomResourceOptions? options = null)
            : base("snowflake:index/grantApplicationRole:GrantApplicationRole", name, args ?? new GrantApplicationRoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GrantApplicationRole(string name, Input<string> id, GrantApplicationRoleState? state = null, CustomResourceOptions? options = null)
            : base("snowflake:index/grantApplicationRole:GrantApplicationRole", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GrantApplicationRole resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GrantApplicationRole Get(string name, Input<string> id, GrantApplicationRoleState? state = null, CustomResourceOptions? options = null)
        {
            return new GrantApplicationRole(name, id, state, options);
        }
    }

    public sealed class GrantApplicationRoleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The fully qualified name of the application on which application role will be granted.
        /// </summary>
        [Input("applicationName")]
        public Input<string>? ApplicationName { get; set; }

        /// <summary>
        /// Specifies the identifier for the application role to grant.
        /// </summary>
        [Input("applicationRoleName", required: true)]
        public Input<string> ApplicationRoleName { get; set; } = null!;

        /// <summary>
        /// The fully qualified name of the account role on which application role will be granted. For more information about this resource, see docs.
        /// </summary>
        [Input("parentAccountRoleName")]
        public Input<string>? ParentAccountRoleName { get; set; }

        public GrantApplicationRoleArgs()
        {
        }
        public static new GrantApplicationRoleArgs Empty => new GrantApplicationRoleArgs();
    }

    public sealed class GrantApplicationRoleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The fully qualified name of the application on which application role will be granted.
        /// </summary>
        [Input("applicationName")]
        public Input<string>? ApplicationName { get; set; }

        /// <summary>
        /// Specifies the identifier for the application role to grant.
        /// </summary>
        [Input("applicationRoleName")]
        public Input<string>? ApplicationRoleName { get; set; }

        /// <summary>
        /// The fully qualified name of the account role on which application role will be granted. For more information about this resource, see docs.
        /// </summary>
        [Input("parentAccountRoleName")]
        public Input<string>? ParentAccountRoleName { get; set; }

        public GrantApplicationRoleState()
        {
        }
        public static new GrantApplicationRoleState Empty => new GrantApplicationRoleState();
    }
}
