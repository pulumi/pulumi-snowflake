// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    /// <summary>
    /// !&gt; **V1 release candidate** This resource was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the resource if needed. Any errors reported will be resolved with a higher priority. We encourage checking this resource out before the V1 release. Please follow the migration guide to use it.
    /// 
    /// Resource used to manage oauth security integration for partner applications objects. For more information, check [security integrations documentation](https://docs.snowflake.com/en/sql-reference/sql/create-security-integration-oauth-snowflake).
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import snowflake:index/oauthIntegrationForPartnerApplications:OauthIntegrationForPartnerApplications example "name"
    /// ```
    /// </summary>
    [SnowflakeResourceType("snowflake:index/oauthIntegrationForPartnerApplications:OauthIntegrationForPartnerApplications")]
    public partial class OauthIntegrationForPartnerApplications : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A set of Snowflake roles that a user cannot explicitly consent to using after authenticating.
        /// </summary>
        [Output("blockedRolesLists")]
        public Output<ImmutableArray<string>> BlockedRolesLists { get; private set; } = null!;

        /// <summary>
        /// Specifies a comment for the OAuth integration.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.
        /// </summary>
        [Output("describeOutputs")]
        public Output<ImmutableArray<Outputs.OauthIntegrationForPartnerApplicationsDescribeOutput>> DescribeOutputs { get; private set; } = null!;

        /// <summary>
        /// Specifies whether this OAuth integration is enabled or disabled. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Output("enabled")]
        public Output<string?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Creates an OAuth interface between Snowflake and a partner application. Valid options are: `LOOKER` | `TABLEAU_DESKTOP` | `TABLEAU_SERVER`.
        /// </summary>
        [Output("oauthClient")]
        public Output<string> OauthClient { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Output("oauthIssueRefreshTokens")]
        public Output<string?> OauthIssueRefreshTokens { get; private set; } = null!;

        [Output("oauthRedirectUri")]
        public Output<string?> OauthRedirectUri { get; private set; } = null!;

        /// <summary>
        /// Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.
        /// </summary>
        [Output("oauthRefreshTokenValidity")]
        public Output<int?> OauthRefreshTokenValidity { get; private set; } = null!;

        /// <summary>
        /// Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.
        /// </summary>
        [Output("oauthUseSecondaryRoles")]
        public Output<string?> OauthUseSecondaryRoles { get; private set; } = null!;

        /// <summary>
        /// Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.
        /// </summary>
        [Output("showOutputs")]
        public Output<ImmutableArray<Outputs.OauthIntegrationForPartnerApplicationsShowOutput>> ShowOutputs { get; private set; } = null!;


        /// <summary>
        /// Create a OauthIntegrationForPartnerApplications resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OauthIntegrationForPartnerApplications(string name, OauthIntegrationForPartnerApplicationsArgs args, CustomResourceOptions? options = null)
            : base("snowflake:index/oauthIntegrationForPartnerApplications:OauthIntegrationForPartnerApplications", name, args ?? new OauthIntegrationForPartnerApplicationsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OauthIntegrationForPartnerApplications(string name, Input<string> id, OauthIntegrationForPartnerApplicationsState? state = null, CustomResourceOptions? options = null)
            : base("snowflake:index/oauthIntegrationForPartnerApplications:OauthIntegrationForPartnerApplications", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OauthIntegrationForPartnerApplications resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OauthIntegrationForPartnerApplications Get(string name, Input<string> id, OauthIntegrationForPartnerApplicationsState? state = null, CustomResourceOptions? options = null)
        {
            return new OauthIntegrationForPartnerApplications(name, id, state, options);
        }
    }

    public sealed class OauthIntegrationForPartnerApplicationsArgs : global::Pulumi.ResourceArgs
    {
        [Input("blockedRolesLists", required: true)]
        private InputList<string>? _blockedRolesLists;

        /// <summary>
        /// A set of Snowflake roles that a user cannot explicitly consent to using after authenticating.
        /// </summary>
        public InputList<string> BlockedRolesLists
        {
            get => _blockedRolesLists ?? (_blockedRolesLists = new InputList<string>());
            set => _blockedRolesLists = value;
        }

        /// <summary>
        /// Specifies a comment for the OAuth integration.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Specifies whether this OAuth integration is enabled or disabled. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Input("enabled")]
        public Input<string>? Enabled { get; set; }

        /// <summary>
        /// Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Creates an OAuth interface between Snowflake and a partner application. Valid options are: `LOOKER` | `TABLEAU_DESKTOP` | `TABLEAU_SERVER`.
        /// </summary>
        [Input("oauthClient", required: true)]
        public Input<string> OauthClient { get; set; } = null!;

        /// <summary>
        /// Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Input("oauthIssueRefreshTokens")]
        public Input<string>? OauthIssueRefreshTokens { get; set; }

        [Input("oauthRedirectUri")]
        public Input<string>? OauthRedirectUri { get; set; }

        /// <summary>
        /// Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.
        /// </summary>
        [Input("oauthRefreshTokenValidity")]
        public Input<int>? OauthRefreshTokenValidity { get; set; }

        /// <summary>
        /// Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.
        /// </summary>
        [Input("oauthUseSecondaryRoles")]
        public Input<string>? OauthUseSecondaryRoles { get; set; }

        public OauthIntegrationForPartnerApplicationsArgs()
        {
        }
        public static new OauthIntegrationForPartnerApplicationsArgs Empty => new OauthIntegrationForPartnerApplicationsArgs();
    }

    public sealed class OauthIntegrationForPartnerApplicationsState : global::Pulumi.ResourceArgs
    {
        [Input("blockedRolesLists")]
        private InputList<string>? _blockedRolesLists;

        /// <summary>
        /// A set of Snowflake roles that a user cannot explicitly consent to using after authenticating.
        /// </summary>
        public InputList<string> BlockedRolesLists
        {
            get => _blockedRolesLists ?? (_blockedRolesLists = new InputList<string>());
            set => _blockedRolesLists = value;
        }

        /// <summary>
        /// Specifies a comment for the OAuth integration.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("describeOutputs")]
        private InputList<Inputs.OauthIntegrationForPartnerApplicationsDescribeOutputGetArgs>? _describeOutputs;

        /// <summary>
        /// Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.
        /// </summary>
        public InputList<Inputs.OauthIntegrationForPartnerApplicationsDescribeOutputGetArgs> DescribeOutputs
        {
            get => _describeOutputs ?? (_describeOutputs = new InputList<Inputs.OauthIntegrationForPartnerApplicationsDescribeOutputGetArgs>());
            set => _describeOutputs = value;
        }

        /// <summary>
        /// Specifies whether this OAuth integration is enabled or disabled. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Input("enabled")]
        public Input<string>? Enabled { get; set; }

        /// <summary>
        /// Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Creates an OAuth interface between Snowflake and a partner application. Valid options are: `LOOKER` | `TABLEAU_DESKTOP` | `TABLEAU_SERVER`.
        /// </summary>
        [Input("oauthClient")]
        public Input<string>? OauthClient { get; set; }

        /// <summary>
        /// Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Input("oauthIssueRefreshTokens")]
        public Input<string>? OauthIssueRefreshTokens { get; set; }

        [Input("oauthRedirectUri")]
        public Input<string>? OauthRedirectUri { get; set; }

        /// <summary>
        /// Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.
        /// </summary>
        [Input("oauthRefreshTokenValidity")]
        public Input<int>? OauthRefreshTokenValidity { get; set; }

        /// <summary>
        /// Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.
        /// </summary>
        [Input("oauthUseSecondaryRoles")]
        public Input<string>? OauthUseSecondaryRoles { get; set; }

        [Input("showOutputs")]
        private InputList<Inputs.OauthIntegrationForPartnerApplicationsShowOutputGetArgs>? _showOutputs;

        /// <summary>
        /// Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.
        /// </summary>
        public InputList<Inputs.OauthIntegrationForPartnerApplicationsShowOutputGetArgs> ShowOutputs
        {
            get => _showOutputs ?? (_showOutputs = new InputList<Inputs.OauthIntegrationForPartnerApplicationsShowOutputGetArgs>());
            set => _showOutputs = value;
        }

        public OauthIntegrationForPartnerApplicationsState()
        {
        }
        public static new OauthIntegrationForPartnerApplicationsState Empty => new OauthIntegrationForPartnerApplicationsState();
    }
}
