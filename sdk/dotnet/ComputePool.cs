// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    /// <summary>
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import snowflake:index/computePool:ComputePool example '"&lt;compute_pool_name&gt;"'
    /// ```
    /// </summary>
    [SnowflakeResourceType("snowflake:index/computePool:ComputePool")]
    public partial class ComputePool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a compute pool when a service or job is submitted to it. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Output("autoResume")]
        public Output<string?> AutoResume { get; private set; } = null!;

        /// <summary>
        /// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Number of seconds of inactivity after which you want Snowflake to automatically suspend the compute pool.
        /// </summary>
        [Output("autoSuspendSecs")]
        public Output<int?> AutoSuspendSecs { get; private set; } = null!;

        /// <summary>
        /// Specifies a comment for the compute pool.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// Outputs the result of `DESCRIBE COMPUTE POOL` for the given compute pool.
        /// </summary>
        [Output("describeOutputs")]
        public Output<ImmutableArray<Outputs.ComputePoolDescribeOutput>> DescribeOutputs { get; private set; } = null!;

        /// <summary>
        /// Specifies the Snowflake Native App name.
        /// </summary>
        [Output("forApplication")]
        public Output<string?> ForApplication { get; private set; } = null!;

        /// <summary>
        /// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
        /// </summary>
        [Output("fullyQualifiedName")]
        public Output<string> FullyQualifiedName { get; private set; } = null!;

        /// <summary>
        /// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the compute pool is created initially in the suspended state. This field is used only when creating a compute pool. Changes on this field are ignored after creation.
        /// </summary>
        [Output("initiallySuspended")]
        public Output<string?> InitiallySuspended { get; private set; } = null!;

        /// <summary>
        /// Identifies the type of machine you want to provision for the nodes in the compute pool. Valid values are (case-insensitive): `CPU_X64_XS` | `CPU_X64_S` | `CPU_X64_M` | `CPU_X64_L` | `HIGHMEM_X64_S` | `HIGHMEM_X64_M` | `HIGHMEM_X64_L` | `HIGHMEM_X64_SL` | `GPU_NV_S` | `GPU_NV_M` | `GPU_NV_L` | `GPU_NV_XS` | `GPU_NV_SM` | `GPU_NV_2M` | `GPU_NV_3M` | `GPU_NV_SL`.
        /// </summary>
        [Output("instanceFamily")]
        public Output<string> InstanceFamily { get; private set; } = null!;

        /// <summary>
        /// Specifies the maximum number of nodes for the compute pool.
        /// </summary>
        [Output("maxNodes")]
        public Output<int> MaxNodes { get; private set; } = null!;

        /// <summary>
        /// Specifies the minimum number of nodes for the compute pool.
        /// </summary>
        [Output("minNodes")]
        public Output<int> MinNodes { get; private set; } = null!;

        /// <summary>
        /// Specifies the identifier for the compute pool; must be unique for the account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Outputs the result of `SHOW COMPUTE POOLS` for the given compute pool.
        /// </summary>
        [Output("showOutputs")]
        public Output<ImmutableArray<Outputs.ComputePoolShowOutput>> ShowOutputs { get; private set; } = null!;


        /// <summary>
        /// Create a ComputePool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ComputePool(string name, ComputePoolArgs args, CustomResourceOptions? options = null)
            : base("snowflake:index/computePool:ComputePool", name, args ?? new ComputePoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ComputePool(string name, Input<string> id, ComputePoolState? state = null, CustomResourceOptions? options = null)
            : base("snowflake:index/computePool:ComputePool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ComputePool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ComputePool Get(string name, Input<string> id, ComputePoolState? state = null, CustomResourceOptions? options = null)
        {
            return new ComputePool(name, id, state, options);
        }
    }

    public sealed class ComputePoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a compute pool when a service or job is submitted to it. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Input("autoResume")]
        public Input<string>? AutoResume { get; set; }

        /// <summary>
        /// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Number of seconds of inactivity after which you want Snowflake to automatically suspend the compute pool.
        /// </summary>
        [Input("autoSuspendSecs")]
        public Input<int>? AutoSuspendSecs { get; set; }

        /// <summary>
        /// Specifies a comment for the compute pool.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Specifies the Snowflake Native App name.
        /// </summary>
        [Input("forApplication")]
        public Input<string>? ForApplication { get; set; }

        /// <summary>
        /// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the compute pool is created initially in the suspended state. This field is used only when creating a compute pool. Changes on this field are ignored after creation.
        /// </summary>
        [Input("initiallySuspended")]
        public Input<string>? InitiallySuspended { get; set; }

        /// <summary>
        /// Identifies the type of machine you want to provision for the nodes in the compute pool. Valid values are (case-insensitive): `CPU_X64_XS` | `CPU_X64_S` | `CPU_X64_M` | `CPU_X64_L` | `HIGHMEM_X64_S` | `HIGHMEM_X64_M` | `HIGHMEM_X64_L` | `HIGHMEM_X64_SL` | `GPU_NV_S` | `GPU_NV_M` | `GPU_NV_L` | `GPU_NV_XS` | `GPU_NV_SM` | `GPU_NV_2M` | `GPU_NV_3M` | `GPU_NV_SL`.
        /// </summary>
        [Input("instanceFamily", required: true)]
        public Input<string> InstanceFamily { get; set; } = null!;

        /// <summary>
        /// Specifies the maximum number of nodes for the compute pool.
        /// </summary>
        [Input("maxNodes", required: true)]
        public Input<int> MaxNodes { get; set; } = null!;

        /// <summary>
        /// Specifies the minimum number of nodes for the compute pool.
        /// </summary>
        [Input("minNodes", required: true)]
        public Input<int> MinNodes { get; set; } = null!;

        /// <summary>
        /// Specifies the identifier for the compute pool; must be unique for the account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public ComputePoolArgs()
        {
        }
        public static new ComputePoolArgs Empty => new ComputePoolArgs();
    }

    public sealed class ComputePoolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a compute pool when a service or job is submitted to it. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
        /// </summary>
        [Input("autoResume")]
        public Input<string>? AutoResume { get; set; }

        /// <summary>
        /// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Number of seconds of inactivity after which you want Snowflake to automatically suspend the compute pool.
        /// </summary>
        [Input("autoSuspendSecs")]
        public Input<int>? AutoSuspendSecs { get; set; }

        /// <summary>
        /// Specifies a comment for the compute pool.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("describeOutputs")]
        private InputList<Inputs.ComputePoolDescribeOutputGetArgs>? _describeOutputs;

        /// <summary>
        /// Outputs the result of `DESCRIBE COMPUTE POOL` for the given compute pool.
        /// </summary>
        public InputList<Inputs.ComputePoolDescribeOutputGetArgs> DescribeOutputs
        {
            get => _describeOutputs ?? (_describeOutputs = new InputList<Inputs.ComputePoolDescribeOutputGetArgs>());
            set => _describeOutputs = value;
        }

        /// <summary>
        /// Specifies the Snowflake Native App name.
        /// </summary>
        [Input("forApplication")]
        public Input<string>? ForApplication { get; set; }

        /// <summary>
        /// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
        /// </summary>
        [Input("fullyQualifiedName")]
        public Input<string>? FullyQualifiedName { get; set; }

        /// <summary>
        /// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the compute pool is created initially in the suspended state. This field is used only when creating a compute pool. Changes on this field are ignored after creation.
        /// </summary>
        [Input("initiallySuspended")]
        public Input<string>? InitiallySuspended { get; set; }

        /// <summary>
        /// Identifies the type of machine you want to provision for the nodes in the compute pool. Valid values are (case-insensitive): `CPU_X64_XS` | `CPU_X64_S` | `CPU_X64_M` | `CPU_X64_L` | `HIGHMEM_X64_S` | `HIGHMEM_X64_M` | `HIGHMEM_X64_L` | `HIGHMEM_X64_SL` | `GPU_NV_S` | `GPU_NV_M` | `GPU_NV_L` | `GPU_NV_XS` | `GPU_NV_SM` | `GPU_NV_2M` | `GPU_NV_3M` | `GPU_NV_SL`.
        /// </summary>
        [Input("instanceFamily")]
        public Input<string>? InstanceFamily { get; set; }

        /// <summary>
        /// Specifies the maximum number of nodes for the compute pool.
        /// </summary>
        [Input("maxNodes")]
        public Input<int>? MaxNodes { get; set; }

        /// <summary>
        /// Specifies the minimum number of nodes for the compute pool.
        /// </summary>
        [Input("minNodes")]
        public Input<int>? MinNodes { get; set; }

        /// <summary>
        /// Specifies the identifier for the compute pool; must be unique for the account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("showOutputs")]
        private InputList<Inputs.ComputePoolShowOutputGetArgs>? _showOutputs;

        /// <summary>
        /// Outputs the result of `SHOW COMPUTE POOLS` for the given compute pool.
        /// </summary>
        public InputList<Inputs.ComputePoolShowOutputGetArgs> ShowOutputs
        {
            get => _showOutputs ?? (_showOutputs = new InputList<Inputs.ComputePoolShowOutputGetArgs>());
            set => _showOutputs = value;
        }

        public ComputePoolState()
        {
        }
        public static new ComputePoolState Empty => new ComputePoolState();
    }
}
