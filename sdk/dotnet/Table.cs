// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    /// <summary>
    /// ## Import
    /// 
    /// format is database name | schema name | table name
    /// 
    /// ```sh
    /// $ pulumi import snowflake:index/table:Table example 'databaseName|schemaName|tableName'
    /// ```
    /// </summary>
    [SnowflakeResourceType("snowflake:index/table:Table")]
    public partial class Table : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies whether to enable change tracking on the table. Default false.
        /// </summary>
        [Output("changeTracking")]
        public Output<bool?> ChangeTracking { get; private set; } = null!;

        /// <summary>
        /// A list of one or more table columns/expressions to be used as clustering key(s) for the table
        /// </summary>
        [Output("clusterBies")]
        public Output<ImmutableArray<string>> ClusterBies { get; private set; } = null!;

        /// <summary>
        /// Definitions of a column to create in the table. Minimum one required.
        /// </summary>
        [Output("columns")]
        public Output<ImmutableArray<Outputs.TableColumn>> Columns { get; private set; } = null!;

        /// <summary>
        /// Column comment
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// Specifies the retention period for the table so that Time Travel actions (SELECT, CLONE, UNDROP) can be performed on historical data in the table. Default value is 1, if you wish to inherit the parent schema setting then pass in the schema attribute to this argument.
        /// </summary>
        [Output("dataRetentionDays")]
        public Output<int?> DataRetentionDays { get; private set; } = null!;

        /// <summary>
        /// Specifies the retention period for the table so that Time Travel actions (SELECT, CLONE, UNDROP) can be performed on historical data in the table. Default value is 1, if you wish to inherit the parent schema setting then pass in the schema attribute to this argument.
        /// </summary>
        [Output("dataRetentionTimeInDays")]
        public Output<int?> DataRetentionTimeInDays { get; private set; } = null!;

        /// <summary>
        /// Name of the database that the tag was created in.
        /// </summary>
        [Output("database")]
        public Output<string> Database { get; private set; } = null!;

        /// <summary>
        /// Column name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Name of the role that owns the table.
        /// </summary>
        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        /// <summary>
        /// Definitions of primary key constraint to create on table
        /// </summary>
        [Output("primaryKey")]
        public Output<Outputs.TablePrimaryKey?> PrimaryKey { get; private set; } = null!;

        /// <summary>
        /// Qualified name of the table.
        /// </summary>
        [Output("qualifiedName")]
        public Output<string> QualifiedName { get; private set; } = null!;

        /// <summary>
        /// Name of the schema that the tag was created in.
        /// </summary>
        [Output("schema")]
        public Output<string> Schema { get; private set; } = null!;

        /// <summary>
        /// Definitions of a tag to associate with the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.TableTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Table resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Table(string name, TableArgs args, CustomResourceOptions? options = null)
            : base("snowflake:index/table:Table", name, args ?? new TableArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Table(string name, Input<string> id, TableState? state = null, CustomResourceOptions? options = null)
            : base("snowflake:index/table:Table", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Table resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Table Get(string name, Input<string> id, TableState? state = null, CustomResourceOptions? options = null)
        {
            return new Table(name, id, state, options);
        }
    }

    public sealed class TableArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether to enable change tracking on the table. Default false.
        /// </summary>
        [Input("changeTracking")]
        public Input<bool>? ChangeTracking { get; set; }

        [Input("clusterBies")]
        private InputList<string>? _clusterBies;

        /// <summary>
        /// A list of one or more table columns/expressions to be used as clustering key(s) for the table
        /// </summary>
        public InputList<string> ClusterBies
        {
            get => _clusterBies ?? (_clusterBies = new InputList<string>());
            set => _clusterBies = value;
        }

        [Input("columns", required: true)]
        private InputList<Inputs.TableColumnArgs>? _columns;

        /// <summary>
        /// Definitions of a column to create in the table. Minimum one required.
        /// </summary>
        public InputList<Inputs.TableColumnArgs> Columns
        {
            get => _columns ?? (_columns = new InputList<Inputs.TableColumnArgs>());
            set => _columns = value;
        }

        /// <summary>
        /// Column comment
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Specifies the retention period for the table so that Time Travel actions (SELECT, CLONE, UNDROP) can be performed on historical data in the table. Default value is 1, if you wish to inherit the parent schema setting then pass in the schema attribute to this argument.
        /// </summary>
        [Input("dataRetentionDays")]
        public Input<int>? DataRetentionDays { get; set; }

        /// <summary>
        /// Specifies the retention period for the table so that Time Travel actions (SELECT, CLONE, UNDROP) can be performed on historical data in the table. Default value is 1, if you wish to inherit the parent schema setting then pass in the schema attribute to this argument.
        /// </summary>
        [Input("dataRetentionTimeInDays")]
        public Input<int>? DataRetentionTimeInDays { get; set; }

        /// <summary>
        /// Name of the database that the tag was created in.
        /// </summary>
        [Input("database", required: true)]
        public Input<string> Database { get; set; } = null!;

        /// <summary>
        /// Column name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Definitions of primary key constraint to create on table
        /// </summary>
        [Input("primaryKey")]
        public Input<Inputs.TablePrimaryKeyArgs>? PrimaryKey { get; set; }

        /// <summary>
        /// Name of the schema that the tag was created in.
        /// </summary>
        [Input("schema", required: true)]
        public Input<string> Schema { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.TableTagArgs>? _tags;

        /// <summary>
        /// Definitions of a tag to associate with the resource.
        /// </summary>
        [Obsolete(@"Use the 'snowflake_tag_association' resource instead.")]
        public InputList<Inputs.TableTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.TableTagArgs>());
            set => _tags = value;
        }

        public TableArgs()
        {
        }
        public static new TableArgs Empty => new TableArgs();
    }

    public sealed class TableState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether to enable change tracking on the table. Default false.
        /// </summary>
        [Input("changeTracking")]
        public Input<bool>? ChangeTracking { get; set; }

        [Input("clusterBies")]
        private InputList<string>? _clusterBies;

        /// <summary>
        /// A list of one or more table columns/expressions to be used as clustering key(s) for the table
        /// </summary>
        public InputList<string> ClusterBies
        {
            get => _clusterBies ?? (_clusterBies = new InputList<string>());
            set => _clusterBies = value;
        }

        [Input("columns")]
        private InputList<Inputs.TableColumnGetArgs>? _columns;

        /// <summary>
        /// Definitions of a column to create in the table. Minimum one required.
        /// </summary>
        public InputList<Inputs.TableColumnGetArgs> Columns
        {
            get => _columns ?? (_columns = new InputList<Inputs.TableColumnGetArgs>());
            set => _columns = value;
        }

        /// <summary>
        /// Column comment
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Specifies the retention period for the table so that Time Travel actions (SELECT, CLONE, UNDROP) can be performed on historical data in the table. Default value is 1, if you wish to inherit the parent schema setting then pass in the schema attribute to this argument.
        /// </summary>
        [Input("dataRetentionDays")]
        public Input<int>? DataRetentionDays { get; set; }

        /// <summary>
        /// Specifies the retention period for the table so that Time Travel actions (SELECT, CLONE, UNDROP) can be performed on historical data in the table. Default value is 1, if you wish to inherit the parent schema setting then pass in the schema attribute to this argument.
        /// </summary>
        [Input("dataRetentionTimeInDays")]
        public Input<int>? DataRetentionTimeInDays { get; set; }

        /// <summary>
        /// Name of the database that the tag was created in.
        /// </summary>
        [Input("database")]
        public Input<string>? Database { get; set; }

        /// <summary>
        /// Column name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Name of the role that owns the table.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// Definitions of primary key constraint to create on table
        /// </summary>
        [Input("primaryKey")]
        public Input<Inputs.TablePrimaryKeyGetArgs>? PrimaryKey { get; set; }

        /// <summary>
        /// Qualified name of the table.
        /// </summary>
        [Input("qualifiedName")]
        public Input<string>? QualifiedName { get; set; }

        /// <summary>
        /// Name of the schema that the tag was created in.
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        [Input("tags")]
        private InputList<Inputs.TableTagGetArgs>? _tags;

        /// <summary>
        /// Definitions of a tag to associate with the resource.
        /// </summary>
        [Obsolete(@"Use the 'snowflake_tag_association' resource instead.")]
        public InputList<Inputs.TableTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.TableTagGetArgs>());
            set => _tags = value;
        }

        public TableState()
        {
        }
        public static new TableState Empty => new TableState();
    }
}
