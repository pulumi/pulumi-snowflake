// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    /// <summary>
    /// !&gt; **V1 release candidate** This resource was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the resource if needed. Any errors reported will be resolved with a higher priority. We encourage checking this resource out before the V1 release. Please follow the migration guide to use it.
    /// 
    /// Resource used to control network traffic. For more information, check an [official guide](https://docs.snowflake.com/en/user-guide/network-policies) on controlling network traffic with network policies.
    /// 
    /// ## Minimal
    /// 
    /// resource "snowflake.NetworkPolicy" "basic" {
    ///   name = "network_policy_name"
    /// }
    /// 
    /// ## Complete (with every optional set)
    /// 
    /// resource "snowflake.NetworkPolicy" "basic" {
    ///   name                      = "network_policy_name"
    ///   allowed_network_rule_list = ["&lt;fully qualified network rule id&gt;"]
    ///   blocked_network_rule_list = ["&lt;fully qualified network rule id&gt;"]
    ///   allowed_ip_list           = ["192.168.1.0/24"]
    ///   blocked_ip_list           = ["192.168.1.99"]
    ///   comment                   = "my network policy"
    /// }
    /// </summary>
    [SnowflakeResourceType("snowflake:index/networkPolicy:NetworkPolicy")]
    public partial class NetworkPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account.
        /// </summary>
        [Output("allowedIpLists")]
        public Output<ImmutableArray<string>> AllowedIpLists { get; private set; } = null!;

        /// <summary>
        /// Specifies a list of fully qualified network rules that contain the network identifiers that are allowed access to Snowflake.
        /// </summary>
        [Output("allowedNetworkRuleLists")]
        public Output<ImmutableArray<string>> AllowedNetworkRuleLists { get; private set; } = null!;

        /// <summary>
        /// Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account. **Do not** add `0.0.0.0/0` to `blocked_ip_list`, in order to block all IP addresses except a select list, you only need to add IP addresses to `allowed_ip_list`.
        /// </summary>
        [Output("blockedIpLists")]
        public Output<ImmutableArray<string>> BlockedIpLists { get; private set; } = null!;

        /// <summary>
        /// Specifies a list of fully qualified network rules that contain the network identifiers that are denied access to Snowflake.
        /// </summary>
        [Output("blockedNetworkRuleLists")]
        public Output<ImmutableArray<string>> BlockedNetworkRuleLists { get; private set; } = null!;

        /// <summary>
        /// Specifies a comment for the network policy.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// Outputs the result of `DESCRIBE NETWORK POLICY` for the given network policy.
        /// </summary>
        [Output("describeOutputs")]
        public Output<ImmutableArray<Outputs.NetworkPolicyDescribeOutput>> DescribeOutputs { get; private set; } = null!;

        /// <summary>
        /// Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Outputs the result of `SHOW NETWORK POLICIES` for the given network policy.
        /// </summary>
        [Output("showOutputs")]
        public Output<ImmutableArray<Outputs.NetworkPolicyShowOutput>> ShowOutputs { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkPolicy(string name, NetworkPolicyArgs? args = null, CustomResourceOptions? options = null)
            : base("snowflake:index/networkPolicy:NetworkPolicy", name, args ?? new NetworkPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkPolicy(string name, Input<string> id, NetworkPolicyState? state = null, CustomResourceOptions? options = null)
            : base("snowflake:index/networkPolicy:NetworkPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkPolicy Get(string name, Input<string> id, NetworkPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkPolicy(name, id, state, options);
        }
    }

    public sealed class NetworkPolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("allowedIpLists")]
        private InputList<string>? _allowedIpLists;

        /// <summary>
        /// Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account.
        /// </summary>
        public InputList<string> AllowedIpLists
        {
            get => _allowedIpLists ?? (_allowedIpLists = new InputList<string>());
            set => _allowedIpLists = value;
        }

        [Input("allowedNetworkRuleLists")]
        private InputList<string>? _allowedNetworkRuleLists;

        /// <summary>
        /// Specifies a list of fully qualified network rules that contain the network identifiers that are allowed access to Snowflake.
        /// </summary>
        public InputList<string> AllowedNetworkRuleLists
        {
            get => _allowedNetworkRuleLists ?? (_allowedNetworkRuleLists = new InputList<string>());
            set => _allowedNetworkRuleLists = value;
        }

        [Input("blockedIpLists")]
        private InputList<string>? _blockedIpLists;

        /// <summary>
        /// Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account. **Do not** add `0.0.0.0/0` to `blocked_ip_list`, in order to block all IP addresses except a select list, you only need to add IP addresses to `allowed_ip_list`.
        /// </summary>
        public InputList<string> BlockedIpLists
        {
            get => _blockedIpLists ?? (_blockedIpLists = new InputList<string>());
            set => _blockedIpLists = value;
        }

        [Input("blockedNetworkRuleLists")]
        private InputList<string>? _blockedNetworkRuleLists;

        /// <summary>
        /// Specifies a list of fully qualified network rules that contain the network identifiers that are denied access to Snowflake.
        /// </summary>
        public InputList<string> BlockedNetworkRuleLists
        {
            get => _blockedNetworkRuleLists ?? (_blockedNetworkRuleLists = new InputList<string>());
            set => _blockedNetworkRuleLists = value;
        }

        /// <summary>
        /// Specifies a comment for the network policy.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public NetworkPolicyArgs()
        {
        }
        public static new NetworkPolicyArgs Empty => new NetworkPolicyArgs();
    }

    public sealed class NetworkPolicyState : global::Pulumi.ResourceArgs
    {
        [Input("allowedIpLists")]
        private InputList<string>? _allowedIpLists;

        /// <summary>
        /// Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account.
        /// </summary>
        public InputList<string> AllowedIpLists
        {
            get => _allowedIpLists ?? (_allowedIpLists = new InputList<string>());
            set => _allowedIpLists = value;
        }

        [Input("allowedNetworkRuleLists")]
        private InputList<string>? _allowedNetworkRuleLists;

        /// <summary>
        /// Specifies a list of fully qualified network rules that contain the network identifiers that are allowed access to Snowflake.
        /// </summary>
        public InputList<string> AllowedNetworkRuleLists
        {
            get => _allowedNetworkRuleLists ?? (_allowedNetworkRuleLists = new InputList<string>());
            set => _allowedNetworkRuleLists = value;
        }

        [Input("blockedIpLists")]
        private InputList<string>? _blockedIpLists;

        /// <summary>
        /// Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account. **Do not** add `0.0.0.0/0` to `blocked_ip_list`, in order to block all IP addresses except a select list, you only need to add IP addresses to `allowed_ip_list`.
        /// </summary>
        public InputList<string> BlockedIpLists
        {
            get => _blockedIpLists ?? (_blockedIpLists = new InputList<string>());
            set => _blockedIpLists = value;
        }

        [Input("blockedNetworkRuleLists")]
        private InputList<string>? _blockedNetworkRuleLists;

        /// <summary>
        /// Specifies a list of fully qualified network rules that contain the network identifiers that are denied access to Snowflake.
        /// </summary>
        public InputList<string> BlockedNetworkRuleLists
        {
            get => _blockedNetworkRuleLists ?? (_blockedNetworkRuleLists = new InputList<string>());
            set => _blockedNetworkRuleLists = value;
        }

        /// <summary>
        /// Specifies a comment for the network policy.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("describeOutputs")]
        private InputList<Inputs.NetworkPolicyDescribeOutputGetArgs>? _describeOutputs;

        /// <summary>
        /// Outputs the result of `DESCRIBE NETWORK POLICY` for the given network policy.
        /// </summary>
        public InputList<Inputs.NetworkPolicyDescribeOutputGetArgs> DescribeOutputs
        {
            get => _describeOutputs ?? (_describeOutputs = new InputList<Inputs.NetworkPolicyDescribeOutputGetArgs>());
            set => _describeOutputs = value;
        }

        /// <summary>
        /// Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("showOutputs")]
        private InputList<Inputs.NetworkPolicyShowOutputGetArgs>? _showOutputs;

        /// <summary>
        /// Outputs the result of `SHOW NETWORK POLICIES` for the given network policy.
        /// </summary>
        public InputList<Inputs.NetworkPolicyShowOutputGetArgs> ShowOutputs
        {
            get => _showOutputs ?? (_showOutputs = new InputList<Inputs.NetworkPolicyShowOutputGetArgs>());
            set => _showOutputs = value;
        }

        public NetworkPolicyState()
        {
        }
        public static new NetworkPolicyState Empty => new NetworkPolicyState();
    }
}
