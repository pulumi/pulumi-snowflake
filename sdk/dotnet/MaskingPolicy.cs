// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Snowflake = Pulumi.Snowflake;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleMaskingPolicy = new Snowflake.MaskingPolicy("exampleMaskingPolicy", new Snowflake.MaskingPolicyArgs
    ///         {
    ///             Database = "EXAMPLE_DB",
    ///             MaskingExpression = "case when current_role() in ('ANALYST') then val else sha2(val, 512) end",
    ///             ReturnDataType = "string",
    ///             Schema = "EXAMPLE_SCHEMA",
    ///             ValueDataType = "string",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// # format is database name | schema name | policy name
    /// 
    /// ```sh
    ///  $ pulumi import snowflake:index/maskingPolicy:MaskingPolicy example 'dbName|schemaName|policyName'
    /// ```
    /// </summary>
    [SnowflakeResourceType("snowflake:index/maskingPolicy:MaskingPolicy")]
    public partial class MaskingPolicy : Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies a comment for the masking policy.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// The database in which to create the masking policy.
        /// </summary>
        [Output("database")]
        public Output<string> Database { get; private set; } = null!;

        /// <summary>
        /// Specifies the SQL expression that transforms the data.
        /// </summary>
        [Output("maskingExpression")]
        public Output<string> MaskingExpression { get; private set; } = null!;

        /// <summary>
        /// Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy
        /// is created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the data type to return.
        /// </summary>
        [Output("returnDataType")]
        public Output<string> ReturnDataType { get; private set; } = null!;

        /// <summary>
        /// The schema in which to create the masking policy.
        /// </summary>
        [Output("schema")]
        public Output<string> Schema { get; private set; } = null!;

        /// <summary>
        /// Specifies the data type to mask.
        /// </summary>
        [Output("valueDataType")]
        public Output<string> ValueDataType { get; private set; } = null!;


        /// <summary>
        /// Create a MaskingPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MaskingPolicy(string name, MaskingPolicyArgs args, CustomResourceOptions? options = null)
            : base("snowflake:index/maskingPolicy:MaskingPolicy", name, args ?? new MaskingPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MaskingPolicy(string name, Input<string> id, MaskingPolicyState? state = null, CustomResourceOptions? options = null)
            : base("snowflake:index/maskingPolicy:MaskingPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MaskingPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MaskingPolicy Get(string name, Input<string> id, MaskingPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new MaskingPolicy(name, id, state, options);
        }
    }

    public sealed class MaskingPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies a comment for the masking policy.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// The database in which to create the masking policy.
        /// </summary>
        [Input("database", required: true)]
        public Input<string> Database { get; set; } = null!;

        /// <summary>
        /// Specifies the SQL expression that transforms the data.
        /// </summary>
        [Input("maskingExpression", required: true)]
        public Input<string> MaskingExpression { get; set; } = null!;

        /// <summary>
        /// Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy
        /// is created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the data type to return.
        /// </summary>
        [Input("returnDataType", required: true)]
        public Input<string> ReturnDataType { get; set; } = null!;

        /// <summary>
        /// The schema in which to create the masking policy.
        /// </summary>
        [Input("schema", required: true)]
        public Input<string> Schema { get; set; } = null!;

        /// <summary>
        /// Specifies the data type to mask.
        /// </summary>
        [Input("valueDataType", required: true)]
        public Input<string> ValueDataType { get; set; } = null!;

        public MaskingPolicyArgs()
        {
        }
    }

    public sealed class MaskingPolicyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies a comment for the masking policy.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// The database in which to create the masking policy.
        /// </summary>
        [Input("database")]
        public Input<string>? Database { get; set; }

        /// <summary>
        /// Specifies the SQL expression that transforms the data.
        /// </summary>
        [Input("maskingExpression")]
        public Input<string>? MaskingExpression { get; set; }

        /// <summary>
        /// Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy
        /// is created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the data type to return.
        /// </summary>
        [Input("returnDataType")]
        public Input<string>? ReturnDataType { get; set; }

        /// <summary>
        /// The schema in which to create the masking policy.
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        /// <summary>
        /// Specifies the data type to mask.
        /// </summary>
        [Input("valueDataType")]
        public Input<string>? ValueDataType { get; set; }

        public MaskingPolicyState()
        {
        }
    }
}
