// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    /// <summary>
    /// Specifies the password policy to use for a certain user.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Snowflake = Pulumi.Snowflake;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var user = new Snowflake.User("user", new()
    ///     {
    ///         Name = "USER_NAME",
    ///     });
    /// 
    ///     var pp = new Snowflake.PasswordPolicy("pp", new()
    ///     {
    ///         Database = "prod",
    ///         Schema = "security",
    ///         Name = "default_policy",
    ///     });
    /// 
    ///     var ppa = new Snowflake.UserPasswordPolicyAttachment("ppa", new()
    ///     {
    ///         PasswordPolicyName = Output.Tuple(pp.Database, pp.Schema, pp.Name).Apply(values =&gt;
    ///         {
    ///             var database = values.Item1;
    ///             var schema = values.Item2;
    ///             var name = values.Item3;
    ///             return $"\"{database}\".\"{schema}\".\"{name}\"";
    ///         }),
    ///         UserName = user.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import snowflake:index/userPasswordPolicyAttachment:UserPasswordPolicyAttachment example "MY_DATABASE|MY_SCHEMA|PASSWORD_POLICY_NAME|USER_NAME"
    /// ```
    /// </summary>
    [SnowflakeResourceType("snowflake:index/userPasswordPolicyAttachment:UserPasswordPolicyAttachment")]
    public partial class UserPasswordPolicyAttachment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Fully qualified name of the password policy
        /// </summary>
        [Output("passwordPolicyName")]
        public Output<string> PasswordPolicyName { get; private set; } = null!;

        /// <summary>
        /// User name of the user you want to attach the password policy to
        /// </summary>
        [Output("userName")]
        public Output<string> UserName { get; private set; } = null!;


        /// <summary>
        /// Create a UserPasswordPolicyAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserPasswordPolicyAttachment(string name, UserPasswordPolicyAttachmentArgs args, CustomResourceOptions? options = null)
            : base("snowflake:index/userPasswordPolicyAttachment:UserPasswordPolicyAttachment", name, args ?? new UserPasswordPolicyAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserPasswordPolicyAttachment(string name, Input<string> id, UserPasswordPolicyAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("snowflake:index/userPasswordPolicyAttachment:UserPasswordPolicyAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserPasswordPolicyAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserPasswordPolicyAttachment Get(string name, Input<string> id, UserPasswordPolicyAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new UserPasswordPolicyAttachment(name, id, state, options);
        }
    }

    public sealed class UserPasswordPolicyAttachmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Fully qualified name of the password policy
        /// </summary>
        [Input("passwordPolicyName", required: true)]
        public Input<string> PasswordPolicyName { get; set; } = null!;

        /// <summary>
        /// User name of the user you want to attach the password policy to
        /// </summary>
        [Input("userName", required: true)]
        public Input<string> UserName { get; set; } = null!;

        public UserPasswordPolicyAttachmentArgs()
        {
        }
        public static new UserPasswordPolicyAttachmentArgs Empty => new UserPasswordPolicyAttachmentArgs();
    }

    public sealed class UserPasswordPolicyAttachmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Fully qualified name of the password policy
        /// </summary>
        [Input("passwordPolicyName")]
        public Input<string>? PasswordPolicyName { get; set; }

        /// <summary>
        /// User name of the user you want to attach the password policy to
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        public UserPasswordPolicyAttachmentState()
        {
        }
        public static new UserPasswordPolicyAttachmentState Empty => new UserPasswordPolicyAttachmentState();
    }
}
