// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake.Inputs
{

    public sealed class ListingManifestFromStageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Location of the manifest file in the stage. If not specified, the manifest file will be expected to be at the root of the stage.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Identifier of the stage where the manifest file is located.
        /// </summary>
        [Input("stage", required: true)]
        public Input<string> Stage { get; set; } = null!;

        /// <summary>
        /// Specifies a comment for the listing version. Whenever a new version is created, this comment will be associated with it. The comment on the version will be visible in the [SHOW VERSIONS IN LISTING](https://docs.snowflake.com/en/sql-reference/sql/show-versions-in-listing) command output.
        /// </summary>
        [Input("versionComment")]
        public Input<string>? VersionComment { get; set; }

        /// <summary>
        /// Represents manifest version name. It's case-sensitive and used in manifest versioning. Version name should be specified or changed whenever any changes in the manifest should be applied to the listing. Later on the versions of the listing can be analyzed by calling the [SHOW VERSIONS IN LISTING](https://docs.snowflake.com/en/sql-reference/sql/show-versions-in-listing) command. The resource does not track the changes on the specified stage.
        /// </summary>
        [Input("versionName")]
        public Input<string>? VersionName { get; set; }

        public ListingManifestFromStageArgs()
        {
        }
        public static new ListingManifestFromStageArgs Empty => new ListingManifestFromStageArgs();
    }
}
