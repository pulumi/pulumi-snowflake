// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    /// <summary>
    /// !&gt; **V1 release candidate** This resource was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the resource if needed. Any errors reported will be resolved with a higher priority. We encourage checking this resource out before the V1 release. Please follow the migration guide to use it.
    /// 
    /// Resource used to manage streamlits objects. For more information, check [streamlit documentation](https://docs.snowflake.com/en/sql-reference/commands-streamlit).
    /// 
    /// ## Import
    /// 
    /// format is database name | schema name | streamlit name
    /// 
    /// ```sh
    /// $ pulumi import snowflake:index/streamlit:Streamlit example 'dbName|schemaName|streamlitName'
    /// ```
    /// </summary>
    [SnowflakeResourceType("snowflake:index/streamlit:Streamlit")]
    public partial class Streamlit : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies a comment for the streamlit.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// The database in which to create the streamlit
        /// </summary>
        [Output("database")]
        public Output<string> Database { get; private set; } = null!;

        /// <summary>
        /// Outputs the result of `DESCRIBE STREAMLIT` for the given streamlit.
        /// </summary>
        [Output("describeOutputs")]
        public Output<ImmutableArray<Outputs.StreamlitDescribeOutput>> DescribeOutputs { get; private set; } = null!;

        /// <summary>
        /// Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml file.
        /// </summary>
        [Output("directoryLocation")]
        public Output<string?> DirectoryLocation { get; private set; } = null!;

        /// <summary>
        /// External access integrations connected to the Streamlit.
        /// </summary>
        [Output("externalAccessIntegrations")]
        public Output<ImmutableArray<string>> ExternalAccessIntegrations { get; private set; } = null!;

        /// <summary>
        /// Specifies the filename of the Streamlit Python application. This filename is relative to the value of `root_location`
        /// </summary>
        [Output("mainFile")]
        public Output<string> MainFile { get; private set; } = null!;

        /// <summary>
        /// String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the warehouse where SQL queries issued by the Streamlit application are run.
        /// </summary>
        [Output("queryWarehouse")]
        public Output<string?> QueryWarehouse { get; private set; } = null!;

        /// <summary>
        /// The schema in which to create the streamlit.
        /// </summary>
        [Output("schema")]
        public Output<string> Schema { get; private set; } = null!;

        /// <summary>
        /// Outputs the result of `SHOW STREAMLIT` for the given streamli.
        /// </summary>
        [Output("showOutputs")]
        public Output<ImmutableArray<Outputs.StreamlitShowOutput>> ShowOutputs { get; private set; } = null!;

        /// <summary>
        /// The stage in which streamlit files are located.
        /// </summary>
        [Output("stage")]
        public Output<string> Stage { get; private set; } = null!;

        /// <summary>
        /// Specifies a title for the Streamlit app to display in Snowsight.
        /// </summary>
        [Output("title")]
        public Output<string?> Title { get; private set; } = null!;


        /// <summary>
        /// Create a Streamlit resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Streamlit(string name, StreamlitArgs args, CustomResourceOptions? options = null)
            : base("snowflake:index/streamlit:Streamlit", name, args ?? new StreamlitArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Streamlit(string name, Input<string> id, StreamlitState? state = null, CustomResourceOptions? options = null)
            : base("snowflake:index/streamlit:Streamlit", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Streamlit resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Streamlit Get(string name, Input<string> id, StreamlitState? state = null, CustomResourceOptions? options = null)
        {
            return new Streamlit(name, id, state, options);
        }
    }

    public sealed class StreamlitArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies a comment for the streamlit.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// The database in which to create the streamlit
        /// </summary>
        [Input("database", required: true)]
        public Input<string> Database { get; set; } = null!;

        /// <summary>
        /// Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml file.
        /// </summary>
        [Input("directoryLocation")]
        public Input<string>? DirectoryLocation { get; set; }

        [Input("externalAccessIntegrations")]
        private InputList<string>? _externalAccessIntegrations;

        /// <summary>
        /// External access integrations connected to the Streamlit.
        /// </summary>
        public InputList<string> ExternalAccessIntegrations
        {
            get => _externalAccessIntegrations ?? (_externalAccessIntegrations = new InputList<string>());
            set => _externalAccessIntegrations = value;
        }

        /// <summary>
        /// Specifies the filename of the Streamlit Python application. This filename is relative to the value of `root_location`
        /// </summary>
        [Input("mainFile", required: true)]
        public Input<string> MainFile { get; set; } = null!;

        /// <summary>
        /// String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the warehouse where SQL queries issued by the Streamlit application are run.
        /// </summary>
        [Input("queryWarehouse")]
        public Input<string>? QueryWarehouse { get; set; }

        /// <summary>
        /// The schema in which to create the streamlit.
        /// </summary>
        [Input("schema", required: true)]
        public Input<string> Schema { get; set; } = null!;

        /// <summary>
        /// The stage in which streamlit files are located.
        /// </summary>
        [Input("stage", required: true)]
        public Input<string> Stage { get; set; } = null!;

        /// <summary>
        /// Specifies a title for the Streamlit app to display in Snowsight.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        public StreamlitArgs()
        {
        }
        public static new StreamlitArgs Empty => new StreamlitArgs();
    }

    public sealed class StreamlitState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies a comment for the streamlit.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// The database in which to create the streamlit
        /// </summary>
        [Input("database")]
        public Input<string>? Database { get; set; }

        [Input("describeOutputs")]
        private InputList<Inputs.StreamlitDescribeOutputGetArgs>? _describeOutputs;

        /// <summary>
        /// Outputs the result of `DESCRIBE STREAMLIT` for the given streamlit.
        /// </summary>
        public InputList<Inputs.StreamlitDescribeOutputGetArgs> DescribeOutputs
        {
            get => _describeOutputs ?? (_describeOutputs = new InputList<Inputs.StreamlitDescribeOutputGetArgs>());
            set => _describeOutputs = value;
        }

        /// <summary>
        /// Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml file.
        /// </summary>
        [Input("directoryLocation")]
        public Input<string>? DirectoryLocation { get; set; }

        [Input("externalAccessIntegrations")]
        private InputList<string>? _externalAccessIntegrations;

        /// <summary>
        /// External access integrations connected to the Streamlit.
        /// </summary>
        public InputList<string> ExternalAccessIntegrations
        {
            get => _externalAccessIntegrations ?? (_externalAccessIntegrations = new InputList<string>());
            set => _externalAccessIntegrations = value;
        }

        /// <summary>
        /// Specifies the filename of the Streamlit Python application. This filename is relative to the value of `root_location`
        /// </summary>
        [Input("mainFile")]
        public Input<string>? MainFile { get; set; }

        /// <summary>
        /// String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the warehouse where SQL queries issued by the Streamlit application are run.
        /// </summary>
        [Input("queryWarehouse")]
        public Input<string>? QueryWarehouse { get; set; }

        /// <summary>
        /// The schema in which to create the streamlit.
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        [Input("showOutputs")]
        private InputList<Inputs.StreamlitShowOutputGetArgs>? _showOutputs;

        /// <summary>
        /// Outputs the result of `SHOW STREAMLIT` for the given streamli.
        /// </summary>
        public InputList<Inputs.StreamlitShowOutputGetArgs> ShowOutputs
        {
            get => _showOutputs ?? (_showOutputs = new InputList<Inputs.StreamlitShowOutputGetArgs>());
            set => _showOutputs = value;
        }

        /// <summary>
        /// The stage in which streamlit files are located.
        /// </summary>
        [Input("stage")]
        public Input<string>? Stage { get; set; }

        /// <summary>
        /// Specifies a title for the Streamlit app to display in Snowsight.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        public StreamlitState()
        {
        }
        public static new StreamlitState Empty => new StreamlitState();
    }
}
