// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    public static class GetDatabases
    {
        public static Task<GetDatabasesResult> InvokeAsync(GetDatabasesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabasesResult>("snowflake:index/getDatabases:getDatabases", args ?? new GetDatabasesArgs(), options.WithDefaults());

        public static Output<GetDatabasesResult> Invoke(GetDatabasesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabasesResult>("snowflake:index/getDatabases:getDatabases", args ?? new GetDatabasesInvokeArgs(), options.WithDefaults());

        public static Output<GetDatabasesResult> Invoke(GetDatabasesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabasesResult>("snowflake:index/getDatabases:getDatabases", args ?? new GetDatabasesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabasesArgs : global::Pulumi.InvokeArgs
    {
        [Input("like")]
        public string? Like { get; set; }

        [Input("limit")]
        public Inputs.GetDatabasesLimitArgs? Limit { get; set; }

        [Input("startsWith")]
        public string? StartsWith { get; set; }

        [Input("withDescribe")]
        public bool? WithDescribe { get; set; }

        [Input("withParameters")]
        public bool? WithParameters { get; set; }

        public GetDatabasesArgs()
        {
        }
        public static new GetDatabasesArgs Empty => new GetDatabasesArgs();
    }

    public sealed class GetDatabasesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("like")]
        public Input<string>? Like { get; set; }

        [Input("limit")]
        public Input<Inputs.GetDatabasesLimitInputArgs>? Limit { get; set; }

        [Input("startsWith")]
        public Input<string>? StartsWith { get; set; }

        [Input("withDescribe")]
        public Input<bool>? WithDescribe { get; set; }

        [Input("withParameters")]
        public Input<bool>? WithParameters { get; set; }

        public GetDatabasesInvokeArgs()
        {
        }
        public static new GetDatabasesInvokeArgs Empty => new GetDatabasesInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabasesResult
    {
        public readonly ImmutableArray<Outputs.GetDatabasesDatabaseResult> Databases;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Like;
        public readonly Outputs.GetDatabasesLimitResult? Limit;
        public readonly string? StartsWith;
        public readonly bool? WithDescribe;
        public readonly bool? WithParameters;

        [OutputConstructor]
        private GetDatabasesResult(
            ImmutableArray<Outputs.GetDatabasesDatabaseResult> databases,

            string id,

            string? like,

            Outputs.GetDatabasesLimitResult? limit,

            string? startsWith,

            bool? withDescribe,

            bool? withParameters)
        {
            Databases = databases;
            Id = id;
            Like = like;
            Limit = limit;
            StartsWith = startsWith;
            WithDescribe = withDescribe;
            WithParameters = withParameters;
        }
    }
}
