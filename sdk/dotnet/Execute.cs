// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    /// <summary>
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import snowflake:index/execute:Execute example '&lt;random_uuid&gt;'
    /// ```
    /// </summary>
    [SnowflakeResourceType("snowflake:index/execute:Execute")]
    public partial class Execute : global::Pulumi.CustomResource
    {
        /// <summary>
        /// SQL statement to execute. Forces recreation of resource on change.
        /// </summary>
        [Output("execute")]
        public Output<string> ExecuteSQL { get; private set; } = null!;

        /// <summary>
        /// Optional SQL statement to do a read. Invoked on every resource refresh and every time it is changed.
        /// </summary>
        [Output("query")]
        public Output<string?> Query { get; private set; } = null!;

        /// <summary>
        /// List of key-value maps (text to text) retrieved after executing read query. Will be empty if the query results in an error.
        /// </summary>
        [Output("queryResults")]
        public Output<ImmutableArray<ImmutableDictionary<string, string>>> QueryResults { get; private set; } = null!;

        /// <summary>
        /// SQL statement to revert the execute statement. Invoked when resource is being destroyed.
        /// </summary>
        [Output("revert")]
        public Output<string> Revert { get; private set; } = null!;


        /// <summary>
        /// Create a Execute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Execute(string name, ExecuteArgs args, CustomResourceOptions? options = null)
            : base("snowflake:index/execute:Execute", name, args ?? new ExecuteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Execute(string name, Input<string> id, ExecuteState? state = null, CustomResourceOptions? options = null)
            : base("snowflake:index/execute:Execute", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Execute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Execute Get(string name, Input<string> id, ExecuteState? state = null, CustomResourceOptions? options = null)
        {
            return new Execute(name, id, state, options);
        }
    }

    public sealed class ExecuteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// SQL statement to execute. Forces recreation of resource on change.
        /// </summary>
        [Input("execute", required: true)]
        public Input<string> ExecuteSQL { get; set; } = null!;

        /// <summary>
        /// Optional SQL statement to do a read. Invoked on every resource refresh and every time it is changed.
        /// </summary>
        [Input("query")]
        public Input<string>? Query { get; set; }

        /// <summary>
        /// SQL statement to revert the execute statement. Invoked when resource is being destroyed.
        /// </summary>
        [Input("revert", required: true)]
        public Input<string> Revert { get; set; } = null!;

        public ExecuteArgs()
        {
        }
        public static new ExecuteArgs Empty => new ExecuteArgs();
    }

    public sealed class ExecuteState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// SQL statement to execute. Forces recreation of resource on change.
        /// </summary>
        [Input("execute")]
        public Input<string>? ExecuteSQL { get; set; }

        /// <summary>
        /// Optional SQL statement to do a read. Invoked on every resource refresh and every time it is changed.
        /// </summary>
        [Input("query")]
        public Input<string>? Query { get; set; }

        [Input("queryResults")]
        private InputList<ImmutableDictionary<string, string>>? _queryResults;

        /// <summary>
        /// List of key-value maps (text to text) retrieved after executing read query. Will be empty if the query results in an error.
        /// </summary>
        public InputList<ImmutableDictionary<string, string>> QueryResults
        {
            get => _queryResults ?? (_queryResults = new InputList<ImmutableDictionary<string, string>>());
            set => _queryResults = value;
        }

        /// <summary>
        /// SQL statement to revert the execute statement. Invoked when resource is being destroyed.
        /// </summary>
        [Input("revert")]
        public Input<string>? Revert { get; set; }

        public ExecuteState()
        {
        }
        public static new ExecuteState Empty => new ExecuteState();
    }
}
