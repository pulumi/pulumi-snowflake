// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    public static class GetSecrets
    {
        /// <summary>
        /// Data source used to get details of filtered secrets. Filtering is aligned with the current possibilities for [SHOW SECRETS](https://docs.snowflake.com/en/sql-reference/sql/show-secrets) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `secrets`.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Snowflake = Pulumi.Snowflake;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Simple usage
        ///     var simple = Snowflake.GetSecrets.Invoke();
        /// 
        ///     // Filtering (like)
        ///     var like = Snowflake.GetSecrets.Invoke(new()
        ///     {
        ///         Like = "secret-name",
        ///     });
        /// 
        ///     // Filtering by prefix (like)
        ///     var likePrefix = Snowflake.GetSecrets.Invoke(new()
        ///     {
        ///         Like = "prefix%",
        ///     });
        /// 
        ///     // Filtering (in)
        ///     var @in = Snowflake.GetSecrets.Invoke(new()
        ///     {
        ///         In = new Snowflake.Inputs.GetSecretsInInputArgs
        ///         {
        ///             Schema = test.FullyQualifiedName,
        ///         },
        ///     });
        /// 
        ///     // Without additional data (to limit the number of calls make for every found secret)
        ///     var onlyShow = Snowflake.GetSecrets.Invoke(new()
        ///     {
        ///         WithDescribe = false,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["simpleOutput"] = simple.Apply(getSecretsResult =&gt; getSecretsResult.Secrets),
        ///         ["likeOutput"] = like.Apply(getSecretsResult =&gt; getSecretsResult.Secrets),
        ///         ["likePrefixOutput"] = likePrefix.Apply(getSecretsResult =&gt; getSecretsResult.Secrets),
        ///         ["inOutput"] = @in.Apply(@in =&gt; @in.Apply(getSecretsResult =&gt; getSecretsResult.Secrets)),
        ///         ["onlyShowOutput"] = onlyShow.Apply(getSecretsResult =&gt; getSecretsResult.Secrets),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetSecretsResult> InvokeAsync(GetSecretsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecretsResult>("snowflake:index/getSecrets:getSecrets", args ?? new GetSecretsArgs(), options.WithDefaults());

        /// <summary>
        /// Data source used to get details of filtered secrets. Filtering is aligned with the current possibilities for [SHOW SECRETS](https://docs.snowflake.com/en/sql-reference/sql/show-secrets) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `secrets`.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Snowflake = Pulumi.Snowflake;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Simple usage
        ///     var simple = Snowflake.GetSecrets.Invoke();
        /// 
        ///     // Filtering (like)
        ///     var like = Snowflake.GetSecrets.Invoke(new()
        ///     {
        ///         Like = "secret-name",
        ///     });
        /// 
        ///     // Filtering by prefix (like)
        ///     var likePrefix = Snowflake.GetSecrets.Invoke(new()
        ///     {
        ///         Like = "prefix%",
        ///     });
        /// 
        ///     // Filtering (in)
        ///     var @in = Snowflake.GetSecrets.Invoke(new()
        ///     {
        ///         In = new Snowflake.Inputs.GetSecretsInInputArgs
        ///         {
        ///             Schema = test.FullyQualifiedName,
        ///         },
        ///     });
        /// 
        ///     // Without additional data (to limit the number of calls make for every found secret)
        ///     var onlyShow = Snowflake.GetSecrets.Invoke(new()
        ///     {
        ///         WithDescribe = false,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["simpleOutput"] = simple.Apply(getSecretsResult =&gt; getSecretsResult.Secrets),
        ///         ["likeOutput"] = like.Apply(getSecretsResult =&gt; getSecretsResult.Secrets),
        ///         ["likePrefixOutput"] = likePrefix.Apply(getSecretsResult =&gt; getSecretsResult.Secrets),
        ///         ["inOutput"] = @in.Apply(@in =&gt; @in.Apply(getSecretsResult =&gt; getSecretsResult.Secrets)),
        ///         ["onlyShowOutput"] = onlyShow.Apply(getSecretsResult =&gt; getSecretsResult.Secrets),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecretsResult> Invoke(GetSecretsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecretsResult>("snowflake:index/getSecrets:getSecrets", args ?? new GetSecretsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// !&gt; **V1 release candidate** This data source is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the data source if needed. Any errors reported will be resolved with a higher priority. We encourage checking this data source out before the V1 release. Please follow the migration guide to use it.
        /// 
        /// Datasource used to get details of filtered secrets. Filtering is aligned with the current possibilities for [SHOW SECRETS](https://docs.snowflake.com/en/sql-reference/sql/show-secrets) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `secrets`.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Snowflake = Pulumi.Snowflake;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Simple usage
        ///     var simple = Snowflake.GetSecrets.Invoke();
        /// 
        ///     // Filtering (like)
        ///     var like = Snowflake.GetSecrets.Invoke(new()
        ///     {
        ///         Like = "secret-name",
        ///     });
        /// 
        ///     // Filtering by prefix (like)
        ///     var likePrefix = Snowflake.GetSecrets.Invoke(new()
        ///     {
        ///         Like = "prefix%",
        ///     });
        /// 
        ///     // Filtering (in)
        ///     var @in = Snowflake.GetSecrets.Invoke(new()
        ///     {
        ///         In = new Snowflake.Inputs.GetSecretsInInputArgs
        ///         {
        ///             Schema = test.FullyQualifiedName,
        ///         },
        ///     });
        /// 
        ///     // Without additional data (to limit the number of calls make for every found secret)
        ///     var onlyShow = Snowflake.GetSecrets.Invoke(new()
        ///     {
        ///         WithDescribe = false,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["simpleOutput"] = simple.Apply(getSecretsResult =&gt; getSecretsResult.Secrets),
        ///         ["likeOutput"] = like.Apply(getSecretsResult =&gt; getSecretsResult.Secrets),
        ///         ["likePrefixOutput"] = likePrefix.Apply(getSecretsResult =&gt; getSecretsResult.Secrets),
        ///         ["inOutput"] = @in.Apply(@in =&gt; @in.Apply(getSecretsResult =&gt; getSecretsResult.Secrets)),
        ///         ["onlyShowOutput"] = onlyShow.Apply(getSecretsResult =&gt; getSecretsResult.Secrets),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecretsResult> Invoke(GetSecretsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecretsResult>("snowflake:index/getSecrets:getSecrets", args ?? new GetSecretsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecretsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// IN clause to filter the list of secrets
        /// </summary>
        [Input("in")]
        public Inputs.GetSecretsInArgs? In { get; set; }

        /// <summary>
        /// Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
        /// </summary>
        [Input("like")]
        public string? Like { get; set; }

        /// <summary>
        /// Runs DESC SECRET for each secret returned by SHOW SECRETS. The output of describe is saved to the description field. By default this value is set to true.
        /// </summary>
        [Input("withDescribe")]
        public bool? WithDescribe { get; set; }

        public GetSecretsArgs()
        {
        }
        public static new GetSecretsArgs Empty => new GetSecretsArgs();
    }

    public sealed class GetSecretsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// IN clause to filter the list of secrets
        /// </summary>
        [Input("in")]
        public Input<Inputs.GetSecretsInInputArgs>? In { get; set; }

        /// <summary>
        /// Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
        /// </summary>
        [Input("like")]
        public Input<string>? Like { get; set; }

        /// <summary>
        /// Runs DESC SECRET for each secret returned by SHOW SECRETS. The output of describe is saved to the description field. By default this value is set to true.
        /// </summary>
        [Input("withDescribe")]
        public Input<bool>? WithDescribe { get; set; }

        public GetSecretsInvokeArgs()
        {
        }
        public static new GetSecretsInvokeArgs Empty => new GetSecretsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecretsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IN clause to filter the list of secrets
        /// </summary>
        public readonly Outputs.GetSecretsInResult? In;
        /// <summary>
        /// Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
        /// </summary>
        public readonly string? Like;
        /// <summary>
        /// Holds the aggregated output of all secrets details queries.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecretsSecretResult> Secrets;
        /// <summary>
        /// Runs DESC SECRET for each secret returned by SHOW SECRETS. The output of describe is saved to the description field. By default this value is set to true.
        /// </summary>
        public readonly bool? WithDescribe;

        [OutputConstructor]
        private GetSecretsResult(
            string id,

            Outputs.GetSecretsInResult? @in,

            string? like,

            ImmutableArray<Outputs.GetSecretsSecretResult> secrets,

            bool? withDescribe)
        {
            Id = id;
            In = @in;
            Like = like;
            Secrets = secrets;
            WithDescribe = withDescribe;
        }
    }
}
