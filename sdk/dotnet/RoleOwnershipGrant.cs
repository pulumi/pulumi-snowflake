// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    /// <summary>
    /// &gt; **Deprecation** This resource is deprecated and will be removed in a future major version release. Please use snowflake.GrantOwnership instead. &lt;deprecation&gt;
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Snowflake = Pulumi.Snowflake;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var role = new Snowflake.Role("role", new()
    ///     {
    ///         Name = "rking_test_role",
    ///         Comment = "for testing",
    ///     });
    /// 
    ///     var otherRole = new Snowflake.Role("other_role", new()
    ///     {
    ///         Name = "rking_test_role2",
    ///     });
    /// 
    ///     // ensure the Terraform user inherits ownership privileges for the rking_test_role role
    ///     // otherwise Terraform will fail to destroy the rking_test_role2 role due to insufficient privileges
    ///     var grants = new Snowflake.RoleGrants("grants", new()
    ///     {
    ///         RoleName = role.Name,
    ///         Roles = new[]
    ///         {
    ///             "ACCOUNTADMIN",
    ///         },
    ///     });
    /// 
    ///     var grant = new Snowflake.RoleOwnershipGrant("grant", new()
    ///     {
    ///         OnRoleName = role.Name,
    ///         ToRoleName = otherRole.Name,
    ///         CurrentGrants = "COPY",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import snowflake:index/roleOwnershipGrant:RoleOwnershipGrant example "&lt;on_role_name&gt;|&lt;to_role_name&gt;|&lt;current_grants&gt;"
    /// ```
    /// </summary>
    [SnowflakeResourceType("snowflake:index/roleOwnershipGrant:RoleOwnershipGrant")]
    public partial class RoleOwnershipGrant : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies whether to remove or transfer all existing outbound privileges on the object when ownership is transferred to a new role.
        /// </summary>
        [Output("currentGrants")]
        public Output<string?> CurrentGrants { get; private set; } = null!;

        /// <summary>
        /// The name of the role ownership is granted on.
        /// </summary>
        [Output("onRoleName")]
        public Output<string> OnRoleName { get; private set; } = null!;

        /// <summary>
        /// The name of the role to revert ownership to on destroy.
        /// </summary>
        [Output("revertOwnershipToRoleName")]
        public Output<string?> RevertOwnershipToRoleName { get; private set; } = null!;

        [Output("toRoleName")]
        public Output<string> ToRoleName { get; private set; } = null!;


        /// <summary>
        /// Create a RoleOwnershipGrant resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RoleOwnershipGrant(string name, RoleOwnershipGrantArgs args, CustomResourceOptions? options = null)
            : base("snowflake:index/roleOwnershipGrant:RoleOwnershipGrant", name, args ?? new RoleOwnershipGrantArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RoleOwnershipGrant(string name, Input<string> id, RoleOwnershipGrantState? state = null, CustomResourceOptions? options = null)
            : base("snowflake:index/roleOwnershipGrant:RoleOwnershipGrant", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RoleOwnershipGrant resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RoleOwnershipGrant Get(string name, Input<string> id, RoleOwnershipGrantState? state = null, CustomResourceOptions? options = null)
        {
            return new RoleOwnershipGrant(name, id, state, options);
        }
    }

    public sealed class RoleOwnershipGrantArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether to remove or transfer all existing outbound privileges on the object when ownership is transferred to a new role.
        /// </summary>
        [Input("currentGrants")]
        public Input<string>? CurrentGrants { get; set; }

        /// <summary>
        /// The name of the role ownership is granted on.
        /// </summary>
        [Input("onRoleName", required: true)]
        public Input<string> OnRoleName { get; set; } = null!;

        /// <summary>
        /// The name of the role to revert ownership to on destroy.
        /// </summary>
        [Input("revertOwnershipToRoleName")]
        public Input<string>? RevertOwnershipToRoleName { get; set; }

        [Input("toRoleName", required: true)]
        public Input<string> ToRoleName { get; set; } = null!;

        public RoleOwnershipGrantArgs()
        {
        }
        public static new RoleOwnershipGrantArgs Empty => new RoleOwnershipGrantArgs();
    }

    public sealed class RoleOwnershipGrantState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether to remove or transfer all existing outbound privileges on the object when ownership is transferred to a new role.
        /// </summary>
        [Input("currentGrants")]
        public Input<string>? CurrentGrants { get; set; }

        /// <summary>
        /// The name of the role ownership is granted on.
        /// </summary>
        [Input("onRoleName")]
        public Input<string>? OnRoleName { get; set; }

        /// <summary>
        /// The name of the role to revert ownership to on destroy.
        /// </summary>
        [Input("revertOwnershipToRoleName")]
        public Input<string>? RevertOwnershipToRoleName { get; set; }

        [Input("toRoleName")]
        public Input<string>? ToRoleName { get; set; }

        public RoleOwnershipGrantState()
        {
        }
        public static new RoleOwnershipGrantState Empty => new RoleOwnershipGrantState();
    }
}
