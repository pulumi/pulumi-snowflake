// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    [SnowflakeResourceType("snowflake:index/functionScala:FunctionScala")]
    public partial class FunctionScala : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of the arguments for the function. Consult the
        /// [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
        /// </summary>
        [Output("arguments")]
        public Output<ImmutableArray<Outputs.FunctionScalaArgument>> Arguments { get; private set; } = null!;

        /// <summary>
        /// Specifies a comment for the function.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// The database in which to create the function. Due to technical limitations (read more here), avoid using the following
        /// characters: `|`, `.`, `"`.
        /// </summary>
        [Output("database")]
        public Output<string> Database { get; private set; } = null!;

        /// <summary>
        /// Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).
        /// For more information, check [ENABLE_CONSOLE_OUTPUT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
        /// </summary>
        [Output("enableConsoleOutput")]
        public Output<bool> EnableConsoleOutput { get; private set; } = null!;

        /// <summary>
        /// The names of [external access
        /// integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
        /// this function’s handler code to access external networks. An external access integration specifies [network
        /// rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
        /// [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
        /// (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
        /// </summary>
        [Output("externalAccessIntegrations")]
        public Output<ImmutableArray<string>> ExternalAccessIntegrations { get; private set; } = null!;

        /// <summary>
        /// Fully qualified name of the resource. For more information, see [object name
        /// resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
        /// </summary>
        [Output("fullyQualifiedName")]
        public Output<string> FullyQualifiedName { get; private set; } = null!;

        /// <summary>
        /// Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;
        /// do not include them. The `function_definition` value must be Scala source code. For more information, see [Introduction
        /// to Scala UDFs](https://docs.snowflake.com/en/developer-guide/udf/scala/udf-scala-introduction). To mitigate permadiff on
        /// this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a
        /// change in case or run of whitespace is semantically significant.
        /// </summary>
        [Output("functionDefinition")]
        public Output<string?> FunctionDefinition { get; private set; } = null!;

        /// <summary>
        /// Specifies language for the user. Used to detect external changes.
        /// </summary>
        [Output("functionLanguage")]
        public Output<string> FunctionLanguage { get; private set; } = null!;

        /// <summary>
        /// The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
        /// value should be a method name, as in the following form: `MyClass.myMethod`.
        /// </summary>
        [Output("handler")]
        public Output<string> Handler { get; private set; } = null!;

        /// <summary>
        /// The location (stage), path, and name of the file(s) to import, such as a JAR or other kind of file. The JAR file might
        /// contain handler dependency libraries. It can contain one or more .class files and zero or more resource files. JNI (Java
        /// Native Interface) is not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java
        /// bytecode). A non-JAR file might a file read by handler code. For an example, see [Reading a file specified statically in
        /// IMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports).
        /// Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#scala).
        /// </summary>
        [Output("imports")]
        public Output<ImmutableArray<Outputs.FunctionScalaImport>> Imports { get; private set; } = null!;

        [Output("isSecure")]
        public Output<string?> IsSecure { get; private set; } = null!;

        /// <summary>
        /// LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
        /// </summary>
        [Output("logLevel")]
        public Output<string> LogLevel { get; private set; } = null!;

        /// <summary>
        /// METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
        /// </summary>
        [Output("metricLevel")]
        public Output<string> MetricLevel { get; private set; } = null!;

        /// <summary>
        /// The name of the function; the identifier does not need to be unique for the schema in which the function is created
        /// because UDFs are identified and resolved by the combination of the name and argument types. Check the
        /// [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations
        /// (read more here), avoid using the following characters: `|`, `.`, `"`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON
        /// NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
        /// </summary>
        [Output("nullInputBehavior")]
        public Output<string?> NullInputBehavior { get; private set; } = null!;

        /// <summary>
        /// The name and version number of Snowflake system packages required as dependencies. The value should be of the form
        /// `package_name:version_number`, where `package_name` is `snowflake_domain:package`.
        /// </summary>
        [Output("packages")]
        public Output<ImmutableArray<string>> Packages { get; private set; } = null!;

        /// <summary>
        /// Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableArray<Outputs.FunctionScalaParameter>> Parameters { get; private set; } = null!;

        /// <summary>
        /// Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |
        /// `IMMUTABLE`.
        /// </summary>
        [Output("returnResultsBehavior")]
        public Output<string?> ReturnResultsBehavior { get; private set; } = null!;

        /// <summary>
        /// Specifies the results returned by the UDF, which determines the UDF type. Use `&lt;result_data_type&gt;` to create a scalar
        /// UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a
        /// table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult
        /// the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
        /// </summary>
        [Output("returnType")]
        public Output<string> ReturnType { get; private set; } = null!;

        /// <summary>
        /// Specifies the Scala runtime version to use. The supported versions of Scala are: 2.12.
        /// </summary>
        [Output("runtimeVersion")]
        public Output<string> RuntimeVersion { get; private set; } = null!;

        /// <summary>
        /// The schema in which to create the function. Due to technical limitations (read more here), avoid using the following
        /// characters: `|`, `.`, `"`.
        /// </summary>
        [Output("schema")]
        public Output<string> Schema { get; private set; } = null!;

        /// <summary>
        /// Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
        /// can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
        /// specify here must be allowed by the [external access
        /// integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
        /// this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
        /// </summary>
        [Output("secrets")]
        public Output<ImmutableArray<Outputs.FunctionScalaSecret>> Secrets { get; private set; } = null!;

        /// <summary>
        /// Outputs the result of `SHOW FUNCTION` for the given function.
        /// </summary>
        [Output("showOutputs")]
        public Output<ImmutableArray<Outputs.FunctionScalaShowOutput>> ShowOutputs { get; private set; } = null!;

        /// <summary>
        /// The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
        /// value should be a method name, as in the following form: `MyClass.myMethod`.
        /// </summary>
        [Output("targetPath")]
        public Output<Outputs.FunctionScalaTargetPath?> TargetPath { get; private set; } = null!;

        /// <summary>
        /// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
        /// </summary>
        [Output("traceLevel")]
        public Output<string> TraceLevel { get; private set; } = null!;


        /// <summary>
        /// Create a FunctionScala resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FunctionScala(string name, FunctionScalaArgs args, CustomResourceOptions? options = null)
            : base("snowflake:index/functionScala:FunctionScala", name, args ?? new FunctionScalaArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FunctionScala(string name, Input<string> id, FunctionScalaState? state = null, CustomResourceOptions? options = null)
            : base("snowflake:index/functionScala:FunctionScala", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FunctionScala resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FunctionScala Get(string name, Input<string> id, FunctionScalaState? state = null, CustomResourceOptions? options = null)
        {
            return new FunctionScala(name, id, state, options);
        }
    }

    public sealed class FunctionScalaArgs : global::Pulumi.ResourceArgs
    {
        [Input("arguments")]
        private InputList<Inputs.FunctionScalaArgumentArgs>? _arguments;

        /// <summary>
        /// List of the arguments for the function. Consult the
        /// [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
        /// </summary>
        public InputList<Inputs.FunctionScalaArgumentArgs> Arguments
        {
            get => _arguments ?? (_arguments = new InputList<Inputs.FunctionScalaArgumentArgs>());
            set => _arguments = value;
        }

        /// <summary>
        /// Specifies a comment for the function.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// The database in which to create the function. Due to technical limitations (read more here), avoid using the following
        /// characters: `|`, `.`, `"`.
        /// </summary>
        [Input("database", required: true)]
        public Input<string> Database { get; set; } = null!;

        /// <summary>
        /// Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).
        /// For more information, check [ENABLE_CONSOLE_OUTPUT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
        /// </summary>
        [Input("enableConsoleOutput")]
        public Input<bool>? EnableConsoleOutput { get; set; }

        [Input("externalAccessIntegrations")]
        private InputList<string>? _externalAccessIntegrations;

        /// <summary>
        /// The names of [external access
        /// integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
        /// this function’s handler code to access external networks. An external access integration specifies [network
        /// rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
        /// [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
        /// (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
        /// </summary>
        public InputList<string> ExternalAccessIntegrations
        {
            get => _externalAccessIntegrations ?? (_externalAccessIntegrations = new InputList<string>());
            set => _externalAccessIntegrations = value;
        }

        /// <summary>
        /// Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;
        /// do not include them. The `function_definition` value must be Scala source code. For more information, see [Introduction
        /// to Scala UDFs](https://docs.snowflake.com/en/developer-guide/udf/scala/udf-scala-introduction). To mitigate permadiff on
        /// this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a
        /// change in case or run of whitespace is semantically significant.
        /// </summary>
        [Input("functionDefinition")]
        public Input<string>? FunctionDefinition { get; set; }

        /// <summary>
        /// The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
        /// value should be a method name, as in the following form: `MyClass.myMethod`.
        /// </summary>
        [Input("handler", required: true)]
        public Input<string> Handler { get; set; } = null!;

        [Input("imports")]
        private InputList<Inputs.FunctionScalaImportArgs>? _imports;

        /// <summary>
        /// The location (stage), path, and name of the file(s) to import, such as a JAR or other kind of file. The JAR file might
        /// contain handler dependency libraries. It can contain one or more .class files and zero or more resource files. JNI (Java
        /// Native Interface) is not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java
        /// bytecode). A non-JAR file might a file read by handler code. For an example, see [Reading a file specified statically in
        /// IMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports).
        /// Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#scala).
        /// </summary>
        public InputList<Inputs.FunctionScalaImportArgs> Imports
        {
            get => _imports ?? (_imports = new InputList<Inputs.FunctionScalaImportArgs>());
            set => _imports = value;
        }

        [Input("isSecure")]
        public Input<string>? IsSecure { get; set; }

        /// <summary>
        /// LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
        /// </summary>
        [Input("logLevel")]
        public Input<string>? LogLevel { get; set; }

        /// <summary>
        /// METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
        /// </summary>
        [Input("metricLevel")]
        public Input<string>? MetricLevel { get; set; }

        /// <summary>
        /// The name of the function; the identifier does not need to be unique for the schema in which the function is created
        /// because UDFs are identified and resolved by the combination of the name and argument types. Check the
        /// [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations
        /// (read more here), avoid using the following characters: `|`, `.`, `"`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON
        /// NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
        /// </summary>
        [Input("nullInputBehavior")]
        public Input<string>? NullInputBehavior { get; set; }

        [Input("packages")]
        private InputList<string>? _packages;

        /// <summary>
        /// The name and version number of Snowflake system packages required as dependencies. The value should be of the form
        /// `package_name:version_number`, where `package_name` is `snowflake_domain:package`.
        /// </summary>
        public InputList<string> Packages
        {
            get => _packages ?? (_packages = new InputList<string>());
            set => _packages = value;
        }

        /// <summary>
        /// Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |
        /// `IMMUTABLE`.
        /// </summary>
        [Input("returnResultsBehavior")]
        public Input<string>? ReturnResultsBehavior { get; set; }

        /// <summary>
        /// Specifies the results returned by the UDF, which determines the UDF type. Use `&lt;result_data_type&gt;` to create a scalar
        /// UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a
        /// table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult
        /// the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
        /// </summary>
        [Input("returnType", required: true)]
        public Input<string> ReturnType { get; set; } = null!;

        /// <summary>
        /// Specifies the Scala runtime version to use. The supported versions of Scala are: 2.12.
        /// </summary>
        [Input("runtimeVersion", required: true)]
        public Input<string> RuntimeVersion { get; set; } = null!;

        /// <summary>
        /// The schema in which to create the function. Due to technical limitations (read more here), avoid using the following
        /// characters: `|`, `.`, `"`.
        /// </summary>
        [Input("schema", required: true)]
        public Input<string> Schema { get; set; } = null!;

        [Input("secrets")]
        private InputList<Inputs.FunctionScalaSecretArgs>? _secrets;

        /// <summary>
        /// Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
        /// can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
        /// specify here must be allowed by the [external access
        /// integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
        /// this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
        /// </summary>
        public InputList<Inputs.FunctionScalaSecretArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.FunctionScalaSecretArgs>());
            set => _secrets = value;
        }

        /// <summary>
        /// The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
        /// value should be a method name, as in the following form: `MyClass.myMethod`.
        /// </summary>
        [Input("targetPath")]
        public Input<Inputs.FunctionScalaTargetPathArgs>? TargetPath { get; set; }

        /// <summary>
        /// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
        /// </summary>
        [Input("traceLevel")]
        public Input<string>? TraceLevel { get; set; }

        public FunctionScalaArgs()
        {
        }
        public static new FunctionScalaArgs Empty => new FunctionScalaArgs();
    }

    public sealed class FunctionScalaState : global::Pulumi.ResourceArgs
    {
        [Input("arguments")]
        private InputList<Inputs.FunctionScalaArgumentGetArgs>? _arguments;

        /// <summary>
        /// List of the arguments for the function. Consult the
        /// [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
        /// </summary>
        public InputList<Inputs.FunctionScalaArgumentGetArgs> Arguments
        {
            get => _arguments ?? (_arguments = new InputList<Inputs.FunctionScalaArgumentGetArgs>());
            set => _arguments = value;
        }

        /// <summary>
        /// Specifies a comment for the function.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// The database in which to create the function. Due to technical limitations (read more here), avoid using the following
        /// characters: `|`, `.`, `"`.
        /// </summary>
        [Input("database")]
        public Input<string>? Database { get; set; }

        /// <summary>
        /// Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).
        /// For more information, check [ENABLE_CONSOLE_OUTPUT
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
        /// </summary>
        [Input("enableConsoleOutput")]
        public Input<bool>? EnableConsoleOutput { get; set; }

        [Input("externalAccessIntegrations")]
        private InputList<string>? _externalAccessIntegrations;

        /// <summary>
        /// The names of [external access
        /// integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
        /// this function’s handler code to access external networks. An external access integration specifies [network
        /// rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
        /// [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
        /// (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
        /// </summary>
        public InputList<string> ExternalAccessIntegrations
        {
            get => _externalAccessIntegrations ?? (_externalAccessIntegrations = new InputList<string>());
            set => _externalAccessIntegrations = value;
        }

        /// <summary>
        /// Fully qualified name of the resource. For more information, see [object name
        /// resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
        /// </summary>
        [Input("fullyQualifiedName")]
        public Input<string>? FullyQualifiedName { get; set; }

        /// <summary>
        /// Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;
        /// do not include them. The `function_definition` value must be Scala source code. For more information, see [Introduction
        /// to Scala UDFs](https://docs.snowflake.com/en/developer-guide/udf/scala/udf-scala-introduction). To mitigate permadiff on
        /// this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a
        /// change in case or run of whitespace is semantically significant.
        /// </summary>
        [Input("functionDefinition")]
        public Input<string>? FunctionDefinition { get; set; }

        /// <summary>
        /// Specifies language for the user. Used to detect external changes.
        /// </summary>
        [Input("functionLanguage")]
        public Input<string>? FunctionLanguage { get; set; }

        /// <summary>
        /// The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
        /// value should be a method name, as in the following form: `MyClass.myMethod`.
        /// </summary>
        [Input("handler")]
        public Input<string>? Handler { get; set; }

        [Input("imports")]
        private InputList<Inputs.FunctionScalaImportGetArgs>? _imports;

        /// <summary>
        /// The location (stage), path, and name of the file(s) to import, such as a JAR or other kind of file. The JAR file might
        /// contain handler dependency libraries. It can contain one or more .class files and zero or more resource files. JNI (Java
        /// Native Interface) is not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java
        /// bytecode). A non-JAR file might a file read by handler code. For an example, see [Reading a file specified statically in
        /// IMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports).
        /// Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#scala).
        /// </summary>
        public InputList<Inputs.FunctionScalaImportGetArgs> Imports
        {
            get => _imports ?? (_imports = new InputList<Inputs.FunctionScalaImportGetArgs>());
            set => _imports = value;
        }

        [Input("isSecure")]
        public Input<string>? IsSecure { get; set; }

        /// <summary>
        /// LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
        /// </summary>
        [Input("logLevel")]
        public Input<string>? LogLevel { get; set; }

        /// <summary>
        /// METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
        /// </summary>
        [Input("metricLevel")]
        public Input<string>? MetricLevel { get; set; }

        /// <summary>
        /// The name of the function; the identifier does not need to be unique for the schema in which the function is created
        /// because UDFs are identified and resolved by the combination of the name and argument types. Check the
        /// [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations
        /// (read more here), avoid using the following characters: `|`, `.`, `"`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON
        /// NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
        /// </summary>
        [Input("nullInputBehavior")]
        public Input<string>? NullInputBehavior { get; set; }

        [Input("packages")]
        private InputList<string>? _packages;

        /// <summary>
        /// The name and version number of Snowflake system packages required as dependencies. The value should be of the form
        /// `package_name:version_number`, where `package_name` is `snowflake_domain:package`.
        /// </summary>
        public InputList<string> Packages
        {
            get => _packages ?? (_packages = new InputList<string>());
            set => _packages = value;
        }

        [Input("parameters")]
        private InputList<Inputs.FunctionScalaParameterGetArgs>? _parameters;

        /// <summary>
        /// Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.
        /// </summary>
        public InputList<Inputs.FunctionScalaParameterGetArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<Inputs.FunctionScalaParameterGetArgs>());
            set => _parameters = value;
        }

        /// <summary>
        /// Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |
        /// `IMMUTABLE`.
        /// </summary>
        [Input("returnResultsBehavior")]
        public Input<string>? ReturnResultsBehavior { get; set; }

        /// <summary>
        /// Specifies the results returned by the UDF, which determines the UDF type. Use `&lt;result_data_type&gt;` to create a scalar
        /// UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a
        /// table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult
        /// the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
        /// </summary>
        [Input("returnType")]
        public Input<string>? ReturnType { get; set; }

        /// <summary>
        /// Specifies the Scala runtime version to use. The supported versions of Scala are: 2.12.
        /// </summary>
        [Input("runtimeVersion")]
        public Input<string>? RuntimeVersion { get; set; }

        /// <summary>
        /// The schema in which to create the function. Due to technical limitations (read more here), avoid using the following
        /// characters: `|`, `.`, `"`.
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        [Input("secrets")]
        private InputList<Inputs.FunctionScalaSecretGetArgs>? _secrets;

        /// <summary>
        /// Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
        /// can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
        /// specify here must be allowed by the [external access
        /// integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
        /// this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
        /// </summary>
        public InputList<Inputs.FunctionScalaSecretGetArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.FunctionScalaSecretGetArgs>());
            set => _secrets = value;
        }

        [Input("showOutputs")]
        private InputList<Inputs.FunctionScalaShowOutputGetArgs>? _showOutputs;

        /// <summary>
        /// Outputs the result of `SHOW FUNCTION` for the given function.
        /// </summary>
        public InputList<Inputs.FunctionScalaShowOutputGetArgs> ShowOutputs
        {
            get => _showOutputs ?? (_showOutputs = new InputList<Inputs.FunctionScalaShowOutputGetArgs>());
            set => _showOutputs = value;
        }

        /// <summary>
        /// The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
        /// value should be a method name, as in the following form: `MyClass.myMethod`.
        /// </summary>
        [Input("targetPath")]
        public Input<Inputs.FunctionScalaTargetPathGetArgs>? TargetPath { get; set; }

        /// <summary>
        /// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
        /// docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
        /// </summary>
        [Input("traceLevel")]
        public Input<string>? TraceLevel { get; set; }

        public FunctionScalaState()
        {
        }
        public static new FunctionScalaState Empty => new FunctionScalaState();
    }
}
