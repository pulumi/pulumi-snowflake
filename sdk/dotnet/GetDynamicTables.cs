// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    public static class GetDynamicTables
    {
        public static Task<GetDynamicTablesResult> InvokeAsync(GetDynamicTablesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDynamicTablesResult>("snowflake:index/getDynamicTables:getDynamicTables", args ?? new GetDynamicTablesArgs(), options.WithDefaults());

        public static Output<GetDynamicTablesResult> Invoke(GetDynamicTablesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDynamicTablesResult>("snowflake:index/getDynamicTables:getDynamicTables", args ?? new GetDynamicTablesInvokeArgs(), options.WithDefaults());

        public static Output<GetDynamicTablesResult> Invoke(GetDynamicTablesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDynamicTablesResult>("snowflake:index/getDynamicTables:getDynamicTables", args ?? new GetDynamicTablesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDynamicTablesArgs : global::Pulumi.InvokeArgs
    {
        [Input("in")]
        public Inputs.GetDynamicTablesInArgs? In { get; set; }

        [Input("like")]
        public Inputs.GetDynamicTablesLikeArgs? Like { get; set; }

        [Input("limit")]
        public Inputs.GetDynamicTablesLimitArgs? Limit { get; set; }

        [Input("startsWith")]
        public string? StartsWith { get; set; }

        public GetDynamicTablesArgs()
        {
        }
        public static new GetDynamicTablesArgs Empty => new GetDynamicTablesArgs();
    }

    public sealed class GetDynamicTablesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("in")]
        public Input<Inputs.GetDynamicTablesInInputArgs>? In { get; set; }

        [Input("like")]
        public Input<Inputs.GetDynamicTablesLikeInputArgs>? Like { get; set; }

        [Input("limit")]
        public Input<Inputs.GetDynamicTablesLimitInputArgs>? Limit { get; set; }

        [Input("startsWith")]
        public Input<string>? StartsWith { get; set; }

        public GetDynamicTablesInvokeArgs()
        {
        }
        public static new GetDynamicTablesInvokeArgs Empty => new GetDynamicTablesInvokeArgs();
    }


    [OutputType]
    public sealed class GetDynamicTablesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly Outputs.GetDynamicTablesInResult? In;
        public readonly Outputs.GetDynamicTablesLikeResult? Like;
        public readonly Outputs.GetDynamicTablesLimitResult? Limit;
        public readonly ImmutableArray<Outputs.GetDynamicTablesRecordResult> Records;
        public readonly string? StartsWith;

        [OutputConstructor]
        private GetDynamicTablesResult(
            string id,

            Outputs.GetDynamicTablesInResult? @in,

            Outputs.GetDynamicTablesLikeResult? like,

            Outputs.GetDynamicTablesLimitResult? limit,

            ImmutableArray<Outputs.GetDynamicTablesRecordResult> records,

            string? startsWith)
        {
            Id = id;
            In = @in;
            Like = like;
            Limit = limit;
            Records = records;
            StartsWith = startsWith;
        }
    }
}
