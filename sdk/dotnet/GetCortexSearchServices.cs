// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    public static class GetCortexSearchServices
    {
        /// <summary>
        /// !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Snowflake = Pulumi.Snowflake;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Simple usage
        ///     var simple = Snowflake.GetCortexSearchServices.Invoke();
        /// 
        ///     // Filtering (like)
        ///     var like = Snowflake.GetCortexSearchServices.Invoke(new()
        ///     {
        ///         Like = "some-name",
        ///     });
        /// 
        ///     // Filtering (starts_with)
        ///     var startsWith = Snowflake.GetCortexSearchServices.Invoke(new()
        ///     {
        ///         StartsWith = "prefix-",
        ///     });
        /// 
        ///     // Filtering (limit)
        ///     var limit = Snowflake.GetCortexSearchServices.Invoke(new()
        ///     {
        ///         Limit = new Snowflake.Inputs.GetCortexSearchServicesLimitInputArgs
        ///         {
        ///             Rows = 10,
        ///             From = "prefix-",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["simpleOutput"] = simple.Apply(getCortexSearchServicesResult =&gt; getCortexSearchServicesResult.CortexSearchServices),
        ///         ["likeOutput"] = like.Apply(getCortexSearchServicesResult =&gt; getCortexSearchServicesResult.CortexSearchServices),
        ///         ["startsWithOutput"] = startsWith.Apply(getCortexSearchServicesResult =&gt; getCortexSearchServicesResult.CortexSearchServices),
        ///         ["limitOutput"] = limit.Apply(getCortexSearchServicesResult =&gt; getCortexSearchServicesResult.CortexSearchServices),
        ///     };
        /// });
        /// ```
        /// 
        /// &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
        /// </summary>
        public static Task<GetCortexSearchServicesResult> InvokeAsync(GetCortexSearchServicesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCortexSearchServicesResult>("snowflake:index/getCortexSearchServices:getCortexSearchServices", args ?? new GetCortexSearchServicesArgs(), options.WithDefaults());

        /// <summary>
        /// !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Snowflake = Pulumi.Snowflake;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Simple usage
        ///     var simple = Snowflake.GetCortexSearchServices.Invoke();
        /// 
        ///     // Filtering (like)
        ///     var like = Snowflake.GetCortexSearchServices.Invoke(new()
        ///     {
        ///         Like = "some-name",
        ///     });
        /// 
        ///     // Filtering (starts_with)
        ///     var startsWith = Snowflake.GetCortexSearchServices.Invoke(new()
        ///     {
        ///         StartsWith = "prefix-",
        ///     });
        /// 
        ///     // Filtering (limit)
        ///     var limit = Snowflake.GetCortexSearchServices.Invoke(new()
        ///     {
        ///         Limit = new Snowflake.Inputs.GetCortexSearchServicesLimitInputArgs
        ///         {
        ///             Rows = 10,
        ///             From = "prefix-",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["simpleOutput"] = simple.Apply(getCortexSearchServicesResult =&gt; getCortexSearchServicesResult.CortexSearchServices),
        ///         ["likeOutput"] = like.Apply(getCortexSearchServicesResult =&gt; getCortexSearchServicesResult.CortexSearchServices),
        ///         ["startsWithOutput"] = startsWith.Apply(getCortexSearchServicesResult =&gt; getCortexSearchServicesResult.CortexSearchServices),
        ///         ["limitOutput"] = limit.Apply(getCortexSearchServicesResult =&gt; getCortexSearchServicesResult.CortexSearchServices),
        ///     };
        /// });
        /// ```
        /// 
        /// &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
        /// </summary>
        public static Output<GetCortexSearchServicesResult> Invoke(GetCortexSearchServicesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCortexSearchServicesResult>("snowflake:index/getCortexSearchServices:getCortexSearchServices", args ?? new GetCortexSearchServicesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// !&gt; **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Snowflake = Pulumi.Snowflake;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Simple usage
        ///     var simple = Snowflake.GetCortexSearchServices.Invoke();
        /// 
        ///     // Filtering (like)
        ///     var like = Snowflake.GetCortexSearchServices.Invoke(new()
        ///     {
        ///         Like = "some-name",
        ///     });
        /// 
        ///     // Filtering (starts_with)
        ///     var startsWith = Snowflake.GetCortexSearchServices.Invoke(new()
        ///     {
        ///         StartsWith = "prefix-",
        ///     });
        /// 
        ///     // Filtering (limit)
        ///     var limit = Snowflake.GetCortexSearchServices.Invoke(new()
        ///     {
        ///         Limit = new Snowflake.Inputs.GetCortexSearchServicesLimitInputArgs
        ///         {
        ///             Rows = 10,
        ///             From = "prefix-",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["simpleOutput"] = simple.Apply(getCortexSearchServicesResult =&gt; getCortexSearchServicesResult.CortexSearchServices),
        ///         ["likeOutput"] = like.Apply(getCortexSearchServicesResult =&gt; getCortexSearchServicesResult.CortexSearchServices),
        ///         ["startsWithOutput"] = startsWith.Apply(getCortexSearchServicesResult =&gt; getCortexSearchServicesResult.CortexSearchServices),
        ///         ["limitOutput"] = limit.Apply(getCortexSearchServicesResult =&gt; getCortexSearchServicesResult.CortexSearchServices),
        ///     };
        /// });
        /// ```
        /// 
        /// &gt; **Note** If a field has a default value, it is shown next to the type in the schema.
        /// </summary>
        public static Output<GetCortexSearchServicesResult> Invoke(GetCortexSearchServicesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCortexSearchServicesResult>("snowflake:index/getCortexSearchServices:getCortexSearchServices", args ?? new GetCortexSearchServicesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCortexSearchServicesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// IN clause to filter the list of cortex search services.
        /// </summary>
        [Input("in")]
        public Inputs.GetCortexSearchServicesInArgs? In { get; set; }

        /// <summary>
        /// Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
        /// </summary>
        [Input("like")]
        public string? Like { get; set; }

        /// <summary>
        /// Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.
        /// </summary>
        [Input("limit")]
        public Inputs.GetCortexSearchServicesLimitArgs? Limit { get; set; }

        /// <summary>
        /// Filters the output with **case-sensitive** characters indicating the beginning of the object name.
        /// </summary>
        [Input("startsWith")]
        public string? StartsWith { get; set; }

        public GetCortexSearchServicesArgs()
        {
        }
        public static new GetCortexSearchServicesArgs Empty => new GetCortexSearchServicesArgs();
    }

    public sealed class GetCortexSearchServicesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// IN clause to filter the list of cortex search services.
        /// </summary>
        [Input("in")]
        public Input<Inputs.GetCortexSearchServicesInInputArgs>? In { get; set; }

        /// <summary>
        /// Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
        /// </summary>
        [Input("like")]
        public Input<string>? Like { get; set; }

        /// <summary>
        /// Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.
        /// </summary>
        [Input("limit")]
        public Input<Inputs.GetCortexSearchServicesLimitInputArgs>? Limit { get; set; }

        /// <summary>
        /// Filters the output with **case-sensitive** characters indicating the beginning of the object name.
        /// </summary>
        [Input("startsWith")]
        public Input<string>? StartsWith { get; set; }

        public GetCortexSearchServicesInvokeArgs()
        {
        }
        public static new GetCortexSearchServicesInvokeArgs Empty => new GetCortexSearchServicesInvokeArgs();
    }


    [OutputType]
    public sealed class GetCortexSearchServicesResult
    {
        /// <summary>
        /// Holds the output of SHOW CORTEX SEARCH SERVICES.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCortexSearchServicesCortexSearchServiceResult> CortexSearchServices;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IN clause to filter the list of cortex search services.
        /// </summary>
        public readonly Outputs.GetCortexSearchServicesInResult? In;
        /// <summary>
        /// Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
        /// </summary>
        public readonly string? Like;
        /// <summary>
        /// Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.
        /// </summary>
        public readonly Outputs.GetCortexSearchServicesLimitResult? Limit;
        /// <summary>
        /// Filters the output with **case-sensitive** characters indicating the beginning of the object name.
        /// </summary>
        public readonly string? StartsWith;

        [OutputConstructor]
        private GetCortexSearchServicesResult(
            ImmutableArray<Outputs.GetCortexSearchServicesCortexSearchServiceResult> cortexSearchServices,

            string id,

            Outputs.GetCortexSearchServicesInResult? @in,

            string? like,

            Outputs.GetCortexSearchServicesLimitResult? limit,

            string? startsWith)
        {
            CortexSearchServices = cortexSearchServices;
            Id = id;
            In = @in;
            Like = like;
            Limit = limit;
            StartsWith = startsWith;
        }
    }
}
