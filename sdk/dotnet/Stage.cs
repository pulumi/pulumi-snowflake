// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Snowflake = Pulumi.Snowflake;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleStage = new Snowflake.Stage("exampleStage", new()
    ///     {
    ///         Url = "s3://com.example.bucket/prefix",
    ///         Database = "EXAMPLE_DB",
    ///         Schema = "EXAMPLE_SCHEMA",
    ///         Credentials = $"AWS_KEY_ID='{@var.Example_aws_key_id}' AWS_SECRET_KEY='{@var.Example_aws_secret_key}'",
    ///     });
    /// 
    ///     var grantExampleStage = new Snowflake.StageGrant("grantExampleStage", new()
    ///     {
    ///         DatabaseName = exampleStage.Database,
    ///         SchemaName = exampleStage.Schema,
    ///         Roles = new[]
    ///         {
    ///             "LOADER",
    ///         },
    ///         Privilege = "OWNERSHIP",
    ///         StageName = exampleStage.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// # format is database name | schema name | stage name
    /// 
    /// ```sh
    ///  $ pulumi import snowflake:index/stage:Stage example 'dbName|schemaName|stageName'
    /// ```
    /// </summary>
    [SnowflakeResourceType("snowflake:index/stage:Stage")]
    public partial class Stage : global::Pulumi.CustomResource
    {
        [Output("awsExternalId")]
        public Output<string> AwsExternalId { get; private set; } = null!;

        /// <summary>
        /// Specifies a comment for the stage.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// Specifies the copy options for the stage.
        /// </summary>
        [Output("copyOptions")]
        public Output<string?> CopyOptions { get; private set; } = null!;

        /// <summary>
        /// Specifies the credentials for the stage.
        /// </summary>
        [Output("credentials")]
        public Output<string?> Credentials { get; private set; } = null!;

        /// <summary>
        /// The database in which to create the stage.
        /// </summary>
        [Output("database")]
        public Output<string> Database { get; private set; } = null!;

        /// <summary>
        /// Specifies the directory settings for the stage.
        /// </summary>
        [Output("directory")]
        public Output<string?> Directory { get; private set; } = null!;

        /// <summary>
        /// Specifies the encryption settings for the stage.
        /// </summary>
        [Output("encryption")]
        public Output<string?> Encryption { get; private set; } = null!;

        /// <summary>
        /// Specifies the file format for the stage.
        /// </summary>
        [Output("fileFormat")]
        public Output<string?> FileFormat { get; private set; } = null!;

        /// <summary>
        /// Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The schema in which to create the stage.
        /// </summary>
        [Output("schema")]
        public Output<string> Schema { get; private set; } = null!;

        [Output("snowflakeIamUser")]
        public Output<string> SnowflakeIamUser { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage to a Snowflake identity and access management (IAM) entity.
        /// </summary>
        [Output("storageIntegration")]
        public Output<string?> StorageIntegration { get; private set; } = null!;

        /// <summary>
        /// Definitions of a tag to associate with the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.StageTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies the URL for the stage.
        /// </summary>
        [Output("url")]
        public Output<string?> Url { get; private set; } = null!;


        /// <summary>
        /// Create a Stage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Stage(string name, StageArgs args, CustomResourceOptions? options = null)
            : base("snowflake:index/stage:Stage", name, args ?? new StageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Stage(string name, Input<string> id, StageState? state = null, CustomResourceOptions? options = null)
            : base("snowflake:index/stage:Stage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Stage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Stage Get(string name, Input<string> id, StageState? state = null, CustomResourceOptions? options = null)
        {
            return new Stage(name, id, state, options);
        }
    }

    public sealed class StageArgs : global::Pulumi.ResourceArgs
    {
        [Input("awsExternalId")]
        public Input<string>? AwsExternalId { get; set; }

        /// <summary>
        /// Specifies a comment for the stage.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Specifies the copy options for the stage.
        /// </summary>
        [Input("copyOptions")]
        public Input<string>? CopyOptions { get; set; }

        /// <summary>
        /// Specifies the credentials for the stage.
        /// </summary>
        [Input("credentials")]
        public Input<string>? Credentials { get; set; }

        /// <summary>
        /// The database in which to create the stage.
        /// </summary>
        [Input("database", required: true)]
        public Input<string> Database { get; set; } = null!;

        /// <summary>
        /// Specifies the directory settings for the stage.
        /// </summary>
        [Input("directory")]
        public Input<string>? Directory { get; set; }

        /// <summary>
        /// Specifies the encryption settings for the stage.
        /// </summary>
        [Input("encryption")]
        public Input<string>? Encryption { get; set; }

        /// <summary>
        /// Specifies the file format for the stage.
        /// </summary>
        [Input("fileFormat")]
        public Input<string>? FileFormat { get; set; }

        /// <summary>
        /// Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The schema in which to create the stage.
        /// </summary>
        [Input("schema", required: true)]
        public Input<string> Schema { get; set; } = null!;

        [Input("snowflakeIamUser")]
        public Input<string>? SnowflakeIamUser { get; set; }

        /// <summary>
        /// Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage to a Snowflake identity and access management (IAM) entity.
        /// </summary>
        [Input("storageIntegration")]
        public Input<string>? StorageIntegration { get; set; }

        [Input("tags")]
        private InputList<Inputs.StageTagArgs>? _tags;

        /// <summary>
        /// Definitions of a tag to associate with the resource.
        /// </summary>
        [Obsolete(@"Use the 'snowflake_tag_association' resource instead.")]
        public InputList<Inputs.StageTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.StageTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the URL for the stage.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public StageArgs()
        {
        }
        public static new StageArgs Empty => new StageArgs();
    }

    public sealed class StageState : global::Pulumi.ResourceArgs
    {
        [Input("awsExternalId")]
        public Input<string>? AwsExternalId { get; set; }

        /// <summary>
        /// Specifies a comment for the stage.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Specifies the copy options for the stage.
        /// </summary>
        [Input("copyOptions")]
        public Input<string>? CopyOptions { get; set; }

        /// <summary>
        /// Specifies the credentials for the stage.
        /// </summary>
        [Input("credentials")]
        public Input<string>? Credentials { get; set; }

        /// <summary>
        /// The database in which to create the stage.
        /// </summary>
        [Input("database")]
        public Input<string>? Database { get; set; }

        /// <summary>
        /// Specifies the directory settings for the stage.
        /// </summary>
        [Input("directory")]
        public Input<string>? Directory { get; set; }

        /// <summary>
        /// Specifies the encryption settings for the stage.
        /// </summary>
        [Input("encryption")]
        public Input<string>? Encryption { get; set; }

        /// <summary>
        /// Specifies the file format for the stage.
        /// </summary>
        [Input("fileFormat")]
        public Input<string>? FileFormat { get; set; }

        /// <summary>
        /// Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The schema in which to create the stage.
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        [Input("snowflakeIamUser")]
        public Input<string>? SnowflakeIamUser { get; set; }

        /// <summary>
        /// Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage to a Snowflake identity and access management (IAM) entity.
        /// </summary>
        [Input("storageIntegration")]
        public Input<string>? StorageIntegration { get; set; }

        [Input("tags")]
        private InputList<Inputs.StageTagGetArgs>? _tags;

        /// <summary>
        /// Definitions of a tag to associate with the resource.
        /// </summary>
        [Obsolete(@"Use the 'snowflake_tag_association' resource instead.")]
        public InputList<Inputs.StageTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.StageTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the URL for the stage.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public StageState()
        {
        }
        public static new StageState Empty => new StageState();
    }
}
