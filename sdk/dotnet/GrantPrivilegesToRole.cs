// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    /// <summary>
    /// &gt; **Deprecation** This resource is deprecated and will be removed in a future major version release. Please use snowflake.GrantPrivilegesToAccountRole instead. &lt;deprecation&gt;
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Snowflake = Pulumi.Snowflake;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     //#################################
    ///     //## global privileges
    ///     //#################################
    ///     // list of privileges
    ///     var g1 = new Snowflake.GrantPrivilegesToRole("g1", new()
    ///     {
    ///         Privileges = new[]
    ///         {
    ///             "MODIFY",
    ///             "USAGE",
    ///         },
    ///         RoleName = r.Name,
    ///         OnAccount = true,
    ///     });
    /// 
    ///     // all privileges + grant option
    ///     var g2 = new Snowflake.GrantPrivilegesToRole("g2", new()
    ///     {
    ///         RoleName = r.Name,
    ///         OnAccount = true,
    ///         AllPrivileges = true,
    ///         WithGrantOption = true,
    ///     });
    /// 
    ///     //#################################
    ///     //## account object privileges
    ///     //#################################
    ///     // list of privileges
    ///     var g3 = new Snowflake.GrantPrivilegesToRole("g3", new()
    ///     {
    ///         Privileges = new[]
    ///         {
    ///             "CREATE",
    ///             "MONITOR",
    ///         },
    ///         RoleName = r.Name,
    ///         OnAccountObject = new Snowflake.Inputs.GrantPrivilegesToRoleOnAccountObjectArgs
    ///         {
    ///             ObjectType = "DATABASE",
    ///             ObjectName = d.Name,
    ///         },
    ///     });
    /// 
    ///     // all privileges + grant option
    ///     var g4 = new Snowflake.GrantPrivilegesToRole("g4", new()
    ///     {
    ///         RoleName = r.Name,
    ///         OnAccountObject = new Snowflake.Inputs.GrantPrivilegesToRoleOnAccountObjectArgs
    ///         {
    ///             ObjectType = "DATABASE",
    ///             ObjectName = d.Name,
    ///         },
    ///         AllPrivileges = true,
    ///         WithGrantOption = true,
    ///     });
    /// 
    ///     //#################################
    ///     //## schema privileges
    ///     //#################################
    ///     // list of privileges
    ///     var g5 = new Snowflake.GrantPrivilegesToRole("g5", new()
    ///     {
    ///         Privileges = new[]
    ///         {
    ///             "MODIFY",
    ///             "CREATE TABLE",
    ///         },
    ///         RoleName = r.Name,
    ///         OnSchema = new Snowflake.Inputs.GrantPrivilegesToRoleOnSchemaArgs
    ///         {
    ///             SchemaName = "\"my_db\".\"my_schema\"",
    ///         },
    ///     });
    /// 
    ///     // all privileges + grant option
    ///     var g6 = new Snowflake.GrantPrivilegesToRole("g6", new()
    ///     {
    ///         RoleName = r.Name,
    ///         OnSchema = new Snowflake.Inputs.GrantPrivilegesToRoleOnSchemaArgs
    ///         {
    ///             SchemaName = "\"my_db\".\"my_schema\"",
    ///         },
    ///         AllPrivileges = true,
    ///         WithGrantOption = true,
    ///     });
    /// 
    ///     // all schemas in database
    ///     var g7 = new Snowflake.GrantPrivilegesToRole("g7", new()
    ///     {
    ///         Privileges = new[]
    ///         {
    ///             "MODIFY",
    ///             "CREATE TABLE",
    ///         },
    ///         RoleName = r.Name,
    ///         OnSchema = new Snowflake.Inputs.GrantPrivilegesToRoleOnSchemaArgs
    ///         {
    ///             AllSchemasInDatabase = d.Name,
    ///         },
    ///     });
    /// 
    ///     // future schemas in database
    ///     var g8 = new Snowflake.GrantPrivilegesToRole("g8", new()
    ///     {
    ///         Privileges = new[]
    ///         {
    ///             "MODIFY",
    ///             "CREATE TABLE",
    ///         },
    ///         RoleName = r.Name,
    ///         OnSchema = new Snowflake.Inputs.GrantPrivilegesToRoleOnSchemaArgs
    ///         {
    ///             FutureSchemasInDatabase = d.Name,
    ///         },
    ///     });
    /// 
    ///     //#################################
    ///     //## schema object privileges
    ///     //#################################
    ///     // list of privileges
    ///     var g9 = new Snowflake.GrantPrivilegesToRole("g9", new()
    ///     {
    ///         Privileges = new[]
    ///         {
    ///             "SELECT",
    ///             "REFERENCES",
    ///         },
    ///         RoleName = r.Name,
    ///         OnSchemaObject = new Snowflake.Inputs.GrantPrivilegesToRoleOnSchemaObjectArgs
    ///         {
    ///             ObjectType = "VIEW",
    ///             ObjectName = "\"my_db\".\"my_schema\".\"my_view\"",
    ///         },
    ///     });
    /// 
    ///     // all privileges + grant option
    ///     var g10 = new Snowflake.GrantPrivilegesToRole("g10", new()
    ///     {
    ///         RoleName = r.Name,
    ///         OnSchemaObject = new Snowflake.Inputs.GrantPrivilegesToRoleOnSchemaObjectArgs
    ///         {
    ///             ObjectType = "VIEW",
    ///             ObjectName = "\"my_db\".\"my_schema\".\"my_view\"",
    ///         },
    ///         AllPrivileges = true,
    ///         WithGrantOption = true,
    ///     });
    /// 
    ///     // all in database
    ///     var g11 = new Snowflake.GrantPrivilegesToRole("g11", new()
    ///     {
    ///         Privileges = new[]
    ///         {
    ///             "SELECT",
    ///             "INSERT",
    ///         },
    ///         RoleName = r.Name,
    ///         OnSchemaObject = new Snowflake.Inputs.GrantPrivilegesToRoleOnSchemaObjectArgs
    ///         {
    ///             All = new Snowflake.Inputs.GrantPrivilegesToRoleOnSchemaObjectAllArgs
    ///             {
    ///                 ObjectTypePlural = "TABLES",
    ///                 InDatabase = d.Name,
    ///             },
    ///         },
    ///     });
    /// 
    ///     // all in schema
    ///     var g12 = new Snowflake.GrantPrivilegesToRole("g12", new()
    ///     {
    ///         Privileges = new[]
    ///         {
    ///             "SELECT",
    ///             "INSERT",
    ///         },
    ///         RoleName = r.Name,
    ///         OnSchemaObject = new Snowflake.Inputs.GrantPrivilegesToRoleOnSchemaObjectArgs
    ///         {
    ///             All = new Snowflake.Inputs.GrantPrivilegesToRoleOnSchemaObjectAllArgs
    ///             {
    ///                 ObjectTypePlural = "TABLES",
    ///                 InSchema = "\"my_db\".\"my_schema\"",
    ///             },
    ///         },
    ///     });
    /// 
    ///     // future in database
    ///     var g13 = new Snowflake.GrantPrivilegesToRole("g13", new()
    ///     {
    ///         Privileges = new[]
    ///         {
    ///             "SELECT",
    ///             "INSERT",
    ///         },
    ///         RoleName = r.Name,
    ///         OnSchemaObject = new Snowflake.Inputs.GrantPrivilegesToRoleOnSchemaObjectArgs
    ///         {
    ///             Future = new Snowflake.Inputs.GrantPrivilegesToRoleOnSchemaObjectFutureArgs
    ///             {
    ///                 ObjectTypePlural = "TABLES",
    ///                 InDatabase = d.Name,
    ///             },
    ///         },
    ///     });
    /// 
    ///     // future in schema
    ///     var g14 = new Snowflake.GrantPrivilegesToRole("g14", new()
    ///     {
    ///         Privileges = new[]
    ///         {
    ///             "SELECT",
    ///             "INSERT",
    ///         },
    ///         RoleName = r.Name,
    ///         OnSchemaObject = new Snowflake.Inputs.GrantPrivilegesToRoleOnSchemaObjectArgs
    ///         {
    ///             Future = new Snowflake.Inputs.GrantPrivilegesToRoleOnSchemaObjectFutureArgs
    ///             {
    ///                 ObjectTypePlural = "TABLES",
    ///                 InSchema = "\"my_db\".\"my_schema\"",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// format is role_name (string) | privileges (comma-delimited string) | all_privileges (bool) |with_grant_option (bool) | on_account (bool) | on_account_object (bool) | on_schema (bool) | on_schema_object (bool) | all (bool) | future (bool) | object_type (string) | object_name (string) | object_type_plural (string) | in_schema (bool) | schema_name (string) | in_database (bool) | database_name (string)
    /// 
    /// ```sh
    /// $ pulumi import snowflake:index/grantPrivilegesToRole:GrantPrivilegesToRole "test_role|MANAGE GRANTS,MONITOR USAGE|false|false|true|false|false|false|false|false||||false||false|"
    /// ```
    /// </summary>
    [SnowflakeResourceType("snowflake:index/grantPrivilegesToRole:GrantPrivilegesToRole")]
    public partial class GrantPrivilegesToRole : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Grant all privileges on the account role.
        /// </summary>
        [Output("allPrivileges")]
        public Output<bool?> AllPrivileges { get; private set; } = null!;

        /// <summary>
        /// If true, the privileges will be granted on the account.
        /// </summary>
        [Output("onAccount")]
        public Output<bool?> OnAccount { get; private set; } = null!;

        /// <summary>
        /// Specifies the account object on which privileges will be granted
        /// </summary>
        [Output("onAccountObject")]
        public Output<Outputs.GrantPrivilegesToRoleOnAccountObject?> OnAccountObject { get; private set; } = null!;

        /// <summary>
        /// Specifies the schema on which privileges will be granted.
        /// </summary>
        [Output("onSchema")]
        public Output<Outputs.GrantPrivilegesToRoleOnSchema?> OnSchema { get; private set; } = null!;

        /// <summary>
        /// Specifies the schema object on which privileges will be granted.
        /// </summary>
        [Output("onSchemaObject")]
        public Output<Outputs.GrantPrivilegesToRoleOnSchemaObject?> OnSchemaObject { get; private set; } = null!;

        /// <summary>
        /// The privileges to grant on the account role.
        /// </summary>
        [Output("privileges")]
        public Output<ImmutableArray<string>> Privileges { get; private set; } = null!;

        /// <summary>
        /// The fully qualified name of the role to which privileges will be granted.
        /// </summary>
        [Output("roleName")]
        public Output<string> RoleName { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the grantee can grant the privileges to other users.
        /// </summary>
        [Output("withGrantOption")]
        public Output<bool?> WithGrantOption { get; private set; } = null!;


        /// <summary>
        /// Create a GrantPrivilegesToRole resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GrantPrivilegesToRole(string name, GrantPrivilegesToRoleArgs args, CustomResourceOptions? options = null)
            : base("snowflake:index/grantPrivilegesToRole:GrantPrivilegesToRole", name, args ?? new GrantPrivilegesToRoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GrantPrivilegesToRole(string name, Input<string> id, GrantPrivilegesToRoleState? state = null, CustomResourceOptions? options = null)
            : base("snowflake:index/grantPrivilegesToRole:GrantPrivilegesToRole", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GrantPrivilegesToRole resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GrantPrivilegesToRole Get(string name, Input<string> id, GrantPrivilegesToRoleState? state = null, CustomResourceOptions? options = null)
        {
            return new GrantPrivilegesToRole(name, id, state, options);
        }
    }

    public sealed class GrantPrivilegesToRoleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Grant all privileges on the account role.
        /// </summary>
        [Input("allPrivileges")]
        public Input<bool>? AllPrivileges { get; set; }

        /// <summary>
        /// If true, the privileges will be granted on the account.
        /// </summary>
        [Input("onAccount")]
        public Input<bool>? OnAccount { get; set; }

        /// <summary>
        /// Specifies the account object on which privileges will be granted
        /// </summary>
        [Input("onAccountObject")]
        public Input<Inputs.GrantPrivilegesToRoleOnAccountObjectArgs>? OnAccountObject { get; set; }

        /// <summary>
        /// Specifies the schema on which privileges will be granted.
        /// </summary>
        [Input("onSchema")]
        public Input<Inputs.GrantPrivilegesToRoleOnSchemaArgs>? OnSchema { get; set; }

        /// <summary>
        /// Specifies the schema object on which privileges will be granted.
        /// </summary>
        [Input("onSchemaObject")]
        public Input<Inputs.GrantPrivilegesToRoleOnSchemaObjectArgs>? OnSchemaObject { get; set; }

        [Input("privileges")]
        private InputList<string>? _privileges;

        /// <summary>
        /// The privileges to grant on the account role.
        /// </summary>
        public InputList<string> Privileges
        {
            get => _privileges ?? (_privileges = new InputList<string>());
            set => _privileges = value;
        }

        /// <summary>
        /// The fully qualified name of the role to which privileges will be granted.
        /// </summary>
        [Input("roleName", required: true)]
        public Input<string> RoleName { get; set; } = null!;

        /// <summary>
        /// Specifies whether the grantee can grant the privileges to other users.
        /// </summary>
        [Input("withGrantOption")]
        public Input<bool>? WithGrantOption { get; set; }

        public GrantPrivilegesToRoleArgs()
        {
        }
        public static new GrantPrivilegesToRoleArgs Empty => new GrantPrivilegesToRoleArgs();
    }

    public sealed class GrantPrivilegesToRoleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Grant all privileges on the account role.
        /// </summary>
        [Input("allPrivileges")]
        public Input<bool>? AllPrivileges { get; set; }

        /// <summary>
        /// If true, the privileges will be granted on the account.
        /// </summary>
        [Input("onAccount")]
        public Input<bool>? OnAccount { get; set; }

        /// <summary>
        /// Specifies the account object on which privileges will be granted
        /// </summary>
        [Input("onAccountObject")]
        public Input<Inputs.GrantPrivilegesToRoleOnAccountObjectGetArgs>? OnAccountObject { get; set; }

        /// <summary>
        /// Specifies the schema on which privileges will be granted.
        /// </summary>
        [Input("onSchema")]
        public Input<Inputs.GrantPrivilegesToRoleOnSchemaGetArgs>? OnSchema { get; set; }

        /// <summary>
        /// Specifies the schema object on which privileges will be granted.
        /// </summary>
        [Input("onSchemaObject")]
        public Input<Inputs.GrantPrivilegesToRoleOnSchemaObjectGetArgs>? OnSchemaObject { get; set; }

        [Input("privileges")]
        private InputList<string>? _privileges;

        /// <summary>
        /// The privileges to grant on the account role.
        /// </summary>
        public InputList<string> Privileges
        {
            get => _privileges ?? (_privileges = new InputList<string>());
            set => _privileges = value;
        }

        /// <summary>
        /// The fully qualified name of the role to which privileges will be granted.
        /// </summary>
        [Input("roleName")]
        public Input<string>? RoleName { get; set; }

        /// <summary>
        /// Specifies whether the grantee can grant the privileges to other users.
        /// </summary>
        [Input("withGrantOption")]
        public Input<bool>? WithGrantOption { get; set; }

        public GrantPrivilegesToRoleState()
        {
        }
        public static new GrantPrivilegesToRoleState Empty => new GrantPrivilegesToRoleState();
    }
}
