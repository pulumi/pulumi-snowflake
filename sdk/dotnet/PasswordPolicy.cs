// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    /// <summary>
    /// A password policy specifies the requirements that must be met to create and reset a password to authenticate to Snowflake.
    /// </summary>
    [SnowflakeResourceType("snowflake:index/passwordPolicy:PasswordPolicy")]
    public partial class PasswordPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Adds a comment or overwrites an existing comment for the password policy.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// The database this password policy belongs to.
        /// </summary>
        [Output("database")]
        public Output<string> Database { get; private set; } = null!;

        /// <summary>
        /// Prevent overwriting a previous password policy with the same name.
        /// </summary>
        [Output("ifNotExists")]
        public Output<bool?> IfNotExists { get; private set; } = null!;

        /// <summary>
        /// Specifies the number of minutes the user account will be locked after exhausting the designated number of password retries (i.e. PASSWORD*MAX*RETRIES). Supported range: 1 to 999, inclusive. Default: 15
        /// </summary>
        [Output("lockoutTimeMins")]
        public Output<int?> LockoutTimeMins { get; private set; } = null!;

        /// <summary>
        /// Specifies the maximum number of days before the password must be changed. Supported range: 0 to 999, inclusive. A value of zero (i.e. 0) indicates that the password does not need to be changed. Snowflake does not recommend choosing this value for a default account-level password policy or for any user-level policy. Instead, choose a value that meets your internal security guidelines. Default: 90, which means the password must be changed every 90 days.
        /// </summary>
        [Output("maxAgeDays")]
        public Output<int?> MaxAgeDays { get; private set; } = null!;

        /// <summary>
        /// Specifies the maximum number of characters the password must contain. This number must be greater than or equal to the sum of PASSWORD*MIN*LENGTH, PASSWORD*MIN*UPPER*CASE*CHARS, and PASSWORD*MIN*LOWER*CASE*CHARS. Supported range: 8 to 256, inclusive. Default: 256
        /// </summary>
        [Output("maxLength")]
        public Output<int?> MaxLength { get; private set; } = null!;

        /// <summary>
        /// Specifies the maximum number of attempts to enter a password before being locked out. Supported range: 1 to 10, inclusive. Default: 5
        /// </summary>
        [Output("maxRetries")]
        public Output<int?> MaxRetries { get; private set; } = null!;

        /// <summary>
        /// Specifies the minimum number of characters the password must contain. Supported range: 8 to 256, inclusive. Default: 8
        /// </summary>
        [Output("minLength")]
        public Output<int?> MinLength { get; private set; } = null!;

        /// <summary>
        /// Specifies the minimum number of lowercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1
        /// </summary>
        [Output("minLowerCaseChars")]
        public Output<int?> MinLowerCaseChars { get; private set; } = null!;

        /// <summary>
        /// Specifies the minimum number of numeric characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1
        /// </summary>
        [Output("minNumericChars")]
        public Output<int?> MinNumericChars { get; private set; } = null!;

        /// <summary>
        /// Specifies the minimum number of special characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1
        /// </summary>
        [Output("minSpecialChars")]
        public Output<int?> MinSpecialChars { get; private set; } = null!;

        /// <summary>
        /// Specifies the minimum number of uppercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1
        /// </summary>
        [Output("minUpperCaseChars")]
        public Output<int?> MinUpperCaseChars { get; private set; } = null!;

        /// <summary>
        /// Identifier for the password policy; must be unique for your account.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Whether to override a previous password policy with the same name.
        /// </summary>
        [Output("orReplace")]
        public Output<bool?> OrReplace { get; private set; } = null!;

        /// <summary>
        /// The schema this password policy belongs to.
        /// </summary>
        [Output("schema")]
        public Output<string> Schema { get; private set; } = null!;


        /// <summary>
        /// Create a PasswordPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PasswordPolicy(string name, PasswordPolicyArgs args, CustomResourceOptions? options = null)
            : base("snowflake:index/passwordPolicy:PasswordPolicy", name, args ?? new PasswordPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PasswordPolicy(string name, Input<string> id, PasswordPolicyState? state = null, CustomResourceOptions? options = null)
            : base("snowflake:index/passwordPolicy:PasswordPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PasswordPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PasswordPolicy Get(string name, Input<string> id, PasswordPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new PasswordPolicy(name, id, state, options);
        }
    }

    public sealed class PasswordPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Adds a comment or overwrites an existing comment for the password policy.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// The database this password policy belongs to.
        /// </summary>
        [Input("database", required: true)]
        public Input<string> Database { get; set; } = null!;

        /// <summary>
        /// Prevent overwriting a previous password policy with the same name.
        /// </summary>
        [Input("ifNotExists")]
        public Input<bool>? IfNotExists { get; set; }

        /// <summary>
        /// Specifies the number of minutes the user account will be locked after exhausting the designated number of password retries (i.e. PASSWORD*MAX*RETRIES). Supported range: 1 to 999, inclusive. Default: 15
        /// </summary>
        [Input("lockoutTimeMins")]
        public Input<int>? LockoutTimeMins { get; set; }

        /// <summary>
        /// Specifies the maximum number of days before the password must be changed. Supported range: 0 to 999, inclusive. A value of zero (i.e. 0) indicates that the password does not need to be changed. Snowflake does not recommend choosing this value for a default account-level password policy or for any user-level policy. Instead, choose a value that meets your internal security guidelines. Default: 90, which means the password must be changed every 90 days.
        /// </summary>
        [Input("maxAgeDays")]
        public Input<int>? MaxAgeDays { get; set; }

        /// <summary>
        /// Specifies the maximum number of characters the password must contain. This number must be greater than or equal to the sum of PASSWORD*MIN*LENGTH, PASSWORD*MIN*UPPER*CASE*CHARS, and PASSWORD*MIN*LOWER*CASE*CHARS. Supported range: 8 to 256, inclusive. Default: 256
        /// </summary>
        [Input("maxLength")]
        public Input<int>? MaxLength { get; set; }

        /// <summary>
        /// Specifies the maximum number of attempts to enter a password before being locked out. Supported range: 1 to 10, inclusive. Default: 5
        /// </summary>
        [Input("maxRetries")]
        public Input<int>? MaxRetries { get; set; }

        /// <summary>
        /// Specifies the minimum number of characters the password must contain. Supported range: 8 to 256, inclusive. Default: 8
        /// </summary>
        [Input("minLength")]
        public Input<int>? MinLength { get; set; }

        /// <summary>
        /// Specifies the minimum number of lowercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1
        /// </summary>
        [Input("minLowerCaseChars")]
        public Input<int>? MinLowerCaseChars { get; set; }

        /// <summary>
        /// Specifies the minimum number of numeric characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1
        /// </summary>
        [Input("minNumericChars")]
        public Input<int>? MinNumericChars { get; set; }

        /// <summary>
        /// Specifies the minimum number of special characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1
        /// </summary>
        [Input("minSpecialChars")]
        public Input<int>? MinSpecialChars { get; set; }

        /// <summary>
        /// Specifies the minimum number of uppercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1
        /// </summary>
        [Input("minUpperCaseChars")]
        public Input<int>? MinUpperCaseChars { get; set; }

        /// <summary>
        /// Identifier for the password policy; must be unique for your account.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether to override a previous password policy with the same name.
        /// </summary>
        [Input("orReplace")]
        public Input<bool>? OrReplace { get; set; }

        /// <summary>
        /// The schema this password policy belongs to.
        /// </summary>
        [Input("schema", required: true)]
        public Input<string> Schema { get; set; } = null!;

        public PasswordPolicyArgs()
        {
        }
        public static new PasswordPolicyArgs Empty => new PasswordPolicyArgs();
    }

    public sealed class PasswordPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Adds a comment or overwrites an existing comment for the password policy.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// The database this password policy belongs to.
        /// </summary>
        [Input("database")]
        public Input<string>? Database { get; set; }

        /// <summary>
        /// Prevent overwriting a previous password policy with the same name.
        /// </summary>
        [Input("ifNotExists")]
        public Input<bool>? IfNotExists { get; set; }

        /// <summary>
        /// Specifies the number of minutes the user account will be locked after exhausting the designated number of password retries (i.e. PASSWORD*MAX*RETRIES). Supported range: 1 to 999, inclusive. Default: 15
        /// </summary>
        [Input("lockoutTimeMins")]
        public Input<int>? LockoutTimeMins { get; set; }

        /// <summary>
        /// Specifies the maximum number of days before the password must be changed. Supported range: 0 to 999, inclusive. A value of zero (i.e. 0) indicates that the password does not need to be changed. Snowflake does not recommend choosing this value for a default account-level password policy or for any user-level policy. Instead, choose a value that meets your internal security guidelines. Default: 90, which means the password must be changed every 90 days.
        /// </summary>
        [Input("maxAgeDays")]
        public Input<int>? MaxAgeDays { get; set; }

        /// <summary>
        /// Specifies the maximum number of characters the password must contain. This number must be greater than or equal to the sum of PASSWORD*MIN*LENGTH, PASSWORD*MIN*UPPER*CASE*CHARS, and PASSWORD*MIN*LOWER*CASE*CHARS. Supported range: 8 to 256, inclusive. Default: 256
        /// </summary>
        [Input("maxLength")]
        public Input<int>? MaxLength { get; set; }

        /// <summary>
        /// Specifies the maximum number of attempts to enter a password before being locked out. Supported range: 1 to 10, inclusive. Default: 5
        /// </summary>
        [Input("maxRetries")]
        public Input<int>? MaxRetries { get; set; }

        /// <summary>
        /// Specifies the minimum number of characters the password must contain. Supported range: 8 to 256, inclusive. Default: 8
        /// </summary>
        [Input("minLength")]
        public Input<int>? MinLength { get; set; }

        /// <summary>
        /// Specifies the minimum number of lowercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1
        /// </summary>
        [Input("minLowerCaseChars")]
        public Input<int>? MinLowerCaseChars { get; set; }

        /// <summary>
        /// Specifies the minimum number of numeric characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1
        /// </summary>
        [Input("minNumericChars")]
        public Input<int>? MinNumericChars { get; set; }

        /// <summary>
        /// Specifies the minimum number of special characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1
        /// </summary>
        [Input("minSpecialChars")]
        public Input<int>? MinSpecialChars { get; set; }

        /// <summary>
        /// Specifies the minimum number of uppercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1
        /// </summary>
        [Input("minUpperCaseChars")]
        public Input<int>? MinUpperCaseChars { get; set; }

        /// <summary>
        /// Identifier for the password policy; must be unique for your account.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether to override a previous password policy with the same name.
        /// </summary>
        [Input("orReplace")]
        public Input<bool>? OrReplace { get; set; }

        /// <summary>
        /// The schema this password policy belongs to.
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        public PasswordPolicyState()
        {
        }
        public static new PasswordPolicyState Empty => new PasswordPolicyState();
    }
}
