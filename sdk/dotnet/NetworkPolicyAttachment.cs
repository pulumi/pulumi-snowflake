// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Snowflake = Pulumi.Snowflake;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var attach = new Snowflake.NetworkPolicyAttachment("attach", new()
    ///     {
    ///         NetworkPolicyName = "policy",
    ///         SetForAccount = false,
    ///         Users = new[]
    ///         {
    ///             "user1",
    ///             "user2",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import snowflake:index/networkPolicyAttachment:NetworkPolicyAttachment example attachment_policyname
    /// ```
    /// </summary>
    [SnowflakeResourceType("snowflake:index/networkPolicyAttachment:NetworkPolicyAttachment")]
    public partial class NetworkPolicyAttachment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.
        /// </summary>
        [Output("networkPolicyName")]
        public Output<string> NetworkPolicyName { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the network policy should be applied globally to your Snowflake account&lt;br&gt;&lt;br&gt;**Note:** The Snowflake
        /// user running `terraform apply` must be on an IP address allowed by the network policy to set that policy globally on the
        /// Snowflake account.&lt;br&gt;&lt;br&gt;Additionally, a Snowflake account can only have one network policy set globally at any given
        /// time. This resource does not enforce one-policy-per-account, it is the user's responsibility to enforce this. If
        /// multiple network policy resources have `set_for_account: true`, the final policy set on the account will be
        /// non-deterministic.
        /// </summary>
        [Output("setForAccount")]
        public Output<bool?> SetForAccount { get; private set; } = null!;

        /// <summary>
        /// Specifies which users the network policy should be attached to
        /// </summary>
        [Output("users")]
        public Output<ImmutableArray<string>> Users { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkPolicyAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkPolicyAttachment(string name, NetworkPolicyAttachmentArgs args, CustomResourceOptions? options = null)
            : base("snowflake:index/networkPolicyAttachment:NetworkPolicyAttachment", name, args ?? new NetworkPolicyAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkPolicyAttachment(string name, Input<string> id, NetworkPolicyAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("snowflake:index/networkPolicyAttachment:NetworkPolicyAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkPolicyAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkPolicyAttachment Get(string name, Input<string> id, NetworkPolicyAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkPolicyAttachment(name, id, state, options);
        }
    }

    public sealed class NetworkPolicyAttachmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.
        /// </summary>
        [Input("networkPolicyName", required: true)]
        public Input<string> NetworkPolicyName { get; set; } = null!;

        /// <summary>
        /// Specifies whether the network policy should be applied globally to your Snowflake account&lt;br&gt;&lt;br&gt;**Note:** The Snowflake
        /// user running `terraform apply` must be on an IP address allowed by the network policy to set that policy globally on the
        /// Snowflake account.&lt;br&gt;&lt;br&gt;Additionally, a Snowflake account can only have one network policy set globally at any given
        /// time. This resource does not enforce one-policy-per-account, it is the user's responsibility to enforce this. If
        /// multiple network policy resources have `set_for_account: true`, the final policy set on the account will be
        /// non-deterministic.
        /// </summary>
        [Input("setForAccount")]
        public Input<bool>? SetForAccount { get; set; }

        [Input("users")]
        private InputList<string>? _users;

        /// <summary>
        /// Specifies which users the network policy should be attached to
        /// </summary>
        public InputList<string> Users
        {
            get => _users ?? (_users = new InputList<string>());
            set => _users = value;
        }

        public NetworkPolicyAttachmentArgs()
        {
        }
        public static new NetworkPolicyAttachmentArgs Empty => new NetworkPolicyAttachmentArgs();
    }

    public sealed class NetworkPolicyAttachmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.
        /// </summary>
        [Input("networkPolicyName")]
        public Input<string>? NetworkPolicyName { get; set; }

        /// <summary>
        /// Specifies whether the network policy should be applied globally to your Snowflake account&lt;br&gt;&lt;br&gt;**Note:** The Snowflake
        /// user running `terraform apply` must be on an IP address allowed by the network policy to set that policy globally on the
        /// Snowflake account.&lt;br&gt;&lt;br&gt;Additionally, a Snowflake account can only have one network policy set globally at any given
        /// time. This resource does not enforce one-policy-per-account, it is the user's responsibility to enforce this. If
        /// multiple network policy resources have `set_for_account: true`, the final policy set on the account will be
        /// non-deterministic.
        /// </summary>
        [Input("setForAccount")]
        public Input<bool>? SetForAccount { get; set; }

        [Input("users")]
        private InputList<string>? _users;

        /// <summary>
        /// Specifies which users the network policy should be attached to
        /// </summary>
        public InputList<string> Users
        {
            get => _users ?? (_users = new InputList<string>());
            set => _users = value;
        }

        public NetworkPolicyAttachmentState()
        {
        }
        public static new NetworkPolicyAttachmentState Empty => new NetworkPolicyAttachmentState();
    }
}
