// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake.Outputs
{

    [OutputType]
    public sealed class StorageIntegrationDescribeOutput
    {
        public readonly ImmutableArray<Outputs.StorageIntegrationDescribeOutputAzureConsentUrl> AzureConsentUrls;
        public readonly ImmutableArray<Outputs.StorageIntegrationDescribeOutputAzureMultiTenantAppName> AzureMultiTenantAppNames;
        public readonly ImmutableArray<Outputs.StorageIntegrationDescribeOutputComment> Comments;
        public readonly ImmutableArray<Outputs.StorageIntegrationDescribeOutputEnabled> Enableds;
        public readonly ImmutableArray<Outputs.StorageIntegrationDescribeOutputStorageAllowedLocation> StorageAllowedLocations;
        public readonly ImmutableArray<Outputs.StorageIntegrationDescribeOutputStorageAwsExternalId> StorageAwsExternalIds;
        public readonly ImmutableArray<Outputs.StorageIntegrationDescribeOutputStorageAwsIamUserArn> StorageAwsIamUserArns;
        public readonly ImmutableArray<Outputs.StorageIntegrationDescribeOutputStorageAwsObjectAcl> StorageAwsObjectAcls;
        public readonly ImmutableArray<Outputs.StorageIntegrationDescribeOutputStorageAwsRoleArn> StorageAwsRoleArns;
        public readonly ImmutableArray<Outputs.StorageIntegrationDescribeOutputStorageBlockedLocation> StorageBlockedLocations;
        public readonly ImmutableArray<Outputs.StorageIntegrationDescribeOutputStorageGcpServiceAccount> StorageGcpServiceAccounts;
        public readonly ImmutableArray<Outputs.StorageIntegrationDescribeOutputStorageProvider> StorageProviders;
        public readonly ImmutableArray<Outputs.StorageIntegrationDescribeOutputUsePrivatelinkEndpoint> UsePrivatelinkEndpoints;

        [OutputConstructor]
        private StorageIntegrationDescribeOutput(
            ImmutableArray<Outputs.StorageIntegrationDescribeOutputAzureConsentUrl> azureConsentUrls,

            ImmutableArray<Outputs.StorageIntegrationDescribeOutputAzureMultiTenantAppName> azureMultiTenantAppNames,

            ImmutableArray<Outputs.StorageIntegrationDescribeOutputComment> comments,

            ImmutableArray<Outputs.StorageIntegrationDescribeOutputEnabled> enableds,

            ImmutableArray<Outputs.StorageIntegrationDescribeOutputStorageAllowedLocation> storageAllowedLocations,

            ImmutableArray<Outputs.StorageIntegrationDescribeOutputStorageAwsExternalId> storageAwsExternalIds,

            ImmutableArray<Outputs.StorageIntegrationDescribeOutputStorageAwsIamUserArn> storageAwsIamUserArns,

            ImmutableArray<Outputs.StorageIntegrationDescribeOutputStorageAwsObjectAcl> storageAwsObjectAcls,

            ImmutableArray<Outputs.StorageIntegrationDescribeOutputStorageAwsRoleArn> storageAwsRoleArns,

            ImmutableArray<Outputs.StorageIntegrationDescribeOutputStorageBlockedLocation> storageBlockedLocations,

            ImmutableArray<Outputs.StorageIntegrationDescribeOutputStorageGcpServiceAccount> storageGcpServiceAccounts,

            ImmutableArray<Outputs.StorageIntegrationDescribeOutputStorageProvider> storageProviders,

            ImmutableArray<Outputs.StorageIntegrationDescribeOutputUsePrivatelinkEndpoint> usePrivatelinkEndpoints)
        {
            AzureConsentUrls = azureConsentUrls;
            AzureMultiTenantAppNames = azureMultiTenantAppNames;
            Comments = comments;
            Enableds = enableds;
            StorageAllowedLocations = storageAllowedLocations;
            StorageAwsExternalIds = storageAwsExternalIds;
            StorageAwsIamUserArns = storageAwsIamUserArns;
            StorageAwsObjectAcls = storageAwsObjectAcls;
            StorageAwsRoleArns = storageAwsRoleArns;
            StorageBlockedLocations = storageBlockedLocations;
            StorageGcpServiceAccounts = storageGcpServiceAccounts;
            StorageProviders = storageProviders;
            UsePrivatelinkEndpoints = usePrivatelinkEndpoints;
        }
    }
}
