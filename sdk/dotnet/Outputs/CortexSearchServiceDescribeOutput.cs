// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake.Outputs
{

    [OutputType]
    public sealed class CortexSearchServiceDescribeOutput
    {
        public readonly ImmutableArray<string> AttributeColumns;
        public readonly ImmutableArray<string> Columns;
        public readonly string? Comment;
        public readonly string? CreatedOn;
        public readonly string? DataTimestamp;
        public readonly string? DatabaseName;
        public readonly string? Definition;
        public readonly string? EmbeddingModel;
        public readonly string? IndexingError;
        public readonly string? IndexingState;
        public readonly string? Name;
        public readonly string? SchemaName;
        public readonly string? SearchColumn;
        public readonly string? ServiceQueryUrl;
        public readonly int? SourceDataNumRows;
        public readonly string? TargetLag;
        public readonly string? Warehouse;

        [OutputConstructor]
        private CortexSearchServiceDescribeOutput(
            ImmutableArray<string> attributeColumns,

            ImmutableArray<string> columns,

            string? comment,

            string? createdOn,

            string? dataTimestamp,

            string? databaseName,

            string? definition,

            string? embeddingModel,

            string? indexingError,

            string? indexingState,

            string? name,

            string? schemaName,

            string? searchColumn,

            string? serviceQueryUrl,

            int? sourceDataNumRows,

            string? targetLag,

            string? warehouse)
        {
            AttributeColumns = attributeColumns;
            Columns = columns;
            Comment = comment;
            CreatedOn = createdOn;
            DataTimestamp = dataTimestamp;
            DatabaseName = databaseName;
            Definition = definition;
            EmbeddingModel = embeddingModel;
            IndexingError = indexingError;
            IndexingState = indexingState;
            Name = name;
            SchemaName = schemaName;
            SearchColumn = searchColumn;
            ServiceQueryUrl = serviceQueryUrl;
            SourceDataNumRows = sourceDataNumRows;
            TargetLag = targetLag;
            Warehouse = warehouse;
        }
    }
}
