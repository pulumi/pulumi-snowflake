// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake.Outputs
{

    [OutputType]
    public sealed class GetDatabasesDatabaseParameterResult
    {
        public readonly ImmutableArray<Outputs.GetDatabasesDatabaseParameterCatalogResult> Catalogs;
        public readonly ImmutableArray<Outputs.GetDatabasesDatabaseParameterDataRetentionTimeInDayResult> DataRetentionTimeInDays;
        public readonly ImmutableArray<Outputs.GetDatabasesDatabaseParameterDefaultDdlCollationResult> DefaultDdlCollations;
        public readonly ImmutableArray<Outputs.GetDatabasesDatabaseParameterEnableConsoleOutputResult> EnableConsoleOutputs;
        public readonly ImmutableArray<Outputs.GetDatabasesDatabaseParameterExternalVolumeResult> ExternalVolumes;
        public readonly ImmutableArray<Outputs.GetDatabasesDatabaseParameterLogLevelResult> LogLevels;
        public readonly ImmutableArray<Outputs.GetDatabasesDatabaseParameterMaxDataExtensionTimeInDayResult> MaxDataExtensionTimeInDays;
        public readonly ImmutableArray<Outputs.GetDatabasesDatabaseParameterQuotedIdentifiersIgnoreCaseResult> QuotedIdentifiersIgnoreCases;
        public readonly ImmutableArray<Outputs.GetDatabasesDatabaseParameterReplaceInvalidCharacterResult> ReplaceInvalidCharacters;
        public readonly ImmutableArray<Outputs.GetDatabasesDatabaseParameterStorageSerializationPolicyResult> StorageSerializationPolicies;
        public readonly ImmutableArray<Outputs.GetDatabasesDatabaseParameterSuspendTaskAfterNumFailureResult> SuspendTaskAfterNumFailures;
        public readonly ImmutableArray<Outputs.GetDatabasesDatabaseParameterTaskAutoRetryAttemptResult> TaskAutoRetryAttempts;
        public readonly ImmutableArray<Outputs.GetDatabasesDatabaseParameterTraceLevelResult> TraceLevels;
        public readonly ImmutableArray<Outputs.GetDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSizeResult> UserTaskManagedInitialWarehouseSizes;
        public readonly ImmutableArray<Outputs.GetDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecondResult> UserTaskMinimumTriggerIntervalInSeconds;
        public readonly ImmutableArray<Outputs.GetDatabasesDatabaseParameterUserTaskTimeoutMResult> UserTaskTimeoutMs;

        [OutputConstructor]
        private GetDatabasesDatabaseParameterResult(
            ImmutableArray<Outputs.GetDatabasesDatabaseParameterCatalogResult> catalogs,

            ImmutableArray<Outputs.GetDatabasesDatabaseParameterDataRetentionTimeInDayResult> dataRetentionTimeInDays,

            ImmutableArray<Outputs.GetDatabasesDatabaseParameterDefaultDdlCollationResult> defaultDdlCollations,

            ImmutableArray<Outputs.GetDatabasesDatabaseParameterEnableConsoleOutputResult> enableConsoleOutputs,

            ImmutableArray<Outputs.GetDatabasesDatabaseParameterExternalVolumeResult> externalVolumes,

            ImmutableArray<Outputs.GetDatabasesDatabaseParameterLogLevelResult> logLevels,

            ImmutableArray<Outputs.GetDatabasesDatabaseParameterMaxDataExtensionTimeInDayResult> maxDataExtensionTimeInDays,

            ImmutableArray<Outputs.GetDatabasesDatabaseParameterQuotedIdentifiersIgnoreCaseResult> quotedIdentifiersIgnoreCases,

            ImmutableArray<Outputs.GetDatabasesDatabaseParameterReplaceInvalidCharacterResult> replaceInvalidCharacters,

            ImmutableArray<Outputs.GetDatabasesDatabaseParameterStorageSerializationPolicyResult> storageSerializationPolicies,

            ImmutableArray<Outputs.GetDatabasesDatabaseParameterSuspendTaskAfterNumFailureResult> suspendTaskAfterNumFailures,

            ImmutableArray<Outputs.GetDatabasesDatabaseParameterTaskAutoRetryAttemptResult> taskAutoRetryAttempts,

            ImmutableArray<Outputs.GetDatabasesDatabaseParameterTraceLevelResult> traceLevels,

            ImmutableArray<Outputs.GetDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSizeResult> userTaskManagedInitialWarehouseSizes,

            ImmutableArray<Outputs.GetDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecondResult> userTaskMinimumTriggerIntervalInSeconds,

            ImmutableArray<Outputs.GetDatabasesDatabaseParameterUserTaskTimeoutMResult> userTaskTimeoutMs)
        {
            Catalogs = catalogs;
            DataRetentionTimeInDays = dataRetentionTimeInDays;
            DefaultDdlCollations = defaultDdlCollations;
            EnableConsoleOutputs = enableConsoleOutputs;
            ExternalVolumes = externalVolumes;
            LogLevels = logLevels;
            MaxDataExtensionTimeInDays = maxDataExtensionTimeInDays;
            QuotedIdentifiersIgnoreCases = quotedIdentifiersIgnoreCases;
            ReplaceInvalidCharacters = replaceInvalidCharacters;
            StorageSerializationPolicies = storageSerializationPolicies;
            SuspendTaskAfterNumFailures = suspendTaskAfterNumFailures;
            TaskAutoRetryAttempts = taskAutoRetryAttempts;
            TraceLevels = traceLevels;
            UserTaskManagedInitialWarehouseSizes = userTaskManagedInitialWarehouseSizes;
            UserTaskMinimumTriggerIntervalInSeconds = userTaskMinimumTriggerIntervalInSeconds;
            UserTaskTimeoutMs = userTaskTimeoutMs;
        }
    }
}
