// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake.Outputs
{

    [OutputType]
    public sealed class TaskShowOutput
    {
        public readonly bool? AllowOverlappingExecution;
        public readonly string? Budget;
        public readonly string? Comment;
        public readonly string? Condition;
        public readonly string? Config;
        public readonly string? CreatedOn;
        public readonly string? DatabaseName;
        public readonly string? Definition;
        public readonly string? ErrorIntegration;
        public readonly string? Id;
        public readonly string? LastCommittedOn;
        public readonly string? LastSuspendedOn;
        public readonly string? LastSuspendedReason;
        public readonly string? Name;
        public readonly string? Owner;
        public readonly string? OwnerRoleType;
        public readonly ImmutableArray<string> Predecessors;
        public readonly string? Schedule;
        public readonly string? SchemaName;
        public readonly string? State;
        public readonly ImmutableArray<Outputs.TaskShowOutputTaskRelation> TaskRelations;
        public readonly string? Warehouse;

        [OutputConstructor]
        private TaskShowOutput(
            bool? allowOverlappingExecution,

            string? budget,

            string? comment,

            string? condition,

            string? config,

            string? createdOn,

            string? databaseName,

            string? definition,

            string? errorIntegration,

            string? id,

            string? lastCommittedOn,

            string? lastSuspendedOn,

            string? lastSuspendedReason,

            string? name,

            string? owner,

            string? ownerRoleType,

            ImmutableArray<string> predecessors,

            string? schedule,

            string? schemaName,

            string? state,

            ImmutableArray<Outputs.TaskShowOutputTaskRelation> taskRelations,

            string? warehouse)
        {
            AllowOverlappingExecution = allowOverlappingExecution;
            Budget = budget;
            Comment = comment;
            Condition = condition;
            Config = config;
            CreatedOn = createdOn;
            DatabaseName = databaseName;
            Definition = definition;
            ErrorIntegration = errorIntegration;
            Id = id;
            LastCommittedOn = lastCommittedOn;
            LastSuspendedOn = lastSuspendedOn;
            LastSuspendedReason = lastSuspendedReason;
            Name = name;
            Owner = owner;
            OwnerRoleType = ownerRoleType;
            Predecessors = predecessors;
            Schedule = schedule;
            SchemaName = schemaName;
            State = state;
            TaskRelations = taskRelations;
            Warehouse = warehouse;
        }
    }
}
