// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake.Outputs
{

    [OutputType]
    public sealed class GetServicesServiceShowOutputResult
    {
        public readonly bool AutoResume;
        public readonly int AutoSuspendSecs;
        public readonly string Comment;
        public readonly string ComputePool;
        public readonly string CreatedOn;
        public readonly int CurrentInstances;
        public readonly string DatabaseName;
        public readonly string DnsName;
        public readonly ImmutableArray<string> ExternalAccessIntegrations;
        public readonly bool IsAsyncJob;
        public readonly bool IsJob;
        public readonly bool IsUpgrading;
        public readonly string ManagingObjectDomain;
        public readonly string ManagingObjectName;
        public readonly int MaxInstances;
        public readonly int MinInstances;
        public readonly int MinReadyInstances;
        public readonly string Name;
        public readonly string Owner;
        public readonly string OwnerRoleType;
        public readonly string QueryWarehouse;
        public readonly string ResumedOn;
        public readonly string SchemaName;
        public readonly string SpecDigest;
        public readonly string Status;
        public readonly string SuspendedOn;
        public readonly int TargetInstances;
        public readonly string UpdatedOn;

        [OutputConstructor]
        private GetServicesServiceShowOutputResult(
            bool autoResume,

            int autoSuspendSecs,

            string comment,

            string computePool,

            string createdOn,

            int currentInstances,

            string databaseName,

            string dnsName,

            ImmutableArray<string> externalAccessIntegrations,

            bool isAsyncJob,

            bool isJob,

            bool isUpgrading,

            string managingObjectDomain,

            string managingObjectName,

            int maxInstances,

            int minInstances,

            int minReadyInstances,

            string name,

            string owner,

            string ownerRoleType,

            string queryWarehouse,

            string resumedOn,

            string schemaName,

            string specDigest,

            string status,

            string suspendedOn,

            int targetInstances,

            string updatedOn)
        {
            AutoResume = autoResume;
            AutoSuspendSecs = autoSuspendSecs;
            Comment = comment;
            ComputePool = computePool;
            CreatedOn = createdOn;
            CurrentInstances = currentInstances;
            DatabaseName = databaseName;
            DnsName = dnsName;
            ExternalAccessIntegrations = externalAccessIntegrations;
            IsAsyncJob = isAsyncJob;
            IsJob = isJob;
            IsUpgrading = isUpgrading;
            ManagingObjectDomain = managingObjectDomain;
            ManagingObjectName = managingObjectName;
            MaxInstances = maxInstances;
            MinInstances = minInstances;
            MinReadyInstances = minReadyInstances;
            Name = name;
            Owner = owner;
            OwnerRoleType = ownerRoleType;
            QueryWarehouse = queryWarehouse;
            ResumedOn = resumedOn;
            SchemaName = schemaName;
            SpecDigest = specDigest;
            Status = status;
            SuspendedOn = suspendedOn;
            TargetInstances = targetInstances;
            UpdatedOn = updatedOn;
        }
    }
}
